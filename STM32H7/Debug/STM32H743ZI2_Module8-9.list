
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  08015208  08015208  00025208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017144  08017144  00027144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801714c  0801714c  0002714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08017154  08017154  00027154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000410  24000000  0801715c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001350  24000410  0801756c  00030410  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001760  0801756c  00031760  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c513  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049d0  00000000  00000000  0005c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00061328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  00062b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024fab  00000000  00000000  000a267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dd99  00000000  00000000  000c7625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002353be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075ec  00000000  00000000  00235410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000410 	.word	0x24000410
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080151ec 	.word	0x080151ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000414 	.word	0x24000414
 80002dc:	080151ec 	.word	0x080151ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e fc18 	bl	800ef1c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fca5 	bl	800f048 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00d f93f 	bl	800dbfc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00d f937 	bl	800dbfc <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 360.0f;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009ec <_ZN10AS5047UABI11getDegAngleEv+0x38>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	44ffe000 	.word	0x44ffe000
 80009f0:	43b40000 	.word	0x43b40000

080009f4 <_ZN10AS5047UABI12getMRadAngleEv>:
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6280.0f;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a30 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	44ffe000 	.word	0x44ffe000
 8000a30:	45c44000 	.word	0x45c44000

08000a34 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a3e:	edc7 0a00 	vstr	s1, [r7]
 8000a42:	edd7 0a00 	vldr	s1, [r7]
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f010 ff01 	bl	8011850 <atan2f>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a6a:	f010 fef3 	bl	8011854 <sqrtf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	2002      	movs	r0, #2
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f000 fecb 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	2003      	movs	r0, #3
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f000 febc 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	2004      	movs	r0, #4
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	f000 fead 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <_ZN10RobotJointC1Ev+0xd8>)
 8000b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	3a83126f 	.word	0x3a83126f
 8000b54:	3dcccccd 	.word	0x3dcccccd

08000b58 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6278      	str	r0, [r7, #36]	; 0x24
 8000b78:	ed87 0a08 	vstr	s0, [r7, #32]
 8000b7c:	edc7 0a07 	vstr	s1, [r7, #28]
 8000b80:	ed87 1a06 	vstr	s2, [r7, #24]
 8000b84:	edc7 1a05 	vstr	s3, [r7, #20]
 8000b88:	ed87 2a04 	vstr	s4, [r7, #16]
 8000b8c:	edc7 2a03 	vstr	s5, [r7, #12]
 8000b90:	ed87 3a02 	vstr	s6, [r7, #8]
 8000b94:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000b98:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bb0:	eeb0 0b46 	vmov.f64	d0, d6
 8000bb4:	f010 fe00 	bl	80117b8 <sin>
 8000bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000bc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bd8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bdc:	eeb0 0b46 	vmov.f64	d0, d6
 8000be0:	f010 fd9e 	bl	8011720 <cos>
 8000be4:	eeb0 7b40 	vmov.f64	d7, d0
 8000be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf8:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bfc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c00:	eeb0 0b46 	vmov.f64	d0, d6
 8000c04:	f010 fdd8 	bl	80117b8 <sin>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c20:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c24:	eeb0 0b46 	vmov.f64	d0, d6
 8000c28:	f010 fdc6 	bl	80117b8 <sin>
 8000c2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000c38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c48:	eeb0 0b46 	vmov.f64	d0, d6
 8000c4c:	f010 fd68 	bl	8011720 <cos>
 8000c50:	eeb0 7b40 	vmov.f64	d7, d0
 8000c54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000c5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c60:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000c6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c84:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c8c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000caa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000cb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cbc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cc8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ccc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cd8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cec:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000cf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d04:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d10:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000d14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d20:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000d24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d38:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d40:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d44:	ee77 7a67 	vsub.f32	s15, s14, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d48:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d62:	edd7 6a03 	vldr	s13, [r7, #12]
 8000d66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d76:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d86:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000d8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000da0:	bf00      	nop
 8000da2:	3740      	adds	r7, #64	; 0x40
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	00000000 	.word	0x00000000
 8000dac:	408f4000 	.word	0x408f4000
 8000db0:	439d8000 	.word	0x439d8000
 8000db4:	43bfa000 	.word	0x43bfa000
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	41540000 	.word	0x41540000
 8000dc0:	43b90000 	.word	0x43b90000

08000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b091      	sub	sp, #68	; 0x44
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	61f8      	str	r0, [r7, #28]
 8000dcc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000dd0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000dd4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000dd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ddc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000de0:	edc7 2a01 	vstr	s5, [r7, #4]
 8000de4:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000e1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000e36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000e3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000e6a:	ed97 7a00 	vldr	s14, [r7]
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000eb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000eda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ee6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000eea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efe:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f02:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f1a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f2a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000f3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f44:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000f48:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000f4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f54:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f60:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000f64:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f70:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f78:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000f7c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f80:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000f96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000fa2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000fb2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fba:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000fbe:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000fc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fc6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fca:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fd6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000fda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000fe6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8001000:	bf00      	nop
 8001002:	3744      	adds	r7, #68	; 0x44
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 800100c:	b580      	push	{r7, lr}
 800100e:	ed2d 8b08 	vpush	{d8-d11}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800102a:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001032:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800103a:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001042:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800104a:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001052:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800105a:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	edd7 7a08 	vldr	s15, [r7, #32]
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8001076:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800107a:	edd7 7a00 	vldr	s15, [r7]
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	edd7 7a08 	vldr	s15, [r7, #32]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	2004      	movs	r0, #4
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	f000 fbb3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ca:	eeb0 7b40 	vmov.f64	d7, d0
 80010ce:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80010d2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010da:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 5a00 	vldr	s11, [r3]
 80010ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001106:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800110a:	ed97 7a07 	vldr	s14, [r7, #28]
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800112c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001130:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	2004      	movs	r0, #4
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	f000 fb76 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001144:	eeb0 7b40 	vmov.f64	d7, d0
 8001148:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800114c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001150:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001154:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 5a00 	vldr	s11, [r3]
 8001164:	edd7 7a04 	vldr	s15, [r7, #16]
 8001168:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800116c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001170:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001180:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8001184:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8001192:	edd7 7a08 	vldr	s15, [r7, #32]
 8001196:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	2003      	movs	r0, #3
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	f000 fb3f 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011b2:	eeb0 7b40 	vmov.f64	d7, d0
 80011b6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80011ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80011e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011e8:	edd7 7a00 	vldr	s15, [r7]
 80011ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 5a00 	vldr	s11, [r3]
 80011f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001206:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800120a:	ed97 7a07 	vldr	s14, [r7, #28]
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 6a00 	vldr	s13, [r3]
 800121c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800122c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001230:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	2004      	movs	r0, #4
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	f000 faf6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001244:	eeb0 7b40 	vmov.f64	d7, d0
 8001248:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800124c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001254:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 5a00 	vldr	s11, [r3]
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800126c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001270:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001280:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001284:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	2004      	movs	r0, #4
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f000 fab6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012c4:	eeb0 7b40 	vmov.f64	d7, d0
 80012c8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80012cc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012d4:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 5a00 	vldr	s11, [r3]
 80012e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001300:	ed97 7a07 	vldr	s14, [r7, #28]
 8001304:	edd7 7a02 	vldr	s15, [r7, #8]
 8001308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 6a00 	vldr	s13, [r3]
 8001312:	edd7 7a05 	vldr	s15, [r7, #20]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	2004      	movs	r0, #4
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	f000 fa7b 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800133a:	eeb0 7b40 	vmov.f64	d7, d0
 800133e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001342:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800134a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 5a00 	vldr	s11, [r3]
 800135a:	edd7 7a04 	vldr	s15, [r7, #16]
 800135e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001362:	edd7 7a06 	vldr	s15, [r7, #24]
 8001366:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001372:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001376:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800137a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800137e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001382:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	2004      	movs	r0, #4
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	f000 fa3c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013b8:	eeb0 7b40 	vmov.f64	d7, d0
 80013bc:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80013c0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c8:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 5a00 	vldr	s11, [r3]
 80013d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f0:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80013f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7a00 	vldr	s14, [r3]
 8001408:	edd7 7a05 	vldr	s15, [r7, #20]
 800140c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001410:	edd7 7a07 	vldr	s15, [r7, #28]
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	2004      	movs	r0, #4
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 f9fe 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001434:	eeb0 7b40 	vmov.f64	d7, d0
 8001438:	ee29 6b07 	vmul.f64	d6, d9, d7
 800143c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001444:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 5a00 	vldr	s11, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800146c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001470:	ed97 7a07 	vldr	s14, [r7, #28]
 8001474:	edd7 7a02 	vldr	s15, [r7, #8]
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a05 	vldr	s15, [r7, #20]
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001492:	edd7 7a03 	vldr	s15, [r7, #12]
 8001496:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	2004      	movs	r0, #4
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	f000 f9c3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014aa:	eeb0 7b40 	vmov.f64	d7, d0
 80014ae:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80014b2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ba:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 5a00 	vldr	s11, [r3]
 80014ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e2:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014e6:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014ee:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014f2:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80014f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	2003      	movs	r0, #3
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	f000 f991 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800150e:	eeb0 7b40 	vmov.f64	d7, d0
 8001512:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001516:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800151a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001540:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001544:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	edd7 7a04 	vldr	s15, [r7, #16]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001568:	edd7 7a03 	vldr	s15, [r7, #12]
 800156c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	2003      	movs	r0, #3
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f000 f958 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	eeb0 7b40 	vmov.f64	d7, d0
 8001584:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	2003      	movs	r0, #3
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f000 f942 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015ac:	eeb0 7b40 	vmov.f64	d7, d0
 80015b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80015b8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015da:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	2004      	movs	r0, #4
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f000 f910 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001610:	eeb0 7b40 	vmov.f64	d7, d0
 8001614:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001618:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800161c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001620:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ed93 7a00 	vldr	s14, [r3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 5a00 	vldr	s11, [r3]
 8001630:	edd7 7a04 	vldr	s15, [r7, #16]
 8001634:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001638:	edd7 7a06 	vldr	s15, [r7, #24]
 800163c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001648:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800164c:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001650:	ed97 7a07 	vldr	s14, [r7, #28]
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 6a00 	vldr	s13, [r3]
 8001662:	edd7 7a05 	vldr	s15, [r7, #20]
 8001666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	2004      	movs	r0, #4
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f000 f8d3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800168a:	eeb0 7b40 	vmov.f64	d7, d0
 800168e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001692:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 5a00 	vldr	s11, [r3]
 80016aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016b6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c2:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016c6:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80016ca:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	2002      	movs	r0, #2
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f000 f89c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016f8:	eeb0 7b40 	vmov.f64	d7, d0
 80016fc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001700:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	2003      	movs	r0, #3
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f000 f88a 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800171c:	eeb0 7b40 	vmov.f64	d7, d0
 8001720:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001724:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001728:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001742:	edd7 7a06 	vldr	s15, [r7, #24]
 8001746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800174a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800174e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001752:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	2003      	movs	r0, #3
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f000 f865 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001766:	eeb0 7b40 	vmov.f64	d7, d0
 800176a:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800176e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001772:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001788:	ee36 6b07 	vadd.f64	d6, d6, d7
 800178c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001798:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800179c:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	2004      	movs	r0, #4
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	f000 f82d 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017d6:	eeb0 7b40 	vmov.f64	d7, d0
 80017da:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80017de:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80017e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e6:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 5a00 	vldr	s11, [r3]
 80017f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001802:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001812:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001816:	ee38 7b47 	vsub.f64	d7, d8, d7
 800181a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b08 	vpop	{d8-d11}
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a01 	vstr	s0, [r7, #4]
 800183a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800183c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	ee06 3a90 	vmov	s13, r3
 800184a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800184e:	eeb0 1b46 	vmov.f64	d1, d6
 8001852:	eeb0 0b47 	vmov.f64	d0, d7
 8001856:	f00f fd0f 	bl	8011278 <pow>
 800185a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800185e:	eeb0 0b47 	vmov.f64	d0, d7
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001872:	edd7 7a01 	vldr	s15, [r7, #4]
 8001876:	fefb 7a67 	vrintm.f32	s15, s15
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001892:	edd7 7a01 	vldr	s15, [r7, #4]
 8001896:	fef8 7a67 	vrinta.f32	s15, s15
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	22b4      	movs	r2, #180	; 0xb4
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	761a      	strb	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	22ef      	movs	r2, #239	; 0xef
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
}
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f00b ffaf 	bl	800d894 <HAL_TIM_PWM_Start>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13f      	bne.n	80019d2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691c      	ldr	r4, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	3301      	adds	r3, #1
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f7ff ff86 	bl	8001888 <_ZSt5roundf>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	3301      	adds	r3, #1
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff ff5f 	bl	8001868 <_ZSt5floorf>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	462b      	mov	r3, r5
 80019bc:	4622      	mov	r2, r4
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f9cf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80019d0:	e176      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d13f      	bne.n	8001a5a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691c      	ldr	r4, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f7ff ff42 	bl	8001888 <_ZSt5roundf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	3301      	adds	r3, #1
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	f7ff ff1b 	bl	8001868 <_ZSt5floorf>
 8001a32:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9600      	str	r6, [sp, #0]
 8001a42:	462b      	mov	r3, r5
 8001a44:	4622      	mov	r2, r4
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f98b 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a58:	e132      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d13f      	bne.n	8001ae2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691c      	ldr	r4, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	3301      	adds	r3, #1
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f7ff fefe 	bl	8001888 <_ZSt5roundf>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	f7ff fed7 	bl	8001868 <_ZSt5floorf>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9600      	str	r6, [sp, #0]
 8001aca:	462b      	mov	r3, r5
 8001acc:	4622      	mov	r2, r4
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f947 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ae0:	e0ee      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d13f      	bne.n	8001b6a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691c      	ldr	r4, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	f7ff feba 	bl	8001888 <_ZSt5roundf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b32:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f7ff fe93 	bl	8001868 <_ZSt5floorf>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 3a90 	vmov	r3, s15
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	9600      	str	r6, [sp, #0]
 8001b52:	462b      	mov	r3, r5
 8001b54:	4622      	mov	r2, r4
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f903 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b68:	e0aa      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d144      	bne.n	8001bfc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691c      	ldr	r4, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	3301      	adds	r3, #1
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	f7ff fe76 	bl	8001888 <_ZSt5roundf>
 8001b9c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f7ff fe4f 	bl	8001868 <_ZSt5floorf>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9600      	str	r6, [sp, #0]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	4622      	mov	r2, r4
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8bf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bf0:	e066      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001bf2:	bf00      	nop
 8001bf4:	3d4ccccd 	.word	0x3d4ccccd
 8001bf8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b14      	cmp	r3, #20
 8001c02:	d13f      	bne.n	8001c84 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691c      	ldr	r4, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	3301      	adds	r3, #1
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f7ff fe2d 	bl	8001888 <_ZSt5roundf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c36:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	3301      	adds	r3, #1
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f7ff fe06 	bl	8001868 <_ZSt5floorf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9600      	str	r6, [sp, #0]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	4622      	mov	r2, r4
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f876 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c82:	e01d      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	761a      	strb	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	765a      	strb	r2, [r3, #25]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e5b      	ldrb	r3, [r3, #25]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe09 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d2e:	e000      	b.n	8001d32 <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001d30:	bf00      	nop
}
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fdf3 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d5a:	e000      	b.n	8001d5e <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001d5c:	bf00      	nop
}
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	69f9      	ldr	r1, [r7, #28]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	1a8a      	subs	r2, r1, r2
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	22c7      	movs	r2, #199	; 0xc7
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e08:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001e0e:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001e10:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001e3c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f82f 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	60da      	str	r2, [r3, #12]
}
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	41a00000 	.word	0x41a00000
 8001e34:	469c4000 	.word	0x469c4000
 8001e38:	43480000 	.word	0x43480000
 8001e3c:	00000000 	.word	0x00000000

08001e40 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
}
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f00b fd13 	bl	800d894 <HAL_TIM_PWM_Start>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	ed2d 8b02 	vpush	{d8}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff80 	bl	8001d9c <_ZSt4fabsf>
 8001e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e01b      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7ff ff66 	bl	8001d9c <_ZSt4fabsf>
 8001ed0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	bfac      	ite	ge
 8001ee4:	2301      	movge	r3, #1
 8001ee6:	2300      	movlt	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e001      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f00:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800219c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	f2c0 80db 	blt.w	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f008 fbe7 	bl	800a6f0 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f7ff fc9a 	bl	8001888 <_ZSt5roundf>
 8001f54:	eef0 7a40 	vmov.f32	s15, s0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	ee17 2a90 	vmov	r2, s15
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa5b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f82:	eeb0 7b40 	vmov.f64	d7, d0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f90:	ee17 2a90 	vmov	r2, s15
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001f96:	e1e0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d113      	bne.n	8001fc8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa43 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fc0:	ee17 2a90 	vmov	r2, s15
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fc6:	e1c8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d113      	bne.n	8001ff8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fa2b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ff0:	ee17 2a90 	vmov	r2, s15
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ff6:	e1b0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d113      	bne.n	8002028 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fa13 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002012:	eeb0 7b40 	vmov.f64	d7, d0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002020:	ee17 2a90 	vmov	r2, s15
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002026:	e198      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b10      	cmp	r3, #16
 800202e:	d113      	bne.n	8002058 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f9fb 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002042:	eeb0 7b40 	vmov.f64	d7, d0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002050:	ee17 2a90 	vmov	r2, s15
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002056:	e180      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b14      	cmp	r3, #20
 800205e:	d113      	bne.n	8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f9e3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002072:	eeb0 7b40 	vmov.f64	d7, d0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002080:	ee17 2a90 	vmov	r2, s15
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002086:	e168      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020c4:	e149      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80020cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80021a4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	f200 80e5 	bhi.w	80022a6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f008 fb01 	bl	800a6f0 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	3301      	adds	r3, #1
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002100:	ed97 0a03 	vldr	s0, [r7, #12]
 8002104:	f7ff fe4a 	bl	8001d9c <_ZSt4fabsf>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002110:	eddf 6a23 	vldr	s13, [pc, #140]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f7ff fbb0 	bl	8001888 <_ZSt5roundf>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002136:	ee17 2a90 	vmov	r2, s15
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d113      	bne.n	800216c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f971 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002156:	eeb0 7b40 	vmov.f64	d7, d0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	635a      	str	r2, [r3, #52]	; 0x34
}
 800216a:	e0f6      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d119      	bne.n	80021a8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f959 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
}
 800219a:	e0de      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 800219c:	3a83126f 	.word	0x3a83126f
 80021a0:	4d64e1c0 	.word	0x4d64e1c0
 80021a4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d113      	bne.n	80021d8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f93b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021c2:	eeb0 7b40 	vmov.f64	d7, d0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021d0:	ee17 2a90 	vmov	r2, s15
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021d6:	e0c0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d113      	bne.n	8002208 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f923 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021f2:	eeb0 7b40 	vmov.f64	d7, d0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002206:	e0a8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b10      	cmp	r3, #16
 800220e:	d113      	bne.n	8002238 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f90b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002222:	eeb0 7b40 	vmov.f64	d7, d0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002230:	ee17 2a90 	vmov	r2, s15
 8002234:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002236:	e090      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b14      	cmp	r3, #20
 800223e:	d113      	bne.n	8002268 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f8f3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002252:	eeb0 7b40 	vmov.f64	d7, d0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002260:	ee17 2a90 	vmov	r2, s15
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002266:	e078      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022a4:	e059      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022b8:	e04f      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d105      	bne.n	80022ce <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022cc:	e045      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d105      	bne.n	80022e2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022e0:	e03b      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d105      	bne.n	80022f6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f4:	e031      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d105      	bne.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002308:	e027      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b14      	cmp	r3, #20
 8002310:	d105      	bne.n	800231e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800231c:	e01d      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	ecbd 8b02 	vpop	{d8}
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002374:	ed97 0a00 	vldr	s0, [r7]
 8002378:	f7ff fd10 	bl	8001d9c <_ZSt4fabsf>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023a2:	eeb0 0b47 	vmov.f64	d0, d7
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffe5 	bl	800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80023c4:	eeb0 7b40 	vmov.f64	d7, d0
 80023c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	0000      	movs	r0, r0
 80023dc:	0000      	movs	r0, r0
	...

080023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80023f2:	edd7 7a00 	vldr	s15, [r7]
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a08 	vldr	s15, [r3, #32]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 8002412:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002430 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 8002416:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800241a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fd28 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	704a95d1 	.word	0x704a95d1
 8002434:	40b88b2f 	.word	0x40b88b2f

08002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800244a:	eeb0 0b47 	vmov.f64	d0, d7
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_CRC_Init+0x54>)
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <MX_CRC_Init+0x58>)
 8002460:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_CRC_Init+0x54>)
 8002464:	2201      	movs	r2, #1
 8002466:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_CRC_Init+0x54>)
 800246a:	2201      	movs	r2, #1
 800246c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_CRC_Init+0x54>)
 8002470:	f248 0205 	movw	r2, #32773	; 0x8005
 8002474:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_CRC_Init+0x54>)
 8002478:	2208      	movs	r2, #8
 800247a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_CRC_Init+0x54>)
 800247e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002482:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_CRC_Init+0x54>)
 8002486:	2220      	movs	r2, #32
 8002488:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_CRC_Init+0x54>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_CRC_Init+0x54>)
 8002492:	2201      	movs	r2, #1
 8002494:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_CRC_Init+0x54>)
 8002498:	f004 ff40 	bl	800731c <HAL_CRC_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80024a2:	f002 fceb 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2400042c 	.word	0x2400042c
 80024b0:	58024c00 	.word	0x58024c00

080024b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_CRC_MspInit+0x3c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	58024c00 	.word	0x58024c00
 80024f4:	58024400 	.word	0x58024400

080024f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002504:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <MX_DMA_Init+0xdc>)
 800251e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <MX_DMA_Init+0xdc>)
 800252e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200b      	movs	r0, #11
 8002540:	f004 feab 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002544:	200b      	movs	r0, #11
 8002546:	f004 fec2 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	200c      	movs	r0, #12
 8002550:	f004 fea3 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002554:	200c      	movs	r0, #12
 8002556:	f004 feba 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	200d      	movs	r0, #13
 8002560:	f004 fe9b 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002564:	200d      	movs	r0, #13
 8002566:	f004 feb2 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200e      	movs	r0, #14
 8002570:	f004 fe93 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002574:	200e      	movs	r0, #14
 8002576:	f004 feaa 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200f      	movs	r0, #15
 8002580:	f004 fe8b 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002584:	200f      	movs	r0, #15
 8002586:	f004 fea2 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2010      	movs	r0, #16
 8002590:	f004 fe83 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002594:	2010      	movs	r0, #16
 8002596:	f004 fe9a 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2011      	movs	r0, #17
 80025a0:	f004 fe7b 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025a4:	2011      	movs	r0, #17
 80025a6:	f004 fe92 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	202f      	movs	r0, #47	; 0x2f
 80025b0:	f004 fe73 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80025b4:	202f      	movs	r0, #47	; 0x2f
 80025b6:	f004 fe8a 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2038      	movs	r0, #56	; 0x38
 80025c0:	f004 fe6b 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025c4:	2038      	movs	r0, #56	; 0x38
 80025c6:	f004 fe82 	bl	80072ce <HAL_NVIC_EnableIRQ>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400

080025d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <MX_GPIO_Init+0x234>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	4a85      	ldr	r2, [pc, #532]	; (800280c <MX_GPIO_Init+0x234>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fe:	4b83      	ldr	r3, [pc, #524]	; (800280c <MX_GPIO_Init+0x234>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	4b7f      	ldr	r3, [pc, #508]	; (800280c <MX_GPIO_Init+0x234>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <MX_GPIO_Init+0x234>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <MX_GPIO_Init+0x234>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <MX_GPIO_Init+0x234>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <MX_GPIO_Init+0x234>)
 8002632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <MX_GPIO_Init+0x234>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b70      	ldr	r3, [pc, #448]	; (800280c <MX_GPIO_Init+0x234>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264e:	4a6f      	ldr	r2, [pc, #444]	; (800280c <MX_GPIO_Init+0x234>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <MX_GPIO_Init+0x234>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <MX_GPIO_Init+0x234>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <MX_GPIO_Init+0x234>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <MX_GPIO_Init+0x234>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <MX_GPIO_Init+0x234>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	4a60      	ldr	r2, [pc, #384]	; (800280c <MX_GPIO_Init+0x234>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <MX_GPIO_Init+0x234>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a2:	4b5a      	ldr	r3, [pc, #360]	; (800280c <MX_GPIO_Init+0x234>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <MX_GPIO_Init+0x234>)
 80026aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <MX_GPIO_Init+0x234>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026c0:	2200      	movs	r2, #0
 80026c2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80026c6:	4852      	ldr	r0, [pc, #328]	; (8002810 <MX_GPIO_Init+0x238>)
 80026c8:	f008 f812 	bl	800a6f0 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f24c 0102 	movw	r1, #49154	; 0xc002
 80026d2:	4850      	ldr	r0, [pc, #320]	; (8002814 <MX_GPIO_Init+0x23c>)
 80026d4:	f008 f80c 	bl	800a6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026de:	484e      	ldr	r0, [pc, #312]	; (8002818 <MX_GPIO_Init+0x240>)
 80026e0:	f008 f806 	bl	800a6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	484c      	ldr	r0, [pc, #304]	; (800281c <MX_GPIO_Init+0x244>)
 80026ec:	f008 f800 	bl	800a6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f6:	484a      	ldr	r0, [pc, #296]	; (8002820 <MX_GPIO_Init+0x248>)
 80026f8:	f007 fffa 	bl	800a6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026fc:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002700:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	483e      	ldr	r0, [pc, #248]	; (8002810 <MX_GPIO_Init+0x238>)
 8002716:	f007 fe3b 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 800271a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800271e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4838      	ldr	r0, [pc, #224]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002732:	f007 fe2d 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002736:	f24c 0302 	movw	r3, #49154	; 0xc002
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4831      	ldr	r0, [pc, #196]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002750:	f007 fe1e 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	482a      	ldr	r0, [pc, #168]	; (8002818 <MX_GPIO_Init+0x240>)
 800276e:	f007 fe0f 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4824      	ldr	r0, [pc, #144]	; (800281c <MX_GPIO_Init+0x244>)
 800278c:	f007 fe00 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	481d      	ldr	r0, [pc, #116]	; (8002820 <MX_GPIO_Init+0x248>)
 80027aa:	f007 fdf1 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4817      	ldr	r0, [pc, #92]	; (8002824 <MX_GPIO_Init+0x24c>)
 80027c6:	f007 fde3 	bl	800a390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <MX_GPIO_Init+0x238>)
 80027e0:	f007 fdd6 	bl	800a390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2017      	movs	r0, #23
 80027ea:	f004 fd56 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ee:	2017      	movs	r0, #23
 80027f0:	f004 fd6d 	bl	80072ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2028      	movs	r0, #40	; 0x28
 80027fa:	f004 fd4e 	bl	800729a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027fe:	2028      	movs	r0, #40	; 0x28
 8002800:	f004 fd65 	bl	80072ce <HAL_NVIC_EnableIRQ>

}
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	; 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	58020400 	.word	0x58020400
 8002814:	58021000 	.word	0x58021000
 8002818:	58020c00 	.word	0x58020c00
 800281c:	58020800 	.word	0x58020800
 8002820:	58020000 	.word	0x58020000
 8002824:	58021800 	.word	0x58021800

08002828 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b13      	cmp	r3, #19
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <_Z12Insert_queueii+0x20>
		return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e01e      	b.n	8002886 <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_Z12Insert_queueii+0x70>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <_Z12Insert_queueii+0x3a>
			first = 0;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_Z12Insert_queueii+0x70>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		}
		bot++;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286a:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	490a      	ldr	r1, [pc, #40]	; (800289c <_Z12Insert_queueii+0x74>)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4908      	ldr	r1, [pc, #32]	; (80028a0 <_Z12Insert_queueii+0x78>)
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8002884:	2301      	movs	r3, #1
	}
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2400000c 	.word	0x2400000c
 8002898:	24000008 	.word	0x24000008
 800289c:	24000b48 	.word	0x24000b48
 80028a0:	24000b98 	.word	0x24000b98

080028a4 <_Z10Call_queuev>:

int Call_queue() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <_Z10Call_queuev+0x94>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b2:	d005      	beq.n	80028c0 <_Z10Call_queuev+0x1c>
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <_Z10Call_queuev+0x94>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <_Z10Call_queuev+0x98>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dd01      	ble.n	80028c4 <_Z10Call_queuev+0x20>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <_Z10Call_queuev+0x22>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d026      	beq.n	8002918 <_Z10Call_queuev+0x74>
		printf("Don't have stack in queue \n");
 80028ca:	481d      	ldr	r0, [pc, #116]	; (8002940 <_Z10Call_queuev+0x9c>)
 80028cc:	f010 fc5c 	bl	8013188 <puts>
		for (int num = 0; num <= bot + 1; num++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <_Z10Call_queuev+0x98>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bfd4      	ite	le
 80028e0:	2301      	movle	r3, #1
 80028e2:	2300      	movgt	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <_Z10Call_queuev+0x58>
			queue[num] = 0;
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <_Z10Call_queuev+0xa0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e7eb      	b.n	80028d4 <_Z10Call_queuev+0x30>
		}
		first = -1;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <_Z10Call_queuev+0x94>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002902:	601a      	str	r2, [r3, #0]
		bot = -1;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <_Z10Call_queuev+0x98>)
 8002906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290a:	601a      	str	r2, [r3, #0]
		printf("Clear queue \n");
 800290c:	480e      	ldr	r0, [pc, #56]	; (8002948 <_Z10Call_queuev+0xa4>)
 800290e:	f010 fc3b 	bl	8013188 <puts>
		output = 255;
 8002912:	23ff      	movs	r3, #255	; 0xff
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e00a      	b.n	800292e <_Z10Call_queuev+0x8a>
	} else {
		output = queue[first];
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_Z10Call_queuev+0x94>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <_Z10Call_queuev+0xa0>)
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	607b      	str	r3, [r7, #4]
		first++;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <_Z10Call_queuev+0x94>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <_Z10Call_queuev+0x94>)
 800292c:	6013      	str	r3, [r2, #0]
	}
	return output;
 800292e:	687b      	ldr	r3, [r7, #4]

}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	24000008 	.word	0x24000008
 800293c:	2400000c 	.word	0x2400000c
 8002940:	08015208 	.word	0x08015208
 8002944:	24000b48 	.word	0x24000b48
 8002948:	08015224 	.word	0x08015224

0800294c <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	; 0x48
 8002950:	af00      	add	r7, sp, #0
 8002952:	ed87 0a03 	vstr	s0, [r7, #12]
 8002956:	edc7 0a02 	vstr	s1, [r7, #8]
 800295a:	ed87 1a01 	vstr	s2, [r7, #4]
 800295e:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 8002962:	ed97 7a03 	vldr	s14, [r7, #12]
 8002966:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800296a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800297a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 8002982:	ed97 7a01 	vldr	s14, [r7, #4]
 8002986:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 8002992:	ed97 7a00 	vldr	s14, [r7]
 8002996:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800299a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 80029a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029b8:	edd3 6a00 	vldr	s13, [r3]
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029cc:	edd3 6a00 	vldr	s13, [r3]
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 80029fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	f7fe f825 	bl	8000a5c <_ZSt4sqrtf>
 8002a12:	eef0 7a40 	vmov.f32	s15, s0
 8002a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1a:	eeb1 7b47 	vneg.f64	d7, d7
 8002a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a22:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 8002a26:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8002a2a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002a2e:	f7fe f801 	bl	8000a34 <_ZSt5atan2ff>
 8002a32:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 8002a48:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a4a:	ed93 7a00 	vldr	s14, [r3]
 8002a4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 8002a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a68:	eeb1 7a67 	vneg.f32	s14, s15
 8002a6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a78:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002a88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002aa8:	edd7 0a07 	vldr	s1, [r7, #28]
 8002aac:	ed97 0a08 	vldr	s0, [r7, #32]
 8002ab0:	f7fd ffc0 	bl	8000a34 <_ZSt5atan2ff>
 8002ab4:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002ab8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <_Z6fcb_IKffff+0x208>)
 8002ad2:	ed93 7a00 	vldr	s14, [r3]
 8002ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <_Z6fcb_IKffff+0x20c>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <_Z6fcb_IKffff+0x210>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af2:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 8002af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <_Z6fcb_IKffff+0x214>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 8002b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_Z6fcb_IKffff+0x218>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 8002b1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <_Z6fcb_IKffff+0x21c>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 8002b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b30:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <_Z6fcb_IKffff+0x220>)
 8002b3a:	edc3 7a00 	vstr	s15, [r3]

}
 8002b3e:	bf00      	nop
 8002b40:	3748      	adds	r7, #72	; 0x48
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	447a0000 	.word	0x447a0000
 8002b4c:	24000218 	.word	0x24000218
 8002b50:	24000214 	.word	0x24000214
 8002b54:	24000224 	.word	0x24000224
 8002b58:	24000220 	.word	0x24000220
 8002b5c:	2400021c 	.word	0x2400021c
 8002b60:	24000bfc 	.word	0x24000bfc
 8002b64:	24000c00 	.word	0x24000c00
 8002b68:	24000c04 	.word	0x24000c04
 8002b6c:	24000c08 	.word	0x24000c08

08002b70 <_Z20Update_State_Machinev>:
float offset_y = 9.5; //10.79371
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
void Update_State_Machine() {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	ed2d 8b02 	vpush	{d8}
 8002b76:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <_Z20Update_State_Machinev+0xac>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3b29      	subs	r3, #41	; 0x29
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	f200 83e0 	bhi.w	8003346 <_Z20Update_State_Machinev+0x7d6>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <_Z20Update_State_Machinev+0x1c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	08002eed 	.word	0x08002eed
 8002b94:	08002fe5 	.word	0x08002fe5
 8002b98:	08003347 	.word	0x08003347
 8002b9c:	08003347 	.word	0x08003347
 8002ba0:	08003347 	.word	0x08003347
 8002ba4:	08003347 	.word	0x08003347
 8002ba8:	08003347 	.word	0x08003347
 8002bac:	08003347 	.word	0x08003347
 8002bb0:	08003347 	.word	0x08003347
 8002bb4:	08003355 	.word	0x08003355
 8002bb8:	08003041 	.word	0x08003041
 8002bbc:	08003355 	.word	0x08003355
 8002bc0:	0800315d 	.word	0x0800315d
 8002bc4:	08003355 	.word	0x08003355
 8002bc8:	080032a1 	.word	0x080032a1
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002bcc:	f7ff fe6a 	bl	80028a4 <_Z10Call_queuev>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd4:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	f000 817d 	beq.w	8002eda <_Z20Update_State_Machinev+0x36a>
		{
			if (indexy == 99)
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b63      	cmp	r3, #99	; 0x63
 8002be6:	d10a      	bne.n	8002bfe <_Z20Update_State_Machinev+0x8e>
				{
					Planning_q1 = 1400;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <_Z20Update_State_Machinev+0xb8>)
 8002bec:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1400;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <_Z20Update_State_Machinev+0xc0>)
 8002bf2:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e10e      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
				}
			else if (indexy == 123)
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b7b      	cmp	r3, #123	; 0x7b
 8002c04:	d11c      	bne.n	8002c40 <_Z20Update_State_Machinev+0xd0>
			{
					Planning_q1 = 1100;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <_Z20Update_State_Machinev+0xc8>)
 8002c0a:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <_Z20Update_State_Machinev+0xcc>)
 8002c10:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e0ff      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
 8002c1c:	24000bf0 	.word	0x24000bf0
 8002c20:	24000c14 	.word	0x24000c14
 8002c24:	24000bfc 	.word	0x24000bfc
 8002c28:	44af0000 	.word	0x44af0000
 8002c2c:	24000c04 	.word	0x24000c04
 8002c30:	c4af0000 	.word	0xc4af0000
 8002c34:	24000c08 	.word	0x24000c08
 8002c38:	44898000 	.word	0x44898000
 8002c3c:	c4160000 	.word	0xc4160000
			}
			else
				{
					test_value_r = radias[indexy];
 8002c40:	4bcb      	ldr	r3, [pc, #812]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4acb      	ldr	r2, [pc, #812]	; (8002f74 <_Z20Update_State_Machinev+0x404>)
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c52:	ee17 2a90 	vmov	r2, s15
 8002c56:	4bc8      	ldr	r3, [pc, #800]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c58:	601a      	str	r2, [r3, #0]
					test_value_theta = theta[indexy];
 8002c5a:	4bc5      	ldr	r3, [pc, #788]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4ac7      	ldr	r2, [pc, #796]	; (8002f7c <_Z20Update_State_Machinev+0x40c>)
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 2a90 	vmov	r2, s15
 8002c70:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c72:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta + angle_chess) / 1000.0))) + 0.02289) / 10.0;
 8002c74:	4bc0      	ldr	r3, [pc, #768]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c80:	4bbf      	ldr	r3, [pc, #764]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8c:	4bbd      	ldr	r3, [pc, #756]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c9a:	ed9f 5bab 	vldr	d5, [pc, #684]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002c9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ca2:	eeb0 0b46 	vmov.f64	d0, d6
 8002ca6:	f00e fd3b 	bl	8011720 <cos>
 8002caa:	eeb0 7b40 	vmov.f64	d7, d0
 8002cae:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002cb2:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f50 <_Z20Update_State_Machinev+0x3e0>
 8002cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cba:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f58 <_Z20Update_State_Machinev+0x3e8>
 8002cbe:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002cc2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cce:	4bae      	ldr	r3, [pc, #696]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta + angle_chess) / 1000.0))) + 1.05911) / 10.0;
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ce0:	4ba7      	ldr	r3, [pc, #668]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	4ba5      	ldr	r3, [pc, #660]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfa:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002cfe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d02:	eeb0 0b46 	vmov.f64	d0, d6
 8002d06:	f00e fd57 	bl	80117b8 <sin>
 8002d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002d12:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f60 <_Z20Update_State_Machinev+0x3f0>
 8002d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f68 <_Z20Update_State_Machinev+0x3f8>
 8002d1e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002d22:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d2e:	4b97      	ldr	r3, [pc, #604]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta + angle_chess) / 1000.0)) + offset_x + offset_x_new;
 8002d34:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d5a:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002d5e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d62:	eeb0 0b46 	vmov.f64	d0, d6
 8002d66:	f00e fcdb 	bl	8011720 <cos>
 8002d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d6e:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <_Z20Update_State_Machinev+0x420>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d92:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002d94:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta + angle_chess) / 1000.0)) + offset_y + offset_y_new;
 8002d98:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002da4:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dbe:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002dc2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002dc6:	eeb0 0b46 	vmov.f64	d0, d6
 8002dca:	f00e fcf5 	bl	80117b8 <sin>
 8002dce:	eeb0 7b40 	vmov.f64	d7, d0
 8002dd2:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <_Z20Update_State_Machinev+0x428>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002de0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002de4:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002df2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002df6:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002df8:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, 0);
 8002dfc:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e0c:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f7ff fd98 	bl	800294c <_Z6fcb_IKffff>
				}
				Max_Time = 7;
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e1e:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <_Z20Update_State_Machinev+0x438>)
 8002e20:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e2a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e2e:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <_Z20Update_State_Machinev+0x440>)
 8002e30:	edd3 6a00 	vldr	s13, [r3]
 8002e34:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e38:	eddf 2a59 	vldr	s5, [pc, #356]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e3c:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e40:	eddf 1a57 	vldr	s3, [pc, #348]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e44:	eeb0 1a66 	vmov.f32	s2, s13
 8002e48:	eef0 0a47 	vmov.f32	s1, s14
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	4856      	ldr	r0, [pc, #344]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e52:	f7fd ffb7 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e5e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e62:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <_Z20Update_State_Machinev+0x448>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e6c:	eddf 2a4c 	vldr	s5, [pc, #304]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e70:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e74:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e78:	eeb0 1a66 	vmov.f32	s2, s13
 8002e7c:	eef0 0a47 	vmov.f32	s1, s14
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	484b      	ldr	r0, [pc, #300]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e86:	f7fd ff9d 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002e92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <_Z20Update_State_Machinev+0x450>)
 8002e98:	edd3 6a00 	vldr	s13, [r3]
 8002e9c:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea0:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea4:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea8:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002eac:	eeb0 1a66 	vmov.f32	s2, s13
 8002eb0:	eef0 0a47 	vmov.f32	s1, s14
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	4840      	ldr	r0, [pc, #256]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002eba:	f7fd ff83 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002ecc:	483f      	ldr	r0, [pc, #252]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002ece:	f00a fbd9 	bl	800d684 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ed4:	2234      	movs	r2, #52	; 0x34
 8002ed6:	701a      	strb	r2, [r3, #0]
		}

//		Planning_q1
//		Planning_q3

		break;
 8002ed8:	e23e      	b.n	8003358 <_Z20Update_State_Machinev+0x7e8>
		else if (indexy == 255)
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	f040 823a 	bne.w	8003358 <_Z20Update_State_Machinev+0x7e8>
			control_state = 0;
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
		break;
 8002eea:	e235      	b.n	8003358 <_Z20Update_State_Machinev+0x7e8>

	case 42:
		Max_Time = 12;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002eee:	4a39      	ldr	r2, [pc, #228]	; (8002fd4 <_Z20Update_State_Machinev+0x464>)
 8002ef0:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002f00:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <_Z20Update_State_Machinev+0x46c>)
 8002f06:	edd3 6a00 	vldr	s13, [r3]
 8002f0a:	ed9f 3a25 	vldr	s6, [pc, #148]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f0e:	eddf 2a24 	vldr	s5, [pc, #144]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f12:	ed9f 2a23 	vldr	s4, [pc, #140]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f16:	eddf 1a22 	vldr	s3, [pc, #136]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f1a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f1e:	eef0 0a47 	vmov.f32	s1, s14
 8002f22:	eeb0 0a67 	vmov.f32	s0, s15
 8002f26:	482c      	ldr	r0, [pc, #176]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002f28:	f7fd ff4c 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Down, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002f34:	4825      	ldr	r0, [pc, #148]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002f36:	f00a fba5 	bl	800d684 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002f3c:	2236      	movs	r2, #54	; 0x36
 8002f3e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <_Z20Update_State_Machinev+0x470>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
		break;
 8002f46:	e208      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	408f4000 	.word	0x408f4000
 8002f50:	bc6a7efa 	.word	0xbc6a7efa
 8002f54:	3fc49374 	.word	0x3fc49374
 8002f58:	e59f2baa 	.word	0xe59f2baa
 8002f5c:	3f977079 	.word	0x3f977079
 8002f60:	432ca57a 	.word	0x432ca57a
 8002f64:	3fd2eb1c 	.word	0x3fd2eb1c
 8002f68:	53cddd6e 	.word	0x53cddd6e
 8002f6c:	3ff0f21d 	.word	0x3ff0f21d
 8002f70:	24000c14 	.word	0x24000c14
 8002f74:	24000110 	.word	0x24000110
 8002f78:	24000be8 	.word	0x24000be8
 8002f7c:	24000010 	.word	0x24000010
 8002f80:	24000bec 	.word	0x24000bec
 8002f84:	24000ae8 	.word	0x24000ae8
 8002f88:	24000c0c 	.word	0x24000c0c
 8002f8c:	24000c10 	.word	0x24000c10
 8002f90:	24000228 	.word	0x24000228
 8002f94:	24000c18 	.word	0x24000c18
 8002f98:	2400022c 	.word	0x2400022c
 8002f9c:	24000c1c 	.word	0x24000c1c
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	24000af4 	.word	0x24000af4
 8002fa8:	40e00000 	.word	0x40e00000
 8002fac:	24000560 	.word	0x24000560
 8002fb0:	24000bfc 	.word	0x24000bfc
 8002fb4:	24000728 	.word	0x24000728
 8002fb8:	24000c04 	.word	0x24000c04
 8002fbc:	2400080c 	.word	0x2400080c
 8002fc0:	24000c08 	.word	0x24000c08
 8002fc4:	24000bf8 	.word	0x24000bf8
 8002fc8:	24000b46 	.word	0x24000b46
 8002fcc:	24001094 	.word	0x24001094
 8002fd0:	24000bf0 	.word	0x24000bf0
 8002fd4:	41400000 	.word	0x41400000
 8002fd8:	24000644 	.word	0x24000644
 8002fdc:	24000004 	.word	0x24000004
 8002fe0:	24000af0 	.word	0x24000af0

	case 43:
		Max_Time = 12;
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <_Z20Update_State_Machinev+0x6e0>)
 8002fe6:	4a9b      	ldr	r2, [pc, #620]	; (8003254 <_Z20Update_State_Machinev+0x6e4>)
 8002fe8:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002fea:	4b9b      	ldr	r3, [pc, #620]	; (8003258 <_Z20Update_State_Machinev+0x6e8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ff0:	4b97      	ldr	r3, [pc, #604]	; (8003250 <_Z20Update_State_Machinev+0x6e0>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	4b99      	ldr	r3, [pc, #612]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8002ff8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ffc:	4b98      	ldr	r3, [pc, #608]	; (8003260 <_Z20Update_State_Machinev+0x6f0>)
 8002ffe:	edd3 6a00 	vldr	s13, [r3]
 8003002:	ed9f 3a98 	vldr	s6, [pc, #608]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003006:	eddf 2a97 	vldr	s5, [pc, #604]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800300a:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800300e:	eddf 1a95 	vldr	s3, [pc, #596]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003012:	eeb0 1a66 	vmov.f32	s2, s13
 8003016:	eef0 0a47 	vmov.f32	s1, s14
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	488f      	ldr	r0, [pc, #572]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003020:	f7fd fed0 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <_Z20Update_State_Machinev+0x6f8>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 800302c:	488f      	ldr	r0, [pc, #572]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 800302e:	f00a fb29 	bl	800d684 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8003032:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003034:	2238      	movs	r2, #56	; 0x38
 8003036:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003038:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
		break;
 800303e:	e18c      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8003040:	488a      	ldr	r0, [pc, #552]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 8003042:	f00a fb97 	bl	800d774 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8003046:	4b8c      	ldr	r3, [pc, #560]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 800304e:	4b8b      	ldr	r3, [pc, #556]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8003056:	4b8a      	ldr	r3, [pc, #552]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 800305e:	4b86      	ldr	r3, [pc, #536]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003068:	4b85      	ldr	r3, [pc, #532]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800307c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003080:	4880      	ldr	r0, [pc, #512]	; (8003284 <_Z20Update_State_Machinev+0x714>)
 8003082:	f7ff f9ad 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003086:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800308a:	487f      	ldr	r0, [pc, #508]	; (8003288 <_Z20Update_State_Machinev+0x718>)
 800308c:	f7ff f9a8 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003090:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003094:	487d      	ldr	r0, [pc, #500]	; (800328c <_Z20Update_State_Machinev+0x71c>)
 8003096:	f7ff f9a3 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a76      	ldr	r2, [pc, #472]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030a0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	4a74      	ldr	r2, [pc, #464]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 80030aa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 80030ae:	4b74      	ldr	r3, [pc, #464]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a73      	ldr	r2, [pc, #460]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030b4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 80030e0:	4b65      	ldr	r3, [pc, #404]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 80030f4:	4b60      	ldr	r3, [pc, #384]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8003108:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 800311c:	4b57      	ldr	r3, [pc, #348]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8003126:	4b55      	ldr	r3, [pc, #340]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8003130:	4b52      	ldr	r3, [pc, #328]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003150:	222a      	movs	r2, #42	; 0x2a
 8003152:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		break;
 800315a:	e0fe      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 800315c:	4843      	ldr	r0, [pc, #268]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 800315e:	f00a fb09 	bl	800d774 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 8003162:	4b3e      	ldr	r3, [pc, #248]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 800316a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800316e:	4848      	ldr	r0, [pc, #288]	; (8003290 <_Z20Update_State_Machinev+0x720>)
 8003170:	f7ff f936 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	4a38      	ldr	r2, [pc, #224]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800317a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 800317e:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003192:	4b3a      	ldr	r3, [pc, #232]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800319c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031a0:	4838      	ldr	r0, [pc, #224]	; (8003284 <_Z20Update_State_Machinev+0x714>)
 80031a2:	f7ff f91d 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80031a6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031aa:	4837      	ldr	r0, [pc, #220]	; (8003288 <_Z20Update_State_Machinev+0x718>)
 80031ac:	f7ff f918 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80031b0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031b4:	4835      	ldr	r0, [pc, #212]	; (800328c <_Z20Update_State_Machinev+0x71c>)
 80031b6:	f7ff f913 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <_Z20Update_State_Machinev+0x724>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <_Z20Update_State_Machinev+0x728>)
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <_Z20Update_State_Machinev+0x66c>
			gripper.GripperClose();
 80031d4:	4831      	ldr	r0, [pc, #196]	; (800329c <_Z20Update_State_Machinev+0x72c>)
 80031d6:	f7fe fd99 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
 80031da:	e00f      	b.n	80031fc <_Z20Update_State_Machinev+0x68c>
		} else if (Gripper_State[first - 1] == 2) {
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <_Z20Update_State_Machinev+0x724>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <_Z20Update_State_Machinev+0x728>)
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <_Z20Update_State_Machinev+0x68c>
			gripper.GripperOpen();
 80031f6:	4829      	ldr	r0, [pc, #164]	; (800329c <_Z20Update_State_Machinev+0x72c>)
 80031f8:	f7fe fd9e 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003242:	222b      	movs	r2, #43	; 0x2b
 8003244:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
		break;
 800324c:	e085      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
 800324e:	bf00      	nop
 8003250:	24000af4 	.word	0x24000af4
 8003254:	41400000 	.word	0x41400000
 8003258:	24000b46 	.word	0x24000b46
 800325c:	24000644 	.word	0x24000644
 8003260:	24000000 	.word	0x24000000
 8003264:	00000000 	.word	0x00000000
 8003268:	24000bf8 	.word	0x24000bf8
 800326c:	24001094 	.word	0x24001094
 8003270:	24000bf0 	.word	0x24000bf0
 8003274:	24000af0 	.word	0x24000af0
 8003278:	24000560 	.word	0x24000560
 800327c:	2400080c 	.word	0x2400080c
 8003280:	24000728 	.word	0x24000728
 8003284:	240004c0 	.word	0x240004c0
 8003288:	24000538 	.word	0x24000538
 800328c:	24000510 	.word	0x24000510
 8003290:	240004e8 	.word	0x240004e8
 8003294:	24000008 	.word	0x24000008
 8003298:	24000b98 	.word	0x24000b98
 800329c:	24000ab8 	.word	0x24000ab8
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80032a8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032ac:	482f      	ldr	r0, [pc, #188]	; (800336c <_Z20Update_State_Machinev+0x7fc>)
 80032ae:	f7ff f897 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032b8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <_Z20Update_State_Machinev+0x800>)
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80032c6:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <_Z20Update_State_Machinev+0x804>)
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <_Z20Update_State_Machinev+0x808>)
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80032da:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032de:	4827      	ldr	r0, [pc, #156]	; (800337c <_Z20Update_State_Machinev+0x80c>)
 80032e0:	f7ff f87e 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80032e4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <_Z20Update_State_Machinev+0x810>)
 80032ea:	f7ff f879 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80032ee:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032f2:	4824      	ldr	r0, [pc, #144]	; (8003384 <_Z20Update_State_Machinev+0x814>)
 80032f4:	f7ff f874 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80032f8:	4823      	ldr	r0, [pc, #140]	; (8003388 <_Z20Update_State_Machinev+0x818>)
 80032fa:	f00a fa3b 	bl	800d774 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <_Z20Update_State_Machinev+0x81c>)
 800333a:	2229      	movs	r2, #41	; 0x29
 800333c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <_Z20Update_State_Machinev+0x820>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
		break;
 8003344:	e009      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

	default:
		control_state = 0;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <_Z20Update_State_Machinev+0x81c>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_Z20Update_State_Machinev+0x820>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
		break;
 8003352:	e002      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
		break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
		break;
 8003358:	bf00      	nop
	}
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	ecbd 8b02 	vpop	{d8}
 8003362:	bd80      	pop	{r7, pc}
 8003364:	24000644 	.word	0x24000644
 8003368:	00000000 	.word	0x00000000
 800336c:	240004e8 	.word	0x240004e8
 8003370:	24000560 	.word	0x24000560
 8003374:	24000728 	.word	0x24000728
 8003378:	2400080c 	.word	0x2400080c
 800337c:	240004c0 	.word	0x240004c0
 8003380:	24000538 	.word	0x24000538
 8003384:	24000510 	.word	0x24000510
 8003388:	24001094 	.word	0x24001094
 800338c:	24000bf0 	.word	0x24000bf0
 8003390:	24000af0 	.word	0x24000af0

08003394 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a8f      	ldr	r2, [pc, #572]	; (80035e0 <HAL_UARTEx_RxEventCallback+0x24c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f040 8188 	bne.w	80036ba <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80033aa:	4a8e      	ldr	r2, [pc, #568]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80033ac:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x254>)
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80033ba:	2214      	movs	r2, #20
 80033bc:	2100      	movs	r1, #0
 80033be:	488a      	ldr	r0, [pc, #552]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x254>)
 80033c0:	f00f fa2a 	bl	8012818 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	f240 8166 	bls.w	8003698 <HAL_UARTEx_RxEventCallback+0x304>
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	2b14      	cmp	r3, #20
 80033d0:	f200 8162 	bhi.w	8003698 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	3b02      	subs	r3, #2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033dc:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	497f      	ldr	r1, [pc, #508]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80033e8:	4881      	ldr	r0, [pc, #516]	; (80035f0 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033ea:	f003 fffb 	bl	80073e4 <HAL_CRC_Calculate>
 80033ee:	4603      	mov	r3, r0
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b80      	ldr	r3, [pc, #512]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x260>)
 80033f4:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b79      	ldr	r3, [pc, #484]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003400:	5c9b      	ldrb	r3, [r3, r2]
 8003402:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003404:	b21a      	sxth	r2, r3
 8003406:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	4975      	ldr	r1, [pc, #468]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	b21b      	sxth	r3, r3
 8003414:	4313      	orrs	r3, r2
 8003416:	b21b      	sxth	r3, r3
 8003418:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800341a:	4b77      	ldr	r3, [pc, #476]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x264>)
 800341c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800341e:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x260>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x264>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8151 	beq.w	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	2102      	movs	r1, #2
 800343e:	486f      	ldr	r0, [pc, #444]	; (80035fc <HAL_UARTEx_RxEventCallback+0x268>)
 8003440:	f007 f956 	bl	800a6f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344a:	486d      	ldr	r0, [pc, #436]	; (8003600 <HAL_UARTEx_RxEventCallback+0x26c>)
 800344c:	f007 f950 	bl	800a6f0 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003450:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b61      	cmp	r3, #97	; 0x61
 8003456:	d106      	bne.n	8003466 <HAL_UARTEx_RxEventCallback+0xd2>
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b05      	cmp	r3, #5
 8003460:	d101      	bne.n	8003466 <HAL_UARTEx_RxEventCallback+0xd2>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_UARTEx_RxEventCallback+0xd4>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 800346c:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	b25a      	sxtb	r2, r3
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_UARTEx_RxEventCallback+0x270>)
 8003474:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003478:	789b      	ldrb	r3, [r3, #2]
 800347a:	b25a      	sxtb	r2, r3
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_UARTEx_RxEventCallback+0x274>)
 800347e:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003480:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003482:	78db      	ldrb	r3, [r3, #3]
 8003484:	b25a      	sxtb	r2, r3
 8003486:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_UARTEx_RxEventCallback+0x278>)
 8003488:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 800348a:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	b25a      	sxtb	r2, r3
 8003490:	4b5f      	ldr	r3, [pc, #380]	; (8003610 <HAL_UARTEx_RxEventCallback+0x27c>)
 8003492:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003494:	e122      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b71      	cmp	r3, #113	; 0x71
 800349c:	d106      	bne.n	80034ac <HAL_UARTEx_RxEventCallback+0x118>
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d101      	bne.n	80034ac <HAL_UARTEx_RxEventCallback+0x118>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_UARTEx_RxEventCallback+0x11a>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	4b56      	ldr	r3, [pc, #344]	; (8003614 <HAL_UARTEx_RxEventCallback+0x280>)
 80034ba:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	b25a      	sxtb	r2, r3
 80034c2:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_UARTEx_RxEventCallback+0x284>)
 80034c4:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034c8:	78db      	ldrb	r3, [r3, #3]
 80034ca:	b25a      	sxtb	r2, r3
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_UARTEx_RxEventCallback+0x288>)
 80034ce:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034d2:	791b      	ldrb	r3, [r3, #4]
 80034d4:	b25a      	sxtb	r2, r3
 80034d6:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_UARTEx_RxEventCallback+0x28c>)
 80034d8:	701a      	strb	r2, [r3, #0]
			}
 80034da:	e0ff      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b85      	cmp	r3, #133	; 0x85
 80034e2:	d106      	bne.n	80034f2 <HAL_UARTEx_RxEventCallback+0x15e>
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d101      	bne.n	80034f2 <HAL_UARTEx_RxEventCallback+0x15e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_UARTEx_RxEventCallback+0x160>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80034f8:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_UARTEx_RxEventCallback+0x290>)
 80034fa:	2233      	movs	r2, #51	; 0x33
 80034fc:	701a      	strb	r2, [r3, #0]
			}
 80034fe:	e0ed      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003500:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b86      	cmp	r3, #134	; 0x86
 8003506:	d106      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x182>
 8003508:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b03      	cmp	r3, #3
 8003510:	d101      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x182>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_UARTEx_RxEventCallback+0x184>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	6938      	ldr	r0, [r7, #16]
 800352c:	f7ff f97c 	bl	8002828 <_Z12Insert_queueii>
			}
 8003530:	e0d4      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b87      	cmp	r3, #135	; 0x87
 8003538:	d106      	bne.n	8003548 <HAL_UARTEx_RxEventCallback+0x1b4>
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d101      	bne.n	8003548 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_UARTEx_RxEventCallback+0x1b6>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003554:	4a33      	ldr	r2, [pc, #204]	; (8003624 <HAL_UARTEx_RxEventCallback+0x290>)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 800355a:	f7ff fb09 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 800355e:	e0bd      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b89      	cmp	r3, #137	; 0x89
 8003566:	d106      	bne.n	8003576 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d101      	bne.n	8003576 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 800357c:	f7ff faf8 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 8003580:	e0ac      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b81      	cmp	r3, #129	; 0x81
 8003588:	d106      	bne.n	8003598 <HAL_UARTEx_RxEventCallback+0x204>
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d101      	bne.n	8003598 <HAL_UARTEx_RxEventCallback+0x204>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_UARTEx_RxEventCallback+0x206>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_UARTEx_RxEventCallback+0x294>)
 80035a6:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_UARTEx_RxEventCallback+0x294>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80035ba:	481c      	ldr	r0, [pc, #112]	; (800362c <HAL_UARTEx_RxEventCallback+0x298>)
 80035bc:	f7fe fbbc 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
			}
 80035c0:	e08c      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80035c2:	481a      	ldr	r0, [pc, #104]	; (800362c <HAL_UARTEx_RxEventCallback+0x298>)
 80035c4:	f7fe fba2 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
			}
 80035c8:	e088      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b91      	cmp	r3, #145	; 0x91
 80035d0:	d12e      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x29c>
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d129      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x29c>
 80035dc:	2301      	movs	r3, #1
 80035de:	e028      	b.n	8003632 <HAL_UARTEx_RxEventCallback+0x29e>
 80035e0:	24001374 	.word	0x24001374
 80035e4:	24000b18 	.word	0x24000b18
 80035e8:	24000b2c 	.word	0x24000b2c
 80035ec:	24000b40 	.word	0x24000b40
 80035f0:	2400042c 	.word	0x2400042c
 80035f4:	24000b10 	.word	0x24000b10
 80035f8:	24000b12 	.word	0x24000b12
 80035fc:	58021000 	.word	0x58021000
 8003600:	58020400 	.word	0x58020400
 8003604:	24000af8 	.word	0x24000af8
 8003608:	24000af9 	.word	0x24000af9
 800360c:	24000afa 	.word	0x24000afa
 8003610:	24000afb 	.word	0x24000afb
 8003614:	24000afc 	.word	0x24000afc
 8003618:	24000afd 	.word	0x24000afd
 800361c:	24000afe 	.word	0x24000afe
 8003620:	24000aff 	.word	0x24000aff
 8003624:	24000bf0 	.word	0x24000bf0
 8003628:	24000b14 	.word	0x24000b14
 800362c:	24000ab8 	.word	0x24000ab8
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d052      	beq.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 800363e:	7892      	ldrb	r2, [r2, #2]
 8003640:	4313      	orrs	r3, r2
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_UARTEx_RxEventCallback+0x424>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
 8003650:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4a57      	ldr	r2, [pc, #348]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003658:	7912      	ldrb	r2, [r2, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	4b55      	ldr	r3, [pc, #340]	; (80037bc <HAL_UARTEx_RxEventCallback+0x428>)
 8003666:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
 800366a:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 800366c:	795b      	ldrb	r3, [r3, #5]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003672:	7992      	ldrb	r2, [r2, #6]
 8003674:	4313      	orrs	r3, r2
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367e:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_UARTEx_RxEventCallback+0x42c>)
 8003680:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003686:	79db      	ldrb	r3, [r3, #7]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003690:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_UARTEx_RxEventCallback+0x430>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
			}
 8003696:	e021      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003698:	2200      	movs	r2, #0
 800369a:	2102      	movs	r1, #2
 800369c:	484a      	ldr	r0, [pc, #296]	; (80037c8 <HAL_UARTEx_RxEventCallback+0x434>)
 800369e:	f007 f827 	bl	800a6f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a8:	4848      	ldr	r0, [pc, #288]	; (80037cc <HAL_UARTEx_RxEventCallback+0x438>)
 80036aa:	f007 f821 	bl	800a6f0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80036ae:	220c      	movs	r2, #12
 80036b0:	4947      	ldr	r1, [pc, #284]	; (80037d0 <HAL_UARTEx_RxEventCallback+0x43c>)
 80036b2:	4848      	ldr	r0, [pc, #288]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036b4:	f00b fd9c 	bl	800f1f0 <HAL_UART_Transmit_DMA>
 80036b8:	e011      	b.n	80036de <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2102      	movs	r1, #2
 80036be:	4842      	ldr	r0, [pc, #264]	; (80037c8 <HAL_UARTEx_RxEventCallback+0x434>)
 80036c0:	f007 f816 	bl	800a6f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036ca:	4840      	ldr	r0, [pc, #256]	; (80037cc <HAL_UARTEx_RxEventCallback+0x438>)
 80036cc:	f007 f810 	bl	800a6f0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80036d0:	2215      	movs	r2, #21
 80036d2:	4941      	ldr	r1, [pc, #260]	; (80037d8 <HAL_UARTEx_RxEventCallback+0x444>)
 80036d4:	483f      	ldr	r0, [pc, #252]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036d6:	f00b fd8b 	bl	800f1f0 <HAL_UART_Transmit_DMA>
 80036da:	e000      	b.n	80036de <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80036dc:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80036de:	2214      	movs	r2, #20
 80036e0:	493e      	ldr	r1, [pc, #248]	; (80037dc <HAL_UARTEx_RxEventCallback+0x448>)
 80036e2:	483c      	ldr	r0, [pc, #240]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036e4:	f00d fce9 	bl	80110ba <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80036e8:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_UARTEx_RxEventCallback+0x450>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <HAL_UARTEx_RxEventCallback+0x454>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 80036fc:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_UARTEx_RxEventCallback+0x458>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <HAL_UARTEx_RxEventCallback+0x45c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003710:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_UARTEx_RxEventCallback+0x460>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a36      	ldr	r2, [pc, #216]	; (80037f8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a34      	ldr	r2, [pc, #208]	; (80037fc <HAL_UARTEx_RxEventCallback+0x468>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_UARTEx_RxEventCallback+0x470>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_UARTEx_RxEventCallback+0x474>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2e      	ldr	r2, [pc, #184]	; (800380c <HAL_UARTEx_RxEventCallback+0x478>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_UARTEx_RxEventCallback+0x47c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <HAL_UARTEx_RxEventCallback+0x480>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_UARTEx_RxEventCallback+0x484>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_UARTEx_RxEventCallback+0x488>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_UARTEx_RxEventCallback+0x48c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_UARTEx_RxEventCallback+0x406>
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0208 	bic.w	r2, r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e008      	b.n	80037ac <HAL_UARTEx_RxEventCallback+0x418>
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	24000b18 	.word	0x24000b18
 80037b8:	24000b00 	.word	0x24000b00
 80037bc:	24000b04 	.word	0x24000b04
 80037c0:	24000b08 	.word	0x24000b08
 80037c4:	24000b0c 	.word	0x24000b0c
 80037c8:	58021000 	.word	0x58021000
 80037cc:	58020400 	.word	0x58020400
 80037d0:	08015234 	.word	0x08015234
 80037d4:	24001374 	.word	0x24001374
 80037d8:	08015244 	.word	0x08015244
 80037dc:	24000b2c 	.word	0x24000b2c
 80037e0:	2400165c 	.word	0x2400165c
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	00000000 	.word	0x00000000

08003828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4ac5      	ldr	r2, [pc, #788]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003834:	4293      	cmp	r3, r2
 8003836:	f040 80cc 	bne.w	80039d2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		encoderJ1.AMT21_Read();
 800383a:	48c4      	ldr	r0, [pc, #784]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800383c:	f7fc ff49 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003840:	48c2      	ldr	r0, [pc, #776]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003842:	f7fc ff75 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	4bc1      	ldr	r3, [pc, #772]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800384c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800384e:	4bc0      	ldr	r3, [pc, #768]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d110      	bne.n	8003878 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8003856:	48bd      	ldr	r0, [pc, #756]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003858:	f7fc ffd0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800385c:	4603      	mov	r3, r0
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003866:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 800386a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800386e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003872:	4bb8      	ldr	r3, [pc, #736]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003874:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003878:	48b7      	ldr	r0, [pc, #732]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800387a:	f7fc ff2a 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 800387e:	48b6      	ldr	r0, [pc, #728]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003880:	f7fc ff56 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4bb4      	ldr	r3, [pc, #720]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800388a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 800388c:	4bb3      	ldr	r3, [pc, #716]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d112      	bne.n	80038ba <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 8003894:	48b0      	ldr	r0, [pc, #704]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003896:	f7fc ffd3 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 800389a:	48af      	ldr	r0, [pc, #700]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800389c:	f7fd f82f 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 80038a0:	ee07 0a90 	vmov	s15, r0
 80038a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038a8:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 80038ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038b4:	4baa      	ldr	r3, [pc, #680]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038b6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 80038ba:	48aa      	ldr	r0, [pc, #680]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038bc:	f7fc ff09 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80038c0:	48a8      	ldr	r0, [pc, #672]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038c2:	f7fc ff35 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	4ba7      	ldr	r3, [pc, #668]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038cc:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80038ce:	4ba6      	ldr	r3, [pc, #664]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80038d6:	48a3      	ldr	r0, [pc, #652]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038d8:	f7fc ff90 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80038dc:	4603      	mov	r3, r0
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038e6:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 80038ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038f2:	4b9e      	ldr	r3, [pc, #632]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80038f4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80038f8:	489d      	ldr	r0, [pc, #628]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80038fa:	f7fc feea 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80038fe:	489c      	ldr	r0, [pc, #624]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003900:	f7fc ff16 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800390a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 800390c:	4b99      	ldr	r3, [pc, #612]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d110      	bne.n	8003936 <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 8003914:	4896      	ldr	r0, [pc, #600]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003916:	f7fc ff71 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800391a:	4603      	mov	r3, r0
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003924:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003928:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800392c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003932:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003936:	4891      	ldr	r0, [pc, #580]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003938:	f7fd f85c 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 800393c:	eef0 7a40 	vmov.f32	s15, s0
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003942:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003946:	488d      	ldr	r0, [pc, #564]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003948:	f7fd f834 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 800394c:	eef0 7a40 	vmov.f32	s15, s0
 8003950:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003952:	edc3 7a00 	vstr	s15, [r3]
//			stepperJ1.StepperSetFrequency(dq1);
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);

		fcb_X.UpdateIVK(fcb_joint1.Encoder, 0.0, fcb_joint3.Encoder, 0.0, dx,
 8003956:	4b7f      	ldr	r3, [pc, #508]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003958:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800395c:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800395e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003962:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	ee06 3a90 	vmov	s13, r3
 800396c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b25b      	sxtb	r3, r3
 8003976:	ee06 3a10 	vmov	s12, r3
 800397a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800397e:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b25b      	sxtb	r3, r3
 8003984:	ee05 3a90 	vmov	s11, r3
 8003988:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800398c:	eddf 3a81 	vldr	s7, [pc, #516]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003990:	eeb0 3a65 	vmov.f32	s6, s11
 8003994:	eef0 2a46 	vmov.f32	s5, s12
 8003998:	eeb0 2a66 	vmov.f32	s4, s13
 800399c:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80039a0:	eeb0 1a47 	vmov.f32	s2, s14
 80039a4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80039a8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ac:	487a      	ldr	r0, [pc, #488]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039ae:	f7fd f8df 	bl	8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>
				dy, dz, 0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 80039b2:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039b4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80039b8:	eeb0 0a67 	vmov.f32	s0, s15
 80039bc:	4877      	ldr	r0, [pc, #476]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80039be:	f7fe fd0f 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 80039c2:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	4874      	ldr	r0, [pc, #464]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80039ce:	f7fe fd07 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a73      	ldr	r2, [pc, #460]	; (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f040 8111 	bne.w	8003bfe <HAL_TIM_PeriodElapsedCallback+0x3d6>
		encoderJ1.AMT21_Read();
 80039dc:	485b      	ldr	r0, [pc, #364]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039de:	f7fc fe78 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80039e2:	485a      	ldr	r0, [pc, #360]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039e4:	f7fc fea4 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80039ee:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80039f0:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d110      	bne.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 80039f8:	4854      	ldr	r0, [pc, #336]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039fa:	f7fc feff 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80039fe:	4603      	mov	r3, r0
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a08:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003a0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003a16:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003a1a:	484f      	ldr	r0, [pc, #316]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a1c:	f7fc fe59 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003a20:	484d      	ldr	r0, [pc, #308]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a22:	f7fc fe85 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a2c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d112      	bne.n	8003a5c <HAL_TIM_PeriodElapsedCallback+0x234>
			encoderJ2.unwarp();
 8003a36:	4848      	ldr	r0, [pc, #288]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a38:	f7fc ff02 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003a3c:	4846      	ldr	r0, [pc, #280]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a3e:	f7fc ff5e 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003a42:	ee07 0a90 	vmov	s15, r0
 8003a46:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a4a:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003a4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a56:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003a58:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 8003a5c:	4841      	ldr	r0, [pc, #260]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a5e:	f7fc fe38 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003a62:	4840      	ldr	r0, [pc, #256]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a64:	f7fc fe64 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003a6e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0x272>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003a78:	483a      	ldr	r0, [pc, #232]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a7a:	f7fc febf 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a88:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a94:	4b35      	ldr	r3, [pc, #212]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003a96:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003a9a:	4835      	ldr	r0, [pc, #212]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003a9c:	f7fc fe19 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003aa0:	4833      	ldr	r0, [pc, #204]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003aa2:	f7fc fe45 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003aac:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 8003ab6:	482e      	ldr	r0, [pc, #184]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003ab8:	f7fc fea0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003abc:	4603      	mov	r3, r0
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ac6:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003aca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003ad4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003ad8:	4828      	ldr	r0, [pc, #160]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003ada:	f7fc ff8b 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 8003ade:	eef0 7a40 	vmov.f32	s15, s0
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003ae4:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003ae8:	4824      	ldr	r0, [pc, #144]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003aea:	f7fc ff63 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 8003aee:	eef0 7a40 	vmov.f32	s15, s0
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003af4:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003afa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003afe:	eeb0 0a67 	vmov.f32	s0, s15
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b04:	f7fd fa82 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b10:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b1c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	480d      	ldr	r0, [pc, #52]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b2c:	f7fd fa6e 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b38:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003b3c:	e034      	b.n	8003ba8 <HAL_TIM_PeriodElapsedCallback+0x380>
 8003b3e:	bf00      	nop
 8003b40:	645a1cac 	.word	0x645a1cac
 8003b44:	4004df3b 	.word	0x4004df3b
 8003b48:	24000ecc 	.word	0x24000ecc
 8003b4c:	24000450 	.word	0x24000450
 8003b50:	24000ad4 	.word	0x24000ad4
 8003b54:	24000560 	.word	0x24000560
 8003b58:	2400046c 	.word	0x2400046c
 8003b5c:	24000ad5 	.word	0x24000ad5
 8003b60:	24000644 	.word	0x24000644
 8003b64:	24000488 	.word	0x24000488
 8003b68:	24000ad6 	.word	0x24000ad6
 8003b6c:	24000728 	.word	0x24000728
 8003b70:	240004a4 	.word	0x240004a4
 8003b74:	24000ad7 	.word	0x24000ad7
 8003b78:	2400080c 	.word	0x2400080c
 8003b7c:	24000ad8 	.word	0x24000ad8
 8003b80:	24000ae8 	.word	0x24000ae8
 8003b84:	24000aec 	.word	0x24000aec
 8003b88:	24000afc 	.word	0x24000afc
 8003b8c:	24000afd 	.word	0x24000afd
 8003b90:	24000afe 	.word	0x24000afe
 8003b94:	00000000 	.word	0x00000000
 8003b98:	240009d4 	.word	0x240009d4
 8003b9c:	240004c0 	.word	0x240004c0
 8003ba0:	24000510 	.word	0x24000510
 8003ba4:	2400112c 	.word	0x2400112c
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 8003ba8:	4bda      	ldr	r3, [pc, #872]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003baa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bae:	4ad9      	ldr	r2, [pc, #868]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bb0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003bb4:	4bd8      	ldr	r3, [pc, #864]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bb6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003bba:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbe:	48d6      	ldr	r0, [pc, #856]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bc0:	f7fd fa24 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003bc4:	4bd4      	ldr	r3, [pc, #848]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bca:	4ad3      	ldr	r2, [pc, #844]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bcc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003bd0:	4bd1      	ldr	r3, [pc, #836]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd6:	4ad0      	ldr	r2, [pc, #832]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bd8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN) {
 8003bdc:	4bcf      	ldr	r3, [pc, #828]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_TIM_PeriodElapsedCallback+0x3d6>
			Balloon++;
 8003be6:	4bce      	ldr	r3, [pc, #824]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4acc      	ldr	r2, [pc, #816]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8003bee:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003bf0:	f7fe ffbe 	bl	8002b70 <_Z20Update_State_Machinev>
			Update_State_Machine();
 8003bf4:	f7fe ffbc 	bl	8002b70 <_Z20Update_State_Machinev>
			State_FIN = false;
 8003bf8:	4bc8      	ldr	r3, [pc, #800]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim14) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4ac8      	ldr	r2, [pc, #800]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f040 8522 	bne.w	800464c <HAL_TIM_PeriodElapsedCallback+0xe24>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003c08:	4bc7      	ldr	r3, [pc, #796]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c0a:	ed93 7a00 	vldr	s14, [r3]
 8003c0e:	4bc6      	ldr	r3, [pc, #792]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 8003c1c:	4bc2      	ldr	r3, [pc, #776]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c1e:	ed93 7a00 	vldr	s14, [r3]
 8003c22:	4bc1      	ldr	r3, [pc, #772]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c2c:	4bbe      	ldr	r3, [pc, #760]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 8003c3a:	4bbb      	ldr	r3, [pc, #748]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c3c:	ed93 7a00 	vldr	s14, [r3]
 8003c40:	4bb9      	ldr	r3, [pc, #740]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4a:	4bb7      	ldr	r3, [pc, #732]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c54:	4bb4      	ldr	r3, [pc, #720]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003c62:	4bb1      	ldr	r3, [pc, #708]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c64:	ed93 7a00 	vldr	s14, [r3]
 8003c68:	4baf      	ldr	r3, [pc, #700]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c72:	4bad      	ldr	r3, [pc, #692]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c7c:	4baa      	ldr	r3, [pc, #680]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c7e:	edd3 7a00 	vldr	s15, [r3]
 8003c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c86:	4ba8      	ldr	r3, [pc, #672]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c90:	edc7 7a06 	vstr	s15, [r7, #24]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003c94:	4ba5      	ldr	r3, [pc, #660]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003c96:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c9e:	4ba3      	ldr	r3, [pc, #652]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003ca0:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003cac:	4b9e      	ldr	r3, [pc, #632]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cba:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003cbe:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003cc0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cc8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ccc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cdc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ce0:	4b92      	ldr	r3, [pc, #584]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003ce2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ce6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cea:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003cee:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cfe:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003d02:	4b8a      	ldr	r3, [pc, #552]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d04:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d0c:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003d10:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d14:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003d28:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d2a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d30:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003d34:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d36:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d44:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 8003d48:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d4a:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5a:	4b74      	ldr	r3, [pc, #464]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d5c:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d60:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d68:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d6e:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d7e:	4b6b      	ldr	r3, [pc, #428]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d80:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d92:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003d96:	4b5f      	ldr	r3, [pc, #380]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003d98:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003da0:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003da2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003da6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003daa:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003dae:	4b5e      	ldr	r3, [pc, #376]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dbc:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003dc0:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003dc2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dca:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003dce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dde:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003de2:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003de4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003de8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003df0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003df4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e00:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003e04:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e06:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e0e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003e12:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e2c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003e30:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e32:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e38:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003e3c:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e4c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e5e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003e6e:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e70:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003e74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e82:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e94:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003e98:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003e9a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003e9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003ea4:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eac:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003eb2:	edd3 7a00 	vldr	s15, [r3]
 8003eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ebe:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003ec4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ecc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ed0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ed4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ed8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003edc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ee0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003ee6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eee:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ef2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ef6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003efe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f02:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint3.C5 * t4);
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003f08:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f10:	e00e      	b.n	8003f30 <HAL_TIM_PeriodElapsedCallback+0x708>
 8003f12:	bf00      	nop
 8003f14:	24000644 	.word	0x24000644
 8003f18:	24000728 	.word	0x24000728
 8003f1c:	24000af0 	.word	0x24000af0
 8003f20:	24000bf4 	.word	0x24000bf4
 8003f24:	24001094 	.word	0x24001094
 8003f28:	24000bf8 	.word	0x24000bf8
 8003f2c:	24000560 	.word	0x24000560
 8003f30:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003f34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003f38:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003f4c:	4bc8      	ldr	r3, [pc, #800]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f4e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003f52:	4bc7      	ldr	r3, [pc, #796]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f54:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003f58:	4bc5      	ldr	r3, [pc, #788]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f5a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003f5e:	4bc5      	ldr	r3, [pc, #788]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f68:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003f6c:	4bc0      	ldr	r3, [pc, #768]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f6e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f7e:	4bbc      	ldr	r3, [pc, #752]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f80:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003f84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003f90:	4bb7      	ldr	r3, [pc, #732]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f92:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003f96:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fa2:	4bb3      	ldr	r3, [pc, #716]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fa4:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003fb4:	4bae      	ldr	r3, [pc, #696]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fb6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003fba:	4baf      	ldr	r3, [pc, #700]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003fbc:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003fc0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003fc4:	4bac      	ldr	r3, [pc, #688]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003fc6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003fca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fce:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003fd2:	4ba8      	ldr	r3, [pc, #672]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fdc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003fe0:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003fe4:	4ba4      	ldr	r3, [pc, #656]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003fe6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003fea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fee:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ff2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ff6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ffa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ffe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004002:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004006:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004008:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800400c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004010:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8004014:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004018:	edd7 7a08 	vldr	s15, [r7, #32]
 800401c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004020:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004024:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 8004028:	4b93      	ldr	r3, [pc, #588]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 800402a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800402e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004032:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8004036:	ee27 5b05 	vmul.f64	d5, d7, d5
 800403a:	edd7 7a07 	vldr	s15, [r7, #28]
 800403e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004042:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004046:	ee36 7b07 	vadd.f64	d7, d6, d7
 800404a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 800404e:	4b8a      	ldr	r3, [pc, #552]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004050:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8004054:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004056:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 800405a:	4b87      	ldr	r3, [pc, #540]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 800405c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8004060:	4b84      	ldr	r3, [pc, #528]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800406a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004070:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8004074:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004080:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004082:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8004086:	edd7 7a08 	vldr	s15, [r7, #32]
 800408a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8004092:	4b79      	ldr	r3, [pc, #484]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004094:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8004098:	edd7 7a07 	vldr	s15, [r7, #28]
 800409c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040a4:	4b74      	ldr	r3, [pc, #464]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 80040a6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80040aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b2:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 80040b6:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 80040b8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.Kp_p = 0.4;
 80040bc:	4b6f      	ldr	r3, [pc, #444]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80040be:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 80040ca:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 80040d2:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80040d4:	4a6c      	ldr	r2, [pc, #432]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040ea:	4a68      	ldr	r2, [pc, #416]	; (800428c <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 80040ee:	4b60      	ldr	r3, [pc, #384]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 80040f6:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 80040fe:	4b5f      	ldr	r3, [pc, #380]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8004106:	4b5d      	ldr	r3, [pc, #372]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8004136:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 800413e:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004148:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800414c:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800414e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004156:	4b49      	ldr	r3, [pc, #292]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004158:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 800415c:	4b44      	ldr	r3, [pc, #272]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800415e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004162:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004164:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800416e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8004172:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004174:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004178:	4b40      	ldr	r3, [pc, #256]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800417a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800417e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004182:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004184:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800418a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004190:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800419a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041a0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041a6:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80041aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ae:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041b0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041b6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80041ba:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041bc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80041c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041c6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80041ca:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041cc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041d2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041dc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80041e2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80041e8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f0:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80041f2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 80041f6:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041f8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80041fc:	4b1f      	ldr	r3, [pc, #124]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041fe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004208:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800420e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004214:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800421e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004224:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800422a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800422e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004234:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800423a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004240:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800424a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004250:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004256:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800425c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004264:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800426a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800426e:	e00f      	b.n	8004290 <HAL_TIM_PeriodElapsedCallback+0xa68>
 8004270:	24000728 	.word	0x24000728
 8004274:	24000bf8 	.word	0x24000bf8
 8004278:	2400080c 	.word	0x2400080c
 800427c:	24000560 	.word	0x24000560
 8004280:	3ecccccd 	.word	0x3ecccccd
 8004284:	24000644 	.word	0x24000644
 8004288:	3cf5c28f 	.word	0x3cf5c28f
 800428c:	3e19999a 	.word	0x3e19999a
 8004290:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8004292:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p))
 800429e:	4b78      	ldr	r3, [pc, #480]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042a0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80042a4:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042a6:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80042aa:	4b75      	ldr	r3, [pc, #468]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042ac:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80042b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
 80042bc:	4b70      	ldr	r3, [pc, #448]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042be:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80042c2:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042c4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80042c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042cc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042d2:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80042d6:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042d8:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80042dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));
 80042e4:	4b66      	ldr	r3, [pc, #408]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042e6:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042ec:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80042f0:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042f2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80042f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fe:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8004302:	4b5f      	ldr	r3, [pc, #380]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8004304:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8004308:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800430a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 800430e:	4b5d      	ldr	r3, [pc, #372]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004310:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004316:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800431a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800431e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004324:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004328:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800432a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800432e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004332:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p))
 8004336:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004338:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800433c:	4b51      	ldr	r3, [pc, #324]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800433e:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004342:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004344:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004348:	ee76 7a67 	vsub.f32	s15, s12, s15
 800434c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004350:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004356:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800435a:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800435c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004364:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800436a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800436e:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004370:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004378:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800437e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004382:	4b40      	ldr	r3, [pc, #256]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004384:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800438a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800438e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004396:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800439c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 80043a0:	4b39      	ldr	r3, [pc, #228]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043a2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 80043a6:	4b38      	ldr	r3, [pc, #224]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043a8:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80043ac:	4b36      	ldr	r3, [pc, #216]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043ae:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80043b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043bc:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043c2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80043c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p))
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043d0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043d6:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043dc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80043e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
 80043ec:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043ee:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043f4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80043f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043fc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004402:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004408:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800440c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004410:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004416:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800441c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004422:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004426:	ee76 7a67 	vsub.f32	s15, s12, s15
 800442a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800442e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004434:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		if (joint13_on) {
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_TIM_PeriodElapsedCallback+0xc80>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8004444:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004448:	eeb0 0a67 	vmov.f32	s0, s15
 800444c:	4810      	ldr	r0, [pc, #64]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800444e:	f7fd ffc7 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004452:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80044a4 <HAL_TIM_PeriodElapsedCallback+0xc7c>
 8004456:	480f      	ldr	r0, [pc, #60]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8004458:	f7fd ffc2 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800445e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004462:	eeb0 0a67 	vmov.f32	s0, s15
 8004466:	480c      	ldr	r0, [pc, #48]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8004468:	f7fd ffba 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800446e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004472:	eeb0 0a67 	vmov.f32	s0, s15
 8004476:	480a      	ldr	r0, [pc, #40]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8004478:	f7fd ffb2 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 800447c:	e02b      	b.n	80044d6 <HAL_TIM_PeriodElapsedCallback+0xcae>
 800447e:	bf00      	nop
 8004480:	24000560 	.word	0x24000560
 8004484:	24000644 	.word	0x24000644
 8004488:	24000728 	.word	0x24000728
 800448c:	24000b46 	.word	0x24000b46
 8004490:	240004c0 	.word	0x240004c0
 8004494:	240004e8 	.word	0x240004e8
 8004498:	24000510 	.word	0x24000510
 800449c:	2400080c 	.word	0x2400080c
 80044a0:	24000538 	.word	0x24000538
 80044a4:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 80044a8:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80044a4 <HAL_TIM_PeriodElapsedCallback+0xc7c>
 80044ac:	48ae      	ldr	r0, [pc, #696]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 80044ae:	f7fd ff97 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 80044b2:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800476c <HAL_TIM_PeriodElapsedCallback+0xf44>
 80044b6:	48ae      	ldr	r0, [pc, #696]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80044b8:	f7fd ff92 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 80044bc:	4bad      	ldr	r3, [pc, #692]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80044be:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80044c2:	eeb0 0a67 	vmov.f32	s0, s15
 80044c6:	48ac      	ldr	r0, [pc, #688]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 80044c8:	f7fd ff8a 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 80044cc:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 800476c <HAL_TIM_PeriodElapsedCallback+0xf44>
 80044d0:	48aa      	ldr	r0, [pc, #680]	; (800477c <HAL_TIM_PeriodElapsedCallback+0xf54>)
 80044d2:	f7fd ff85 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80044d6:	4baa      	ldr	r3, [pc, #680]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80044d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044da:	4aa9      	ldr	r2, [pc, #676]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80044dc:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 80044de:	4ba5      	ldr	r3, [pc, #660]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80044e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e2:	4aa4      	ldr	r2, [pc, #656]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80044e4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80044e6:	4ba7      	ldr	r3, [pc, #668]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	4aa6      	ldr	r2, [pc, #664]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80044ec:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 80044ee:	4ba4      	ldr	r3, [pc, #656]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	4aa2      	ldr	r2, [pc, #648]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80044f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 80044fa:	4b9e      	ldr	r3, [pc, #632]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80044fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004500:	4a9c      	ldr	r2, [pc, #624]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8004506:	4b9f      	ldr	r3, [pc, #636]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	4a9d      	ldr	r2, [pc, #628]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 800450e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 8004512:	4b9b      	ldr	r3, [pc, #620]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8004514:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004518:	4a99      	ldr	r2, [pc, #612]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 800451e:	4b99      	ldr	r3, [pc, #612]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004524:	4a97      	ldr	r2, [pc, #604]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 800452a:	4b92      	ldr	r3, [pc, #584]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800452c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004530:	4a90      	ldr	r2, [pc, #576]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 8004536:	4b8f      	ldr	r3, [pc, #572]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004538:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800453c:	4a8d      	ldr	r2, [pc, #564]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800453e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8004542:	4b8f      	ldr	r3, [pc, #572]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8004544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004548:	4a8d      	ldr	r2, [pc, #564]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800454a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 800454e:	4b8c      	ldr	r3, [pc, #560]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8004550:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004554:	4a8b      	ldr	r2, [pc, #556]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 800455a:	4b8b      	ldr	r3, [pc, #556]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 800455c:	ed93 7a00 	vldr	s14, [r3]
 8004560:	4b8a      	ldr	r3, [pc, #552]	; (800478c <HAL_TIM_PeriodElapsedCallback+0xf64>)
 8004562:	edd3 7a00 	vldr	s15, [r3]
 8004566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456a:	4b87      	ldr	r3, [pc, #540]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 800456c:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 8004570:	4b85      	ldr	r3, [pc, #532]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8004572:	ed93 7a00 	vldr	s14, [r3]
 8004576:	4b86      	ldr	r3, [pc, #536]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004584:	bfac      	ite	ge
 8004586:	2301      	movge	r3, #1
 8004588:	2300      	movlt	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05d      	beq.n	800464c <HAL_TIM_PeriodElapsedCallback+0xe24>
			t = (int) 0;
 8004590:	4b7d      	ldr	r3, [pc, #500]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004598:	4b79      	ldr	r3, [pc, #484]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 80045a2:	4b74      	ldr	r3, [pc, #464]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 80045ac:	4b75      	ldr	r3, [pc, #468]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 80045b6:	4b72      	ldr	r3, [pc, #456]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 80045c0:	4b6c      	ldr	r3, [pc, #432]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 80045ca:	4b6e      	ldr	r3, [pc, #440]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 80045d4:	4b6a      	ldr	r3, [pc, #424]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 80045dc:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80045e4:	4b67      	ldr	r3, [pc, #412]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 80045ec:	4b64      	ldr	r3, [pc, #400]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 80045f6:	4b5f      	ldr	r3, [pc, #380]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8004600:	4b60      	ldr	r3, [pc, #384]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 800460a:	4b5d      	ldr	r3, [pc, #372]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 8004614:	4b57      	ldr	r3, [pc, #348]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 800461e:	4b59      	ldr	r3, [pc, #356]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 8004628:	4b55      	ldr	r3, [pc, #340]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 8004632:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 800463c:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 8004646:	4b53      	ldr	r3, [pc, #332]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8004650:	4293      	cmp	r3, r2
 8004652:	f040 8085 	bne.w	8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>
		uint8_t encoder_state[12] = { (uint8_t) (((int16_t) fcb_joint1.Encoder
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8004658:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800465c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004660:	ee17 3a90 	vmov	r3, s15
 8004664:	b21b      	sxth	r3, r3
				>> 16) & 0xFF), (uint8_t) (((int16_t) fcb_joint1.Encoder >> 8)
 8004666:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 16) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint3.Encoder) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004668:	b2db      	uxtb	r3, r3
 800466a:	733b      	strb	r3, [r7, #12]
				>> 16) & 0xFF), (uint8_t) (((int16_t) fcb_joint1.Encoder >> 8)
 800466c:	4b44      	ldr	r3, [pc, #272]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800466e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004676:	ee17 3a90 	vmov	r3, s15
 800467a:	b21b      	sxth	r3, r3
 800467c:	121b      	asrs	r3, r3, #8
 800467e:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004680:	b2db      	uxtb	r3, r3
 8004682:	737b      	strb	r3, [r7, #13]
				& 0xFF), (uint8_t) (((int16_t) fcb_joint1.Encoder) & 0xFF),
 8004684:	4b3e      	ldr	r3, [pc, #248]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8004686:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800468a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468e:	ee17 3a90 	vmov	r3, s15
 8004692:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004694:	b2db      	uxtb	r3, r3
 8004696:	73bb      	strb	r3, [r7, #14]
				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800469a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800469e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046a2:	ee17 3a90 	vmov	r3, s15
 80046a6:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	73fb      	strb	r3, [r7, #15]
				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
 80046ac:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80046ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b6:	ee17 3a90 	vmov	r3, s15
 80046ba:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	743b      	strb	r3, [r7, #16]
				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF),
 80046c0:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 80046c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ca:	edc7 7a00 	vstr	s15, [r7]
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80046ce:	783b      	ldrb	r3, [r7, #0]
 80046d0:	747b      	strb	r3, [r7, #17]
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 16) & 0xFF),
 80046d2:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80046d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046dc:	ee17 3a90 	vmov	r3, s15
 80046e0:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	74bb      	strb	r3, [r7, #18]
				(uint8_t) (((int16_t) fcb_joint3.Encoder >> 8) & 0xFF),
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80046e8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f0:	ee17 3a90 	vmov	r3, s15
 80046f4:	b21b      	sxth	r3, r3
 80046f6:	121b      	asrs	r3, r3, #8
 80046f8:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	74fb      	strb	r3, [r7, #19]
				(uint8_t) (((int16_t) fcb_joint3.Encoder) & 0xFF),
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004700:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004708:	ee17 3a90 	vmov	r3, s15
 800470c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 800470e:	b2db      	uxtb	r3, r3
 8004710:	753b      	strb	r3, [r7, #20]
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 16) & 0xFF),
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004714:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800471c:	ee17 3a90 	vmov	r3, s15
 8004720:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004722:	b2db      	uxtb	r3, r3
 8004724:	757b      	strb	r3, [r7, #21]
				(uint8_t) (((int16_t) fcb_joint4.Encoder >> 8) & 0xFF),
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004728:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800472c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004730:	ee17 3a90 	vmov	r3, s15
 8004734:	b21b      	sxth	r3, r3
 8004736:	121b      	asrs	r3, r3, #8
 8004738:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 800473a:	b2db      	uxtb	r3, r3
 800473c:	75bb      	strb	r3, [r7, #22]
 800473e:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004740:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004748:	ee17 3a90 	vmov	r3, s15
 800474c:	b21b      	sxth	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 12);
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	220c      	movs	r2, #12
 8004758:	4619      	mov	r1, r3
 800475a:	4811      	ldr	r0, [pc, #68]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800475c:	f00a fd48 	bl	800f1f0 <HAL_UART_Transmit_DMA>
	}
}
 8004760:	bf00      	nop
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	240004c0 	.word	0x240004c0
 800476c:	00000000 	.word	0x00000000
 8004770:	24000510 	.word	0x24000510
 8004774:	24000644 	.word	0x24000644
 8004778:	240004e8 	.word	0x240004e8
 800477c:	24000538 	.word	0x24000538
 8004780:	24000560 	.word	0x24000560
 8004784:	24000728 	.word	0x24000728
 8004788:	24000bf8 	.word	0x24000bf8
 800478c:	24000210 	.word	0x24000210
 8004790:	24000af4 	.word	0x24000af4
 8004794:	24000af0 	.word	0x24000af0
 8004798:	24001178 	.word	0x24001178
 800479c:	2400080c 	.word	0x2400080c
 80047a0:	240012e4 	.word	0x240012e4
 80047a4:	00000000 	.word	0x00000000

080047a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047ac:	f002 fbd8 	bl	8006f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047b0:	f000 faac 	bl	8004d0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047b4:	f7fd ff10 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80047b8:	f7fd fe9e 	bl	80024f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80047bc:	f002 f86a 	bl	8006894 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80047c0:	f001 f8d4 	bl	800596c <MX_TIM2_Init>
  MX_UART4_Init();
 80047c4:	f001 ff78 	bl	80066b8 <MX_UART4_Init>
  MX_TIM4_Init();
 80047c8:	f001 f9c0 	bl	8005b4c <MX_TIM4_Init>
  MX_SPI3_Init();
 80047cc:	f000 fc50 	bl	8005070 <MX_SPI3_Init>
  MX_TIM1_Init();
 80047d0:	f001 f81e 	bl	8005810 <MX_TIM1_Init>
  MX_TIM3_Init();
 80047d4:	f001 f942 	bl	8005a5c <MX_TIM3_Init>
  MX_TIM5_Init();
 80047d8:	f001 fa30 	bl	8005c3c <MX_TIM5_Init>
  MX_TIM15_Init();
 80047dc:	f001 fbc4 	bl	8005f68 <MX_TIM15_Init>
  MX_CRC_Init();
 80047e0:	f7fd fe3a 	bl	8002458 <MX_CRC_Init>
  MX_UART7_Init();
 80047e4:	f001 ffbc 	bl	8006760 <MX_UART7_Init>
  MX_TIM6_Init();
 80047e8:	f001 fa76 	bl	8005cd8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80047ec:	f001 faaa 	bl	8005d44 <MX_TIM7_Init>
  MX_TIM12_Init();
 80047f0:	f001 fb38 	bl	8005e64 <MX_TIM12_Init>
  MX_TIM13_Init();
 80047f4:	f001 fb70 	bl	8005ed8 <MX_TIM13_Init>
  MX_TIM14_Init();
 80047f8:	f001 fb92 	bl	8005f20 <MX_TIM14_Init>
  MX_TIM16_Init();
 80047fc:	f001 fc58 	bl	80060b0 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004800:	f001 fffc 	bl	80067fc <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8004804:	f001 fc7a 	bl	80060fc <MX_TIM17_Init>
  MX_TIM8_Init();
 8004808:	f001 fad2 	bl	8005db0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800480c:	2214      	movs	r2, #20
 800480e:	496a      	ldr	r1, [pc, #424]	; (80049b8 <main+0x210>)
 8004810:	486a      	ldr	r0, [pc, #424]	; (80049bc <main+0x214>)
 8004812:	f00c fc52 	bl	80110ba <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8004816:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <main+0x218>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a6a      	ldr	r2, [pc, #424]	; (80049c4 <main+0x21c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d04a      	beq.n	80048b6 <main+0x10e>
 8004820:	4b67      	ldr	r3, [pc, #412]	; (80049c0 <main+0x218>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a68      	ldr	r2, [pc, #416]	; (80049c8 <main+0x220>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d045      	beq.n	80048b6 <main+0x10e>
 800482a:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <main+0x218>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a67      	ldr	r2, [pc, #412]	; (80049cc <main+0x224>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d040      	beq.n	80048b6 <main+0x10e>
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <main+0x218>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <main+0x228>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d03b      	beq.n	80048b6 <main+0x10e>
 800483e:	4b60      	ldr	r3, [pc, #384]	; (80049c0 <main+0x218>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a64      	ldr	r2, [pc, #400]	; (80049d4 <main+0x22c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d036      	beq.n	80048b6 <main+0x10e>
 8004848:	4b5d      	ldr	r3, [pc, #372]	; (80049c0 <main+0x218>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a62      	ldr	r2, [pc, #392]	; (80049d8 <main+0x230>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d031      	beq.n	80048b6 <main+0x10e>
 8004852:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <main+0x218>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a61      	ldr	r2, [pc, #388]	; (80049dc <main+0x234>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d02c      	beq.n	80048b6 <main+0x10e>
 800485c:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <main+0x218>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5f      	ldr	r2, [pc, #380]	; (80049e0 <main+0x238>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d027      	beq.n	80048b6 <main+0x10e>
 8004866:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <main+0x218>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <main+0x23c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <main+0x10e>
 8004870:	4b53      	ldr	r3, [pc, #332]	; (80049c0 <main+0x218>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <main+0x240>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01d      	beq.n	80048b6 <main+0x10e>
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <main+0x218>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a5b      	ldr	r2, [pc, #364]	; (80049ec <main+0x244>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <main+0x10e>
 8004884:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <main+0x218>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a59      	ldr	r2, [pc, #356]	; (80049f0 <main+0x248>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <main+0x10e>
 800488e:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <main+0x218>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <main+0x24c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <main+0x10e>
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <main+0x218>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a56      	ldr	r2, [pc, #344]	; (80049f8 <main+0x250>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <main+0x10e>
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <main+0x218>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a55      	ldr	r2, [pc, #340]	; (80049fc <main+0x254>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <main+0x10e>
 80048ac:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <main+0x218>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a53      	ldr	r2, [pc, #332]	; (8004a00 <main+0x258>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d108      	bne.n	80048c8 <main+0x120>
 80048b6:	4b42      	ldr	r3, [pc, #264]	; (80049c0 <main+0x218>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <main+0x218>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0208 	bic.w	r2, r2, #8
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e007      	b.n	80048d8 <main+0x130>
 80048c8:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <main+0x218>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b3c      	ldr	r3, [pc, #240]	; (80049c0 <main+0x218>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80048d8:	2201      	movs	r2, #1
 80048da:	2101      	movs	r1, #1
 80048dc:	4849      	ldr	r0, [pc, #292]	; (8004a04 <main+0x25c>)
 80048de:	f005 ff07 	bl	800a6f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80048e2:	2201      	movs	r2, #1
 80048e4:	2102      	movs	r1, #2
 80048e6:	4848      	ldr	r0, [pc, #288]	; (8004a08 <main+0x260>)
 80048e8:	f005 ff02 	bl	800a6f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048f2:	4844      	ldr	r0, [pc, #272]	; (8004a04 <main+0x25c>)
 80048f4:	f005 fefc 	bl	800a6f0 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80048f8:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8004a2c <main+0x284>
 80048fc:	4843      	ldr	r0, [pc, #268]	; (8004a0c <main+0x264>)
 80048fe:	f7fd fabb 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 8004902:	2108      	movs	r1, #8
 8004904:	4841      	ldr	r0, [pc, #260]	; (8004a0c <main+0x264>)
 8004906:	f7fd fd53 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 800490a:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004a10 <main+0x268>
 800490e:	483f      	ldr	r0, [pc, #252]	; (8004a0c <main+0x264>)
 8004910:	f7fd fd2a 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8004914:	483d      	ldr	r0, [pc, #244]	; (8004a0c <main+0x264>)
 8004916:	f7fd fa9e 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 800491a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004a2c <main+0x284>
 800491e:	483d      	ldr	r0, [pc, #244]	; (8004a14 <main+0x26c>)
 8004920:	f7fd faaa 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 8004924:	2110      	movs	r1, #16
 8004926:	483b      	ldr	r0, [pc, #236]	; (8004a14 <main+0x26c>)
 8004928:	f7fd fd42 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 800492c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004930:	4838      	ldr	r0, [pc, #224]	; (8004a14 <main+0x26c>)
 8004932:	f7fd fd19 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 8004936:	4837      	ldr	r0, [pc, #220]	; (8004a14 <main+0x26c>)
 8004938:	f7fd fa8d 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 800493c:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004a2c <main+0x284>
 8004940:	4835      	ldr	r0, [pc, #212]	; (8004a18 <main+0x270>)
 8004942:	f7fd fa99 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8004946:	2110      	movs	r1, #16
 8004948:	4833      	ldr	r0, [pc, #204]	; (8004a18 <main+0x270>)
 800494a:	f7fd fd31 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 800494e:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8004952:	4831      	ldr	r0, [pc, #196]	; (8004a18 <main+0x270>)
 8004954:	f7fd fd08 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004958:	482f      	ldr	r0, [pc, #188]	; (8004a18 <main+0x270>)
 800495a:	f7fd fa7c 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 800495e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004a2c <main+0x284>
 8004962:	482e      	ldr	r0, [pc, #184]	; (8004a1c <main+0x274>)
 8004964:	f7fd fa88 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 8004968:	2101      	movs	r1, #1
 800496a:	482c      	ldr	r0, [pc, #176]	; (8004a1c <main+0x274>)
 800496c:	f7fd fd20 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004970:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004974:	4829      	ldr	r0, [pc, #164]	; (8004a1c <main+0x274>)
 8004976:	f7fd fcf7 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 800497a:	4828      	ldr	r0, [pc, #160]	; (8004a1c <main+0x274>)
 800497c:	f7fd fa6b 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004980:	2191      	movs	r1, #145	; 0x91
 8004982:	4827      	ldr	r0, [pc, #156]	; (8004a20 <main+0x278>)
 8004984:	f7fd f9b1 	bl	8001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004988:	2139      	movs	r1, #57	; 0x39
 800498a:	4825      	ldr	r0, [pc, #148]	; (8004a20 <main+0x278>)
 800498c:	f7fd f99c 	bl	8001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004990:	4823      	ldr	r0, [pc, #140]	; (8004a20 <main+0x278>)
 8004992:	f7fc ffc4 	bl	800191e <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 8004996:	4822      	ldr	r0, [pc, #136]	; (8004a20 <main+0x278>)
 8004998:	f7fd f9b8 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <main+0x27c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f083 0301 	eor.w	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d041      	beq.n	8004a30 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 80049ac:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004a28 <main+0x280>
 80049b0:	4818      	ldr	r0, [pc, #96]	; (8004a14 <main+0x26c>)
 80049b2:	f7fd fa61 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 80049b6:	e7f1      	b.n	800499c <main+0x1f4>
 80049b8:	24000b2c 	.word	0x24000b2c
 80049bc:	24001374 	.word	0x24001374
 80049c0:	2400165c 	.word	0x2400165c
 80049c4:	40020010 	.word	0x40020010
 80049c8:	40020028 	.word	0x40020028
 80049cc:	40020040 	.word	0x40020040
 80049d0:	40020058 	.word	0x40020058
 80049d4:	40020070 	.word	0x40020070
 80049d8:	40020088 	.word	0x40020088
 80049dc:	400200a0 	.word	0x400200a0
 80049e0:	400200b8 	.word	0x400200b8
 80049e4:	40020410 	.word	0x40020410
 80049e8:	40020428 	.word	0x40020428
 80049ec:	40020440 	.word	0x40020440
 80049f0:	40020458 	.word	0x40020458
 80049f4:	40020470 	.word	0x40020470
 80049f8:	40020488 	.word	0x40020488
 80049fc:	400204a0 	.word	0x400204a0
 8004a00:	400204b8 	.word	0x400204b8
 8004a04:	58020400 	.word	0x58020400
 8004a08:	58021000 	.word	0x58021000
 8004a0c:	240004c0 	.word	0x240004c0
 8004a10:	42280000 	.word	0x42280000
 8004a14:	240004e8 	.word	0x240004e8
 8004a18:	24000510 	.word	0x24000510
 8004a1c:	24000538 	.word	0x24000538
 8004a20:	24000ab8 	.word	0x24000ab8
 8004a24:	24000b43 	.word	0x24000b43
 8004a28:	44960000 	.word	0x44960000
 8004a2c:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 8004a30:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004a2c <main+0x284>
 8004a34:	489a      	ldr	r0, [pc, #616]	; (8004ca0 <main+0x4f8>)
 8004a36:	f7fd fa1f 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 8004a3a:	20c8      	movs	r0, #200	; 0xc8
 8004a3c:	f002 fb22 	bl	8007084 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 8004a40:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8004ca4 <main+0x4fc>
 8004a44:	4896      	ldr	r0, [pc, #600]	; (8004ca0 <main+0x4f8>)
 8004a46:	f7fd fa17 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004a4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a4e:	f002 fb19 	bl	8007084 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 8004a52:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8004ca8 <main+0x500>
 8004a56:	4892      	ldr	r0, [pc, #584]	; (8004ca0 <main+0x4f8>)
 8004a58:	f7fd fa0e 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a60:	f002 fb10 	bl	8007084 <HAL_Delay>
	gripper.GripperOpen();
 8004a64:	4891      	ldr	r0, [pc, #580]	; (8004cac <main+0x504>)
 8004a66:	f7fd f967 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004a6a:	4b91      	ldr	r3, [pc, #580]	; (8004cb0 <main+0x508>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004a70:	4890      	ldr	r0, [pc, #576]	; (8004cb4 <main+0x50c>)
 8004a72:	f7fb fe2e 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8004a76:	488f      	ldr	r0, [pc, #572]	; (8004cb4 <main+0x50c>)
 8004a78:	f7fb fe5a 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4b8d      	ldr	r3, [pc, #564]	; (8004cb8 <main+0x510>)
 8004a82:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004a84:	4b8c      	ldr	r3, [pc, #560]	; (8004cb8 <main+0x510>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d110      	bne.n	8004aae <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8004a8c:	4889      	ldr	r0, [pc, #548]	; (8004cb4 <main+0x50c>)
 8004a8e:	f7fb feb5 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004a92:	4603      	mov	r3, r0
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004a9c:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8004c98 <main+0x4f0>
 8004aa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004aa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004aa8:	4b84      	ldr	r3, [pc, #528]	; (8004cbc <main+0x514>)
 8004aaa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 8004aae:	4884      	ldr	r0, [pc, #528]	; (8004cc0 <main+0x518>)
 8004ab0:	f7fb fe0f 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004ab4:	4882      	ldr	r0, [pc, #520]	; (8004cc0 <main+0x518>)
 8004ab6:	f7fb fe3b 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b81      	ldr	r3, [pc, #516]	; (8004cc4 <main+0x51c>)
 8004ac0:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004ac2:	4b80      	ldr	r3, [pc, #512]	; (8004cc4 <main+0x51c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <main+0x34e>
		encoderJ2.unwarp();
 8004aca:	487d      	ldr	r0, [pc, #500]	; (8004cc0 <main+0x518>)
 8004acc:	f7fb feb8 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004ad0:	487b      	ldr	r0, [pc, #492]	; (8004cc0 <main+0x518>)
 8004ad2:	f7fb ff07 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8004ad6:	487a      	ldr	r0, [pc, #488]	; (8004cc0 <main+0x518>)
 8004ad8:	f7fb ff11 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8004adc:	ee07 0a90 	vmov	s15, r0
 8004ae0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004ae4:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004c98 <main+0x4f0>
 8004ae8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004aec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004af0:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <main+0x520>)
 8004af2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 8004af6:	4875      	ldr	r0, [pc, #468]	; (8004ccc <main+0x524>)
 8004af8:	f7fb fdeb 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004afc:	4873      	ldr	r0, [pc, #460]	; (8004ccc <main+0x524>)
 8004afe:	f7fb fe17 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <main+0x528>)
 8004b08:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8004b0a:	4b71      	ldr	r3, [pc, #452]	; (8004cd0 <main+0x528>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d110      	bne.n	8004b34 <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8004b12:	486e      	ldr	r0, [pc, #440]	; (8004ccc <main+0x524>)
 8004b14:	f7fb fe72 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b22:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8004c98 <main+0x4f0>
 8004b26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b2e:	4b69      	ldr	r3, [pc, #420]	; (8004cd4 <main+0x52c>)
 8004b30:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 8004b34:	4868      	ldr	r0, [pc, #416]	; (8004cd8 <main+0x530>)
 8004b36:	f7fb fdcc 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8004b3a:	4867      	ldr	r0, [pc, #412]	; (8004cd8 <main+0x530>)
 8004b3c:	f7fb fdf8 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	4b65      	ldr	r3, [pc, #404]	; (8004cdc <main+0x534>)
 8004b46:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004b48:	4b64      	ldr	r3, [pc, #400]	; (8004cdc <main+0x534>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 8004b50:	4861      	ldr	r0, [pc, #388]	; (8004cd8 <main+0x530>)
 8004b52:	f7fb fe53 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b56:	4603      	mov	r3, r0
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b60:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8004c98 <main+0x4f0>
 8004b64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b6c:	4b5c      	ldr	r3, [pc, #368]	; (8004ce0 <main+0x538>)
 8004b6e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 8004b72:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <main+0x514>)
 8004b74:	4a5b      	ldr	r2, [pc, #364]	; (8004ce4 <main+0x53c>)
 8004b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004b7a:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <main+0x514>)
 8004b7c:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <main+0x540>)
 8004b7e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004b82:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <main+0x514>)
 8004b84:	4a59      	ldr	r2, [pc, #356]	; (8004cec <main+0x544>)
 8004b86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004b8a:	4b4c      	ldr	r3, [pc, #304]	; (8004cbc <main+0x514>)
 8004b8c:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <main+0x548>)
 8004b8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004b92:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <main+0x52c>)
 8004b94:	4a53      	ldr	r2, [pc, #332]	; (8004ce4 <main+0x53c>)
 8004b96:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004b9a:	4b4e      	ldr	r3, [pc, #312]	; (8004cd4 <main+0x52c>)
 8004b9c:	4a52      	ldr	r2, [pc, #328]	; (8004ce8 <main+0x540>)
 8004b9e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004ba2:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <main+0x52c>)
 8004ba4:	4a51      	ldr	r2, [pc, #324]	; (8004cec <main+0x544>)
 8004ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004baa:	4b4a      	ldr	r3, [pc, #296]	; (8004cd4 <main+0x52c>)
 8004bac:	4a50      	ldr	r2, [pc, #320]	; (8004cf0 <main+0x548>)
 8004bae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004bb2:	4b42      	ldr	r3, [pc, #264]	; (8004cbc <main+0x514>)
 8004bb4:	4a4f      	ldr	r2, [pc, #316]	; (8004cf4 <main+0x54c>)
 8004bb6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 8004bba:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <main+0x514>)
 8004bbc:	4a4e      	ldr	r2, [pc, #312]	; (8004cf8 <main+0x550>)
 8004bbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004bc2:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <main+0x520>)
 8004bc4:	4a4b      	ldr	r2, [pc, #300]	; (8004cf4 <main+0x54c>)
 8004bc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 8004bca:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <main+0x520>)
 8004bcc:	4a4b      	ldr	r2, [pc, #300]	; (8004cfc <main+0x554>)
 8004bce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004bd2:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <main+0x52c>)
 8004bd4:	4a47      	ldr	r2, [pc, #284]	; (8004cf4 <main+0x54c>)
 8004bd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 8004bda:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <main+0x52c>)
 8004bdc:	4a46      	ldr	r2, [pc, #280]	; (8004cf8 <main+0x550>)
 8004bde:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004be2:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <main+0x514>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <main+0x514>)
 8004be8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004bec:	4b33      	ldr	r3, [pc, #204]	; (8004cbc <main+0x514>)
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 8004bf6:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <main+0x514>)
 8004bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <main+0x514>)
 8004bfe:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004c02:	4b2e      	ldr	r3, [pc, #184]	; (8004cbc <main+0x514>)
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <main+0x514>)
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <main+0x514>)
 8004c12:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <main+0x520>)
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <main+0x520>)
 8004c1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <main+0x520>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <main+0x520>)
 8004c2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c2e:	4a26      	ldr	r2, [pc, #152]	; (8004cc8 <main+0x520>)
 8004c30:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <main+0x520>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <main+0x520>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <main+0x520>)
 8004c44:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004c46:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <main+0x52c>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <main+0x52c>)
 8004c4c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004c50:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <main+0x52c>)
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <main+0x52c>)
 8004c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <main+0x52c>)
 8004c62:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004c66:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <main+0x52c>)
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004c70:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <main+0x52c>)
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <main+0x52c>)
 8004c76:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 8004c78:	4821      	ldr	r0, [pc, #132]	; (8004d00 <main+0x558>)
 8004c7a:	f7fb fe8c 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 8004c7e:	4820      	ldr	r0, [pc, #128]	; (8004d00 <main+0x558>)
 8004c80:	f7fb fe71 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 8004c84:	481e      	ldr	r0, [pc, #120]	; (8004d00 <main+0x558>)
 8004c86:	f7fb fe86 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004c8a:	481e      	ldr	r0, [pc, #120]	; (8004d04 <main+0x55c>)
 8004c8c:	f008 fcfa 	bl	800d684 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004c90:	481d      	ldr	r0, [pc, #116]	; (8004d08 <main+0x560>)
 8004c92:	f008 fcf7 	bl	800d684 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004c96:	e7fe      	b.n	8004c96 <main+0x4ee>
 8004c98:	645a1cac 	.word	0x645a1cac
 8004c9c:	4004df3b 	.word	0x4004df3b
 8004ca0:	240004e8 	.word	0x240004e8
 8004ca4:	c4480000 	.word	0xc4480000
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	24000ab8 	.word	0x24000ab8
 8004cb0:	24000b43 	.word	0x24000b43
 8004cb4:	24000450 	.word	0x24000450
 8004cb8:	24000ad4 	.word	0x24000ad4
 8004cbc:	24000560 	.word	0x24000560
 8004cc0:	2400046c 	.word	0x2400046c
 8004cc4:	24000ad5 	.word	0x24000ad5
 8004cc8:	24000644 	.word	0x24000644
 8004ccc:	24000488 	.word	0x24000488
 8004cd0:	24000ad6 	.word	0x24000ad6
 8004cd4:	24000728 	.word	0x24000728
 8004cd8:	240004a4 	.word	0x240004a4
 8004cdc:	24000ad7 	.word	0x24000ad7
 8004ce0:	2400080c 	.word	0x2400080c
 8004ce4:	331ac86b 	.word	0x331ac86b
 8004ce8:	33e9d3b8 	.word	0x33e9d3b8
 8004cec:	33e9d3bd 	.word	0x33e9d3bd
 8004cf0:	3531278c 	.word	0x3531278c
 8004cf4:	3a83126f 	.word	0x3a83126f
 8004cf8:	358637bd 	.word	0x358637bd
 8004cfc:	37fba882 	.word	0x37fba882
 8004d00:	24000ad8 	.word	0x24000ad8
 8004d04:	2400112c 	.word	0x2400112c
 8004d08:	24001178 	.word	0x24001178

08004d0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b09c      	sub	sp, #112	; 0x70
 8004d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d16:	224c      	movs	r2, #76	; 0x4c
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f00d fd7c 	bl	8012818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	2220      	movs	r2, #32
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f00d fd76 	bl	8012818 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004d2c:	2002      	movs	r0, #2
 8004d2e:	f005 fd13 	bl	800a758 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <_Z18SystemClock_Configv+0x10c>)
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	4a37      	ldr	r2, [pc, #220]	; (8004e18 <_Z18SystemClock_Configv+0x10c>)
 8004d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d40:	6193      	str	r3, [r2, #24]
 8004d42:	4b35      	ldr	r3, [pc, #212]	; (8004e18 <_Z18SystemClock_Configv+0x10c>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <_Z18SystemClock_Configv+0x110>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	4a32      	ldr	r2, [pc, #200]	; (8004e1c <_Z18SystemClock_Configv+0x110>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d58:	4b30      	ldr	r3, [pc, #192]	; (8004e1c <_Z18SystemClock_Configv+0x110>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004d64:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <_Z18SystemClock_Configv+0x10c>)
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d000      	beq.n	8004d7e <_Z18SystemClock_Configv+0x72>
 8004d7c:	e7f2      	b.n	8004d64 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004d82:	2301      	movs	r3, #1
 8004d84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d92:	2304      	movs	r3, #4
 8004d94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004d96:	233c      	movs	r3, #60	; 0x3c
 8004d98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004d9e:	2360      	movs	r3, #96	; 0x60
 8004da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004da2:	2302      	movs	r3, #2
 8004da4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004da6:	230c      	movs	r3, #12
 8004da8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 fd08 	bl	800a7cc <HAL_RCC_OscConfig>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bf14      	ite	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	2300      	moveq	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004dcc:	f000 f856 	bl	8004e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dd0:	233f      	movs	r3, #63	; 0x3f
 8004dd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004de4:	2340      	movs	r3, #64	; 0x40
 8004de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004dee:	2340      	movs	r3, #64	; 0x40
 8004df0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	2104      	movs	r1, #4
 8004df6:	4618      	mov	r0, r3
 8004df8:	f006 f916 	bl	800b028 <HAL_RCC_ClockConfig>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004e0c:	f000 f836 	bl	8004e7c <Error_Handler>
  }
}
 8004e10:	bf00      	nop
 8004e12:	3770      	adds	r7, #112	; 0x70
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	58024800 	.word	0x58024800
 8004e1c:	58000400 	.word	0x58000400

08004e20 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e30:	d102      	bne.n	8004e38 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004e32:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3e:	d102      	bne.n	8004e46 <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_GPIO_EXTI_Callback+0x50>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d102      	bne.n	8004e52 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_GPIO_EXTI_Callback+0x54>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d102      	bne.n	8004e5e <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_GPIO_EXTI_Callback+0x58>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
	}

}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	24000b42 	.word	0x24000b42
 8004e70:	24000b43 	.word	0x24000b43
 8004e74:	24000b44 	.word	0x24000b44
 8004e78:	24000b45 	.word	0x24000b45

08004e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004e80:	2200      	movs	r2, #0
 8004e82:	2101      	movs	r1, #1
 8004e84:	4808      	ldr	r0, [pc, #32]	; (8004ea8 <Error_Handler+0x2c>)
 8004e86:	f005 fc33 	bl	800a6f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	4807      	ldr	r0, [pc, #28]	; (8004eac <Error_Handler+0x30>)
 8004e90:	f005 fc2e 	bl	800a6f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004e94:	2201      	movs	r2, #1
 8004e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e9a:	4803      	ldr	r0, [pc, #12]	; (8004ea8 <Error_Handler+0x2c>)
 8004e9c:	f005 fc28 	bl	800a6f0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea0:	b672      	cpsid	i
}
 8004ea2:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004ea4:	e7fe      	b.n	8004ea4 <Error_Handler+0x28>
 8004ea6:	bf00      	nop
 8004ea8:	58020400 	.word	0x58020400
 8004eac:	58021000 	.word	0x58021000

08004eb0 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d158      	bne.n	8004f72 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d153      	bne.n	8004f72 <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004eca:	22d4      	movs	r2, #212	; 0xd4
 8004ecc:	4947      	ldr	r1, [pc, #284]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ece:	4848      	ldr	r0, [pc, #288]	; (8004ff0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004ed0:	f7fb fbe0 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004ed4:	22b4      	movs	r2, #180	; 0xb4
 8004ed6:	4945      	ldr	r1, [pc, #276]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ed8:	4846      	ldr	r0, [pc, #280]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004eda:	f7fb fbdb 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004ede:	22c4      	movs	r2, #196	; 0xc4
 8004ee0:	4942      	ldr	r1, [pc, #264]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ee2:	4845      	ldr	r0, [pc, #276]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004ee4:	f7fb fbd6 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004ee8:	22a4      	movs	r2, #164	; 0xa4
 8004eea:	4940      	ldr	r1, [pc, #256]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004eec:	4843      	ldr	r0, [pc, #268]	; (8004ffc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004eee:	f7fb fbd1 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	4b42      	ldr	r3, [pc, #264]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4942      	ldr	r1, [pc, #264]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004efc:	4842      	ldr	r0, [pc, #264]	; (8005008 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004efe:	f7fc ff5d 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	4b40      	ldr	r3, [pc, #256]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	4940      	ldr	r1, [pc, #256]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004f0e:	4841      	ldr	r0, [pc, #260]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004f10:	f7fc ff54 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4b3c      	ldr	r3, [pc, #240]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	493e      	ldr	r1, [pc, #248]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004f20:	483e      	ldr	r0, [pc, #248]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004f22:	f7fc ff4b 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4b34      	ldr	r3, [pc, #208]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004f2e:	2208      	movs	r2, #8
 8004f30:	493b      	ldr	r1, [pc, #236]	; (8005020 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004f32:	483c      	ldr	r0, [pc, #240]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004f34:	f7fc ff42 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004f38:	483b      	ldr	r0, [pc, #236]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004f3a:	f7fb fd9f 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004f3e:	483b      	ldr	r0, [pc, #236]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004f40:	f7fb fd9c 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004f44:	483a      	ldr	r0, [pc, #232]	; (8005030 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004f46:	f7fb fd99 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004f4a:	483a      	ldr	r0, [pc, #232]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004f4c:	f7fb fd96 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004f50:	4839      	ldr	r0, [pc, #228]	; (8005038 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004f52:	f7fb fd93 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004f56:	4839      	ldr	r0, [pc, #228]	; (800503c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f58:	f7fb fd90 	bl	8000a7c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	4938      	ldr	r1, [pc, #224]	; (8005040 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004f60:	4838      	ldr	r0, [pc, #224]	; (8005044 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f62:	f7fc fca1 	bl	80018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004f66:	2304      	movs	r3, #4
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4937      	ldr	r1, [pc, #220]	; (8005048 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004f6c:	4837      	ldr	r0, [pc, #220]	; (800504c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004f6e:	f7fb fcd2 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d134      	bne.n	8004fe2 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d12f      	bne.n	8004fe2 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004f82:	4832      	ldr	r0, [pc, #200]	; (800504c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004f84:	f7fb fce4 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004f88:	482e      	ldr	r0, [pc, #184]	; (8005044 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f8a:	f7fc fcbd 	bl	8001908 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004f8e:	482b      	ldr	r0, [pc, #172]	; (800503c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f90:	f7fb fde2 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004f94:	4828      	ldr	r0, [pc, #160]	; (8005038 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004f96:	f7fb fddf 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004f9a:	4826      	ldr	r0, [pc, #152]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004f9c:	f7fb fddc 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004fa0:	4823      	ldr	r0, [pc, #140]	; (8005030 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004fa2:	f7fb fdd9 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004fa6:	4821      	ldr	r0, [pc, #132]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004fa8:	f7fb fdd6 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004fac:	481e      	ldr	r0, [pc, #120]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004fae:	f7fb fdd3 	bl	8000b58 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004fb2:	481c      	ldr	r0, [pc, #112]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004fb4:	f7fc ff44 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004fb8:	4818      	ldr	r0, [pc, #96]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004fba:	f7fc ff41 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004fbe:	4815      	ldr	r0, [pc, #84]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004fc0:	f7fc ff3e 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004fc4:	4810      	ldr	r0, [pc, #64]	; (8005008 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004fc6:	f7fc ff3b 	bl	8001e40 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004fca:	480c      	ldr	r0, [pc, #48]	; (8004ffc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004fcc:	f7fb fb76 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004fd2:	f7fb fb73 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004fd6:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004fd8:	f7fb fb70 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004fdc:	4804      	ldr	r0, [pc, #16]	; (8004ff0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004fde:	f7fb fb6d 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	240011c4 	.word	0x240011c4
 8004ff0:	24000450 	.word	0x24000450
 8004ff4:	2400046c 	.word	0x2400046c
 8004ff8:	24000488 	.word	0x24000488
 8004ffc:	240004a4 	.word	0x240004a4
 8005000:	58020400 	.word	0x58020400
 8005004:	24000e34 	.word	0x24000e34
 8005008:	240004c0 	.word	0x240004c0
 800500c:	58021000 	.word	0x58021000
 8005010:	24000d9c 	.word	0x24000d9c
 8005014:	240004e8 	.word	0x240004e8
 8005018:	240010e0 	.word	0x240010e0
 800501c:	24000510 	.word	0x24000510
 8005020:	24000de8 	.word	0x24000de8
 8005024:	24000538 	.word	0x24000538
 8005028:	24000560 	.word	0x24000560
 800502c:	24000644 	.word	0x24000644
 8005030:	24000728 	.word	0x24000728
 8005034:	2400080c 	.word	0x2400080c
 8005038:	240008f0 	.word	0x240008f0
 800503c:	240009d4 	.word	0x240009d4
 8005040:	24000e80 	.word	0x24000e80
 8005044:	24000ab8 	.word	0x24000ab8
 8005048:	24000fb0 	.word	0x24000fb0
 800504c:	24000ad8 	.word	0x24000ad8

08005050 <_GLOBAL__sub_I_TIM_MS>:
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
 8005054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005058:	2001      	movs	r0, #1
 800505a:	f7ff ff29 	bl	8004eb0 <_Z41__static_initialization_and_destruction_0ii>
 800505e:	bd80      	pop	{r7, pc}

08005060 <_GLOBAL__sub_D_TIM_MS>:
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
 8005064:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005068:	2000      	movs	r0, #0
 800506a:	f7ff ff21 	bl	8004eb0 <_Z41__static_initialization_and_destruction_0ii>
 800506e:	bd80      	pop	{r7, pc}

08005070 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005074:	4b28      	ldr	r3, [pc, #160]	; (8005118 <MX_SPI3_Init+0xa8>)
 8005076:	4a29      	ldr	r2, [pc, #164]	; (800511c <MX_SPI3_Init+0xac>)
 8005078:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <MX_SPI3_Init+0xa8>)
 800507c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005080:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005082:	4b25      	ldr	r3, [pc, #148]	; (8005118 <MX_SPI3_Init+0xa8>)
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005088:	4b23      	ldr	r3, [pc, #140]	; (8005118 <MX_SPI3_Init+0xa8>)
 800508a:	2207      	movs	r2, #7
 800508c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800508e:	4b22      	ldr	r3, [pc, #136]	; (8005118 <MX_SPI3_Init+0xa8>)
 8005090:	2200      	movs	r2, #0
 8005092:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005094:	4b20      	ldr	r3, [pc, #128]	; (8005118 <MX_SPI3_Init+0xa8>)
 8005096:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800509a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <MX_SPI3_Init+0xa8>)
 800509e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80050a4:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80050aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050de:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <MX_SPI3_Init+0xa8>)
 80050fe:	2200      	movs	r2, #0
 8005100:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005102:	4805      	ldr	r0, [pc, #20]	; (8005118 <MX_SPI3_Init+0xa8>)
 8005104:	f007 fe84 	bl	800ce10 <HAL_SPI_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800510e:	f7ff feb5 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	24000c20 	.word	0x24000c20
 800511c:	40003c00 	.word	0x40003c00

08005120 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0b8      	sub	sp, #224	; 0xe0
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005128:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005138:	f107 0310 	add.w	r3, r7, #16
 800513c:	22bc      	movs	r2, #188	; 0xbc
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f00d fb69 	bl	8012818 <memset>
  if(spiHandle->Instance==SPI3)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a56      	ldr	r2, [pc, #344]	; (80052a4 <HAL_SPI_MspInit+0x184>)
 800514c:	4293      	cmp	r3, r2
 800514e:	f040 80a5 	bne.w	800529c <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8005152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005156:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005158:	2300      	movs	r3, #0
 800515a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	4618      	mov	r0, r3
 8005162:	f006 faed 	bl	800b740 <HAL_RCCEx_PeriphCLKConfig>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800516c:	f7ff fe86 	bl	8004e7c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005170:	4b4d      	ldr	r3, [pc, #308]	; (80052a8 <HAL_SPI_MspInit+0x188>)
 8005172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005176:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <HAL_SPI_MspInit+0x188>)
 8005178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005180:	4b49      	ldr	r3, [pc, #292]	; (80052a8 <HAL_SPI_MspInit+0x188>)
 8005182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800518e:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_SPI_MspInit+0x188>)
 8005190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005194:	4a44      	ldr	r2, [pc, #272]	; (80052a8 <HAL_SPI_MspInit+0x188>)
 8005196:	f043 0304 	orr.w	r3, r3, #4
 800519a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800519e:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_SPI_MspInit+0x188>)
 80051a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80051ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80051b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b4:	2302      	movs	r3, #2
 80051b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051c6:	2306      	movs	r3, #6
 80051c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051d0:	4619      	mov	r1, r3
 80051d2:	4836      	ldr	r0, [pc, #216]	; (80052ac <HAL_SPI_MspInit+0x18c>)
 80051d4:	f005 f8dc 	bl	800a390 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80051d8:	4b35      	ldr	r3, [pc, #212]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 80051da:	4a36      	ldr	r2, [pc, #216]	; (80052b4 <HAL_SPI_MspInit+0x194>)
 80051dc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 80051e0:	223e      	movs	r2, #62	; 0x3e
 80051e2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 80051e6:	2240      	movs	r2, #64	; 0x40
 80051e8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ea:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051f0:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 80051f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 8005200:	2200      	movs	r2, #0
 8005202:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 8005206:	2200      	movs	r2, #0
 8005208:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800520a:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 800520c:	2200      	movs	r2, #0
 800520e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 8005212:	2200      	movs	r2, #0
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8005216:	4826      	ldr	r0, [pc, #152]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 8005218:	f002 fa7e 	bl	8007718 <HAL_DMA_Init>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8005222:	f7ff fe2b 	bl	8004e7c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 800522a:	679a      	str	r2, [r3, #120]	; 0x78
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <HAL_SPI_MspInit+0x190>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005234:	4a21      	ldr	r2, [pc, #132]	; (80052bc <HAL_SPI_MspInit+0x19c>)
 8005236:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8005238:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 800523a:	223d      	movs	r2, #61	; 0x3d
 800523c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005246:	2200      	movs	r2, #0
 8005248:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800524a:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 800524c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005250:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005254:	2200      	movs	r2, #0
 8005256:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005258:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 800525a:	2200      	movs	r2, #0
 800525c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005260:	2200      	movs	r2, #0
 8005262:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005266:	2200      	movs	r2, #0
 8005268:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 800526c:	2200      	movs	r2, #0
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005270:	4811      	ldr	r0, [pc, #68]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005272:	f002 fa51 	bl	8007718 <HAL_DMA_Init>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 800527c:	f7ff fdfe 	bl	8004e7c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <HAL_SPI_MspInit+0x198>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	2033      	movs	r0, #51	; 0x33
 8005292:	f002 f802 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005296:	2033      	movs	r0, #51	; 0x33
 8005298:	f002 f819 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800529c:	bf00      	nop
 800529e:	37e0      	adds	r7, #224	; 0xe0
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40003c00 	.word	0x40003c00
 80052a8:	58024400 	.word	0x58024400
 80052ac:	58020800 	.word	0x58020800
 80052b0:	24000ca8 	.word	0x24000ca8
 80052b4:	400200b8 	.word	0x400200b8
 80052b8:	24000d20 	.word	0x24000d20
 80052bc:	40020410 	.word	0x40020410

080052c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_MspInit+0x30>)
 80052c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052cc:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <HAL_MspInit+0x30>)
 80052ce:	f043 0302 	orr.w	r3, r3, #2
 80052d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_MspInit+0x30>)
 80052d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	58024400 	.word	0x58024400

080052f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052f8:	e7fe      	b.n	80052f8 <NMI_Handler+0x4>

080052fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052fe:	e7fe      	b.n	80052fe <HardFault_Handler+0x4>

08005300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005304:	e7fe      	b.n	8005304 <MemManage_Handler+0x4>

08005306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800530a:	e7fe      	b.n	800530a <BusFault_Handler+0x4>

0800530c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005310:	e7fe      	b.n	8005310 <UsageFault_Handler+0x4>

08005312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005340:	f001 fe80 	bl	8007044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8005344:	f001 ffdd 	bl	8007302 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005348:	bf00      	nop
 800534a:	bd80      	pop	{r7, pc}

0800534c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005350:	4802      	ldr	r0, [pc, #8]	; (800535c <DMA1_Stream0_IRQHandler+0x10>)
 8005352:	f003 fd0b 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	240014f4 	.word	0x240014f4

08005360 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <DMA1_Stream1_IRQHandler+0x10>)
 8005366:	f003 fd01 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2400165c 	.word	0x2400165c

08005374 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005378:	4802      	ldr	r0, [pc, #8]	; (8005384 <DMA1_Stream2_IRQHandler+0x10>)
 800537a:	f003 fcf7 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	240016d4 	.word	0x240016d4

08005388 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <DMA1_Stream3_IRQHandler+0x10>)
 800538e:	f003 fced 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	24001404 	.word	0x24001404

0800539c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80053a0:	4802      	ldr	r0, [pc, #8]	; (80053ac <DMA1_Stream4_IRQHandler+0x10>)
 80053a2:	f003 fce3 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	2400147c 	.word	0x2400147c

080053b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053b4:	4802      	ldr	r0, [pc, #8]	; (80053c0 <DMA1_Stream5_IRQHandler+0x10>)
 80053b6:	f003 fcd9 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	2400156c 	.word	0x2400156c

080053c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80053c8:	4802      	ldr	r0, [pc, #8]	; (80053d4 <DMA1_Stream6_IRQHandler+0x10>)
 80053ca:	f003 fccf 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	240015e4 	.word	0x240015e4

080053d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80053dc:	2040      	movs	r0, #64	; 0x40
 80053de:	f005 f9a0 	bl	800a722 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 80053e2:	2080      	movs	r0, #128	; 0x80
 80053e4:	f005 f99d 	bl	800a722 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}

080053ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <USART2_IRQHandler+0x10>)
 80053f2:	f009 ff8f 	bl	800f314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	240012e4 	.word	0x240012e4

08005400 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005404:	4802      	ldr	r0, [pc, #8]	; (8005410 <USART3_IRQHandler+0x10>)
 8005406:	f009 ff85 	bl	800f314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	24001374 	.word	0x24001374

08005414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8005418:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800541c:	f005 f981 	bl	800a722 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8005420:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005424:	f005 f97d 	bl	800a722 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8005428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800542c:	f005 f979 	bl	800a722 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8005430:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005434:	f005 f975 	bl	800a722 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}

0800543c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005440:	4803      	ldr	r0, [pc, #12]	; (8005450 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8005442:	f008 fc69 	bl	800dd18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005446:	4803      	ldr	r0, [pc, #12]	; (8005454 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005448:	f008 fc66 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}
 8005450:	24000fb0 	.word	0x24000fb0
 8005454:	24000ffc 	.word	0x24000ffc

08005458 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800545c:	4803      	ldr	r0, [pc, #12]	; (800546c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800545e:	f008 fc5b 	bl	800dd18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005462:	4803      	ldr	r0, [pc, #12]	; (8005470 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005464:	f008 fc58 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005468:	bf00      	nop
 800546a:	bd80      	pop	{r7, pc}
 800546c:	24000fb0 	.word	0x24000fb0
 8005470:	24001048 	.word	0x24001048

08005474 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005478:	4803      	ldr	r0, [pc, #12]	; (8005488 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800547a:	f008 fc4d 	bl	800dd18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800547e:	4803      	ldr	r0, [pc, #12]	; (800548c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8005480:	f008 fc4a 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	24000fb0 	.word	0x24000fb0
 800548c:	24001094 	.word	0x24001094

08005490 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <TIM8_CC_IRQHandler+0x10>)
 8005496:	f008 fc3f 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	24000fb0 	.word	0x24000fb0

080054a4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80054a8:	4802      	ldr	r0, [pc, #8]	; (80054b4 <DMA1_Stream7_IRQHandler+0x10>)
 80054aa:	f003 fc5f 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	24000ca8 	.word	0x24000ca8

080054b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80054bc:	4802      	ldr	r0, [pc, #8]	; (80054c8 <TIM5_IRQHandler+0x10>)
 80054be:	f008 fc2b 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	24000ecc 	.word	0x24000ecc

080054cc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80054d0:	4802      	ldr	r0, [pc, #8]	; (80054dc <SPI3_IRQHandler+0x10>)
 80054d2:	f007 fda3 	bl	800d01c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	24000c20 	.word	0x24000c20

080054e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80054e4:	4802      	ldr	r0, [pc, #8]	; (80054f0 <UART4_IRQHandler+0x10>)
 80054e6:	f009 ff15 	bl	800f314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	240011c4 	.word	0x240011c4

080054f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054f8:	4802      	ldr	r0, [pc, #8]	; (8005504 <TIM6_DAC_IRQHandler+0x10>)
 80054fa:	f008 fc0d 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	24000f18 	.word	0x24000f18

08005508 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800550c:	4802      	ldr	r0, [pc, #8]	; (8005518 <TIM7_IRQHandler+0x10>)
 800550e:	f008 fc03 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	24000f64 	.word	0x24000f64

0800551c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <DMA2_Stream0_IRQHandler+0x10>)
 8005522:	f003 fc23 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	24000d20 	.word	0x24000d20

08005530 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <UART7_IRQHandler+0x10>)
 8005536:	f009 feed 	bl	800f314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	24001254 	.word	0x24001254

08005544 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005548:	4802      	ldr	r0, [pc, #8]	; (8005554 <TIM16_IRQHandler+0x10>)
 800554a:	f008 fbe5 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	2400112c 	.word	0x2400112c

08005558 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800555c:	4802      	ldr	r0, [pc, #8]	; (8005568 <TIM17_IRQHandler+0x10>)
 800555e:	f008 fbdb 	bl	800dd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	24001178 	.word	0x24001178

0800556c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
	return 1;
 8005570:	2301      	movs	r3, #1
}
 8005572:	4618      	mov	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <_kill>:

int _kill(int pid, int sig)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005586:	f00d f91d 	bl	80127c4 <__errno>
 800558a:	4603      	mov	r3, r0
 800558c:	2216      	movs	r2, #22
 800558e:	601a      	str	r2, [r3, #0]
	return -1;
 8005590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <_exit>:

void _exit (int status)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ffe7 	bl	800557c <_kill>
	while (1) {}		/* Make sure we hang here */
 80055ae:	e7fe      	b.n	80055ae <_exit+0x12>

080055b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e00a      	b.n	80055d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055c2:	f3af 8000 	nop.w
 80055c6:	4601      	mov	r1, r0
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	60ba      	str	r2, [r7, #8]
 80055ce:	b2ca      	uxtb	r2, r1
 80055d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3301      	adds	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	dbf0      	blt.n	80055c2 <_read+0x12>
	}

return len;
 80055e0:	687b      	ldr	r3, [r7, #4]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e009      	b.n	8005610 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	60ba      	str	r2, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3301      	adds	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	dbf1      	blt.n	80055fc <_write+0x12>
	}
	return len;
 8005618:	687b      	ldr	r3, [r7, #4]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <_close>:

int _close(int file)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
	return -1;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800564a:	605a      	str	r2, [r3, #4]
	return 0;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <_isatty>:

int _isatty(int file)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
	return 1;
 8005662:	2301      	movs	r3, #1
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
	return 0;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005694:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <_sbrk+0x5c>)
 8005696:	4b15      	ldr	r3, [pc, #84]	; (80056ec <_sbrk+0x60>)
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <_sbrk+0x64>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <_sbrk+0x64>)
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <_sbrk+0x68>)
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <_sbrk+0x64>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d207      	bcs.n	80056cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056bc:	f00d f882 	bl	80127c4 <__errno>
 80056c0:	4603      	mov	r3, r0
 80056c2:	220c      	movs	r2, #12
 80056c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ca:	e009      	b.n	80056e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <_sbrk+0x64>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <_sbrk+0x64>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4413      	add	r3, r2
 80056da:	4a05      	ldr	r2, [pc, #20]	; (80056f0 <_sbrk+0x64>)
 80056dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056de:	68fb      	ldr	r3, [r7, #12]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	24001d60 	.word	0x24001d60
 80056ec:	00000400 	.word	0x00000400
 80056f0:	24000d98 	.word	0x24000d98
 80056f4:	24001760 	.word	0x24001760

080056f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056fc:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <SystemInit+0xec>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	4a38      	ldr	r2, [pc, #224]	; (80057e4 <SystemInit+0xec>)
 8005704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <SystemInit+0xf0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2b06      	cmp	r3, #6
 8005716:	d807      	bhi.n	8005728 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005718:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <SystemInit+0xf0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f023 030f 	bic.w	r3, r3, #15
 8005720:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <SystemInit+0xf0>)
 8005722:	f043 0307 	orr.w	r3, r3, #7
 8005726:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005728:	4b30      	ldr	r3, [pc, #192]	; (80057ec <SystemInit+0xf4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <SystemInit+0xf4>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <SystemInit+0xf4>)
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800573a:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <SystemInit+0xf4>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	492b      	ldr	r1, [pc, #172]	; (80057ec <SystemInit+0xf4>)
 8005740:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <SystemInit+0xf8>)
 8005742:	4013      	ands	r3, r2
 8005744:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005746:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <SystemInit+0xf0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005752:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <SystemInit+0xf0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 030f 	bic.w	r3, r3, #15
 800575a:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <SystemInit+0xf0>)
 800575c:	f043 0307 	orr.w	r3, r3, #7
 8005760:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005762:	4b22      	ldr	r3, [pc, #136]	; (80057ec <SystemInit+0xf4>)
 8005764:	2200      	movs	r2, #0
 8005766:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <SystemInit+0xf4>)
 800576a:	2200      	movs	r2, #0
 800576c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800576e:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <SystemInit+0xf4>)
 8005770:	2200      	movs	r2, #0
 8005772:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <SystemInit+0xf4>)
 8005776:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <SystemInit+0xfc>)
 8005778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800577a:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <SystemInit+0xf4>)
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <SystemInit+0x100>)
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005780:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <SystemInit+0xf4>)
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <SystemInit+0x104>)
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005786:	4b19      	ldr	r3, [pc, #100]	; (80057ec <SystemInit+0xf4>)
 8005788:	2200      	movs	r2, #0
 800578a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800578c:	4b17      	ldr	r3, [pc, #92]	; (80057ec <SystemInit+0xf4>)
 800578e:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <SystemInit+0x104>)
 8005790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <SystemInit+0xf4>)
 8005794:	2200      	movs	r2, #0
 8005796:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005798:	4b14      	ldr	r3, [pc, #80]	; (80057ec <SystemInit+0xf4>)
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <SystemInit+0x104>)
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800579e:	4b13      	ldr	r3, [pc, #76]	; (80057ec <SystemInit+0xf4>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <SystemInit+0xf4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a10      	ldr	r2, [pc, #64]	; (80057ec <SystemInit+0xf4>)
 80057aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <SystemInit+0xf4>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80057b6:	4b12      	ldr	r3, [pc, #72]	; (8005800 <SystemInit+0x108>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <SystemInit+0x10c>)
 80057bc:	4013      	ands	r3, r2
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c2:	d202      	bcs.n	80057ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80057c4:	4b10      	ldr	r3, [pc, #64]	; (8005808 <SystemInit+0x110>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <SystemInit+0x114>)
 80057cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80057d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <SystemInit+0xec>)
 80057d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000ed00 	.word	0xe000ed00
 80057e8:	52002000 	.word	0x52002000
 80057ec:	58024400 	.word	0x58024400
 80057f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80057f4:	02020200 	.word	0x02020200
 80057f8:	01ff0000 	.word	0x01ff0000
 80057fc:	01010280 	.word	0x01010280
 8005800:	5c001000 	.word	0x5c001000
 8005804:	ffff0000 	.word	0xffff0000
 8005808:	51008108 	.word	0x51008108
 800580c:	52004000 	.word	0x52004000

08005810 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b09a      	sub	sp, #104	; 0x68
 8005814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005816:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	609a      	str	r2, [r3, #8]
 8005822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005824:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	611a      	str	r2, [r3, #16]
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005844:	1d3b      	adds	r3, r7, #4
 8005846:	222c      	movs	r2, #44	; 0x2c
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f00c ffe4 	bl	8012818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005850:	4b44      	ldr	r3, [pc, #272]	; (8005964 <MX_TIM1_Init+0x154>)
 8005852:	4a45      	ldr	r2, [pc, #276]	; (8005968 <MX_TIM1_Init+0x158>)
 8005854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005856:	4b43      	ldr	r3, [pc, #268]	; (8005964 <MX_TIM1_Init+0x154>)
 8005858:	22c7      	movs	r2, #199	; 0xc7
 800585a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800585c:	4b41      	ldr	r3, [pc, #260]	; (8005964 <MX_TIM1_Init+0x154>)
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8005862:	4b40      	ldr	r3, [pc, #256]	; (8005964 <MX_TIM1_Init+0x154>)
 8005864:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800586a:	4b3e      	ldr	r3, [pc, #248]	; (8005964 <MX_TIM1_Init+0x154>)
 800586c:	2200      	movs	r2, #0
 800586e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005870:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <MX_TIM1_Init+0x154>)
 8005872:	2200      	movs	r2, #0
 8005874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005876:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <MX_TIM1_Init+0x154>)
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800587c:	4839      	ldr	r0, [pc, #228]	; (8005964 <MX_TIM1_Init+0x154>)
 800587e:	f007 feaa 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005888:	f7ff faf8 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800588c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005890:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005896:	4619      	mov	r1, r3
 8005898:	4832      	ldr	r0, [pc, #200]	; (8005964 <MX_TIM1_Init+0x154>)
 800589a:	f008 fc71 	bl	800e180 <HAL_TIM_ConfigClockSource>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80058a4:	f7ff faea 	bl	8004e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80058a8:	482e      	ldr	r0, [pc, #184]	; (8005964 <MX_TIM1_Init+0x154>)
 80058aa:	f007 ff92 	bl	800d7d2 <HAL_TIM_PWM_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80058b4:	f7ff fae2 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058b8:	2300      	movs	r3, #0
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80058bc:	2300      	movs	r3, #0
 80058be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058c8:	4619      	mov	r1, r3
 80058ca:	4826      	ldr	r0, [pc, #152]	; (8005964 <MX_TIM1_Init+0x154>)
 80058cc:	f009 f9ac 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80058d6:	f7ff fad1 	bl	8004e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058da:	2360      	movs	r3, #96	; 0x60
 80058dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80058de:	f240 1339 	movw	r3, #313	; 0x139
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058e4:	2300      	movs	r3, #0
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058e8:	2300      	movs	r3, #0
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058f0:	2300      	movs	r3, #0
 80058f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058f4:	2300      	movs	r3, #0
 80058f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058fc:	2204      	movs	r2, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4818      	ldr	r0, [pc, #96]	; (8005964 <MX_TIM1_Init+0x154>)
 8005902:	f008 fb29 	bl	800df58 <HAL_TIM_PWM_ConfigChannel>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800590c:	f7ff fab6 	bl	8004e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005910:	2300      	movs	r3, #0
 8005912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800592e:	2300      	movs	r3, #0
 8005930:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4807      	ldr	r0, [pc, #28]	; (8005964 <MX_TIM1_Init+0x154>)
 8005946:	f009 f9fd 	bl	800ed44 <HAL_TIMEx_ConfigBreakDeadTime>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8005950:	f7ff fa94 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005954:	4803      	ldr	r0, [pc, #12]	; (8005964 <MX_TIM1_Init+0x154>)
 8005956:	f000 fdd3 	bl	8006500 <HAL_TIM_MspPostInit>

}
 800595a:	bf00      	nop
 800595c:	3768      	adds	r7, #104	; 0x68
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	24000d9c 	.word	0x24000d9c
 8005968:	40010000 	.word	0x40010000

0800596c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	; 0x38
 8005970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005980:	f107 031c 	add.w	r3, r7, #28
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800598c:	463b      	mov	r3, r7
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	605a      	str	r2, [r3, #4]
 8005994:	609a      	str	r2, [r3, #8]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	611a      	str	r2, [r3, #16]
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800599e:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80059a6:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059a8:	22c7      	movs	r2, #199	; 0xc7
 80059aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059ac:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059b4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80059b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ba:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059bc:	2200      	movs	r2, #0
 80059be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059c0:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059c6:	4824      	ldr	r0, [pc, #144]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059c8:	f007 fe05 	bl	800d5d6 <HAL_TIM_Base_Init>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80059d2:	f7ff fa53 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059e0:	4619      	mov	r1, r3
 80059e2:	481d      	ldr	r0, [pc, #116]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059e4:	f008 fbcc 	bl	800e180 <HAL_TIM_ConfigClockSource>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80059ee:	f7ff fa45 	bl	8004e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80059f2:	4819      	ldr	r0, [pc, #100]	; (8005a58 <MX_TIM2_Init+0xec>)
 80059f4:	f007 feed 	bl	800d7d2 <HAL_TIM_PWM_Init>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80059fe:	f7ff fa3d 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a0a:	f107 031c 	add.w	r3, r7, #28
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4811      	ldr	r0, [pc, #68]	; (8005a58 <MX_TIM2_Init+0xec>)
 8005a12:	f009 f909 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005a1c:	f7ff fa2e 	bl	8004e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a20:	2360      	movs	r3, #96	; 0x60
 8005a22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005a24:	f240 1339 	movw	r3, #313	; 0x139
 8005a28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a32:	463b      	mov	r3, r7
 8005a34:	2208      	movs	r2, #8
 8005a36:	4619      	mov	r1, r3
 8005a38:	4807      	ldr	r0, [pc, #28]	; (8005a58 <MX_TIM2_Init+0xec>)
 8005a3a:	f008 fa8d 	bl	800df58 <HAL_TIM_PWM_ConfigChannel>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005a44:	f7ff fa1a 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005a48:	4803      	ldr	r0, [pc, #12]	; (8005a58 <MX_TIM2_Init+0xec>)
 8005a4a:	f000 fd59 	bl	8006500 <HAL_TIM_MspPostInit>

}
 8005a4e:	bf00      	nop
 8005a50:	3738      	adds	r7, #56	; 0x38
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	24000de8 	.word	0x24000de8

08005a5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08e      	sub	sp, #56	; 0x38
 8005a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a70:	f107 031c 	add.w	r3, r7, #28
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	615a      	str	r2, [r3, #20]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a8e:	4b2d      	ldr	r3, [pc, #180]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005a90:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <MX_TIM3_Init+0xec>)
 8005a92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005a94:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005a96:	22c7      	movs	r2, #199	; 0xc7
 8005a98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a9a:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8005aa0:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005aa2:	f640 125f 	movw	r2, #2399	; 0x95f
 8005aa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aa8:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005aae:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ab4:	4823      	ldr	r0, [pc, #140]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005ab6:	f007 fd8e 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005ac0:	f7ff f9dc 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ace:	4619      	mov	r1, r3
 8005ad0:	481c      	ldr	r0, [pc, #112]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005ad2:	f008 fb55 	bl	800e180 <HAL_TIM_ConfigClockSource>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005adc:	f7ff f9ce 	bl	8004e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ae0:	4818      	ldr	r0, [pc, #96]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005ae2:	f007 fe76 	bl	800d7d2 <HAL_TIM_PWM_Init>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005aec:	f7ff f9c6 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005af8:	f107 031c 	add.w	r3, r7, #28
 8005afc:	4619      	mov	r1, r3
 8005afe:	4811      	ldr	r0, [pc, #68]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005b00:	f009 f892 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005b0a:	f7ff f9b7 	bl	8004e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b0e:	2360      	movs	r3, #96	; 0x60
 8005b10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b1e:	463b      	mov	r3, r7
 8005b20:	2200      	movs	r2, #0
 8005b22:	4619      	mov	r1, r3
 8005b24:	4807      	ldr	r0, [pc, #28]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005b26:	f008 fa17 	bl	800df58 <HAL_TIM_PWM_ConfigChannel>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005b30:	f7ff f9a4 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b34:	4803      	ldr	r0, [pc, #12]	; (8005b44 <MX_TIM3_Init+0xe8>)
 8005b36:	f000 fce3 	bl	8006500 <HAL_TIM_MspPostInit>

}
 8005b3a:	bf00      	nop
 8005b3c:	3738      	adds	r7, #56	; 0x38
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	24000e34 	.word	0x24000e34
 8005b48:	40000400 	.word	0x40000400

08005b4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b60:	f107 031c 	add.w	r3, r7, #28
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	60da      	str	r2, [r3, #12]
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	615a      	str	r2, [r3, #20]
 8005b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b7e:	4b2d      	ldr	r3, [pc, #180]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005b80:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <MX_TIM4_Init+0xec>)
 8005b82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005b84:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005b86:	22ef      	movs	r2, #239	; 0xef
 8005b88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b8a:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8005b90:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005b92:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005b96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b98:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b9e:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005ba4:	4823      	ldr	r0, [pc, #140]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005ba6:	f007 fd16 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005bb0:	f7ff f964 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	481c      	ldr	r0, [pc, #112]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005bc2:	f008 fadd 	bl	800e180 <HAL_TIM_ConfigClockSource>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005bcc:	f7ff f956 	bl	8004e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005bd0:	4818      	ldr	r0, [pc, #96]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005bd2:	f007 fdfe 	bl	800d7d2 <HAL_TIM_PWM_Init>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005bdc:	f7ff f94e 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005be8:	f107 031c 	add.w	r3, r7, #28
 8005bec:	4619      	mov	r1, r3
 8005bee:	4811      	ldr	r0, [pc, #68]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005bf0:	f009 f81a 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005bfa:	f7ff f93f 	bl	8004e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bfe:	2360      	movs	r3, #96	; 0x60
 8005c00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c0e:	463b      	mov	r3, r7
 8005c10:	2208      	movs	r2, #8
 8005c12:	4619      	mov	r1, r3
 8005c14:	4807      	ldr	r0, [pc, #28]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005c16:	f008 f99f 	bl	800df58 <HAL_TIM_PWM_ConfigChannel>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005c20:	f7ff f92c 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005c24:	4803      	ldr	r0, [pc, #12]	; (8005c34 <MX_TIM4_Init+0xe8>)
 8005c26:	f000 fc6b 	bl	8006500 <HAL_TIM_MspPostInit>

}
 8005c2a:	bf00      	nop
 8005c2c:	3738      	adds	r7, #56	; 0x38
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	24000e80 	.word	0x24000e80
 8005c38:	40000800 	.word	0x40000800

08005c3c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c42:	f107 0310 	add.w	r3, r7, #16
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
 8005c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <MX_TIM5_Init+0x98>)
 8005c5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c62:	22c7      	movs	r2, #199	; 0xc7
 8005c64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005c6c:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c6e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8005c72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c74:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c80:	4813      	ldr	r0, [pc, #76]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c82:	f007 fca8 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005c8c:	f7ff f8f6 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c96:	f107 0310 	add.w	r3, r7, #16
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	480c      	ldr	r0, [pc, #48]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005c9e:	f008 fa6f 	bl	800e180 <HAL_TIM_ConfigClockSource>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005ca8:	f7ff f8e8 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cac:	2300      	movs	r3, #0
 8005cae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4805      	ldr	r0, [pc, #20]	; (8005cd0 <MX_TIM5_Init+0x94>)
 8005cba:	f008 ffb5 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005cc4:	f7ff f8da 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005cc8:	bf00      	nop
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	24000ecc 	.word	0x24000ecc
 8005cd4:	40000c00 	.word	0x40000c00

08005cd8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005ce8:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005cea:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <MX_TIM6_Init+0x68>)
 8005cec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005cf0:	22c7      	movs	r2, #199	; 0xc7
 8005cf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005cfc:	f241 726f 	movw	r2, #5999	; 0x176f
 8005d00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d02:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d08:	480c      	ldr	r0, [pc, #48]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005d0a:	f007 fc64 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005d14:	f7ff f8b2 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d20:	1d3b      	adds	r3, r7, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4805      	ldr	r0, [pc, #20]	; (8005d3c <MX_TIM6_Init+0x64>)
 8005d26:	f008 ff7f 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005d30:	f7ff f8a4 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	24000f18 	.word	0x24000f18
 8005d40:	40001000 	.word	0x40001000

08005d44 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005d54:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <MX_TIM7_Init+0x68>)
 8005d58:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d5c:	22c7      	movs	r2, #199	; 0xc7
 8005d5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d68:	f240 42af 	movw	r2, #1199	; 0x4af
 8005d6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005d74:	480c      	ldr	r0, [pc, #48]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d76:	f007 fc2e 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005d80:	f7ff f87c 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d84:	2300      	movs	r3, #0
 8005d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4805      	ldr	r0, [pc, #20]	; (8005da8 <MX_TIM7_Init+0x64>)
 8005d92:	f008 ff49 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005d9c:	f7ff f86e 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	24000f64 	.word	0x24000f64
 8005dac:	40001400 	.word	0x40001400

08005db0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	; 0x30
 8005db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	2224      	movs	r2, #36	; 0x24
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f00c fd2a 	bl	8012818 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005dd0:	4a23      	ldr	r2, [pc, #140]	; (8005e60 <MX_TIM8_Init+0xb0>)
 8005dd2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dda:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 8005de0:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005de2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005de6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e02:	2301      	movs	r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005e0a:	230f      	movs	r3, #15
 8005e0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e12:	2301      	movs	r3, #1
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005e16:	2300      	movs	r3, #0
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005e1a:	230f      	movs	r3, #15
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	4619      	mov	r1, r3
 8005e24:	480d      	ldr	r0, [pc, #52]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005e26:	f007 fe43 	bl	800dab0 <HAL_TIM_Encoder_Init>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005e30:	f7ff f824 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e34:	2300      	movs	r3, #0
 8005e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005e40:	463b      	mov	r3, r7
 8005e42:	4619      	mov	r1, r3
 8005e44:	4805      	ldr	r0, [pc, #20]	; (8005e5c <MX_TIM8_Init+0xac>)
 8005e46:	f008 feef 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005e50:	f7ff f814 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005e54:	bf00      	nop
 8005e56:	3730      	adds	r7, #48	; 0x30
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	24000fb0 	.word	0x24000fb0
 8005e60:	40010400 	.word	0x40010400

08005e64 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	605a      	str	r2, [r3, #4]
 8005e72:	609a      	str	r2, [r3, #8]
 8005e74:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005e76:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <MX_TIM12_Init+0x70>)
 8005e7a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e7e:	22c7      	movs	r2, #199	; 0xc7
 8005e80:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e82:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e8a:	f240 2257 	movw	r2, #599	; 0x257
 8005e8e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005e9c:	480c      	ldr	r0, [pc, #48]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005e9e:	f007 fb9a 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005ea8:	f7fe ffe8 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4806      	ldr	r0, [pc, #24]	; (8005ed0 <MX_TIM12_Init+0x6c>)
 8005eb8:	f008 f962 	bl	800e180 <HAL_TIM_ConfigClockSource>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005ec2:	f7fe ffdb 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	24000ffc 	.word	0x24000ffc
 8005ed4:	40001800 	.word	0x40001800

08005ed8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005edc:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005ede:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <MX_TIM13_Init+0x44>)
 8005ee0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005ee4:	22c7      	movs	r2, #199	; 0xc7
 8005ee6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005ef0:	f240 2257 	movw	r2, #599	; 0x257
 8005ef4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005efc:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005f02:	4805      	ldr	r0, [pc, #20]	; (8005f18 <MX_TIM13_Init+0x40>)
 8005f04:	f007 fb67 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005f0e:	f7fe ffb5 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	24001048 	.word	0x24001048
 8005f1c:	40001c00 	.word	0x40001c00

08005f20 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f26:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <MX_TIM14_Init+0x44>)
 8005f28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f2c:	22c7      	movs	r2, #199	; 0xc7
 8005f2e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f38:	f640 125f 	movw	r2, #2399	; 0x95f
 8005f3c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005f4a:	4805      	ldr	r0, [pc, #20]	; (8005f60 <MX_TIM14_Init+0x40>)
 8005f4c:	f007 fb43 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005f56:	f7fe ff91 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	24001094 	.word	0x24001094
 8005f64:	40002000 	.word	0x40002000

08005f68 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b09a      	sub	sp, #104	; 0x68
 8005f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	609a      	str	r2, [r3, #8]
 8005f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	611a      	str	r2, [r3, #16]
 8005f98:	615a      	str	r2, [r3, #20]
 8005f9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	222c      	movs	r2, #44	; 0x2c
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f00c fc38 	bl	8012818 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005fa8:	4b3f      	ldr	r3, [pc, #252]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005faa:	4a40      	ldr	r2, [pc, #256]	; (80060ac <MX_TIM15_Init+0x144>)
 8005fac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005fae:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fb0:	22ef      	movs	r2, #239	; 0xef
 8005fb2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fb4:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005fba:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fbc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005fc0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fc2:	4b39      	ldr	r3, [pc, #228]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005fc8:	4b37      	ldr	r3, [pc, #220]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fce:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fd0:	2280      	movs	r2, #128	; 0x80
 8005fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005fd4:	4834      	ldr	r0, [pc, #208]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005fd6:	f007 fafe 	bl	800d5d6 <HAL_TIM_Base_Init>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005fe0:	f7fe ff4c 	bl	8004e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fe8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005fea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fee:	4619      	mov	r1, r3
 8005ff0:	482d      	ldr	r0, [pc, #180]	; (80060a8 <MX_TIM15_Init+0x140>)
 8005ff2:	f008 f8c5 	bl	800e180 <HAL_TIM_ConfigClockSource>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005ffc:	f7fe ff3e 	bl	8004e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006000:	4829      	ldr	r0, [pc, #164]	; (80060a8 <MX_TIM15_Init+0x140>)
 8006002:	f007 fbe6 	bl	800d7d2 <HAL_TIM_PWM_Init>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800600c:	f7fe ff36 	bl	8004e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006010:	2300      	movs	r3, #0
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006014:	2300      	movs	r3, #0
 8006016:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800601c:	4619      	mov	r1, r3
 800601e:	4822      	ldr	r0, [pc, #136]	; (80060a8 <MX_TIM15_Init+0x140>)
 8006020:	f008 fe02 	bl	800ec28 <HAL_TIMEx_MasterConfigSynchronization>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800602a:	f7fe ff27 	bl	8004e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800602e:	2360      	movs	r3, #96	; 0x60
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8006032:	f240 1339 	movw	r3, #313	; 0x139
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006038:	2300      	movs	r3, #0
 800603a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800603c:	2300      	movs	r3, #0
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006040:	2300      	movs	r3, #0
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006048:	2300      	movs	r3, #0
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800604c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006050:	2204      	movs	r2, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4814      	ldr	r0, [pc, #80]	; (80060a8 <MX_TIM15_Init+0x140>)
 8006056:	f007 ff7f 	bl	800df58 <HAL_TIM_PWM_ConfigChannel>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8006060:	f7fe ff0c 	bl	8004e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006064:	2300      	movs	r3, #0
 8006066:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006068:	2300      	movs	r3, #0
 800606a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800607c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006082:	2300      	movs	r3, #0
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4807      	ldr	r0, [pc, #28]	; (80060a8 <MX_TIM15_Init+0x140>)
 800608c:	f008 fe5a 	bl	800ed44 <HAL_TIMEx_ConfigBreakDeadTime>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8006096:	f7fe fef1 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800609a:	4803      	ldr	r0, [pc, #12]	; (80060a8 <MX_TIM15_Init+0x140>)
 800609c:	f000 fa30 	bl	8006500 <HAL_TIM_MspPostInit>

}
 80060a0:	bf00      	nop
 80060a2:	3768      	adds	r7, #104	; 0x68
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	240010e0 	.word	0x240010e0
 80060ac:	40014000 	.word	0x40014000

080060b0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80060b4:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <MX_TIM16_Init+0x48>)
 80060b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80060ba:	4b0e      	ldr	r3, [pc, #56]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060bc:	22ef      	movs	r2, #239	; 0xef
 80060be:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80060c6:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80060e0:	4804      	ldr	r0, [pc, #16]	; (80060f4 <MX_TIM16_Init+0x44>)
 80060e2:	f007 fa78 	bl	800d5d6 <HAL_TIM_Base_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80060ec:	f7fe fec6 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80060f0:	bf00      	nop
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	2400112c 	.word	0x2400112c
 80060f8:	40014400 	.word	0x40014400

080060fc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <MX_TIM17_Init+0x44>)
 8006102:	4a10      	ldr	r2, [pc, #64]	; (8006144 <MX_TIM17_Init+0x48>)
 8006104:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <MX_TIM17_Init+0x44>)
 8006108:	22ef      	movs	r2, #239	; 0xef
 800610a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <MX_TIM17_Init+0x44>)
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <MX_TIM17_Init+0x44>)
 8006114:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006118:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <MX_TIM17_Init+0x44>)
 800611c:	2200      	movs	r2, #0
 800611e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <MX_TIM17_Init+0x44>)
 8006122:	2200      	movs	r2, #0
 8006124:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <MX_TIM17_Init+0x44>)
 8006128:	2280      	movs	r2, #128	; 0x80
 800612a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800612c:	4804      	ldr	r0, [pc, #16]	; (8006140 <MX_TIM17_Init+0x44>)
 800612e:	f007 fa52 	bl	800d5d6 <HAL_TIM_Base_Init>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8006138:	f7fe fea0 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800613c:	bf00      	nop
 800613e:	bd80      	pop	{r7, pc}
 8006140:	24001178 	.word	0x24001178
 8006144:	40014800 	.word	0x40014800

08006148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b090      	sub	sp, #64	; 0x40
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4aa8      	ldr	r2, [pc, #672]	; (80063f8 <HAL_TIM_Base_MspInit+0x2b0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10f      	bne.n	800617a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800615a:	4ba8      	ldr	r3, [pc, #672]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800615c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006160:	4aa6      	ldr	r2, [pc, #664]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800616a:	4ba4      	ldr	r3, [pc, #656]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800616c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006178:	e13a      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006182:	d10f      	bne.n	80061a4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006184:	4b9d      	ldr	r3, [pc, #628]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800618a:	4a9c      	ldr	r2, [pc, #624]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006194:	4b99      	ldr	r3, [pc, #612]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061a2:	e125      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a95      	ldr	r2, [pc, #596]	; (8006400 <HAL_TIM_Base_MspInit+0x2b8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d10f      	bne.n	80061ce <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80061ae:	4b93      	ldr	r3, [pc, #588]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80061b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061b4:	4a91      	ldr	r2, [pc, #580]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80061b6:	f043 0302 	orr.w	r3, r3, #2
 80061ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061be:	4b8f      	ldr	r3, [pc, #572]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80061c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061cc:	e110      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a8c      	ldr	r2, [pc, #560]	; (8006404 <HAL_TIM_Base_MspInit+0x2bc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10f      	bne.n	80061f8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061d8:	4b88      	ldr	r3, [pc, #544]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80061da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061de:	4a87      	ldr	r2, [pc, #540]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061e8:	4b84      	ldr	r3, [pc, #528]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80061ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80061f6:	e0fb      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a82      	ldr	r2, [pc, #520]	; (8006408 <HAL_TIM_Base_MspInit+0x2c0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d117      	bne.n	8006232 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006202:	4b7e      	ldr	r3, [pc, #504]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006208:	4a7c      	ldr	r2, [pc, #496]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800620a:	f043 0308 	orr.w	r3, r3, #8
 800620e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006212:	4b7a      	ldr	r3, [pc, #488]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006220:	2200      	movs	r2, #0
 8006222:	2100      	movs	r1, #0
 8006224:	2032      	movs	r0, #50	; 0x32
 8006226:	f001 f838 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800622a:	2032      	movs	r0, #50	; 0x32
 800622c:	f001 f84f 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 8006230:	e0de      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a75      	ldr	r2, [pc, #468]	; (800640c <HAL_TIM_Base_MspInit+0x2c4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d117      	bne.n	800626c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800623c:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800623e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006242:	4a6e      	ldr	r2, [pc, #440]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006244:	f043 0310 	orr.w	r3, r3, #16
 8006248:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800624c:	4b6b      	ldr	r3, [pc, #428]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800624e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800625a:	2200      	movs	r2, #0
 800625c:	2100      	movs	r1, #0
 800625e:	2036      	movs	r0, #54	; 0x36
 8006260:	f001 f81b 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006264:	2036      	movs	r0, #54	; 0x36
 8006266:	f001 f832 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 800626a:	e0c1      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a67      	ldr	r2, [pc, #412]	; (8006410 <HAL_TIM_Base_MspInit+0x2c8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d117      	bne.n	80062a6 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006276:	4b61      	ldr	r3, [pc, #388]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800627c:	4a5f      	ldr	r2, [pc, #380]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800627e:	f043 0320 	orr.w	r3, r3, #32
 8006282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006286:	4b5d      	ldr	r3, [pc, #372]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006294:	2200      	movs	r2, #0
 8006296:	2100      	movs	r1, #0
 8006298:	2037      	movs	r0, #55	; 0x37
 800629a:	f000 fffe 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800629e:	2037      	movs	r0, #55	; 0x37
 80062a0:	f001 f815 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 80062a4:	e0a4      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5a      	ldr	r2, [pc, #360]	; (8006414 <HAL_TIM_Base_MspInit+0x2cc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d117      	bne.n	80062e0 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80062b0:	4b52      	ldr	r3, [pc, #328]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80062b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062b6:	4a51      	ldr	r2, [pc, #324]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80062b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062c0:	4b4e      	ldr	r3, [pc, #312]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80062c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	623b      	str	r3, [r7, #32]
 80062cc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80062ce:	2200      	movs	r2, #0
 80062d0:	2100      	movs	r1, #0
 80062d2:	202b      	movs	r0, #43	; 0x2b
 80062d4:	f000 ffe1 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80062d8:	202b      	movs	r0, #43	; 0x2b
 80062da:	f000 fff8 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 80062de:	e087      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a4c      	ldr	r2, [pc, #304]	; (8006418 <HAL_TIM_Base_MspInit+0x2d0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d117      	bne.n	800631a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80062ea:	4b44      	ldr	r3, [pc, #272]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80062ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062f0:	4a42      	ldr	r2, [pc, #264]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80062f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062fa:	4b40      	ldr	r3, [pc, #256]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80062fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	202c      	movs	r0, #44	; 0x2c
 800630e:	f000 ffc4 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006312:	202c      	movs	r0, #44	; 0x2c
 8006314:	f000 ffdb 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 8006318:	e06a      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3f      	ldr	r2, [pc, #252]	; (800641c <HAL_TIM_Base_MspInit+0x2d4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d117      	bne.n	8006354 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006324:	4b35      	ldr	r3, [pc, #212]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800632a:	4a34      	ldr	r2, [pc, #208]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006330:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006334:	4b31      	ldr	r3, [pc, #196]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800633a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006342:	2200      	movs	r2, #0
 8006344:	2100      	movs	r1, #0
 8006346:	202d      	movs	r0, #45	; 0x2d
 8006348:	f000 ffa7 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800634c:	202d      	movs	r0, #45	; 0x2d
 800634e:	f000 ffbe 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 8006352:	e04d      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a31      	ldr	r2, [pc, #196]	; (8006420 <HAL_TIM_Base_MspInit+0x2d8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10f      	bne.n	800637e <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800635e:	4b27      	ldr	r3, [pc, #156]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006364:	4a25      	ldr	r2, [pc, #148]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800636a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800636e:	4b23      	ldr	r3, [pc, #140]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	e038      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a28      	ldr	r2, [pc, #160]	; (8006424 <HAL_TIM_Base_MspInit+0x2dc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d117      	bne.n	80063b8 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006388:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800638a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800638e:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006394:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006398:	4b18      	ldr	r3, [pc, #96]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 800639a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80063a6:	2200      	movs	r2, #0
 80063a8:	2100      	movs	r1, #0
 80063aa:	2075      	movs	r0, #117	; 0x75
 80063ac:	f000 ff75 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80063b0:	2075      	movs	r0, #117	; 0x75
 80063b2:	f000 ff8c 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 80063b6:	e01b      	b.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <HAL_TIM_Base_MspInit+0x2e0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d116      	bne.n	80063f0 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80063c2:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c8:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80063ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <HAL_TIM_Base_MspInit+0x2b4>)
 80063d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80063e0:	2200      	movs	r2, #0
 80063e2:	2100      	movs	r1, #0
 80063e4:	2076      	movs	r0, #118	; 0x76
 80063e6:	f000 ff58 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80063ea:	2076      	movs	r0, #118	; 0x76
 80063ec:	f000 ff6f 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 80063f0:	bf00      	nop
 80063f2:	3740      	adds	r7, #64	; 0x40
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40010000 	.word	0x40010000
 80063fc:	58024400 	.word	0x58024400
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40001000 	.word	0x40001000
 8006410:	40001400 	.word	0x40001400
 8006414:	40001800 	.word	0x40001800
 8006418:	40001c00 	.word	0x40001c00
 800641c:	40002000 	.word	0x40002000
 8006420:	40014000 	.word	0x40014000
 8006424:	40014400 	.word	0x40014400
 8006428:	40014800 	.word	0x40014800

0800642c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	; 0x28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	60da      	str	r2, [r3, #12]
 8006442:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2a      	ldr	r2, [pc, #168]	; (80064f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d14d      	bne.n	80064ea <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006454:	4a28      	ldr	r2, [pc, #160]	; (80064f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800645e:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800646c:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800646e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006472:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800647c:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800647e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800648a:	23c0      	movs	r3, #192	; 0xc0
 800648c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648e:	2302      	movs	r3, #2
 8006490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006496:	2300      	movs	r3, #0
 8006498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800649a:	2303      	movs	r3, #3
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	4619      	mov	r1, r3
 80064a4:	4815      	ldr	r0, [pc, #84]	; (80064fc <HAL_TIM_Encoder_MspInit+0xd0>)
 80064a6:	f003 ff73 	bl	800a390 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80064aa:	2200      	movs	r2, #0
 80064ac:	2100      	movs	r1, #0
 80064ae:	202b      	movs	r0, #43	; 0x2b
 80064b0:	f000 fef3 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80064b4:	202b      	movs	r0, #43	; 0x2b
 80064b6:	f000 ff0a 	bl	80072ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	202c      	movs	r0, #44	; 0x2c
 80064c0:	f000 feeb 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80064c4:	202c      	movs	r0, #44	; 0x2c
 80064c6:	f000 ff02 	bl	80072ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80064ca:	2200      	movs	r2, #0
 80064cc:	2100      	movs	r1, #0
 80064ce:	202d      	movs	r0, #45	; 0x2d
 80064d0:	f000 fee3 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80064d4:	202d      	movs	r0, #45	; 0x2d
 80064d6:	f000 fefa 	bl	80072ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80064da:	2200      	movs	r2, #0
 80064dc:	2100      	movs	r1, #0
 80064de:	202e      	movs	r0, #46	; 0x2e
 80064e0:	f000 fedb 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80064e4:	202e      	movs	r0, #46	; 0x2e
 80064e6:	f000 fef2 	bl	80072ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80064ea:	bf00      	nop
 80064ec:	3728      	adds	r7, #40	; 0x28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40010400 	.word	0x40010400
 80064f8:	58024400 	.word	0x58024400
 80064fc:	58020800 	.word	0x58020800

08006500 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006508:	f107 031c 	add.w	r3, r7, #28
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a5e      	ldr	r2, [pc, #376]	; (8006698 <HAL_TIM_MspPostInit+0x198>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d120      	bne.n	8006564 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006522:	4b5e      	ldr	r3, [pc, #376]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006528:	4a5c      	ldr	r2, [pc, #368]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 800652a:	f043 0310 	orr.w	r3, r3, #16
 800652e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006532:	4b5a      	ldr	r3, [pc, #360]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8006540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006546:	2302      	movs	r3, #2
 8006548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800654e:	2300      	movs	r3, #0
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006552:	2301      	movs	r3, #1
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8006556:	f107 031c 	add.w	r3, r7, #28
 800655a:	4619      	mov	r1, r3
 800655c:	4850      	ldr	r0, [pc, #320]	; (80066a0 <HAL_TIM_MspPostInit+0x1a0>)
 800655e:	f003 ff17 	bl	800a390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006562:	e094      	b.n	800668e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656c:	d120      	bne.n	80065b0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800656e:	4b4b      	ldr	r3, [pc, #300]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006574:	4a49      	ldr	r2, [pc, #292]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006576:	f043 0302 	orr.w	r3, r3, #2
 800657a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800657e:	4b47      	ldr	r3, [pc, #284]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800658c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006592:	2302      	movs	r3, #2
 8006594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659a:	2300      	movs	r3, #0
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800659e:	2301      	movs	r3, #1
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	4619      	mov	r1, r3
 80065a8:	483e      	ldr	r0, [pc, #248]	; (80066a4 <HAL_TIM_MspPostInit+0x1a4>)
 80065aa:	f003 fef1 	bl	800a390 <HAL_GPIO_Init>
}
 80065ae:	e06e      	b.n	800668e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3c      	ldr	r2, [pc, #240]	; (80066a8 <HAL_TIM_MspPostInit+0x1a8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d11f      	bne.n	80065fa <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ba:	4b38      	ldr	r3, [pc, #224]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 80065bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065c0:	4a36      	ldr	r2, [pc, #216]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065ca:	4b34      	ldr	r3, [pc, #208]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 80065cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80065d8:	2340      	movs	r3, #64	; 0x40
 80065da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065dc:	2302      	movs	r3, #2
 80065de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065e8:	2302      	movs	r3, #2
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80065ec:	f107 031c 	add.w	r3, r7, #28
 80065f0:	4619      	mov	r1, r3
 80065f2:	482e      	ldr	r0, [pc, #184]	; (80066ac <HAL_TIM_MspPostInit+0x1ac>)
 80065f4:	f003 fecc 	bl	800a390 <HAL_GPIO_Init>
}
 80065f8:	e049      	b.n	800668e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <HAL_TIM_MspPostInit+0x1b0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d120      	bne.n	8006646 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800660a:	4a24      	ldr	r2, [pc, #144]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 800660c:	f043 0302 	orr.w	r3, r3, #2
 8006610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8006622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006628:	2302      	movs	r3, #2
 800662a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662c:	2300      	movs	r3, #0
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006630:	2300      	movs	r3, #0
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006634:	2302      	movs	r3, #2
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8006638:	f107 031c 	add.w	r3, r7, #28
 800663c:	4619      	mov	r1, r3
 800663e:	4819      	ldr	r0, [pc, #100]	; (80066a4 <HAL_TIM_MspPostInit+0x1a4>)
 8006640:	f003 fea6 	bl	800a390 <HAL_GPIO_Init>
}
 8006644:	e023      	b.n	800668e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <HAL_TIM_MspPostInit+0x1b4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d11e      	bne.n	800668e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006650:	4b12      	ldr	r3, [pc, #72]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006656:	4a11      	ldr	r2, [pc, #68]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006658:	f043 0310 	orr.w	r3, r3, #16
 800665c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006660:	4b0e      	ldr	r3, [pc, #56]	; (800669c <HAL_TIM_MspPostInit+0x19c>)
 8006662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800666e:	2340      	movs	r3, #64	; 0x40
 8006670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006672:	2302      	movs	r3, #2
 8006674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800667a:	2300      	movs	r3, #0
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800667e:	2304      	movs	r3, #4
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006682:	f107 031c 	add.w	r3, r7, #28
 8006686:	4619      	mov	r1, r3
 8006688:	4805      	ldr	r0, [pc, #20]	; (80066a0 <HAL_TIM_MspPostInit+0x1a0>)
 800668a:	f003 fe81 	bl	800a390 <HAL_GPIO_Init>
}
 800668e:	bf00      	nop
 8006690:	3730      	adds	r7, #48	; 0x30
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	58024400 	.word	0x58024400
 80066a0:	58021000 	.word	0x58021000
 80066a4:	58020400 	.word	0x58020400
 80066a8:	40000400 	.word	0x40000400
 80066ac:	58020000 	.word	0x58020000
 80066b0:	40000800 	.word	0x40000800
 80066b4:	40014000 	.word	0x40014000

080066b8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80066bc:	4b25      	ldr	r3, [pc, #148]	; (8006754 <MX_UART4_Init+0x9c>)
 80066be:	4a26      	ldr	r2, [pc, #152]	; (8006758 <MX_UART4_Init+0xa0>)
 80066c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <MX_UART4_Init+0x9c>)
 80066c4:	4a25      	ldr	r2, [pc, #148]	; (800675c <MX_UART4_Init+0xa4>)
 80066c6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80066c8:	4b22      	ldr	r3, [pc, #136]	; (8006754 <MX_UART4_Init+0x9c>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <MX_UART4_Init+0x9c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80066d4:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <MX_UART4_Init+0x9c>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80066da:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <MX_UART4_Init+0x9c>)
 80066dc:	220c      	movs	r2, #12
 80066de:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066e0:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <MX_UART4_Init+0x9c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80066e6:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <MX_UART4_Init+0x9c>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <MX_UART4_Init+0x9c>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80066f2:	4b18      	ldr	r3, [pc, #96]	; (8006754 <MX_UART4_Init+0x9c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80066f8:	4b16      	ldr	r3, [pc, #88]	; (8006754 <MX_UART4_Init+0x9c>)
 80066fa:	2208      	movs	r2, #8
 80066fc:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80066fe:	4b15      	ldr	r3, [pc, #84]	; (8006754 <MX_UART4_Init+0x9c>)
 8006700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006706:	4813      	ldr	r0, [pc, #76]	; (8006754 <MX_UART4_Init+0x9c>)
 8006708:	f008 fbb8 	bl	800ee7c <HAL_UART_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8006712:	f7fe fbb3 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006716:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800671a:	480e      	ldr	r0, [pc, #56]	; (8006754 <MX_UART4_Init+0x9c>)
 800671c:	f00a fc51 	bl	8010fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8006726:	f7fe fba9 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800672a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800672e:	4809      	ldr	r0, [pc, #36]	; (8006754 <MX_UART4_Init+0x9c>)
 8006730:	f00a fc85 	bl	801103e <HAL_UARTEx_SetRxFifoThreshold>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <MX_UART4_Init+0x86>
  {
    Error_Handler();
 800673a:	f7fe fb9f 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <MX_UART4_Init+0x9c>)
 8006740:	f00a fbcb 	bl	8010eda <HAL_UARTEx_EnableFifoMode>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <MX_UART4_Init+0x96>
  {
    Error_Handler();
 800674a:	f7fe fb97 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	240011c4 	.word	0x240011c4
 8006758:	40004c00 	.word	0x40004c00
 800675c:	001e8480 	.word	0x001e8480

08006760 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006764:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <MX_UART7_Init+0x94>)
 8006766:	4a24      	ldr	r2, [pc, #144]	; (80067f8 <MX_UART7_Init+0x98>)
 8006768:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800676a:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <MX_UART7_Init+0x94>)
 800676c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006770:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006772:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <MX_UART7_Init+0x94>)
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006778:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <MX_UART7_Init+0x94>)
 800677a:	2200      	movs	r2, #0
 800677c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800677e:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <MX_UART7_Init+0x94>)
 8006780:	2200      	movs	r2, #0
 8006782:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <MX_UART7_Init+0x94>)
 8006786:	220c      	movs	r2, #12
 8006788:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800678a:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <MX_UART7_Init+0x94>)
 800678c:	2200      	movs	r2, #0
 800678e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006790:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <MX_UART7_Init+0x94>)
 8006792:	2200      	movs	r2, #0
 8006794:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006796:	4b17      	ldr	r3, [pc, #92]	; (80067f4 <MX_UART7_Init+0x94>)
 8006798:	2200      	movs	r2, #0
 800679a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800679c:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <MX_UART7_Init+0x94>)
 800679e:	2200      	movs	r2, #0
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067a2:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <MX_UART7_Init+0x94>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80067a8:	4812      	ldr	r0, [pc, #72]	; (80067f4 <MX_UART7_Init+0x94>)
 80067aa:	f008 fb67 	bl	800ee7c <HAL_UART_Init>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80067b4:	f7fe fb62 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067b8:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80067bc:	480d      	ldr	r0, [pc, #52]	; (80067f4 <MX_UART7_Init+0x94>)
 80067be:	f00a fc00 	bl	8010fc2 <HAL_UARTEx_SetTxFifoThreshold>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80067c8:	f7fe fb58 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067cc:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80067d0:	4808      	ldr	r0, [pc, #32]	; (80067f4 <MX_UART7_Init+0x94>)
 80067d2:	f00a fc34 	bl	801103e <HAL_UARTEx_SetRxFifoThreshold>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80067dc:	f7fe fb4e 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80067e0:	4804      	ldr	r0, [pc, #16]	; (80067f4 <MX_UART7_Init+0x94>)
 80067e2:	f00a fb7a 	bl	8010eda <HAL_UARTEx_EnableFifoMode>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80067ec:	f7fe fb46 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80067f0:	bf00      	nop
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	24001254 	.word	0x24001254
 80067f8:	40007800 	.word	0x40007800

080067fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006800:	4b22      	ldr	r3, [pc, #136]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006802:	4a23      	ldr	r2, [pc, #140]	; (8006890 <MX_USART2_UART_Init+0x94>)
 8006804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006806:	4b21      	ldr	r3, [pc, #132]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800680c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800680e:	4b1f      	ldr	r3, [pc, #124]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006816:	2200      	movs	r2, #0
 8006818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800681a:	4b1c      	ldr	r3, [pc, #112]	; (800688c <MX_USART2_UART_Init+0x90>)
 800681c:	2200      	movs	r2, #0
 800681e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006820:	4b1a      	ldr	r3, [pc, #104]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006822:	220c      	movs	r2, #12
 8006824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006826:	4b19      	ldr	r3, [pc, #100]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006828:	2200      	movs	r2, #0
 800682a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800682c:	4b17      	ldr	r3, [pc, #92]	; (800688c <MX_USART2_UART_Init+0x90>)
 800682e:	2200      	movs	r2, #0
 8006830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006832:	4b16      	ldr	r3, [pc, #88]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006834:	2200      	movs	r2, #0
 8006836:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <MX_USART2_UART_Init+0x90>)
 800683a:	2200      	movs	r2, #0
 800683c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800683e:	4b13      	ldr	r3, [pc, #76]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006840:	2200      	movs	r2, #0
 8006842:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006844:	4811      	ldr	r0, [pc, #68]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006846:	f008 fb19 	bl	800ee7c <HAL_UART_Init>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006850:	f7fe fb14 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006854:	2100      	movs	r1, #0
 8006856:	480d      	ldr	r0, [pc, #52]	; (800688c <MX_USART2_UART_Init+0x90>)
 8006858:	f00a fbb3 	bl	8010fc2 <HAL_UARTEx_SetTxFifoThreshold>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006862:	f7fe fb0b 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006866:	2100      	movs	r1, #0
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <MX_USART2_UART_Init+0x90>)
 800686a:	f00a fbe8 	bl	801103e <HAL_UARTEx_SetRxFifoThreshold>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006874:	f7fe fb02 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006878:	4804      	ldr	r0, [pc, #16]	; (800688c <MX_USART2_UART_Init+0x90>)
 800687a:	f00a fb69 	bl	8010f50 <HAL_UARTEx_DisableFifoMode>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006884:	f7fe fafa 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006888:	bf00      	nop
 800688a:	bd80      	pop	{r7, pc}
 800688c:	240012e4 	.word	0x240012e4
 8006890:	40004400 	.word	0x40004400

08006894 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006898:	4b22      	ldr	r3, [pc, #136]	; (8006924 <MX_USART3_UART_Init+0x90>)
 800689a:	4a23      	ldr	r2, [pc, #140]	; (8006928 <MX_USART3_UART_Init+0x94>)
 800689c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800689e:	4b21      	ldr	r3, [pc, #132]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068a6:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068ac:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068ba:	220c      	movs	r2, #12
 80068bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068be:	4b19      	ldr	r3, [pc, #100]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80068c4:	4b17      	ldr	r3, [pc, #92]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068ca:	4b16      	ldr	r3, [pc, #88]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068d0:	4b14      	ldr	r3, [pc, #80]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068d8:	2200      	movs	r2, #0
 80068da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80068dc:	4811      	ldr	r0, [pc, #68]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068de:	f008 facd 	bl	800ee7c <HAL_UART_Init>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80068e8:	f7fe fac8 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068ec:	2100      	movs	r1, #0
 80068ee:	480d      	ldr	r0, [pc, #52]	; (8006924 <MX_USART3_UART_Init+0x90>)
 80068f0:	f00a fb67 	bl	8010fc2 <HAL_UARTEx_SetTxFifoThreshold>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80068fa:	f7fe fabf 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068fe:	2100      	movs	r1, #0
 8006900:	4808      	ldr	r0, [pc, #32]	; (8006924 <MX_USART3_UART_Init+0x90>)
 8006902:	f00a fb9c 	bl	801103e <HAL_UARTEx_SetRxFifoThreshold>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800690c:	f7fe fab6 	bl	8004e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006910:	4804      	ldr	r0, [pc, #16]	; (8006924 <MX_USART3_UART_Init+0x90>)
 8006912:	f00a fb1d 	bl	8010f50 <HAL_UARTEx_DisableFifoMode>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800691c:	f7fe faae 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006920:	bf00      	nop
 8006922:	bd80      	pop	{r7, pc}
 8006924:	24001374 	.word	0x24001374
 8006928:	40004800 	.word	0x40004800

0800692c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b0be      	sub	sp, #248	; 0xf8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006934:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006948:	22bc      	movs	r2, #188	; 0xbc
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f00b ff63 	bl	8012818 <memset>
  if(uartHandle->Instance==UART4)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4aa1      	ldr	r2, [pc, #644]	; (8006bdc <HAL_UART_MspInit+0x2b0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	f040 80b7 	bne.w	8006acc <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800695e:	2302      	movs	r3, #2
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006962:	2300      	movs	r3, #0
 8006964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800696c:	4618      	mov	r0, r3
 800696e:	f004 fee7 	bl	800b740 <HAL_RCCEx_PeriphCLKConfig>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006978:	f7fe fa80 	bl	8004e7c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800697c:	4b98      	ldr	r3, [pc, #608]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 800697e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006982:	4a97      	ldr	r2, [pc, #604]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006988:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800698c:	4b94      	ldr	r3, [pc, #592]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 800698e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800699a:	4b91      	ldr	r3, [pc, #580]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 800699c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069a0:	4a8f      	ldr	r2, [pc, #572]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 80069a2:	f043 0308 	orr.w	r3, r3, #8
 80069a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069aa:	4b8d      	ldr	r3, [pc, #564]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 80069ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80069b8:	2303      	movs	r3, #3
 80069ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069be:	2302      	movs	r3, #2
 80069c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80069d0:	2308      	movs	r3, #8
 80069d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069da:	4619      	mov	r1, r3
 80069dc:	4881      	ldr	r0, [pc, #516]	; (8006be4 <HAL_UART_MspInit+0x2b8>)
 80069de:	f003 fcd7 	bl	800a390 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80069e2:	4b81      	ldr	r3, [pc, #516]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 80069e4:	4a81      	ldr	r2, [pc, #516]	; (8006bec <HAL_UART_MspInit+0x2c0>)
 80069e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80069e8:	4b7f      	ldr	r3, [pc, #508]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 80069ea:	223f      	movs	r2, #63	; 0x3f
 80069ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069ee:	4b7e      	ldr	r3, [pc, #504]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069f4:	4b7c      	ldr	r3, [pc, #496]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069fa:	4b7b      	ldr	r3, [pc, #492]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 80069fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a00:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a02:	4b79      	ldr	r3, [pc, #484]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a08:	4b77      	ldr	r3, [pc, #476]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006a0e:	4b76      	ldr	r3, [pc, #472]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a14:	4b74      	ldr	r3, [pc, #464]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a1a:	4b73      	ldr	r3, [pc, #460]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a20:	4b71      	ldr	r3, [pc, #452]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a22:	2203      	movs	r2, #3
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a26:	4b70      	ldr	r3, [pc, #448]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a2c:	4b6e      	ldr	r3, [pc, #440]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006a32:	486d      	ldr	r0, [pc, #436]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a34:	f000 fe70 	bl	8007718 <HAL_DMA_Init>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8006a3e:	f7fe fa1d 	bl	8004e7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a68      	ldr	r2, [pc, #416]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a46:	67da      	str	r2, [r3, #124]	; 0x7c
 8006a48:	4a67      	ldr	r2, [pc, #412]	; (8006be8 <HAL_UART_MspInit+0x2bc>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006a4e:	4b68      	ldr	r3, [pc, #416]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a50:	4a68      	ldr	r2, [pc, #416]	; (8006bf4 <HAL_UART_MspInit+0x2c8>)
 8006a52:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006a54:	4b66      	ldr	r3, [pc, #408]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a56:	2240      	movs	r2, #64	; 0x40
 8006a58:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a5a:	4b65      	ldr	r3, [pc, #404]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a5c:	2240      	movs	r2, #64	; 0x40
 8006a5e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a60:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a66:	4b62      	ldr	r3, [pc, #392]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a6c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a6e:	4b60      	ldr	r3, [pc, #384]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a74:	4b5e      	ldr	r3, [pc, #376]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006a7a:	4b5d      	ldr	r3, [pc, #372]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006a80:	4b5b      	ldr	r3, [pc, #364]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a86:	4b5a      	ldr	r3, [pc, #360]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a88:	2204      	movs	r2, #4
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a8c:	4b58      	ldr	r3, [pc, #352]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a8e:	2203      	movs	r2, #3
 8006a90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a92:	4b57      	ldr	r3, [pc, #348]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a98:	4b55      	ldr	r3, [pc, #340]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006a9e:	4854      	ldr	r0, [pc, #336]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006aa0:	f000 fe3a 	bl	8007718 <HAL_DMA_Init>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8006aaa:	f7fe f9e7 	bl	8004e7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a4f      	ldr	r2, [pc, #316]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006ab2:	679a      	str	r2, [r3, #120]	; 0x78
 8006ab4:	4a4e      	ldr	r2, [pc, #312]	; (8006bf0 <HAL_UART_MspInit+0x2c4>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	2034      	movs	r0, #52	; 0x34
 8006ac0:	f000 fbeb 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006ac4:	2034      	movs	r0, #52	; 0x34
 8006ac6:	f000 fc02 	bl	80072ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006aca:	e20d      	b.n	8006ee8 <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a49      	ldr	r2, [pc, #292]	; (8006bf8 <HAL_UART_MspInit+0x2cc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f040 8098 	bne.w	8006c08 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f004 fe2a 	bl	800b740 <HAL_RCCEx_PeriphCLKConfig>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006af2:	f7fe f9c3 	bl	8004e7c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006af6:	4b3a      	ldr	r3, [pc, #232]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006afc:	4a38      	ldr	r2, [pc, #224]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b06:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b14:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b1a:	4a31      	ldr	r2, [pc, #196]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006b1c:	f043 0310 	orr.w	r3, r3, #16
 8006b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b24:	4b2e      	ldr	r3, [pc, #184]	; (8006be0 <HAL_UART_MspInit+0x2b4>)
 8006b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006b32:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006b4c:	2307      	movs	r3, #7
 8006b4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4828      	ldr	r0, [pc, #160]	; (8006bfc <HAL_UART_MspInit+0x2d0>)
 8006b5a:	f003 fc19 	bl	800a390 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006b5e:	4b28      	ldr	r3, [pc, #160]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b60:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <HAL_UART_MspInit+0x2d8>)
 8006b62:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006b64:	4b26      	ldr	r3, [pc, #152]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b66:	2250      	movs	r2, #80	; 0x50
 8006b68:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b6a:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b6c:	2240      	movs	r2, #64	; 0x40
 8006b6e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b70:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b76:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b7c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b7e:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b84:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b90:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b98:	2204      	movs	r2, #4
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b9c:	4b18      	ldr	r3, [pc, #96]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006ba8:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006bae:	4814      	ldr	r0, [pc, #80]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006bb0:	f000 fdb2 	bl	8007718 <HAL_DMA_Init>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_UART_MspInit+0x292>
      Error_Handler();
 8006bba:	f7fe f95f 	bl	8004e7c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a0f      	ldr	r2, [pc, #60]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006bc2:	679a      	str	r2, [r3, #120]	; 0x78
 8006bc4:	4a0e      	ldr	r2, [pc, #56]	; (8006c00 <HAL_UART_MspInit+0x2d4>)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2052      	movs	r0, #82	; 0x52
 8006bd0:	f000 fb63 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006bd4:	2052      	movs	r0, #82	; 0x52
 8006bd6:	f000 fb7a 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 8006bda:	e185      	b.n	8006ee8 <HAL_UART_MspInit+0x5bc>
 8006bdc:	40004c00 	.word	0x40004c00
 8006be0:	58024400 	.word	0x58024400
 8006be4:	58020c00 	.word	0x58020c00
 8006be8:	24001404 	.word	0x24001404
 8006bec:	40020058 	.word	0x40020058
 8006bf0:	2400147c 	.word	0x2400147c
 8006bf4:	40020070 	.word	0x40020070
 8006bf8:	40007800 	.word	0x40007800
 8006bfc:	58021000 	.word	0x58021000
 8006c00:	240014f4 	.word	0x240014f4
 8006c04:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a54      	ldr	r2, [pc, #336]	; (8006d60 <HAL_UART_MspInit+0x434>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f040 80b4 	bne.w	8006d7c <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006c14:	2302      	movs	r3, #2
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c22:	4618      	mov	r0, r3
 8006c24:	f004 fd8c 	bl	800b740 <HAL_RCCEx_PeriphCLKConfig>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006c2e:	f7fe f925 	bl	8004e7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c32:	4b4c      	ldr	r3, [pc, #304]	; (8006d64 <HAL_UART_MspInit+0x438>)
 8006c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c38:	4a4a      	ldr	r2, [pc, #296]	; (8006d64 <HAL_UART_MspInit+0x438>)
 8006c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c42:	4b48      	ldr	r3, [pc, #288]	; (8006d64 <HAL_UART_MspInit+0x438>)
 8006c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c50:	4b44      	ldr	r3, [pc, #272]	; (8006d64 <HAL_UART_MspInit+0x438>)
 8006c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c56:	4a43      	ldr	r2, [pc, #268]	; (8006d64 <HAL_UART_MspInit+0x438>)
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c60:	4b40      	ldr	r3, [pc, #256]	; (8006d64 <HAL_UART_MspInit+0x438>)
 8006c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006c6e:	2360      	movs	r3, #96	; 0x60
 8006c70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c74:	2302      	movs	r3, #2
 8006c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006c86:	2307      	movs	r3, #7
 8006c88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4835      	ldr	r0, [pc, #212]	; (8006d68 <HAL_UART_MspInit+0x43c>)
 8006c94:	f003 fb7c 	bl	800a390 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006c98:	4b34      	ldr	r3, [pc, #208]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006c9a:	4a35      	ldr	r2, [pc, #212]	; (8006d70 <HAL_UART_MspInit+0x444>)
 8006c9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006c9e:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006ca0:	222b      	movs	r2, #43	; 0x2b
 8006ca2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ca4:	4b31      	ldr	r3, [pc, #196]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006caa:	4b30      	ldr	r3, [pc, #192]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cb0:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cb8:	4b2c      	ldr	r3, [pc, #176]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cbe:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006cc4:	4b29      	ldr	r3, [pc, #164]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006cca:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cd0:	4b26      	ldr	r3, [pc, #152]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006cd6:	4825      	ldr	r0, [pc, #148]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cd8:	f000 fd1e 	bl	8007718 <HAL_DMA_Init>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006ce2:	f7fe f8cb 	bl	8004e7c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a20      	ldr	r2, [pc, #128]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cea:	67da      	str	r2, [r3, #124]	; 0x7c
 8006cec:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <HAL_UART_MspInit+0x440>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006cf4:	4a20      	ldr	r2, [pc, #128]	; (8006d78 <HAL_UART_MspInit+0x44c>)
 8006cf6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006cf8:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006cfa:	222c      	movs	r2, #44	; 0x2c
 8006cfc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d00:	2240      	movs	r2, #64	; 0x40
 8006d02:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d04:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d10:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d12:	4b18      	ldr	r3, [pc, #96]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006d30:	4810      	ldr	r0, [pc, #64]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d32:	f000 fcf1 	bl	8007718 <HAL_DMA_Init>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006d3c:	f7fe f89e 	bl	8004e7c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a0c      	ldr	r2, [pc, #48]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d44:	679a      	str	r2, [r3, #120]	; 0x78
 8006d46:	4a0b      	ldr	r2, [pc, #44]	; (8006d74 <HAL_UART_MspInit+0x448>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	2026      	movs	r0, #38	; 0x26
 8006d52:	f000 faa2 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d56:	2026      	movs	r0, #38	; 0x26
 8006d58:	f000 fab9 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 8006d5c:	e0c4      	b.n	8006ee8 <HAL_UART_MspInit+0x5bc>
 8006d5e:	bf00      	nop
 8006d60:	40004400 	.word	0x40004400
 8006d64:	58024400 	.word	0x58024400
 8006d68:	58020c00 	.word	0x58020c00
 8006d6c:	2400156c 	.word	0x2400156c
 8006d70:	40020088 	.word	0x40020088
 8006d74:	240015e4 	.word	0x240015e4
 8006d78:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5b      	ldr	r2, [pc, #364]	; (8006ef0 <HAL_UART_MspInit+0x5c4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f040 80b0 	bne.w	8006ee8 <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d96:	4618      	mov	r0, r3
 8006d98:	f004 fcd2 	bl	800b740 <HAL_RCCEx_PeriphCLKConfig>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006da2:	f7fe f86b 	bl	8004e7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006da6:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <HAL_UART_MspInit+0x5c8>)
 8006da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dac:	4a51      	ldr	r2, [pc, #324]	; (8006ef4 <HAL_UART_MspInit+0x5c8>)
 8006dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006db6:	4b4f      	ldr	r3, [pc, #316]	; (8006ef4 <HAL_UART_MspInit+0x5c8>)
 8006db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dc4:	4b4b      	ldr	r3, [pc, #300]	; (8006ef4 <HAL_UART_MspInit+0x5c8>)
 8006dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dca:	4a4a      	ldr	r2, [pc, #296]	; (8006ef4 <HAL_UART_MspInit+0x5c8>)
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dd4:	4b47      	ldr	r3, [pc, #284]	; (8006ef4 <HAL_UART_MspInit+0x5c8>)
 8006dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dea:	2302      	movs	r3, #2
 8006dec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006dfc:	2307      	movs	r3, #7
 8006dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006e06:	4619      	mov	r1, r3
 8006e08:	483b      	ldr	r0, [pc, #236]	; (8006ef8 <HAL_UART_MspInit+0x5cc>)
 8006e0a:	f003 fac1 	bl	800a390 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e10:	4a3b      	ldr	r2, [pc, #236]	; (8006f00 <HAL_UART_MspInit+0x5d4>)
 8006e12:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e16:	222d      	movs	r2, #45	; 0x2d
 8006e18:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e1a:	4b38      	ldr	r3, [pc, #224]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e26:	4b35      	ldr	r3, [pc, #212]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e2e:	4b33      	ldr	r3, [pc, #204]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e34:	4b31      	ldr	r3, [pc, #196]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006e3a:	4b30      	ldr	r3, [pc, #192]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e40:	4b2e      	ldr	r3, [pc, #184]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e46:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e48:	4b2c      	ldr	r3, [pc, #176]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006e4e:	482b      	ldr	r0, [pc, #172]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e50:	f000 fc62 	bl	8007718 <HAL_DMA_Init>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_UART_MspInit+0x532>
      Error_Handler();
 8006e5a:	f7fe f80f 	bl	8004e7c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a26      	ldr	r2, [pc, #152]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e62:	67da      	str	r2, [r3, #124]	; 0x7c
 8006e64:	4a25      	ldr	r2, [pc, #148]	; (8006efc <HAL_UART_MspInit+0x5d0>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <HAL_UART_MspInit+0x5dc>)
 8006e6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006e70:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e72:	222e      	movs	r2, #46	; 0x2e
 8006e74:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e76:	4b23      	ldr	r3, [pc, #140]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e78:	2240      	movs	r2, #64	; 0x40
 8006e7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e7c:	4b21      	ldr	r3, [pc, #132]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e82:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e88:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e8a:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e90:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006e96:	4b1b      	ldr	r3, [pc, #108]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e9c:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006e9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ea2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006eaa:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006eac:	2203      	movs	r2, #3
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006ebc:	4811      	ldr	r0, [pc, #68]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006ebe:	f000 fc2b 	bl	8007718 <HAL_DMA_Init>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 8006ec8:	f7fd ffd8 	bl	8004e7c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006ed0:	679a      	str	r2, [r3, #120]	; 0x78
 8006ed2:	4a0c      	ldr	r2, [pc, #48]	; (8006f04 <HAL_UART_MspInit+0x5d8>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	2027      	movs	r0, #39	; 0x27
 8006ede:	f000 f9dc 	bl	800729a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006ee2:	2027      	movs	r0, #39	; 0x27
 8006ee4:	f000 f9f3 	bl	80072ce <HAL_NVIC_EnableIRQ>
}
 8006ee8:	bf00      	nop
 8006eea:	37f8      	adds	r7, #248	; 0xf8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40004800 	.word	0x40004800
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	58020c00 	.word	0x58020c00
 8006efc:	2400165c 	.word	0x2400165c
 8006f00:	40020028 	.word	0x40020028
 8006f04:	240016d4 	.word	0x240016d4
 8006f08:	40020040 	.word	0x40020040

08006f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f10:	f7fe fbf2 	bl	80056f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f14:	480c      	ldr	r0, [pc, #48]	; (8006f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f16:	490d      	ldr	r1, [pc, #52]	; (8006f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f18:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f1c:	e002      	b.n	8006f24 <LoopCopyDataInit>

08006f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f22:	3304      	adds	r3, #4

08006f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f28:	d3f9      	bcc.n	8006f1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f2a:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f2c:	4c0a      	ldr	r4, [pc, #40]	; (8006f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f30:	e001      	b.n	8006f36 <LoopFillZerobss>

08006f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f34:	3204      	adds	r2, #4

08006f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f38:	d3fb      	bcc.n	8006f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f3a:	f00b fc49 	bl	80127d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f3e:	f7fd fc33 	bl	80047a8 <main>
  bx  lr
 8006f42:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006f44:	24001d60 	.word	0x24001d60
  ldr r0, =_sdata
 8006f48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006f4c:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 8006f50:	0801715c 	.word	0x0801715c
  ldr r2, =_sbss
 8006f54:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8006f58:	24001760 	.word	0x24001760

08006f5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f5c:	e7fe      	b.n	8006f5c <ADC3_IRQHandler>
	...

08006f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f66:	2003      	movs	r0, #3
 8006f68:	f000 f98c 	bl	8007284 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f6c:	f004 fa12 	bl	800b394 <HAL_RCC_GetSysClockFreq>
 8006f70:	4602      	mov	r2, r0
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <HAL_Init+0x68>)
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	4913      	ldr	r1, [pc, #76]	; (8006fcc <HAL_Init+0x6c>)
 8006f7e:	5ccb      	ldrb	r3, [r1, r3]
 8006f80:	f003 031f 	and.w	r3, r3, #31
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
 8006f88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <HAL_Init+0x68>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	4a0e      	ldr	r2, [pc, #56]	; (8006fcc <HAL_Init+0x6c>)
 8006f94:	5cd3      	ldrb	r3, [r2, r3]
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa0:	4a0b      	ldr	r2, [pc, #44]	; (8006fd0 <HAL_Init+0x70>)
 8006fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fa4:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <HAL_Init+0x74>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006faa:	2000      	movs	r0, #0
 8006fac:	f000 f814 	bl	8006fd8 <HAL_InitTick>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e002      	b.n	8006fc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006fba:	f7fe f981 	bl	80052c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	58024400 	.word	0x58024400
 8006fcc:	0801525c 	.word	0x0801525c
 8006fd0:	24000234 	.word	0x24000234
 8006fd4:	24000230 	.word	0x24000230

08006fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006fe0:	4b15      	ldr	r3, [pc, #84]	; (8007038 <HAL_InitTick+0x60>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e021      	b.n	8007030 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006fec:	4b13      	ldr	r3, [pc, #76]	; (800703c <HAL_InitTick+0x64>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4b11      	ldr	r3, [pc, #68]	; (8007038 <HAL_InitTick+0x60>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f971 	bl	80072ea <HAL_SYSTICK_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e00e      	b.n	8007030 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b0f      	cmp	r3, #15
 8007016:	d80a      	bhi.n	800702e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007018:	2200      	movs	r2, #0
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007020:	f000 f93b 	bl	800729a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007024:	4a06      	ldr	r2, [pc, #24]	; (8007040 <HAL_InitTick+0x68>)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	e000      	b.n	8007030 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	2400023c 	.word	0x2400023c
 800703c:	24000230 	.word	0x24000230
 8007040:	24000238 	.word	0x24000238

08007044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <HAL_IncTick+0x20>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <HAL_IncTick+0x24>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4413      	add	r3, r2
 8007054:	4a04      	ldr	r2, [pc, #16]	; (8007068 <HAL_IncTick+0x24>)
 8007056:	6013      	str	r3, [r2, #0]
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	2400023c 	.word	0x2400023c
 8007068:	2400174c 	.word	0x2400174c

0800706c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  return uwTick;
 8007070:	4b03      	ldr	r3, [pc, #12]	; (8007080 <HAL_GetTick+0x14>)
 8007072:	681b      	ldr	r3, [r3, #0]
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	2400174c 	.word	0x2400174c

08007084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800708c:	f7ff ffee 	bl	800706c <HAL_GetTick>
 8007090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709c:	d005      	beq.n	80070aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800709e:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <HAL_Delay+0x44>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80070aa:	bf00      	nop
 80070ac:	f7ff ffde 	bl	800706c <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d8f7      	bhi.n	80070ac <HAL_Delay+0x28>
  {
  }
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	2400023c 	.word	0x2400023c

080070cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_GetREVID+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	0c1b      	lsrs	r3, r3, #16
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	5c001000 	.word	0x5c001000

080070e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <__NVIC_SetPriorityGrouping+0x40>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007100:	4013      	ands	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <__NVIC_SetPriorityGrouping+0x44>)
 800710e:	4313      	orrs	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007112:	4a04      	ldr	r2, [pc, #16]	; (8007124 <__NVIC_SetPriorityGrouping+0x40>)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	60d3      	str	r3, [r2, #12]
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000ed00 	.word	0xe000ed00
 8007128:	05fa0000 	.word	0x05fa0000

0800712c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <__NVIC_GetPriorityGrouping+0x18>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	0a1b      	lsrs	r3, r3, #8
 8007136:	f003 0307 	and.w	r3, r3, #7
}
 800713a:	4618      	mov	r0, r3
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	e000ed00 	.word	0xe000ed00

08007148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007156:	2b00      	cmp	r3, #0
 8007158:	db0b      	blt.n	8007172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800715a:	88fb      	ldrh	r3, [r7, #6]
 800715c:	f003 021f 	and.w	r2, r3, #31
 8007160:	4907      	ldr	r1, [pc, #28]	; (8007180 <__NVIC_EnableIRQ+0x38>)
 8007162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	2001      	movs	r0, #1
 800716a:	fa00 f202 	lsl.w	r2, r0, r2
 800716e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e000e100 	.word	0xe000e100

08007184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007194:	2b00      	cmp	r3, #0
 8007196:	db0a      	blt.n	80071ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	490c      	ldr	r1, [pc, #48]	; (80071d0 <__NVIC_SetPriority+0x4c>)
 800719e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071a2:	0112      	lsls	r2, r2, #4
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	440b      	add	r3, r1
 80071a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071ac:	e00a      	b.n	80071c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	4908      	ldr	r1, [pc, #32]	; (80071d4 <__NVIC_SetPriority+0x50>)
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	3b04      	subs	r3, #4
 80071bc:	0112      	lsls	r2, r2, #4
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	440b      	add	r3, r1
 80071c2:	761a      	strb	r2, [r3, #24]
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	e000e100 	.word	0xe000e100
 80071d4:	e000ed00 	.word	0xe000ed00

080071d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	; 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f1c3 0307 	rsb	r3, r3, #7
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	bf28      	it	cs
 80071f6:	2304      	movcs	r3, #4
 80071f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	3304      	adds	r3, #4
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d902      	bls.n	8007208 <NVIC_EncodePriority+0x30>
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	3b03      	subs	r3, #3
 8007206:	e000      	b.n	800720a <NVIC_EncodePriority+0x32>
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800720c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	43da      	mvns	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	401a      	ands	r2, r3
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	43d9      	mvns	r1, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007230:	4313      	orrs	r3, r2
         );
}
 8007232:	4618      	mov	r0, r3
 8007234:	3724      	adds	r7, #36	; 0x24
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3b01      	subs	r3, #1
 800724c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007250:	d301      	bcc.n	8007256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007252:	2301      	movs	r3, #1
 8007254:	e00f      	b.n	8007276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007256:	4a0a      	ldr	r2, [pc, #40]	; (8007280 <SysTick_Config+0x40>)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3b01      	subs	r3, #1
 800725c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800725e:	210f      	movs	r1, #15
 8007260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007264:	f7ff ff8e 	bl	8007184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <SysTick_Config+0x40>)
 800726a:	2200      	movs	r2, #0
 800726c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800726e:	4b04      	ldr	r3, [pc, #16]	; (8007280 <SysTick_Config+0x40>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	e000e010 	.word	0xe000e010

08007284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff ff29 	bl	80070e4 <__NVIC_SetPriorityGrouping>
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4603      	mov	r3, r0
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072a8:	f7ff ff40 	bl	800712c <__NVIC_GetPriorityGrouping>
 80072ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	f7ff ff90 	bl	80071d8 <NVIC_EncodePriority>
 80072b8:	4602      	mov	r2, r0
 80072ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072be:	4611      	mov	r1, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ff5f 	bl	8007184 <__NVIC_SetPriority>
}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	4603      	mov	r3, r0
 80072d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff ff33 	bl	8007148 <__NVIC_EnableIRQ>
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ffa4 	bl	8007240 <SysTick_Config>
 80072f8:	4603      	mov	r3, r0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007306:	f000 f802 	bl	800730e <HAL_SYSTICK_Callback>
}
 800730a:	bf00      	nop
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800730e:	b480      	push	{r7}
 8007310:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e054      	b.n	80073d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7f5b      	ldrb	r3, [r3, #29]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d105      	bne.n	8007344 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fb f8b8 	bl	80024b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	791b      	ldrb	r3, [r3, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10c      	bne.n	800736c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <HAL_CRC_Init+0xc4>)
 8007358:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0218 	bic.w	r2, r2, #24
 8007368:	609a      	str	r2, [r3, #8]
 800736a:	e00c      	b.n	8007386 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6899      	ldr	r1, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	461a      	mov	r2, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f948 	bl	800760c <HAL_CRCEx_Polynomial_Set>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e028      	b.n	80073d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	795b      	ldrb	r3, [r3, #5]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d105      	bne.n	800739a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007396:	611a      	str	r2, [r3, #16]
 8007398:	e004      	b.n	80073a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6912      	ldr	r2, [r2, #16]
 80073a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	04c11db7 	.word	0x04c11db7

080073e4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2202      	movs	r2, #2
 80073f8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	2b03      	cmp	r3, #3
 8007410:	d006      	beq.n	8007420 <HAL_CRC_Calculate+0x3c>
 8007412:	2b03      	cmp	r3, #3
 8007414:	d829      	bhi.n	800746a <HAL_CRC_Calculate+0x86>
 8007416:	2b01      	cmp	r3, #1
 8007418:	d019      	beq.n	800744e <HAL_CRC_Calculate+0x6a>
 800741a:	2b02      	cmp	r3, #2
 800741c:	d01e      	beq.n	800745c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800741e:	e024      	b.n	800746a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e00a      	b.n	800743c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	3301      	adds	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d3f0      	bcc.n	8007426 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	613b      	str	r3, [r7, #16]
      break;
 800744c:	e00e      	b.n	800746c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f812 	bl	800747c <CRC_Handle_8>
 8007458:	6138      	str	r0, [r7, #16]
      break;
 800745a:	e007      	b.n	800746c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f899 	bl	8007598 <CRC_Handle_16>
 8007466:	6138      	str	r0, [r7, #16]
      break;
 8007468:	e000      	b.n	800746c <HAL_CRC_Calculate+0x88>
      break;
 800746a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007472:	693b      	ldr	r3, [r7, #16]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	; 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007488:	2300      	movs	r3, #0
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e023      	b.n	80074d6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4413      	add	r3, r2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	3301      	adds	r3, #1
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	440b      	add	r3, r1
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074a8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	3302      	adds	r3, #2
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	440b      	add	r3, r1
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80074b8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3303      	adds	r3, #3
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	440b      	add	r3, r1
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80074cc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	089b      	lsrs	r3, r3, #2
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3d6      	bcc.n	800748e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d04d      	beq.n	8007586 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d107      	bne.n	8007504 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	4413      	add	r3, r2
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	6812      	ldr	r2, [r2, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d116      	bne.n	800753c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4413      	add	r3, r2
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	b21a      	sxth	r2, r3
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	3301      	adds	r3, #1
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	440b      	add	r3, r1
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b21b      	sxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b21b      	sxth	r3, r3
 800752e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	8b7a      	ldrh	r2, [r7, #26]
 800753a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b03      	cmp	r3, #3
 8007544:	d11f      	bne.n	8007586 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	b21a      	sxth	r2, r3
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	3301      	adds	r3, #1
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	440b      	add	r3, r1
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	b21b      	sxth	r3, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	b21b      	sxth	r3, r3
 8007566:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	8b7a      	ldrh	r2, [r7, #26]
 8007572:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	3302      	adds	r3, #2
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3724      	adds	r7, #36	; 0x24
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e013      	b.n	80075d2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	041a      	lsls	r2, r3, #16
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	3302      	adds	r3, #2
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	440b      	add	r3, r1
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	4619      	mov	r1, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3301      	adds	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d3e6      	bcc.n	80075aa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	4413      	add	r3, r2
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
}
 8007600:	4618      	mov	r0, r3
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800761c:	231f      	movs	r3, #31
 800761e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007620:	bf00      	nop
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	613a      	str	r2, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d009      	beq.n	8007640 <HAL_CRCEx_Polynomial_Set+0x34>
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0f0      	beq.n	8007622 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b18      	cmp	r3, #24
 8007644:	d846      	bhi.n	80076d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <HAL_CRCEx_Polynomial_Set+0x40>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	080076db 	.word	0x080076db
 8007650:	080076d5 	.word	0x080076d5
 8007654:	080076d5 	.word	0x080076d5
 8007658:	080076d5 	.word	0x080076d5
 800765c:	080076d5 	.word	0x080076d5
 8007660:	080076d5 	.word	0x080076d5
 8007664:	080076d5 	.word	0x080076d5
 8007668:	080076d5 	.word	0x080076d5
 800766c:	080076c9 	.word	0x080076c9
 8007670:	080076d5 	.word	0x080076d5
 8007674:	080076d5 	.word	0x080076d5
 8007678:	080076d5 	.word	0x080076d5
 800767c:	080076d5 	.word	0x080076d5
 8007680:	080076d5 	.word	0x080076d5
 8007684:	080076d5 	.word	0x080076d5
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076bd 	.word	0x080076bd
 8007690:	080076d5 	.word	0x080076d5
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	080076d5 	.word	0x080076d5
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	080076b1 	.word	0x080076b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b06      	cmp	r3, #6
 80076b4:	d913      	bls.n	80076de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076ba:	e010      	b.n	80076de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b07      	cmp	r3, #7
 80076c0:	d90f      	bls.n	80076e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076c6:	e00c      	b.n	80076e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d90b      	bls.n	80076e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076d2:	e008      	b.n	80076e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
      break;
 80076d8:	e006      	b.n	80076e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076da:	bf00      	nop
 80076dc:	e004      	b.n	80076e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076de:	bf00      	nop
 80076e0:	e002      	b.n	80076e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10d      	bne.n	800770a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 0118 	bic.w	r1, r3, #24
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	430a      	orrs	r2, r1
 8007708:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800770a:	7dfb      	ldrb	r3, [r7, #23]
}
 800770c:	4618      	mov	r0, r3
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007720:	f7ff fca4 	bl	800706c <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e316      	b.n	8007d5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a66      	ldr	r2, [pc, #408]	; (80078d0 <HAL_DMA_Init+0x1b8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d04a      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a65      	ldr	r2, [pc, #404]	; (80078d4 <HAL_DMA_Init+0x1bc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d045      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a63      	ldr	r2, [pc, #396]	; (80078d8 <HAL_DMA_Init+0x1c0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d040      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a62      	ldr	r2, [pc, #392]	; (80078dc <HAL_DMA_Init+0x1c4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d03b      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a60      	ldr	r2, [pc, #384]	; (80078e0 <HAL_DMA_Init+0x1c8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d036      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a5f      	ldr	r2, [pc, #380]	; (80078e4 <HAL_DMA_Init+0x1cc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d031      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5d      	ldr	r2, [pc, #372]	; (80078e8 <HAL_DMA_Init+0x1d0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d02c      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a5c      	ldr	r2, [pc, #368]	; (80078ec <HAL_DMA_Init+0x1d4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d027      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a5a      	ldr	r2, [pc, #360]	; (80078f0 <HAL_DMA_Init+0x1d8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a59      	ldr	r2, [pc, #356]	; (80078f4 <HAL_DMA_Init+0x1dc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d01d      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a57      	ldr	r2, [pc, #348]	; (80078f8 <HAL_DMA_Init+0x1e0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a56      	ldr	r2, [pc, #344]	; (80078fc <HAL_DMA_Init+0x1e4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a54      	ldr	r2, [pc, #336]	; (8007900 <HAL_DMA_Init+0x1e8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a53      	ldr	r2, [pc, #332]	; (8007904 <HAL_DMA_Init+0x1ec>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a51      	ldr	r2, [pc, #324]	; (8007908 <HAL_DMA_Init+0x1f0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_DMA_Init+0xb8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a50      	ldr	r2, [pc, #320]	; (800790c <HAL_DMA_Init+0x1f4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d101      	bne.n	80077d4 <HAL_DMA_Init+0xbc>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <HAL_DMA_Init+0xbe>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 813b 	beq.w	8007a52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a37      	ldr	r2, [pc, #220]	; (80078d0 <HAL_DMA_Init+0x1b8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04a      	beq.n	800788c <HAL_DMA_Init+0x174>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a36      	ldr	r2, [pc, #216]	; (80078d4 <HAL_DMA_Init+0x1bc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d045      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a34      	ldr	r2, [pc, #208]	; (80078d8 <HAL_DMA_Init+0x1c0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d040      	beq.n	800788c <HAL_DMA_Init+0x174>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a33      	ldr	r2, [pc, #204]	; (80078dc <HAL_DMA_Init+0x1c4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d03b      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a31      	ldr	r2, [pc, #196]	; (80078e0 <HAL_DMA_Init+0x1c8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d036      	beq.n	800788c <HAL_DMA_Init+0x174>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a30      	ldr	r2, [pc, #192]	; (80078e4 <HAL_DMA_Init+0x1cc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d031      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2e      	ldr	r2, [pc, #184]	; (80078e8 <HAL_DMA_Init+0x1d0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02c      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2d      	ldr	r2, [pc, #180]	; (80078ec <HAL_DMA_Init+0x1d4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d027      	beq.n	800788c <HAL_DMA_Init+0x174>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2b      	ldr	r2, [pc, #172]	; (80078f0 <HAL_DMA_Init+0x1d8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2a      	ldr	r2, [pc, #168]	; (80078f4 <HAL_DMA_Init+0x1dc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01d      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a28      	ldr	r2, [pc, #160]	; (80078f8 <HAL_DMA_Init+0x1e0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <HAL_DMA_Init+0x174>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a27      	ldr	r2, [pc, #156]	; (80078fc <HAL_DMA_Init+0x1e4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a25      	ldr	r2, [pc, #148]	; (8007900 <HAL_DMA_Init+0x1e8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_DMA_Init+0x174>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a24      	ldr	r2, [pc, #144]	; (8007904 <HAL_DMA_Init+0x1ec>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a22      	ldr	r2, [pc, #136]	; (8007908 <HAL_DMA_Init+0x1f0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_DMA_Init+0x174>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a21      	ldr	r2, [pc, #132]	; (800790c <HAL_DMA_Init+0x1f4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d108      	bne.n	800789e <HAL_DMA_Init+0x186>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0201 	bic.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e007      	b.n	80078ae <HAL_DMA_Init+0x196>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078ae:	e02f      	b.n	8007910 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078b0:	f7ff fbdc 	bl	800706c <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d928      	bls.n	8007910 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2203      	movs	r2, #3
 80078c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e246      	b.n	8007d5e <HAL_DMA_Init+0x646>
 80078d0:	40020010 	.word	0x40020010
 80078d4:	40020028 	.word	0x40020028
 80078d8:	40020040 	.word	0x40020040
 80078dc:	40020058 	.word	0x40020058
 80078e0:	40020070 	.word	0x40020070
 80078e4:	40020088 	.word	0x40020088
 80078e8:	400200a0 	.word	0x400200a0
 80078ec:	400200b8 	.word	0x400200b8
 80078f0:	40020410 	.word	0x40020410
 80078f4:	40020428 	.word	0x40020428
 80078f8:	40020440 	.word	0x40020440
 80078fc:	40020458 	.word	0x40020458
 8007900:	40020470 	.word	0x40020470
 8007904:	40020488 	.word	0x40020488
 8007908:	400204a0 	.word	0x400204a0
 800790c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1c8      	bne.n	80078b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4b83      	ldr	r3, [pc, #524]	; (8007b38 <HAL_DMA_Init+0x420>)
 800792a:	4013      	ands	r3, r2
 800792c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007936:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007942:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800794e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b04      	cmp	r3, #4
 8007962:	d107      	bne.n	8007974 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	4313      	orrs	r3, r2
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007974:	4b71      	ldr	r3, [pc, #452]	; (8007b3c <HAL_DMA_Init+0x424>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4b71      	ldr	r3, [pc, #452]	; (8007b40 <HAL_DMA_Init+0x428>)
 800797a:	4013      	ands	r3, r2
 800797c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007980:	d328      	bcc.n	80079d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b28      	cmp	r3, #40	; 0x28
 8007988:	d903      	bls.n	8007992 <HAL_DMA_Init+0x27a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b2e      	cmp	r3, #46	; 0x2e
 8007990:	d917      	bls.n	80079c2 <HAL_DMA_Init+0x2aa>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b3e      	cmp	r3, #62	; 0x3e
 8007998:	d903      	bls.n	80079a2 <HAL_DMA_Init+0x28a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2b42      	cmp	r3, #66	; 0x42
 80079a0:	d90f      	bls.n	80079c2 <HAL_DMA_Init+0x2aa>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b46      	cmp	r3, #70	; 0x46
 80079a8:	d903      	bls.n	80079b2 <HAL_DMA_Init+0x29a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b48      	cmp	r3, #72	; 0x48
 80079b0:	d907      	bls.n	80079c2 <HAL_DMA_Init+0x2aa>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b4e      	cmp	r3, #78	; 0x4e
 80079b8:	d905      	bls.n	80079c6 <HAL_DMA_Init+0x2ae>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b52      	cmp	r3, #82	; 0x52
 80079c0:	d801      	bhi.n	80079c6 <HAL_DMA_Init+0x2ae>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <HAL_DMA_Init+0x2b0>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0307 	bic.w	r3, r3, #7
 80079ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d117      	bne.n	8007a2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f002 fb33 	bl	800a07c <DMA_CheckFifoParam>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2240      	movs	r2, #64	; 0x40
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e197      	b.n	8007d5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f002 fa6e 	bl	8009f18 <DMA_CalcBaseAndBitshift>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	223f      	movs	r2, #63	; 0x3f
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	609a      	str	r2, [r3, #8]
 8007a50:	e0cd      	b.n	8007bee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a3b      	ldr	r2, [pc, #236]	; (8007b44 <HAL_DMA_Init+0x42c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d022      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a39      	ldr	r2, [pc, #228]	; (8007b48 <HAL_DMA_Init+0x430>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d01d      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a38      	ldr	r2, [pc, #224]	; (8007b4c <HAL_DMA_Init+0x434>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d018      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a36      	ldr	r2, [pc, #216]	; (8007b50 <HAL_DMA_Init+0x438>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a35      	ldr	r2, [pc, #212]	; (8007b54 <HAL_DMA_Init+0x43c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00e      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a33      	ldr	r2, [pc, #204]	; (8007b58 <HAL_DMA_Init+0x440>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d009      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a32      	ldr	r2, [pc, #200]	; (8007b5c <HAL_DMA_Init+0x444>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d004      	beq.n	8007aa2 <HAL_DMA_Init+0x38a>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a30      	ldr	r2, [pc, #192]	; (8007b60 <HAL_DMA_Init+0x448>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d101      	bne.n	8007aa6 <HAL_DMA_Init+0x38e>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <HAL_DMA_Init+0x390>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8097 	beq.w	8007bdc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a24      	ldr	r2, [pc, #144]	; (8007b44 <HAL_DMA_Init+0x42c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d021      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a22      	ldr	r2, [pc, #136]	; (8007b48 <HAL_DMA_Init+0x430>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01c      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <HAL_DMA_Init+0x434>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d017      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1f      	ldr	r2, [pc, #124]	; (8007b50 <HAL_DMA_Init+0x438>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d012      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <HAL_DMA_Init+0x43c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00d      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <HAL_DMA_Init+0x440>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d008      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1b      	ldr	r2, [pc, #108]	; (8007b5c <HAL_DMA_Init+0x444>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <HAL_DMA_Init+0x3e4>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <HAL_DMA_Init+0x448>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4b12      	ldr	r3, [pc, #72]	; (8007b64 <HAL_DMA_Init+0x44c>)
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d020      	beq.n	8007b68 <HAL_DMA_Init+0x450>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b80      	cmp	r3, #128	; 0x80
 8007b2c:	d102      	bne.n	8007b34 <HAL_DMA_Init+0x41c>
 8007b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b32:	e01a      	b.n	8007b6a <HAL_DMA_Init+0x452>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e018      	b.n	8007b6a <HAL_DMA_Init+0x452>
 8007b38:	fe10803f 	.word	0xfe10803f
 8007b3c:	5c001000 	.word	0x5c001000
 8007b40:	ffff0000 	.word	0xffff0000
 8007b44:	58025408 	.word	0x58025408
 8007b48:	5802541c 	.word	0x5802541c
 8007b4c:	58025430 	.word	0x58025430
 8007b50:	58025444 	.word	0x58025444
 8007b54:	58025458 	.word	0x58025458
 8007b58:	5802546c 	.word	0x5802546c
 8007b5c:	58025480 	.word	0x58025480
 8007b60:	58025494 	.word	0x58025494
 8007b64:	fffe000f 	.word	0xfffe000f
 8007b68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	68d2      	ldr	r2, [r2, #12]
 8007b6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	4b6e      	ldr	r3, [pc, #440]	; (8007d68 <HAL_DMA_Init+0x650>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4a6e      	ldr	r2, [pc, #440]	; (8007d6c <HAL_DMA_Init+0x654>)
 8007bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb8:	091b      	lsrs	r3, r3, #4
 8007bba:	009a      	lsls	r2, r3, #2
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f002 f9a9 	bl	8009f18 <DMA_CalcBaseAndBitshift>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	409a      	lsls	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	e008      	b.n	8007bee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2240      	movs	r2, #64	; 0x40
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2203      	movs	r2, #3
 8007be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e0b7      	b.n	8007d5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a5f      	ldr	r2, [pc, #380]	; (8007d70 <HAL_DMA_Init+0x658>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d072      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a5d      	ldr	r2, [pc, #372]	; (8007d74 <HAL_DMA_Init+0x65c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d06d      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a5c      	ldr	r2, [pc, #368]	; (8007d78 <HAL_DMA_Init+0x660>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d068      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a5a      	ldr	r2, [pc, #360]	; (8007d7c <HAL_DMA_Init+0x664>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d063      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a59      	ldr	r2, [pc, #356]	; (8007d80 <HAL_DMA_Init+0x668>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d05e      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a57      	ldr	r2, [pc, #348]	; (8007d84 <HAL_DMA_Init+0x66c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d059      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a56      	ldr	r2, [pc, #344]	; (8007d88 <HAL_DMA_Init+0x670>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d054      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a54      	ldr	r2, [pc, #336]	; (8007d8c <HAL_DMA_Init+0x674>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d04f      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a53      	ldr	r2, [pc, #332]	; (8007d90 <HAL_DMA_Init+0x678>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d04a      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a51      	ldr	r2, [pc, #324]	; (8007d94 <HAL_DMA_Init+0x67c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d045      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a50      	ldr	r2, [pc, #320]	; (8007d98 <HAL_DMA_Init+0x680>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d040      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a4e      	ldr	r2, [pc, #312]	; (8007d9c <HAL_DMA_Init+0x684>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d03b      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a4d      	ldr	r2, [pc, #308]	; (8007da0 <HAL_DMA_Init+0x688>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d036      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a4b      	ldr	r2, [pc, #300]	; (8007da4 <HAL_DMA_Init+0x68c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d031      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a4a      	ldr	r2, [pc, #296]	; (8007da8 <HAL_DMA_Init+0x690>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d02c      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a48      	ldr	r2, [pc, #288]	; (8007dac <HAL_DMA_Init+0x694>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d027      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a47      	ldr	r2, [pc, #284]	; (8007db0 <HAL_DMA_Init+0x698>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d022      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a45      	ldr	r2, [pc, #276]	; (8007db4 <HAL_DMA_Init+0x69c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01d      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a44      	ldr	r2, [pc, #272]	; (8007db8 <HAL_DMA_Init+0x6a0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d018      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a42      	ldr	r2, [pc, #264]	; (8007dbc <HAL_DMA_Init+0x6a4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a41      	ldr	r2, [pc, #260]	; (8007dc0 <HAL_DMA_Init+0x6a8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00e      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a3f      	ldr	r2, [pc, #252]	; (8007dc4 <HAL_DMA_Init+0x6ac>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d009      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3e      	ldr	r2, [pc, #248]	; (8007dc8 <HAL_DMA_Init+0x6b0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d004      	beq.n	8007cde <HAL_DMA_Init+0x5c6>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a3c      	ldr	r2, [pc, #240]	; (8007dcc <HAL_DMA_Init+0x6b4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d101      	bne.n	8007ce2 <HAL_DMA_Init+0x5ca>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <HAL_DMA_Init+0x5cc>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d032      	beq.n	8007d4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f002 fa43 	bl	800a174 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d102      	bne.n	8007cfc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d010      	beq.n	8007d3c <HAL_DMA_Init+0x624>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d80c      	bhi.n	8007d3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f002 fac0 	bl	800a2a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	e008      	b.n	8007d4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	a7fdabf8 	.word	0xa7fdabf8
 8007d6c:	cccccccd 	.word	0xcccccccd
 8007d70:	40020010 	.word	0x40020010
 8007d74:	40020028 	.word	0x40020028
 8007d78:	40020040 	.word	0x40020040
 8007d7c:	40020058 	.word	0x40020058
 8007d80:	40020070 	.word	0x40020070
 8007d84:	40020088 	.word	0x40020088
 8007d88:	400200a0 	.word	0x400200a0
 8007d8c:	400200b8 	.word	0x400200b8
 8007d90:	40020410 	.word	0x40020410
 8007d94:	40020428 	.word	0x40020428
 8007d98:	40020440 	.word	0x40020440
 8007d9c:	40020458 	.word	0x40020458
 8007da0:	40020470 	.word	0x40020470
 8007da4:	40020488 	.word	0x40020488
 8007da8:	400204a0 	.word	0x400204a0
 8007dac:	400204b8 	.word	0x400204b8
 8007db0:	58025408 	.word	0x58025408
 8007db4:	5802541c 	.word	0x5802541c
 8007db8:	58025430 	.word	0x58025430
 8007dbc:	58025444 	.word	0x58025444
 8007dc0:	58025458 	.word	0x58025458
 8007dc4:	5802546c 	.word	0x5802546c
 8007dc8:	58025480 	.word	0x58025480
 8007dcc:	58025494 	.word	0x58025494

08007dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e226      	b.n	800823a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_DMA_Start_IT+0x2a>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e21f      	b.n	800823a <HAL_DMA_Start_IT+0x46a>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	f040 820a 	bne.w	8008224 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a68      	ldr	r2, [pc, #416]	; (8007fc4 <HAL_DMA_Start_IT+0x1f4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d04a      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a66      	ldr	r2, [pc, #408]	; (8007fc8 <HAL_DMA_Start_IT+0x1f8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d045      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a65      	ldr	r2, [pc, #404]	; (8007fcc <HAL_DMA_Start_IT+0x1fc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d040      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a63      	ldr	r2, [pc, #396]	; (8007fd0 <HAL_DMA_Start_IT+0x200>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d03b      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a62      	ldr	r2, [pc, #392]	; (8007fd4 <HAL_DMA_Start_IT+0x204>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d036      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a60      	ldr	r2, [pc, #384]	; (8007fd8 <HAL_DMA_Start_IT+0x208>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d031      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a5f      	ldr	r2, [pc, #380]	; (8007fdc <HAL_DMA_Start_IT+0x20c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d02c      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a5d      	ldr	r2, [pc, #372]	; (8007fe0 <HAL_DMA_Start_IT+0x210>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d027      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a5c      	ldr	r2, [pc, #368]	; (8007fe4 <HAL_DMA_Start_IT+0x214>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d022      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a5a      	ldr	r2, [pc, #360]	; (8007fe8 <HAL_DMA_Start_IT+0x218>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01d      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a59      	ldr	r2, [pc, #356]	; (8007fec <HAL_DMA_Start_IT+0x21c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d018      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a57      	ldr	r2, [pc, #348]	; (8007ff0 <HAL_DMA_Start_IT+0x220>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a56      	ldr	r2, [pc, #344]	; (8007ff4 <HAL_DMA_Start_IT+0x224>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00e      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a54      	ldr	r2, [pc, #336]	; (8007ff8 <HAL_DMA_Start_IT+0x228>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d009      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a53      	ldr	r2, [pc, #332]	; (8007ffc <HAL_DMA_Start_IT+0x22c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <HAL_DMA_Start_IT+0xee>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a51      	ldr	r2, [pc, #324]	; (8008000 <HAL_DMA_Start_IT+0x230>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d108      	bne.n	8007ed0 <HAL_DMA_Start_IT+0x100>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e007      	b.n	8007ee0 <HAL_DMA_Start_IT+0x110>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0201 	bic.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f001 fe6a 	bl	8009bc0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a34      	ldr	r2, [pc, #208]	; (8007fc4 <HAL_DMA_Start_IT+0x1f4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d04a      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a33      	ldr	r2, [pc, #204]	; (8007fc8 <HAL_DMA_Start_IT+0x1f8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d045      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a31      	ldr	r2, [pc, #196]	; (8007fcc <HAL_DMA_Start_IT+0x1fc>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d040      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a30      	ldr	r2, [pc, #192]	; (8007fd0 <HAL_DMA_Start_IT+0x200>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d03b      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a2e      	ldr	r2, [pc, #184]	; (8007fd4 <HAL_DMA_Start_IT+0x204>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d036      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <HAL_DMA_Start_IT+0x208>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d031      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a2b      	ldr	r2, [pc, #172]	; (8007fdc <HAL_DMA_Start_IT+0x20c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d02c      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <HAL_DMA_Start_IT+0x210>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d027      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a28      	ldr	r2, [pc, #160]	; (8007fe4 <HAL_DMA_Start_IT+0x214>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d022      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a27      	ldr	r2, [pc, #156]	; (8007fe8 <HAL_DMA_Start_IT+0x218>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d01d      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a25      	ldr	r2, [pc, #148]	; (8007fec <HAL_DMA_Start_IT+0x21c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d018      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a24      	ldr	r2, [pc, #144]	; (8007ff0 <HAL_DMA_Start_IT+0x220>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a22      	ldr	r2, [pc, #136]	; (8007ff4 <HAL_DMA_Start_IT+0x224>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00e      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a21      	ldr	r2, [pc, #132]	; (8007ff8 <HAL_DMA_Start_IT+0x228>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d009      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <HAL_DMA_Start_IT+0x22c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d004      	beq.n	8007f8c <HAL_DMA_Start_IT+0x1bc>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <HAL_DMA_Start_IT+0x230>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d101      	bne.n	8007f90 <HAL_DMA_Start_IT+0x1c0>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <HAL_DMA_Start_IT+0x1c2>
 8007f90:	2300      	movs	r3, #0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d036      	beq.n	8008004 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f023 021e 	bic.w	r2, r3, #30
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0216 	orr.w	r2, r2, #22
 8007fa8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d03e      	beq.n	8008030 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0208 	orr.w	r2, r2, #8
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e035      	b.n	8008030 <HAL_DMA_Start_IT+0x260>
 8007fc4:	40020010 	.word	0x40020010
 8007fc8:	40020028 	.word	0x40020028
 8007fcc:	40020040 	.word	0x40020040
 8007fd0:	40020058 	.word	0x40020058
 8007fd4:	40020070 	.word	0x40020070
 8007fd8:	40020088 	.word	0x40020088
 8007fdc:	400200a0 	.word	0x400200a0
 8007fe0:	400200b8 	.word	0x400200b8
 8007fe4:	40020410 	.word	0x40020410
 8007fe8:	40020428 	.word	0x40020428
 8007fec:	40020440 	.word	0x40020440
 8007ff0:	40020458 	.word	0x40020458
 8007ff4:	40020470 	.word	0x40020470
 8007ff8:	40020488 	.word	0x40020488
 8007ffc:	400204a0 	.word	0x400204a0
 8008000:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f023 020e 	bic.w	r2, r3, #14
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 020a 	orr.w	r2, r2, #10
 8008016:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0204 	orr.w	r2, r2, #4
 800802e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a83      	ldr	r2, [pc, #524]	; (8008244 <HAL_DMA_Start_IT+0x474>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d072      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a82      	ldr	r2, [pc, #520]	; (8008248 <HAL_DMA_Start_IT+0x478>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d06d      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a80      	ldr	r2, [pc, #512]	; (800824c <HAL_DMA_Start_IT+0x47c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d068      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a7f      	ldr	r2, [pc, #508]	; (8008250 <HAL_DMA_Start_IT+0x480>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d063      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a7d      	ldr	r2, [pc, #500]	; (8008254 <HAL_DMA_Start_IT+0x484>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d05e      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a7c      	ldr	r2, [pc, #496]	; (8008258 <HAL_DMA_Start_IT+0x488>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d059      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a7a      	ldr	r2, [pc, #488]	; (800825c <HAL_DMA_Start_IT+0x48c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d054      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a79      	ldr	r2, [pc, #484]	; (8008260 <HAL_DMA_Start_IT+0x490>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d04f      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a77      	ldr	r2, [pc, #476]	; (8008264 <HAL_DMA_Start_IT+0x494>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d04a      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a76      	ldr	r2, [pc, #472]	; (8008268 <HAL_DMA_Start_IT+0x498>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d045      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a74      	ldr	r2, [pc, #464]	; (800826c <HAL_DMA_Start_IT+0x49c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d040      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a73      	ldr	r2, [pc, #460]	; (8008270 <HAL_DMA_Start_IT+0x4a0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d03b      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a71      	ldr	r2, [pc, #452]	; (8008274 <HAL_DMA_Start_IT+0x4a4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d036      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a70      	ldr	r2, [pc, #448]	; (8008278 <HAL_DMA_Start_IT+0x4a8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d031      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a6e      	ldr	r2, [pc, #440]	; (800827c <HAL_DMA_Start_IT+0x4ac>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d02c      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a6d      	ldr	r2, [pc, #436]	; (8008280 <HAL_DMA_Start_IT+0x4b0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d027      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a6b      	ldr	r2, [pc, #428]	; (8008284 <HAL_DMA_Start_IT+0x4b4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d022      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a6a      	ldr	r2, [pc, #424]	; (8008288 <HAL_DMA_Start_IT+0x4b8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d01d      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a68      	ldr	r2, [pc, #416]	; (800828c <HAL_DMA_Start_IT+0x4bc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d018      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a67      	ldr	r2, [pc, #412]	; (8008290 <HAL_DMA_Start_IT+0x4c0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a65      	ldr	r2, [pc, #404]	; (8008294 <HAL_DMA_Start_IT+0x4c4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00e      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a64      	ldr	r2, [pc, #400]	; (8008298 <HAL_DMA_Start_IT+0x4c8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d009      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a62      	ldr	r2, [pc, #392]	; (800829c <HAL_DMA_Start_IT+0x4cc>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d004      	beq.n	8008120 <HAL_DMA_Start_IT+0x350>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a61      	ldr	r2, [pc, #388]	; (80082a0 <HAL_DMA_Start_IT+0x4d0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d101      	bne.n	8008124 <HAL_DMA_Start_IT+0x354>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <HAL_DMA_Start_IT+0x356>
 8008124:	2300      	movs	r3, #0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01a      	beq.n	8008160 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008146:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800815e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a37      	ldr	r2, [pc, #220]	; (8008244 <HAL_DMA_Start_IT+0x474>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d04a      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a36      	ldr	r2, [pc, #216]	; (8008248 <HAL_DMA_Start_IT+0x478>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d045      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a34      	ldr	r2, [pc, #208]	; (800824c <HAL_DMA_Start_IT+0x47c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d040      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a33      	ldr	r2, [pc, #204]	; (8008250 <HAL_DMA_Start_IT+0x480>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d03b      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a31      	ldr	r2, [pc, #196]	; (8008254 <HAL_DMA_Start_IT+0x484>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d036      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a30      	ldr	r2, [pc, #192]	; (8008258 <HAL_DMA_Start_IT+0x488>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d031      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2e      	ldr	r2, [pc, #184]	; (800825c <HAL_DMA_Start_IT+0x48c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d02c      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a2d      	ldr	r2, [pc, #180]	; (8008260 <HAL_DMA_Start_IT+0x490>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d027      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a2b      	ldr	r2, [pc, #172]	; (8008264 <HAL_DMA_Start_IT+0x494>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d022      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a2a      	ldr	r2, [pc, #168]	; (8008268 <HAL_DMA_Start_IT+0x498>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d01d      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a28      	ldr	r2, [pc, #160]	; (800826c <HAL_DMA_Start_IT+0x49c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d018      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a27      	ldr	r2, [pc, #156]	; (8008270 <HAL_DMA_Start_IT+0x4a0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d013      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a25      	ldr	r2, [pc, #148]	; (8008274 <HAL_DMA_Start_IT+0x4a4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00e      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a24      	ldr	r2, [pc, #144]	; (8008278 <HAL_DMA_Start_IT+0x4a8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d009      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a22      	ldr	r2, [pc, #136]	; (800827c <HAL_DMA_Start_IT+0x4ac>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d004      	beq.n	8008200 <HAL_DMA_Start_IT+0x430>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a21      	ldr	r2, [pc, #132]	; (8008280 <HAL_DMA_Start_IT+0x4b0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d108      	bne.n	8008212 <HAL_DMA_Start_IT+0x442>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e012      	b.n	8008238 <HAL_DMA_Start_IT+0x468>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0201 	orr.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e009      	b.n	8008238 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800822a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40020010 	.word	0x40020010
 8008248:	40020028 	.word	0x40020028
 800824c:	40020040 	.word	0x40020040
 8008250:	40020058 	.word	0x40020058
 8008254:	40020070 	.word	0x40020070
 8008258:	40020088 	.word	0x40020088
 800825c:	400200a0 	.word	0x400200a0
 8008260:	400200b8 	.word	0x400200b8
 8008264:	40020410 	.word	0x40020410
 8008268:	40020428 	.word	0x40020428
 800826c:	40020440 	.word	0x40020440
 8008270:	40020458 	.word	0x40020458
 8008274:	40020470 	.word	0x40020470
 8008278:	40020488 	.word	0x40020488
 800827c:	400204a0 	.word	0x400204a0
 8008280:	400204b8 	.word	0x400204b8
 8008284:	58025408 	.word	0x58025408
 8008288:	5802541c 	.word	0x5802541c
 800828c:	58025430 	.word	0x58025430
 8008290:	58025444 	.word	0x58025444
 8008294:	58025458 	.word	0x58025458
 8008298:	5802546c 	.word	0x5802546c
 800829c:	58025480 	.word	0x58025480
 80082a0:	58025494 	.word	0x58025494

080082a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80082ac:	f7fe fede 	bl	800706c <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e2dc      	b.n	8008876 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d008      	beq.n	80082da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2280      	movs	r2, #128	; 0x80
 80082cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e2cd      	b.n	8008876 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a76      	ldr	r2, [pc, #472]	; (80084b8 <HAL_DMA_Abort+0x214>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d04a      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a74      	ldr	r2, [pc, #464]	; (80084bc <HAL_DMA_Abort+0x218>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d045      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a73      	ldr	r2, [pc, #460]	; (80084c0 <HAL_DMA_Abort+0x21c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d040      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a71      	ldr	r2, [pc, #452]	; (80084c4 <HAL_DMA_Abort+0x220>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d03b      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a70      	ldr	r2, [pc, #448]	; (80084c8 <HAL_DMA_Abort+0x224>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d036      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a6e      	ldr	r2, [pc, #440]	; (80084cc <HAL_DMA_Abort+0x228>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d031      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a6d      	ldr	r2, [pc, #436]	; (80084d0 <HAL_DMA_Abort+0x22c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d02c      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6b      	ldr	r2, [pc, #428]	; (80084d4 <HAL_DMA_Abort+0x230>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d027      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a6a      	ldr	r2, [pc, #424]	; (80084d8 <HAL_DMA_Abort+0x234>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d022      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a68      	ldr	r2, [pc, #416]	; (80084dc <HAL_DMA_Abort+0x238>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01d      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a67      	ldr	r2, [pc, #412]	; (80084e0 <HAL_DMA_Abort+0x23c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a65      	ldr	r2, [pc, #404]	; (80084e4 <HAL_DMA_Abort+0x240>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a64      	ldr	r2, [pc, #400]	; (80084e8 <HAL_DMA_Abort+0x244>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a62      	ldr	r2, [pc, #392]	; (80084ec <HAL_DMA_Abort+0x248>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a61      	ldr	r2, [pc, #388]	; (80084f0 <HAL_DMA_Abort+0x24c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_DMA_Abort+0xd6>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a5f      	ldr	r2, [pc, #380]	; (80084f4 <HAL_DMA_Abort+0x250>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d101      	bne.n	800837e <HAL_DMA_Abort+0xda>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <HAL_DMA_Abort+0xdc>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 021e 	bic.w	r2, r2, #30
 8008392:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	e00a      	b.n	80083c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 020e 	bic.w	r2, r2, #14
 80083ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a3c      	ldr	r2, [pc, #240]	; (80084b8 <HAL_DMA_Abort+0x214>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d072      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a3a      	ldr	r2, [pc, #232]	; (80084bc <HAL_DMA_Abort+0x218>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d06d      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a39      	ldr	r2, [pc, #228]	; (80084c0 <HAL_DMA_Abort+0x21c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d068      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a37      	ldr	r2, [pc, #220]	; (80084c4 <HAL_DMA_Abort+0x220>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d063      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a36      	ldr	r2, [pc, #216]	; (80084c8 <HAL_DMA_Abort+0x224>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d05e      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a34      	ldr	r2, [pc, #208]	; (80084cc <HAL_DMA_Abort+0x228>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d059      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a33      	ldr	r2, [pc, #204]	; (80084d0 <HAL_DMA_Abort+0x22c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d054      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a31      	ldr	r2, [pc, #196]	; (80084d4 <HAL_DMA_Abort+0x230>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d04f      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a30      	ldr	r2, [pc, #192]	; (80084d8 <HAL_DMA_Abort+0x234>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d04a      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a2e      	ldr	r2, [pc, #184]	; (80084dc <HAL_DMA_Abort+0x238>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d045      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2d      	ldr	r2, [pc, #180]	; (80084e0 <HAL_DMA_Abort+0x23c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d040      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a2b      	ldr	r2, [pc, #172]	; (80084e4 <HAL_DMA_Abort+0x240>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d03b      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a2a      	ldr	r2, [pc, #168]	; (80084e8 <HAL_DMA_Abort+0x244>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d036      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a28      	ldr	r2, [pc, #160]	; (80084ec <HAL_DMA_Abort+0x248>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d031      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a27      	ldr	r2, [pc, #156]	; (80084f0 <HAL_DMA_Abort+0x24c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d02c      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a25      	ldr	r2, [pc, #148]	; (80084f4 <HAL_DMA_Abort+0x250>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d027      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a24      	ldr	r2, [pc, #144]	; (80084f8 <HAL_DMA_Abort+0x254>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d022      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a22      	ldr	r2, [pc, #136]	; (80084fc <HAL_DMA_Abort+0x258>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01d      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a21      	ldr	r2, [pc, #132]	; (8008500 <HAL_DMA_Abort+0x25c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d018      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <HAL_DMA_Abort+0x260>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <HAL_DMA_Abort+0x264>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00e      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a1c      	ldr	r2, [pc, #112]	; (800850c <HAL_DMA_Abort+0x268>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d009      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <HAL_DMA_Abort+0x26c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d004      	beq.n	80084b2 <HAL_DMA_Abort+0x20e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a19      	ldr	r2, [pc, #100]	; (8008514 <HAL_DMA_Abort+0x270>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d132      	bne.n	8008518 <HAL_DMA_Abort+0x274>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e031      	b.n	800851a <HAL_DMA_Abort+0x276>
 80084b6:	bf00      	nop
 80084b8:	40020010 	.word	0x40020010
 80084bc:	40020028 	.word	0x40020028
 80084c0:	40020040 	.word	0x40020040
 80084c4:	40020058 	.word	0x40020058
 80084c8:	40020070 	.word	0x40020070
 80084cc:	40020088 	.word	0x40020088
 80084d0:	400200a0 	.word	0x400200a0
 80084d4:	400200b8 	.word	0x400200b8
 80084d8:	40020410 	.word	0x40020410
 80084dc:	40020428 	.word	0x40020428
 80084e0:	40020440 	.word	0x40020440
 80084e4:	40020458 	.word	0x40020458
 80084e8:	40020470 	.word	0x40020470
 80084ec:	40020488 	.word	0x40020488
 80084f0:	400204a0 	.word	0x400204a0
 80084f4:	400204b8 	.word	0x400204b8
 80084f8:	58025408 	.word	0x58025408
 80084fc:	5802541c 	.word	0x5802541c
 8008500:	58025430 	.word	0x58025430
 8008504:	58025444 	.word	0x58025444
 8008508:	58025458 	.word	0x58025458
 800850c:	5802546c 	.word	0x5802546c
 8008510:	58025480 	.word	0x58025480
 8008514:	58025494 	.word	0x58025494
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800852c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a6d      	ldr	r2, [pc, #436]	; (80086e8 <HAL_DMA_Abort+0x444>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d04a      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a6b      	ldr	r2, [pc, #428]	; (80086ec <HAL_DMA_Abort+0x448>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d045      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a6a      	ldr	r2, [pc, #424]	; (80086f0 <HAL_DMA_Abort+0x44c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d040      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a68      	ldr	r2, [pc, #416]	; (80086f4 <HAL_DMA_Abort+0x450>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d03b      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a67      	ldr	r2, [pc, #412]	; (80086f8 <HAL_DMA_Abort+0x454>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d036      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a65      	ldr	r2, [pc, #404]	; (80086fc <HAL_DMA_Abort+0x458>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d031      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a64      	ldr	r2, [pc, #400]	; (8008700 <HAL_DMA_Abort+0x45c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d02c      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a62      	ldr	r2, [pc, #392]	; (8008704 <HAL_DMA_Abort+0x460>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d027      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a61      	ldr	r2, [pc, #388]	; (8008708 <HAL_DMA_Abort+0x464>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d022      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5f      	ldr	r2, [pc, #380]	; (800870c <HAL_DMA_Abort+0x468>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d01d      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a5e      	ldr	r2, [pc, #376]	; (8008710 <HAL_DMA_Abort+0x46c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d018      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a5c      	ldr	r2, [pc, #368]	; (8008714 <HAL_DMA_Abort+0x470>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d013      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a5b      	ldr	r2, [pc, #364]	; (8008718 <HAL_DMA_Abort+0x474>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00e      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a59      	ldr	r2, [pc, #356]	; (800871c <HAL_DMA_Abort+0x478>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d009      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a58      	ldr	r2, [pc, #352]	; (8008720 <HAL_DMA_Abort+0x47c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d004      	beq.n	80085ce <HAL_DMA_Abort+0x32a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a56      	ldr	r2, [pc, #344]	; (8008724 <HAL_DMA_Abort+0x480>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d108      	bne.n	80085e0 <HAL_DMA_Abort+0x33c>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e007      	b.n	80085f0 <HAL_DMA_Abort+0x34c>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0201 	bic.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80085f0:	e013      	b.n	800861a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085f2:	f7fe fd3b 	bl	800706c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b05      	cmp	r3, #5
 80085fe:	d90c      	bls.n	800861a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e12d      	b.n	8008876 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e5      	bne.n	80085f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a2f      	ldr	r2, [pc, #188]	; (80086e8 <HAL_DMA_Abort+0x444>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d04a      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a2d      	ldr	r2, [pc, #180]	; (80086ec <HAL_DMA_Abort+0x448>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d045      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a2c      	ldr	r2, [pc, #176]	; (80086f0 <HAL_DMA_Abort+0x44c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d040      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a2a      	ldr	r2, [pc, #168]	; (80086f4 <HAL_DMA_Abort+0x450>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d03b      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a29      	ldr	r2, [pc, #164]	; (80086f8 <HAL_DMA_Abort+0x454>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d036      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a27      	ldr	r2, [pc, #156]	; (80086fc <HAL_DMA_Abort+0x458>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d031      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a26      	ldr	r2, [pc, #152]	; (8008700 <HAL_DMA_Abort+0x45c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d02c      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a24      	ldr	r2, [pc, #144]	; (8008704 <HAL_DMA_Abort+0x460>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d027      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a23      	ldr	r2, [pc, #140]	; (8008708 <HAL_DMA_Abort+0x464>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d022      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a21      	ldr	r2, [pc, #132]	; (800870c <HAL_DMA_Abort+0x468>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d01d      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a20      	ldr	r2, [pc, #128]	; (8008710 <HAL_DMA_Abort+0x46c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d018      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <HAL_DMA_Abort+0x470>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d013      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <HAL_DMA_Abort+0x474>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00e      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1b      	ldr	r2, [pc, #108]	; (800871c <HAL_DMA_Abort+0x478>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d009      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1a      	ldr	r2, [pc, #104]	; (8008720 <HAL_DMA_Abort+0x47c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d004      	beq.n	80086c6 <HAL_DMA_Abort+0x422>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a18      	ldr	r2, [pc, #96]	; (8008724 <HAL_DMA_Abort+0x480>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d101      	bne.n	80086ca <HAL_DMA_Abort+0x426>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <HAL_DMA_Abort+0x428>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02b      	beq.n	8008728 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086da:	f003 031f 	and.w	r3, r3, #31
 80086de:	223f      	movs	r2, #63	; 0x3f
 80086e0:	409a      	lsls	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	609a      	str	r2, [r3, #8]
 80086e6:	e02a      	b.n	800873e <HAL_DMA_Abort+0x49a>
 80086e8:	40020010 	.word	0x40020010
 80086ec:	40020028 	.word	0x40020028
 80086f0:	40020040 	.word	0x40020040
 80086f4:	40020058 	.word	0x40020058
 80086f8:	40020070 	.word	0x40020070
 80086fc:	40020088 	.word	0x40020088
 8008700:	400200a0 	.word	0x400200a0
 8008704:	400200b8 	.word	0x400200b8
 8008708:	40020410 	.word	0x40020410
 800870c:	40020428 	.word	0x40020428
 8008710:	40020440 	.word	0x40020440
 8008714:	40020458 	.word	0x40020458
 8008718:	40020470 	.word	0x40020470
 800871c:	40020488 	.word	0x40020488
 8008720:	400204a0 	.word	0x400204a0
 8008724:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	2201      	movs	r2, #1
 8008738:	409a      	lsls	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4f      	ldr	r2, [pc, #316]	; (8008880 <HAL_DMA_Abort+0x5dc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d072      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a4d      	ldr	r2, [pc, #308]	; (8008884 <HAL_DMA_Abort+0x5e0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d06d      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a4c      	ldr	r2, [pc, #304]	; (8008888 <HAL_DMA_Abort+0x5e4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d068      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a4a      	ldr	r2, [pc, #296]	; (800888c <HAL_DMA_Abort+0x5e8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d063      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a49      	ldr	r2, [pc, #292]	; (8008890 <HAL_DMA_Abort+0x5ec>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d05e      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a47      	ldr	r2, [pc, #284]	; (8008894 <HAL_DMA_Abort+0x5f0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d059      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a46      	ldr	r2, [pc, #280]	; (8008898 <HAL_DMA_Abort+0x5f4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d054      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a44      	ldr	r2, [pc, #272]	; (800889c <HAL_DMA_Abort+0x5f8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d04f      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a43      	ldr	r2, [pc, #268]	; (80088a0 <HAL_DMA_Abort+0x5fc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d04a      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a41      	ldr	r2, [pc, #260]	; (80088a4 <HAL_DMA_Abort+0x600>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d045      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a40      	ldr	r2, [pc, #256]	; (80088a8 <HAL_DMA_Abort+0x604>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d040      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a3e      	ldr	r2, [pc, #248]	; (80088ac <HAL_DMA_Abort+0x608>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d03b      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3d      	ldr	r2, [pc, #244]	; (80088b0 <HAL_DMA_Abort+0x60c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d036      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a3b      	ldr	r2, [pc, #236]	; (80088b4 <HAL_DMA_Abort+0x610>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d031      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a3a      	ldr	r2, [pc, #232]	; (80088b8 <HAL_DMA_Abort+0x614>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d02c      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a38      	ldr	r2, [pc, #224]	; (80088bc <HAL_DMA_Abort+0x618>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d027      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a37      	ldr	r2, [pc, #220]	; (80088c0 <HAL_DMA_Abort+0x61c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d022      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a35      	ldr	r2, [pc, #212]	; (80088c4 <HAL_DMA_Abort+0x620>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01d      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a34      	ldr	r2, [pc, #208]	; (80088c8 <HAL_DMA_Abort+0x624>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d018      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a32      	ldr	r2, [pc, #200]	; (80088cc <HAL_DMA_Abort+0x628>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d013      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a31      	ldr	r2, [pc, #196]	; (80088d0 <HAL_DMA_Abort+0x62c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00e      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a2f      	ldr	r2, [pc, #188]	; (80088d4 <HAL_DMA_Abort+0x630>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d009      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a2e      	ldr	r2, [pc, #184]	; (80088d8 <HAL_DMA_Abort+0x634>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_DMA_Abort+0x58a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a2c      	ldr	r2, [pc, #176]	; (80088dc <HAL_DMA_Abort+0x638>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d101      	bne.n	8008832 <HAL_DMA_Abort+0x58e>
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <HAL_DMA_Abort+0x590>
 8008832:	2300      	movs	r3, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d015      	beq.n	8008864 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008840:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00c      	beq.n	8008864 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008858:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008862:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40020010 	.word	0x40020010
 8008884:	40020028 	.word	0x40020028
 8008888:	40020040 	.word	0x40020040
 800888c:	40020058 	.word	0x40020058
 8008890:	40020070 	.word	0x40020070
 8008894:	40020088 	.word	0x40020088
 8008898:	400200a0 	.word	0x400200a0
 800889c:	400200b8 	.word	0x400200b8
 80088a0:	40020410 	.word	0x40020410
 80088a4:	40020428 	.word	0x40020428
 80088a8:	40020440 	.word	0x40020440
 80088ac:	40020458 	.word	0x40020458
 80088b0:	40020470 	.word	0x40020470
 80088b4:	40020488 	.word	0x40020488
 80088b8:	400204a0 	.word	0x400204a0
 80088bc:	400204b8 	.word	0x400204b8
 80088c0:	58025408 	.word	0x58025408
 80088c4:	5802541c 	.word	0x5802541c
 80088c8:	58025430 	.word	0x58025430
 80088cc:	58025444 	.word	0x58025444
 80088d0:	58025458 	.word	0x58025458
 80088d4:	5802546c 	.word	0x5802546c
 80088d8:	58025480 	.word	0x58025480
 80088dc:	58025494 	.word	0x58025494

080088e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e237      	b.n	8008d62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d004      	beq.n	8008908 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2280      	movs	r2, #128	; 0x80
 8008902:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e22c      	b.n	8008d62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a5c      	ldr	r2, [pc, #368]	; (8008a80 <HAL_DMA_Abort_IT+0x1a0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d04a      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a5b      	ldr	r2, [pc, #364]	; (8008a84 <HAL_DMA_Abort_IT+0x1a4>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d045      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a59      	ldr	r2, [pc, #356]	; (8008a88 <HAL_DMA_Abort_IT+0x1a8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d040      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <HAL_DMA_Abort_IT+0x1ac>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d03b      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a56      	ldr	r2, [pc, #344]	; (8008a90 <HAL_DMA_Abort_IT+0x1b0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d036      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a55      	ldr	r2, [pc, #340]	; (8008a94 <HAL_DMA_Abort_IT+0x1b4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d031      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a53      	ldr	r2, [pc, #332]	; (8008a98 <HAL_DMA_Abort_IT+0x1b8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d02c      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a52      	ldr	r2, [pc, #328]	; (8008a9c <HAL_DMA_Abort_IT+0x1bc>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d027      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a50      	ldr	r2, [pc, #320]	; (8008aa0 <HAL_DMA_Abort_IT+0x1c0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d022      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a4f      	ldr	r2, [pc, #316]	; (8008aa4 <HAL_DMA_Abort_IT+0x1c4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d01d      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a4d      	ldr	r2, [pc, #308]	; (8008aa8 <HAL_DMA_Abort_IT+0x1c8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d018      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a4c      	ldr	r2, [pc, #304]	; (8008aac <HAL_DMA_Abort_IT+0x1cc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d013      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a4a      	ldr	r2, [pc, #296]	; (8008ab0 <HAL_DMA_Abort_IT+0x1d0>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00e      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a49      	ldr	r2, [pc, #292]	; (8008ab4 <HAL_DMA_Abort_IT+0x1d4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d009      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a47      	ldr	r2, [pc, #284]	; (8008ab8 <HAL_DMA_Abort_IT+0x1d8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d004      	beq.n	80089a8 <HAL_DMA_Abort_IT+0xc8>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a46      	ldr	r2, [pc, #280]	; (8008abc <HAL_DMA_Abort_IT+0x1dc>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d101      	bne.n	80089ac <HAL_DMA_Abort_IT+0xcc>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <HAL_DMA_Abort_IT+0xce>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8086 	beq.w	8008ac0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2204      	movs	r2, #4
 80089b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2f      	ldr	r2, [pc, #188]	; (8008a80 <HAL_DMA_Abort_IT+0x1a0>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d04a      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2e      	ldr	r2, [pc, #184]	; (8008a84 <HAL_DMA_Abort_IT+0x1a4>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d045      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a2c      	ldr	r2, [pc, #176]	; (8008a88 <HAL_DMA_Abort_IT+0x1a8>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d040      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a2b      	ldr	r2, [pc, #172]	; (8008a8c <HAL_DMA_Abort_IT+0x1ac>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d03b      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a29      	ldr	r2, [pc, #164]	; (8008a90 <HAL_DMA_Abort_IT+0x1b0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d036      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a28      	ldr	r2, [pc, #160]	; (8008a94 <HAL_DMA_Abort_IT+0x1b4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d031      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a26      	ldr	r2, [pc, #152]	; (8008a98 <HAL_DMA_Abort_IT+0x1b8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d02c      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a25      	ldr	r2, [pc, #148]	; (8008a9c <HAL_DMA_Abort_IT+0x1bc>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d027      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a23      	ldr	r2, [pc, #140]	; (8008aa0 <HAL_DMA_Abort_IT+0x1c0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d022      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a22      	ldr	r2, [pc, #136]	; (8008aa4 <HAL_DMA_Abort_IT+0x1c4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d01d      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a20      	ldr	r2, [pc, #128]	; (8008aa8 <HAL_DMA_Abort_IT+0x1c8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d018      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a1f      	ldr	r2, [pc, #124]	; (8008aac <HAL_DMA_Abort_IT+0x1cc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d013      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1d      	ldr	r2, [pc, #116]	; (8008ab0 <HAL_DMA_Abort_IT+0x1d0>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00e      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a1c      	ldr	r2, [pc, #112]	; (8008ab4 <HAL_DMA_Abort_IT+0x1d4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d009      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a1a      	ldr	r2, [pc, #104]	; (8008ab8 <HAL_DMA_Abort_IT+0x1d8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d004      	beq.n	8008a5c <HAL_DMA_Abort_IT+0x17c>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a19      	ldr	r2, [pc, #100]	; (8008abc <HAL_DMA_Abort_IT+0x1dc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d108      	bne.n	8008a6e <HAL_DMA_Abort_IT+0x18e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0201 	bic.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	e178      	b.n	8008d60 <HAL_DMA_Abort_IT+0x480>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0201 	bic.w	r2, r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e16f      	b.n	8008d60 <HAL_DMA_Abort_IT+0x480>
 8008a80:	40020010 	.word	0x40020010
 8008a84:	40020028 	.word	0x40020028
 8008a88:	40020040 	.word	0x40020040
 8008a8c:	40020058 	.word	0x40020058
 8008a90:	40020070 	.word	0x40020070
 8008a94:	40020088 	.word	0x40020088
 8008a98:	400200a0 	.word	0x400200a0
 8008a9c:	400200b8 	.word	0x400200b8
 8008aa0:	40020410 	.word	0x40020410
 8008aa4:	40020428 	.word	0x40020428
 8008aa8:	40020440 	.word	0x40020440
 8008aac:	40020458 	.word	0x40020458
 8008ab0:	40020470 	.word	0x40020470
 8008ab4:	40020488 	.word	0x40020488
 8008ab8:	400204a0 	.word	0x400204a0
 8008abc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 020e 	bic.w	r2, r2, #14
 8008ace:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a6c      	ldr	r2, [pc, #432]	; (8008c88 <HAL_DMA_Abort_IT+0x3a8>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d04a      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a6b      	ldr	r2, [pc, #428]	; (8008c8c <HAL_DMA_Abort_IT+0x3ac>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d045      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a69      	ldr	r2, [pc, #420]	; (8008c90 <HAL_DMA_Abort_IT+0x3b0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d040      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a68      	ldr	r2, [pc, #416]	; (8008c94 <HAL_DMA_Abort_IT+0x3b4>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d03b      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a66      	ldr	r2, [pc, #408]	; (8008c98 <HAL_DMA_Abort_IT+0x3b8>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d036      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a65      	ldr	r2, [pc, #404]	; (8008c9c <HAL_DMA_Abort_IT+0x3bc>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d031      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a63      	ldr	r2, [pc, #396]	; (8008ca0 <HAL_DMA_Abort_IT+0x3c0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d02c      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a62      	ldr	r2, [pc, #392]	; (8008ca4 <HAL_DMA_Abort_IT+0x3c4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d027      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a60      	ldr	r2, [pc, #384]	; (8008ca8 <HAL_DMA_Abort_IT+0x3c8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d022      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a5f      	ldr	r2, [pc, #380]	; (8008cac <HAL_DMA_Abort_IT+0x3cc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d01d      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a5d      	ldr	r2, [pc, #372]	; (8008cb0 <HAL_DMA_Abort_IT+0x3d0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d018      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a5c      	ldr	r2, [pc, #368]	; (8008cb4 <HAL_DMA_Abort_IT+0x3d4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a5a      	ldr	r2, [pc, #360]	; (8008cb8 <HAL_DMA_Abort_IT+0x3d8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a59      	ldr	r2, [pc, #356]	; (8008cbc <HAL_DMA_Abort_IT+0x3dc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a57      	ldr	r2, [pc, #348]	; (8008cc0 <HAL_DMA_Abort_IT+0x3e0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_DMA_Abort_IT+0x290>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a56      	ldr	r2, [pc, #344]	; (8008cc4 <HAL_DMA_Abort_IT+0x3e4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d108      	bne.n	8008b82 <HAL_DMA_Abort_IT+0x2a2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0201 	bic.w	r2, r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e007      	b.n	8008b92 <HAL_DMA_Abort_IT+0x2b2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0201 	bic.w	r2, r2, #1
 8008b90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a3c      	ldr	r2, [pc, #240]	; (8008c88 <HAL_DMA_Abort_IT+0x3a8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d072      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a3a      	ldr	r2, [pc, #232]	; (8008c8c <HAL_DMA_Abort_IT+0x3ac>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d06d      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a39      	ldr	r2, [pc, #228]	; (8008c90 <HAL_DMA_Abort_IT+0x3b0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d068      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a37      	ldr	r2, [pc, #220]	; (8008c94 <HAL_DMA_Abort_IT+0x3b4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d063      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a36      	ldr	r2, [pc, #216]	; (8008c98 <HAL_DMA_Abort_IT+0x3b8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d05e      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a34      	ldr	r2, [pc, #208]	; (8008c9c <HAL_DMA_Abort_IT+0x3bc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d059      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a33      	ldr	r2, [pc, #204]	; (8008ca0 <HAL_DMA_Abort_IT+0x3c0>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d054      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a31      	ldr	r2, [pc, #196]	; (8008ca4 <HAL_DMA_Abort_IT+0x3c4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d04f      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a30      	ldr	r2, [pc, #192]	; (8008ca8 <HAL_DMA_Abort_IT+0x3c8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d04a      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a2e      	ldr	r2, [pc, #184]	; (8008cac <HAL_DMA_Abort_IT+0x3cc>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d045      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2d      	ldr	r2, [pc, #180]	; (8008cb0 <HAL_DMA_Abort_IT+0x3d0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d040      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a2b      	ldr	r2, [pc, #172]	; (8008cb4 <HAL_DMA_Abort_IT+0x3d4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d03b      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a2a      	ldr	r2, [pc, #168]	; (8008cb8 <HAL_DMA_Abort_IT+0x3d8>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d036      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a28      	ldr	r2, [pc, #160]	; (8008cbc <HAL_DMA_Abort_IT+0x3dc>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d031      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a27      	ldr	r2, [pc, #156]	; (8008cc0 <HAL_DMA_Abort_IT+0x3e0>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d02c      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a25      	ldr	r2, [pc, #148]	; (8008cc4 <HAL_DMA_Abort_IT+0x3e4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d027      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a24      	ldr	r2, [pc, #144]	; (8008cc8 <HAL_DMA_Abort_IT+0x3e8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d022      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a22      	ldr	r2, [pc, #136]	; (8008ccc <HAL_DMA_Abort_IT+0x3ec>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d01d      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a21      	ldr	r2, [pc, #132]	; (8008cd0 <HAL_DMA_Abort_IT+0x3f0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d018      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1f      	ldr	r2, [pc, #124]	; (8008cd4 <HAL_DMA_Abort_IT+0x3f4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d013      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1e      	ldr	r2, [pc, #120]	; (8008cd8 <HAL_DMA_Abort_IT+0x3f8>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00e      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1c      	ldr	r2, [pc, #112]	; (8008cdc <HAL_DMA_Abort_IT+0x3fc>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d009      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a1b      	ldr	r2, [pc, #108]	; (8008ce0 <HAL_DMA_Abort_IT+0x400>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d004      	beq.n	8008c82 <HAL_DMA_Abort_IT+0x3a2>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a19      	ldr	r2, [pc, #100]	; (8008ce4 <HAL_DMA_Abort_IT+0x404>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d132      	bne.n	8008ce8 <HAL_DMA_Abort_IT+0x408>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e031      	b.n	8008cea <HAL_DMA_Abort_IT+0x40a>
 8008c86:	bf00      	nop
 8008c88:	40020010 	.word	0x40020010
 8008c8c:	40020028 	.word	0x40020028
 8008c90:	40020040 	.word	0x40020040
 8008c94:	40020058 	.word	0x40020058
 8008c98:	40020070 	.word	0x40020070
 8008c9c:	40020088 	.word	0x40020088
 8008ca0:	400200a0 	.word	0x400200a0
 8008ca4:	400200b8 	.word	0x400200b8
 8008ca8:	40020410 	.word	0x40020410
 8008cac:	40020428 	.word	0x40020428
 8008cb0:	40020440 	.word	0x40020440
 8008cb4:	40020458 	.word	0x40020458
 8008cb8:	40020470 	.word	0x40020470
 8008cbc:	40020488 	.word	0x40020488
 8008cc0:	400204a0 	.word	0x400204a0
 8008cc4:	400204b8 	.word	0x400204b8
 8008cc8:	58025408 	.word	0x58025408
 8008ccc:	5802541c 	.word	0x5802541c
 8008cd0:	58025430 	.word	0x58025430
 8008cd4:	58025444 	.word	0x58025444
 8008cd8:	58025458 	.word	0x58025458
 8008cdc:	5802546c 	.word	0x5802546c
 8008ce0:	58025480 	.word	0x58025480
 8008ce4:	58025494 	.word	0x58025494
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d028      	beq.n	8008d40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d08:	f003 031f 	and.w	r3, r3, #31
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	409a      	lsls	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d003      	beq.n	8008d60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop

08008d6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d78:	4b67      	ldr	r3, [pc, #412]	; (8008f18 <HAL_DMA_IRQHandler+0x1ac>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a67      	ldr	r2, [pc, #412]	; (8008f1c <HAL_DMA_IRQHandler+0x1b0>)
 8008d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d82:	0a9b      	lsrs	r3, r3, #10
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a5f      	ldr	r2, [pc, #380]	; (8008f20 <HAL_DMA_IRQHandler+0x1b4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d04a      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a5d      	ldr	r2, [pc, #372]	; (8008f24 <HAL_DMA_IRQHandler+0x1b8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d045      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a5c      	ldr	r2, [pc, #368]	; (8008f28 <HAL_DMA_IRQHandler+0x1bc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d040      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a5a      	ldr	r2, [pc, #360]	; (8008f2c <HAL_DMA_IRQHandler+0x1c0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d03b      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a59      	ldr	r2, [pc, #356]	; (8008f30 <HAL_DMA_IRQHandler+0x1c4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d036      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a57      	ldr	r2, [pc, #348]	; (8008f34 <HAL_DMA_IRQHandler+0x1c8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d031      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a56      	ldr	r2, [pc, #344]	; (8008f38 <HAL_DMA_IRQHandler+0x1cc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d02c      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a54      	ldr	r2, [pc, #336]	; (8008f3c <HAL_DMA_IRQHandler+0x1d0>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d027      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a53      	ldr	r2, [pc, #332]	; (8008f40 <HAL_DMA_IRQHandler+0x1d4>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d022      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a51      	ldr	r2, [pc, #324]	; (8008f44 <HAL_DMA_IRQHandler+0x1d8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d01d      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a50      	ldr	r2, [pc, #320]	; (8008f48 <HAL_DMA_IRQHandler+0x1dc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d018      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a4e      	ldr	r2, [pc, #312]	; (8008f4c <HAL_DMA_IRQHandler+0x1e0>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a4d      	ldr	r2, [pc, #308]	; (8008f50 <HAL_DMA_IRQHandler+0x1e4>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a4b      	ldr	r2, [pc, #300]	; (8008f54 <HAL_DMA_IRQHandler+0x1e8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d009      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a4a      	ldr	r2, [pc, #296]	; (8008f58 <HAL_DMA_IRQHandler+0x1ec>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xd2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a48      	ldr	r2, [pc, #288]	; (8008f5c <HAL_DMA_IRQHandler+0x1f0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d101      	bne.n	8008e42 <HAL_DMA_IRQHandler+0xd6>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <HAL_DMA_IRQHandler+0xd8>
 8008e42:	2300      	movs	r3, #0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 842b 	beq.w	80096a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2208      	movs	r2, #8
 8008e54:	409a      	lsls	r2, r3
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80a2 	beq.w	8008fa4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a2e      	ldr	r2, [pc, #184]	; (8008f20 <HAL_DMA_IRQHandler+0x1b4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d04a      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a2d      	ldr	r2, [pc, #180]	; (8008f24 <HAL_DMA_IRQHandler+0x1b8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d045      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a2b      	ldr	r2, [pc, #172]	; (8008f28 <HAL_DMA_IRQHandler+0x1bc>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d040      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a2a      	ldr	r2, [pc, #168]	; (8008f2c <HAL_DMA_IRQHandler+0x1c0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d03b      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a28      	ldr	r2, [pc, #160]	; (8008f30 <HAL_DMA_IRQHandler+0x1c4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d036      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a27      	ldr	r2, [pc, #156]	; (8008f34 <HAL_DMA_IRQHandler+0x1c8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d031      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a25      	ldr	r2, [pc, #148]	; (8008f38 <HAL_DMA_IRQHandler+0x1cc>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d02c      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a24      	ldr	r2, [pc, #144]	; (8008f3c <HAL_DMA_IRQHandler+0x1d0>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d027      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a22      	ldr	r2, [pc, #136]	; (8008f40 <HAL_DMA_IRQHandler+0x1d4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d022      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a21      	ldr	r2, [pc, #132]	; (8008f44 <HAL_DMA_IRQHandler+0x1d8>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d01d      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <HAL_DMA_IRQHandler+0x1dc>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d018      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	; (8008f4c <HAL_DMA_IRQHandler+0x1e0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d013      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1c      	ldr	r2, [pc, #112]	; (8008f50 <HAL_DMA_IRQHandler+0x1e4>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00e      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1b      	ldr	r2, [pc, #108]	; (8008f54 <HAL_DMA_IRQHandler+0x1e8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d009      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a19      	ldr	r2, [pc, #100]	; (8008f58 <HAL_DMA_IRQHandler+0x1ec>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x194>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <HAL_DMA_IRQHandler+0x1f0>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d12f      	bne.n	8008f60 <HAL_DMA_IRQHandler+0x1f4>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bf14      	ite	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	2300      	moveq	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	e02e      	b.n	8008f74 <HAL_DMA_IRQHandler+0x208>
 8008f16:	bf00      	nop
 8008f18:	24000230 	.word	0x24000230
 8008f1c:	1b4e81b5 	.word	0x1b4e81b5
 8008f20:	40020010 	.word	0x40020010
 8008f24:	40020028 	.word	0x40020028
 8008f28:	40020040 	.word	0x40020040
 8008f2c:	40020058 	.word	0x40020058
 8008f30:	40020070 	.word	0x40020070
 8008f34:	40020088 	.word	0x40020088
 8008f38:	400200a0 	.word	0x400200a0
 8008f3c:	400200b8 	.word	0x400200b8
 8008f40:	40020410 	.word	0x40020410
 8008f44:	40020428 	.word	0x40020428
 8008f48:	40020440 	.word	0x40020440
 8008f4c:	40020458 	.word	0x40020458
 8008f50:	40020470 	.word	0x40020470
 8008f54:	40020488 	.word	0x40020488
 8008f58:	400204a0 	.word	0x400204a0
 8008f5c:	400204b8 	.word	0x400204b8
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bf14      	ite	ne
 8008f6e:	2301      	movne	r3, #1
 8008f70:	2300      	moveq	r3, #0
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d015      	beq.n	8008fa4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0204 	bic.w	r2, r2, #4
 8008f86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	2208      	movs	r2, #8
 8008f92:	409a      	lsls	r2, r3
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9c:	f043 0201 	orr.w	r2, r3, #1
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d06e      	beq.n	8009098 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a69      	ldr	r2, [pc, #420]	; (8009164 <HAL_DMA_IRQHandler+0x3f8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d04a      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a67      	ldr	r2, [pc, #412]	; (8009168 <HAL_DMA_IRQHandler+0x3fc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d045      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a66      	ldr	r2, [pc, #408]	; (800916c <HAL_DMA_IRQHandler+0x400>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d040      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a64      	ldr	r2, [pc, #400]	; (8009170 <HAL_DMA_IRQHandler+0x404>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d03b      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a63      	ldr	r2, [pc, #396]	; (8009174 <HAL_DMA_IRQHandler+0x408>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d036      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a61      	ldr	r2, [pc, #388]	; (8009178 <HAL_DMA_IRQHandler+0x40c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d031      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a60      	ldr	r2, [pc, #384]	; (800917c <HAL_DMA_IRQHandler+0x410>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d02c      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a5e      	ldr	r2, [pc, #376]	; (8009180 <HAL_DMA_IRQHandler+0x414>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d027      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a5d      	ldr	r2, [pc, #372]	; (8009184 <HAL_DMA_IRQHandler+0x418>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d022      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a5b      	ldr	r2, [pc, #364]	; (8009188 <HAL_DMA_IRQHandler+0x41c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d01d      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a5a      	ldr	r2, [pc, #360]	; (800918c <HAL_DMA_IRQHandler+0x420>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d018      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a58      	ldr	r2, [pc, #352]	; (8009190 <HAL_DMA_IRQHandler+0x424>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a57      	ldr	r2, [pc, #348]	; (8009194 <HAL_DMA_IRQHandler+0x428>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00e      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a55      	ldr	r2, [pc, #340]	; (8009198 <HAL_DMA_IRQHandler+0x42c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d009      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a54      	ldr	r2, [pc, #336]	; (800919c <HAL_DMA_IRQHandler+0x430>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d004      	beq.n	800905a <HAL_DMA_IRQHandler+0x2ee>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a52      	ldr	r2, [pc, #328]	; (80091a0 <HAL_DMA_IRQHandler+0x434>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d10a      	bne.n	8009070 <HAL_DMA_IRQHandler+0x304>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009064:	2b00      	cmp	r3, #0
 8009066:	bf14      	ite	ne
 8009068:	2301      	movne	r3, #1
 800906a:	2300      	moveq	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e003      	b.n	8009078 <HAL_DMA_IRQHandler+0x30c>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00d      	beq.n	8009098 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009080:	f003 031f 	and.w	r3, r3, #31
 8009084:	2201      	movs	r2, #1
 8009086:	409a      	lsls	r2, r3
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009090:	f043 0202 	orr.w	r2, r3, #2
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2204      	movs	r2, #4
 80090a2:	409a      	lsls	r2, r3
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	4013      	ands	r3, r2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 808f 	beq.w	80091cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a2c      	ldr	r2, [pc, #176]	; (8009164 <HAL_DMA_IRQHandler+0x3f8>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d04a      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a2a      	ldr	r2, [pc, #168]	; (8009168 <HAL_DMA_IRQHandler+0x3fc>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d045      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a29      	ldr	r2, [pc, #164]	; (800916c <HAL_DMA_IRQHandler+0x400>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d040      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a27      	ldr	r2, [pc, #156]	; (8009170 <HAL_DMA_IRQHandler+0x404>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d03b      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a26      	ldr	r2, [pc, #152]	; (8009174 <HAL_DMA_IRQHandler+0x408>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d036      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a24      	ldr	r2, [pc, #144]	; (8009178 <HAL_DMA_IRQHandler+0x40c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d031      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a23      	ldr	r2, [pc, #140]	; (800917c <HAL_DMA_IRQHandler+0x410>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d02c      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a21      	ldr	r2, [pc, #132]	; (8009180 <HAL_DMA_IRQHandler+0x414>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d027      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a20      	ldr	r2, [pc, #128]	; (8009184 <HAL_DMA_IRQHandler+0x418>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d022      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1e      	ldr	r2, [pc, #120]	; (8009188 <HAL_DMA_IRQHandler+0x41c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d01d      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a1d      	ldr	r2, [pc, #116]	; (800918c <HAL_DMA_IRQHandler+0x420>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d018      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <HAL_DMA_IRQHandler+0x424>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d013      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <HAL_DMA_IRQHandler+0x428>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00e      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a18      	ldr	r2, [pc, #96]	; (8009198 <HAL_DMA_IRQHandler+0x42c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d009      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <HAL_DMA_IRQHandler+0x430>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d004      	beq.n	800914e <HAL_DMA_IRQHandler+0x3e2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <HAL_DMA_IRQHandler+0x434>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d12a      	bne.n	80091a4 <HAL_DMA_IRQHandler+0x438>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	bf14      	ite	ne
 800915c:	2301      	movne	r3, #1
 800915e:	2300      	moveq	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	e023      	b.n	80091ac <HAL_DMA_IRQHandler+0x440>
 8009164:	40020010 	.word	0x40020010
 8009168:	40020028 	.word	0x40020028
 800916c:	40020040 	.word	0x40020040
 8009170:	40020058 	.word	0x40020058
 8009174:	40020070 	.word	0x40020070
 8009178:	40020088 	.word	0x40020088
 800917c:	400200a0 	.word	0x400200a0
 8009180:	400200b8 	.word	0x400200b8
 8009184:	40020410 	.word	0x40020410
 8009188:	40020428 	.word	0x40020428
 800918c:	40020440 	.word	0x40020440
 8009190:	40020458 	.word	0x40020458
 8009194:	40020470 	.word	0x40020470
 8009198:	40020488 	.word	0x40020488
 800919c:	400204a0 	.word	0x400204a0
 80091a0:	400204b8 	.word	0x400204b8
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00d      	beq.n	80091cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b4:	f003 031f 	and.w	r3, r3, #31
 80091b8:	2204      	movs	r2, #4
 80091ba:	409a      	lsls	r2, r3
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c4:	f043 0204 	orr.w	r2, r3, #4
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d0:	f003 031f 	and.w	r3, r3, #31
 80091d4:	2210      	movs	r2, #16
 80091d6:	409a      	lsls	r2, r3
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	4013      	ands	r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80a6 	beq.w	800932e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a85      	ldr	r2, [pc, #532]	; (80093fc <HAL_DMA_IRQHandler+0x690>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d04a      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a83      	ldr	r2, [pc, #524]	; (8009400 <HAL_DMA_IRQHandler+0x694>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d045      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a82      	ldr	r2, [pc, #520]	; (8009404 <HAL_DMA_IRQHandler+0x698>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d040      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a80      	ldr	r2, [pc, #512]	; (8009408 <HAL_DMA_IRQHandler+0x69c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d03b      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a7f      	ldr	r2, [pc, #508]	; (800940c <HAL_DMA_IRQHandler+0x6a0>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d036      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a7d      	ldr	r2, [pc, #500]	; (8009410 <HAL_DMA_IRQHandler+0x6a4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d031      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a7c      	ldr	r2, [pc, #496]	; (8009414 <HAL_DMA_IRQHandler+0x6a8>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d02c      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a7a      	ldr	r2, [pc, #488]	; (8009418 <HAL_DMA_IRQHandler+0x6ac>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d027      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a79      	ldr	r2, [pc, #484]	; (800941c <HAL_DMA_IRQHandler+0x6b0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d022      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a77      	ldr	r2, [pc, #476]	; (8009420 <HAL_DMA_IRQHandler+0x6b4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d01d      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a76      	ldr	r2, [pc, #472]	; (8009424 <HAL_DMA_IRQHandler+0x6b8>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d018      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a74      	ldr	r2, [pc, #464]	; (8009428 <HAL_DMA_IRQHandler+0x6bc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d013      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a73      	ldr	r2, [pc, #460]	; (800942c <HAL_DMA_IRQHandler+0x6c0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00e      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a71      	ldr	r2, [pc, #452]	; (8009430 <HAL_DMA_IRQHandler+0x6c4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d009      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a70      	ldr	r2, [pc, #448]	; (8009434 <HAL_DMA_IRQHandler+0x6c8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d004      	beq.n	8009282 <HAL_DMA_IRQHandler+0x516>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a6e      	ldr	r2, [pc, #440]	; (8009438 <HAL_DMA_IRQHandler+0x6cc>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d10a      	bne.n	8009298 <HAL_DMA_IRQHandler+0x52c>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b00      	cmp	r3, #0
 800928e:	bf14      	ite	ne
 8009290:	2301      	movne	r3, #1
 8009292:	2300      	moveq	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	e009      	b.n	80092ac <HAL_DMA_IRQHandler+0x540>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bf14      	ite	ne
 80092a6:	2301      	movne	r3, #1
 80092a8:	2300      	moveq	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d03e      	beq.n	800932e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	2210      	movs	r2, #16
 80092ba:	409a      	lsls	r2, r3
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d018      	beq.n	8009300 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d108      	bne.n	80092ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d024      	beq.n	800932e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
 80092ec:	e01f      	b.n	800932e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01b      	beq.n	800932e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
 80092fe:	e016      	b.n	800932e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930a:	2b00      	cmp	r3, #0
 800930c:	d107      	bne.n	800931e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0208 	bic.w	r2, r2, #8
 800931c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009332:	f003 031f 	and.w	r3, r3, #31
 8009336:	2220      	movs	r2, #32
 8009338:	409a      	lsls	r2, r3
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8110 	beq.w	8009564 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a2c      	ldr	r2, [pc, #176]	; (80093fc <HAL_DMA_IRQHandler+0x690>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d04a      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a2b      	ldr	r2, [pc, #172]	; (8009400 <HAL_DMA_IRQHandler+0x694>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d045      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a29      	ldr	r2, [pc, #164]	; (8009404 <HAL_DMA_IRQHandler+0x698>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d040      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a28      	ldr	r2, [pc, #160]	; (8009408 <HAL_DMA_IRQHandler+0x69c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d03b      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a26      	ldr	r2, [pc, #152]	; (800940c <HAL_DMA_IRQHandler+0x6a0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d036      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a25      	ldr	r2, [pc, #148]	; (8009410 <HAL_DMA_IRQHandler+0x6a4>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d031      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a23      	ldr	r2, [pc, #140]	; (8009414 <HAL_DMA_IRQHandler+0x6a8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d02c      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a22      	ldr	r2, [pc, #136]	; (8009418 <HAL_DMA_IRQHandler+0x6ac>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d027      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a20      	ldr	r2, [pc, #128]	; (800941c <HAL_DMA_IRQHandler+0x6b0>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d022      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1f      	ldr	r2, [pc, #124]	; (8009420 <HAL_DMA_IRQHandler+0x6b4>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d01d      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1d      	ldr	r2, [pc, #116]	; (8009424 <HAL_DMA_IRQHandler+0x6b8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d018      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <HAL_DMA_IRQHandler+0x6bc>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d013      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a1a      	ldr	r2, [pc, #104]	; (800942c <HAL_DMA_IRQHandler+0x6c0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d00e      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a19      	ldr	r2, [pc, #100]	; (8009430 <HAL_DMA_IRQHandler+0x6c4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d009      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a17      	ldr	r2, [pc, #92]	; (8009434 <HAL_DMA_IRQHandler+0x6c8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d004      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x678>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a16      	ldr	r2, [pc, #88]	; (8009438 <HAL_DMA_IRQHandler+0x6cc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d12b      	bne.n	800943c <HAL_DMA_IRQHandler+0x6d0>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2301      	movne	r3, #1
 80093f4:	2300      	moveq	r3, #0
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	e02a      	b.n	8009450 <HAL_DMA_IRQHandler+0x6e4>
 80093fa:	bf00      	nop
 80093fc:	40020010 	.word	0x40020010
 8009400:	40020028 	.word	0x40020028
 8009404:	40020040 	.word	0x40020040
 8009408:	40020058 	.word	0x40020058
 800940c:	40020070 	.word	0x40020070
 8009410:	40020088 	.word	0x40020088
 8009414:	400200a0 	.word	0x400200a0
 8009418:	400200b8 	.word	0x400200b8
 800941c:	40020410 	.word	0x40020410
 8009420:	40020428 	.word	0x40020428
 8009424:	40020440 	.word	0x40020440
 8009428:	40020458 	.word	0x40020458
 800942c:	40020470 	.word	0x40020470
 8009430:	40020488 	.word	0x40020488
 8009434:	400204a0 	.word	0x400204a0
 8009438:	400204b8 	.word	0x400204b8
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b00      	cmp	r3, #0
 8009448:	bf14      	ite	ne
 800944a:	2301      	movne	r3, #1
 800944c:	2300      	moveq	r3, #0
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8087 	beq.w	8009564 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945a:	f003 031f 	and.w	r3, r3, #31
 800945e:	2220      	movs	r2, #32
 8009460:	409a      	lsls	r2, r3
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b04      	cmp	r3, #4
 8009470:	d139      	bne.n	80094e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0216 	bic.w	r2, r2, #22
 8009480:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	695a      	ldr	r2, [r3, #20]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009490:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <HAL_DMA_IRQHandler+0x736>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d007      	beq.n	80094b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 0208 	bic.w	r2, r2, #8
 80094b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b6:	f003 031f 	and.w	r3, r3, #31
 80094ba:	223f      	movs	r2, #63	; 0x3f
 80094bc:	409a      	lsls	r2, r3
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 834a 	beq.w	8009b70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
          }
          return;
 80094e4:	e344      	b.n	8009b70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d018      	beq.n	8009526 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d108      	bne.n	8009514 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	2b00      	cmp	r3, #0
 8009508:	d02c      	beq.n	8009564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	4798      	blx	r3
 8009512:	e027      	b.n	8009564 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d023      	beq.n	8009564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	4798      	blx	r3
 8009524:	e01e      	b.n	8009564 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10f      	bne.n	8009554 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0210 	bic.w	r2, r2, #16
 8009542:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 8306 	beq.w	8009b7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8088 	beq.w	800968c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2204      	movs	r2, #4
 8009580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a7a      	ldr	r2, [pc, #488]	; (8009774 <HAL_DMA_IRQHandler+0xa08>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d04a      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a79      	ldr	r2, [pc, #484]	; (8009778 <HAL_DMA_IRQHandler+0xa0c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d045      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a77      	ldr	r2, [pc, #476]	; (800977c <HAL_DMA_IRQHandler+0xa10>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d040      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a76      	ldr	r2, [pc, #472]	; (8009780 <HAL_DMA_IRQHandler+0xa14>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d03b      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a74      	ldr	r2, [pc, #464]	; (8009784 <HAL_DMA_IRQHandler+0xa18>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d036      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a73      	ldr	r2, [pc, #460]	; (8009788 <HAL_DMA_IRQHandler+0xa1c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d031      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a71      	ldr	r2, [pc, #452]	; (800978c <HAL_DMA_IRQHandler+0xa20>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d02c      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a70      	ldr	r2, [pc, #448]	; (8009790 <HAL_DMA_IRQHandler+0xa24>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d027      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a6e      	ldr	r2, [pc, #440]	; (8009794 <HAL_DMA_IRQHandler+0xa28>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d022      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a6d      	ldr	r2, [pc, #436]	; (8009798 <HAL_DMA_IRQHandler+0xa2c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d01d      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a6b      	ldr	r2, [pc, #428]	; (800979c <HAL_DMA_IRQHandler+0xa30>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d018      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a6a      	ldr	r2, [pc, #424]	; (80097a0 <HAL_DMA_IRQHandler+0xa34>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d013      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a68      	ldr	r2, [pc, #416]	; (80097a4 <HAL_DMA_IRQHandler+0xa38>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00e      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a67      	ldr	r2, [pc, #412]	; (80097a8 <HAL_DMA_IRQHandler+0xa3c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d009      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a65      	ldr	r2, [pc, #404]	; (80097ac <HAL_DMA_IRQHandler+0xa40>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d004      	beq.n	8009624 <HAL_DMA_IRQHandler+0x8b8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a64      	ldr	r2, [pc, #400]	; (80097b0 <HAL_DMA_IRQHandler+0xa44>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d108      	bne.n	8009636 <HAL_DMA_IRQHandler+0x8ca>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e007      	b.n	8009646 <HAL_DMA_IRQHandler+0x8da>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964e:	429a      	cmp	r2, r3
 8009650:	d307      	bcc.n	8009662 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f2      	bne.n	8009646 <HAL_DMA_IRQHandler+0x8da>
 8009660:	e000      	b.n	8009664 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009662:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2203      	movs	r2, #3
 8009676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800967a:	e003      	b.n	8009684 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8272 	beq.w	8009b7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	e26c      	b.n	8009b7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a43      	ldr	r2, [pc, #268]	; (80097b4 <HAL_DMA_IRQHandler+0xa48>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d022      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a42      	ldr	r2, [pc, #264]	; (80097b8 <HAL_DMA_IRQHandler+0xa4c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d01d      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a40      	ldr	r2, [pc, #256]	; (80097bc <HAL_DMA_IRQHandler+0xa50>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d018      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a3f      	ldr	r2, [pc, #252]	; (80097c0 <HAL_DMA_IRQHandler+0xa54>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d013      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a3d      	ldr	r2, [pc, #244]	; (80097c4 <HAL_DMA_IRQHandler+0xa58>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00e      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a3c      	ldr	r2, [pc, #240]	; (80097c8 <HAL_DMA_IRQHandler+0xa5c>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d009      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a3a      	ldr	r2, [pc, #232]	; (80097cc <HAL_DMA_IRQHandler+0xa60>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d004      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x984>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a39      	ldr	r2, [pc, #228]	; (80097d0 <HAL_DMA_IRQHandler+0xa64>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d101      	bne.n	80096f4 <HAL_DMA_IRQHandler+0x988>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e000      	b.n	80096f6 <HAL_DMA_IRQHandler+0x98a>
 80096f4:	2300      	movs	r3, #0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 823f 	beq.w	8009b7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009708:	f003 031f 	and.w	r3, r3, #31
 800970c:	2204      	movs	r2, #4
 800970e:	409a      	lsls	r2, r3
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	4013      	ands	r3, r2
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 80cd 	beq.w	80098b4 <HAL_DMA_IRQHandler+0xb48>
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 80c7 	beq.w	80098b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972a:	f003 031f 	and.w	r3, r3, #31
 800972e:	2204      	movs	r2, #4
 8009730:	409a      	lsls	r2, r3
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d049      	beq.n	80097d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d109      	bne.n	800975e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 8210 	beq.w	8009b74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800975c:	e20a      	b.n	8009b74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 8206 	beq.w	8009b74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009770:	e200      	b.n	8009b74 <HAL_DMA_IRQHandler+0xe08>
 8009772:	bf00      	nop
 8009774:	40020010 	.word	0x40020010
 8009778:	40020028 	.word	0x40020028
 800977c:	40020040 	.word	0x40020040
 8009780:	40020058 	.word	0x40020058
 8009784:	40020070 	.word	0x40020070
 8009788:	40020088 	.word	0x40020088
 800978c:	400200a0 	.word	0x400200a0
 8009790:	400200b8 	.word	0x400200b8
 8009794:	40020410 	.word	0x40020410
 8009798:	40020428 	.word	0x40020428
 800979c:	40020440 	.word	0x40020440
 80097a0:	40020458 	.word	0x40020458
 80097a4:	40020470 	.word	0x40020470
 80097a8:	40020488 	.word	0x40020488
 80097ac:	400204a0 	.word	0x400204a0
 80097b0:	400204b8 	.word	0x400204b8
 80097b4:	58025408 	.word	0x58025408
 80097b8:	5802541c 	.word	0x5802541c
 80097bc:	58025430 	.word	0x58025430
 80097c0:	58025444 	.word	0x58025444
 80097c4:	58025458 	.word	0x58025458
 80097c8:	5802546c 	.word	0x5802546c
 80097cc:	58025480 	.word	0x58025480
 80097d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d160      	bne.n	80098a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a7f      	ldr	r2, [pc, #508]	; (80099e0 <HAL_DMA_IRQHandler+0xc74>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d04a      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a7d      	ldr	r2, [pc, #500]	; (80099e4 <HAL_DMA_IRQHandler+0xc78>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d045      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a7c      	ldr	r2, [pc, #496]	; (80099e8 <HAL_DMA_IRQHandler+0xc7c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d040      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a7a      	ldr	r2, [pc, #488]	; (80099ec <HAL_DMA_IRQHandler+0xc80>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d03b      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a79      	ldr	r2, [pc, #484]	; (80099f0 <HAL_DMA_IRQHandler+0xc84>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d036      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a77      	ldr	r2, [pc, #476]	; (80099f4 <HAL_DMA_IRQHandler+0xc88>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d031      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a76      	ldr	r2, [pc, #472]	; (80099f8 <HAL_DMA_IRQHandler+0xc8c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d02c      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a74      	ldr	r2, [pc, #464]	; (80099fc <HAL_DMA_IRQHandler+0xc90>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d027      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a73      	ldr	r2, [pc, #460]	; (8009a00 <HAL_DMA_IRQHandler+0xc94>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d022      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a71      	ldr	r2, [pc, #452]	; (8009a04 <HAL_DMA_IRQHandler+0xc98>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d01d      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a70      	ldr	r2, [pc, #448]	; (8009a08 <HAL_DMA_IRQHandler+0xc9c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d018      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6e      	ldr	r2, [pc, #440]	; (8009a0c <HAL_DMA_IRQHandler+0xca0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a6d      	ldr	r2, [pc, #436]	; (8009a10 <HAL_DMA_IRQHandler+0xca4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00e      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a6b      	ldr	r2, [pc, #428]	; (8009a14 <HAL_DMA_IRQHandler+0xca8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d009      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a6a      	ldr	r2, [pc, #424]	; (8009a18 <HAL_DMA_IRQHandler+0xcac>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d004      	beq.n	800987e <HAL_DMA_IRQHandler+0xb12>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a68      	ldr	r2, [pc, #416]	; (8009a1c <HAL_DMA_IRQHandler+0xcb0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d108      	bne.n	8009890 <HAL_DMA_IRQHandler+0xb24>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0208 	bic.w	r2, r2, #8
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e007      	b.n	80098a0 <HAL_DMA_IRQHandler+0xb34>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0204 	bic.w	r2, r2, #4
 800989e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8165 	beq.w	8009b74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098b2:	e15f      	b.n	8009b74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b8:	f003 031f 	and.w	r3, r3, #31
 80098bc:	2202      	movs	r2, #2
 80098be:	409a      	lsls	r2, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	4013      	ands	r3, r2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80c5 	beq.w	8009a54 <HAL_DMA_IRQHandler+0xce8>
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 80bf 	beq.w	8009a54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	2202      	movs	r2, #2
 80098e0:	409a      	lsls	r2, r3
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d018      	beq.n	8009922 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 813a 	beq.w	8009b78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800990c:	e134      	b.n	8009b78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 8130 	beq.w	8009b78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009920:	e12a      	b.n	8009b78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f003 0320 	and.w	r3, r3, #32
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 8089 	bne.w	8009a40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a2b      	ldr	r2, [pc, #172]	; (80099e0 <HAL_DMA_IRQHandler+0xc74>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d04a      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a29      	ldr	r2, [pc, #164]	; (80099e4 <HAL_DMA_IRQHandler+0xc78>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d045      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a28      	ldr	r2, [pc, #160]	; (80099e8 <HAL_DMA_IRQHandler+0xc7c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d040      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a26      	ldr	r2, [pc, #152]	; (80099ec <HAL_DMA_IRQHandler+0xc80>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d03b      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a25      	ldr	r2, [pc, #148]	; (80099f0 <HAL_DMA_IRQHandler+0xc84>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d036      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a23      	ldr	r2, [pc, #140]	; (80099f4 <HAL_DMA_IRQHandler+0xc88>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d031      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a22      	ldr	r2, [pc, #136]	; (80099f8 <HAL_DMA_IRQHandler+0xc8c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d02c      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a20      	ldr	r2, [pc, #128]	; (80099fc <HAL_DMA_IRQHandler+0xc90>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d027      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1f      	ldr	r2, [pc, #124]	; (8009a00 <HAL_DMA_IRQHandler+0xc94>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d022      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <HAL_DMA_IRQHandler+0xc98>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d01d      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a1c      	ldr	r2, [pc, #112]	; (8009a08 <HAL_DMA_IRQHandler+0xc9c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d018      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1a      	ldr	r2, [pc, #104]	; (8009a0c <HAL_DMA_IRQHandler+0xca0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d013      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a19      	ldr	r2, [pc, #100]	; (8009a10 <HAL_DMA_IRQHandler+0xca4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00e      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a17      	ldr	r2, [pc, #92]	; (8009a14 <HAL_DMA_IRQHandler+0xca8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d009      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a16      	ldr	r2, [pc, #88]	; (8009a18 <HAL_DMA_IRQHandler+0xcac>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_DMA_IRQHandler+0xc62>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a14      	ldr	r2, [pc, #80]	; (8009a1c <HAL_DMA_IRQHandler+0xcb0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d128      	bne.n	8009a20 <HAL_DMA_IRQHandler+0xcb4>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0214 	bic.w	r2, r2, #20
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e027      	b.n	8009a30 <HAL_DMA_IRQHandler+0xcc4>
 80099e0:	40020010 	.word	0x40020010
 80099e4:	40020028 	.word	0x40020028
 80099e8:	40020040 	.word	0x40020040
 80099ec:	40020058 	.word	0x40020058
 80099f0:	40020070 	.word	0x40020070
 80099f4:	40020088 	.word	0x40020088
 80099f8:	400200a0 	.word	0x400200a0
 80099fc:	400200b8 	.word	0x400200b8
 8009a00:	40020410 	.word	0x40020410
 8009a04:	40020428 	.word	0x40020428
 8009a08:	40020440 	.word	0x40020440
 8009a0c:	40020458 	.word	0x40020458
 8009a10:	40020470 	.word	0x40020470
 8009a14:	40020488 	.word	0x40020488
 8009a18:	400204a0 	.word	0x400204a0
 8009a1c:	400204b8 	.word	0x400204b8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 020a 	bic.w	r2, r2, #10
 8009a2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8097 	beq.w	8009b78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a52:	e091      	b.n	8009b78 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a58:	f003 031f 	and.w	r3, r3, #31
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	409a      	lsls	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4013      	ands	r3, r2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8088 	beq.w	8009b7a <HAL_DMA_IRQHandler+0xe0e>
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f003 0308 	and.w	r3, r3, #8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 8082 	beq.w	8009b7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a41      	ldr	r2, [pc, #260]	; (8009b80 <HAL_DMA_IRQHandler+0xe14>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d04a      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a3f      	ldr	r2, [pc, #252]	; (8009b84 <HAL_DMA_IRQHandler+0xe18>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d045      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a3e      	ldr	r2, [pc, #248]	; (8009b88 <HAL_DMA_IRQHandler+0xe1c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d040      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a3c      	ldr	r2, [pc, #240]	; (8009b8c <HAL_DMA_IRQHandler+0xe20>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d03b      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a3b      	ldr	r2, [pc, #236]	; (8009b90 <HAL_DMA_IRQHandler+0xe24>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d036      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a39      	ldr	r2, [pc, #228]	; (8009b94 <HAL_DMA_IRQHandler+0xe28>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d031      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a38      	ldr	r2, [pc, #224]	; (8009b98 <HAL_DMA_IRQHandler+0xe2c>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d02c      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a36      	ldr	r2, [pc, #216]	; (8009b9c <HAL_DMA_IRQHandler+0xe30>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d027      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a35      	ldr	r2, [pc, #212]	; (8009ba0 <HAL_DMA_IRQHandler+0xe34>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d022      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a33      	ldr	r2, [pc, #204]	; (8009ba4 <HAL_DMA_IRQHandler+0xe38>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d01d      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a32      	ldr	r2, [pc, #200]	; (8009ba8 <HAL_DMA_IRQHandler+0xe3c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d018      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a30      	ldr	r2, [pc, #192]	; (8009bac <HAL_DMA_IRQHandler+0xe40>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d013      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a2f      	ldr	r2, [pc, #188]	; (8009bb0 <HAL_DMA_IRQHandler+0xe44>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00e      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a2d      	ldr	r2, [pc, #180]	; (8009bb4 <HAL_DMA_IRQHandler+0xe48>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d009      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a2c      	ldr	r2, [pc, #176]	; (8009bb8 <HAL_DMA_IRQHandler+0xe4c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d004      	beq.n	8009b16 <HAL_DMA_IRQHandler+0xdaa>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a2a      	ldr	r2, [pc, #168]	; (8009bbc <HAL_DMA_IRQHandler+0xe50>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d108      	bne.n	8009b28 <HAL_DMA_IRQHandler+0xdbc>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 021c 	bic.w	r2, r2, #28
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	e007      	b.n	8009b38 <HAL_DMA_IRQHandler+0xdcc>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 020e 	bic.w	r2, r2, #14
 8009b36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3c:	f003 031f 	and.w	r3, r3, #31
 8009b40:	2201      	movs	r2, #1
 8009b42:	409a      	lsls	r2, r3
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
 8009b6e:	e004      	b.n	8009b7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009b70:	bf00      	nop
 8009b72:	e002      	b.n	8009b7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b74:	bf00      	nop
 8009b76:	e000      	b.n	8009b7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b7a:	3728      	adds	r7, #40	; 0x28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	40020010 	.word	0x40020010
 8009b84:	40020028 	.word	0x40020028
 8009b88:	40020040 	.word	0x40020040
 8009b8c:	40020058 	.word	0x40020058
 8009b90:	40020070 	.word	0x40020070
 8009b94:	40020088 	.word	0x40020088
 8009b98:	400200a0 	.word	0x400200a0
 8009b9c:	400200b8 	.word	0x400200b8
 8009ba0:	40020410 	.word	0x40020410
 8009ba4:	40020428 	.word	0x40020428
 8009ba8:	40020440 	.word	0x40020440
 8009bac:	40020458 	.word	0x40020458
 8009bb0:	40020470 	.word	0x40020470
 8009bb4:	40020488 	.word	0x40020488
 8009bb8:	400204a0 	.word	0x400204a0
 8009bbc:	400204b8 	.word	0x400204b8

08009bc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a7f      	ldr	r2, [pc, #508]	; (8009ddc <DMA_SetConfig+0x21c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d072      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a7d      	ldr	r2, [pc, #500]	; (8009de0 <DMA_SetConfig+0x220>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d06d      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a7c      	ldr	r2, [pc, #496]	; (8009de4 <DMA_SetConfig+0x224>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d068      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a7a      	ldr	r2, [pc, #488]	; (8009de8 <DMA_SetConfig+0x228>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d063      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a79      	ldr	r2, [pc, #484]	; (8009dec <DMA_SetConfig+0x22c>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d05e      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a77      	ldr	r2, [pc, #476]	; (8009df0 <DMA_SetConfig+0x230>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d059      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a76      	ldr	r2, [pc, #472]	; (8009df4 <DMA_SetConfig+0x234>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d054      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a74      	ldr	r2, [pc, #464]	; (8009df8 <DMA_SetConfig+0x238>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d04f      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a73      	ldr	r2, [pc, #460]	; (8009dfc <DMA_SetConfig+0x23c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d04a      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a71      	ldr	r2, [pc, #452]	; (8009e00 <DMA_SetConfig+0x240>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d045      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a70      	ldr	r2, [pc, #448]	; (8009e04 <DMA_SetConfig+0x244>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d040      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a6e      	ldr	r2, [pc, #440]	; (8009e08 <DMA_SetConfig+0x248>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d03b      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a6d      	ldr	r2, [pc, #436]	; (8009e0c <DMA_SetConfig+0x24c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d036      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a6b      	ldr	r2, [pc, #428]	; (8009e10 <DMA_SetConfig+0x250>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d031      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a6a      	ldr	r2, [pc, #424]	; (8009e14 <DMA_SetConfig+0x254>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d02c      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a68      	ldr	r2, [pc, #416]	; (8009e18 <DMA_SetConfig+0x258>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d027      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a67      	ldr	r2, [pc, #412]	; (8009e1c <DMA_SetConfig+0x25c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d022      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a65      	ldr	r2, [pc, #404]	; (8009e20 <DMA_SetConfig+0x260>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d01d      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a64      	ldr	r2, [pc, #400]	; (8009e24 <DMA_SetConfig+0x264>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d018      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a62      	ldr	r2, [pc, #392]	; (8009e28 <DMA_SetConfig+0x268>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a61      	ldr	r2, [pc, #388]	; (8009e2c <DMA_SetConfig+0x26c>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00e      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a5f      	ldr	r2, [pc, #380]	; (8009e30 <DMA_SetConfig+0x270>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d009      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a5e      	ldr	r2, [pc, #376]	; (8009e34 <DMA_SetConfig+0x274>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d004      	beq.n	8009cca <DMA_SetConfig+0x10a>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a5c      	ldr	r2, [pc, #368]	; (8009e38 <DMA_SetConfig+0x278>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d101      	bne.n	8009cce <DMA_SetConfig+0x10e>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <DMA_SetConfig+0x110>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00d      	beq.n	8009cf0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009cdc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009cee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a39      	ldr	r2, [pc, #228]	; (8009ddc <DMA_SetConfig+0x21c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d04a      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a38      	ldr	r2, [pc, #224]	; (8009de0 <DMA_SetConfig+0x220>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d045      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a36      	ldr	r2, [pc, #216]	; (8009de4 <DMA_SetConfig+0x224>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d040      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a35      	ldr	r2, [pc, #212]	; (8009de8 <DMA_SetConfig+0x228>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d03b      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a33      	ldr	r2, [pc, #204]	; (8009dec <DMA_SetConfig+0x22c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d036      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a32      	ldr	r2, [pc, #200]	; (8009df0 <DMA_SetConfig+0x230>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d031      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <DMA_SetConfig+0x234>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d02c      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a2f      	ldr	r2, [pc, #188]	; (8009df8 <DMA_SetConfig+0x238>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d027      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <DMA_SetConfig+0x23c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d022      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a2c      	ldr	r2, [pc, #176]	; (8009e00 <DMA_SetConfig+0x240>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d01d      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a2a      	ldr	r2, [pc, #168]	; (8009e04 <DMA_SetConfig+0x244>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d018      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a29      	ldr	r2, [pc, #164]	; (8009e08 <DMA_SetConfig+0x248>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d013      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a27      	ldr	r2, [pc, #156]	; (8009e0c <DMA_SetConfig+0x24c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d00e      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a26      	ldr	r2, [pc, #152]	; (8009e10 <DMA_SetConfig+0x250>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d009      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a24      	ldr	r2, [pc, #144]	; (8009e14 <DMA_SetConfig+0x254>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d004      	beq.n	8009d90 <DMA_SetConfig+0x1d0>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a23      	ldr	r2, [pc, #140]	; (8009e18 <DMA_SetConfig+0x258>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d101      	bne.n	8009d94 <DMA_SetConfig+0x1d4>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <DMA_SetConfig+0x1d6>
 8009d94:	2300      	movs	r3, #0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d059      	beq.n	8009e4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9e:	f003 031f 	and.w	r3, r3, #31
 8009da2:	223f      	movs	r2, #63	; 0x3f
 8009da4:	409a      	lsls	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009db8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2b40      	cmp	r3, #64	; 0x40
 8009dc8:	d138      	bne.n	8009e3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009dda:	e086      	b.n	8009eea <DMA_SetConfig+0x32a>
 8009ddc:	40020010 	.word	0x40020010
 8009de0:	40020028 	.word	0x40020028
 8009de4:	40020040 	.word	0x40020040
 8009de8:	40020058 	.word	0x40020058
 8009dec:	40020070 	.word	0x40020070
 8009df0:	40020088 	.word	0x40020088
 8009df4:	400200a0 	.word	0x400200a0
 8009df8:	400200b8 	.word	0x400200b8
 8009dfc:	40020410 	.word	0x40020410
 8009e00:	40020428 	.word	0x40020428
 8009e04:	40020440 	.word	0x40020440
 8009e08:	40020458 	.word	0x40020458
 8009e0c:	40020470 	.word	0x40020470
 8009e10:	40020488 	.word	0x40020488
 8009e14:	400204a0 	.word	0x400204a0
 8009e18:	400204b8 	.word	0x400204b8
 8009e1c:	58025408 	.word	0x58025408
 8009e20:	5802541c 	.word	0x5802541c
 8009e24:	58025430 	.word	0x58025430
 8009e28:	58025444 	.word	0x58025444
 8009e2c:	58025458 	.word	0x58025458
 8009e30:	5802546c 	.word	0x5802546c
 8009e34:	58025480 	.word	0x58025480
 8009e38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	60da      	str	r2, [r3, #12]
}
 8009e4c:	e04d      	b.n	8009eea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a29      	ldr	r2, [pc, #164]	; (8009ef8 <DMA_SetConfig+0x338>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d022      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a27      	ldr	r2, [pc, #156]	; (8009efc <DMA_SetConfig+0x33c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d01d      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a26      	ldr	r2, [pc, #152]	; (8009f00 <DMA_SetConfig+0x340>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d018      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a24      	ldr	r2, [pc, #144]	; (8009f04 <DMA_SetConfig+0x344>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d013      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a23      	ldr	r2, [pc, #140]	; (8009f08 <DMA_SetConfig+0x348>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d00e      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a21      	ldr	r2, [pc, #132]	; (8009f0c <DMA_SetConfig+0x34c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d009      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a20      	ldr	r2, [pc, #128]	; (8009f10 <DMA_SetConfig+0x350>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d004      	beq.n	8009e9e <DMA_SetConfig+0x2de>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a1e      	ldr	r2, [pc, #120]	; (8009f14 <DMA_SetConfig+0x354>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d101      	bne.n	8009ea2 <DMA_SetConfig+0x2e2>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e000      	b.n	8009ea4 <DMA_SetConfig+0x2e4>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d020      	beq.n	8009eea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eac:	f003 031f 	and.w	r3, r3, #31
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	409a      	lsls	r2, r3
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b40      	cmp	r3, #64	; 0x40
 8009ec6:	d108      	bne.n	8009eda <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	60da      	str	r2, [r3, #12]
}
 8009ed8:	e007      	b.n	8009eea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	60da      	str	r2, [r3, #12]
}
 8009eea:	bf00      	nop
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	58025408 	.word	0x58025408
 8009efc:	5802541c 	.word	0x5802541c
 8009f00:	58025430 	.word	0x58025430
 8009f04:	58025444 	.word	0x58025444
 8009f08:	58025458 	.word	0x58025458
 8009f0c:	5802546c 	.word	0x5802546c
 8009f10:	58025480 	.word	0x58025480
 8009f14:	58025494 	.word	0x58025494

08009f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a42      	ldr	r2, [pc, #264]	; (800a030 <DMA_CalcBaseAndBitshift+0x118>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d04a      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a41      	ldr	r2, [pc, #260]	; (800a034 <DMA_CalcBaseAndBitshift+0x11c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d045      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a3f      	ldr	r2, [pc, #252]	; (800a038 <DMA_CalcBaseAndBitshift+0x120>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d040      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a3e      	ldr	r2, [pc, #248]	; (800a03c <DMA_CalcBaseAndBitshift+0x124>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d03b      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a3c      	ldr	r2, [pc, #240]	; (800a040 <DMA_CalcBaseAndBitshift+0x128>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d036      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a3b      	ldr	r2, [pc, #236]	; (800a044 <DMA_CalcBaseAndBitshift+0x12c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d031      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a39      	ldr	r2, [pc, #228]	; (800a048 <DMA_CalcBaseAndBitshift+0x130>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d02c      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a38      	ldr	r2, [pc, #224]	; (800a04c <DMA_CalcBaseAndBitshift+0x134>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d027      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a36      	ldr	r2, [pc, #216]	; (800a050 <DMA_CalcBaseAndBitshift+0x138>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d022      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a35      	ldr	r2, [pc, #212]	; (800a054 <DMA_CalcBaseAndBitshift+0x13c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d01d      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a33      	ldr	r2, [pc, #204]	; (800a058 <DMA_CalcBaseAndBitshift+0x140>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d018      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a32      	ldr	r2, [pc, #200]	; (800a05c <DMA_CalcBaseAndBitshift+0x144>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d013      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a30      	ldr	r2, [pc, #192]	; (800a060 <DMA_CalcBaseAndBitshift+0x148>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00e      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a2f      	ldr	r2, [pc, #188]	; (800a064 <DMA_CalcBaseAndBitshift+0x14c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d009      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a2d      	ldr	r2, [pc, #180]	; (800a068 <DMA_CalcBaseAndBitshift+0x150>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a2c      	ldr	r2, [pc, #176]	; (800a06c <DMA_CalcBaseAndBitshift+0x154>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d101      	bne.n	8009fc4 <DMA_CalcBaseAndBitshift+0xac>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e000      	b.n	8009fc6 <DMA_CalcBaseAndBitshift+0xae>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d024      	beq.n	800a014 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	3b10      	subs	r3, #16
 8009fd2:	4a27      	ldr	r2, [pc, #156]	; (800a070 <DMA_CalcBaseAndBitshift+0x158>)
 8009fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd8:	091b      	lsrs	r3, r3, #4
 8009fda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	4a24      	ldr	r2, [pc, #144]	; (800a074 <DMA_CalcBaseAndBitshift+0x15c>)
 8009fe4:	5cd3      	ldrb	r3, [r2, r3]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d908      	bls.n	800a004 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4b1f      	ldr	r3, [pc, #124]	; (800a078 <DMA_CalcBaseAndBitshift+0x160>)
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	659a      	str	r2, [r3, #88]	; 0x58
 800a002:	e00d      	b.n	800a020 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
 800a00a:	4b1b      	ldr	r3, [pc, #108]	; (800a078 <DMA_CalcBaseAndBitshift+0x160>)
 800a00c:	4013      	ands	r3, r2
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6593      	str	r3, [r2, #88]	; 0x58
 800a012:	e005      	b.n	800a020 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	40020010 	.word	0x40020010
 800a034:	40020028 	.word	0x40020028
 800a038:	40020040 	.word	0x40020040
 800a03c:	40020058 	.word	0x40020058
 800a040:	40020070 	.word	0x40020070
 800a044:	40020088 	.word	0x40020088
 800a048:	400200a0 	.word	0x400200a0
 800a04c:	400200b8 	.word	0x400200b8
 800a050:	40020410 	.word	0x40020410
 800a054:	40020428 	.word	0x40020428
 800a058:	40020440 	.word	0x40020440
 800a05c:	40020458 	.word	0x40020458
 800a060:	40020470 	.word	0x40020470
 800a064:	40020488 	.word	0x40020488
 800a068:	400204a0 	.word	0x400204a0
 800a06c:	400204b8 	.word	0x400204b8
 800a070:	aaaaaaab 	.word	0xaaaaaaab
 800a074:	0801526c 	.word	0x0801526c
 800a078:	fffffc00 	.word	0xfffffc00

0800a07c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d120      	bne.n	800a0d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a094:	2b03      	cmp	r3, #3
 800a096:	d858      	bhi.n	800a14a <DMA_CheckFifoParam+0xce>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <DMA_CheckFifoParam+0x24>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0c3 	.word	0x0800a0c3
 800a0a8:	0800a0b1 	.word	0x0800a0b1
 800a0ac:	0800a14b 	.word	0x0800a14b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d048      	beq.n	800a14e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0c0:	e045      	b.n	800a14e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0ca:	d142      	bne.n	800a152 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0d0:	e03f      	b.n	800a152 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0da:	d123      	bne.n	800a124 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d838      	bhi.n	800a156 <DMA_CheckFifoParam+0xda>
 800a0e4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <DMA_CheckFifoParam+0x70>)
 800a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ea:	bf00      	nop
 800a0ec:	0800a0fd 	.word	0x0800a0fd
 800a0f0:	0800a103 	.word	0x0800a103
 800a0f4:	0800a0fd 	.word	0x0800a0fd
 800a0f8:	0800a115 	.word	0x0800a115
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	73fb      	strb	r3, [r7, #15]
        break;
 800a100:	e030      	b.n	800a164 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d025      	beq.n	800a15a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a112:	e022      	b.n	800a15a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a11c:	d11f      	bne.n	800a15e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a122:	e01c      	b.n	800a15e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d902      	bls.n	800a132 <DMA_CheckFifoParam+0xb6>
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d003      	beq.n	800a138 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a130:	e018      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	73fb      	strb	r3, [r7, #15]
        break;
 800a136:	e015      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00e      	beq.n	800a162 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	73fb      	strb	r3, [r7, #15]
    break;
 800a148:	e00b      	b.n	800a162 <DMA_CheckFifoParam+0xe6>
        break;
 800a14a:	bf00      	nop
 800a14c:	e00a      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        break;
 800a14e:	bf00      	nop
 800a150:	e008      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        break;
 800a152:	bf00      	nop
 800a154:	e006      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        break;
 800a156:	bf00      	nop
 800a158:	e004      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        break;
 800a15a:	bf00      	nop
 800a15c:	e002      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
        break;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <DMA_CheckFifoParam+0xe8>
    break;
 800a162:	bf00      	nop
    }
  }

  return status;
 800a164:	7bfb      	ldrb	r3, [r7, #15]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop

0800a174 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a38      	ldr	r2, [pc, #224]	; (800a268 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d022      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a36      	ldr	r2, [pc, #216]	; (800a26c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d01d      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a35      	ldr	r2, [pc, #212]	; (800a270 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d018      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a33      	ldr	r2, [pc, #204]	; (800a274 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d013      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a32      	ldr	r2, [pc, #200]	; (800a278 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00e      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a30      	ldr	r2, [pc, #192]	; (800a27c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d009      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a2f      	ldr	r2, [pc, #188]	; (800a280 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d004      	beq.n	800a1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a2d      	ldr	r2, [pc, #180]	; (800a284 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d101      	bne.n	800a1d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d01a      	beq.n	800a212 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	3b08      	subs	r3, #8
 800a1e4:	4a28      	ldr	r2, [pc, #160]	; (800a288 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	091b      	lsrs	r3, r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4b26      	ldr	r3, [pc, #152]	; (800a28c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a1f2:	4413      	add	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a24      	ldr	r2, [pc, #144]	; (800a290 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a200:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f003 031f 	and.w	r3, r3, #31
 800a208:	2201      	movs	r2, #1
 800a20a:	409a      	lsls	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a210:	e024      	b.n	800a25c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	b2db      	uxtb	r3, r3
 800a218:	3b10      	subs	r3, #16
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a21c:	fba2 2303 	umull	r2, r3, r2, r3
 800a220:	091b      	lsrs	r3, r3, #4
 800a222:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d806      	bhi.n	800a23a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4a1b      	ldr	r2, [pc, #108]	; (800a29c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d902      	bls.n	800a23a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3308      	adds	r3, #8
 800a238:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4b18      	ldr	r3, [pc, #96]	; (800a2a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a16      	ldr	r2, [pc, #88]	; (800a2a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a24c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	2201      	movs	r2, #1
 800a256:	409a      	lsls	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	58025408 	.word	0x58025408
 800a26c:	5802541c 	.word	0x5802541c
 800a270:	58025430 	.word	0x58025430
 800a274:	58025444 	.word	0x58025444
 800a278:	58025458 	.word	0x58025458
 800a27c:	5802546c 	.word	0x5802546c
 800a280:	58025480 	.word	0x58025480
 800a284:	58025494 	.word	0x58025494
 800a288:	cccccccd 	.word	0xcccccccd
 800a28c:	16009600 	.word	0x16009600
 800a290:	58025880 	.word	0x58025880
 800a294:	aaaaaaab 	.word	0xaaaaaaab
 800a298:	400204b8 	.word	0x400204b8
 800a29c:	4002040f 	.word	0x4002040f
 800a2a0:	10008200 	.word	0x10008200
 800a2a4:	40020880 	.word	0x40020880

0800a2a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d04a      	beq.n	800a354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d847      	bhi.n	800a354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a25      	ldr	r2, [pc, #148]	; (800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d022      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a24      	ldr	r2, [pc, #144]	; (800a364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d01d      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a22      	ldr	r2, [pc, #136]	; (800a368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d018      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a21      	ldr	r2, [pc, #132]	; (800a36c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d013      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a1f      	ldr	r2, [pc, #124]	; (800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d00e      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a1e      	ldr	r2, [pc, #120]	; (800a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d009      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a1c      	ldr	r2, [pc, #112]	; (800a378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d004      	beq.n	800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a1b      	ldr	r2, [pc, #108]	; (800a37c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d101      	bne.n	800a318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a314:	2301      	movs	r3, #1
 800a316:	e000      	b.n	800a31a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a318:	2300      	movs	r3, #0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	4b17      	ldr	r3, [pc, #92]	; (800a380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	461a      	mov	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a15      	ldr	r2, [pc, #84]	; (800a384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a330:	671a      	str	r2, [r3, #112]	; 0x70
 800a332:	e009      	b.n	800a348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	4b14      	ldr	r3, [pc, #80]	; (800a388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	461a      	mov	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a11      	ldr	r2, [pc, #68]	; (800a38c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a346:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	2201      	movs	r2, #1
 800a34e:	409a      	lsls	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a354:	bf00      	nop
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	58025408 	.word	0x58025408
 800a364:	5802541c 	.word	0x5802541c
 800a368:	58025430 	.word	0x58025430
 800a36c:	58025444 	.word	0x58025444
 800a370:	58025458 	.word	0x58025458
 800a374:	5802546c 	.word	0x5802546c
 800a378:	58025480 	.word	0x58025480
 800a37c:	58025494 	.word	0x58025494
 800a380:	1600963f 	.word	0x1600963f
 800a384:	58025940 	.word	0x58025940
 800a388:	1000823f 	.word	0x1000823f
 800a38c:	40020940 	.word	0x40020940

0800a390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a390:	b480      	push	{r7}
 800a392:	b089      	sub	sp, #36	; 0x24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a39e:	4b89      	ldr	r3, [pc, #548]	; (800a5c4 <HAL_GPIO_Init+0x234>)
 800a3a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3a2:	e194      	b.n	800a6ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 8186 	beq.w	800a6c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d005      	beq.n	800a3d4 <HAL_GPIO_Init+0x44>
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f003 0303 	and.w	r3, r3, #3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d130      	bne.n	800a436 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	2203      	movs	r2, #3
 800a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e4:	43db      	mvns	r3, r3
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	68da      	ldr	r2, [r3, #12]
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a40a:	2201      	movs	r2, #1
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	43db      	mvns	r3, r3
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	4013      	ands	r3, r2
 800a418:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	091b      	lsrs	r3, r3, #4
 800a420:	f003 0201 	and.w	r2, r3, #1
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	fa02 f303 	lsl.w	r3, r2, r3
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d017      	beq.n	800a472 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	2203      	movs	r2, #3
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	43db      	mvns	r3, r3
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	4013      	ands	r3, r2
 800a458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	69ba      	ldr	r2, [r7, #24]
 800a468:	4313      	orrs	r3, r2
 800a46a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d123      	bne.n	800a4c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	08da      	lsrs	r2, r3, #3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3208      	adds	r2, #8
 800a486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a48a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	f003 0307 	and.w	r3, r3, #7
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	220f      	movs	r2, #15
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	43db      	mvns	r3, r3
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	691a      	ldr	r2, [r3, #16]
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	08da      	lsrs	r2, r3, #3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3208      	adds	r2, #8
 800a4c0:	69b9      	ldr	r1, [r7, #24]
 800a4c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d6:	43db      	mvns	r3, r3
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f003 0203 	and.w	r2, r3, #3
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 80e0 	beq.w	800a6c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a508:	4b2f      	ldr	r3, [pc, #188]	; (800a5c8 <HAL_GPIO_Init+0x238>)
 800a50a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a50e:	4a2e      	ldr	r2, [pc, #184]	; (800a5c8 <HAL_GPIO_Init+0x238>)
 800a510:	f043 0302 	orr.w	r3, r3, #2
 800a514:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a518:	4b2b      	ldr	r3, [pc, #172]	; (800a5c8 <HAL_GPIO_Init+0x238>)
 800a51a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a526:	4a29      	ldr	r2, [pc, #164]	; (800a5cc <HAL_GPIO_Init+0x23c>)
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	089b      	lsrs	r3, r3, #2
 800a52c:	3302      	adds	r3, #2
 800a52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	220f      	movs	r2, #15
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	43db      	mvns	r3, r3
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	4013      	ands	r3, r2
 800a548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a20      	ldr	r2, [pc, #128]	; (800a5d0 <HAL_GPIO_Init+0x240>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d052      	beq.n	800a5f8 <HAL_GPIO_Init+0x268>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a1f      	ldr	r2, [pc, #124]	; (800a5d4 <HAL_GPIO_Init+0x244>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d031      	beq.n	800a5be <HAL_GPIO_Init+0x22e>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a1e      	ldr	r2, [pc, #120]	; (800a5d8 <HAL_GPIO_Init+0x248>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d02b      	beq.n	800a5ba <HAL_GPIO_Init+0x22a>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a1d      	ldr	r2, [pc, #116]	; (800a5dc <HAL_GPIO_Init+0x24c>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d025      	beq.n	800a5b6 <HAL_GPIO_Init+0x226>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a1c      	ldr	r2, [pc, #112]	; (800a5e0 <HAL_GPIO_Init+0x250>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d01f      	beq.n	800a5b2 <HAL_GPIO_Init+0x222>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a1b      	ldr	r2, [pc, #108]	; (800a5e4 <HAL_GPIO_Init+0x254>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d019      	beq.n	800a5ae <HAL_GPIO_Init+0x21e>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a1a      	ldr	r2, [pc, #104]	; (800a5e8 <HAL_GPIO_Init+0x258>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d013      	beq.n	800a5aa <HAL_GPIO_Init+0x21a>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a19      	ldr	r2, [pc, #100]	; (800a5ec <HAL_GPIO_Init+0x25c>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d00d      	beq.n	800a5a6 <HAL_GPIO_Init+0x216>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a18      	ldr	r2, [pc, #96]	; (800a5f0 <HAL_GPIO_Init+0x260>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d007      	beq.n	800a5a2 <HAL_GPIO_Init+0x212>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a17      	ldr	r2, [pc, #92]	; (800a5f4 <HAL_GPIO_Init+0x264>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d101      	bne.n	800a59e <HAL_GPIO_Init+0x20e>
 800a59a:	2309      	movs	r3, #9
 800a59c:	e02d      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a59e:	230a      	movs	r3, #10
 800a5a0:	e02b      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	e029      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5a6:	2307      	movs	r3, #7
 800a5a8:	e027      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5aa:	2306      	movs	r3, #6
 800a5ac:	e025      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5ae:	2305      	movs	r3, #5
 800a5b0:	e023      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5b2:	2304      	movs	r3, #4
 800a5b4:	e021      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e01f      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e01d      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e01b      	b.n	800a5fa <HAL_GPIO_Init+0x26a>
 800a5c2:	bf00      	nop
 800a5c4:	58000080 	.word	0x58000080
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	58000400 	.word	0x58000400
 800a5d0:	58020000 	.word	0x58020000
 800a5d4:	58020400 	.word	0x58020400
 800a5d8:	58020800 	.word	0x58020800
 800a5dc:	58020c00 	.word	0x58020c00
 800a5e0:	58021000 	.word	0x58021000
 800a5e4:	58021400 	.word	0x58021400
 800a5e8:	58021800 	.word	0x58021800
 800a5ec:	58021c00 	.word	0x58021c00
 800a5f0:	58022000 	.word	0x58022000
 800a5f4:	58022400 	.word	0x58022400
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	f002 0203 	and.w	r2, r2, #3
 800a600:	0092      	lsls	r2, r2, #2
 800a602:	4093      	lsls	r3, r2
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	4313      	orrs	r3, r2
 800a608:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a60a:	4938      	ldr	r1, [pc, #224]	; (800a6ec <HAL_GPIO_Init+0x35c>)
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	089b      	lsrs	r3, r3, #2
 800a610:	3302      	adds	r3, #2
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	43db      	mvns	r3, r3
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	4013      	ands	r3, r2
 800a628:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a63e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	43db      	mvns	r3, r3
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	4013      	ands	r3, r2
 800a656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d003      	beq.n	800a66c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4313      	orrs	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a66c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	43db      	mvns	r3, r3
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	4013      	ands	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	43db      	mvns	r3, r3
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f47f ae63 	bne.w	800a3a4 <HAL_GPIO_Init+0x14>
  }
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	3724      	adds	r7, #36	; 0x24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	58000400 	.word	0x58000400

0800a6f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	807b      	strh	r3, [r7, #2]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a700:	787b      	ldrb	r3, [r7, #1]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a706:	887a      	ldrh	r2, [r7, #2]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a70c:	e003      	b.n	800a716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a70e:	887b      	ldrh	r3, [r7, #2]
 800a710:	041a      	lsls	r2, r3, #16
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	619a      	str	r2, [r3, #24]
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	4603      	mov	r3, r0
 800a72a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a72c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a730:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	4013      	ands	r3, r2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d008      	beq.n	800a74e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a73c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a746:	88fb      	ldrh	r3, [r7, #6]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fa fb69 	bl	8004e20 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
	...

0800a758 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a760:	4b19      	ldr	r3, [pc, #100]	; (800a7c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f003 0304 	and.w	r3, r3, #4
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d00a      	beq.n	800a782 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a76c:	4b16      	ldr	r3, [pc, #88]	; (800a7c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	429a      	cmp	r2, r3
 800a778:	d001      	beq.n	800a77e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e01f      	b.n	800a7be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	e01d      	b.n	800a7be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a782:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	f023 0207 	bic.w	r2, r3, #7
 800a78a:	490f      	ldr	r1, [pc, #60]	; (800a7c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a792:	f7fc fc6b 	bl	800706c <HAL_GetTick>
 800a796:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a798:	e009      	b.n	800a7ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a79a:	f7fc fc67 	bl	800706c <HAL_GetTick>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7a8:	d901      	bls.n	800a7ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e007      	b.n	800a7be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7ae:	4b06      	ldr	r3, [pc, #24]	; (800a7c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ba:	d1ee      	bne.n	800a79a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	58024800 	.word	0x58024800

0800a7cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08c      	sub	sp, #48	; 0x30
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d102      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	f000 bc1d 	b.w	800b01a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8087 	beq.w	800a8fc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7ee:	4b99      	ldr	r3, [pc, #612]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7f8:	4b96      	ldr	r3, [pc, #600]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	2b10      	cmp	r3, #16
 800a802:	d007      	beq.n	800a814 <HAL_RCC_OscConfig+0x48>
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	2b18      	cmp	r3, #24
 800a808:	d110      	bne.n	800a82c <HAL_RCC_OscConfig+0x60>
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	f003 0303 	and.w	r3, r3, #3
 800a810:	2b02      	cmp	r3, #2
 800a812:	d10b      	bne.n	800a82c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a814:	4b8f      	ldr	r3, [pc, #572]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d06c      	beq.n	800a8fa <HAL_RCC_OscConfig+0x12e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d168      	bne.n	800a8fa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e3f6      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a834:	d106      	bne.n	800a844 <HAL_RCC_OscConfig+0x78>
 800a836:	4b87      	ldr	r3, [pc, #540]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a86      	ldr	r2, [pc, #536]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a83c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	e02e      	b.n	800a8a2 <HAL_RCC_OscConfig+0xd6>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10c      	bne.n	800a866 <HAL_RCC_OscConfig+0x9a>
 800a84c:	4b81      	ldr	r3, [pc, #516]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a80      	ldr	r2, [pc, #512]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	4b7e      	ldr	r3, [pc, #504]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a7d      	ldr	r2, [pc, #500]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	e01d      	b.n	800a8a2 <HAL_RCC_OscConfig+0xd6>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a86e:	d10c      	bne.n	800a88a <HAL_RCC_OscConfig+0xbe>
 800a870:	4b78      	ldr	r3, [pc, #480]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a77      	ldr	r2, [pc, #476]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	4b75      	ldr	r3, [pc, #468]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a74      	ldr	r2, [pc, #464]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	e00b      	b.n	800a8a2 <HAL_RCC_OscConfig+0xd6>
 800a88a:	4b72      	ldr	r3, [pc, #456]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a71      	ldr	r2, [pc, #452]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	4b6f      	ldr	r3, [pc, #444]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a6e      	ldr	r2, [pc, #440]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a89c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d013      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8aa:	f7fc fbdf 	bl	800706c <HAL_GetTick>
 800a8ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8b0:	e008      	b.n	800a8c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8b2:	f7fc fbdb 	bl	800706c <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b64      	cmp	r3, #100	; 0x64
 800a8be:	d901      	bls.n	800a8c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e3aa      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8c4:	4b63      	ldr	r3, [pc, #396]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0f0      	beq.n	800a8b2 <HAL_RCC_OscConfig+0xe6>
 800a8d0:	e014      	b.n	800a8fc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8d2:	f7fc fbcb 	bl	800706c <HAL_GetTick>
 800a8d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8d8:	e008      	b.n	800a8ec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8da:	f7fc fbc7 	bl	800706c <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b64      	cmp	r3, #100	; 0x64
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e396      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8ec:	4b59      	ldr	r3, [pc, #356]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f0      	bne.n	800a8da <HAL_RCC_OscConfig+0x10e>
 800a8f8:	e000      	b.n	800a8fc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 80cb 	beq.w	800aaa0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a90a:	4b52      	ldr	r3, [pc, #328]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a912:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a914:	4b4f      	ldr	r3, [pc, #316]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a918:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d007      	beq.n	800a930 <HAL_RCC_OscConfig+0x164>
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	2b18      	cmp	r3, #24
 800a924:	d156      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x208>
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	f003 0303 	and.w	r3, r3, #3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d151      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a930:	4b48      	ldr	r3, [pc, #288]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d005      	beq.n	800a948 <HAL_RCC_OscConfig+0x17c>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e368      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a948:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f023 0219 	bic.w	r2, r3, #25
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	493f      	ldr	r1, [pc, #252]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a956:	4313      	orrs	r3, r2
 800a958:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a95a:	f7fc fb87 	bl	800706c <HAL_GetTick>
 800a95e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a960:	e008      	b.n	800a974 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a962:	f7fc fb83 	bl	800706c <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d901      	bls.n	800a974 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e352      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a974:	4b37      	ldr	r3, [pc, #220]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0f0      	beq.n	800a962 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a980:	f7fc fba4 	bl	80070cc <HAL_GetREVID>
 800a984:	4603      	mov	r3, r0
 800a986:	f241 0203 	movw	r2, #4099	; 0x1003
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d817      	bhi.n	800a9be <HAL_RCC_OscConfig+0x1f2>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d108      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x1dc>
 800a996:	4b2f      	ldr	r3, [pc, #188]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a99e:	4a2d      	ldr	r2, [pc, #180]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9a6:	e07b      	b.n	800aaa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a8:	4b2a      	ldr	r3, [pc, #168]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	031b      	lsls	r3, r3, #12
 800a9b6:	4927      	ldr	r1, [pc, #156]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9bc:	e070      	b.n	800aaa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9be:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	061b      	lsls	r3, r3, #24
 800a9cc:	4921      	ldr	r1, [pc, #132]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9d2:	e065      	b.n	800aaa0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d048      	beq.n	800aa6e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f023 0219 	bic.w	r2, r3, #25
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	491a      	ldr	r1, [pc, #104]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ee:	f7fc fb3d 	bl	800706c <HAL_GetTick>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9f4:	e008      	b.n	800aa08 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9f6:	f7fc fb39 	bl	800706c <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e308      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa08:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0304 	and.w	r3, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0f0      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa14:	f7fc fb5a 	bl	80070cc <HAL_GetREVID>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d81a      	bhi.n	800aa58 <HAL_RCC_OscConfig+0x28c>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	2b40      	cmp	r3, #64	; 0x40
 800aa28:	d108      	bne.n	800aa3c <HAL_RCC_OscConfig+0x270>
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800aa34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa38:	6053      	str	r3, [r2, #4]
 800aa3a:	e031      	b.n	800aaa0 <HAL_RCC_OscConfig+0x2d4>
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	031b      	lsls	r3, r3, #12
 800aa4a:	4902      	ldr	r1, [pc, #8]	; (800aa54 <HAL_RCC_OscConfig+0x288>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	604b      	str	r3, [r1, #4]
 800aa50:	e026      	b.n	800aaa0 <HAL_RCC_OscConfig+0x2d4>
 800aa52:	bf00      	nop
 800aa54:	58024400 	.word	0x58024400
 800aa58:	4b9a      	ldr	r3, [pc, #616]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	061b      	lsls	r3, r3, #24
 800aa66:	4997      	ldr	r1, [pc, #604]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	604b      	str	r3, [r1, #4]
 800aa6c:	e018      	b.n	800aaa0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa6e:	4b95      	ldr	r3, [pc, #596]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a94      	ldr	r2, [pc, #592]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aa74:	f023 0301 	bic.w	r3, r3, #1
 800aa78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa7a:	f7fc faf7 	bl	800706c <HAL_GetTick>
 800aa7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa80:	e008      	b.n	800aa94 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa82:	f7fc faf3 	bl	800706c <HAL_GetTick>
 800aa86:	4602      	mov	r2, r0
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d901      	bls.n	800aa94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e2c2      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa94:	4b8b      	ldr	r3, [pc, #556]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1f0      	bne.n	800aa82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 80a9 	beq.w	800ac00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaae:	4b85      	ldr	r3, [pc, #532]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aab6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aab8:	4b82      	ldr	r3, [pc, #520]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d007      	beq.n	800aad4 <HAL_RCC_OscConfig+0x308>
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2b18      	cmp	r3, #24
 800aac8:	d13a      	bne.n	800ab40 <HAL_RCC_OscConfig+0x374>
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f003 0303 	and.w	r3, r3, #3
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d135      	bne.n	800ab40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aad4:	4b7b      	ldr	r3, [pc, #492]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <HAL_RCC_OscConfig+0x320>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	2b80      	cmp	r3, #128	; 0x80
 800aae6:	d001      	beq.n	800aaec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e296      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aaec:	f7fc faee 	bl	80070cc <HAL_GetREVID>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f241 0203 	movw	r2, #4099	; 0x1003
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d817      	bhi.n	800ab2a <HAL_RCC_OscConfig+0x35e>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	2b20      	cmp	r3, #32
 800ab00:	d108      	bne.n	800ab14 <HAL_RCC_OscConfig+0x348>
 800ab02:	4b70      	ldr	r3, [pc, #448]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab0a:	4a6e      	ldr	r2, [pc, #440]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab12:	e075      	b.n	800ac00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab14:	4b6b      	ldr	r3, [pc, #428]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	069b      	lsls	r3, r3, #26
 800ab22:	4968      	ldr	r1, [pc, #416]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab28:	e06a      	b.n	800ac00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab2a:	4b66      	ldr	r3, [pc, #408]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	061b      	lsls	r3, r3, #24
 800ab38:	4962      	ldr	r1, [pc, #392]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab3e:	e05f      	b.n	800ac00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d042      	beq.n	800abce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab48:	4b5e      	ldr	r3, [pc, #376]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a5d      	ldr	r2, [pc, #372]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab54:	f7fc fa8a 	bl	800706c <HAL_GetTick>
 800ab58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab5a:	e008      	b.n	800ab6e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ab5c:	f7fc fa86 	bl	800706c <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d901      	bls.n	800ab6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e255      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab6e:	4b55      	ldr	r3, [pc, #340]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0f0      	beq.n	800ab5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab7a:	f7fc faa7 	bl	80070cc <HAL_GetREVID>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d817      	bhi.n	800abb8 <HAL_RCC_OscConfig+0x3ec>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	2b20      	cmp	r3, #32
 800ab8e:	d108      	bne.n	800aba2 <HAL_RCC_OscConfig+0x3d6>
 800ab90:	4b4c      	ldr	r3, [pc, #304]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab98:	4a4a      	ldr	r2, [pc, #296]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ab9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab9e:	6053      	str	r3, [r2, #4]
 800aba0:	e02e      	b.n	800ac00 <HAL_RCC_OscConfig+0x434>
 800aba2:	4b48      	ldr	r3, [pc, #288]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	069b      	lsls	r3, r3, #26
 800abb0:	4944      	ldr	r1, [pc, #272]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	604b      	str	r3, [r1, #4]
 800abb6:	e023      	b.n	800ac00 <HAL_RCC_OscConfig+0x434>
 800abb8:	4b42      	ldr	r3, [pc, #264]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	061b      	lsls	r3, r3, #24
 800abc6:	493f      	ldr	r1, [pc, #252]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	60cb      	str	r3, [r1, #12]
 800abcc:	e018      	b.n	800ac00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800abce:	4b3d      	ldr	r3, [pc, #244]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a3c      	ldr	r2, [pc, #240]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800abd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abda:	f7fc fa47 	bl	800706c <HAL_GetTick>
 800abde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abe0:	e008      	b.n	800abf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800abe2:	f7fc fa43 	bl	800706c <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	2b02      	cmp	r3, #2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e212      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abf4:	4b33      	ldr	r3, [pc, #204]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1f0      	bne.n	800abe2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0308 	and.w	r3, r3, #8
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d036      	beq.n	800ac7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d019      	beq.n	800ac48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac14:	4b2b      	ldr	r3, [pc, #172]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac18:	4a2a      	ldr	r2, [pc, #168]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac20:	f7fc fa24 	bl	800706c <HAL_GetTick>
 800ac24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac26:	e008      	b.n	800ac3a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac28:	f7fc fa20 	bl	800706c <HAL_GetTick>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d901      	bls.n	800ac3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e1ef      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac3a:	4b22      	ldr	r3, [pc, #136]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0f0      	beq.n	800ac28 <HAL_RCC_OscConfig+0x45c>
 800ac46:	e018      	b.n	800ac7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac48:	4b1e      	ldr	r3, [pc, #120]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac4c:	4a1d      	ldr	r2, [pc, #116]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac4e:	f023 0301 	bic.w	r3, r3, #1
 800ac52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac54:	f7fc fa0a 	bl	800706c <HAL_GetTick>
 800ac58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac5a:	e008      	b.n	800ac6e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac5c:	f7fc fa06 	bl	800706c <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d901      	bls.n	800ac6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e1d5      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac6e:	4b15      	ldr	r3, [pc, #84]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1f0      	bne.n	800ac5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d039      	beq.n	800acfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01c      	beq.n	800acc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac8e:	4b0d      	ldr	r3, [pc, #52]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a0c      	ldr	r2, [pc, #48]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800ac94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac9a:	f7fc f9e7 	bl	800706c <HAL_GetTick>
 800ac9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aca0:	e008      	b.n	800acb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aca2:	f7fc f9e3 	bl	800706c <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d901      	bls.n	800acb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e1b2      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acb4:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <HAL_RCC_OscConfig+0x4f8>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0f0      	beq.n	800aca2 <HAL_RCC_OscConfig+0x4d6>
 800acc0:	e01b      	b.n	800acfa <HAL_RCC_OscConfig+0x52e>
 800acc2:	bf00      	nop
 800acc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acc8:	4b9b      	ldr	r3, [pc, #620]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a9a      	ldr	r2, [pc, #616]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800acce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acd4:	f7fc f9ca 	bl	800706c <HAL_GetTick>
 800acd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acda:	e008      	b.n	800acee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800acdc:	f7fc f9c6 	bl	800706c <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d901      	bls.n	800acee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e195      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acee:	4b92      	ldr	r3, [pc, #584]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1f0      	bne.n	800acdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0304 	and.w	r3, r3, #4
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 8081 	beq.w	800ae0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad08:	4b8c      	ldr	r3, [pc, #560]	; (800af3c <HAL_RCC_OscConfig+0x770>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a8b      	ldr	r2, [pc, #556]	; (800af3c <HAL_RCC_OscConfig+0x770>)
 800ad0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad14:	f7fc f9aa 	bl	800706c <HAL_GetTick>
 800ad18:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad1a:	e008      	b.n	800ad2e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ad1c:	f7fc f9a6 	bl	800706c <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b64      	cmp	r3, #100	; 0x64
 800ad28:	d901      	bls.n	800ad2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e175      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad2e:	4b83      	ldr	r3, [pc, #524]	; (800af3c <HAL_RCC_OscConfig+0x770>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0f0      	beq.n	800ad1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d106      	bne.n	800ad50 <HAL_RCC_OscConfig+0x584>
 800ad42:	4b7d      	ldr	r3, [pc, #500]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad46:	4a7c      	ldr	r2, [pc, #496]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad48:	f043 0301 	orr.w	r3, r3, #1
 800ad4c:	6713      	str	r3, [r2, #112]	; 0x70
 800ad4e:	e02d      	b.n	800adac <HAL_RCC_OscConfig+0x5e0>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10c      	bne.n	800ad72 <HAL_RCC_OscConfig+0x5a6>
 800ad58:	4b77      	ldr	r3, [pc, #476]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad5c:	4a76      	ldr	r2, [pc, #472]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad5e:	f023 0301 	bic.w	r3, r3, #1
 800ad62:	6713      	str	r3, [r2, #112]	; 0x70
 800ad64:	4b74      	ldr	r3, [pc, #464]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad68:	4a73      	ldr	r2, [pc, #460]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad6a:	f023 0304 	bic.w	r3, r3, #4
 800ad6e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad70:	e01c      	b.n	800adac <HAL_RCC_OscConfig+0x5e0>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	2b05      	cmp	r3, #5
 800ad78:	d10c      	bne.n	800ad94 <HAL_RCC_OscConfig+0x5c8>
 800ad7a:	4b6f      	ldr	r3, [pc, #444]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7e:	4a6e      	ldr	r2, [pc, #440]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad80:	f043 0304 	orr.w	r3, r3, #4
 800ad84:	6713      	str	r3, [r2, #112]	; 0x70
 800ad86:	4b6c      	ldr	r3, [pc, #432]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8a:	4a6b      	ldr	r2, [pc, #428]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad8c:	f043 0301 	orr.w	r3, r3, #1
 800ad90:	6713      	str	r3, [r2, #112]	; 0x70
 800ad92:	e00b      	b.n	800adac <HAL_RCC_OscConfig+0x5e0>
 800ad94:	4b68      	ldr	r3, [pc, #416]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad98:	4a67      	ldr	r2, [pc, #412]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ad9a:	f023 0301 	bic.w	r3, r3, #1
 800ad9e:	6713      	str	r3, [r2, #112]	; 0x70
 800ada0:	4b65      	ldr	r3, [pc, #404]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ada2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada4:	4a64      	ldr	r2, [pc, #400]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ada6:	f023 0304 	bic.w	r3, r3, #4
 800adaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d015      	beq.n	800ade0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adb4:	f7fc f95a 	bl	800706c <HAL_GetTick>
 800adb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adba:	e00a      	b.n	800add2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800adbc:	f7fc f956 	bl	800706c <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800adca:	4293      	cmp	r3, r2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e123      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800add2:	4b59      	ldr	r3, [pc, #356]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800add4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0ee      	beq.n	800adbc <HAL_RCC_OscConfig+0x5f0>
 800adde:	e014      	b.n	800ae0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ade0:	f7fc f944 	bl	800706c <HAL_GetTick>
 800ade4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ade6:	e00a      	b.n	800adfe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ade8:	f7fc f940 	bl	800706c <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d901      	bls.n	800adfe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e10d      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800adfe:	4b4e      	ldr	r3, [pc, #312]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1ee      	bne.n	800ade8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 8102 	beq.w	800b018 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae14:	4b48      	ldr	r3, [pc, #288]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae1c:	2b18      	cmp	r3, #24
 800ae1e:	f000 80bd 	beq.w	800af9c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	f040 809e 	bne.w	800af68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae2c:	4b42      	ldr	r3, [pc, #264]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a41      	ldr	r2, [pc, #260]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae38:	f7fc f918 	bl	800706c <HAL_GetTick>
 800ae3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae3e:	e008      	b.n	800ae52 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae40:	f7fc f914 	bl	800706c <HAL_GetTick>
 800ae44:	4602      	mov	r2, r0
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d901      	bls.n	800ae52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e0e3      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae52:	4b39      	ldr	r3, [pc, #228]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1f0      	bne.n	800ae40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae5e:	4b36      	ldr	r3, [pc, #216]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae62:	4b37      	ldr	r3, [pc, #220]	; (800af40 <HAL_RCC_OscConfig+0x774>)
 800ae64:	4013      	ands	r3, r2
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae6e:	0112      	lsls	r2, r2, #4
 800ae70:	430a      	orrs	r2, r1
 800ae72:	4931      	ldr	r1, [pc, #196]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	628b      	str	r3, [r1, #40]	; 0x28
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae86:	3b01      	subs	r3, #1
 800ae88:	025b      	lsls	r3, r3, #9
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae92:	3b01      	subs	r3, #1
 800ae94:	041b      	lsls	r3, r3, #16
 800ae96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea0:	3b01      	subs	r3, #1
 800aea2:	061b      	lsls	r3, r3, #24
 800aea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aea8:	4923      	ldr	r1, [pc, #140]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aeae:	4b22      	ldr	r3, [pc, #136]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	4a21      	ldr	r2, [pc, #132]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aeba:	4b1f      	ldr	r3, [pc, #124]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aebe:	4b21      	ldr	r3, [pc, #132]	; (800af44 <HAL_RCC_OscConfig+0x778>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aec6:	00d2      	lsls	r2, r2, #3
 800aec8:	491b      	ldr	r1, [pc, #108]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aece:	4b1a      	ldr	r3, [pc, #104]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed2:	f023 020c 	bic.w	r2, r3, #12
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	4917      	ldr	r1, [pc, #92]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aee0:	4b15      	ldr	r3, [pc, #84]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee4:	f023 0202 	bic.w	r2, r3, #2
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeec:	4912      	ldr	r1, [pc, #72]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aef2:	4b11      	ldr	r3, [pc, #68]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef6:	4a10      	ldr	r2, [pc, #64]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800aef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aefc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aefe:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	4a0d      	ldr	r2, [pc, #52]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af0a:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0e:	4a0a      	ldr	r2, [pc, #40]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800af16:	4b08      	ldr	r3, [pc, #32]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	4a07      	ldr	r2, [pc, #28]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af1c:	f043 0301 	orr.w	r3, r3, #1
 800af20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a04      	ldr	r2, [pc, #16]	; (800af38 <HAL_RCC_OscConfig+0x76c>)
 800af28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af2e:	f7fc f89d 	bl	800706c <HAL_GetTick>
 800af32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af34:	e011      	b.n	800af5a <HAL_RCC_OscConfig+0x78e>
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
 800af3c:	58024800 	.word	0x58024800
 800af40:	fffffc0c 	.word	0xfffffc0c
 800af44:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af48:	f7fc f890 	bl	800706c <HAL_GetTick>
 800af4c:	4602      	mov	r2, r0
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	2b02      	cmp	r3, #2
 800af54:	d901      	bls.n	800af5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e05f      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af5a:	4b32      	ldr	r3, [pc, #200]	; (800b024 <HAL_RCC_OscConfig+0x858>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0f0      	beq.n	800af48 <HAL_RCC_OscConfig+0x77c>
 800af66:	e057      	b.n	800b018 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af68:	4b2e      	ldr	r3, [pc, #184]	; (800b024 <HAL_RCC_OscConfig+0x858>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a2d      	ldr	r2, [pc, #180]	; (800b024 <HAL_RCC_OscConfig+0x858>)
 800af6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af74:	f7fc f87a 	bl	800706c <HAL_GetTick>
 800af78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af7a:	e008      	b.n	800af8e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af7c:	f7fc f876 	bl	800706c <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d901      	bls.n	800af8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e045      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af8e:	4b25      	ldr	r3, [pc, #148]	; (800b024 <HAL_RCC_OscConfig+0x858>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f0      	bne.n	800af7c <HAL_RCC_OscConfig+0x7b0>
 800af9a:	e03d      	b.n	800b018 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af9c:	4b21      	ldr	r3, [pc, #132]	; (800b024 <HAL_RCC_OscConfig+0x858>)
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800afa2:	4b20      	ldr	r3, [pc, #128]	; (800b024 <HAL_RCC_OscConfig+0x858>)
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b01      	cmp	r3, #1
 800afae:	d031      	beq.n	800b014 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f003 0203 	and.w	r2, r3, #3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afba:	429a      	cmp	r2, r3
 800afbc:	d12a      	bne.n	800b014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	091b      	lsrs	r3, r3, #4
 800afc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afca:	429a      	cmp	r2, r3
 800afcc:	d122      	bne.n	800b014 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afda:	429a      	cmp	r2, r3
 800afdc:	d11a      	bne.n	800b014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	0a5b      	lsrs	r3, r3, #9
 800afe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afec:	429a      	cmp	r2, r3
 800afee:	d111      	bne.n	800b014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800affe:	429a      	cmp	r2, r3
 800b000:	d108      	bne.n	800b014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b010:	429a      	cmp	r2, r3
 800b012:	d001      	beq.n	800b018 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e000      	b.n	800b01a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3730      	adds	r7, #48	; 0x30
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	58024400 	.word	0x58024400

0800b028 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e19c      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b03c:	4b8a      	ldr	r3, [pc, #552]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 030f 	and.w	r3, r3, #15
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	429a      	cmp	r2, r3
 800b048:	d910      	bls.n	800b06c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b04a:	4b87      	ldr	r3, [pc, #540]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f023 020f 	bic.w	r2, r3, #15
 800b052:	4985      	ldr	r1, [pc, #532]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	4313      	orrs	r3, r2
 800b058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b05a:	4b83      	ldr	r3, [pc, #524]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d001      	beq.n	800b06c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e184      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d010      	beq.n	800b09a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	691a      	ldr	r2, [r3, #16]
 800b07c:	4b7b      	ldr	r3, [pc, #492]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b084:	429a      	cmp	r2, r3
 800b086:	d908      	bls.n	800b09a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b088:	4b78      	ldr	r3, [pc, #480]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	4975      	ldr	r1, [pc, #468]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b096:	4313      	orrs	r3, r2
 800b098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0308 	and.w	r3, r3, #8
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d010      	beq.n	800b0c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	695a      	ldr	r2, [r3, #20]
 800b0aa:	4b70      	ldr	r3, [pc, #448]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d908      	bls.n	800b0c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0b6:	4b6d      	ldr	r3, [pc, #436]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	496a      	ldr	r1, [pc, #424]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0310 	and.w	r3, r3, #16
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d010      	beq.n	800b0f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699a      	ldr	r2, [r3, #24]
 800b0d8:	4b64      	ldr	r3, [pc, #400]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d908      	bls.n	800b0f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0e4:	4b61      	ldr	r3, [pc, #388]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	495e      	ldr	r1, [pc, #376]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d010      	beq.n	800b124 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69da      	ldr	r2, [r3, #28]
 800b106:	4b59      	ldr	r3, [pc, #356]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b10e:	429a      	cmp	r2, r3
 800b110:	d908      	bls.n	800b124 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b112:	4b56      	ldr	r3, [pc, #344]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	4953      	ldr	r1, [pc, #332]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b120:	4313      	orrs	r3, r2
 800b122:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d010      	beq.n	800b152 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	4b4d      	ldr	r3, [pc, #308]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	f003 030f 	and.w	r3, r3, #15
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d908      	bls.n	800b152 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b140:	4b4a      	ldr	r3, [pc, #296]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	f023 020f 	bic.w	r2, r3, #15
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	4947      	ldr	r1, [pc, #284]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d055      	beq.n	800b20a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b15e:	4b43      	ldr	r3, [pc, #268]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	4940      	ldr	r1, [pc, #256]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2b02      	cmp	r3, #2
 800b176:	d107      	bne.n	800b188 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b178:	4b3c      	ldr	r3, [pc, #240]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d121      	bne.n	800b1c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e0f6      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d107      	bne.n	800b1a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b190:	4b36      	ldr	r3, [pc, #216]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d115      	bne.n	800b1c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e0ea      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d107      	bne.n	800b1b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1a8:	4b30      	ldr	r3, [pc, #192]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d109      	bne.n	800b1c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e0de      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1b8:	4b2c      	ldr	r3, [pc, #176]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0d6      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1c8:	4b28      	ldr	r3, [pc, #160]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f023 0207 	bic.w	r2, r3, #7
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	4925      	ldr	r1, [pc, #148]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1da:	f7fb ff47 	bl	800706c <HAL_GetTick>
 800b1de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1e0:	e00a      	b.n	800b1f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1e2:	f7fb ff43 	bl	800706c <HAL_GetTick>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d901      	bls.n	800b1f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e0be      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1f8:	4b1c      	ldr	r3, [pc, #112]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	429a      	cmp	r2, r3
 800b208:	d1eb      	bne.n	800b1e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b00      	cmp	r3, #0
 800b214:	d010      	beq.n	800b238 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	4b14      	ldr	r3, [pc, #80]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	f003 030f 	and.w	r3, r3, #15
 800b222:	429a      	cmp	r2, r3
 800b224:	d208      	bcs.n	800b238 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b226:	4b11      	ldr	r3, [pc, #68]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f023 020f 	bic.w	r2, r3, #15
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	490e      	ldr	r1, [pc, #56]	; (800b26c <HAL_RCC_ClockConfig+0x244>)
 800b234:	4313      	orrs	r3, r2
 800b236:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b238:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 030f 	and.w	r3, r3, #15
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d214      	bcs.n	800b270 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b246:	4b08      	ldr	r3, [pc, #32]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f023 020f 	bic.w	r2, r3, #15
 800b24e:	4906      	ldr	r1, [pc, #24]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	4313      	orrs	r3, r2
 800b254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b256:	4b04      	ldr	r3, [pc, #16]	; (800b268 <HAL_RCC_ClockConfig+0x240>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 030f 	and.w	r3, r3, #15
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	429a      	cmp	r2, r3
 800b262:	d005      	beq.n	800b270 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e086      	b.n	800b376 <HAL_RCC_ClockConfig+0x34e>
 800b268:	52002000 	.word	0x52002000
 800b26c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d010      	beq.n	800b29e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	4b3f      	ldr	r3, [pc, #252]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b288:	429a      	cmp	r2, r3
 800b28a:	d208      	bcs.n	800b29e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b28c:	4b3c      	ldr	r3, [pc, #240]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	4939      	ldr	r1, [pc, #228]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d010      	beq.n	800b2cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695a      	ldr	r2, [r3, #20]
 800b2ae:	4b34      	ldr	r3, [pc, #208]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d208      	bcs.n	800b2cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2ba:	4b31      	ldr	r3, [pc, #196]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	492e      	ldr	r1, [pc, #184]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0310 	and.w	r3, r3, #16
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d010      	beq.n	800b2fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699a      	ldr	r2, [r3, #24]
 800b2dc:	4b28      	ldr	r3, [pc, #160]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d208      	bcs.n	800b2fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2e8:	4b25      	ldr	r3, [pc, #148]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	4922      	ldr	r1, [pc, #136]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	d010      	beq.n	800b328 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69da      	ldr	r2, [r3, #28]
 800b30a:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b312:	429a      	cmp	r2, r3
 800b314:	d208      	bcs.n	800b328 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b316:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	4917      	ldr	r1, [pc, #92]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b324:	4313      	orrs	r3, r2
 800b326:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b328:	f000 f834 	bl	800b394 <HAL_RCC_GetSysClockFreq>
 800b32c:	4602      	mov	r2, r0
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	0a1b      	lsrs	r3, r3, #8
 800b334:	f003 030f 	and.w	r3, r3, #15
 800b338:	4912      	ldr	r1, [pc, #72]	; (800b384 <HAL_RCC_ClockConfig+0x35c>)
 800b33a:	5ccb      	ldrb	r3, [r1, r3]
 800b33c:	f003 031f 	and.w	r3, r3, #31
 800b340:	fa22 f303 	lsr.w	r3, r2, r3
 800b344:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b346:	4b0e      	ldr	r3, [pc, #56]	; (800b380 <HAL_RCC_ClockConfig+0x358>)
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	f003 030f 	and.w	r3, r3, #15
 800b34e:	4a0d      	ldr	r2, [pc, #52]	; (800b384 <HAL_RCC_ClockConfig+0x35c>)
 800b350:	5cd3      	ldrb	r3, [r2, r3]
 800b352:	f003 031f 	and.w	r3, r3, #31
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	fa22 f303 	lsr.w	r3, r2, r3
 800b35c:	4a0a      	ldr	r2, [pc, #40]	; (800b388 <HAL_RCC_ClockConfig+0x360>)
 800b35e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b360:	4a0a      	ldr	r2, [pc, #40]	; (800b38c <HAL_RCC_ClockConfig+0x364>)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b366:	4b0a      	ldr	r3, [pc, #40]	; (800b390 <HAL_RCC_ClockConfig+0x368>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fb fe34 	bl	8006fd8 <HAL_InitTick>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	58024400 	.word	0x58024400
 800b384:	0801525c 	.word	0x0801525c
 800b388:	24000234 	.word	0x24000234
 800b38c:	24000230 	.word	0x24000230
 800b390:	24000238 	.word	0x24000238

0800b394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b394:	b480      	push	{r7}
 800b396:	b089      	sub	sp, #36	; 0x24
 800b398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b39a:	4bb3      	ldr	r3, [pc, #716]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3a2:	2b18      	cmp	r3, #24
 800b3a4:	f200 8155 	bhi.w	800b652 <HAL_RCC_GetSysClockFreq+0x2be>
 800b3a8:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b415 	.word	0x0800b415
 800b3b4:	0800b653 	.word	0x0800b653
 800b3b8:	0800b653 	.word	0x0800b653
 800b3bc:	0800b653 	.word	0x0800b653
 800b3c0:	0800b653 	.word	0x0800b653
 800b3c4:	0800b653 	.word	0x0800b653
 800b3c8:	0800b653 	.word	0x0800b653
 800b3cc:	0800b653 	.word	0x0800b653
 800b3d0:	0800b43b 	.word	0x0800b43b
 800b3d4:	0800b653 	.word	0x0800b653
 800b3d8:	0800b653 	.word	0x0800b653
 800b3dc:	0800b653 	.word	0x0800b653
 800b3e0:	0800b653 	.word	0x0800b653
 800b3e4:	0800b653 	.word	0x0800b653
 800b3e8:	0800b653 	.word	0x0800b653
 800b3ec:	0800b653 	.word	0x0800b653
 800b3f0:	0800b441 	.word	0x0800b441
 800b3f4:	0800b653 	.word	0x0800b653
 800b3f8:	0800b653 	.word	0x0800b653
 800b3fc:	0800b653 	.word	0x0800b653
 800b400:	0800b653 	.word	0x0800b653
 800b404:	0800b653 	.word	0x0800b653
 800b408:	0800b653 	.word	0x0800b653
 800b40c:	0800b653 	.word	0x0800b653
 800b410:	0800b447 	.word	0x0800b447
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b414:	4b94      	ldr	r3, [pc, #592]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0320 	and.w	r3, r3, #32
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b420:	4b91      	ldr	r3, [pc, #580]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	08db      	lsrs	r3, r3, #3
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	4a90      	ldr	r2, [pc, #576]	; (800b66c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b42c:	fa22 f303 	lsr.w	r3, r2, r3
 800b430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b432:	e111      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b434:	4b8d      	ldr	r3, [pc, #564]	; (800b66c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b436:	61bb      	str	r3, [r7, #24]
    break;
 800b438:	e10e      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b43a:	4b8d      	ldr	r3, [pc, #564]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b43c:	61bb      	str	r3, [r7, #24]
    break;
 800b43e:	e10b      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b440:	4b8c      	ldr	r3, [pc, #560]	; (800b674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b442:	61bb      	str	r3, [r7, #24]
    break;
 800b444:	e108      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b446:	4b88      	ldr	r3, [pc, #544]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	f003 0303 	and.w	r3, r3, #3
 800b44e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b450:	4b85      	ldr	r3, [pc, #532]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b454:	091b      	lsrs	r3, r3, #4
 800b456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b45a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b45c:	4b82      	ldr	r3, [pc, #520]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b466:	4b80      	ldr	r3, [pc, #512]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46a:	08db      	lsrs	r3, r3, #3
 800b46c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	fb02 f303 	mul.w	r3, r2, r3
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 80e1 	beq.w	800b64c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	f000 8083 	beq.w	800b598 <HAL_RCC_GetSysClockFreq+0x204>
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b02      	cmp	r3, #2
 800b496:	f200 80a1 	bhi.w	800b5dc <HAL_RCC_GetSysClockFreq+0x248>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x114>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d056      	beq.n	800b554 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4a6:	e099      	b.n	800b5dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a8:	4b6f      	ldr	r3, [pc, #444]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d02d      	beq.n	800b510 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4b4:	4b6c      	ldr	r3, [pc, #432]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	4a6b      	ldr	r2, [pc, #428]	; (800b66c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4de:	4b62      	ldr	r3, [pc, #392]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b50e:	e087      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b67c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b522:	4b51      	ldr	r3, [pc, #324]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b532:	ed97 6a02 	vldr	s12, [r7, #8]
 800b536:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b552:	e065      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b40      	ldr	r3, [pc, #256]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a02 	vldr	s12, [r7, #8]
 800b57a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b596:	e043      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b684 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b2f      	ldr	r3, [pc, #188]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5da:	e021      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ee:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b602:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b620:	4b11      	ldr	r3, [pc, #68]	; (800b668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b624:	0a5b      	lsrs	r3, r3, #9
 800b626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62a:	3301      	adds	r3, #1
 800b62c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	ee07 3a90 	vmov	s15, r3
 800b634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b638:	edd7 6a07 	vldr	s13, [r7, #28]
 800b63c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b644:	ee17 3a90 	vmov	r3, s15
 800b648:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b64a:	e005      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b64c:	2300      	movs	r3, #0
 800b64e:	61bb      	str	r3, [r7, #24]
    break;
 800b650:	e002      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b652:	4b07      	ldr	r3, [pc, #28]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b654:	61bb      	str	r3, [r7, #24]
    break;
 800b656:	bf00      	nop
  }

  return sysclockfreq;
 800b658:	69bb      	ldr	r3, [r7, #24]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3724      	adds	r7, #36	; 0x24
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	58024400 	.word	0x58024400
 800b66c:	03d09000 	.word	0x03d09000
 800b670:	003d0900 	.word	0x003d0900
 800b674:	02dc6c00 	.word	0x02dc6c00
 800b678:	46000000 	.word	0x46000000
 800b67c:	4c742400 	.word	0x4c742400
 800b680:	4a742400 	.word	0x4a742400
 800b684:	4c371b00 	.word	0x4c371b00

0800b688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b68e:	f7ff fe81 	bl	800b394 <HAL_RCC_GetSysClockFreq>
 800b692:	4602      	mov	r2, r0
 800b694:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	0a1b      	lsrs	r3, r3, #8
 800b69a:	f003 030f 	and.w	r3, r3, #15
 800b69e:	490f      	ldr	r1, [pc, #60]	; (800b6dc <HAL_RCC_GetHCLKFreq+0x54>)
 800b6a0:	5ccb      	ldrb	r3, [r1, r3]
 800b6a2:	f003 031f 	and.w	r3, r3, #31
 800b6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	f003 030f 	and.w	r3, r3, #15
 800b6b4:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <HAL_RCC_GetHCLKFreq+0x54>)
 800b6b6:	5cd3      	ldrb	r3, [r2, r3]
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c2:	4a07      	ldr	r2, [pc, #28]	; (800b6e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6c6:	4a07      	ldr	r2, [pc, #28]	; (800b6e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6cc:	4b04      	ldr	r3, [pc, #16]	; (800b6e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	58024400 	.word	0x58024400
 800b6dc:	0801525c 	.word	0x0801525c
 800b6e0:	24000234 	.word	0x24000234
 800b6e4:	24000230 	.word	0x24000230

0800b6e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b6ec:	f7ff ffcc 	bl	800b688 <HAL_RCC_GetHCLKFreq>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	4b06      	ldr	r3, [pc, #24]	; (800b70c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	091b      	lsrs	r3, r3, #4
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	4904      	ldr	r1, [pc, #16]	; (800b710 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b6fe:	5ccb      	ldrb	r3, [r1, r3]
 800b700:	f003 031f 	and.w	r3, r3, #31
 800b704:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b708:	4618      	mov	r0, r3
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	58024400 	.word	0x58024400
 800b710:	0801525c 	.word	0x0801525c

0800b714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b718:	f7ff ffb6 	bl	800b688 <HAL_RCC_GetHCLKFreq>
 800b71c:	4602      	mov	r2, r0
 800b71e:	4b06      	ldr	r3, [pc, #24]	; (800b738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	0a1b      	lsrs	r3, r3, #8
 800b724:	f003 0307 	and.w	r3, r3, #7
 800b728:	4904      	ldr	r1, [pc, #16]	; (800b73c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b72a:	5ccb      	ldrb	r3, [r1, r3]
 800b72c:	f003 031f 	and.w	r3, r3, #31
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b734:	4618      	mov	r0, r3
 800b736:	bd80      	pop	{r7, pc}
 800b738:	58024400 	.word	0x58024400
 800b73c:	0801525c 	.word	0x0801525c

0800b740 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b748:	2300      	movs	r3, #0
 800b74a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b74c:	2300      	movs	r3, #0
 800b74e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d03f      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b764:	d02a      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b76a:	d824      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b76c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b770:	d018      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b776:	d81e      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b77c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b780:	d007      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b782:	e018      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b784:	4ba3      	ldr	r3, [pc, #652]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	4aa2      	ldr	r2, [pc, #648]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b78a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b78e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b790:	e015      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	3304      	adds	r3, #4
 800b796:	2102      	movs	r1, #2
 800b798:	4618      	mov	r0, r3
 800b79a:	f001 f9d5 	bl	800cb48 <RCCEx_PLL2_Config>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7a2:	e00c      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3324      	adds	r3, #36	; 0x24
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 fa7e 	bl	800ccac <RCCEx_PLL3_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7b4:	e003      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ba:	e000      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b7bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d109      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b7c4:	4b93      	ldr	r3, [pc, #588]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d0:	4990      	ldr	r1, [pc, #576]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	650b      	str	r3, [r1, #80]	; 0x50
 800b7d6:	e001      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d03d      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d826      	bhi.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b7f0:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f6:	bf00      	nop
 800b7f8:	0800b80d 	.word	0x0800b80d
 800b7fc:	0800b81b 	.word	0x0800b81b
 800b800:	0800b82d 	.word	0x0800b82d
 800b804:	0800b845 	.word	0x0800b845
 800b808:	0800b845 	.word	0x0800b845
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b80c:	4b81      	ldr	r3, [pc, #516]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b810:	4a80      	ldr	r2, [pc, #512]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b818:	e015      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3304      	adds	r3, #4
 800b81e:	2100      	movs	r1, #0
 800b820:	4618      	mov	r0, r3
 800b822:	f001 f991 	bl	800cb48 <RCCEx_PLL2_Config>
 800b826:	4603      	mov	r3, r0
 800b828:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b82a:	e00c      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3324      	adds	r3, #36	; 0x24
 800b830:	2100      	movs	r1, #0
 800b832:	4618      	mov	r0, r3
 800b834:	f001 fa3a 	bl	800ccac <RCCEx_PLL3_Config>
 800b838:	4603      	mov	r3, r0
 800b83a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b83c:	e003      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	75fb      	strb	r3, [r7, #23]
      break;
 800b842:	e000      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b844:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d109      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b84c:	4b71      	ldr	r3, [pc, #452]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b850:	f023 0207 	bic.w	r2, r3, #7
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b858:	496e      	ldr	r1, [pc, #440]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	650b      	str	r3, [r1, #80]	; 0x50
 800b85e:	e001      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d042      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b878:	d02b      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b87e:	d825      	bhi.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b880:	2bc0      	cmp	r3, #192	; 0xc0
 800b882:	d028      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b884:	2bc0      	cmp	r3, #192	; 0xc0
 800b886:	d821      	bhi.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b888:	2b80      	cmp	r3, #128	; 0x80
 800b88a:	d016      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b88c:	2b80      	cmp	r3, #128	; 0x80
 800b88e:	d81d      	bhi.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b894:	2b40      	cmp	r3, #64	; 0x40
 800b896:	d007      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b898:	e018      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b89a:	4b5e      	ldr	r3, [pc, #376]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89e:	4a5d      	ldr	r2, [pc, #372]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8a6:	e017      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f001 f94a 	bl	800cb48 <RCCEx_PLL2_Config>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8b8:	e00e      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3324      	adds	r3, #36	; 0x24
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f9f3 	bl	800ccac <RCCEx_PLL3_Config>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8ca:	e005      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b8d0:	e002      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b8d2:	bf00      	nop
 800b8d4:	e000      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b8d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d109      	bne.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b8de:	4b4d      	ldr	r3, [pc, #308]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ea:	494a      	ldr	r1, [pc, #296]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	650b      	str	r3, [r1, #80]	; 0x50
 800b8f0:	e001      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d049      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b90c:	d030      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b90e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b912:	d82a      	bhi.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b914:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b918:	d02c      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b91a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b91e:	d824      	bhi.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b924:	d018      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b92a:	d81e      	bhi.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b934:	d007      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b936:	e018      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b938:	4b36      	ldr	r3, [pc, #216]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93c:	4a35      	ldr	r2, [pc, #212]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b944:	e017      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3304      	adds	r3, #4
 800b94a:	2100      	movs	r1, #0
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 f8fb 	bl	800cb48 <RCCEx_PLL2_Config>
 800b952:	4603      	mov	r3, r0
 800b954:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b956:	e00e      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3324      	adds	r3, #36	; 0x24
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 f9a4 	bl	800ccac <RCCEx_PLL3_Config>
 800b964:	4603      	mov	r3, r0
 800b966:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b968:	e005      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
      break;
 800b96e:	e002      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b970:	bf00      	nop
 800b972:	e000      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b974:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b97c:	4b25      	ldr	r3, [pc, #148]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b980:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b98a:	4922      	ldr	r1, [pc, #136]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	658b      	str	r3, [r1, #88]	; 0x58
 800b990:	e001      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d04b      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9ac:	d030      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b9ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9b2:	d82a      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9b8:	d02e      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b9ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9be:	d824      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9c4:	d018      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b9c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9ca:	d81e      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b9d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9d4:	d007      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b9d6:	e018      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	4a0d      	ldr	r2, [pc, #52]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9e4:	e019      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 f8ab 	bl	800cb48 <RCCEx_PLL2_Config>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b9f6:	e010      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3324      	adds	r3, #36	; 0x24
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 f954 	bl	800ccac <RCCEx_PLL3_Config>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba08:	e007      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba0e:	e004      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800ba10:	bf00      	nop
 800ba12:	e002      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ba14:	58024400 	.word	0x58024400
      break;
 800ba18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10a      	bne.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba20:	4b99      	ldr	r3, [pc, #612]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba2e:	4996      	ldr	r1, [pc, #600]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	658b      	str	r3, [r1, #88]	; 0x58
 800ba34:	e001      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d032      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba4a:	2b30      	cmp	r3, #48	; 0x30
 800ba4c:	d01c      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800ba4e:	2b30      	cmp	r3, #48	; 0x30
 800ba50:	d817      	bhi.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	d00c      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	d813      	bhi.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d016      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ba5e:	2b10      	cmp	r3, #16
 800ba60:	d10f      	bne.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba62:	4b89      	ldr	r3, [pc, #548]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba66:	4a88      	ldr	r2, [pc, #544]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ba6e:	e00e      	b.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3304      	adds	r3, #4
 800ba74:	2102      	movs	r1, #2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f001 f866 	bl	800cb48 <RCCEx_PLL2_Config>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ba80:	e005      	b.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	75fb      	strb	r3, [r7, #23]
      break;
 800ba86:	e002      	b.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ba88:	bf00      	nop
 800ba8a:	e000      	b.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ba8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d109      	bne.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ba94:	4b7c      	ldr	r3, [pc, #496]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baa0:	4979      	ldr	r1, [pc, #484]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800baa6:	e001      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d047      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800babc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bac0:	d030      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bac6:	d82a      	bhi.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bacc:	d02c      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800bace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bad2:	d824      	bhi.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bad8:	d018      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bade:	d81e      	bhi.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae8:	d007      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800baea:	e018      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baec:	4b66      	ldr	r3, [pc, #408]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	4a65      	ldr	r2, [pc, #404]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800baf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800baf8:	e017      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	3304      	adds	r3, #4
 800bafe:	2100      	movs	r1, #0
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 f821 	bl	800cb48 <RCCEx_PLL2_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb0a:	e00e      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3324      	adds	r3, #36	; 0x24
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f001 f8ca 	bl	800ccac <RCCEx_PLL3_Config>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb1c:	e005      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	75fb      	strb	r3, [r7, #23]
      break;
 800bb22:	e002      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bb24:	bf00      	nop
 800bb26:	e000      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bb28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d109      	bne.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb30:	4b55      	ldr	r3, [pc, #340]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb3c:	4952      	ldr	r1, [pc, #328]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	650b      	str	r3, [r1, #80]	; 0x50
 800bb42:	e001      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d049      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb5c:	d02e      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bb5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb62:	d828      	bhi.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb68:	d02a      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bb6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb6e:	d822      	bhi.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb74:	d026      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bb76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb7a:	d81c      	bhi.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb80:	d010      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800bb82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb86:	d816      	bhi.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d01d      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bb8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb90:	d111      	bne.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3304      	adds	r3, #4
 800bb96:	2101      	movs	r1, #1
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f000 ffd5 	bl	800cb48 <RCCEx_PLL2_Config>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bba2:	e012      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3324      	adds	r3, #36	; 0x24
 800bba8:	2101      	movs	r1, #1
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f001 f87e 	bl	800ccac <RCCEx_PLL3_Config>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bbb4:	e009      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	75fb      	strb	r3, [r7, #23]
      break;
 800bbba:	e006      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbbc:	bf00      	nop
 800bbbe:	e004      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbc0:	bf00      	nop
 800bbc2:	e002      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbc4:	bf00      	nop
 800bbc6:	e000      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bbd0:	4b2d      	ldr	r3, [pc, #180]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbdc:	492a      	ldr	r1, [pc, #168]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	650b      	str	r3, [r1, #80]	; 0x50
 800bbe2:	e001      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d04d      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbfe:	d02e      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bc00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc04:	d828      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0a:	d02a      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bc0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc10:	d822      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc16:	d026      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bc18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc1c:	d81c      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc22:	d010      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bc24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc28:	d816      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d01d      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bc2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc32:	d111      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3304      	adds	r3, #4
 800bc38:	2101      	movs	r1, #1
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 ff84 	bl	800cb48 <RCCEx_PLL2_Config>
 800bc40:	4603      	mov	r3, r0
 800bc42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc44:	e012      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3324      	adds	r3, #36	; 0x24
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f001 f82d 	bl	800ccac <RCCEx_PLL3_Config>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc56:	e009      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc5c:	e006      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc5e:	bf00      	nop
 800bc60:	e004      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc62:	bf00      	nop
 800bc64:	e002      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc66:	bf00      	nop
 800bc68:	e000      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10c      	bne.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc72:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc80:	4901      	ldr	r1, [pc, #4]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	658b      	str	r3, [r1, #88]	; 0x58
 800bc86:	e003      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bc88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02f      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca4:	d00e      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcaa:	d814      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d015      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bcb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcb4:	d10f      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb6:	4baf      	ldr	r3, [pc, #700]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcba:	4aae      	ldr	r2, [pc, #696]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bcc2:	e00c      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	2101      	movs	r1, #1
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 ff3c 	bl	800cb48 <RCCEx_PLL2_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bcd4:	e003      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	75fb      	strb	r3, [r7, #23]
      break;
 800bcda:	e000      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bcdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d109      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bce4:	4ba3      	ldr	r3, [pc, #652]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf0:	49a0      	ldr	r1, [pc, #640]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	650b      	str	r3, [r1, #80]	; 0x50
 800bcf6:	e001      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d032      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d81b      	bhi.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bd10:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800bd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd16:	bf00      	nop
 800bd18:	0800bd4f 	.word	0x0800bd4f
 800bd1c:	0800bd29 	.word	0x0800bd29
 800bd20:	0800bd37 	.word	0x0800bd37
 800bd24:	0800bd4f 	.word	0x0800bd4f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd28:	4b92      	ldr	r3, [pc, #584]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	4a91      	ldr	r2, [pc, #580]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd34:	e00c      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	2102      	movs	r1, #2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 ff03 	bl	800cb48 <RCCEx_PLL2_Config>
 800bd42:	4603      	mov	r3, r0
 800bd44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd46:	e003      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	75fb      	strb	r3, [r7, #23]
      break;
 800bd4c:	e000      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bd4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd56:	4b87      	ldr	r3, [pc, #540]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd5a:	f023 0203 	bic.w	r2, r3, #3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd62:	4984      	ldr	r1, [pc, #528]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bd68:	e001      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 8086 	beq.w	800be88 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd7c:	4b7e      	ldr	r3, [pc, #504]	; (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a7d      	ldr	r2, [pc, #500]	; (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bd82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd88:	f7fb f970 	bl	800706c <HAL_GetTick>
 800bd8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd8e:	e009      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd90:	f7fb f96c 	bl	800706c <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	2b64      	cmp	r3, #100	; 0x64
 800bd9c:	d902      	bls.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	75fb      	strb	r3, [r7, #23]
        break;
 800bda2:	e005      	b.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bda4:	4b74      	ldr	r3, [pc, #464]	; (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0ef      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d166      	bne.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bdb6:	4b6f      	ldr	r3, [pc, #444]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdc0:	4053      	eors	r3, r2
 800bdc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d013      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdca:	4b6a      	ldr	r3, [pc, #424]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdd2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdd4:	4b67      	ldr	r3, [pc, #412]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd8:	4a66      	ldr	r2, [pc, #408]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdde:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bde0:	4b64      	ldr	r3, [pc, #400]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bde2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde4:	4a63      	ldr	r2, [pc, #396]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bde6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bdec:	4a61      	ldr	r2, [pc, #388]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdfc:	d115      	bne.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdfe:	f7fb f935 	bl	800706c <HAL_GetTick>
 800be02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be04:	e00b      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be06:	f7fb f931 	bl	800706c <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	f241 3288 	movw	r2, #5000	; 0x1388
 800be14:	4293      	cmp	r3, r2
 800be16:	d902      	bls.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	75fb      	strb	r3, [r7, #23]
            break;
 800be1c:	e005      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be1e:	4b55      	ldr	r3, [pc, #340]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be22:	f003 0302 	and.w	r3, r3, #2
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0ed      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d126      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be3e:	d10d      	bne.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800be40:	4b4c      	ldr	r3, [pc, #304]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be4e:	0919      	lsrs	r1, r3, #4
 800be50:	4b4a      	ldr	r3, [pc, #296]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800be52:	400b      	ands	r3, r1
 800be54:	4947      	ldr	r1, [pc, #284]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be56:	4313      	orrs	r3, r2
 800be58:	610b      	str	r3, [r1, #16]
 800be5a:	e005      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800be5c:	4b45      	ldr	r3, [pc, #276]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	4a44      	ldr	r2, [pc, #272]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be66:	6113      	str	r3, [r2, #16]
 800be68:	4b42      	ldr	r3, [pc, #264]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be76:	493f      	ldr	r1, [pc, #252]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	670b      	str	r3, [r1, #112]	; 0x70
 800be7c:	e004      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	75bb      	strb	r3, [r7, #22]
 800be82:	e001      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 8085 	beq.w	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be9a:	2b28      	cmp	r3, #40	; 0x28
 800be9c:	d866      	bhi.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bf81 	.word	0x0800bf81
 800bea8:	0800bf6d 	.word	0x0800bf6d
 800beac:	0800bf6d 	.word	0x0800bf6d
 800beb0:	0800bf6d 	.word	0x0800bf6d
 800beb4:	0800bf6d 	.word	0x0800bf6d
 800beb8:	0800bf6d 	.word	0x0800bf6d
 800bebc:	0800bf6d 	.word	0x0800bf6d
 800bec0:	0800bf6d 	.word	0x0800bf6d
 800bec4:	0800bf49 	.word	0x0800bf49
 800bec8:	0800bf6d 	.word	0x0800bf6d
 800becc:	0800bf6d 	.word	0x0800bf6d
 800bed0:	0800bf6d 	.word	0x0800bf6d
 800bed4:	0800bf6d 	.word	0x0800bf6d
 800bed8:	0800bf6d 	.word	0x0800bf6d
 800bedc:	0800bf6d 	.word	0x0800bf6d
 800bee0:	0800bf6d 	.word	0x0800bf6d
 800bee4:	0800bf5b 	.word	0x0800bf5b
 800bee8:	0800bf6d 	.word	0x0800bf6d
 800beec:	0800bf6d 	.word	0x0800bf6d
 800bef0:	0800bf6d 	.word	0x0800bf6d
 800bef4:	0800bf6d 	.word	0x0800bf6d
 800bef8:	0800bf6d 	.word	0x0800bf6d
 800befc:	0800bf6d 	.word	0x0800bf6d
 800bf00:	0800bf6d 	.word	0x0800bf6d
 800bf04:	0800bf81 	.word	0x0800bf81
 800bf08:	0800bf6d 	.word	0x0800bf6d
 800bf0c:	0800bf6d 	.word	0x0800bf6d
 800bf10:	0800bf6d 	.word	0x0800bf6d
 800bf14:	0800bf6d 	.word	0x0800bf6d
 800bf18:	0800bf6d 	.word	0x0800bf6d
 800bf1c:	0800bf6d 	.word	0x0800bf6d
 800bf20:	0800bf6d 	.word	0x0800bf6d
 800bf24:	0800bf81 	.word	0x0800bf81
 800bf28:	0800bf6d 	.word	0x0800bf6d
 800bf2c:	0800bf6d 	.word	0x0800bf6d
 800bf30:	0800bf6d 	.word	0x0800bf6d
 800bf34:	0800bf6d 	.word	0x0800bf6d
 800bf38:	0800bf6d 	.word	0x0800bf6d
 800bf3c:	0800bf6d 	.word	0x0800bf6d
 800bf40:	0800bf6d 	.word	0x0800bf6d
 800bf44:	0800bf81 	.word	0x0800bf81
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 fdfa 	bl	800cb48 <RCCEx_PLL2_Config>
 800bf54:	4603      	mov	r3, r0
 800bf56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bf58:	e013      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	3324      	adds	r3, #36	; 0x24
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fea3 	bl	800ccac <RCCEx_PLL3_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bf6a:	e00a      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf70:	e007      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800bf72:	bf00      	nop
 800bf74:	58024400 	.word	0x58024400
 800bf78:	58024800 	.word	0x58024800
 800bf7c:	00ffffcf 	.word	0x00ffffcf
      break;
 800bf80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf88:	4b96      	ldr	r3, [pc, #600]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bf8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf8c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf94:	4993      	ldr	r1, [pc, #588]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	654b      	str	r3, [r1, #84]	; 0x54
 800bf9a:	e001      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d038      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfb0:	2b05      	cmp	r3, #5
 800bfb2:	d821      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800bfb4:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfba:	bf00      	nop
 800bfbc:	0800bfff 	.word	0x0800bfff
 800bfc0:	0800bfd5 	.word	0x0800bfd5
 800bfc4:	0800bfe7 	.word	0x0800bfe7
 800bfc8:	0800bfff 	.word	0x0800bfff
 800bfcc:	0800bfff 	.word	0x0800bfff
 800bfd0:	0800bfff 	.word	0x0800bfff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	2101      	movs	r1, #1
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fdb4 	bl	800cb48 <RCCEx_PLL2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bfe4:	e00c      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	3324      	adds	r3, #36	; 0x24
 800bfea:	2101      	movs	r1, #1
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fe5d 	bl	800ccac <RCCEx_PLL3_Config>
 800bff2:	4603      	mov	r3, r0
 800bff4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bff6:	e003      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	75fb      	strb	r3, [r7, #23]
      break;
 800bffc:	e000      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800bffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c006:	4b77      	ldr	r3, [pc, #476]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00a:	f023 0207 	bic.w	r2, r3, #7
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c012:	4974      	ldr	r1, [pc, #464]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c014:	4313      	orrs	r3, r2
 800c016:	654b      	str	r3, [r1, #84]	; 0x54
 800c018:	e001      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c01a:	7dfb      	ldrb	r3, [r7, #23]
 800c01c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 0304 	and.w	r3, r3, #4
 800c026:	2b00      	cmp	r3, #0
 800c028:	d03a      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c030:	2b05      	cmp	r3, #5
 800c032:	d821      	bhi.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c034:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03a:	bf00      	nop
 800c03c:	0800c07f 	.word	0x0800c07f
 800c040:	0800c055 	.word	0x0800c055
 800c044:	0800c067 	.word	0x0800c067
 800c048:	0800c07f 	.word	0x0800c07f
 800c04c:	0800c07f 	.word	0x0800c07f
 800c050:	0800c07f 	.word	0x0800c07f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	2101      	movs	r1, #1
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fd74 	bl	800cb48 <RCCEx_PLL2_Config>
 800c060:	4603      	mov	r3, r0
 800c062:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c064:	e00c      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3324      	adds	r3, #36	; 0x24
 800c06a:	2101      	movs	r1, #1
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fe1d 	bl	800ccac <RCCEx_PLL3_Config>
 800c072:	4603      	mov	r3, r0
 800c074:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c076:	e003      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
      break;
 800c07c:	e000      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c07e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10a      	bne.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c086:	4b57      	ldr	r3, [pc, #348]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c08a:	f023 0207 	bic.w	r2, r3, #7
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c094:	4953      	ldr	r1, [pc, #332]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c096:	4313      	orrs	r3, r2
 800c098:	658b      	str	r3, [r1, #88]	; 0x58
 800c09a:	e001      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0320 	and.w	r3, r3, #32
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d04b      	beq.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0b6:	d02e      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0bc:	d828      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0c2:	d02a      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0c8:	d822      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ce:	d026      	beq.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c0d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0d4:	d81c      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0da:	d010      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c0dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e0:	d816      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d01d      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c0e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0ea:	d111      	bne.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 fd28 	bl	800cb48 <RCCEx_PLL2_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c0fc:	e012      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	3324      	adds	r3, #36	; 0x24
 800c102:	2102      	movs	r1, #2
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fdd1 	bl	800ccac <RCCEx_PLL3_Config>
 800c10a:	4603      	mov	r3, r0
 800c10c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c10e:	e009      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	75fb      	strb	r3, [r7, #23]
      break;
 800c114:	e006      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c116:	bf00      	nop
 800c118:	e004      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c11a:	bf00      	nop
 800c11c:	e002      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c11e:	bf00      	nop
 800c120:	e000      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c122:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c124:	7dfb      	ldrb	r3, [r7, #23]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10a      	bne.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c12a:	4b2e      	ldr	r3, [pc, #184]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c12e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c138:	492a      	ldr	r1, [pc, #168]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	654b      	str	r3, [r1, #84]	; 0x54
 800c13e:	e001      	b.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c140:	7dfb      	ldrb	r3, [r7, #23]
 800c142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d04d      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c156:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c15a:	d02e      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c15c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c160:	d828      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c166:	d02a      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16c:	d822      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c16e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c172:	d026      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c178:	d81c      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c17a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c17e:	d010      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c184:	d816      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d01d      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c18a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c18e:	d111      	bne.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	2100      	movs	r1, #0
 800c196:	4618      	mov	r0, r3
 800c198:	f000 fcd6 	bl	800cb48 <RCCEx_PLL2_Config>
 800c19c:	4603      	mov	r3, r0
 800c19e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c1a0:	e012      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3324      	adds	r3, #36	; 0x24
 800c1a6:	2102      	movs	r1, #2
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 fd7f 	bl	800ccac <RCCEx_PLL3_Config>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c1b2:	e009      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c1b8:	e006      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1ba:	bf00      	nop
 800c1bc:	e004      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1be:	bf00      	nop
 800c1c0:	e002      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1c2:	bf00      	nop
 800c1c4:	e000      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10c      	bne.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1ce:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1dc:	4901      	ldr	r1, [pc, #4]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	658b      	str	r3, [r1, #88]	; 0x58
 800c1e2:	e003      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c1e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d04b      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c202:	d02e      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c208:	d828      	bhi.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c20a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c20e:	d02a      	beq.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c214:	d822      	bhi.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c216:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c21a:	d026      	beq.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c21c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c220:	d81c      	bhi.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c226:	d010      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c22c:	d816      	bhi.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d01d      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c236:	d111      	bne.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3304      	adds	r3, #4
 800c23c:	2100      	movs	r1, #0
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fc82 	bl	800cb48 <RCCEx_PLL2_Config>
 800c244:	4603      	mov	r3, r0
 800c246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c248:	e012      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3324      	adds	r3, #36	; 0x24
 800c24e:	2102      	movs	r1, #2
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fd2b 	bl	800ccac <RCCEx_PLL3_Config>
 800c256:	4603      	mov	r3, r0
 800c258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c25a:	e009      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	75fb      	strb	r3, [r7, #23]
      break;
 800c260:	e006      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c262:	bf00      	nop
 800c264:	e004      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c266:	bf00      	nop
 800c268:	e002      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c26a:	bf00      	nop
 800c26c:	e000      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c26e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10a      	bne.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c276:	4b9d      	ldr	r3, [pc, #628]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c27a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c284:	4999      	ldr	r1, [pc, #612]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c286:	4313      	orrs	r3, r2
 800c288:	658b      	str	r3, [r1, #88]	; 0x58
 800c28a:	e001      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0308 	and.w	r3, r3, #8
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d01a      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2a6:	d10a      	bne.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3324      	adds	r3, #36	; 0x24
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 fcfc 	bl	800ccac <RCCEx_PLL3_Config>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c2be:	4b8b      	ldr	r3, [pc, #556]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2cc:	4987      	ldr	r1, [pc, #540]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0310 	and.w	r3, r3, #16
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d01a      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e8:	d10a      	bne.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	3324      	adds	r3, #36	; 0x24
 800c2ee:	2102      	movs	r1, #2
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 fcdb 	bl	800ccac <RCCEx_PLL3_Config>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c300:	4b7a      	ldr	r3, [pc, #488]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c30e:	4977      	ldr	r1, [pc, #476]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c310:	4313      	orrs	r3, r2
 800c312:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d034      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c32a:	d01d      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c32c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c330:	d817      	bhi.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d003      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c33a:	d009      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c33c:	e011      	b.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3304      	adds	r3, #4
 800c342:	2100      	movs	r1, #0
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fbff 	bl	800cb48 <RCCEx_PLL2_Config>
 800c34a:	4603      	mov	r3, r0
 800c34c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c34e:	e00c      	b.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3324      	adds	r3, #36	; 0x24
 800c354:	2102      	movs	r1, #2
 800c356:	4618      	mov	r0, r3
 800c358:	f000 fca8 	bl	800ccac <RCCEx_PLL3_Config>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c360:	e003      	b.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	75fb      	strb	r3, [r7, #23]
      break;
 800c366:	e000      	b.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10a      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c370:	4b5e      	ldr	r3, [pc, #376]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c37e:	495b      	ldr	r1, [pc, #364]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c380:	4313      	orrs	r3, r2
 800c382:	658b      	str	r3, [r1, #88]	; 0x58
 800c384:	e001      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c386:	7dfb      	ldrb	r3, [r7, #23]
 800c388:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d033      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c39c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3a0:	d01c      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c3a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3a6:	d816      	bhi.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c3a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ac:	d003      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c3ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3b2:	d007      	beq.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c3b4:	e00f      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3b6:	4b4d      	ldr	r3, [pc, #308]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ba:	4a4c      	ldr	r2, [pc, #304]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c3c2:	e00c      	b.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3324      	adds	r3, #36	; 0x24
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fc6e 	bl	800ccac <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c3d4:	e003      	b.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3da:	e000      	b.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c3dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10a      	bne.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3e4:	4b41      	ldr	r3, [pc, #260]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f2:	493e      	ldr	r1, [pc, #248]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	654b      	str	r3, [r1, #84]	; 0x54
 800c3f8:	e001      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c406:	2b00      	cmp	r3, #0
 800c408:	d029      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c416:	d007      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c418:	e00f      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c41a:	4b34      	ldr	r3, [pc, #208]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41e:	4a33      	ldr	r2, [pc, #204]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c426:	e00b      	b.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	3304      	adds	r3, #4
 800c42c:	2102      	movs	r1, #2
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 fb8a 	bl	800cb48 <RCCEx_PLL2_Config>
 800c434:	4603      	mov	r3, r0
 800c436:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c438:	e002      	b.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	75fb      	strb	r3, [r7, #23]
      break;
 800c43e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c440:	7dfb      	ldrb	r3, [r7, #23]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d109      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c446:	4b29      	ldr	r3, [pc, #164]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c452:	4926      	ldr	r1, [pc, #152]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c454:	4313      	orrs	r3, r2
 800c456:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c458:	e001      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3324      	adds	r3, #36	; 0x24
 800c46e:	2102      	movs	r1, #2
 800c470:	4618      	mov	r0, r3
 800c472:	f000 fc1b 	bl	800ccac <RCCEx_PLL3_Config>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d033      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c494:	d017      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c49a:	d811      	bhi.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4a0:	d013      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c4a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4a6:	d80b      	bhi.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d010      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c4ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b0:	d106      	bne.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b6:	4a0d      	ldr	r2, [pc, #52]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c4be:	e007      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800c4c4:	e004      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4c6:	bf00      	nop
 800c4c8:	e002      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4ca:	bf00      	nop
 800c4cc:	e000      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10c      	bne.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c4d6:	4b05      	ldr	r3, [pc, #20]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e2:	4902      	ldr	r1, [pc, #8]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	654b      	str	r3, [r1, #84]	; 0x54
 800c4e8:	e004      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c4ea:	bf00      	nop
 800c4ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d008      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c500:	4b31      	ldr	r3, [pc, #196]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c50c:	492e      	ldr	r1, [pc, #184]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c50e:	4313      	orrs	r3, r2
 800c510:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c51e:	4b2a      	ldr	r3, [pc, #168]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c52c:	4926      	ldr	r1, [pc, #152]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c52e:	4313      	orrs	r3, r2
 800c530:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d008      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c53e:	4b22      	ldr	r3, [pc, #136]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c542:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c54a:	491f      	ldr	r1, [pc, #124]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c54c:	4313      	orrs	r3, r2
 800c54e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00d      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c55c:	4b1a      	ldr	r3, [pc, #104]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	4a19      	ldr	r2, [pc, #100]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c566:	6113      	str	r3, [r2, #16]
 800c568:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c56a:	691a      	ldr	r2, [r3, #16]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c572:	4915      	ldr	r1, [pc, #84]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c574:	4313      	orrs	r3, r2
 800c576:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	da08      	bge.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c580:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c584:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58c:	490e      	ldr	r1, [pc, #56]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d009      	beq.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c59e:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ac:	4906      	ldr	r1, [pc, #24]	; (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c5b2:	7dbb      	ldrb	r3, [r7, #22]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e000      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	58024400 	.word	0x58024400

0800c5cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c5d0:	f7ff f85a 	bl	800b688 <HAL_RCC_GetHCLKFreq>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	091b      	lsrs	r3, r3, #4
 800c5dc:	f003 0307 	and.w	r3, r3, #7
 800c5e0:	4904      	ldr	r1, [pc, #16]	; (800c5f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c5e2:	5ccb      	ldrb	r3, [r1, r3]
 800c5e4:	f003 031f 	and.w	r3, r3, #31
 800c5e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	58024400 	.word	0x58024400
 800c5f4:	0801525c 	.word	0x0801525c

0800c5f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b089      	sub	sp, #36	; 0x24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c600:	4ba1      	ldr	r3, [pc, #644]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c604:	f003 0303 	and.w	r3, r3, #3
 800c608:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c60a:	4b9f      	ldr	r3, [pc, #636]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60e:	0b1b      	lsrs	r3, r3, #12
 800c610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c614:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c616:	4b9c      	ldr	r3, [pc, #624]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61a:	091b      	lsrs	r3, r3, #4
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c622:	4b99      	ldr	r3, [pc, #612]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c626:	08db      	lsrs	r3, r3, #3
 800c628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	fb02 f303 	mul.w	r3, r2, r3
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 8111 	beq.w	800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	f000 8083 	beq.w	800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	2b02      	cmp	r3, #2
 800c652:	f200 80a1 	bhi.w	800c798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d056      	beq.n	800c710 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c662:	e099      	b.n	800c798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c664:	4b88      	ldr	r3, [pc, #544]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d02d      	beq.n	800c6cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c670:	4b85      	ldr	r3, [pc, #532]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	08db      	lsrs	r3, r3, #3
 800c676:	f003 0303 	and.w	r3, r3, #3
 800c67a:	4a84      	ldr	r2, [pc, #528]	; (800c88c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c67c:	fa22 f303 	lsr.w	r3, r2, r3
 800c680:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	ee07 3a90 	vmov	s15, r3
 800c688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c69a:	4b7b      	ldr	r3, [pc, #492]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a2:	ee07 3a90 	vmov	s15, r3
 800c6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c6ca:	e087      	b.n	800c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c894 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6de:	4b6a      	ldr	r3, [pc, #424]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e6:	ee07 3a90 	vmov	s15, r3
 800c6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c70a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c70e:	e065      	b.n	800c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c722:	4b59      	ldr	r3, [pc, #356]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c732:	ed97 6a03 	vldr	s12, [r7, #12]
 800c736:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c752:	e043      	b.n	800c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	ee07 3a90 	vmov	s15, r3
 800c75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c89c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c766:	4b48      	ldr	r3, [pc, #288]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c776:	ed97 6a03 	vldr	s12, [r7, #12]
 800c77a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c796:	e021      	b.n	800c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7aa:	4b37      	ldr	r3, [pc, #220]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c7dc:	4b2a      	ldr	r3, [pc, #168]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	0a5b      	lsrs	r3, r3, #9
 800c7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c802:	ee17 2a90 	vmov	r2, s15
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c80a:	4b1f      	ldr	r3, [pc, #124]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	0c1b      	lsrs	r3, r3, #16
 800c810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c814:	ee07 3a90 	vmov	s15, r3
 800c818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c820:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c824:	edd7 6a07 	vldr	s13, [r7, #28]
 800c828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c830:	ee17 2a90 	vmov	r2, s15
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c838:	4b13      	ldr	r3, [pc, #76]	; (800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83c:	0e1b      	lsrs	r3, r3, #24
 800c83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c84e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c852:	edd7 6a07 	vldr	s13, [r7, #28]
 800c856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c85e:	ee17 2a90 	vmov	r2, s15
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c866:	e008      	b.n	800c87a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	609a      	str	r2, [r3, #8]
}
 800c87a:	bf00      	nop
 800c87c:	3724      	adds	r7, #36	; 0x24
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	58024400 	.word	0x58024400
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	46000000 	.word	0x46000000
 800c894:	4c742400 	.word	0x4c742400
 800c898:	4a742400 	.word	0x4a742400
 800c89c:	4c371b00 	.word	0x4c371b00

0800c8a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b089      	sub	sp, #36	; 0x24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8a8:	4ba1      	ldr	r3, [pc, #644]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ac:	f003 0303 	and.w	r3, r3, #3
 800c8b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c8b2:	4b9f      	ldr	r3, [pc, #636]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b6:	0d1b      	lsrs	r3, r3, #20
 800c8b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8be:	4b9c      	ldr	r3, [pc, #624]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c2:	0a1b      	lsrs	r3, r3, #8
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c8ca:	4b99      	ldr	r3, [pc, #612]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ce:	08db      	lsrs	r3, r3, #3
 800c8d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8d4:	693a      	ldr	r2, [r7, #16]
 800c8d6:	fb02 f303 	mul.w	r3, r2, r3
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 8111 	beq.w	800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	f000 8083 	beq.w	800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	f200 80a1 	bhi.w	800ca40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d003      	beq.n	800c90c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d056      	beq.n	800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c90a:	e099      	b.n	800ca40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c90c:	4b88      	ldr	r3, [pc, #544]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0320 	and.w	r3, r3, #32
 800c914:	2b00      	cmp	r3, #0
 800c916:	d02d      	beq.n	800c974 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c918:	4b85      	ldr	r3, [pc, #532]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	08db      	lsrs	r3, r3, #3
 800c91e:	f003 0303 	and.w	r3, r3, #3
 800c922:	4a84      	ldr	r2, [pc, #528]	; (800cb34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c924:	fa22 f303 	lsr.w	r3, r2, r3
 800c928:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	ee07 3a90 	vmov	s15, r3
 800c930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c942:	4b7b      	ldr	r3, [pc, #492]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94a:	ee07 3a90 	vmov	s15, r3
 800c94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c952:	ed97 6a03 	vldr	s12, [r7, #12]
 800c956:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c96e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c972:	e087      	b.n	800ca84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	ee07 3a90 	vmov	s15, r3
 800c97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c986:	4b6a      	ldr	r3, [pc, #424]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98e:	ee07 3a90 	vmov	s15, r3
 800c992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c996:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9b6:	e065      	b.n	800ca84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ca:	4b59      	ldr	r3, [pc, #356]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d2:	ee07 3a90 	vmov	s15, r3
 800c9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9de:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9fa:	e043      	b.n	800ca84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	ee07 3a90 	vmov	s15, r3
 800ca02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0e:	4b48      	ldr	r3, [pc, #288]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca16:	ee07 3a90 	vmov	s15, r3
 800ca1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca3e:	e021      	b.n	800ca84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca52:	4b37      	ldr	r3, [pc, #220]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5a:	ee07 3a90 	vmov	s15, r3
 800ca5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ca84:	4b2a      	ldr	r3, [pc, #168]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca88:	0a5b      	lsrs	r3, r3, #9
 800ca8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800caa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caaa:	ee17 2a90 	vmov	r2, s15
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cab2:	4b1f      	ldr	r3, [pc, #124]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	0c1b      	lsrs	r3, r3, #16
 800cab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cabc:	ee07 3a90 	vmov	s15, r3
 800cac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cacc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad8:	ee17 2a90 	vmov	r2, s15
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cae0:	4b13      	ldr	r3, [pc, #76]	; (800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae4:	0e1b      	lsrs	r3, r3, #24
 800cae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caea:	ee07 3a90 	vmov	s15, r3
 800caee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cafa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb06:	ee17 2a90 	vmov	r2, s15
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb0e:	e008      	b.n	800cb22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	609a      	str	r2, [r3, #8]
}
 800cb22:	bf00      	nop
 800cb24:	3724      	adds	r7, #36	; 0x24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	58024400 	.word	0x58024400
 800cb34:	03d09000 	.word	0x03d09000
 800cb38:	46000000 	.word	0x46000000
 800cb3c:	4c742400 	.word	0x4c742400
 800cb40:	4a742400 	.word	0x4a742400
 800cb44:	4c371b00 	.word	0x4c371b00

0800cb48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb56:	4b53      	ldr	r3, [pc, #332]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5a:	f003 0303 	and.w	r3, r3, #3
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d101      	bne.n	800cb66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e099      	b.n	800cc9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb66:	4b4f      	ldr	r3, [pc, #316]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a4e      	ldr	r2, [pc, #312]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cb6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb72:	f7fa fa7b 	bl	800706c <HAL_GetTick>
 800cb76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb78:	e008      	b.n	800cb8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cb7a:	f7fa fa77 	bl	800706c <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d901      	bls.n	800cb8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e086      	b.n	800cc9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb8c:	4b45      	ldr	r3, [pc, #276]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1f0      	bne.n	800cb7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb98:	4b42      	ldr	r3, [pc, #264]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	031b      	lsls	r3, r3, #12
 800cba6:	493f      	ldr	r1, [pc, #252]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	628b      	str	r3, [r1, #40]	; 0x28
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	025b      	lsls	r3, r3, #9
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	431a      	orrs	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	041b      	lsls	r3, r3, #16
 800cbca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	061b      	lsls	r3, r3, #24
 800cbd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbdc:	4931      	ldr	r1, [pc, #196]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cbe2:	4b30      	ldr	r3, [pc, #192]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	492d      	ldr	r1, [pc, #180]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cbf4:	4b2b      	ldr	r3, [pc, #172]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf8:	f023 0220 	bic.w	r2, r3, #32
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	4928      	ldr	r1, [pc, #160]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc02:	4313      	orrs	r3, r2
 800cc04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cc06:	4b27      	ldr	r3, [pc, #156]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0a:	4a26      	ldr	r2, [pc, #152]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc0c:	f023 0310 	bic.w	r3, r3, #16
 800cc10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cc12:	4b24      	ldr	r3, [pc, #144]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc16:	4b24      	ldr	r3, [pc, #144]	; (800cca8 <RCCEx_PLL2_Config+0x160>)
 800cc18:	4013      	ands	r3, r2
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	69d2      	ldr	r2, [r2, #28]
 800cc1e:	00d2      	lsls	r2, r2, #3
 800cc20:	4920      	ldr	r1, [pc, #128]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc22:	4313      	orrs	r3, r2
 800cc24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc26:	4b1f      	ldr	r3, [pc, #124]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2a:	4a1e      	ldr	r2, [pc, #120]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc2c:	f043 0310 	orr.w	r3, r3, #16
 800cc30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d106      	bne.n	800cc46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc38:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	4a19      	ldr	r2, [pc, #100]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc44:	e00f      	b.n	800cc66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d106      	bne.n	800cc5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc4c:	4b15      	ldr	r3, [pc, #84]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc50:	4a14      	ldr	r2, [pc, #80]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc58:	e005      	b.n	800cc66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5e:	4a11      	ldr	r2, [pc, #68]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc66:	4b0f      	ldr	r3, [pc, #60]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a0e      	ldr	r2, [pc, #56]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc72:	f7fa f9fb 	bl	800706c <HAL_GetTick>
 800cc76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc78:	e008      	b.n	800cc8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cc7a:	f7fa f9f7 	bl	800706c <HAL_GetTick>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d901      	bls.n	800cc8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	e006      	b.n	800cc9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc8c:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <RCCEx_PLL2_Config+0x15c>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0f0      	beq.n	800cc7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	58024400 	.word	0x58024400
 800cca8:	ffff0007 	.word	0xffff0007

0800ccac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccba:	4b53      	ldr	r3, [pc, #332]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800ccbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d101      	bne.n	800ccca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e099      	b.n	800cdfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccca:	4b4f      	ldr	r3, [pc, #316]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a4e      	ldr	r2, [pc, #312]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800ccd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccd6:	f7fa f9c9 	bl	800706c <HAL_GetTick>
 800ccda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccdc:	e008      	b.n	800ccf0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ccde:	f7fa f9c5 	bl	800706c <HAL_GetTick>
 800cce2:	4602      	mov	r2, r0
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d901      	bls.n	800ccf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e086      	b.n	800cdfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccf0:	4b45      	ldr	r3, [pc, #276]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1f0      	bne.n	800ccde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ccfc:	4b42      	ldr	r3, [pc, #264]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800ccfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	051b      	lsls	r3, r3, #20
 800cd0a:	493f      	ldr	r1, [pc, #252]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	628b      	str	r3, [r1, #40]	; 0x28
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	3b01      	subs	r3, #1
 800cd16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	025b      	lsls	r3, r3, #9
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	431a      	orrs	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	041b      	lsls	r3, r3, #16
 800cd2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	061b      	lsls	r3, r3, #24
 800cd3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd40:	4931      	ldr	r1, [pc, #196]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd42:	4313      	orrs	r3, r2
 800cd44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd46:	4b30      	ldr	r3, [pc, #192]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	492d      	ldr	r1, [pc, #180]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd54:	4313      	orrs	r3, r2
 800cd56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd58:	4b2b      	ldr	r3, [pc, #172]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	4928      	ldr	r1, [pc, #160]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd66:	4313      	orrs	r3, r2
 800cd68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd6a:	4b27      	ldr	r3, [pc, #156]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	4a26      	ldr	r2, [pc, #152]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd76:	4b24      	ldr	r3, [pc, #144]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd7a:	4b24      	ldr	r3, [pc, #144]	; (800ce0c <RCCEx_PLL3_Config+0x160>)
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	69d2      	ldr	r2, [r2, #28]
 800cd82:	00d2      	lsls	r2, r2, #3
 800cd84:	4920      	ldr	r1, [pc, #128]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd8a:	4b1f      	ldr	r3, [pc, #124]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8e:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd9c:	4b1a      	ldr	r3, [pc, #104]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	4a19      	ldr	r2, [pc, #100]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cda2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cda6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cda8:	e00f      	b.n	800cdca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d106      	bne.n	800cdbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cdb0:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	4a14      	ldr	r2, [pc, #80]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cdba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdbc:	e005      	b.n	800cdca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cdbe:	4b12      	ldr	r3, [pc, #72]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	4a11      	ldr	r2, [pc, #68]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdca:	4b0f      	ldr	r3, [pc, #60]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a0e      	ldr	r2, [pc, #56]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdd6:	f7fa f949 	bl	800706c <HAL_GetTick>
 800cdda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cddc:	e008      	b.n	800cdf0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cdde:	f7fa f945 	bl	800706c <HAL_GetTick>
 800cde2:	4602      	mov	r2, r0
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d901      	bls.n	800cdf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdec:	2303      	movs	r3, #3
 800cdee:	e006      	b.n	800cdfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdf0:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <RCCEx_PLL3_Config+0x15c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d0f0      	beq.n	800cdde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	58024400 	.word	0x58024400
 800ce0c:	ffff0007 	.word	0xffff0007

0800ce10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e0f1      	b.n	800d006 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a78      	ldr	r2, [pc, #480]	; (800d010 <HAL_SPI_Init+0x200>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d00f      	beq.n	800ce52 <HAL_SPI_Init+0x42>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a77      	ldr	r2, [pc, #476]	; (800d014 <HAL_SPI_Init+0x204>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d00a      	beq.n	800ce52 <HAL_SPI_Init+0x42>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a75      	ldr	r2, [pc, #468]	; (800d018 <HAL_SPI_Init+0x208>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d005      	beq.n	800ce52 <HAL_SPI_Init+0x42>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	2b0f      	cmp	r3, #15
 800ce4c:	d901      	bls.n	800ce52 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e0d9      	b.n	800d006 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fba4 	bl	800d5a0 <SPI_GetPacketSize>
 800ce58:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a6c      	ldr	r2, [pc, #432]	; (800d010 <HAL_SPI_Init+0x200>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d00c      	beq.n	800ce7e <HAL_SPI_Init+0x6e>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a6a      	ldr	r2, [pc, #424]	; (800d014 <HAL_SPI_Init+0x204>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d007      	beq.n	800ce7e <HAL_SPI_Init+0x6e>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a69      	ldr	r2, [pc, #420]	; (800d018 <HAL_SPI_Init+0x208>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d002      	beq.n	800ce7e <HAL_SPI_Init+0x6e>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b08      	cmp	r3, #8
 800ce7c:	d811      	bhi.n	800cea2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce82:	4a63      	ldr	r2, [pc, #396]	; (800d010 <HAL_SPI_Init+0x200>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d009      	beq.n	800ce9c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a61      	ldr	r2, [pc, #388]	; (800d014 <HAL_SPI_Init+0x204>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d004      	beq.n	800ce9c <HAL_SPI_Init+0x8c>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a60      	ldr	r2, [pc, #384]	; (800d018 <HAL_SPI_Init+0x208>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d104      	bne.n	800cea6 <HAL_SPI_Init+0x96>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b10      	cmp	r3, #16
 800cea0:	d901      	bls.n	800cea6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e0af      	b.n	800d006 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7f8 f930 	bl	8005120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2202      	movs	r2, #2
 800cec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f022 0201 	bic.w	r2, r2, #1
 800ced6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cee2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ceec:	d119      	bne.n	800cf22 <HAL_SPI_Init+0x112>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cef6:	d103      	bne.n	800cf00 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d008      	beq.n	800cf12 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10c      	bne.n	800cf22 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf10:	d107      	bne.n	800cf22 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	69da      	ldr	r2, [r3, #28]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	431a      	orrs	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf34:	ea42 0103 	orr.w	r1, r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	68da      	ldr	r2, [r3, #12]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	430a      	orrs	r2, r1
 800cf42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf52:	431a      	orrs	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	431a      	orrs	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	695b      	ldr	r3, [r3, #20]
 800cf64:	431a      	orrs	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a1b      	ldr	r3, [r3, #32]
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	431a      	orrs	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf76:	431a      	orrs	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf82:	ea42 0103 	orr.w	r1, r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d113      	bne.n	800cfc2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfc0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f022 0201 	bic.w	r2, r2, #1
 800cfd0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	430a      	orrs	r2, r1
 800cff2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	40013000 	.word	0x40013000
 800d014:	40003800 	.word	0x40003800
 800d018:	40003c00 	.word	0x40003c00

0800d01c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	; 0x28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d034:	6a3a      	ldr	r2, [r7, #32]
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	4013      	ands	r3, r2
 800d03a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d044:	2300      	movs	r3, #0
 800d046:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d04e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3330      	adds	r3, #48	; 0x30
 800d056:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d113      	bne.n	800d08a <HAL_SPI_IRQHandler+0x6e>
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	f003 0320 	and.w	r3, r3, #32
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10e      	bne.n	800d08a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d072:	2b00      	cmp	r3, #0
 800d074:	d009      	beq.n	800d08a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	4798      	blx	r3
    handled = 1UL;
 800d086:	2301      	movs	r3, #1
 800d088:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10f      	bne.n	800d0b4 <HAL_SPI_IRQHandler+0x98>
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d105      	bne.n	800d0b4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	4798      	blx	r3
    handled = 1UL;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	f003 0320 	and.w	r3, r3, #32
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10f      	bne.n	800d0de <HAL_SPI_IRQHandler+0xc2>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	f003 0302 	and.w	r3, r3, #2
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d105      	bne.n	800d0de <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	4798      	blx	r3
    handled = 1UL;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f040 816f 	bne.w	800d3c4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	f003 0308 	and.w	r3, r3, #8
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 80a0 	beq.w	800d232 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	699a      	ldr	r2, [r3, #24]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f042 0208 	orr.w	r2, r2, #8
 800d100:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	699a      	ldr	r2, [r3, #24]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f042 0210 	orr.w	r2, r2, #16
 800d110:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d120:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	691a      	ldr	r2, [r3, #16]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f022 0208 	bic.w	r2, r2, #8
 800d130:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00f      	beq.n	800d15c <HAL_SPI_IRQHandler+0x140>
 800d13c:	7cfb      	ldrb	r3, [r7, #19]
 800d13e:	2b04      	cmp	r3, #4
 800d140:	d004      	beq.n	800d14c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d007      	beq.n	800d15c <HAL_SPI_IRQHandler+0x140>
 800d14c:	7cfb      	ldrb	r3, [r7, #19]
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d059      	beq.n	800d206 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d156:	69db      	ldr	r3, [r3, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d154      	bne.n	800d206 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d166:	2b00      	cmp	r3, #0
 800d168:	d13d      	bne.n	800d1e6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800d16a:	e036      	b.n	800d1da <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b0f      	cmp	r3, #15
 800d172:	d90b      	bls.n	800d18c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d17c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d17e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d184:	1d1a      	adds	r2, r3, #4
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	665a      	str	r2, [r3, #100]	; 0x64
 800d18a:	e01d      	b.n	800d1c8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	2b07      	cmp	r3, #7
 800d192:	d90b      	bls.n	800d1ac <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	8812      	ldrh	r2, [r2, #0]
 800d19c:	b292      	uxth	r2, r2
 800d19e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a4:	1c9a      	adds	r2, r3, #2
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	665a      	str	r2, [r3, #100]	; 0x64
 800d1aa:	e00d      	b.n	800d1c8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1b8:	7812      	ldrb	r2, [r2, #0]
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1c2      	bne.n	800d16c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f93a 	bl	800d460 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d003      	beq.n	800d206 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f90a 	bl	800d418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800d204:	e0e3      	b.n	800d3ce <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d206:	7cfb      	ldrb	r3, [r7, #19]
 800d208:	2b05      	cmp	r3, #5
 800d20a:	d103      	bne.n	800d214 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f8f9 	bl	800d404 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d212:	e0d9      	b.n	800d3c8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d214:	7cfb      	ldrb	r3, [r7, #19]
 800d216:	2b04      	cmp	r3, #4
 800d218:	d103      	bne.n	800d222 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f8e8 	bl	800d3f0 <HAL_SPI_RxCpltCallback>
    return;
 800d220:	e0d2      	b.n	800d3c8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d222:	7cfb      	ldrb	r3, [r7, #19]
 800d224:	2b03      	cmp	r3, #3
 800d226:	f040 80cf 	bne.w	800d3c8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f8d6 	bl	800d3dc <HAL_SPI_TxCpltCallback>
    return;
 800d230:	e0ca      	b.n	800d3c8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00d      	beq.n	800d258 <HAL_SPI_IRQHandler+0x23c>
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	f003 0308 	and.w	r3, r3, #8
 800d242:	2b00      	cmp	r3, #0
 800d244:	d008      	beq.n	800d258 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	699a      	ldr	r2, [r3, #24]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d254:	619a      	str	r2, [r3, #24]

    return;
 800d256:	e0ba      	b.n	800d3ce <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 80b5 	beq.w	800d3ce <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00f      	beq.n	800d28e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d274:	f043 0204 	orr.w	r2, r3, #4
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d28c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00f      	beq.n	800d2b8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d29e:	f043 0201 	orr.w	r2, r3, #1
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	699a      	ldr	r2, [r3, #24]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2b6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00f      	beq.n	800d2e2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2c8:	f043 0208 	orr.w	r2, r3, #8
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	699a      	ldr	r2, [r3, #24]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	f003 0320 	and.w	r3, r3, #32
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00f      	beq.n	800d30c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f042 0220 	orr.w	r2, r2, #32
 800d30a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d312:	2b00      	cmp	r3, #0
 800d314:	d05a      	beq.n	800d3cc <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f022 0201 	bic.w	r2, r2, #1
 800d324:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6919      	ldr	r1, [r3, #16]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	4b28      	ldr	r3, [pc, #160]	; (800d3d4 <HAL_SPI_IRQHandler+0x3b8>)
 800d332:	400b      	ands	r3, r1
 800d334:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d33c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d340:	d138      	bne.n	800d3b4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d350:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d356:	2b00      	cmp	r3, #0
 800d358:	d013      	beq.n	800d382 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d35e:	4a1e      	ldr	r2, [pc, #120]	; (800d3d8 <HAL_SPI_IRQHandler+0x3bc>)
 800d360:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d366:	4618      	mov	r0, r3
 800d368:	f7fb faba 	bl	80088e0 <HAL_DMA_Abort_IT>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d007      	beq.n	800d382 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d386:	2b00      	cmp	r3, #0
 800d388:	d020      	beq.n	800d3cc <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d38e:	4a12      	ldr	r2, [pc, #72]	; (800d3d8 <HAL_SPI_IRQHandler+0x3bc>)
 800d390:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d396:	4618      	mov	r0, r3
 800d398:	f7fb faa2 	bl	80088e0 <HAL_DMA_Abort_IT>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d014      	beq.n	800d3cc <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d3b2:	e00b      	b.n	800d3cc <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f82b 	bl	800d418 <HAL_SPI_ErrorCallback>
    return;
 800d3c2:	e003      	b.n	800d3cc <HAL_SPI_IRQHandler+0x3b0>
    return;
 800d3c4:	bf00      	nop
 800d3c6:	e002      	b.n	800d3ce <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d3c8:	bf00      	nop
 800d3ca:	e000      	b.n	800d3ce <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d3cc:	bf00      	nop
  }
}
 800d3ce:	3728      	adds	r7, #40	; 0x28
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	fffffc94 	.word	0xfffffc94
 800d3d8:	0800d42d 	.word	0x0800d42d

0800d3dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d40c:	bf00      	nop
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d420:	bf00      	nop
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d438:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f7ff ffe0 	bl	800d418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d458:	bf00      	nop
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	699a      	ldr	r2, [r3, #24]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f042 0208 	orr.w	r2, r2, #8
 800d47e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	699a      	ldr	r2, [r3, #24]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f042 0210 	orr.w	r2, r2, #16
 800d48e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0201 	bic.w	r2, r2, #1
 800d49e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6919      	ldr	r1, [r3, #16]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b3c      	ldr	r3, [pc, #240]	; (800d59c <SPI_CloseTransfer+0x13c>)
 800d4ac:	400b      	ands	r3, r1
 800d4ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	689a      	ldr	r2, [r3, #8]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d4be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d014      	beq.n	800d4f6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f003 0320 	and.w	r3, r3, #32
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00f      	beq.n	800d4f6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	699a      	ldr	r2, [r3, #24]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f042 0220 	orr.w	r2, r2, #32
 800d4f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d014      	beq.n	800d52c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00f      	beq.n	800d52c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d512:	f043 0204 	orr.w	r2, r3, #4
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	699a      	ldr	r2, [r3, #24]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d52a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00f      	beq.n	800d556 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d53c:	f043 0201 	orr.w	r2, r3, #1
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	699a      	ldr	r2, [r3, #24]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d554:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00f      	beq.n	800d580 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d566:	f043 0208 	orr.w	r2, r3, #8
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	699a      	ldr	r2, [r3, #24]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d57e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d590:	bf00      	nop
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	fffffc90 	.word	0xfffffc90

0800d5a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ac:	095b      	lsrs	r3, r3, #5
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	3307      	adds	r3, #7
 800d5be:	08db      	lsrs	r3, r3, #3
 800d5c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr

0800d5d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b082      	sub	sp, #8
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d101      	bne.n	800d5e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e049      	b.n	800d67c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d106      	bne.n	800d602 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7f8 fda3 	bl	8006148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2202      	movs	r2, #2
 800d606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3304      	adds	r3, #4
 800d612:	4619      	mov	r1, r3
 800d614:	4610      	mov	r0, r2
 800d616:	f000 fed3 	bl	800e3c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b01      	cmp	r3, #1
 800d696:	d001      	beq.n	800d69c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e054      	b.n	800d746 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68da      	ldr	r2, [r3, #12]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f042 0201 	orr.w	r2, r2, #1
 800d6b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a26      	ldr	r2, [pc, #152]	; (800d754 <HAL_TIM_Base_Start_IT+0xd0>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d022      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6c6:	d01d      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a22      	ldr	r2, [pc, #136]	; (800d758 <HAL_TIM_Base_Start_IT+0xd4>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d018      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a21      	ldr	r2, [pc, #132]	; (800d75c <HAL_TIM_Base_Start_IT+0xd8>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d013      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a1f      	ldr	r2, [pc, #124]	; (800d760 <HAL_TIM_Base_Start_IT+0xdc>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d00e      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a1e      	ldr	r2, [pc, #120]	; (800d764 <HAL_TIM_Base_Start_IT+0xe0>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d009      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a1c      	ldr	r2, [pc, #112]	; (800d768 <HAL_TIM_Base_Start_IT+0xe4>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d004      	beq.n	800d704 <HAL_TIM_Base_Start_IT+0x80>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a1b      	ldr	r2, [pc, #108]	; (800d76c <HAL_TIM_Base_Start_IT+0xe8>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d115      	bne.n	800d730 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	4b19      	ldr	r3, [pc, #100]	; (800d770 <HAL_TIM_Base_Start_IT+0xec>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b06      	cmp	r3, #6
 800d714:	d015      	beq.n	800d742 <HAL_TIM_Base_Start_IT+0xbe>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d71c:	d011      	beq.n	800d742 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f042 0201 	orr.w	r2, r2, #1
 800d72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d72e:	e008      	b.n	800d742 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0201 	orr.w	r2, r2, #1
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	e000      	b.n	800d744 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	40010000 	.word	0x40010000
 800d758:	40000400 	.word	0x40000400
 800d75c:	40000800 	.word	0x40000800
 800d760:	40000c00 	.word	0x40000c00
 800d764:	40010400 	.word	0x40010400
 800d768:	40001800 	.word	0x40001800
 800d76c:	40014000 	.word	0x40014000
 800d770:	00010007 	.word	0x00010007

0800d774 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f022 0201 	bic.w	r2, r2, #1
 800d78a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6a1a      	ldr	r2, [r3, #32]
 800d792:	f241 1311 	movw	r3, #4369	; 0x1111
 800d796:	4013      	ands	r3, r2
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10f      	bne.n	800d7bc <HAL_TIM_Base_Stop_IT+0x48>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6a1a      	ldr	r2, [r3, #32]
 800d7a2:	f240 4344 	movw	r3, #1092	; 0x444
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d107      	bne.n	800d7bc <HAL_TIM_Base_Stop_IT+0x48>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f022 0201 	bic.w	r2, r2, #1
 800d7ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b082      	sub	sp, #8
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e049      	b.n	800d878 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d106      	bne.n	800d7fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f841 	bl	800d880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2202      	movs	r2, #2
 800d802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	3304      	adds	r3, #4
 800d80e:	4619      	mov	r1, r3
 800d810:	4610      	mov	r0, r2
 800d812:	f000 fdd5 	bl	800e3c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d109      	bne.n	800d8b8 <HAL_TIM_PWM_Start+0x24>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	bf14      	ite	ne
 800d8b0:	2301      	movne	r3, #1
 800d8b2:	2300      	moveq	r3, #0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	e03c      	b.n	800d932 <HAL_TIM_PWM_Start+0x9e>
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2b04      	cmp	r3, #4
 800d8bc:	d109      	bne.n	800d8d2 <HAL_TIM_PWM_Start+0x3e>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	bf14      	ite	ne
 800d8ca:	2301      	movne	r3, #1
 800d8cc:	2300      	moveq	r3, #0
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	e02f      	b.n	800d932 <HAL_TIM_PWM_Start+0x9e>
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	2b08      	cmp	r3, #8
 800d8d6:	d109      	bne.n	800d8ec <HAL_TIM_PWM_Start+0x58>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	bf14      	ite	ne
 800d8e4:	2301      	movne	r3, #1
 800d8e6:	2300      	moveq	r3, #0
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	e022      	b.n	800d932 <HAL_TIM_PWM_Start+0x9e>
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b0c      	cmp	r3, #12
 800d8f0:	d109      	bne.n	800d906 <HAL_TIM_PWM_Start+0x72>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	bf14      	ite	ne
 800d8fe:	2301      	movne	r3, #1
 800d900:	2300      	moveq	r3, #0
 800d902:	b2db      	uxtb	r3, r3
 800d904:	e015      	b.n	800d932 <HAL_TIM_PWM_Start+0x9e>
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b10      	cmp	r3, #16
 800d90a:	d109      	bne.n	800d920 <HAL_TIM_PWM_Start+0x8c>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b01      	cmp	r3, #1
 800d916:	bf14      	ite	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	2300      	moveq	r3, #0
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	e008      	b.n	800d932 <HAL_TIM_PWM_Start+0x9e>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b01      	cmp	r3, #1
 800d92a:	bf14      	ite	ne
 800d92c:	2301      	movne	r3, #1
 800d92e:	2300      	moveq	r3, #0
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b00      	cmp	r3, #0
 800d934:	d001      	beq.n	800d93a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e0a1      	b.n	800da7e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d104      	bne.n	800d94a <HAL_TIM_PWM_Start+0xb6>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2202      	movs	r2, #2
 800d944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d948:	e023      	b.n	800d992 <HAL_TIM_PWM_Start+0xfe>
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b04      	cmp	r3, #4
 800d94e:	d104      	bne.n	800d95a <HAL_TIM_PWM_Start+0xc6>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2202      	movs	r2, #2
 800d954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d958:	e01b      	b.n	800d992 <HAL_TIM_PWM_Start+0xfe>
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	2b08      	cmp	r3, #8
 800d95e:	d104      	bne.n	800d96a <HAL_TIM_PWM_Start+0xd6>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2202      	movs	r2, #2
 800d964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d968:	e013      	b.n	800d992 <HAL_TIM_PWM_Start+0xfe>
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	2b0c      	cmp	r3, #12
 800d96e:	d104      	bne.n	800d97a <HAL_TIM_PWM_Start+0xe6>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2202      	movs	r2, #2
 800d974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d978:	e00b      	b.n	800d992 <HAL_TIM_PWM_Start+0xfe>
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	2b10      	cmp	r3, #16
 800d97e:	d104      	bne.n	800d98a <HAL_TIM_PWM_Start+0xf6>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2202      	movs	r2, #2
 800d984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d988:	e003      	b.n	800d992 <HAL_TIM_PWM_Start+0xfe>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2202      	movs	r2, #2
 800d98e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2201      	movs	r2, #1
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f001 f91e 	bl	800ebdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a38      	ldr	r2, [pc, #224]	; (800da88 <HAL_TIM_PWM_Start+0x1f4>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d013      	beq.n	800d9d2 <HAL_TIM_PWM_Start+0x13e>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a37      	ldr	r2, [pc, #220]	; (800da8c <HAL_TIM_PWM_Start+0x1f8>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d00e      	beq.n	800d9d2 <HAL_TIM_PWM_Start+0x13e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a35      	ldr	r2, [pc, #212]	; (800da90 <HAL_TIM_PWM_Start+0x1fc>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d009      	beq.n	800d9d2 <HAL_TIM_PWM_Start+0x13e>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a34      	ldr	r2, [pc, #208]	; (800da94 <HAL_TIM_PWM_Start+0x200>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d004      	beq.n	800d9d2 <HAL_TIM_PWM_Start+0x13e>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a32      	ldr	r2, [pc, #200]	; (800da98 <HAL_TIM_PWM_Start+0x204>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d101      	bne.n	800d9d6 <HAL_TIM_PWM_Start+0x142>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e000      	b.n	800d9d8 <HAL_TIM_PWM_Start+0x144>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d007      	beq.n	800d9ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a25      	ldr	r2, [pc, #148]	; (800da88 <HAL_TIM_PWM_Start+0x1f4>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d022      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9fe:	d01d      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a25      	ldr	r2, [pc, #148]	; (800da9c <HAL_TIM_PWM_Start+0x208>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d018      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a24      	ldr	r2, [pc, #144]	; (800daa0 <HAL_TIM_PWM_Start+0x20c>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d013      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a22      	ldr	r2, [pc, #136]	; (800daa4 <HAL_TIM_PWM_Start+0x210>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d00e      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a1a      	ldr	r2, [pc, #104]	; (800da8c <HAL_TIM_PWM_Start+0x1f8>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d009      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a1e      	ldr	r2, [pc, #120]	; (800daa8 <HAL_TIM_PWM_Start+0x214>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d004      	beq.n	800da3c <HAL_TIM_PWM_Start+0x1a8>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a16      	ldr	r2, [pc, #88]	; (800da90 <HAL_TIM_PWM_Start+0x1fc>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d115      	bne.n	800da68 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689a      	ldr	r2, [r3, #8]
 800da42:	4b1a      	ldr	r3, [pc, #104]	; (800daac <HAL_TIM_PWM_Start+0x218>)
 800da44:	4013      	ands	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b06      	cmp	r3, #6
 800da4c:	d015      	beq.n	800da7a <HAL_TIM_PWM_Start+0x1e6>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da54:	d011      	beq.n	800da7a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f042 0201 	orr.w	r2, r2, #1
 800da64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da66:	e008      	b.n	800da7a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f042 0201 	orr.w	r2, r2, #1
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e000      	b.n	800da7c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	40010000 	.word	0x40010000
 800da8c:	40010400 	.word	0x40010400
 800da90:	40014000 	.word	0x40014000
 800da94:	40014400 	.word	0x40014400
 800da98:	40014800 	.word	0x40014800
 800da9c:	40000400 	.word	0x40000400
 800daa0:	40000800 	.word	0x40000800
 800daa4:	40000c00 	.word	0x40000c00
 800daa8:	40001800 	.word	0x40001800
 800daac:	00010007 	.word	0x00010007

0800dab0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dac0:	2301      	movs	r3, #1
 800dac2:	e08f      	b.n	800dbe4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d106      	bne.n	800dade <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7f8 fca7 	bl	800642c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2202      	movs	r2, #2
 800dae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6899      	ldr	r1, [r3, #8]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	4b3e      	ldr	r3, [pc, #248]	; (800dbec <HAL_TIM_Encoder_Init+0x13c>)
 800daf2:	400b      	ands	r3, r1
 800daf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f000 fc5d 	bl	800e3c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	4313      	orrs	r3, r2
 800db26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	4b31      	ldr	r3, [pc, #196]	; (800dbf0 <HAL_TIM_Encoder_Init+0x140>)
 800db2c:	4013      	ands	r3, r2
 800db2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	021b      	lsls	r3, r3, #8
 800db3a:	4313      	orrs	r3, r2
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	4313      	orrs	r3, r2
 800db40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800db42:	693a      	ldr	r2, [r7, #16]
 800db44:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <HAL_TIM_Encoder_Init+0x144>)
 800db46:	4013      	ands	r3, r2
 800db48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	4b2a      	ldr	r3, [pc, #168]	; (800dbf8 <HAL_TIM_Encoder_Init+0x148>)
 800db4e:	4013      	ands	r3, r2
 800db50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	69db      	ldr	r3, [r3, #28]
 800db5a:	021b      	lsls	r3, r3, #8
 800db5c:	4313      	orrs	r3, r2
 800db5e:	693a      	ldr	r2, [r7, #16]
 800db60:	4313      	orrs	r3, r2
 800db62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	011a      	lsls	r2, r3, #4
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	031b      	lsls	r3, r3, #12
 800db70:	4313      	orrs	r3, r2
 800db72:	693a      	ldr	r2, [r7, #16]
 800db74:	4313      	orrs	r3, r2
 800db76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800db7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800db86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	011b      	lsls	r3, r3, #4
 800db92:	4313      	orrs	r3, r2
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	4313      	orrs	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3718      	adds	r7, #24
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	fffebff8 	.word	0xfffebff8
 800dbf0:	fffffcfc 	.word	0xfffffcfc
 800dbf4:	fffff3f3 	.word	0xfffff3f3
 800dbf8:	ffff0f0f 	.word	0xffff0f0f

0800dbfc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dc14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d110      	bne.n	800dc4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d102      	bne.n	800dc38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc32:	7b7b      	ldrb	r3, [r7, #13]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d001      	beq.n	800dc3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e069      	b.n	800dd10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2202      	movs	r2, #2
 800dc48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc4c:	e031      	b.n	800dcb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d110      	bne.n	800dc76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc54:	7bbb      	ldrb	r3, [r7, #14]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d102      	bne.n	800dc60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc5a:	7b3b      	ldrb	r3, [r7, #12]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d001      	beq.n	800dc64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e055      	b.n	800dd10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2202      	movs	r2, #2
 800dc68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2202      	movs	r2, #2
 800dc70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc74:	e01d      	b.n	800dcb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d108      	bne.n	800dc8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc7c:	7bbb      	ldrb	r3, [r7, #14]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d105      	bne.n	800dc8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc82:	7b7b      	ldrb	r3, [r7, #13]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d102      	bne.n	800dc8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc88:	7b3b      	ldrb	r3, [r7, #12]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d001      	beq.n	800dc92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e03e      	b.n	800dd10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2202      	movs	r2, #2
 800dc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2202      	movs	r2, #2
 800dca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2202      	movs	r2, #2
 800dcae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d003      	beq.n	800dcc0 <HAL_TIM_Encoder_Start+0xc4>
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b04      	cmp	r3, #4
 800dcbc:	d008      	beq.n	800dcd0 <HAL_TIM_Encoder_Start+0xd4>
 800dcbe:	e00f      	b.n	800dce0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	2100      	movs	r1, #0
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 ff87 	bl	800ebdc <TIM_CCxChannelCmd>
      break;
 800dcce:	e016      	b.n	800dcfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	2104      	movs	r1, #4
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 ff7f 	bl	800ebdc <TIM_CCxChannelCmd>
      break;
 800dcde:	e00e      	b.n	800dcfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2201      	movs	r2, #1
 800dce6:	2100      	movs	r1, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 ff77 	bl	800ebdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	2104      	movs	r1, #4
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 ff70 	bl	800ebdc <TIM_CCxChannelCmd>
      break;
 800dcfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f042 0201 	orr.w	r2, r2, #1
 800dd0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	691b      	ldr	r3, [r3, #16]
 800dd26:	f003 0302 	and.w	r3, r3, #2
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d122      	bne.n	800dd74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	f003 0302 	and.w	r3, r3, #2
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d11b      	bne.n	800dd74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f06f 0202 	mvn.w	r2, #2
 800dd44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	699b      	ldr	r3, [r3, #24]
 800dd52:	f003 0303 	and.w	r3, r3, #3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fb12 	bl	800e384 <HAL_TIM_IC_CaptureCallback>
 800dd60:	e005      	b.n	800dd6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fb04 	bl	800e370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fb15 	bl	800e398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	f003 0304 	and.w	r3, r3, #4
 800dd7e:	2b04      	cmp	r3, #4
 800dd80:	d122      	bne.n	800ddc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	2b04      	cmp	r3, #4
 800dd8e:	d11b      	bne.n	800ddc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f06f 0204 	mvn.w	r2, #4
 800dd98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d003      	beq.n	800ddb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fae8 	bl	800e384 <HAL_TIM_IC_CaptureCallback>
 800ddb4:	e005      	b.n	800ddc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fada 	bl	800e370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 faeb 	bl	800e398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	f003 0308 	and.w	r3, r3, #8
 800ddd2:	2b08      	cmp	r3, #8
 800ddd4:	d122      	bne.n	800de1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	f003 0308 	and.w	r3, r3, #8
 800dde0:	2b08      	cmp	r3, #8
 800dde2:	d11b      	bne.n	800de1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f06f 0208 	mvn.w	r2, #8
 800ddec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2204      	movs	r2, #4
 800ddf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	f003 0303 	and.w	r3, r3, #3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d003      	beq.n	800de0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fabe 	bl	800e384 <HAL_TIM_IC_CaptureCallback>
 800de08:	e005      	b.n	800de16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fab0 	bl	800e370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fac1 	bl	800e398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	f003 0310 	and.w	r3, r3, #16
 800de26:	2b10      	cmp	r3, #16
 800de28:	d122      	bne.n	800de70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	f003 0310 	and.w	r3, r3, #16
 800de34:	2b10      	cmp	r3, #16
 800de36:	d11b      	bne.n	800de70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f06f 0210 	mvn.w	r2, #16
 800de40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2208      	movs	r2, #8
 800de46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	69db      	ldr	r3, [r3, #28]
 800de4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de52:	2b00      	cmp	r3, #0
 800de54:	d003      	beq.n	800de5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fa94 	bl	800e384 <HAL_TIM_IC_CaptureCallback>
 800de5c:	e005      	b.n	800de6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fa86 	bl	800e370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fa97 	bl	800e398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d10e      	bne.n	800de9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d107      	bne.n	800de9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f06f 0201 	mvn.w	r2, #1
 800de94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7f5 fcc6 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea6:	2b80      	cmp	r3, #128	; 0x80
 800dea8:	d10e      	bne.n	800dec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb4:	2b80      	cmp	r3, #128	; 0x80
 800deb6:	d107      	bne.n	800dec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 ffc6 	bl	800ee54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ded6:	d10e      	bne.n	800def6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dee2:	2b80      	cmp	r3, #128	; 0x80
 800dee4:	d107      	bne.n	800def6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800deee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 ffb9 	bl	800ee68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df00:	2b40      	cmp	r3, #64	; 0x40
 800df02:	d10e      	bne.n	800df22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df0e:	2b40      	cmp	r3, #64	; 0x40
 800df10:	d107      	bne.n	800df22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fa45 	bl	800e3ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	f003 0320 	and.w	r3, r3, #32
 800df2c:	2b20      	cmp	r3, #32
 800df2e:	d10e      	bne.n	800df4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b20      	cmp	r3, #32
 800df3c:	d107      	bne.n	800df4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f06f 0220 	mvn.w	r2, #32
 800df46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 ff79 	bl	800ee40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df4e:	bf00      	nop
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d101      	bne.n	800df76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800df72:	2302      	movs	r3, #2
 800df74:	e0ff      	b.n	800e176 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2201      	movs	r2, #1
 800df7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b14      	cmp	r3, #20
 800df82:	f200 80f0 	bhi.w	800e166 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800df86:	a201      	add	r2, pc, #4	; (adr r2, 800df8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800dfe1 	.word	0x0800dfe1
 800df90:	0800e167 	.word	0x0800e167
 800df94:	0800e167 	.word	0x0800e167
 800df98:	0800e167 	.word	0x0800e167
 800df9c:	0800e021 	.word	0x0800e021
 800dfa0:	0800e167 	.word	0x0800e167
 800dfa4:	0800e167 	.word	0x0800e167
 800dfa8:	0800e167 	.word	0x0800e167
 800dfac:	0800e063 	.word	0x0800e063
 800dfb0:	0800e167 	.word	0x0800e167
 800dfb4:	0800e167 	.word	0x0800e167
 800dfb8:	0800e167 	.word	0x0800e167
 800dfbc:	0800e0a3 	.word	0x0800e0a3
 800dfc0:	0800e167 	.word	0x0800e167
 800dfc4:	0800e167 	.word	0x0800e167
 800dfc8:	0800e167 	.word	0x0800e167
 800dfcc:	0800e0e5 	.word	0x0800e0e5
 800dfd0:	0800e167 	.word	0x0800e167
 800dfd4:	0800e167 	.word	0x0800e167
 800dfd8:	0800e167 	.word	0x0800e167
 800dfdc:	0800e125 	.word	0x0800e125
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68b9      	ldr	r1, [r7, #8]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f000 fa84 	bl	800e4f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	699a      	ldr	r2, [r3, #24]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f042 0208 	orr.w	r2, r2, #8
 800dffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	699a      	ldr	r2, [r3, #24]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f022 0204 	bic.w	r2, r2, #4
 800e00a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6999      	ldr	r1, [r3, #24]
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	691a      	ldr	r2, [r3, #16]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	430a      	orrs	r2, r1
 800e01c:	619a      	str	r2, [r3, #24]
      break;
 800e01e:	e0a5      	b.n	800e16c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	4618      	mov	r0, r3
 800e028:	f000 faf4 	bl	800e614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	699a      	ldr	r2, [r3, #24]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e03a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	699a      	ldr	r2, [r3, #24]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e04a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	6999      	ldr	r1, [r3, #24]
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	021a      	lsls	r2, r3, #8
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	430a      	orrs	r2, r1
 800e05e:	619a      	str	r2, [r3, #24]
      break;
 800e060:	e084      	b.n	800e16c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68b9      	ldr	r1, [r7, #8]
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 fb5d 	bl	800e728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	69da      	ldr	r2, [r3, #28]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f042 0208 	orr.w	r2, r2, #8
 800e07c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	69da      	ldr	r2, [r3, #28]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f022 0204 	bic.w	r2, r2, #4
 800e08c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69d9      	ldr	r1, [r3, #28]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	691a      	ldr	r2, [r3, #16]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	61da      	str	r2, [r3, #28]
      break;
 800e0a0:	e064      	b.n	800e16c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68b9      	ldr	r1, [r7, #8]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 fbc5 	bl	800e838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69da      	ldr	r2, [r3, #28]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	69da      	ldr	r2, [r3, #28]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	69d9      	ldr	r1, [r3, #28]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	021a      	lsls	r2, r3, #8
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	430a      	orrs	r2, r1
 800e0e0:	61da      	str	r2, [r3, #28]
      break;
 800e0e2:	e043      	b.n	800e16c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68b9      	ldr	r1, [r7, #8]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fc0e 	bl	800e90c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f042 0208 	orr.w	r2, r2, #8
 800e0fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f022 0204 	bic.w	r2, r2, #4
 800e10e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	691a      	ldr	r2, [r3, #16]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e122:	e023      	b.n	800e16c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 fc52 	bl	800e9d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e13e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e14e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	021a      	lsls	r2, r3, #8
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	430a      	orrs	r2, r1
 800e162:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e164:	e002      	b.n	800e16c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e166:	2301      	movs	r3, #1
 800e168:	75fb      	strb	r3, [r7, #23]
      break;
 800e16a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e174:	7dfb      	ldrb	r3, [r7, #23]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop

0800e180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e194:	2b01      	cmp	r3, #1
 800e196:	d101      	bne.n	800e19c <HAL_TIM_ConfigClockSource+0x1c>
 800e198:	2302      	movs	r3, #2
 800e19a:	e0dc      	b.n	800e356 <HAL_TIM_ConfigClockSource+0x1d6>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2202      	movs	r2, #2
 800e1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	4b6a      	ldr	r3, [pc, #424]	; (800e360 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a64      	ldr	r2, [pc, #400]	; (800e364 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	f000 80a9 	beq.w	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e1d8:	4a62      	ldr	r2, [pc, #392]	; (800e364 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	f200 80ae 	bhi.w	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e1e0:	4a61      	ldr	r2, [pc, #388]	; (800e368 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	f000 80a1 	beq.w	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e1e8:	4a5f      	ldr	r2, [pc, #380]	; (800e368 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	f200 80a6 	bhi.w	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e1f0:	4a5e      	ldr	r2, [pc, #376]	; (800e36c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	f000 8099 	beq.w	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e1f8:	4a5c      	ldr	r2, [pc, #368]	; (800e36c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	f200 809e 	bhi.w	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e200:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e204:	f000 8091 	beq.w	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e208:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e20c:	f200 8096 	bhi.w	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e214:	f000 8089 	beq.w	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e21c:	f200 808e 	bhi.w	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e224:	d03e      	beq.n	800e2a4 <HAL_TIM_ConfigClockSource+0x124>
 800e226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e22a:	f200 8087 	bhi.w	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e232:	f000 8086 	beq.w	800e342 <HAL_TIM_ConfigClockSource+0x1c2>
 800e236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e23a:	d87f      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e23c:	2b70      	cmp	r3, #112	; 0x70
 800e23e:	d01a      	beq.n	800e276 <HAL_TIM_ConfigClockSource+0xf6>
 800e240:	2b70      	cmp	r3, #112	; 0x70
 800e242:	d87b      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e244:	2b60      	cmp	r3, #96	; 0x60
 800e246:	d050      	beq.n	800e2ea <HAL_TIM_ConfigClockSource+0x16a>
 800e248:	2b60      	cmp	r3, #96	; 0x60
 800e24a:	d877      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e24c:	2b50      	cmp	r3, #80	; 0x50
 800e24e:	d03c      	beq.n	800e2ca <HAL_TIM_ConfigClockSource+0x14a>
 800e250:	2b50      	cmp	r3, #80	; 0x50
 800e252:	d873      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e254:	2b40      	cmp	r3, #64	; 0x40
 800e256:	d058      	beq.n	800e30a <HAL_TIM_ConfigClockSource+0x18a>
 800e258:	2b40      	cmp	r3, #64	; 0x40
 800e25a:	d86f      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e25c:	2b30      	cmp	r3, #48	; 0x30
 800e25e:	d064      	beq.n	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e260:	2b30      	cmp	r3, #48	; 0x30
 800e262:	d86b      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e264:	2b20      	cmp	r3, #32
 800e266:	d060      	beq.n	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e268:	2b20      	cmp	r3, #32
 800e26a:	d867      	bhi.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d05c      	beq.n	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e270:	2b10      	cmp	r3, #16
 800e272:	d05a      	beq.n	800e32a <HAL_TIM_ConfigClockSource+0x1aa>
 800e274:	e062      	b.n	800e33c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6818      	ldr	r0, [r3, #0]
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	6899      	ldr	r1, [r3, #8]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	f000 fc89 	bl	800eb9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	609a      	str	r2, [r3, #8]
      break;
 800e2a2:	e04f      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6818      	ldr	r0, [r3, #0]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	6899      	ldr	r1, [r3, #8]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	f000 fc72 	bl	800eb9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	689a      	ldr	r2, [r3, #8]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2c6:	609a      	str	r2, [r3, #8]
      break;
 800e2c8:	e03c      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6818      	ldr	r0, [r3, #0]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	6859      	ldr	r1, [r3, #4]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	f000 fbe2 	bl	800eaa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2150      	movs	r1, #80	; 0x50
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 fc3c 	bl	800eb60 <TIM_ITRx_SetConfig>
      break;
 800e2e8:	e02c      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6818      	ldr	r0, [r3, #0]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	6859      	ldr	r1, [r3, #4]
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	f000 fc01 	bl	800eafe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2160      	movs	r1, #96	; 0x60
 800e302:	4618      	mov	r0, r3
 800e304:	f000 fc2c 	bl	800eb60 <TIM_ITRx_SetConfig>
      break;
 800e308:	e01c      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	6859      	ldr	r1, [r3, #4]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	461a      	mov	r2, r3
 800e318:	f000 fbc2 	bl	800eaa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2140      	movs	r1, #64	; 0x40
 800e322:	4618      	mov	r0, r3
 800e324:	f000 fc1c 	bl	800eb60 <TIM_ITRx_SetConfig>
      break;
 800e328:	e00c      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f000 fc13 	bl	800eb60 <TIM_ITRx_SetConfig>
      break;
 800e33a:	e003      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	73fb      	strb	r3, [r7, #15]
      break;
 800e340:	e000      	b.n	800e344 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e354:	7bfb      	ldrb	r3, [r7, #15]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	ffceff88 	.word	0xffceff88
 800e364:	00100040 	.word	0x00100040
 800e368:	00100030 	.word	0x00100030
 800e36c:	00100020 	.word	0x00100020

0800e370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4a40      	ldr	r2, [pc, #256]	; (800e4d4 <TIM_Base_SetConfig+0x114>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d013      	beq.n	800e400 <TIM_Base_SetConfig+0x40>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3de:	d00f      	beq.n	800e400 <TIM_Base_SetConfig+0x40>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a3d      	ldr	r2, [pc, #244]	; (800e4d8 <TIM_Base_SetConfig+0x118>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d00b      	beq.n	800e400 <TIM_Base_SetConfig+0x40>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a3c      	ldr	r2, [pc, #240]	; (800e4dc <TIM_Base_SetConfig+0x11c>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d007      	beq.n	800e400 <TIM_Base_SetConfig+0x40>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a3b      	ldr	r2, [pc, #236]	; (800e4e0 <TIM_Base_SetConfig+0x120>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d003      	beq.n	800e400 <TIM_Base_SetConfig+0x40>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	4a3a      	ldr	r2, [pc, #232]	; (800e4e4 <TIM_Base_SetConfig+0x124>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d108      	bne.n	800e412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4313      	orrs	r3, r2
 800e410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a2f      	ldr	r2, [pc, #188]	; (800e4d4 <TIM_Base_SetConfig+0x114>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d01f      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e420:	d01b      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a2c      	ldr	r2, [pc, #176]	; (800e4d8 <TIM_Base_SetConfig+0x118>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d017      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4a2b      	ldr	r2, [pc, #172]	; (800e4dc <TIM_Base_SetConfig+0x11c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d013      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a2a      	ldr	r2, [pc, #168]	; (800e4e0 <TIM_Base_SetConfig+0x120>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d00f      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4a29      	ldr	r2, [pc, #164]	; (800e4e4 <TIM_Base_SetConfig+0x124>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d00b      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4a28      	ldr	r2, [pc, #160]	; (800e4e8 <TIM_Base_SetConfig+0x128>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d007      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a27      	ldr	r2, [pc, #156]	; (800e4ec <TIM_Base_SetConfig+0x12c>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d003      	beq.n	800e45a <TIM_Base_SetConfig+0x9a>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4a26      	ldr	r2, [pc, #152]	; (800e4f0 <TIM_Base_SetConfig+0x130>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d108      	bne.n	800e46c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	4313      	orrs	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	4313      	orrs	r3, r2
 800e478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	689a      	ldr	r2, [r3, #8]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a10      	ldr	r2, [pc, #64]	; (800e4d4 <TIM_Base_SetConfig+0x114>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d00f      	beq.n	800e4b8 <TIM_Base_SetConfig+0xf8>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a12      	ldr	r2, [pc, #72]	; (800e4e4 <TIM_Base_SetConfig+0x124>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d00b      	beq.n	800e4b8 <TIM_Base_SetConfig+0xf8>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a11      	ldr	r2, [pc, #68]	; (800e4e8 <TIM_Base_SetConfig+0x128>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d007      	beq.n	800e4b8 <TIM_Base_SetConfig+0xf8>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a10      	ldr	r2, [pc, #64]	; (800e4ec <TIM_Base_SetConfig+0x12c>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d003      	beq.n	800e4b8 <TIM_Base_SetConfig+0xf8>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a0f      	ldr	r2, [pc, #60]	; (800e4f0 <TIM_Base_SetConfig+0x130>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d103      	bne.n	800e4c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	615a      	str	r2, [r3, #20]
}
 800e4c6:	bf00      	nop
 800e4c8:	3714      	adds	r7, #20
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	40010000 	.word	0x40010000
 800e4d8:	40000400 	.word	0x40000400
 800e4dc:	40000800 	.word	0x40000800
 800e4e0:	40000c00 	.word	0x40000c00
 800e4e4:	40010400 	.word	0x40010400
 800e4e8:	40014000 	.word	0x40014000
 800e4ec:	40014400 	.word	0x40014400
 800e4f0:	40014800 	.word	0x40014800

0800e4f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	f023 0201 	bic.w	r2, r3, #1
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a1b      	ldr	r3, [r3, #32]
 800e50e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	4b37      	ldr	r3, [pc, #220]	; (800e5fc <TIM_OC1_SetConfig+0x108>)
 800e520:	4013      	ands	r3, r2
 800e522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f023 0303 	bic.w	r3, r3, #3
 800e52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	4313      	orrs	r3, r2
 800e534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f023 0302 	bic.w	r3, r3, #2
 800e53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	697a      	ldr	r2, [r7, #20]
 800e544:	4313      	orrs	r3, r2
 800e546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a2d      	ldr	r2, [pc, #180]	; (800e600 <TIM_OC1_SetConfig+0x10c>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d00f      	beq.n	800e570 <TIM_OC1_SetConfig+0x7c>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a2c      	ldr	r2, [pc, #176]	; (800e604 <TIM_OC1_SetConfig+0x110>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d00b      	beq.n	800e570 <TIM_OC1_SetConfig+0x7c>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a2b      	ldr	r2, [pc, #172]	; (800e608 <TIM_OC1_SetConfig+0x114>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d007      	beq.n	800e570 <TIM_OC1_SetConfig+0x7c>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a2a      	ldr	r2, [pc, #168]	; (800e60c <TIM_OC1_SetConfig+0x118>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d003      	beq.n	800e570 <TIM_OC1_SetConfig+0x7c>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a29      	ldr	r2, [pc, #164]	; (800e610 <TIM_OC1_SetConfig+0x11c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d10c      	bne.n	800e58a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f023 0308 	bic.w	r3, r3, #8
 800e576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	697a      	ldr	r2, [r7, #20]
 800e57e:	4313      	orrs	r3, r2
 800e580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	f023 0304 	bic.w	r3, r3, #4
 800e588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a1c      	ldr	r2, [pc, #112]	; (800e600 <TIM_OC1_SetConfig+0x10c>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d00f      	beq.n	800e5b2 <TIM_OC1_SetConfig+0xbe>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4a1b      	ldr	r2, [pc, #108]	; (800e604 <TIM_OC1_SetConfig+0x110>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d00b      	beq.n	800e5b2 <TIM_OC1_SetConfig+0xbe>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4a1a      	ldr	r2, [pc, #104]	; (800e608 <TIM_OC1_SetConfig+0x114>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d007      	beq.n	800e5b2 <TIM_OC1_SetConfig+0xbe>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4a19      	ldr	r2, [pc, #100]	; (800e60c <TIM_OC1_SetConfig+0x118>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d003      	beq.n	800e5b2 <TIM_OC1_SetConfig+0xbe>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4a18      	ldr	r2, [pc, #96]	; (800e610 <TIM_OC1_SetConfig+0x11c>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d111      	bne.n	800e5d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	685a      	ldr	r2, [r3, #4]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	621a      	str	r2, [r3, #32]
}
 800e5f0:	bf00      	nop
 800e5f2:	371c      	adds	r7, #28
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	fffeff8f 	.word	0xfffeff8f
 800e600:	40010000 	.word	0x40010000
 800e604:	40010400 	.word	0x40010400
 800e608:	40014000 	.word	0x40014000
 800e60c:	40014400 	.word	0x40014400
 800e610:	40014800 	.word	0x40014800

0800e614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e614:	b480      	push	{r7}
 800e616:	b087      	sub	sp, #28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	f023 0210 	bic.w	r2, r3, #16
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	699b      	ldr	r3, [r3, #24]
 800e63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	4b34      	ldr	r3, [pc, #208]	; (800e710 <TIM_OC2_SetConfig+0xfc>)
 800e640:	4013      	ands	r3, r2
 800e642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e64a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	021b      	lsls	r3, r3, #8
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	4313      	orrs	r3, r2
 800e656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f023 0320 	bic.w	r3, r3, #32
 800e65e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	011b      	lsls	r3, r3, #4
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	4313      	orrs	r3, r2
 800e66a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a29      	ldr	r2, [pc, #164]	; (800e714 <TIM_OC2_SetConfig+0x100>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d003      	beq.n	800e67c <TIM_OC2_SetConfig+0x68>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a28      	ldr	r2, [pc, #160]	; (800e718 <TIM_OC2_SetConfig+0x104>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d10d      	bne.n	800e698 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	011b      	lsls	r3, r3, #4
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a1e      	ldr	r2, [pc, #120]	; (800e714 <TIM_OC2_SetConfig+0x100>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d00f      	beq.n	800e6c0 <TIM_OC2_SetConfig+0xac>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4a1d      	ldr	r2, [pc, #116]	; (800e718 <TIM_OC2_SetConfig+0x104>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d00b      	beq.n	800e6c0 <TIM_OC2_SetConfig+0xac>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4a1c      	ldr	r2, [pc, #112]	; (800e71c <TIM_OC2_SetConfig+0x108>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d007      	beq.n	800e6c0 <TIM_OC2_SetConfig+0xac>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a1b      	ldr	r2, [pc, #108]	; (800e720 <TIM_OC2_SetConfig+0x10c>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d003      	beq.n	800e6c0 <TIM_OC2_SetConfig+0xac>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a1a      	ldr	r2, [pc, #104]	; (800e724 <TIM_OC2_SetConfig+0x110>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d113      	bne.n	800e6e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	695b      	ldr	r3, [r3, #20]
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	693a      	ldr	r2, [r7, #16]
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	621a      	str	r2, [r3, #32]
}
 800e702:	bf00      	nop
 800e704:	371c      	adds	r7, #28
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	feff8fff 	.word	0xfeff8fff
 800e714:	40010000 	.word	0x40010000
 800e718:	40010400 	.word	0x40010400
 800e71c:	40014000 	.word	0x40014000
 800e720:	40014400 	.word	0x40014400
 800e724:	40014800 	.word	0x40014800

0800e728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e728:	b480      	push	{r7}
 800e72a:	b087      	sub	sp, #28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a1b      	ldr	r3, [r3, #32]
 800e742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	69db      	ldr	r3, [r3, #28]
 800e74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	4b33      	ldr	r3, [pc, #204]	; (800e820 <TIM_OC3_SetConfig+0xf8>)
 800e754:	4013      	ands	r3, r2
 800e756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f023 0303 	bic.w	r3, r3, #3
 800e75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	4313      	orrs	r3, r2
 800e768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	021b      	lsls	r3, r3, #8
 800e778:	697a      	ldr	r2, [r7, #20]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4a28      	ldr	r2, [pc, #160]	; (800e824 <TIM_OC3_SetConfig+0xfc>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d003      	beq.n	800e78e <TIM_OC3_SetConfig+0x66>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4a27      	ldr	r2, [pc, #156]	; (800e828 <TIM_OC3_SetConfig+0x100>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d10d      	bne.n	800e7aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	021b      	lsls	r3, r3, #8
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e7a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a1d      	ldr	r2, [pc, #116]	; (800e824 <TIM_OC3_SetConfig+0xfc>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d00f      	beq.n	800e7d2 <TIM_OC3_SetConfig+0xaa>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a1c      	ldr	r2, [pc, #112]	; (800e828 <TIM_OC3_SetConfig+0x100>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d00b      	beq.n	800e7d2 <TIM_OC3_SetConfig+0xaa>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4a1b      	ldr	r2, [pc, #108]	; (800e82c <TIM_OC3_SetConfig+0x104>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d007      	beq.n	800e7d2 <TIM_OC3_SetConfig+0xaa>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4a1a      	ldr	r2, [pc, #104]	; (800e830 <TIM_OC3_SetConfig+0x108>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d003      	beq.n	800e7d2 <TIM_OC3_SetConfig+0xaa>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4a19      	ldr	r2, [pc, #100]	; (800e834 <TIM_OC3_SetConfig+0x10c>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d113      	bne.n	800e7fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e7e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	699b      	ldr	r3, [r3, #24]
 800e7f2:	011b      	lsls	r3, r3, #4
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	693a      	ldr	r2, [r7, #16]
 800e7fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	621a      	str	r2, [r3, #32]
}
 800e814:	bf00      	nop
 800e816:	371c      	adds	r7, #28
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	fffeff8f 	.word	0xfffeff8f
 800e824:	40010000 	.word	0x40010000
 800e828:	40010400 	.word	0x40010400
 800e82c:	40014000 	.word	0x40014000
 800e830:	40014400 	.word	0x40014400
 800e834:	40014800 	.word	0x40014800

0800e838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e838:	b480      	push	{r7}
 800e83a:	b087      	sub	sp, #28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	4b24      	ldr	r3, [pc, #144]	; (800e8f4 <TIM_OC4_SetConfig+0xbc>)
 800e864:	4013      	ands	r3, r2
 800e866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e86e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	021b      	lsls	r3, r3, #8
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	4313      	orrs	r3, r2
 800e87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	031b      	lsls	r3, r3, #12
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4a19      	ldr	r2, [pc, #100]	; (800e8f8 <TIM_OC4_SetConfig+0xc0>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d00f      	beq.n	800e8b8 <TIM_OC4_SetConfig+0x80>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a18      	ldr	r2, [pc, #96]	; (800e8fc <TIM_OC4_SetConfig+0xc4>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d00b      	beq.n	800e8b8 <TIM_OC4_SetConfig+0x80>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a17      	ldr	r2, [pc, #92]	; (800e900 <TIM_OC4_SetConfig+0xc8>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d007      	beq.n	800e8b8 <TIM_OC4_SetConfig+0x80>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a16      	ldr	r2, [pc, #88]	; (800e904 <TIM_OC4_SetConfig+0xcc>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d003      	beq.n	800e8b8 <TIM_OC4_SetConfig+0x80>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4a15      	ldr	r2, [pc, #84]	; (800e908 <TIM_OC4_SetConfig+0xd0>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d109      	bne.n	800e8cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	019b      	lsls	r3, r3, #6
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	693a      	ldr	r2, [r7, #16]
 800e8e4:	621a      	str	r2, [r3, #32]
}
 800e8e6:	bf00      	nop
 800e8e8:	371c      	adds	r7, #28
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	feff8fff 	.word	0xfeff8fff
 800e8f8:	40010000 	.word	0x40010000
 800e8fc:	40010400 	.word	0x40010400
 800e900:	40014000 	.word	0x40014000
 800e904:	40014400 	.word	0x40014400
 800e908:	40014800 	.word	0x40014800

0800e90c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b087      	sub	sp, #28
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a1b      	ldr	r3, [r3, #32]
 800e91a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	4b21      	ldr	r3, [pc, #132]	; (800e9bc <TIM_OC5_SetConfig+0xb0>)
 800e938:	4013      	ands	r3, r2
 800e93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68fa      	ldr	r2, [r7, #12]
 800e942:	4313      	orrs	r3, r2
 800e944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e94c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	041b      	lsls	r3, r3, #16
 800e954:	693a      	ldr	r2, [r7, #16]
 800e956:	4313      	orrs	r3, r2
 800e958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a18      	ldr	r2, [pc, #96]	; (800e9c0 <TIM_OC5_SetConfig+0xb4>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d00f      	beq.n	800e982 <TIM_OC5_SetConfig+0x76>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a17      	ldr	r2, [pc, #92]	; (800e9c4 <TIM_OC5_SetConfig+0xb8>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d00b      	beq.n	800e982 <TIM_OC5_SetConfig+0x76>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a16      	ldr	r2, [pc, #88]	; (800e9c8 <TIM_OC5_SetConfig+0xbc>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d007      	beq.n	800e982 <TIM_OC5_SetConfig+0x76>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a15      	ldr	r2, [pc, #84]	; (800e9cc <TIM_OC5_SetConfig+0xc0>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d003      	beq.n	800e982 <TIM_OC5_SetConfig+0x76>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a14      	ldr	r2, [pc, #80]	; (800e9d0 <TIM_OC5_SetConfig+0xc4>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d109      	bne.n	800e996 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	695b      	ldr	r3, [r3, #20]
 800e98e:	021b      	lsls	r3, r3, #8
 800e990:	697a      	ldr	r2, [r7, #20]
 800e992:	4313      	orrs	r3, r2
 800e994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	621a      	str	r2, [r3, #32]
}
 800e9b0:	bf00      	nop
 800e9b2:	371c      	adds	r7, #28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	fffeff8f 	.word	0xfffeff8f
 800e9c0:	40010000 	.word	0x40010000
 800e9c4:	40010400 	.word	0x40010400
 800e9c8:	40014000 	.word	0x40014000
 800e9cc:	40014400 	.word	0x40014400
 800e9d0:	40014800 	.word	0x40014800

0800e9d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b087      	sub	sp, #28
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	4b22      	ldr	r3, [pc, #136]	; (800ea88 <TIM_OC6_SetConfig+0xb4>)
 800ea00:	4013      	ands	r3, r2
 800ea02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	021b      	lsls	r3, r3, #8
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	051b      	lsls	r3, r3, #20
 800ea1e:	693a      	ldr	r2, [r7, #16]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a19      	ldr	r2, [pc, #100]	; (800ea8c <TIM_OC6_SetConfig+0xb8>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d00f      	beq.n	800ea4c <TIM_OC6_SetConfig+0x78>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a18      	ldr	r2, [pc, #96]	; (800ea90 <TIM_OC6_SetConfig+0xbc>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d00b      	beq.n	800ea4c <TIM_OC6_SetConfig+0x78>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a17      	ldr	r2, [pc, #92]	; (800ea94 <TIM_OC6_SetConfig+0xc0>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d007      	beq.n	800ea4c <TIM_OC6_SetConfig+0x78>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a16      	ldr	r2, [pc, #88]	; (800ea98 <TIM_OC6_SetConfig+0xc4>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d003      	beq.n	800ea4c <TIM_OC6_SetConfig+0x78>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a15      	ldr	r2, [pc, #84]	; (800ea9c <TIM_OC6_SetConfig+0xc8>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d109      	bne.n	800ea60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	695b      	ldr	r3, [r3, #20]
 800ea58:	029b      	lsls	r3, r3, #10
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	621a      	str	r2, [r3, #32]
}
 800ea7a:	bf00      	nop
 800ea7c:	371c      	adds	r7, #28
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	feff8fff 	.word	0xfeff8fff
 800ea8c:	40010000 	.word	0x40010000
 800ea90:	40010400 	.word	0x40010400
 800ea94:	40014000 	.word	0x40014000
 800ea98:	40014400 	.word	0x40014400
 800ea9c:	40014800 	.word	0x40014800

0800eaa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b087      	sub	sp, #28
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6a1b      	ldr	r3, [r3, #32]
 800eab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	f023 0201 	bic.w	r2, r3, #1
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eaca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	011b      	lsls	r3, r3, #4
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	f023 030a 	bic.w	r3, r3, #10
 800eadc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eade:	697a      	ldr	r2, [r7, #20]
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	621a      	str	r2, [r3, #32]
}
 800eaf2:	bf00      	nop
 800eaf4:	371c      	adds	r7, #28
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eafe:	b480      	push	{r7}
 800eb00:	b087      	sub	sp, #28
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	60f8      	str	r0, [r7, #12]
 800eb06:	60b9      	str	r1, [r7, #8]
 800eb08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	f023 0210 	bic.w	r2, r3, #16
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	699b      	ldr	r3, [r3, #24]
 800eb1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eb28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	031b      	lsls	r3, r3, #12
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800eb3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	011b      	lsls	r3, r3, #4
 800eb40:	693a      	ldr	r2, [r7, #16]
 800eb42:	4313      	orrs	r3, r2
 800eb44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	621a      	str	r2, [r3, #32]
}
 800eb52:	bf00      	nop
 800eb54:	371c      	adds	r7, #28
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
	...

0800eb60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	4b09      	ldr	r3, [pc, #36]	; (800eb98 <TIM_ITRx_SetConfig+0x38>)
 800eb74:	4013      	ands	r3, r2
 800eb76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	f043 0307 	orr.w	r3, r3, #7
 800eb82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	609a      	str	r2, [r3, #8]
}
 800eb8a:	bf00      	nop
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	ffcfff8f 	.word	0xffcfff8f

0800eb9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b087      	sub	sp, #28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ebb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	021a      	lsls	r2, r3, #8
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	431a      	orrs	r2, r3
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	697a      	ldr	r2, [r7, #20]
 800ebce:	609a      	str	r2, [r3, #8]
}
 800ebd0:	bf00      	nop
 800ebd2:	371c      	adds	r7, #28
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	f003 031f 	and.w	r3, r3, #31
 800ebee:	2201      	movs	r2, #1
 800ebf0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6a1a      	ldr	r2, [r3, #32]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	43db      	mvns	r3, r3
 800ebfe:	401a      	ands	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6a1a      	ldr	r2, [r3, #32]
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	f003 031f 	and.w	r3, r3, #31
 800ec0e:	6879      	ldr	r1, [r7, #4]
 800ec10:	fa01 f303 	lsl.w	r3, r1, r3
 800ec14:	431a      	orrs	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	621a      	str	r2, [r3, #32]
}
 800ec1a:	bf00      	nop
 800ec1c:	371c      	adds	r7, #28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
	...

0800ec28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d101      	bne.n	800ec40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	e06d      	b.n	800ed1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2202      	movs	r2, #2
 800ec4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4a30      	ldr	r2, [pc, #192]	; (800ed28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d004      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a2f      	ldr	r2, [pc, #188]	; (800ed2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d108      	bne.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ec7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	4313      	orrs	r3, r2
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a20      	ldr	r2, [pc, #128]	; (800ed28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d022      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecb2:	d01d      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a1d      	ldr	r2, [pc, #116]	; (800ed30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d018      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a1c      	ldr	r2, [pc, #112]	; (800ed34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d013      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a1a      	ldr	r2, [pc, #104]	; (800ed38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d00e      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a15      	ldr	r2, [pc, #84]	; (800ed2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d009      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a16      	ldr	r2, [pc, #88]	; (800ed3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d004      	beq.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a15      	ldr	r2, [pc, #84]	; (800ed40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d10c      	bne.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	40010000 	.word	0x40010000
 800ed2c:	40010400 	.word	0x40010400
 800ed30:	40000400 	.word	0x40000400
 800ed34:	40000800 	.word	0x40000800
 800ed38:	40000c00 	.word	0x40000c00
 800ed3c:	40001800 	.word	0x40001800
 800ed40:	40014000 	.word	0x40014000

0800ed44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b085      	sub	sp, #20
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d101      	bne.n	800ed60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed5c:	2302      	movs	r3, #2
 800ed5e:	e065      	b.n	800ee2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	4313      	orrs	r3, r2
 800ed82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	691b      	ldr	r3, [r3, #16]
 800edaa:	4313      	orrs	r3, r2
 800edac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	695b      	ldr	r3, [r3, #20]
 800edb8:	4313      	orrs	r3, r2
 800edba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edc6:	4313      	orrs	r3, r2
 800edc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	699b      	ldr	r3, [r3, #24]
 800edd4:	041b      	lsls	r3, r3, #16
 800edd6:	4313      	orrs	r3, r2
 800edd8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a16      	ldr	r2, [pc, #88]	; (800ee38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d004      	beq.n	800edee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a14      	ldr	r2, [pc, #80]	; (800ee3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d115      	bne.n	800ee1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf8:	051b      	lsls	r3, r3, #20
 800edfa:	4313      	orrs	r3, r2
 800edfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	69db      	ldr	r3, [r3, #28]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	40010000 	.word	0x40010000
 800ee3c:	40010400 	.word	0x40010400

0800ee40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee48:	bf00      	nop
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e042      	b.n	800ef14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d106      	bne.n	800eea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7f7 fd43 	bl	800692c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2224      	movs	r2, #36	; 0x24
 800eeaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 0201 	bic.w	r2, r2, #1
 800eebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fdf8 	bl	800fab4 <UART_SetConfig>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d101      	bne.n	800eece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e022      	b.n	800ef14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f001 fb54 	bl	8010584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	685a      	ldr	r2, [r3, #4]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eeea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689a      	ldr	r2, [r3, #8]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eefa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f042 0201 	orr.w	r2, r2, #1
 800ef0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f001 fbdb 	bl	80106c8 <UART_CheckIdleState>
 800ef12:	4603      	mov	r3, r0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b08a      	sub	sp, #40	; 0x28
 800ef20:	af02      	add	r7, sp, #8
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	603b      	str	r3, [r7, #0]
 800ef28:	4613      	mov	r3, r2
 800ef2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef32:	2b20      	cmp	r3, #32
 800ef34:	f040 8083 	bne.w	800f03e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d002      	beq.n	800ef44 <HAL_UART_Transmit+0x28>
 800ef3e:	88fb      	ldrh	r3, [r7, #6]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d101      	bne.n	800ef48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ef44:	2301      	movs	r3, #1
 800ef46:	e07b      	b.n	800f040 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d101      	bne.n	800ef56 <HAL_UART_Transmit+0x3a>
 800ef52:	2302      	movs	r3, #2
 800ef54:	e074      	b.n	800f040 <HAL_UART_Transmit+0x124>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2221      	movs	r2, #33	; 0x21
 800ef6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef6e:	f7f8 f87d 	bl	800706c <HAL_GetTick>
 800ef72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	88fa      	ldrh	r2, [r7, #6]
 800ef78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	88fa      	ldrh	r2, [r7, #6]
 800ef80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef8c:	d108      	bne.n	800efa0 <HAL_UART_Transmit+0x84>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d104      	bne.n	800efa0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ef96:	2300      	movs	r3, #0
 800ef98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	61bb      	str	r3, [r7, #24]
 800ef9e:	e003      	b.n	800efa8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800efa4:	2300      	movs	r3, #0
 800efa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800efb0:	e02c      	b.n	800f00c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	2200      	movs	r2, #0
 800efba:	2180      	movs	r1, #128	; 0x80
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f001 fbce 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800efc8:	2303      	movs	r3, #3
 800efca:	e039      	b.n	800f040 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10b      	bne.n	800efea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efe0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	3302      	adds	r3, #2
 800efe6:	61bb      	str	r3, [r7, #24]
 800efe8:	e007      	b.n	800effa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	781a      	ldrb	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	3301      	adds	r3, #1
 800eff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f000:	b29b      	uxth	r3, r3
 800f002:	3b01      	subs	r3, #1
 800f004:	b29a      	uxth	r2, r3
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f012:	b29b      	uxth	r3, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1cc      	bne.n	800efb2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	2200      	movs	r2, #0
 800f020:	2140      	movs	r1, #64	; 0x40
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f001 fb9b 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e006      	b.n	800f040 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2220      	movs	r2, #32
 800f036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f03a:	2300      	movs	r3, #0
 800f03c:	e000      	b.n	800f040 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f03e:	2302      	movs	r3, #2
  }
}
 800f040:	4618      	mov	r0, r3
 800f042:	3720      	adds	r7, #32
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b08a      	sub	sp, #40	; 0x28
 800f04c:	af02      	add	r7, sp, #8
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	603b      	str	r3, [r7, #0]
 800f054:	4613      	mov	r3, r2
 800f056:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f05e:	2b20      	cmp	r3, #32
 800f060:	f040 80c0 	bne.w	800f1e4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <HAL_UART_Receive+0x28>
 800f06a:	88fb      	ldrh	r3, [r7, #6]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d101      	bne.n	800f074 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f070:	2301      	movs	r3, #1
 800f072:	e0b8      	b.n	800f1e6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d101      	bne.n	800f082 <HAL_UART_Receive+0x3a>
 800f07e:	2302      	movs	r3, #2
 800f080:	e0b1      	b.n	800f1e6 <HAL_UART_Receive+0x19e>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2201      	movs	r2, #1
 800f086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2222      	movs	r2, #34	; 0x22
 800f096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f0a0:	f7f7 ffe4 	bl	800706c <HAL_GetTick>
 800f0a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	88fa      	ldrh	r2, [r7, #6]
 800f0aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	88fa      	ldrh	r2, [r7, #6]
 800f0b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0be:	d10e      	bne.n	800f0de <HAL_UART_Receive+0x96>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d105      	bne.n	800f0d4 <HAL_UART_Receive+0x8c>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f0ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0d2:	e02d      	b.n	800f130 <HAL_UART_Receive+0xe8>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	22ff      	movs	r2, #255	; 0xff
 800f0d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0dc:	e028      	b.n	800f130 <HAL_UART_Receive+0xe8>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10d      	bne.n	800f102 <HAL_UART_Receive+0xba>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d104      	bne.n	800f0f8 <HAL_UART_Receive+0xb0>
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	22ff      	movs	r2, #255	; 0xff
 800f0f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0f6:	e01b      	b.n	800f130 <HAL_UART_Receive+0xe8>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	227f      	movs	r2, #127	; 0x7f
 800f0fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f100:	e016      	b.n	800f130 <HAL_UART_Receive+0xe8>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f10a:	d10d      	bne.n	800f128 <HAL_UART_Receive+0xe0>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d104      	bne.n	800f11e <HAL_UART_Receive+0xd6>
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	227f      	movs	r2, #127	; 0x7f
 800f118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f11c:	e008      	b.n	800f130 <HAL_UART_Receive+0xe8>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	223f      	movs	r2, #63	; 0x3f
 800f122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f126:	e003      	b.n	800f130 <HAL_UART_Receive+0xe8>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f136:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f140:	d108      	bne.n	800f154 <HAL_UART_Receive+0x10c>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	691b      	ldr	r3, [r3, #16]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d104      	bne.n	800f154 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f14a:	2300      	movs	r3, #0
 800f14c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	61bb      	str	r3, [r7, #24]
 800f152:	e003      	b.n	800f15c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f158:	2300      	movs	r3, #0
 800f15a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f164:	e032      	b.n	800f1cc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2200      	movs	r2, #0
 800f16e:	2120      	movs	r1, #32
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f001 faf4 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e032      	b.n	800f1e6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10c      	bne.n	800f1a0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	8a7b      	ldrh	r3, [r7, #18]
 800f190:	4013      	ands	r3, r2
 800f192:	b29a      	uxth	r2, r3
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	3302      	adds	r3, #2
 800f19c:	61bb      	str	r3, [r7, #24]
 800f19e:	e00c      	b.n	800f1ba <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	8a7b      	ldrh	r3, [r7, #18]
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	b2da      	uxtb	r2, r3
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1c6      	bne.n	800f166 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2220      	movs	r2, #32
 800f1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e000      	b.n	800f1e6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f1e4:	2302      	movs	r3, #2
  }
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3720      	adds	r7, #32
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
	...

0800f1f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b08a      	sub	sp, #40	; 0x28
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f204:	2b20      	cmp	r3, #32
 800f206:	d17a      	bne.n	800f2fe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d002      	beq.n	800f214 <HAL_UART_Transmit_DMA+0x24>
 800f20e:	88fb      	ldrh	r3, [r7, #6]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f214:	2301      	movs	r3, #1
 800f216:	e073      	b.n	800f300 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d101      	bne.n	800f226 <HAL_UART_Transmit_DMA+0x36>
 800f222:	2302      	movs	r3, #2
 800f224:	e06c      	b.n	800f300 <HAL_UART_Transmit_DMA+0x110>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2201      	movs	r2, #1
 800f22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	88fa      	ldrh	r2, [r7, #6]
 800f238:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	88fa      	ldrh	r2, [r7, #6]
 800f240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2221      	movs	r2, #33	; 0x21
 800f250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d02c      	beq.n	800f2b6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f260:	4a29      	ldr	r2, [pc, #164]	; (800f308 <HAL_UART_Transmit_DMA+0x118>)
 800f262:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f268:	4a28      	ldr	r2, [pc, #160]	; (800f30c <HAL_UART_Transmit_DMA+0x11c>)
 800f26a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f270:	4a27      	ldr	r2, [pc, #156]	; (800f310 <HAL_UART_Transmit_DMA+0x120>)
 800f272:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f278:	2200      	movs	r2, #0
 800f27a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f284:	4619      	mov	r1, r3
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3328      	adds	r3, #40	; 0x28
 800f28c:	461a      	mov	r2, r3
 800f28e:	88fb      	ldrh	r3, [r7, #6]
 800f290:	f7f8 fd9e 	bl	8007dd0 <HAL_DMA_Start_IT>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00d      	beq.n	800f2b6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2210      	movs	r2, #16
 800f29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2220      	movs	r2, #32
 800f2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e024      	b.n	800f300 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2240      	movs	r2, #64	; 0x40
 800f2bc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	e853 3f00 	ldrex	r3, [r3]
 800f2d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2e6:	623a      	str	r2, [r7, #32]
 800f2e8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ea:	69f9      	ldr	r1, [r7, #28]
 800f2ec:	6a3a      	ldr	r2, [r7, #32]
 800f2ee:	e841 2300 	strex	r3, r2, [r1]
 800f2f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1e5      	bne.n	800f2c6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	e000      	b.n	800f300 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800f2fe:	2302      	movs	r3, #2
  }
}
 800f300:	4618      	mov	r0, r3
 800f302:	3728      	adds	r7, #40	; 0x28
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	08010b91 	.word	0x08010b91
 800f30c:	08010c27 	.word	0x08010c27
 800f310:	08010d9d 	.word	0x08010d9d

0800f314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b0ba      	sub	sp, #232	; 0xe8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	69db      	ldr	r3, [r3, #28]
 800f322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f33a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f33e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f342:	4013      	ands	r3, r2
 800f344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d11b      	bne.n	800f388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f354:	f003 0320 	and.w	r3, r3, #32
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d015      	beq.n	800f388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f360:	f003 0320 	and.w	r3, r3, #32
 800f364:	2b00      	cmp	r3, #0
 800f366:	d105      	bne.n	800f374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f36c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f370:	2b00      	cmp	r3, #0
 800f372:	d009      	beq.n	800f388 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f000 835a 	beq.w	800fa32 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	4798      	blx	r3
      }
      return;
 800f386:	e354      	b.n	800fa32 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 811f 	beq.w	800f5d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f396:	4b8b      	ldr	r3, [pc, #556]	; (800f5c4 <HAL_UART_IRQHandler+0x2b0>)
 800f398:	4013      	ands	r3, r2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d106      	bne.n	800f3ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f39e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f3a2:	4b89      	ldr	r3, [pc, #548]	; (800f5c8 <HAL_UART_IRQHandler+0x2b4>)
 800f3a4:	4013      	ands	r3, r2
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f000 8112 	beq.w	800f5d0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3b0:	f003 0301 	and.w	r3, r3, #1
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d011      	beq.n	800f3dc <HAL_UART_IRQHandler+0xc8>
 800f3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3d2:	f043 0201 	orr.w	r2, r3, #1
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3e0:	f003 0302 	and.w	r3, r3, #2
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d011      	beq.n	800f40c <HAL_UART_IRQHandler+0xf8>
 800f3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00b      	beq.n	800f40c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f402:	f043 0204 	orr.w	r2, r3, #4
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b00      	cmp	r3, #0
 800f416:	d011      	beq.n	800f43c <HAL_UART_IRQHandler+0x128>
 800f418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00b      	beq.n	800f43c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2204      	movs	r2, #4
 800f42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f432:	f043 0202 	orr.w	r2, r3, #2
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f440:	f003 0308 	and.w	r3, r3, #8
 800f444:	2b00      	cmp	r3, #0
 800f446:	d017      	beq.n	800f478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f44c:	f003 0320 	and.w	r3, r3, #32
 800f450:	2b00      	cmp	r3, #0
 800f452:	d105      	bne.n	800f460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f458:	4b5a      	ldr	r3, [pc, #360]	; (800f5c4 <HAL_UART_IRQHandler+0x2b0>)
 800f45a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00b      	beq.n	800f478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2208      	movs	r2, #8
 800f466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f46e:	f043 0208 	orr.w	r2, r3, #8
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f47c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f480:	2b00      	cmp	r3, #0
 800f482:	d012      	beq.n	800f4aa <HAL_UART_IRQHandler+0x196>
 800f484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00c      	beq.n	800f4aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4a0:	f043 0220 	orr.w	r2, r3, #32
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f000 82c0 	beq.w	800fa36 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4ba:	f003 0320 	and.w	r3, r3, #32
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d013      	beq.n	800f4ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4c6:	f003 0320 	and.w	r3, r3, #32
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d105      	bne.n	800f4da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d007      	beq.n	800f4ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d003      	beq.n	800f4ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4fe:	2b40      	cmp	r3, #64	; 0x40
 800f500:	d005      	beq.n	800f50e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f506:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d04f      	beq.n	800f5ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f001 fad8 	bl	8010ac4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f51e:	2b40      	cmp	r3, #64	; 0x40
 800f520:	d141      	bne.n	800f5a6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3308      	adds	r3, #8
 800f528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f530:	e853 3f00 	ldrex	r3, [r3]
 800f534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f53c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	3308      	adds	r3, #8
 800f54a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f54e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f55a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f55e:	e841 2300 	strex	r3, r2, [r1]
 800f562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1d9      	bne.n	800f522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f572:	2b00      	cmp	r3, #0
 800f574:	d013      	beq.n	800f59e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f57a:	4a14      	ldr	r2, [pc, #80]	; (800f5cc <HAL_UART_IRQHandler+0x2b8>)
 800f57c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f582:	4618      	mov	r0, r3
 800f584:	f7f9 f9ac 	bl	80088e0 <HAL_DMA_Abort_IT>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d017      	beq.n	800f5be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f598:	4610      	mov	r0, r2
 800f59a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f59c:	e00f      	b.n	800f5be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 fa7e 	bl	800faa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5a4:	e00b      	b.n	800f5be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 fa7a 	bl	800faa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5ac:	e007      	b.n	800f5be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 fa76 	bl	800faa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f5bc:	e23b      	b.n	800fa36 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5be:	bf00      	nop
    return;
 800f5c0:	e239      	b.n	800fa36 <HAL_UART_IRQHandler+0x722>
 800f5c2:	bf00      	nop
 800f5c4:	10000001 	.word	0x10000001
 800f5c8:	04000120 	.word	0x04000120
 800f5cc:	08010e1d 	.word	0x08010e1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	f040 81ce 	bne.w	800f976 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5de:	f003 0310 	and.w	r3, r3, #16
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f000 81c7 	beq.w	800f976 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5ec:	f003 0310 	and.w	r3, r3, #16
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f000 81c0 	beq.w	800f976 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2210      	movs	r2, #16
 800f5fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f608:	2b40      	cmp	r3, #64	; 0x40
 800f60a:	f040 813b 	bne.w	800f884 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a8b      	ldr	r2, [pc, #556]	; (800f844 <HAL_UART_IRQHandler+0x530>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d059      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a89      	ldr	r2, [pc, #548]	; (800f848 <HAL_UART_IRQHandler+0x534>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d053      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a87      	ldr	r2, [pc, #540]	; (800f84c <HAL_UART_IRQHandler+0x538>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d04d      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a85      	ldr	r2, [pc, #532]	; (800f850 <HAL_UART_IRQHandler+0x53c>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d047      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a83      	ldr	r2, [pc, #524]	; (800f854 <HAL_UART_IRQHandler+0x540>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d041      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a81      	ldr	r2, [pc, #516]	; (800f858 <HAL_UART_IRQHandler+0x544>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d03b      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a7f      	ldr	r2, [pc, #508]	; (800f85c <HAL_UART_IRQHandler+0x548>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d035      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a7d      	ldr	r2, [pc, #500]	; (800f860 <HAL_UART_IRQHandler+0x54c>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d02f      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a7b      	ldr	r2, [pc, #492]	; (800f864 <HAL_UART_IRQHandler+0x550>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d029      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a79      	ldr	r2, [pc, #484]	; (800f868 <HAL_UART_IRQHandler+0x554>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d023      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a77      	ldr	r2, [pc, #476]	; (800f86c <HAL_UART_IRQHandler+0x558>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d01d      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a75      	ldr	r2, [pc, #468]	; (800f870 <HAL_UART_IRQHandler+0x55c>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d017      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a73      	ldr	r2, [pc, #460]	; (800f874 <HAL_UART_IRQHandler+0x560>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d011      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a71      	ldr	r2, [pc, #452]	; (800f878 <HAL_UART_IRQHandler+0x564>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d00b      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a6f      	ldr	r2, [pc, #444]	; (800f87c <HAL_UART_IRQHandler+0x568>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d005      	beq.n	800f6ce <HAL_UART_IRQHandler+0x3ba>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a6d      	ldr	r2, [pc, #436]	; (800f880 <HAL_UART_IRQHandler+0x56c>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d105      	bne.n	800f6da <HAL_UART_IRQHandler+0x3c6>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	e004      	b.n	800f6e4 <HAL_UART_IRQHandler+0x3d0>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f6e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f000 81a4 	beq.w	800fa3a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	f080 819c 	bcs.w	800fa3a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f710:	69db      	ldr	r3, [r3, #28]
 800f712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f716:	f000 8086 	beq.w	800f826 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f726:	e853 3f00 	ldrex	r3, [r3]
 800f72a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f72e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f744:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f748:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f754:	e841 2300 	strex	r3, r2, [r1]
 800f758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f75c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d1da      	bne.n	800f71a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	3308      	adds	r3, #8
 800f76a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f76e:	e853 3f00 	ldrex	r3, [r3]
 800f772:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f776:	f023 0301 	bic.w	r3, r3, #1
 800f77a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	3308      	adds	r3, #8
 800f784:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f788:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f78c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f790:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f794:	e841 2300 	strex	r3, r2, [r1]
 800f798:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f79a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1e1      	bne.n	800f764 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3308      	adds	r3, #8
 800f7a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7aa:	e853 3f00 	ldrex	r3, [r3]
 800f7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3308      	adds	r3, #8
 800f7c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f7c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f7c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7cc:	e841 2300 	strex	r3, r2, [r1]
 800f7d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1e3      	bne.n	800f7a0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ee:	e853 3f00 	ldrex	r3, [r3]
 800f7f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7f6:	f023 0310 	bic.w	r3, r3, #16
 800f7fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f808:	65bb      	str	r3, [r7, #88]	; 0x58
 800f80a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f80e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f810:	e841 2300 	strex	r3, r2, [r1]
 800f814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1e4      	bne.n	800f7e6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f820:	4618      	mov	r0, r3
 800f822:	f7f8 fd3f 	bl	80082a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f832:	b29b      	uxth	r3, r3
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	b29b      	uxth	r3, r3
 800f838:	4619      	mov	r1, r3
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f7f3 fdaa 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f840:	e0fb      	b.n	800fa3a <HAL_UART_IRQHandler+0x726>
 800f842:	bf00      	nop
 800f844:	40020010 	.word	0x40020010
 800f848:	40020028 	.word	0x40020028
 800f84c:	40020040 	.word	0x40020040
 800f850:	40020058 	.word	0x40020058
 800f854:	40020070 	.word	0x40020070
 800f858:	40020088 	.word	0x40020088
 800f85c:	400200a0 	.word	0x400200a0
 800f860:	400200b8 	.word	0x400200b8
 800f864:	40020410 	.word	0x40020410
 800f868:	40020428 	.word	0x40020428
 800f86c:	40020440 	.word	0x40020440
 800f870:	40020458 	.word	0x40020458
 800f874:	40020470 	.word	0x40020470
 800f878:	40020488 	.word	0x40020488
 800f87c:	400204a0 	.word	0x400204a0
 800f880:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f890:	b29b      	uxth	r3, r3
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f000 80cc 	beq.w	800fa3e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f8a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f000 80c7 	beq.w	800fa3e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b8:	e853 3f00 	ldrex	r3, [r3]
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8d2:	647b      	str	r3, [r7, #68]	; 0x44
 800f8d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8da:	e841 2300 	strex	r3, r2, [r1]
 800f8de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1e4      	bne.n	800f8b0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f0:	e853 3f00 	ldrex	r3, [r3]
 800f8f4:	623b      	str	r3, [r7, #32]
   return(result);
 800f8f6:	6a3a      	ldr	r2, [r7, #32]
 800f8f8:	4b54      	ldr	r3, [pc, #336]	; (800fa4c <HAL_UART_IRQHandler+0x738>)
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3308      	adds	r3, #8
 800f906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f90a:	633a      	str	r2, [r7, #48]	; 0x30
 800f90c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f912:	e841 2300 	strex	r3, r2, [r1]
 800f916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1e3      	bne.n	800f8e6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2220      	movs	r2, #32
 800f922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	e853 3f00 	ldrex	r3, [r3]
 800f93e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f023 0310 	bic.w	r3, r3, #16
 800f946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	461a      	mov	r2, r3
 800f950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f954:	61fb      	str	r3, [r7, #28]
 800f956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f958:	69b9      	ldr	r1, [r7, #24]
 800f95a:	69fa      	ldr	r2, [r7, #28]
 800f95c:	e841 2300 	strex	r3, r2, [r1]
 800f960:	617b      	str	r3, [r7, #20]
   return(result);
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1e4      	bne.n	800f932 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7f3 fd10 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f974:	e063      	b.n	800fa3e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f97a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00e      	beq.n	800f9a0 <HAL_UART_IRQHandler+0x68c>
 800f982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d008      	beq.n	800f9a0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f001 fa80 	bl	8010e9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f99e:	e051      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d014      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d105      	bne.n	800f9c4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f9b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d008      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d03a      	beq.n	800fa42 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	4798      	blx	r3
    }
    return;
 800f9d4:	e035      	b.n	800fa42 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d009      	beq.n	800f9f6 <HAL_UART_IRQHandler+0x6e2>
 800f9e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d003      	beq.n	800f9f6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f001 fa2a 	bl	8010e48 <UART_EndTransmit_IT>
    return;
 800f9f4:	e026      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d009      	beq.n	800fa16 <HAL_UART_IRQHandler+0x702>
 800fa02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f001 fa59 	bl	8010ec6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa14:	e016      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d010      	beq.n	800fa44 <HAL_UART_IRQHandler+0x730>
 800fa22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	da0c      	bge.n	800fa44 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f001 fa41 	bl	8010eb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa30:	e008      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
      return;
 800fa32:	bf00      	nop
 800fa34:	e006      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
    return;
 800fa36:	bf00      	nop
 800fa38:	e004      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
      return;
 800fa3a:	bf00      	nop
 800fa3c:	e002      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
      return;
 800fa3e:	bf00      	nop
 800fa40:	e000      	b.n	800fa44 <HAL_UART_IRQHandler+0x730>
    return;
 800fa42:	bf00      	nop
  }
}
 800fa44:	37e8      	adds	r7, #232	; 0xe8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	effffffe 	.word	0xeffffffe

0800fa50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800faa8:	bf00      	nop
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fab8:	b092      	sub	sp, #72	; 0x48
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fabe:	2300      	movs	r3, #0
 800fac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	431a      	orrs	r2, r3
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	695b      	ldr	r3, [r3, #20]
 800fad2:	431a      	orrs	r2, r3
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	69db      	ldr	r3, [r3, #28]
 800fad8:	4313      	orrs	r3, r2
 800fada:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	4bbe      	ldr	r3, [pc, #760]	; (800fddc <UART_SetConfig+0x328>)
 800fae4:	4013      	ands	r3, r2
 800fae6:	697a      	ldr	r2, [r7, #20]
 800fae8:	6812      	ldr	r2, [r2, #0]
 800faea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faec:	430b      	orrs	r3, r1
 800faee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	68da      	ldr	r2, [r3, #12]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	430a      	orrs	r2, r1
 800fb04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	699b      	ldr	r3, [r3, #24]
 800fb0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4ab3      	ldr	r2, [pc, #716]	; (800fde0 <UART_SetConfig+0x32c>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d004      	beq.n	800fb20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	6a1b      	ldr	r3, [r3, #32]
 800fb1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	689a      	ldr	r2, [r3, #8]
 800fb26:	4baf      	ldr	r3, [pc, #700]	; (800fde4 <UART_SetConfig+0x330>)
 800fb28:	4013      	ands	r3, r2
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	6812      	ldr	r2, [r2, #0]
 800fb2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb30:	430b      	orrs	r3, r1
 800fb32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3a:	f023 010f 	bic.w	r1, r3, #15
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	430a      	orrs	r2, r1
 800fb48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4aa6      	ldr	r2, [pc, #664]	; (800fde8 <UART_SetConfig+0x334>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d177      	bne.n	800fc44 <UART_SetConfig+0x190>
 800fb54:	4ba5      	ldr	r3, [pc, #660]	; (800fdec <UART_SetConfig+0x338>)
 800fb56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb5c:	2b28      	cmp	r3, #40	; 0x28
 800fb5e:	d86d      	bhi.n	800fc3c <UART_SetConfig+0x188>
 800fb60:	a201      	add	r2, pc, #4	; (adr r2, 800fb68 <UART_SetConfig+0xb4>)
 800fb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb66:	bf00      	nop
 800fb68:	0800fc0d 	.word	0x0800fc0d
 800fb6c:	0800fc3d 	.word	0x0800fc3d
 800fb70:	0800fc3d 	.word	0x0800fc3d
 800fb74:	0800fc3d 	.word	0x0800fc3d
 800fb78:	0800fc3d 	.word	0x0800fc3d
 800fb7c:	0800fc3d 	.word	0x0800fc3d
 800fb80:	0800fc3d 	.word	0x0800fc3d
 800fb84:	0800fc3d 	.word	0x0800fc3d
 800fb88:	0800fc15 	.word	0x0800fc15
 800fb8c:	0800fc3d 	.word	0x0800fc3d
 800fb90:	0800fc3d 	.word	0x0800fc3d
 800fb94:	0800fc3d 	.word	0x0800fc3d
 800fb98:	0800fc3d 	.word	0x0800fc3d
 800fb9c:	0800fc3d 	.word	0x0800fc3d
 800fba0:	0800fc3d 	.word	0x0800fc3d
 800fba4:	0800fc3d 	.word	0x0800fc3d
 800fba8:	0800fc1d 	.word	0x0800fc1d
 800fbac:	0800fc3d 	.word	0x0800fc3d
 800fbb0:	0800fc3d 	.word	0x0800fc3d
 800fbb4:	0800fc3d 	.word	0x0800fc3d
 800fbb8:	0800fc3d 	.word	0x0800fc3d
 800fbbc:	0800fc3d 	.word	0x0800fc3d
 800fbc0:	0800fc3d 	.word	0x0800fc3d
 800fbc4:	0800fc3d 	.word	0x0800fc3d
 800fbc8:	0800fc25 	.word	0x0800fc25
 800fbcc:	0800fc3d 	.word	0x0800fc3d
 800fbd0:	0800fc3d 	.word	0x0800fc3d
 800fbd4:	0800fc3d 	.word	0x0800fc3d
 800fbd8:	0800fc3d 	.word	0x0800fc3d
 800fbdc:	0800fc3d 	.word	0x0800fc3d
 800fbe0:	0800fc3d 	.word	0x0800fc3d
 800fbe4:	0800fc3d 	.word	0x0800fc3d
 800fbe8:	0800fc2d 	.word	0x0800fc2d
 800fbec:	0800fc3d 	.word	0x0800fc3d
 800fbf0:	0800fc3d 	.word	0x0800fc3d
 800fbf4:	0800fc3d 	.word	0x0800fc3d
 800fbf8:	0800fc3d 	.word	0x0800fc3d
 800fbfc:	0800fc3d 	.word	0x0800fc3d
 800fc00:	0800fc3d 	.word	0x0800fc3d
 800fc04:	0800fc3d 	.word	0x0800fc3d
 800fc08:	0800fc35 	.word	0x0800fc35
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc12:	e222      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc14:	2304      	movs	r3, #4
 800fc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc1a:	e21e      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc1c:	2308      	movs	r3, #8
 800fc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc22:	e21a      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc24:	2310      	movs	r3, #16
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc2a:	e216      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc2c:	2320      	movs	r3, #32
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc32:	e212      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc34:	2340      	movs	r3, #64	; 0x40
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc3a:	e20e      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc3c:	2380      	movs	r3, #128	; 0x80
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc42:	e20a      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a69      	ldr	r2, [pc, #420]	; (800fdf0 <UART_SetConfig+0x33c>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d130      	bne.n	800fcb0 <UART_SetConfig+0x1fc>
 800fc4e:	4b67      	ldr	r3, [pc, #412]	; (800fdec <UART_SetConfig+0x338>)
 800fc50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc52:	f003 0307 	and.w	r3, r3, #7
 800fc56:	2b05      	cmp	r3, #5
 800fc58:	d826      	bhi.n	800fca8 <UART_SetConfig+0x1f4>
 800fc5a:	a201      	add	r2, pc, #4	; (adr r2, 800fc60 <UART_SetConfig+0x1ac>)
 800fc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc60:	0800fc79 	.word	0x0800fc79
 800fc64:	0800fc81 	.word	0x0800fc81
 800fc68:	0800fc89 	.word	0x0800fc89
 800fc6c:	0800fc91 	.word	0x0800fc91
 800fc70:	0800fc99 	.word	0x0800fc99
 800fc74:	0800fca1 	.word	0x0800fca1
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc7e:	e1ec      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc80:	2304      	movs	r3, #4
 800fc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc86:	e1e8      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc88:	2308      	movs	r3, #8
 800fc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc8e:	e1e4      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc90:	2310      	movs	r3, #16
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc96:	e1e0      	b.n	801005a <UART_SetConfig+0x5a6>
 800fc98:	2320      	movs	r3, #32
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc9e:	e1dc      	b.n	801005a <UART_SetConfig+0x5a6>
 800fca0:	2340      	movs	r3, #64	; 0x40
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fca6:	e1d8      	b.n	801005a <UART_SetConfig+0x5a6>
 800fca8:	2380      	movs	r3, #128	; 0x80
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcae:	e1d4      	b.n	801005a <UART_SetConfig+0x5a6>
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a4f      	ldr	r2, [pc, #316]	; (800fdf4 <UART_SetConfig+0x340>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d130      	bne.n	800fd1c <UART_SetConfig+0x268>
 800fcba:	4b4c      	ldr	r3, [pc, #304]	; (800fdec <UART_SetConfig+0x338>)
 800fcbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcbe:	f003 0307 	and.w	r3, r3, #7
 800fcc2:	2b05      	cmp	r3, #5
 800fcc4:	d826      	bhi.n	800fd14 <UART_SetConfig+0x260>
 800fcc6:	a201      	add	r2, pc, #4	; (adr r2, 800fccc <UART_SetConfig+0x218>)
 800fcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fccc:	0800fce5 	.word	0x0800fce5
 800fcd0:	0800fced 	.word	0x0800fced
 800fcd4:	0800fcf5 	.word	0x0800fcf5
 800fcd8:	0800fcfd 	.word	0x0800fcfd
 800fcdc:	0800fd05 	.word	0x0800fd05
 800fce0:	0800fd0d 	.word	0x0800fd0d
 800fce4:	2300      	movs	r3, #0
 800fce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcea:	e1b6      	b.n	801005a <UART_SetConfig+0x5a6>
 800fcec:	2304      	movs	r3, #4
 800fcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcf2:	e1b2      	b.n	801005a <UART_SetConfig+0x5a6>
 800fcf4:	2308      	movs	r3, #8
 800fcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfa:	e1ae      	b.n	801005a <UART_SetConfig+0x5a6>
 800fcfc:	2310      	movs	r3, #16
 800fcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd02:	e1aa      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd04:	2320      	movs	r3, #32
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd0a:	e1a6      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd0c:	2340      	movs	r3, #64	; 0x40
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd12:	e1a2      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd14:	2380      	movs	r3, #128	; 0x80
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd1a:	e19e      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a35      	ldr	r2, [pc, #212]	; (800fdf8 <UART_SetConfig+0x344>)
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d130      	bne.n	800fd88 <UART_SetConfig+0x2d4>
 800fd26:	4b31      	ldr	r3, [pc, #196]	; (800fdec <UART_SetConfig+0x338>)
 800fd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd2a:	f003 0307 	and.w	r3, r3, #7
 800fd2e:	2b05      	cmp	r3, #5
 800fd30:	d826      	bhi.n	800fd80 <UART_SetConfig+0x2cc>
 800fd32:	a201      	add	r2, pc, #4	; (adr r2, 800fd38 <UART_SetConfig+0x284>)
 800fd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd38:	0800fd51 	.word	0x0800fd51
 800fd3c:	0800fd59 	.word	0x0800fd59
 800fd40:	0800fd61 	.word	0x0800fd61
 800fd44:	0800fd69 	.word	0x0800fd69
 800fd48:	0800fd71 	.word	0x0800fd71
 800fd4c:	0800fd79 	.word	0x0800fd79
 800fd50:	2300      	movs	r3, #0
 800fd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd56:	e180      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd58:	2304      	movs	r3, #4
 800fd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd5e:	e17c      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd60:	2308      	movs	r3, #8
 800fd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd66:	e178      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd68:	2310      	movs	r3, #16
 800fd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd6e:	e174      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd70:	2320      	movs	r3, #32
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd76:	e170      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd78:	2340      	movs	r3, #64	; 0x40
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd7e:	e16c      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd80:	2380      	movs	r3, #128	; 0x80
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd86:	e168      	b.n	801005a <UART_SetConfig+0x5a6>
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a1b      	ldr	r2, [pc, #108]	; (800fdfc <UART_SetConfig+0x348>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d142      	bne.n	800fe18 <UART_SetConfig+0x364>
 800fd92:	4b16      	ldr	r3, [pc, #88]	; (800fdec <UART_SetConfig+0x338>)
 800fd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd96:	f003 0307 	and.w	r3, r3, #7
 800fd9a:	2b05      	cmp	r3, #5
 800fd9c:	d838      	bhi.n	800fe10 <UART_SetConfig+0x35c>
 800fd9e:	a201      	add	r2, pc, #4	; (adr r2, 800fda4 <UART_SetConfig+0x2f0>)
 800fda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda4:	0800fdbd 	.word	0x0800fdbd
 800fda8:	0800fdc5 	.word	0x0800fdc5
 800fdac:	0800fdcd 	.word	0x0800fdcd
 800fdb0:	0800fdd5 	.word	0x0800fdd5
 800fdb4:	0800fe01 	.word	0x0800fe01
 800fdb8:	0800fe09 	.word	0x0800fe09
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdc2:	e14a      	b.n	801005a <UART_SetConfig+0x5a6>
 800fdc4:	2304      	movs	r3, #4
 800fdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdca:	e146      	b.n	801005a <UART_SetConfig+0x5a6>
 800fdcc:	2308      	movs	r3, #8
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdd2:	e142      	b.n	801005a <UART_SetConfig+0x5a6>
 800fdd4:	2310      	movs	r3, #16
 800fdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdda:	e13e      	b.n	801005a <UART_SetConfig+0x5a6>
 800fddc:	cfff69f3 	.word	0xcfff69f3
 800fde0:	58000c00 	.word	0x58000c00
 800fde4:	11fff4ff 	.word	0x11fff4ff
 800fde8:	40011000 	.word	0x40011000
 800fdec:	58024400 	.word	0x58024400
 800fdf0:	40004400 	.word	0x40004400
 800fdf4:	40004800 	.word	0x40004800
 800fdf8:	40004c00 	.word	0x40004c00
 800fdfc:	40005000 	.word	0x40005000
 800fe00:	2320      	movs	r3, #32
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe06:	e128      	b.n	801005a <UART_SetConfig+0x5a6>
 800fe08:	2340      	movs	r3, #64	; 0x40
 800fe0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe0e:	e124      	b.n	801005a <UART_SetConfig+0x5a6>
 800fe10:	2380      	movs	r3, #128	; 0x80
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe16:	e120      	b.n	801005a <UART_SetConfig+0x5a6>
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4acb      	ldr	r2, [pc, #812]	; (801014c <UART_SetConfig+0x698>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d176      	bne.n	800ff10 <UART_SetConfig+0x45c>
 800fe22:	4bcb      	ldr	r3, [pc, #812]	; (8010150 <UART_SetConfig+0x69c>)
 800fe24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe2a:	2b28      	cmp	r3, #40	; 0x28
 800fe2c:	d86c      	bhi.n	800ff08 <UART_SetConfig+0x454>
 800fe2e:	a201      	add	r2, pc, #4	; (adr r2, 800fe34 <UART_SetConfig+0x380>)
 800fe30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe34:	0800fed9 	.word	0x0800fed9
 800fe38:	0800ff09 	.word	0x0800ff09
 800fe3c:	0800ff09 	.word	0x0800ff09
 800fe40:	0800ff09 	.word	0x0800ff09
 800fe44:	0800ff09 	.word	0x0800ff09
 800fe48:	0800ff09 	.word	0x0800ff09
 800fe4c:	0800ff09 	.word	0x0800ff09
 800fe50:	0800ff09 	.word	0x0800ff09
 800fe54:	0800fee1 	.word	0x0800fee1
 800fe58:	0800ff09 	.word	0x0800ff09
 800fe5c:	0800ff09 	.word	0x0800ff09
 800fe60:	0800ff09 	.word	0x0800ff09
 800fe64:	0800ff09 	.word	0x0800ff09
 800fe68:	0800ff09 	.word	0x0800ff09
 800fe6c:	0800ff09 	.word	0x0800ff09
 800fe70:	0800ff09 	.word	0x0800ff09
 800fe74:	0800fee9 	.word	0x0800fee9
 800fe78:	0800ff09 	.word	0x0800ff09
 800fe7c:	0800ff09 	.word	0x0800ff09
 800fe80:	0800ff09 	.word	0x0800ff09
 800fe84:	0800ff09 	.word	0x0800ff09
 800fe88:	0800ff09 	.word	0x0800ff09
 800fe8c:	0800ff09 	.word	0x0800ff09
 800fe90:	0800ff09 	.word	0x0800ff09
 800fe94:	0800fef1 	.word	0x0800fef1
 800fe98:	0800ff09 	.word	0x0800ff09
 800fe9c:	0800ff09 	.word	0x0800ff09
 800fea0:	0800ff09 	.word	0x0800ff09
 800fea4:	0800ff09 	.word	0x0800ff09
 800fea8:	0800ff09 	.word	0x0800ff09
 800feac:	0800ff09 	.word	0x0800ff09
 800feb0:	0800ff09 	.word	0x0800ff09
 800feb4:	0800fef9 	.word	0x0800fef9
 800feb8:	0800ff09 	.word	0x0800ff09
 800febc:	0800ff09 	.word	0x0800ff09
 800fec0:	0800ff09 	.word	0x0800ff09
 800fec4:	0800ff09 	.word	0x0800ff09
 800fec8:	0800ff09 	.word	0x0800ff09
 800fecc:	0800ff09 	.word	0x0800ff09
 800fed0:	0800ff09 	.word	0x0800ff09
 800fed4:	0800ff01 	.word	0x0800ff01
 800fed8:	2301      	movs	r3, #1
 800feda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fede:	e0bc      	b.n	801005a <UART_SetConfig+0x5a6>
 800fee0:	2304      	movs	r3, #4
 800fee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fee6:	e0b8      	b.n	801005a <UART_SetConfig+0x5a6>
 800fee8:	2308      	movs	r3, #8
 800feea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feee:	e0b4      	b.n	801005a <UART_SetConfig+0x5a6>
 800fef0:	2310      	movs	r3, #16
 800fef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fef6:	e0b0      	b.n	801005a <UART_SetConfig+0x5a6>
 800fef8:	2320      	movs	r3, #32
 800fefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fefe:	e0ac      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff00:	2340      	movs	r3, #64	; 0x40
 800ff02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff06:	e0a8      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff08:	2380      	movs	r3, #128	; 0x80
 800ff0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff0e:	e0a4      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4a8f      	ldr	r2, [pc, #572]	; (8010154 <UART_SetConfig+0x6a0>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d130      	bne.n	800ff7c <UART_SetConfig+0x4c8>
 800ff1a:	4b8d      	ldr	r3, [pc, #564]	; (8010150 <UART_SetConfig+0x69c>)
 800ff1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff1e:	f003 0307 	and.w	r3, r3, #7
 800ff22:	2b05      	cmp	r3, #5
 800ff24:	d826      	bhi.n	800ff74 <UART_SetConfig+0x4c0>
 800ff26:	a201      	add	r2, pc, #4	; (adr r2, 800ff2c <UART_SetConfig+0x478>)
 800ff28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff2c:	0800ff45 	.word	0x0800ff45
 800ff30:	0800ff4d 	.word	0x0800ff4d
 800ff34:	0800ff55 	.word	0x0800ff55
 800ff38:	0800ff5d 	.word	0x0800ff5d
 800ff3c:	0800ff65 	.word	0x0800ff65
 800ff40:	0800ff6d 	.word	0x0800ff6d
 800ff44:	2300      	movs	r3, #0
 800ff46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff4a:	e086      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff4c:	2304      	movs	r3, #4
 800ff4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff52:	e082      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff54:	2308      	movs	r3, #8
 800ff56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff5a:	e07e      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff5c:	2310      	movs	r3, #16
 800ff5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff62:	e07a      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff64:	2320      	movs	r3, #32
 800ff66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff6a:	e076      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff6c:	2340      	movs	r3, #64	; 0x40
 800ff6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff72:	e072      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff74:	2380      	movs	r3, #128	; 0x80
 800ff76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff7a:	e06e      	b.n	801005a <UART_SetConfig+0x5a6>
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a75      	ldr	r2, [pc, #468]	; (8010158 <UART_SetConfig+0x6a4>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d130      	bne.n	800ffe8 <UART_SetConfig+0x534>
 800ff86:	4b72      	ldr	r3, [pc, #456]	; (8010150 <UART_SetConfig+0x69c>)
 800ff88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff8a:	f003 0307 	and.w	r3, r3, #7
 800ff8e:	2b05      	cmp	r3, #5
 800ff90:	d826      	bhi.n	800ffe0 <UART_SetConfig+0x52c>
 800ff92:	a201      	add	r2, pc, #4	; (adr r2, 800ff98 <UART_SetConfig+0x4e4>)
 800ff94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff98:	0800ffb1 	.word	0x0800ffb1
 800ff9c:	0800ffb9 	.word	0x0800ffb9
 800ffa0:	0800ffc1 	.word	0x0800ffc1
 800ffa4:	0800ffc9 	.word	0x0800ffc9
 800ffa8:	0800ffd1 	.word	0x0800ffd1
 800ffac:	0800ffd9 	.word	0x0800ffd9
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffb6:	e050      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffb8:	2304      	movs	r3, #4
 800ffba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffbe:	e04c      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffc0:	2308      	movs	r3, #8
 800ffc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffc6:	e048      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffc8:	2310      	movs	r3, #16
 800ffca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffce:	e044      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffd0:	2320      	movs	r3, #32
 800ffd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffd6:	e040      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffd8:	2340      	movs	r3, #64	; 0x40
 800ffda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffde:	e03c      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffe0:	2380      	movs	r3, #128	; 0x80
 800ffe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffe6:	e038      	b.n	801005a <UART_SetConfig+0x5a6>
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a5b      	ldr	r2, [pc, #364]	; (801015c <UART_SetConfig+0x6a8>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d130      	bne.n	8010054 <UART_SetConfig+0x5a0>
 800fff2:	4b57      	ldr	r3, [pc, #348]	; (8010150 <UART_SetConfig+0x69c>)
 800fff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff6:	f003 0307 	and.w	r3, r3, #7
 800fffa:	2b05      	cmp	r3, #5
 800fffc:	d826      	bhi.n	801004c <UART_SetConfig+0x598>
 800fffe:	a201      	add	r2, pc, #4	; (adr r2, 8010004 <UART_SetConfig+0x550>)
 8010000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010004:	0801001d 	.word	0x0801001d
 8010008:	08010025 	.word	0x08010025
 801000c:	0801002d 	.word	0x0801002d
 8010010:	08010035 	.word	0x08010035
 8010014:	0801003d 	.word	0x0801003d
 8010018:	08010045 	.word	0x08010045
 801001c:	2302      	movs	r3, #2
 801001e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010022:	e01a      	b.n	801005a <UART_SetConfig+0x5a6>
 8010024:	2304      	movs	r3, #4
 8010026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801002a:	e016      	b.n	801005a <UART_SetConfig+0x5a6>
 801002c:	2308      	movs	r3, #8
 801002e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010032:	e012      	b.n	801005a <UART_SetConfig+0x5a6>
 8010034:	2310      	movs	r3, #16
 8010036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801003a:	e00e      	b.n	801005a <UART_SetConfig+0x5a6>
 801003c:	2320      	movs	r3, #32
 801003e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010042:	e00a      	b.n	801005a <UART_SetConfig+0x5a6>
 8010044:	2340      	movs	r3, #64	; 0x40
 8010046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801004a:	e006      	b.n	801005a <UART_SetConfig+0x5a6>
 801004c:	2380      	movs	r3, #128	; 0x80
 801004e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010052:	e002      	b.n	801005a <UART_SetConfig+0x5a6>
 8010054:	2380      	movs	r3, #128	; 0x80
 8010056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4a3f      	ldr	r2, [pc, #252]	; (801015c <UART_SetConfig+0x6a8>)
 8010060:	4293      	cmp	r3, r2
 8010062:	f040 80f8 	bne.w	8010256 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010066:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801006a:	2b20      	cmp	r3, #32
 801006c:	dc46      	bgt.n	80100fc <UART_SetConfig+0x648>
 801006e:	2b02      	cmp	r3, #2
 8010070:	f2c0 8082 	blt.w	8010178 <UART_SetConfig+0x6c4>
 8010074:	3b02      	subs	r3, #2
 8010076:	2b1e      	cmp	r3, #30
 8010078:	d87e      	bhi.n	8010178 <UART_SetConfig+0x6c4>
 801007a:	a201      	add	r2, pc, #4	; (adr r2, 8010080 <UART_SetConfig+0x5cc>)
 801007c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010080:	08010103 	.word	0x08010103
 8010084:	08010179 	.word	0x08010179
 8010088:	0801010b 	.word	0x0801010b
 801008c:	08010179 	.word	0x08010179
 8010090:	08010179 	.word	0x08010179
 8010094:	08010179 	.word	0x08010179
 8010098:	0801011b 	.word	0x0801011b
 801009c:	08010179 	.word	0x08010179
 80100a0:	08010179 	.word	0x08010179
 80100a4:	08010179 	.word	0x08010179
 80100a8:	08010179 	.word	0x08010179
 80100ac:	08010179 	.word	0x08010179
 80100b0:	08010179 	.word	0x08010179
 80100b4:	08010179 	.word	0x08010179
 80100b8:	0801012b 	.word	0x0801012b
 80100bc:	08010179 	.word	0x08010179
 80100c0:	08010179 	.word	0x08010179
 80100c4:	08010179 	.word	0x08010179
 80100c8:	08010179 	.word	0x08010179
 80100cc:	08010179 	.word	0x08010179
 80100d0:	08010179 	.word	0x08010179
 80100d4:	08010179 	.word	0x08010179
 80100d8:	08010179 	.word	0x08010179
 80100dc:	08010179 	.word	0x08010179
 80100e0:	08010179 	.word	0x08010179
 80100e4:	08010179 	.word	0x08010179
 80100e8:	08010179 	.word	0x08010179
 80100ec:	08010179 	.word	0x08010179
 80100f0:	08010179 	.word	0x08010179
 80100f4:	08010179 	.word	0x08010179
 80100f8:	0801016b 	.word	0x0801016b
 80100fc:	2b40      	cmp	r3, #64	; 0x40
 80100fe:	d037      	beq.n	8010170 <UART_SetConfig+0x6bc>
 8010100:	e03a      	b.n	8010178 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010102:	f7fc fa63 	bl	800c5cc <HAL_RCCEx_GetD3PCLK1Freq>
 8010106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010108:	e03c      	b.n	8010184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801010a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801010e:	4618      	mov	r0, r3
 8010110:	f7fc fa72 	bl	800c5f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010118:	e034      	b.n	8010184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801011a:	f107 0318 	add.w	r3, r7, #24
 801011e:	4618      	mov	r0, r3
 8010120:	f7fc fbbe 	bl	800c8a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010128:	e02c      	b.n	8010184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801012a:	4b09      	ldr	r3, [pc, #36]	; (8010150 <UART_SetConfig+0x69c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f003 0320 	and.w	r3, r3, #32
 8010132:	2b00      	cmp	r3, #0
 8010134:	d016      	beq.n	8010164 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010136:	4b06      	ldr	r3, [pc, #24]	; (8010150 <UART_SetConfig+0x69c>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	08db      	lsrs	r3, r3, #3
 801013c:	f003 0303 	and.w	r3, r3, #3
 8010140:	4a07      	ldr	r2, [pc, #28]	; (8010160 <UART_SetConfig+0x6ac>)
 8010142:	fa22 f303 	lsr.w	r3, r2, r3
 8010146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010148:	e01c      	b.n	8010184 <UART_SetConfig+0x6d0>
 801014a:	bf00      	nop
 801014c:	40011400 	.word	0x40011400
 8010150:	58024400 	.word	0x58024400
 8010154:	40007800 	.word	0x40007800
 8010158:	40007c00 	.word	0x40007c00
 801015c:	58000c00 	.word	0x58000c00
 8010160:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010164:	4b9d      	ldr	r3, [pc, #628]	; (80103dc <UART_SetConfig+0x928>)
 8010166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010168:	e00c      	b.n	8010184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801016a:	4b9d      	ldr	r3, [pc, #628]	; (80103e0 <UART_SetConfig+0x92c>)
 801016c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801016e:	e009      	b.n	8010184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010176:	e005      	b.n	8010184 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010178:	2300      	movs	r3, #0
 801017a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010182:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010186:	2b00      	cmp	r3, #0
 8010188:	f000 81de 	beq.w	8010548 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010190:	4a94      	ldr	r2, [pc, #592]	; (80103e4 <UART_SetConfig+0x930>)
 8010192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010196:	461a      	mov	r2, r3
 8010198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019a:	fbb3 f3f2 	udiv	r3, r3, r2
 801019e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	685a      	ldr	r2, [r3, #4]
 80101a4:	4613      	mov	r3, r2
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	4413      	add	r3, r2
 80101aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d305      	bcc.n	80101bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d903      	bls.n	80101c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80101bc:	2301      	movs	r3, #1
 80101be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80101c2:	e1c1      	b.n	8010548 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c6:	2200      	movs	r2, #0
 80101c8:	60bb      	str	r3, [r7, #8]
 80101ca:	60fa      	str	r2, [r7, #12]
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d0:	4a84      	ldr	r2, [pc, #528]	; (80103e4 <UART_SetConfig+0x930>)
 80101d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	2200      	movs	r2, #0
 80101da:	603b      	str	r3, [r7, #0]
 80101dc:	607a      	str	r2, [r7, #4]
 80101de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101e6:	f7f0 f8d3 	bl	8000390 <__aeabi_uldivmod>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4610      	mov	r0, r2
 80101f0:	4619      	mov	r1, r3
 80101f2:	f04f 0200 	mov.w	r2, #0
 80101f6:	f04f 0300 	mov.w	r3, #0
 80101fa:	020b      	lsls	r3, r1, #8
 80101fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010200:	0202      	lsls	r2, r0, #8
 8010202:	6979      	ldr	r1, [r7, #20]
 8010204:	6849      	ldr	r1, [r1, #4]
 8010206:	0849      	lsrs	r1, r1, #1
 8010208:	2000      	movs	r0, #0
 801020a:	460c      	mov	r4, r1
 801020c:	4605      	mov	r5, r0
 801020e:	eb12 0804 	adds.w	r8, r2, r4
 8010212:	eb43 0905 	adc.w	r9, r3, r5
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	469a      	mov	sl, r3
 801021e:	4693      	mov	fp, r2
 8010220:	4652      	mov	r2, sl
 8010222:	465b      	mov	r3, fp
 8010224:	4640      	mov	r0, r8
 8010226:	4649      	mov	r1, r9
 8010228:	f7f0 f8b2 	bl	8000390 <__aeabi_uldivmod>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4613      	mov	r3, r2
 8010232:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801023a:	d308      	bcc.n	801024e <UART_SetConfig+0x79a>
 801023c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010242:	d204      	bcs.n	801024e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801024a:	60da      	str	r2, [r3, #12]
 801024c:	e17c      	b.n	8010548 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801024e:	2301      	movs	r3, #1
 8010250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010254:	e178      	b.n	8010548 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	69db      	ldr	r3, [r3, #28]
 801025a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801025e:	f040 80c5 	bne.w	80103ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010262:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010266:	2b20      	cmp	r3, #32
 8010268:	dc48      	bgt.n	80102fc <UART_SetConfig+0x848>
 801026a:	2b00      	cmp	r3, #0
 801026c:	db7b      	blt.n	8010366 <UART_SetConfig+0x8b2>
 801026e:	2b20      	cmp	r3, #32
 8010270:	d879      	bhi.n	8010366 <UART_SetConfig+0x8b2>
 8010272:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <UART_SetConfig+0x7c4>)
 8010274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010278:	08010303 	.word	0x08010303
 801027c:	0801030b 	.word	0x0801030b
 8010280:	08010367 	.word	0x08010367
 8010284:	08010367 	.word	0x08010367
 8010288:	08010313 	.word	0x08010313
 801028c:	08010367 	.word	0x08010367
 8010290:	08010367 	.word	0x08010367
 8010294:	08010367 	.word	0x08010367
 8010298:	08010323 	.word	0x08010323
 801029c:	08010367 	.word	0x08010367
 80102a0:	08010367 	.word	0x08010367
 80102a4:	08010367 	.word	0x08010367
 80102a8:	08010367 	.word	0x08010367
 80102ac:	08010367 	.word	0x08010367
 80102b0:	08010367 	.word	0x08010367
 80102b4:	08010367 	.word	0x08010367
 80102b8:	08010333 	.word	0x08010333
 80102bc:	08010367 	.word	0x08010367
 80102c0:	08010367 	.word	0x08010367
 80102c4:	08010367 	.word	0x08010367
 80102c8:	08010367 	.word	0x08010367
 80102cc:	08010367 	.word	0x08010367
 80102d0:	08010367 	.word	0x08010367
 80102d4:	08010367 	.word	0x08010367
 80102d8:	08010367 	.word	0x08010367
 80102dc:	08010367 	.word	0x08010367
 80102e0:	08010367 	.word	0x08010367
 80102e4:	08010367 	.word	0x08010367
 80102e8:	08010367 	.word	0x08010367
 80102ec:	08010367 	.word	0x08010367
 80102f0:	08010367 	.word	0x08010367
 80102f4:	08010367 	.word	0x08010367
 80102f8:	08010359 	.word	0x08010359
 80102fc:	2b40      	cmp	r3, #64	; 0x40
 80102fe:	d02e      	beq.n	801035e <UART_SetConfig+0x8aa>
 8010300:	e031      	b.n	8010366 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010302:	f7fb f9f1 	bl	800b6e8 <HAL_RCC_GetPCLK1Freq>
 8010306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010308:	e033      	b.n	8010372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801030a:	f7fb fa03 	bl	800b714 <HAL_RCC_GetPCLK2Freq>
 801030e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010310:	e02f      	b.n	8010372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010316:	4618      	mov	r0, r3
 8010318:	f7fc f96e 	bl	800c5f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010320:	e027      	b.n	8010372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010322:	f107 0318 	add.w	r3, r7, #24
 8010326:	4618      	mov	r0, r3
 8010328:	f7fc faba 	bl	800c8a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010330:	e01f      	b.n	8010372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010332:	4b2d      	ldr	r3, [pc, #180]	; (80103e8 <UART_SetConfig+0x934>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f003 0320 	and.w	r3, r3, #32
 801033a:	2b00      	cmp	r3, #0
 801033c:	d009      	beq.n	8010352 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801033e:	4b2a      	ldr	r3, [pc, #168]	; (80103e8 <UART_SetConfig+0x934>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	08db      	lsrs	r3, r3, #3
 8010344:	f003 0303 	and.w	r3, r3, #3
 8010348:	4a24      	ldr	r2, [pc, #144]	; (80103dc <UART_SetConfig+0x928>)
 801034a:	fa22 f303 	lsr.w	r3, r2, r3
 801034e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010350:	e00f      	b.n	8010372 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010352:	4b22      	ldr	r3, [pc, #136]	; (80103dc <UART_SetConfig+0x928>)
 8010354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010356:	e00c      	b.n	8010372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010358:	4b21      	ldr	r3, [pc, #132]	; (80103e0 <UART_SetConfig+0x92c>)
 801035a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801035c:	e009      	b.n	8010372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801035e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010364:	e005      	b.n	8010372 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010366:	2300      	movs	r3, #0
 8010368:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801036a:	2301      	movs	r3, #1
 801036c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010374:	2b00      	cmp	r3, #0
 8010376:	f000 80e7 	beq.w	8010548 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037e:	4a19      	ldr	r2, [pc, #100]	; (80103e4 <UART_SetConfig+0x930>)
 8010380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010384:	461a      	mov	r2, r3
 8010386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010388:	fbb3 f3f2 	udiv	r3, r3, r2
 801038c:	005a      	lsls	r2, r3, #1
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	085b      	lsrs	r3, r3, #1
 8010394:	441a      	add	r2, r3
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	fbb2 f3f3 	udiv	r3, r2, r3
 801039e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a2:	2b0f      	cmp	r3, #15
 80103a4:	d916      	bls.n	80103d4 <UART_SetConfig+0x920>
 80103a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103ac:	d212      	bcs.n	80103d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	f023 030f 	bic.w	r3, r3, #15
 80103b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ba:	085b      	lsrs	r3, r3, #1
 80103bc:	b29b      	uxth	r3, r3
 80103be:	f003 0307 	and.w	r3, r3, #7
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103c6:	4313      	orrs	r3, r2
 80103c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80103d0:	60da      	str	r2, [r3, #12]
 80103d2:	e0b9      	b.n	8010548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80103d4:	2301      	movs	r3, #1
 80103d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80103da:	e0b5      	b.n	8010548 <UART_SetConfig+0xa94>
 80103dc:	03d09000 	.word	0x03d09000
 80103e0:	003d0900 	.word	0x003d0900
 80103e4:	08015274 	.word	0x08015274
 80103e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80103ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80103f0:	2b20      	cmp	r3, #32
 80103f2:	dc49      	bgt.n	8010488 <UART_SetConfig+0x9d4>
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	db7c      	blt.n	80104f2 <UART_SetConfig+0xa3e>
 80103f8:	2b20      	cmp	r3, #32
 80103fa:	d87a      	bhi.n	80104f2 <UART_SetConfig+0xa3e>
 80103fc:	a201      	add	r2, pc, #4	; (adr r2, 8010404 <UART_SetConfig+0x950>)
 80103fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010402:	bf00      	nop
 8010404:	0801048f 	.word	0x0801048f
 8010408:	08010497 	.word	0x08010497
 801040c:	080104f3 	.word	0x080104f3
 8010410:	080104f3 	.word	0x080104f3
 8010414:	0801049f 	.word	0x0801049f
 8010418:	080104f3 	.word	0x080104f3
 801041c:	080104f3 	.word	0x080104f3
 8010420:	080104f3 	.word	0x080104f3
 8010424:	080104af 	.word	0x080104af
 8010428:	080104f3 	.word	0x080104f3
 801042c:	080104f3 	.word	0x080104f3
 8010430:	080104f3 	.word	0x080104f3
 8010434:	080104f3 	.word	0x080104f3
 8010438:	080104f3 	.word	0x080104f3
 801043c:	080104f3 	.word	0x080104f3
 8010440:	080104f3 	.word	0x080104f3
 8010444:	080104bf 	.word	0x080104bf
 8010448:	080104f3 	.word	0x080104f3
 801044c:	080104f3 	.word	0x080104f3
 8010450:	080104f3 	.word	0x080104f3
 8010454:	080104f3 	.word	0x080104f3
 8010458:	080104f3 	.word	0x080104f3
 801045c:	080104f3 	.word	0x080104f3
 8010460:	080104f3 	.word	0x080104f3
 8010464:	080104f3 	.word	0x080104f3
 8010468:	080104f3 	.word	0x080104f3
 801046c:	080104f3 	.word	0x080104f3
 8010470:	080104f3 	.word	0x080104f3
 8010474:	080104f3 	.word	0x080104f3
 8010478:	080104f3 	.word	0x080104f3
 801047c:	080104f3 	.word	0x080104f3
 8010480:	080104f3 	.word	0x080104f3
 8010484:	080104e5 	.word	0x080104e5
 8010488:	2b40      	cmp	r3, #64	; 0x40
 801048a:	d02e      	beq.n	80104ea <UART_SetConfig+0xa36>
 801048c:	e031      	b.n	80104f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801048e:	f7fb f92b 	bl	800b6e8 <HAL_RCC_GetPCLK1Freq>
 8010492:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010494:	e033      	b.n	80104fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010496:	f7fb f93d 	bl	800b714 <HAL_RCC_GetPCLK2Freq>
 801049a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801049c:	e02f      	b.n	80104fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801049e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fc f8a8 	bl	800c5f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ac:	e027      	b.n	80104fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104ae:	f107 0318 	add.w	r3, r7, #24
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fc f9f4 	bl	800c8a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104bc:	e01f      	b.n	80104fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104be:	4b2d      	ldr	r3, [pc, #180]	; (8010574 <UART_SetConfig+0xac0>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f003 0320 	and.w	r3, r3, #32
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d009      	beq.n	80104de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104ca:	4b2a      	ldr	r3, [pc, #168]	; (8010574 <UART_SetConfig+0xac0>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	08db      	lsrs	r3, r3, #3
 80104d0:	f003 0303 	and.w	r3, r3, #3
 80104d4:	4a28      	ldr	r2, [pc, #160]	; (8010578 <UART_SetConfig+0xac4>)
 80104d6:	fa22 f303 	lsr.w	r3, r2, r3
 80104da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80104dc:	e00f      	b.n	80104fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80104de:	4b26      	ldr	r3, [pc, #152]	; (8010578 <UART_SetConfig+0xac4>)
 80104e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e2:	e00c      	b.n	80104fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104e4:	4b25      	ldr	r3, [pc, #148]	; (801057c <UART_SetConfig+0xac8>)
 80104e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e8:	e009      	b.n	80104fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104f0:	e005      	b.n	80104fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80104f2:	2300      	movs	r3, #0
 80104f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80104fc:	bf00      	nop
    }

    if (pclk != 0U)
 80104fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010500:	2b00      	cmp	r3, #0
 8010502:	d021      	beq.n	8010548 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010508:	4a1d      	ldr	r2, [pc, #116]	; (8010580 <UART_SetConfig+0xacc>)
 801050a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801050e:	461a      	mov	r2, r3
 8010510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010512:	fbb3 f2f2 	udiv	r2, r3, r2
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	085b      	lsrs	r3, r3, #1
 801051c:	441a      	add	r2, r3
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	fbb2 f3f3 	udiv	r3, r2, r3
 8010526:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	2b0f      	cmp	r3, #15
 801052c:	d909      	bls.n	8010542 <UART_SetConfig+0xa8e>
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010534:	d205      	bcs.n	8010542 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010538:	b29a      	uxth	r2, r3
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	60da      	str	r2, [r3, #12]
 8010540:	e002      	b.n	8010548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010542:	2301      	movs	r3, #1
 8010544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	2201      	movs	r2, #1
 801054c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	2201      	movs	r2, #1
 8010554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	2200      	movs	r2, #0
 801055c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	2200      	movs	r2, #0
 8010562:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010564:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010568:	4618      	mov	r0, r3
 801056a:	3748      	adds	r7, #72	; 0x48
 801056c:	46bd      	mov	sp, r7
 801056e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010572:	bf00      	nop
 8010574:	58024400 	.word	0x58024400
 8010578:	03d09000 	.word	0x03d09000
 801057c:	003d0900 	.word	0x003d0900
 8010580:	08015274 	.word	0x08015274

08010584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010590:	f003 0301 	and.w	r3, r3, #1
 8010594:	2b00      	cmp	r3, #0
 8010596:	d00a      	beq.n	80105ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	430a      	orrs	r2, r1
 80105ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105b2:	f003 0302 	and.w	r3, r3, #2
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00a      	beq.n	80105d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	430a      	orrs	r2, r1
 80105ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d4:	f003 0304 	and.w	r3, r3, #4
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00a      	beq.n	80105f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	430a      	orrs	r2, r1
 80105f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105f6:	f003 0308 	and.w	r3, r3, #8
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00a      	beq.n	8010614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	430a      	orrs	r2, r1
 8010612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010618:	f003 0310 	and.w	r3, r3, #16
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00a      	beq.n	8010636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	689b      	ldr	r3, [r3, #8]
 8010626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	430a      	orrs	r2, r1
 8010634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063a:	f003 0320 	and.w	r3, r3, #32
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00a      	beq.n	8010658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	430a      	orrs	r2, r1
 8010656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801065c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010660:	2b00      	cmp	r3, #0
 8010662:	d01a      	beq.n	801069a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	430a      	orrs	r2, r1
 8010678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801067e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010682:	d10a      	bne.n	801069a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	430a      	orrs	r2, r1
 8010698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00a      	beq.n	80106bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	430a      	orrs	r2, r1
 80106ba:	605a      	str	r2, [r3, #4]
  }
}
 80106bc:	bf00      	nop
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b086      	sub	sp, #24
 80106cc:	af02      	add	r7, sp, #8
 80106ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106d8:	f7f6 fcc8 	bl	800706c <HAL_GetTick>
 80106dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f003 0308 	and.w	r3, r3, #8
 80106e8:	2b08      	cmp	r3, #8
 80106ea:	d10e      	bne.n	801070a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 f82f 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010706:	2303      	movs	r3, #3
 8010708:	e025      	b.n	8010756 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f003 0304 	and.w	r3, r3, #4
 8010714:	2b04      	cmp	r3, #4
 8010716:	d10e      	bne.n	8010736 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2200      	movs	r2, #0
 8010722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 f819 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 801072c:	4603      	mov	r3, r0
 801072e:	2b00      	cmp	r3, #0
 8010730:	d001      	beq.n	8010736 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010732:	2303      	movs	r3, #3
 8010734:	e00f      	b.n	8010756 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2220      	movs	r2, #32
 801073a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2220      	movs	r2, #32
 8010742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b09c      	sub	sp, #112	; 0x70
 8010762:	af00      	add	r7, sp, #0
 8010764:	60f8      	str	r0, [r7, #12]
 8010766:	60b9      	str	r1, [r7, #8]
 8010768:	603b      	str	r3, [r7, #0]
 801076a:	4613      	mov	r3, r2
 801076c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801076e:	e0a9      	b.n	80108c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010776:	f000 80a5 	beq.w	80108c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801077a:	f7f6 fc77 	bl	800706c <HAL_GetTick>
 801077e:	4602      	mov	r2, r0
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010786:	429a      	cmp	r2, r3
 8010788:	d302      	bcc.n	8010790 <UART_WaitOnFlagUntilTimeout+0x32>
 801078a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801078c:	2b00      	cmp	r3, #0
 801078e:	d140      	bne.n	8010812 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010798:	e853 3f00 	ldrex	r3, [r3]
 801079c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801079e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80107a4:	667b      	str	r3, [r7, #100]	; 0x64
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	461a      	mov	r2, r3
 80107ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80107b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80107b6:	e841 2300 	strex	r3, r2, [r1]
 80107ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80107bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1e6      	bne.n	8010790 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	3308      	adds	r3, #8
 80107c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107cc:	e853 3f00 	ldrex	r3, [r3]
 80107d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d4:	f023 0301 	bic.w	r3, r3, #1
 80107d8:	663b      	str	r3, [r7, #96]	; 0x60
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3308      	adds	r3, #8
 80107e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80107e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ea:	e841 2300 	strex	r3, r2, [r1]
 80107ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80107f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1e5      	bne.n	80107c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2220      	movs	r2, #32
 80107fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2220      	movs	r2, #32
 8010802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2200      	movs	r2, #0
 801080a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801080e:	2303      	movs	r3, #3
 8010810:	e069      	b.n	80108e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f003 0304 	and.w	r3, r3, #4
 801081c:	2b00      	cmp	r3, #0
 801081e:	d051      	beq.n	80108c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	69db      	ldr	r3, [r3, #28]
 8010826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801082a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801082e:	d149      	bne.n	80108c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010838:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010842:	e853 3f00 	ldrex	r3, [r3]
 8010846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801084e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	461a      	mov	r2, r3
 8010856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010858:	637b      	str	r3, [r7, #52]	; 0x34
 801085a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801085e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010860:	e841 2300 	strex	r3, r2, [r1]
 8010864:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010868:	2b00      	cmp	r3, #0
 801086a:	d1e6      	bne.n	801083a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	3308      	adds	r3, #8
 8010872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	e853 3f00 	ldrex	r3, [r3]
 801087a:	613b      	str	r3, [r7, #16]
   return(result);
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f023 0301 	bic.w	r3, r3, #1
 8010882:	66bb      	str	r3, [r7, #104]	; 0x68
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	3308      	adds	r3, #8
 801088a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801088c:	623a      	str	r2, [r7, #32]
 801088e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010890:	69f9      	ldr	r1, [r7, #28]
 8010892:	6a3a      	ldr	r2, [r7, #32]
 8010894:	e841 2300 	strex	r3, r2, [r1]
 8010898:	61bb      	str	r3, [r7, #24]
   return(result);
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1e5      	bne.n	801086c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2220      	movs	r2, #32
 80108a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2220      	movs	r2, #32
 80108ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2220      	movs	r2, #32
 80108b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80108c0:	2303      	movs	r3, #3
 80108c2:	e010      	b.n	80108e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	69da      	ldr	r2, [r3, #28]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	4013      	ands	r3, r2
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	bf0c      	ite	eq
 80108d4:	2301      	moveq	r3, #1
 80108d6:	2300      	movne	r3, #0
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	461a      	mov	r2, r3
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	429a      	cmp	r2, r3
 80108e0:	f43f af46 	beq.w	8010770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3770      	adds	r7, #112	; 0x70
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
	...

080108f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b096      	sub	sp, #88	; 0x58
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	4613      	mov	r3, r2
 80108fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	88fa      	ldrh	r2, [r7, #6]
 8010908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2200      	movs	r2, #0
 8010910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2222      	movs	r2, #34	; 0x22
 8010918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010920:	2b00      	cmp	r3, #0
 8010922:	d02c      	beq.n	801097e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010928:	4a42      	ldr	r2, [pc, #264]	; (8010a34 <UART_Start_Receive_DMA+0x144>)
 801092a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010930:	4a41      	ldr	r2, [pc, #260]	; (8010a38 <UART_Start_Receive_DMA+0x148>)
 8010932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010938:	4a40      	ldr	r2, [pc, #256]	; (8010a3c <UART_Start_Receive_DMA+0x14c>)
 801093a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010940:	2200      	movs	r2, #0
 8010942:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	3324      	adds	r3, #36	; 0x24
 801094e:	4619      	mov	r1, r3
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010954:	461a      	mov	r2, r3
 8010956:	88fb      	ldrh	r3, [r7, #6]
 8010958:	f7f7 fa3a 	bl	8007dd0 <HAL_DMA_Start_IT>
 801095c:	4603      	mov	r3, r0
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00d      	beq.n	801097e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2210      	movs	r2, #16
 8010966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2200      	movs	r2, #0
 801096e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2220      	movs	r2, #32
 8010976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	e055      	b.n	8010a2a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2200      	movs	r2, #0
 8010982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	691b      	ldr	r3, [r3, #16]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d018      	beq.n	80109c0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010996:	e853 3f00 	ldrex	r3, [r3]
 801099a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801099c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109a2:	657b      	str	r3, [r7, #84]	; 0x54
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	461a      	mov	r2, r3
 80109aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80109ae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109b4:	e841 2300 	strex	r3, r2, [r1]
 80109b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80109ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1e6      	bne.n	801098e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	3308      	adds	r3, #8
 80109c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ca:	e853 3f00 	ldrex	r3, [r3]
 80109ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	f043 0301 	orr.w	r3, r3, #1
 80109d6:	653b      	str	r3, [r7, #80]	; 0x50
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	3308      	adds	r3, #8
 80109de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109e0:	637a      	str	r2, [r7, #52]	; 0x34
 80109e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109e8:	e841 2300 	strex	r3, r2, [r1]
 80109ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80109ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d1e5      	bne.n	80109c0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3308      	adds	r3, #8
 80109fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	e853 3f00 	ldrex	r3, [r3]
 8010a02:	613b      	str	r3, [r7, #16]
   return(result);
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3308      	adds	r3, #8
 8010a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a14:	623a      	str	r2, [r7, #32]
 8010a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a18:	69f9      	ldr	r1, [r7, #28]
 8010a1a:	6a3a      	ldr	r2, [r7, #32]
 8010a1c:	e841 2300 	strex	r3, r2, [r1]
 8010a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1e5      	bne.n	80109f4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010a28:	2300      	movs	r3, #0
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3758      	adds	r7, #88	; 0x58
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	08010c43 	.word	0x08010c43
 8010a38:	08010d65 	.word	0x08010d65
 8010a3c:	08010d9d 	.word	0x08010d9d

08010a40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b08f      	sub	sp, #60	; 0x3c
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	e853 3f00 	ldrex	r3, [r3]
 8010a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	461a      	mov	r2, r3
 8010a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a6e:	e841 2300 	strex	r3, r2, [r1]
 8010a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1e6      	bne.n	8010a48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	3308      	adds	r3, #8
 8010a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	e853 3f00 	ldrex	r3, [r3]
 8010a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010a90:	633b      	str	r3, [r7, #48]	; 0x30
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	3308      	adds	r3, #8
 8010a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a9a:	61ba      	str	r2, [r7, #24]
 8010a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9e:	6979      	ldr	r1, [r7, #20]
 8010aa0:	69ba      	ldr	r2, [r7, #24]
 8010aa2:	e841 2300 	strex	r3, r2, [r1]
 8010aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d1e5      	bne.n	8010a7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2220      	movs	r2, #32
 8010ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010ab6:	bf00      	nop
 8010ab8:	373c      	adds	r7, #60	; 0x3c
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
	...

08010ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b095      	sub	sp, #84	; 0x54
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad4:	e853 3f00 	ldrex	r3, [r3]
 8010ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aea:	643b      	str	r3, [r7, #64]	; 0x40
 8010aec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010af2:	e841 2300 	strex	r3, r2, [r1]
 8010af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d1e6      	bne.n	8010acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	3308      	adds	r3, #8
 8010b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b06:	6a3b      	ldr	r3, [r7, #32]
 8010b08:	e853 3f00 	ldrex	r3, [r3]
 8010b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b0e:	69fa      	ldr	r2, [r7, #28]
 8010b10:	4b1e      	ldr	r3, [pc, #120]	; (8010b8c <UART_EndRxTransfer+0xc8>)
 8010b12:	4013      	ands	r3, r2
 8010b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	3308      	adds	r3, #8
 8010b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b26:	e841 2300 	strex	r3, r2, [r1]
 8010b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1e5      	bne.n	8010afe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d118      	bne.n	8010b6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	e853 3f00 	ldrex	r3, [r3]
 8010b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	f023 0310 	bic.w	r3, r3, #16
 8010b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	461a      	mov	r2, r3
 8010b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b58:	61bb      	str	r3, [r7, #24]
 8010b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b5c:	6979      	ldr	r1, [r7, #20]
 8010b5e:	69ba      	ldr	r2, [r7, #24]
 8010b60:	e841 2300 	strex	r3, r2, [r1]
 8010b64:	613b      	str	r3, [r7, #16]
   return(result);
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d1e6      	bne.n	8010b3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2220      	movs	r2, #32
 8010b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010b80:	bf00      	nop
 8010b82:	3754      	adds	r7, #84	; 0x54
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	effffffe 	.word	0xeffffffe

08010b90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b090      	sub	sp, #64	; 0x40
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	69db      	ldr	r3, [r3, #28]
 8010ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba6:	d037      	beq.n	8010c18 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010baa:	2200      	movs	r2, #0
 8010bac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bba:	e853 3f00 	ldrex	r3, [r3]
 8010bbe:	623b      	str	r3, [r7, #32]
   return(result);
 8010bc0:	6a3b      	ldr	r3, [r7, #32]
 8010bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	3308      	adds	r3, #8
 8010bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bd0:	633a      	str	r2, [r7, #48]	; 0x30
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bd8:	e841 2300 	strex	r3, r2, [r1]
 8010bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1e5      	bne.n	8010bb0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	e853 3f00 	ldrex	r3, [r3]
 8010bf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8010bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	461a      	mov	r2, r3
 8010c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c02:	61fb      	str	r3, [r7, #28]
 8010c04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c06:	69b9      	ldr	r1, [r7, #24]
 8010c08:	69fa      	ldr	r2, [r7, #28]
 8010c0a:	e841 2300 	strex	r3, r2, [r1]
 8010c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1e6      	bne.n	8010be4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c16:	e002      	b.n	8010c1e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010c18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c1a:	f7fe ff19 	bl	800fa50 <HAL_UART_TxCpltCallback>
}
 8010c1e:	bf00      	nop
 8010c20:	3740      	adds	r7, #64	; 0x40
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b084      	sub	sp, #16
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7fe ff15 	bl	800fa64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c3a:	bf00      	nop
 8010c3c:	3710      	adds	r7, #16
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b09c      	sub	sp, #112	; 0x70
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	69db      	ldr	r3, [r3, #28]
 8010c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c58:	d071      	beq.n	8010d3e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c6a:	e853 3f00 	ldrex	r3, [r3]
 8010c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c80:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c88:	e841 2300 	strex	r3, r2, [r1]
 8010c8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d1e6      	bne.n	8010c62 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	3308      	adds	r3, #8
 8010c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	e853 3f00 	ldrex	r3, [r3]
 8010ca2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca6:	f023 0301 	bic.w	r3, r3, #1
 8010caa:	667b      	str	r3, [r7, #100]	; 0x64
 8010cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	3308      	adds	r3, #8
 8010cb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cb4:	647a      	str	r2, [r7, #68]	; 0x44
 8010cb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cbc:	e841 2300 	strex	r3, r2, [r1]
 8010cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d1e5      	bne.n	8010c94 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	3308      	adds	r3, #8
 8010cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	e853 3f00 	ldrex	r3, [r3]
 8010cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8010cd8:	6a3b      	ldr	r3, [r7, #32]
 8010cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cde:	663b      	str	r3, [r7, #96]	; 0x60
 8010ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8010cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cf0:	e841 2300 	strex	r3, r2, [r1]
 8010cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1e5      	bne.n	8010cc8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cfe:	2220      	movs	r2, #32
 8010d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d118      	bne.n	8010d3e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	e853 3f00 	ldrex	r3, [r3]
 8010d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f023 0310 	bic.w	r3, r3, #16
 8010d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	461a      	mov	r2, r3
 8010d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d2a:	61fb      	str	r3, [r7, #28]
 8010d2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2e:	69b9      	ldr	r1, [r7, #24]
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	e841 2300 	strex	r3, r2, [r1]
 8010d36:	617b      	str	r3, [r7, #20]
   return(result);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1e6      	bne.n	8010d0c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d107      	bne.n	8010d56 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010d50:	f7f2 fb20 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d54:	e002      	b.n	8010d5c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010d56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010d58:	f7fe fe8e 	bl	800fa78 <HAL_UART_RxCpltCallback>
}
 8010d5c:	bf00      	nop
 8010d5e:	3770      	adds	r7, #112	; 0x70
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d109      	bne.n	8010d8e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d80:	085b      	lsrs	r3, r3, #1
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	4619      	mov	r1, r3
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f7f2 fb04 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d8c:	e002      	b.n	8010d94 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f7fe fe7c 	bl	800fa8c <HAL_UART_RxHalfCpltCallback>
}
 8010d94:	bf00      	nop
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b086      	sub	sp, #24
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010da8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010db0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010db8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	689b      	ldr	r3, [r3, #8]
 8010dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dc4:	2b80      	cmp	r3, #128	; 0x80
 8010dc6:	d109      	bne.n	8010ddc <UART_DMAError+0x40>
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	2b21      	cmp	r3, #33	; 0x21
 8010dcc:	d106      	bne.n	8010ddc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010dd6:	6978      	ldr	r0, [r7, #20]
 8010dd8:	f7ff fe32 	bl	8010a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	689b      	ldr	r3, [r3, #8]
 8010de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010de6:	2b40      	cmp	r3, #64	; 0x40
 8010de8:	d109      	bne.n	8010dfe <UART_DMAError+0x62>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b22      	cmp	r3, #34	; 0x22
 8010dee:	d106      	bne.n	8010dfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2200      	movs	r2, #0
 8010df4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010df8:	6978      	ldr	r0, [r7, #20]
 8010dfa:	f7ff fe63 	bl	8010ac4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e04:	f043 0210 	orr.w	r2, r3, #16
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e0e:	6978      	ldr	r0, [r7, #20]
 8010e10:	f7fe fe46 	bl	800faa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e14:	bf00      	nop
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	f7fe fe30 	bl	800faa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e40:	bf00      	nop
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	e853 3f00 	ldrex	r3, [r3]
 8010e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e64:	61fb      	str	r3, [r7, #28]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	61bb      	str	r3, [r7, #24]
 8010e70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e72:	6979      	ldr	r1, [r7, #20]
 8010e74:	69ba      	ldr	r2, [r7, #24]
 8010e76:	e841 2300 	strex	r3, r2, [r1]
 8010e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1e6      	bne.n	8010e50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2220      	movs	r2, #32
 8010e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7fe fddd 	bl	800fa50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e96:	bf00      	nop
 8010e98:	3720      	adds	r7, #32
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e9e:	b480      	push	{r7}
 8010ea0:	b083      	sub	sp, #12
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010ea6:	bf00      	nop
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010eba:	bf00      	nop
 8010ebc:	370c      	adds	r7, #12
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr

08010ec6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b083      	sub	sp, #12
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ece:	bf00      	nop
 8010ed0:	370c      	adds	r7, #12
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr

08010eda <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b084      	sub	sp, #16
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d101      	bne.n	8010ef0 <HAL_UARTEx_EnableFifoMode+0x16>
 8010eec:	2302      	movs	r3, #2
 8010eee:	e02b      	b.n	8010f48 <HAL_UARTEx_EnableFifoMode+0x6e>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2224      	movs	r2, #36	; 0x24
 8010efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f022 0201 	bic.w	r2, r2, #1
 8010f16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010f26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 f91f 	bl	8011174 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2220      	movs	r2, #32
 8010f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f46:	2300      	movs	r3, #0
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3710      	adds	r7, #16
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b085      	sub	sp, #20
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d101      	bne.n	8010f66 <HAL_UARTEx_DisableFifoMode+0x16>
 8010f62:	2302      	movs	r3, #2
 8010f64:	e027      	b.n	8010fb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2224      	movs	r2, #36	; 0x24
 8010f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f022 0201 	bic.w	r2, r2, #1
 8010f8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010f94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2220      	movs	r2, #32
 8010fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3714      	adds	r7, #20
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b084      	sub	sp, #16
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d101      	bne.n	8010fda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	e02d      	b.n	8011036 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2201      	movs	r2, #1
 8010fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2224      	movs	r2, #36	; 0x24
 8010fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f022 0201 	bic.w	r2, r2, #1
 8011000:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	430a      	orrs	r2, r1
 8011014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f000 f8ac 	bl	8011174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2220      	movs	r2, #32
 8011028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2200      	movs	r2, #0
 8011030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011034:	2300      	movs	r3, #0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801104e:	2b01      	cmp	r3, #1
 8011050:	d101      	bne.n	8011056 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011052:	2302      	movs	r3, #2
 8011054:	e02d      	b.n	80110b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2201      	movs	r2, #1
 801105a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2224      	movs	r2, #36	; 0x24
 8011062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f022 0201 	bic.w	r2, r2, #1
 801107c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	689b      	ldr	r3, [r3, #8]
 8011084:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	430a      	orrs	r2, r1
 8011090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 f86e 	bl	8011174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2220      	movs	r2, #32
 80110a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2200      	movs	r2, #0
 80110ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b08c      	sub	sp, #48	; 0x30
 80110be:	af00      	add	r7, sp, #0
 80110c0:	60f8      	str	r0, [r7, #12]
 80110c2:	60b9      	str	r1, [r7, #8]
 80110c4:	4613      	mov	r3, r2
 80110c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110ce:	2b20      	cmp	r3, #32
 80110d0:	d14a      	bne.n	8011168 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80110d8:	88fb      	ldrh	r3, [r7, #6]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d101      	bne.n	80110e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80110de:	2301      	movs	r3, #1
 80110e0:	e043      	b.n	801116a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d101      	bne.n	80110f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80110ec:	2302      	movs	r3, #2
 80110ee:	e03c      	b.n	801116a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2201      	movs	r2, #1
 80110f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2201      	movs	r2, #1
 80110fc:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80110fe:	88fb      	ldrh	r3, [r7, #6]
 8011100:	461a      	mov	r2, r3
 8011102:	68b9      	ldr	r1, [r7, #8]
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7ff fbf3 	bl	80108f0 <UART_Start_Receive_DMA>
 801110a:	4603      	mov	r3, r0
 801110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8011110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011114:	2b00      	cmp	r3, #0
 8011116:	d124      	bne.n	8011162 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801111c:	2b01      	cmp	r3, #1
 801111e:	d11d      	bne.n	801115c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2210      	movs	r2, #16
 8011126:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	e853 3f00 	ldrex	r3, [r3]
 8011134:	617b      	str	r3, [r7, #20]
   return(result);
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	f043 0310 	orr.w	r3, r3, #16
 801113c:	62bb      	str	r3, [r7, #40]	; 0x28
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	461a      	mov	r2, r3
 8011144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011146:	627b      	str	r3, [r7, #36]	; 0x24
 8011148:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114a:	6a39      	ldr	r1, [r7, #32]
 801114c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801114e:	e841 2300 	strex	r3, r2, [r1]
 8011152:	61fb      	str	r3, [r7, #28]
   return(result);
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1e6      	bne.n	8011128 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 801115a:	e002      	b.n	8011162 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801115c:	2301      	movs	r3, #1
 801115e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8011162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011166:	e000      	b.n	801116a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011168:	2302      	movs	r3, #2
  }
}
 801116a:	4618      	mov	r0, r3
 801116c:	3730      	adds	r7, #48	; 0x30
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
	...

08011174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011180:	2b00      	cmp	r3, #0
 8011182:	d108      	bne.n	8011196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011194:	e031      	b.n	80111fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011196:	2310      	movs	r3, #16
 8011198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801119a:	2310      	movs	r3, #16
 801119c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	0e5b      	lsrs	r3, r3, #25
 80111a6:	b2db      	uxtb	r3, r3
 80111a8:	f003 0307 	and.w	r3, r3, #7
 80111ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	0f5b      	lsrs	r3, r3, #29
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	f003 0307 	and.w	r3, r3, #7
 80111bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111be:	7bbb      	ldrb	r3, [r7, #14]
 80111c0:	7b3a      	ldrb	r2, [r7, #12]
 80111c2:	4911      	ldr	r1, [pc, #68]	; (8011208 <UARTEx_SetNbDataToProcess+0x94>)
 80111c4:	5c8a      	ldrb	r2, [r1, r2]
 80111c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111ca:	7b3a      	ldrb	r2, [r7, #12]
 80111cc:	490f      	ldr	r1, [pc, #60]	; (801120c <UARTEx_SetNbDataToProcess+0x98>)
 80111ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
 80111de:	7b7a      	ldrb	r2, [r7, #13]
 80111e0:	4909      	ldr	r1, [pc, #36]	; (8011208 <UARTEx_SetNbDataToProcess+0x94>)
 80111e2:	5c8a      	ldrb	r2, [r1, r2]
 80111e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111e8:	7b7a      	ldrb	r2, [r7, #13]
 80111ea:	4908      	ldr	r1, [pc, #32]	; (801120c <UARTEx_SetNbDataToProcess+0x98>)
 80111ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111fa:	bf00      	nop
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	0801528c 	.word	0x0801528c
 801120c:	08015294 	.word	0x08015294

08011210 <checkint>:
 8011210:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011214:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011218:	429a      	cmp	r2, r3
 801121a:	b570      	push	{r4, r5, r6, lr}
 801121c:	dd2a      	ble.n	8011274 <checkint+0x64>
 801121e:	f240 4333 	movw	r3, #1075	; 0x433
 8011222:	429a      	cmp	r2, r3
 8011224:	dc24      	bgt.n	8011270 <checkint+0x60>
 8011226:	1a9b      	subs	r3, r3, r2
 8011228:	f1a3 0620 	sub.w	r6, r3, #32
 801122c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011230:	fa02 f403 	lsl.w	r4, r2, r3
 8011234:	fa02 f606 	lsl.w	r6, r2, r6
 8011238:	f1c3 0520 	rsb	r5, r3, #32
 801123c:	fa22 f505 	lsr.w	r5, r2, r5
 8011240:	4334      	orrs	r4, r6
 8011242:	432c      	orrs	r4, r5
 8011244:	409a      	lsls	r2, r3
 8011246:	ea20 0202 	bic.w	r2, r0, r2
 801124a:	ea21 0404 	bic.w	r4, r1, r4
 801124e:	4322      	orrs	r2, r4
 8011250:	f1a3 0420 	sub.w	r4, r3, #32
 8011254:	f1c3 0220 	rsb	r2, r3, #32
 8011258:	d10c      	bne.n	8011274 <checkint+0x64>
 801125a:	40d8      	lsrs	r0, r3
 801125c:	fa01 f302 	lsl.w	r3, r1, r2
 8011260:	4318      	orrs	r0, r3
 8011262:	40e1      	lsrs	r1, r4
 8011264:	4308      	orrs	r0, r1
 8011266:	f000 0001 	and.w	r0, r0, #1
 801126a:	f1d0 0002 	rsbs	r0, r0, #2
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	2002      	movs	r0, #2
 8011272:	e7fc      	b.n	801126e <checkint+0x5e>
 8011274:	2000      	movs	r0, #0
 8011276:	e7fa      	b.n	801126e <checkint+0x5e>

08011278 <pow>:
 8011278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801127c:	ee10 4a90 	vmov	r4, s1
 8011280:	ed2d 8b0a 	vpush	{d8-d12}
 8011284:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011288:	ee11 7a90 	vmov	r7, s3
 801128c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8011290:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011294:	429a      	cmp	r2, r3
 8011296:	ee10 6a10 	vmov	r6, s0
 801129a:	ee11 0a10 	vmov	r0, s2
 801129e:	b086      	sub	sp, #24
 80112a0:	46d4      	mov	ip, sl
 80112a2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80112a6:	d806      	bhi.n	80112b6 <pow+0x3e>
 80112a8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80112ac:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80112b0:	2b7f      	cmp	r3, #127	; 0x7f
 80112b2:	f240 8156 	bls.w	8011562 <pow+0x2ea>
 80112b6:	1802      	adds	r2, r0, r0
 80112b8:	eb47 0107 	adc.w	r1, r7, r7
 80112bc:	f06f 0e01 	mvn.w	lr, #1
 80112c0:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 80112c4:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 80112c8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80112cc:	45ce      	cmp	lr, r9
 80112ce:	eb73 0808 	sbcs.w	r8, r3, r8
 80112d2:	d23f      	bcs.n	8011354 <pow+0xdc>
 80112d4:	ea52 0301 	orrs.w	r3, r2, r1
 80112d8:	f04f 0300 	mov.w	r3, #0
 80112dc:	d10c      	bne.n	80112f8 <pow+0x80>
 80112de:	19b6      	adds	r6, r6, r6
 80112e0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80112e4:	4164      	adcs	r4, r4
 80112e6:	42b3      	cmp	r3, r6
 80112e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80112ec:	41a3      	sbcs	r3, r4
 80112ee:	f0c0 808c 	bcc.w	801140a <pow+0x192>
 80112f2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80112f6:	e028      	b.n	801134a <pow+0xd2>
 80112f8:	4da3      	ldr	r5, [pc, #652]	; (8011588 <pow+0x310>)
 80112fa:	42ac      	cmp	r4, r5
 80112fc:	bf08      	it	eq
 80112fe:	429e      	cmpeq	r6, r3
 8011300:	d107      	bne.n	8011312 <pow+0x9a>
 8011302:	1800      	adds	r0, r0, r0
 8011304:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011308:	417f      	adcs	r7, r7
 801130a:	4283      	cmp	r3, r0
 801130c:	4b9f      	ldr	r3, [pc, #636]	; (801158c <pow+0x314>)
 801130e:	41bb      	sbcs	r3, r7
 8011310:	e7ed      	b.n	80112ee <pow+0x76>
 8011312:	19b6      	adds	r6, r6, r6
 8011314:	489e      	ldr	r0, [pc, #632]	; (8011590 <pow+0x318>)
 8011316:	4164      	adcs	r4, r4
 8011318:	42b3      	cmp	r3, r6
 801131a:	eb70 0504 	sbcs.w	r5, r0, r4
 801131e:	d374      	bcc.n	801140a <pow+0x192>
 8011320:	4281      	cmp	r1, r0
 8011322:	bf08      	it	eq
 8011324:	429a      	cmpeq	r2, r3
 8011326:	d170      	bne.n	801140a <pow+0x192>
 8011328:	4a9a      	ldr	r2, [pc, #616]	; (8011594 <pow+0x31c>)
 801132a:	4294      	cmp	r4, r2
 801132c:	bf08      	it	eq
 801132e:	429e      	cmpeq	r6, r3
 8011330:	d0df      	beq.n	80112f2 <pow+0x7a>
 8011332:	4294      	cmp	r4, r2
 8011334:	ea6f 0707 	mvn.w	r7, r7
 8011338:	bf34      	ite	cc
 801133a:	2400      	movcc	r4, #0
 801133c:	2401      	movcs	r4, #1
 801133e:	0fff      	lsrs	r7, r7, #31
 8011340:	42bc      	cmp	r4, r7
 8011342:	f040 81d9 	bne.w	80116f8 <pow+0x480>
 8011346:	ee21 0b01 	vmul.f64	d0, d1, d1
 801134a:	b006      	add	sp, #24
 801134c:	ecbd 8b0a 	vpop	{d8-d12}
 8011350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011354:	eb16 0806 	adds.w	r8, r6, r6
 8011358:	eb44 0904 	adc.w	r9, r4, r4
 801135c:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8011360:	f169 0200 	sbc.w	r2, r9, #0
 8011364:	458e      	cmp	lr, r1
 8011366:	4193      	sbcs	r3, r2
 8011368:	d223      	bcs.n	80113b2 <pow+0x13a>
 801136a:	ee20 0b00 	vmul.f64	d0, d0, d0
 801136e:	2c00      	cmp	r4, #0
 8011370:	da12      	bge.n	8011398 <pow+0x120>
 8011372:	4639      	mov	r1, r7
 8011374:	f7ff ff4c 	bl	8011210 <checkint>
 8011378:	2801      	cmp	r0, #1
 801137a:	d10d      	bne.n	8011398 <pow+0x120>
 801137c:	eeb1 0b40 	vneg.f64	d0, d0
 8011380:	ea58 0309 	orrs.w	r3, r8, r9
 8011384:	d10a      	bne.n	801139c <pow+0x124>
 8011386:	2f00      	cmp	r7, #0
 8011388:	dadf      	bge.n	801134a <pow+0xd2>
 801138a:	b006      	add	sp, #24
 801138c:	ecbd 8b0a 	vpop	{d8-d12}
 8011390:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011394:	f000 bfec 	b.w	8012370 <__math_divzero>
 8011398:	2000      	movs	r0, #0
 801139a:	e7f1      	b.n	8011380 <pow+0x108>
 801139c:	2f00      	cmp	r7, #0
 801139e:	dad4      	bge.n	801134a <pow+0xd2>
 80113a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80113a4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80113a8:	ed8d 7b00 	vstr	d7, [sp]
 80113ac:	ed9d 0b00 	vldr	d0, [sp]
 80113b0:	e7cb      	b.n	801134a <pow+0xd2>
 80113b2:	2c00      	cmp	r4, #0
 80113b4:	da2c      	bge.n	8011410 <pow+0x198>
 80113b6:	4639      	mov	r1, r7
 80113b8:	f7ff ff2a 	bl	8011210 <checkint>
 80113bc:	b930      	cbnz	r0, 80113cc <pow+0x154>
 80113be:	b006      	add	sp, #24
 80113c0:	ecbd 8b0a 	vpop	{d8-d12}
 80113c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c8:	f000 bfea 	b.w	80123a0 <__math_invalid>
 80113cc:	2801      	cmp	r0, #1
 80113ce:	bf14      	ite	ne
 80113d0:	2000      	movne	r0, #0
 80113d2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80113d6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80113da:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80113de:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80113e2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80113e6:	2b7f      	cmp	r3, #127	; 0x7f
 80113e8:	d92d      	bls.n	8011446 <pow+0x1ce>
 80113ea:	4b67      	ldr	r3, [pc, #412]	; (8011588 <pow+0x310>)
 80113ec:	2000      	movs	r0, #0
 80113ee:	429c      	cmp	r4, r3
 80113f0:	bf08      	it	eq
 80113f2:	4286      	cmpeq	r6, r0
 80113f4:	f43f af7d 	beq.w	80112f2 <pow+0x7a>
 80113f8:	f240 31bd 	movw	r1, #957	; 0x3bd
 80113fc:	428a      	cmp	r2, r1
 80113fe:	d80c      	bhi.n	801141a <pow+0x1a2>
 8011400:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011404:	42b0      	cmp	r0, r6
 8011406:	41a3      	sbcs	r3, r4
 8011408:	d204      	bcs.n	8011414 <pow+0x19c>
 801140a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801140e:	e79c      	b.n	801134a <pow+0xd2>
 8011410:	2000      	movs	r0, #0
 8011412:	e7e4      	b.n	80113de <pow+0x166>
 8011414:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011418:	e797      	b.n	801134a <pow+0xd2>
 801141a:	2e01      	cmp	r6, #1
 801141c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011420:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011424:	bf34      	ite	cc
 8011426:	2301      	movcc	r3, #1
 8011428:	2300      	movcs	r3, #0
 801142a:	4295      	cmp	r5, r2
 801142c:	bf8c      	ite	hi
 801142e:	2500      	movhi	r5, #0
 8011430:	2501      	movls	r5, #1
 8011432:	42ab      	cmp	r3, r5
 8011434:	f000 809d 	beq.w	8011572 <pow+0x2fa>
 8011438:	b006      	add	sp, #24
 801143a:	ecbd 8b0a 	vpop	{d8-d12}
 801143e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011442:	f000 bf8d 	b.w	8012360 <__math_oflow>
 8011446:	f1bc 0f00 	cmp.w	ip, #0
 801144a:	d10b      	bne.n	8011464 <pow+0x1ec>
 801144c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011580 <pow+0x308>
 8011450:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011454:	ec53 2b17 	vmov	r2, r3, d7
 8011458:	ee17 6a10 	vmov	r6, s14
 801145c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011460:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011464:	4b4c      	ldr	r3, [pc, #304]	; (8011598 <pow+0x320>)
 8011466:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801146a:	4423      	add	r3, r4
 801146c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011470:	1519      	asrs	r1, r3, #20
 8011472:	0d1b      	lsrs	r3, r3, #20
 8011474:	051b      	lsls	r3, r3, #20
 8011476:	eba4 0903 	sub.w	r9, r4, r3
 801147a:	4b48      	ldr	r3, [pc, #288]	; (801159c <pow+0x324>)
 801147c:	ee04 1a10 	vmov	s8, r1
 8011480:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011484:	f1b6 0800 	subs.w	r8, r6, #0
 8011488:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801148c:	ec49 8b15 	vmov	d5, r8, r9
 8011490:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011494:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011498:	ed93 7b00 	vldr	d7, [r3]
 801149c:	ed93 5b02 	vldr	d5, [r3, #8]
 80114a0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80114a4:	eea4 2b07 	vfma.f64	d2, d4, d7
 80114a8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80114ac:	ee36 ab02 	vadd.f64	d10, d6, d2
 80114b0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80114b4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80114b8:	ed93 5b04 	vldr	d5, [r3, #16]
 80114bc:	ee32 2b06 	vadd.f64	d2, d2, d6
 80114c0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80114c4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80114c8:	ed93 4b08 	vldr	d4, [r3, #32]
 80114cc:	ee26 0b05 	vmul.f64	d0, d6, d5
 80114d0:	eeb0 9b40 	vmov.f64	d9, d0
 80114d4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80114d8:	ed93 5b06 	vldr	d5, [r3, #24]
 80114dc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80114e0:	ee26 bb00 	vmul.f64	d11, d6, d0
 80114e4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80114e8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80114ec:	ee3a ab48 	vsub.f64	d10, d10, d8
 80114f0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80114f4:	ee37 9b09 	vadd.f64	d9, d7, d9
 80114f8:	ee3a ab00 	vadd.f64	d10, d10, d0
 80114fc:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011500:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011504:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011508:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801150c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011510:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011514:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011518:	eeab ab05 	vfma.f64	d10, d11, d5
 801151c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011520:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011524:	ee17 3a90 	vmov	r3, s15
 8011528:	eeb0 5b47 	vmov.f64	d5, d7
 801152c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011530:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011534:	18b2      	adds	r2, r6, r2
 8011536:	2a3e      	cmp	r2, #62	; 0x3e
 8011538:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801153c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011540:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011544:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011548:	d92b      	bls.n	80115a2 <pow+0x32a>
 801154a:	2a00      	cmp	r2, #0
 801154c:	da0b      	bge.n	8011566 <pow+0x2ee>
 801154e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011552:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011556:	2800      	cmp	r0, #0
 8011558:	f43f aef7 	beq.w	801134a <pow+0xd2>
 801155c:	eeb1 0b40 	vneg.f64	d0, d0
 8011560:	e6f3      	b.n	801134a <pow+0xd2>
 8011562:	2000      	movs	r0, #0
 8011564:	e77e      	b.n	8011464 <pow+0x1ec>
 8011566:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801156a:	d919      	bls.n	80115a0 <pow+0x328>
 801156c:	2b00      	cmp	r3, #0
 801156e:	f6bf af63 	bge.w	8011438 <pow+0x1c0>
 8011572:	b006      	add	sp, #24
 8011574:	ecbd 8b0a 	vpop	{d8-d12}
 8011578:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801157c:	f000 bee8 	b.w	8012350 <__math_uflow>
 8011580:	00000000 	.word	0x00000000
 8011584:	43300000 	.word	0x43300000
 8011588:	3ff00000 	.word	0x3ff00000
 801158c:	fff00000 	.word	0xfff00000
 8011590:	ffe00000 	.word	0xffe00000
 8011594:	7fe00000 	.word	0x7fe00000
 8011598:	c0196aab 	.word	0xc0196aab
 801159c:	080152a0 	.word	0x080152a0
 80115a0:	2600      	movs	r6, #0
 80115a2:	495d      	ldr	r1, [pc, #372]	; (8011718 <pow+0x4a0>)
 80115a4:	ed91 4b02 	vldr	d4, [r1, #8]
 80115a8:	ed91 3b00 	vldr	d3, [r1]
 80115ac:	eeb0 6b44 	vmov.f64	d6, d4
 80115b0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80115b4:	ee16 5a10 	vmov	r5, s12
 80115b8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80115bc:	ed91 4b04 	vldr	d4, [r1, #16]
 80115c0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80115c4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80115c8:	eeb0 0b47 	vmov.f64	d0, d7
 80115cc:	ed91 7b06 	vldr	d7, [r1, #24]
 80115d0:	18dc      	adds	r4, r3, r3
 80115d2:	f104 030f 	add.w	r3, r4, #15
 80115d6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80115da:	eea6 0b07 	vfma.f64	d0, d6, d7
 80115de:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80115e2:	ee35 0b00 	vadd.f64	d0, d5, d0
 80115e6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80115ea:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80115ee:	ed91 5b08 	vldr	d5, [r1, #32]
 80115f2:	ee30 7b07 	vadd.f64	d7, d0, d7
 80115f6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80115fa:	eea0 5b04 	vfma.f64	d5, d0, d4
 80115fe:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011602:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011606:	ee26 6b06 	vmul.f64	d6, d6, d6
 801160a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801160e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011612:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011616:	eea0 5b04 	vfma.f64	d5, d0, d4
 801161a:	1940      	adds	r0, r0, r5
 801161c:	2700      	movs	r7, #0
 801161e:	eb17 020c 	adds.w	r2, r7, ip
 8011622:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011626:	eea6 7b05 	vfma.f64	d7, d6, d5
 801162a:	2e00      	cmp	r6, #0
 801162c:	d15f      	bne.n	80116ee <pow+0x476>
 801162e:	42bd      	cmp	r5, r7
 8011630:	db13      	blt.n	801165a <pow+0x3e2>
 8011632:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011636:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801163a:	4610      	mov	r0, r2
 801163c:	ec41 0b10 	vmov	d0, r0, r1
 8011640:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011644:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011700 <pow+0x488>
 8011648:	ee20 0b07 	vmul.f64	d0, d0, d7
 801164c:	b006      	add	sp, #24
 801164e:	ecbd 8b0a 	vpop	{d8-d12}
 8011652:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011656:	f000 bebb 	b.w	80123d0 <__math_check_oflow>
 801165a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801165e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011662:	4610      	mov	r0, r2
 8011664:	ec41 0b15 	vmov	d5, r0, r1
 8011668:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801166c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011670:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011674:	eeb0 3bc7 	vabs.f64	d3, d7
 8011678:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011708 <pow+0x490>
 8011684:	d52a      	bpl.n	80116dc <pow+0x464>
 8011686:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801168a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011696:	ee35 6b06 	vadd.f64	d6, d5, d6
 801169a:	bf48      	it	mi
 801169c:	eeb0 4b43 	vmovmi.f64	d4, d3
 80116a0:	ee37 3b04 	vadd.f64	d3, d7, d4
 80116a4:	ee34 5b43 	vsub.f64	d5, d4, d3
 80116a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80116ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80116b0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80116b4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80116b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c0:	d104      	bne.n	80116cc <pow+0x454>
 80116c2:	4632      	mov	r2, r6
 80116c4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80116c8:	ec43 2b17 	vmov	d7, r2, r3
 80116cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80116d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116d4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80116d8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80116dc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80116e0:	b006      	add	sp, #24
 80116e2:	ecbd 8b0a 	vpop	{d8-d12}
 80116e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ea:	f000 be68 	b.w	80123be <__math_check_uflow>
 80116ee:	ec43 2b10 	vmov	d0, r2, r3
 80116f2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80116f6:	e628      	b.n	801134a <pow+0xd2>
 80116f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011710 <pow+0x498>
 80116fc:	e625      	b.n	801134a <pow+0xd2>
 80116fe:	bf00      	nop
 8011700:	00000000 	.word	0x00000000
 8011704:	7f000000 	.word	0x7f000000
 8011708:	00000000 	.word	0x00000000
 801170c:	00100000 	.word	0x00100000
	...
 8011718:	08016488 	.word	0x08016488
 801171c:	00000000 	.word	0x00000000

08011720 <cos>:
 8011720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011722:	eeb0 7b40 	vmov.f64	d7, d0
 8011726:	ee17 3a90 	vmov	r3, s15
 801172a:	4a21      	ldr	r2, [pc, #132]	; (80117b0 <cos+0x90>)
 801172c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011730:	4293      	cmp	r3, r2
 8011732:	dc06      	bgt.n	8011742 <cos+0x22>
 8011734:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80117a8 <cos+0x88>
 8011738:	b005      	add	sp, #20
 801173a:	f85d eb04 	ldr.w	lr, [sp], #4
 801173e:	f000 ba8f 	b.w	8011c60 <__kernel_cos>
 8011742:	4a1c      	ldr	r2, [pc, #112]	; (80117b4 <cos+0x94>)
 8011744:	4293      	cmp	r3, r2
 8011746:	dd04      	ble.n	8011752 <cos+0x32>
 8011748:	ee30 0b40 	vsub.f64	d0, d0, d0
 801174c:	b005      	add	sp, #20
 801174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011752:	4668      	mov	r0, sp
 8011754:	f000 f89c 	bl	8011890 <__ieee754_rem_pio2>
 8011758:	f000 0003 	and.w	r0, r0, #3
 801175c:	2801      	cmp	r0, #1
 801175e:	d009      	beq.n	8011774 <cos+0x54>
 8011760:	2802      	cmp	r0, #2
 8011762:	d010      	beq.n	8011786 <cos+0x66>
 8011764:	b9b0      	cbnz	r0, 8011794 <cos+0x74>
 8011766:	ed9d 1b02 	vldr	d1, [sp, #8]
 801176a:	ed9d 0b00 	vldr	d0, [sp]
 801176e:	f000 fa77 	bl	8011c60 <__kernel_cos>
 8011772:	e7eb      	b.n	801174c <cos+0x2c>
 8011774:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011778:	ed9d 0b00 	vldr	d0, [sp]
 801177c:	f000 fd74 	bl	8012268 <__kernel_sin>
 8011780:	eeb1 0b40 	vneg.f64	d0, d0
 8011784:	e7e2      	b.n	801174c <cos+0x2c>
 8011786:	ed9d 1b02 	vldr	d1, [sp, #8]
 801178a:	ed9d 0b00 	vldr	d0, [sp]
 801178e:	f000 fa67 	bl	8011c60 <__kernel_cos>
 8011792:	e7f5      	b.n	8011780 <cos+0x60>
 8011794:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011798:	ed9d 0b00 	vldr	d0, [sp]
 801179c:	2001      	movs	r0, #1
 801179e:	f000 fd63 	bl	8012268 <__kernel_sin>
 80117a2:	e7d3      	b.n	801174c <cos+0x2c>
 80117a4:	f3af 8000 	nop.w
	...
 80117b0:	3fe921fb 	.word	0x3fe921fb
 80117b4:	7fefffff 	.word	0x7fefffff

080117b8 <sin>:
 80117b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ba:	eeb0 7b40 	vmov.f64	d7, d0
 80117be:	ee17 3a90 	vmov	r3, s15
 80117c2:	4a21      	ldr	r2, [pc, #132]	; (8011848 <sin+0x90>)
 80117c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117c8:	4293      	cmp	r3, r2
 80117ca:	dc07      	bgt.n	80117dc <sin+0x24>
 80117cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011840 <sin+0x88>
 80117d0:	2000      	movs	r0, #0
 80117d2:	b005      	add	sp, #20
 80117d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117d8:	f000 bd46 	b.w	8012268 <__kernel_sin>
 80117dc:	4a1b      	ldr	r2, [pc, #108]	; (801184c <sin+0x94>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	dd04      	ble.n	80117ec <sin+0x34>
 80117e2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80117e6:	b005      	add	sp, #20
 80117e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80117ec:	4668      	mov	r0, sp
 80117ee:	f000 f84f 	bl	8011890 <__ieee754_rem_pio2>
 80117f2:	f000 0003 	and.w	r0, r0, #3
 80117f6:	2801      	cmp	r0, #1
 80117f8:	d00a      	beq.n	8011810 <sin+0x58>
 80117fa:	2802      	cmp	r0, #2
 80117fc:	d00f      	beq.n	801181e <sin+0x66>
 80117fe:	b9c0      	cbnz	r0, 8011832 <sin+0x7a>
 8011800:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011804:	ed9d 0b00 	vldr	d0, [sp]
 8011808:	2001      	movs	r0, #1
 801180a:	f000 fd2d 	bl	8012268 <__kernel_sin>
 801180e:	e7ea      	b.n	80117e6 <sin+0x2e>
 8011810:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011814:	ed9d 0b00 	vldr	d0, [sp]
 8011818:	f000 fa22 	bl	8011c60 <__kernel_cos>
 801181c:	e7e3      	b.n	80117e6 <sin+0x2e>
 801181e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011822:	ed9d 0b00 	vldr	d0, [sp]
 8011826:	2001      	movs	r0, #1
 8011828:	f000 fd1e 	bl	8012268 <__kernel_sin>
 801182c:	eeb1 0b40 	vneg.f64	d0, d0
 8011830:	e7d9      	b.n	80117e6 <sin+0x2e>
 8011832:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011836:	ed9d 0b00 	vldr	d0, [sp]
 801183a:	f000 fa11 	bl	8011c60 <__kernel_cos>
 801183e:	e7f5      	b.n	801182c <sin+0x74>
	...
 8011848:	3fe921fb 	.word	0x3fe921fb
 801184c:	7fefffff 	.word	0x7fefffff

08011850 <atan2f>:
 8011850:	f000 b962 	b.w	8011b18 <__ieee754_atan2f>

08011854 <sqrtf>:
 8011854:	b508      	push	{r3, lr}
 8011856:	ed2d 8b02 	vpush	{d8}
 801185a:	eeb0 8a40 	vmov.f32	s16, s0
 801185e:	f000 f9f9 	bl	8011c54 <__ieee754_sqrtf>
 8011862:	eeb4 8a48 	vcmp.f32	s16, s16
 8011866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186a:	d60c      	bvs.n	8011886 <sqrtf+0x32>
 801186c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801188c <sqrtf+0x38>
 8011870:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011878:	d505      	bpl.n	8011886 <sqrtf+0x32>
 801187a:	f000 ffa3 	bl	80127c4 <__errno>
 801187e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011882:	2321      	movs	r3, #33	; 0x21
 8011884:	6003      	str	r3, [r0, #0]
 8011886:	ecbd 8b02 	vpop	{d8}
 801188a:	bd08      	pop	{r3, pc}
 801188c:	00000000 	.word	0x00000000

08011890 <__ieee754_rem_pio2>:
 8011890:	b570      	push	{r4, r5, r6, lr}
 8011892:	eeb0 7b40 	vmov.f64	d7, d0
 8011896:	ee17 5a90 	vmov	r5, s15
 801189a:	4b99      	ldr	r3, [pc, #612]	; (8011b00 <__ieee754_rem_pio2+0x270>)
 801189c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80118a0:	429e      	cmp	r6, r3
 80118a2:	b088      	sub	sp, #32
 80118a4:	4604      	mov	r4, r0
 80118a6:	dc07      	bgt.n	80118b8 <__ieee754_rem_pio2+0x28>
 80118a8:	2200      	movs	r2, #0
 80118aa:	2300      	movs	r3, #0
 80118ac:	ed84 0b00 	vstr	d0, [r4]
 80118b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80118b4:	2000      	movs	r0, #0
 80118b6:	e01b      	b.n	80118f0 <__ieee754_rem_pio2+0x60>
 80118b8:	4b92      	ldr	r3, [pc, #584]	; (8011b04 <__ieee754_rem_pio2+0x274>)
 80118ba:	429e      	cmp	r6, r3
 80118bc:	dc3b      	bgt.n	8011936 <__ieee754_rem_pio2+0xa6>
 80118be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80118c2:	2d00      	cmp	r5, #0
 80118c4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011ac0 <__ieee754_rem_pio2+0x230>
 80118c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80118cc:	dd19      	ble.n	8011902 <__ieee754_rem_pio2+0x72>
 80118ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80118d2:	429e      	cmp	r6, r3
 80118d4:	d00e      	beq.n	80118f4 <__ieee754_rem_pio2+0x64>
 80118d6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011ac8 <__ieee754_rem_pio2+0x238>
 80118da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80118de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80118e2:	ed84 5b00 	vstr	d5, [r4]
 80118e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80118ee:	2001      	movs	r0, #1
 80118f0:	b008      	add	sp, #32
 80118f2:	bd70      	pop	{r4, r5, r6, pc}
 80118f4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011ad0 <__ieee754_rem_pio2+0x240>
 80118f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011ad8 <__ieee754_rem_pio2+0x248>
 8011900:	e7eb      	b.n	80118da <__ieee754_rem_pio2+0x4a>
 8011902:	429e      	cmp	r6, r3
 8011904:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011908:	d00e      	beq.n	8011928 <__ieee754_rem_pio2+0x98>
 801190a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011ac8 <__ieee754_rem_pio2+0x238>
 801190e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011912:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011916:	ed84 5b00 	vstr	d5, [r4]
 801191a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801191e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011922:	ed84 7b02 	vstr	d7, [r4, #8]
 8011926:	e7e3      	b.n	80118f0 <__ieee754_rem_pio2+0x60>
 8011928:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011ad0 <__ieee754_rem_pio2+0x240>
 801192c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011930:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011ad8 <__ieee754_rem_pio2+0x248>
 8011934:	e7eb      	b.n	801190e <__ieee754_rem_pio2+0x7e>
 8011936:	4b74      	ldr	r3, [pc, #464]	; (8011b08 <__ieee754_rem_pio2+0x278>)
 8011938:	429e      	cmp	r6, r3
 801193a:	dc70      	bgt.n	8011a1e <__ieee754_rem_pio2+0x18e>
 801193c:	f000 fd5c 	bl	80123f8 <fabs>
 8011940:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011944:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011ae0 <__ieee754_rem_pio2+0x250>
 8011948:	eea0 7b06 	vfma.f64	d7, d0, d6
 801194c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011950:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011954:	ee17 0a90 	vmov	r0, s15
 8011958:	eeb1 4b45 	vneg.f64	d4, d5
 801195c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011ac0 <__ieee754_rem_pio2+0x230>
 8011960:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011964:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011ac8 <__ieee754_rem_pio2+0x238>
 8011968:	281f      	cmp	r0, #31
 801196a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801196e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011972:	dc08      	bgt.n	8011986 <__ieee754_rem_pio2+0xf6>
 8011974:	4b65      	ldr	r3, [pc, #404]	; (8011b0c <__ieee754_rem_pio2+0x27c>)
 8011976:	1e42      	subs	r2, r0, #1
 8011978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801197c:	42b3      	cmp	r3, r6
 801197e:	d002      	beq.n	8011986 <__ieee754_rem_pio2+0xf6>
 8011980:	ed84 6b00 	vstr	d6, [r4]
 8011984:	e026      	b.n	80119d4 <__ieee754_rem_pio2+0x144>
 8011986:	ee16 3a90 	vmov	r3, s13
 801198a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801198e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011992:	2b10      	cmp	r3, #16
 8011994:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011998:	ddf2      	ble.n	8011980 <__ieee754_rem_pio2+0xf0>
 801199a:	eeb0 6b40 	vmov.f64	d6, d0
 801199e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011ad0 <__ieee754_rem_pio2+0x240>
 80119a2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011ad8 <__ieee754_rem_pio2+0x248>
 80119a6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80119aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80119ae:	eea4 0b07 	vfma.f64	d0, d4, d7
 80119b2:	eeb0 7b40 	vmov.f64	d7, d0
 80119b6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80119ba:	ee36 3b47 	vsub.f64	d3, d6, d7
 80119be:	ee13 3a90 	vmov	r3, s7
 80119c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	2b31      	cmp	r3, #49	; 0x31
 80119ca:	dc17      	bgt.n	80119fc <__ieee754_rem_pio2+0x16c>
 80119cc:	eeb0 0b46 	vmov.f64	d0, d6
 80119d0:	ed84 3b00 	vstr	d3, [r4]
 80119d4:	ed94 6b00 	vldr	d6, [r4]
 80119d8:	2d00      	cmp	r5, #0
 80119da:	ee30 0b46 	vsub.f64	d0, d0, d6
 80119de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80119e2:	ed84 0b02 	vstr	d0, [r4, #8]
 80119e6:	da83      	bge.n	80118f0 <__ieee754_rem_pio2+0x60>
 80119e8:	eeb1 6b46 	vneg.f64	d6, d6
 80119ec:	eeb1 0b40 	vneg.f64	d0, d0
 80119f0:	ed84 6b00 	vstr	d6, [r4]
 80119f4:	ed84 0b02 	vstr	d0, [r4, #8]
 80119f8:	4240      	negs	r0, r0
 80119fa:	e779      	b.n	80118f0 <__ieee754_rem_pio2+0x60>
 80119fc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011ae8 <__ieee754_rem_pio2+0x258>
 8011a00:	eeb0 0b46 	vmov.f64	d0, d6
 8011a04:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011a08:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011a0c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011af0 <__ieee754_rem_pio2+0x260>
 8011a10:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011a14:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011a18:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011a1c:	e7b0      	b.n	8011980 <__ieee754_rem_pio2+0xf0>
 8011a1e:	4b3c      	ldr	r3, [pc, #240]	; (8011b10 <__ieee754_rem_pio2+0x280>)
 8011a20:	429e      	cmp	r6, r3
 8011a22:	dd06      	ble.n	8011a32 <__ieee754_rem_pio2+0x1a2>
 8011a24:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011a28:	ed80 7b02 	vstr	d7, [r0, #8]
 8011a2c:	ed80 7b00 	vstr	d7, [r0]
 8011a30:	e740      	b.n	80118b4 <__ieee754_rem_pio2+0x24>
 8011a32:	1532      	asrs	r2, r6, #20
 8011a34:	ee10 0a10 	vmov	r0, s0
 8011a38:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011a3c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011a40:	ec41 0b17 	vmov	d7, r0, r1
 8011a44:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a48:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011af8 <__ieee754_rem_pio2+0x268>
 8011a4c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a58:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a5c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a60:	a902      	add	r1, sp, #8
 8011a62:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a6a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011a6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a72:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a76:	2603      	movs	r6, #3
 8011a78:	4608      	mov	r0, r1
 8011a7a:	ed91 7b04 	vldr	d7, [r1, #16]
 8011a7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a86:	4633      	mov	r3, r6
 8011a88:	f1a1 0108 	sub.w	r1, r1, #8
 8011a8c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011a90:	d0f3      	beq.n	8011a7a <__ieee754_rem_pio2+0x1ea>
 8011a92:	4920      	ldr	r1, [pc, #128]	; (8011b14 <__ieee754_rem_pio2+0x284>)
 8011a94:	9101      	str	r1, [sp, #4]
 8011a96:	2102      	movs	r1, #2
 8011a98:	9100      	str	r1, [sp, #0]
 8011a9a:	4621      	mov	r1, r4
 8011a9c:	f000 f94c 	bl	8011d38 <__kernel_rem_pio2>
 8011aa0:	2d00      	cmp	r5, #0
 8011aa2:	f6bf af25 	bge.w	80118f0 <__ieee754_rem_pio2+0x60>
 8011aa6:	ed94 7b00 	vldr	d7, [r4]
 8011aaa:	eeb1 7b47 	vneg.f64	d7, d7
 8011aae:	ed84 7b00 	vstr	d7, [r4]
 8011ab2:	ed94 7b02 	vldr	d7, [r4, #8]
 8011ab6:	eeb1 7b47 	vneg.f64	d7, d7
 8011aba:	ed84 7b02 	vstr	d7, [r4, #8]
 8011abe:	e79b      	b.n	80119f8 <__ieee754_rem_pio2+0x168>
 8011ac0:	54400000 	.word	0x54400000
 8011ac4:	3ff921fb 	.word	0x3ff921fb
 8011ac8:	1a626331 	.word	0x1a626331
 8011acc:	3dd0b461 	.word	0x3dd0b461
 8011ad0:	1a600000 	.word	0x1a600000
 8011ad4:	3dd0b461 	.word	0x3dd0b461
 8011ad8:	2e037073 	.word	0x2e037073
 8011adc:	3ba3198a 	.word	0x3ba3198a
 8011ae0:	6dc9c883 	.word	0x6dc9c883
 8011ae4:	3fe45f30 	.word	0x3fe45f30
 8011ae8:	2e000000 	.word	0x2e000000
 8011aec:	3ba3198a 	.word	0x3ba3198a
 8011af0:	252049c1 	.word	0x252049c1
 8011af4:	397b839a 	.word	0x397b839a
 8011af8:	00000000 	.word	0x00000000
 8011afc:	41700000 	.word	0x41700000
 8011b00:	3fe921fb 	.word	0x3fe921fb
 8011b04:	4002d97b 	.word	0x4002d97b
 8011b08:	413921fb 	.word	0x413921fb
 8011b0c:	080162e8 	.word	0x080162e8
 8011b10:	7fefffff 	.word	0x7fefffff
 8011b14:	08016368 	.word	0x08016368

08011b18 <__ieee754_atan2f>:
 8011b18:	ee10 2a90 	vmov	r2, s1
 8011b1c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011b20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011b24:	b510      	push	{r4, lr}
 8011b26:	eef0 7a40 	vmov.f32	s15, s0
 8011b2a:	dc06      	bgt.n	8011b3a <__ieee754_atan2f+0x22>
 8011b2c:	ee10 0a10 	vmov	r0, s0
 8011b30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011b34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b38:	dd04      	ble.n	8011b44 <__ieee754_atan2f+0x2c>
 8011b3a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8011b42:	bd10      	pop	{r4, pc}
 8011b44:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011b48:	d103      	bne.n	8011b52 <__ieee754_atan2f+0x3a>
 8011b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b4e:	f000 bd5d 	b.w	801260c <atanf>
 8011b52:	1794      	asrs	r4, r2, #30
 8011b54:	f004 0402 	and.w	r4, r4, #2
 8011b58:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b5c:	b93b      	cbnz	r3, 8011b6e <__ieee754_atan2f+0x56>
 8011b5e:	2c02      	cmp	r4, #2
 8011b60:	d05c      	beq.n	8011c1c <__ieee754_atan2f+0x104>
 8011b62:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011c30 <__ieee754_atan2f+0x118>
 8011b66:	2c03      	cmp	r4, #3
 8011b68:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011b6c:	e7e7      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011b6e:	b939      	cbnz	r1, 8011b80 <__ieee754_atan2f+0x68>
 8011b70:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011c34 <__ieee754_atan2f+0x11c>
 8011b74:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011c38 <__ieee754_atan2f+0x120>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	fe67 7a80 	vselge.f32	s15, s15, s0
 8011b7e:	e7de      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011b80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011b84:	d110      	bne.n	8011ba8 <__ieee754_atan2f+0x90>
 8011b86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011b8e:	d107      	bne.n	8011ba0 <__ieee754_atan2f+0x88>
 8011b90:	2c02      	cmp	r4, #2
 8011b92:	d846      	bhi.n	8011c22 <__ieee754_atan2f+0x10a>
 8011b94:	4b29      	ldr	r3, [pc, #164]	; (8011c3c <__ieee754_atan2f+0x124>)
 8011b96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b9a:	edd4 7a00 	vldr	s15, [r4]
 8011b9e:	e7ce      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011ba0:	2c02      	cmp	r4, #2
 8011ba2:	d841      	bhi.n	8011c28 <__ieee754_atan2f+0x110>
 8011ba4:	4b26      	ldr	r3, [pc, #152]	; (8011c40 <__ieee754_atan2f+0x128>)
 8011ba6:	e7f6      	b.n	8011b96 <__ieee754_atan2f+0x7e>
 8011ba8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011bac:	d0e0      	beq.n	8011b70 <__ieee754_atan2f+0x58>
 8011bae:	1a5b      	subs	r3, r3, r1
 8011bb0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011bb4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011bb8:	da1a      	bge.n	8011bf0 <__ieee754_atan2f+0xd8>
 8011bba:	2a00      	cmp	r2, #0
 8011bbc:	da01      	bge.n	8011bc2 <__ieee754_atan2f+0xaa>
 8011bbe:	313c      	adds	r1, #60	; 0x3c
 8011bc0:	db19      	blt.n	8011bf6 <__ieee754_atan2f+0xde>
 8011bc2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011bc6:	f000 fdf5 	bl	80127b4 <fabsf>
 8011bca:	f000 fd1f 	bl	801260c <atanf>
 8011bce:	eef0 7a40 	vmov.f32	s15, s0
 8011bd2:	2c01      	cmp	r4, #1
 8011bd4:	d012      	beq.n	8011bfc <__ieee754_atan2f+0xe4>
 8011bd6:	2c02      	cmp	r4, #2
 8011bd8:	d017      	beq.n	8011c0a <__ieee754_atan2f+0xf2>
 8011bda:	2c00      	cmp	r4, #0
 8011bdc:	d0af      	beq.n	8011b3e <__ieee754_atan2f+0x26>
 8011bde:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011c44 <__ieee754_atan2f+0x12c>
 8011be2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011be6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011c48 <__ieee754_atan2f+0x130>
 8011bea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011bee:	e7a6      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011bf0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011c34 <__ieee754_atan2f+0x11c>
 8011bf4:	e7ed      	b.n	8011bd2 <__ieee754_atan2f+0xba>
 8011bf6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011c4c <__ieee754_atan2f+0x134>
 8011bfa:	e7ea      	b.n	8011bd2 <__ieee754_atan2f+0xba>
 8011bfc:	ee17 3a90 	vmov	r3, s15
 8011c00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c04:	ee07 3a90 	vmov	s15, r3
 8011c08:	e799      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011c0a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011c44 <__ieee754_atan2f+0x12c>
 8011c0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011c12:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011c48 <__ieee754_atan2f+0x130>
 8011c16:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011c1a:	e790      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011c1c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011c48 <__ieee754_atan2f+0x130>
 8011c20:	e78d      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011c22:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011c50 <__ieee754_atan2f+0x138>
 8011c26:	e78a      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011c28:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011c4c <__ieee754_atan2f+0x134>
 8011c2c:	e787      	b.n	8011b3e <__ieee754_atan2f+0x26>
 8011c2e:	bf00      	nop
 8011c30:	c0490fdb 	.word	0xc0490fdb
 8011c34:	3fc90fdb 	.word	0x3fc90fdb
 8011c38:	bfc90fdb 	.word	0xbfc90fdb
 8011c3c:	08016470 	.word	0x08016470
 8011c40:	0801647c 	.word	0x0801647c
 8011c44:	33bbbd2e 	.word	0x33bbbd2e
 8011c48:	40490fdb 	.word	0x40490fdb
 8011c4c:	00000000 	.word	0x00000000
 8011c50:	3f490fdb 	.word	0x3f490fdb

08011c54 <__ieee754_sqrtf>:
 8011c54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011c58:	4770      	bx	lr
 8011c5a:	0000      	movs	r0, r0
 8011c5c:	0000      	movs	r0, r0
	...

08011c60 <__kernel_cos>:
 8011c60:	ee10 1a90 	vmov	r1, s1
 8011c64:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011c68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011c6c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011c70:	da05      	bge.n	8011c7e <__kernel_cos+0x1e>
 8011c72:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011c76:	ee17 3a90 	vmov	r3, s15
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d03d      	beq.n	8011cfa <__kernel_cos+0x9a>
 8011c7e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011c82:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011d00 <__kernel_cos+0xa0>
 8011c86:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011d08 <__kernel_cos+0xa8>
 8011c8a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011c8e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d10 <__kernel_cos+0xb0>
 8011c92:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011c96:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011d18 <__kernel_cos+0xb8>
 8011c9a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011c9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d20 <__kernel_cos+0xc0>
 8011ca2:	4b23      	ldr	r3, [pc, #140]	; (8011d30 <__kernel_cos+0xd0>)
 8011ca4:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011ca8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011d28 <__kernel_cos+0xc8>
 8011cac:	4299      	cmp	r1, r3
 8011cae:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011cb2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011cb6:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011cba:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011cbe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011cc2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011cc6:	dc04      	bgt.n	8011cd2 <__kernel_cos+0x72>
 8011cc8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011ccc:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011cd0:	4770      	bx	lr
 8011cd2:	4b18      	ldr	r3, [pc, #96]	; (8011d34 <__kernel_cos+0xd4>)
 8011cd4:	4299      	cmp	r1, r3
 8011cd6:	dc0d      	bgt.n	8011cf4 <__kernel_cos+0x94>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011cde:	ec43 2b15 	vmov	d5, r2, r3
 8011ce2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011ce6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011cea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011cee:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011cf2:	4770      	bx	lr
 8011cf4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011cf8:	e7f3      	b.n	8011ce2 <__kernel_cos+0x82>
 8011cfa:	eeb0 0b44 	vmov.f64	d0, d4
 8011cfe:	4770      	bx	lr
 8011d00:	be8838d4 	.word	0xbe8838d4
 8011d04:	bda8fae9 	.word	0xbda8fae9
 8011d08:	bdb4b1c4 	.word	0xbdb4b1c4
 8011d0c:	3e21ee9e 	.word	0x3e21ee9e
 8011d10:	809c52ad 	.word	0x809c52ad
 8011d14:	be927e4f 	.word	0xbe927e4f
 8011d18:	19cb1590 	.word	0x19cb1590
 8011d1c:	3efa01a0 	.word	0x3efa01a0
 8011d20:	16c15177 	.word	0x16c15177
 8011d24:	bf56c16c 	.word	0xbf56c16c
 8011d28:	5555554c 	.word	0x5555554c
 8011d2c:	3fa55555 	.word	0x3fa55555
 8011d30:	3fd33332 	.word	0x3fd33332
 8011d34:	3fe90000 	.word	0x3fe90000

08011d38 <__kernel_rem_pio2>:
 8011d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d3c:	ed2d 8b06 	vpush	{d8-d10}
 8011d40:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011d44:	460f      	mov	r7, r1
 8011d46:	9002      	str	r0, [sp, #8]
 8011d48:	49c5      	ldr	r1, [pc, #788]	; (8012060 <__kernel_rem_pio2+0x328>)
 8011d4a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011d4c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011d50:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	f112 0f14 	cmn.w	r2, #20
 8011d5a:	bfa8      	it	ge
 8011d5c:	2018      	movge	r0, #24
 8011d5e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011d62:	bfb8      	it	lt
 8011d64:	2000      	movlt	r0, #0
 8011d66:	f06f 0417 	mvn.w	r4, #23
 8011d6a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8012048 <__kernel_rem_pio2+0x310>
 8011d6e:	bfa4      	itt	ge
 8011d70:	f1a2 0a03 	subge.w	sl, r2, #3
 8011d74:	fb9a f0f0 	sdivge	r0, sl, r0
 8011d78:	fb00 4404 	mla	r4, r0, r4, r4
 8011d7c:	1a46      	subs	r6, r0, r1
 8011d7e:	4414      	add	r4, r2
 8011d80:	eb09 0c01 	add.w	ip, r9, r1
 8011d84:	ad1a      	add	r5, sp, #104	; 0x68
 8011d86:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	4562      	cmp	r2, ip
 8011d8e:	dd10      	ble.n	8011db2 <__kernel_rem_pio2+0x7a>
 8011d90:	9a01      	ldr	r2, [sp, #4]
 8011d92:	ab1a      	add	r3, sp, #104	; 0x68
 8011d94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011d98:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011d9c:	f04f 0c00 	mov.w	ip, #0
 8011da0:	45cc      	cmp	ip, r9
 8011da2:	dc26      	bgt.n	8011df2 <__kernel_rem_pio2+0xba>
 8011da4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8012048 <__kernel_rem_pio2+0x310>
 8011da8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011dac:	4616      	mov	r6, r2
 8011dae:	2500      	movs	r5, #0
 8011db0:	e015      	b.n	8011dde <__kernel_rem_pio2+0xa6>
 8011db2:	42d6      	cmn	r6, r2
 8011db4:	d409      	bmi.n	8011dca <__kernel_rem_pio2+0x92>
 8011db6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011dba:	ee07 3a90 	vmov	s15, r3
 8011dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011dc2:	eca5 7b02 	vstmia	r5!, {d7}
 8011dc6:	3201      	adds	r2, #1
 8011dc8:	e7e0      	b.n	8011d8c <__kernel_rem_pio2+0x54>
 8011dca:	eeb0 7b46 	vmov.f64	d7, d6
 8011dce:	e7f8      	b.n	8011dc2 <__kernel_rem_pio2+0x8a>
 8011dd0:	ecb8 5b02 	vldmia	r8!, {d5}
 8011dd4:	ed96 6b00 	vldr	d6, [r6]
 8011dd8:	3501      	adds	r5, #1
 8011dda:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011dde:	428d      	cmp	r5, r1
 8011de0:	f1a6 0608 	sub.w	r6, r6, #8
 8011de4:	ddf4      	ble.n	8011dd0 <__kernel_rem_pio2+0x98>
 8011de6:	ecaa 7b02 	vstmia	sl!, {d7}
 8011dea:	f10c 0c01 	add.w	ip, ip, #1
 8011dee:	3208      	adds	r2, #8
 8011df0:	e7d6      	b.n	8011da0 <__kernel_rem_pio2+0x68>
 8011df2:	ab06      	add	r3, sp, #24
 8011df4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8012050 <__kernel_rem_pio2+0x318>
 8011df8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8012058 <__kernel_rem_pio2+0x320>
 8011dfc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011e00:	9303      	str	r3, [sp, #12]
 8011e02:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011e06:	464d      	mov	r5, r9
 8011e08:	00eb      	lsls	r3, r5, #3
 8011e0a:	9304      	str	r3, [sp, #16]
 8011e0c:	ab92      	add	r3, sp, #584	; 0x248
 8011e0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011e12:	f10d 0b18 	add.w	fp, sp, #24
 8011e16:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011e18:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011e1c:	465e      	mov	r6, fp
 8011e1e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011e22:	4628      	mov	r0, r5
 8011e24:	2800      	cmp	r0, #0
 8011e26:	f1a2 0208 	sub.w	r2, r2, #8
 8011e2a:	dc4c      	bgt.n	8011ec6 <__kernel_rem_pio2+0x18e>
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	9105      	str	r1, [sp, #20]
 8011e30:	f000 fb62 	bl	80124f8 <scalbn>
 8011e34:	eeb0 8b40 	vmov.f64	d8, d0
 8011e38:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011e3c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011e40:	f000 fae6 	bl	8012410 <floor>
 8011e44:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011e48:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011e4c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011e50:	2c00      	cmp	r4, #0
 8011e52:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011e56:	ee17 8a90 	vmov	r8, s15
 8011e5a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011e5e:	9905      	ldr	r1, [sp, #20]
 8011e60:	dd43      	ble.n	8011eea <__kernel_rem_pio2+0x1b2>
 8011e62:	1e68      	subs	r0, r5, #1
 8011e64:	ab06      	add	r3, sp, #24
 8011e66:	f1c4 0c18 	rsb	ip, r4, #24
 8011e6a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011e6e:	fa46 f20c 	asr.w	r2, r6, ip
 8011e72:	4490      	add	r8, r2
 8011e74:	fa02 f20c 	lsl.w	r2, r2, ip
 8011e78:	1ab6      	subs	r6, r6, r2
 8011e7a:	f1c4 0217 	rsb	r2, r4, #23
 8011e7e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011e82:	4116      	asrs	r6, r2
 8011e84:	2e00      	cmp	r6, #0
 8011e86:	dd3f      	ble.n	8011f08 <__kernel_rem_pio2+0x1d0>
 8011e88:	f04f 0c00 	mov.w	ip, #0
 8011e8c:	f108 0801 	add.w	r8, r8, #1
 8011e90:	4660      	mov	r0, ip
 8011e92:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011e96:	4565      	cmp	r5, ip
 8011e98:	dc6e      	bgt.n	8011f78 <__kernel_rem_pio2+0x240>
 8011e9a:	2c00      	cmp	r4, #0
 8011e9c:	dd04      	ble.n	8011ea8 <__kernel_rem_pio2+0x170>
 8011e9e:	2c01      	cmp	r4, #1
 8011ea0:	d07f      	beq.n	8011fa2 <__kernel_rem_pio2+0x26a>
 8011ea2:	2c02      	cmp	r4, #2
 8011ea4:	f000 8087 	beq.w	8011fb6 <__kernel_rem_pio2+0x27e>
 8011ea8:	2e02      	cmp	r6, #2
 8011eaa:	d12d      	bne.n	8011f08 <__kernel_rem_pio2+0x1d0>
 8011eac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011eb0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011eb4:	b340      	cbz	r0, 8011f08 <__kernel_rem_pio2+0x1d0>
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	9105      	str	r1, [sp, #20]
 8011eba:	f000 fb1d 	bl	80124f8 <scalbn>
 8011ebe:	9905      	ldr	r1, [sp, #20]
 8011ec0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011ec4:	e020      	b.n	8011f08 <__kernel_rem_pio2+0x1d0>
 8011ec6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011eca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011ece:	3801      	subs	r0, #1
 8011ed0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011ed4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011ed8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011edc:	eca6 0a01 	vstmia	r6!, {s0}
 8011ee0:	ed92 0b00 	vldr	d0, [r2]
 8011ee4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011ee8:	e79c      	b.n	8011e24 <__kernel_rem_pio2+0xec>
 8011eea:	d105      	bne.n	8011ef8 <__kernel_rem_pio2+0x1c0>
 8011eec:	1e6a      	subs	r2, r5, #1
 8011eee:	ab06      	add	r3, sp, #24
 8011ef0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011ef4:	15f6      	asrs	r6, r6, #23
 8011ef6:	e7c5      	b.n	8011e84 <__kernel_rem_pio2+0x14c>
 8011ef8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011efc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f04:	da36      	bge.n	8011f74 <__kernel_rem_pio2+0x23c>
 8011f06:	2600      	movs	r6, #0
 8011f08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f10:	f040 80aa 	bne.w	8012068 <__kernel_rem_pio2+0x330>
 8011f14:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011f18:	4658      	mov	r0, fp
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	4548      	cmp	r0, r9
 8011f1e:	da52      	bge.n	8011fc6 <__kernel_rem_pio2+0x28e>
 8011f20:	2a00      	cmp	r2, #0
 8011f22:	f000 8081 	beq.w	8012028 <__kernel_rem_pio2+0x2f0>
 8011f26:	ab06      	add	r3, sp, #24
 8011f28:	3c18      	subs	r4, #24
 8011f2a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	f000 8087 	beq.w	8012042 <__kernel_rem_pio2+0x30a>
 8011f34:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 fadd 	bl	80124f8 <scalbn>
 8011f3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011f42:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8012050 <__kernel_rem_pio2+0x318>
 8011f46:	a96a      	add	r1, sp, #424	; 0x1a8
 8011f48:	f103 0208 	add.w	r2, r3, #8
 8011f4c:	1888      	adds	r0, r1, r2
 8011f4e:	4659      	mov	r1, fp
 8011f50:	2900      	cmp	r1, #0
 8011f52:	f280 80b7 	bge.w	80120c4 <__kernel_rem_pio2+0x38c>
 8011f56:	4659      	mov	r1, fp
 8011f58:	2900      	cmp	r1, #0
 8011f5a:	f2c0 80d5 	blt.w	8012108 <__kernel_rem_pio2+0x3d0>
 8011f5e:	a86a      	add	r0, sp, #424	; 0x1a8
 8011f60:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011f64:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8012048 <__kernel_rem_pio2+0x310>
 8011f68:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8012064 <__kernel_rem_pio2+0x32c>
 8011f6c:	2400      	movs	r4, #0
 8011f6e:	ebab 0001 	sub.w	r0, fp, r1
 8011f72:	e0be      	b.n	80120f2 <__kernel_rem_pio2+0x3ba>
 8011f74:	2602      	movs	r6, #2
 8011f76:	e787      	b.n	8011e88 <__kernel_rem_pio2+0x150>
 8011f78:	f8db 2000 	ldr.w	r2, [fp]
 8011f7c:	b958      	cbnz	r0, 8011f96 <__kernel_rem_pio2+0x25e>
 8011f7e:	b122      	cbz	r2, 8011f8a <__kernel_rem_pio2+0x252>
 8011f80:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011f84:	f8cb 2000 	str.w	r2, [fp]
 8011f88:	2201      	movs	r2, #1
 8011f8a:	f10c 0c01 	add.w	ip, ip, #1
 8011f8e:	f10b 0b04 	add.w	fp, fp, #4
 8011f92:	4610      	mov	r0, r2
 8011f94:	e77f      	b.n	8011e96 <__kernel_rem_pio2+0x15e>
 8011f96:	ebae 0202 	sub.w	r2, lr, r2
 8011f9a:	f8cb 2000 	str.w	r2, [fp]
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	e7f3      	b.n	8011f8a <__kernel_rem_pio2+0x252>
 8011fa2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011fa6:	ab06      	add	r3, sp, #24
 8011fa8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011fac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011fb0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011fb4:	e778      	b.n	8011ea8 <__kernel_rem_pio2+0x170>
 8011fb6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011fba:	ab06      	add	r3, sp, #24
 8011fbc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011fc0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011fc4:	e7f4      	b.n	8011fb0 <__kernel_rem_pio2+0x278>
 8011fc6:	ab06      	add	r3, sp, #24
 8011fc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011fcc:	3801      	subs	r0, #1
 8011fce:	431a      	orrs	r2, r3
 8011fd0:	e7a4      	b.n	8011f1c <__kernel_rem_pio2+0x1e4>
 8011fd2:	f10c 0c01 	add.w	ip, ip, #1
 8011fd6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d0f9      	beq.n	8011fd2 <__kernel_rem_pio2+0x29a>
 8011fde:	9b04      	ldr	r3, [sp, #16]
 8011fe0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011fe4:	eb0d 0203 	add.w	r2, sp, r3
 8011fe8:	9b01      	ldr	r3, [sp, #4]
 8011fea:	18e8      	adds	r0, r5, r3
 8011fec:	ab1a      	add	r3, sp, #104	; 0x68
 8011fee:	1c6e      	adds	r6, r5, #1
 8011ff0:	3a98      	subs	r2, #152	; 0x98
 8011ff2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011ff6:	4465      	add	r5, ip
 8011ff8:	42b5      	cmp	r5, r6
 8011ffa:	f6ff af05 	blt.w	8011e08 <__kernel_rem_pio2+0xd0>
 8011ffe:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8012002:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012006:	ee07 3a90 	vmov	s15, r3
 801200a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801200e:	f04f 0c00 	mov.w	ip, #0
 8012012:	eca0 7b02 	vstmia	r0!, {d7}
 8012016:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012048 <__kernel_rem_pio2+0x310>
 801201a:	4680      	mov	r8, r0
 801201c:	458c      	cmp	ip, r1
 801201e:	dd07      	ble.n	8012030 <__kernel_rem_pio2+0x2f8>
 8012020:	eca2 7b02 	vstmia	r2!, {d7}
 8012024:	3601      	adds	r6, #1
 8012026:	e7e7      	b.n	8011ff8 <__kernel_rem_pio2+0x2c0>
 8012028:	9a03      	ldr	r2, [sp, #12]
 801202a:	f04f 0c01 	mov.w	ip, #1
 801202e:	e7d2      	b.n	8011fd6 <__kernel_rem_pio2+0x29e>
 8012030:	ecbe 5b02 	vldmia	lr!, {d5}
 8012034:	ed38 6b02 	vldmdb	r8!, {d6}
 8012038:	f10c 0c01 	add.w	ip, ip, #1
 801203c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012040:	e7ec      	b.n	801201c <__kernel_rem_pio2+0x2e4>
 8012042:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012046:	e76e      	b.n	8011f26 <__kernel_rem_pio2+0x1ee>
	...
 8012054:	3e700000 	.word	0x3e700000
 8012058:	00000000 	.word	0x00000000
 801205c:	41700000 	.word	0x41700000
 8012060:	08016d38 	.word	0x08016d38
 8012064:	08016cf8 	.word	0x08016cf8
 8012068:	4260      	negs	r0, r4
 801206a:	eeb0 0b48 	vmov.f64	d0, d8
 801206e:	f000 fa43 	bl	80124f8 <scalbn>
 8012072:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012250 <__kernel_rem_pio2+0x518>
 8012076:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801207e:	db18      	blt.n	80120b2 <__kernel_rem_pio2+0x37a>
 8012080:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012258 <__kernel_rem_pio2+0x520>
 8012084:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012088:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801208c:	aa06      	add	r2, sp, #24
 801208e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012092:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012096:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801209a:	f105 0b01 	add.w	fp, r5, #1
 801209e:	ee10 3a10 	vmov	r3, s0
 80120a2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80120a6:	ee17 3a10 	vmov	r3, s14
 80120aa:	3418      	adds	r4, #24
 80120ac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80120b0:	e740      	b.n	8011f34 <__kernel_rem_pio2+0x1fc>
 80120b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80120b6:	aa06      	add	r2, sp, #24
 80120b8:	ee10 3a10 	vmov	r3, s0
 80120bc:	46ab      	mov	fp, r5
 80120be:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80120c2:	e737      	b.n	8011f34 <__kernel_rem_pio2+0x1fc>
 80120c4:	ac06      	add	r4, sp, #24
 80120c6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80120ca:	9401      	str	r4, [sp, #4]
 80120cc:	ee07 4a90 	vmov	s15, r4
 80120d0:	3901      	subs	r1, #1
 80120d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80120d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80120da:	ee20 0b06 	vmul.f64	d0, d0, d6
 80120de:	ed20 7b02 	vstmdb	r0!, {d7}
 80120e2:	e735      	b.n	8011f50 <__kernel_rem_pio2+0x218>
 80120e4:	ecbc 5b02 	vldmia	ip!, {d5}
 80120e8:	ecb5 6b02 	vldmia	r5!, {d6}
 80120ec:	3401      	adds	r4, #1
 80120ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 80120f2:	454c      	cmp	r4, r9
 80120f4:	dc01      	bgt.n	80120fa <__kernel_rem_pio2+0x3c2>
 80120f6:	4284      	cmp	r4, r0
 80120f8:	ddf4      	ble.n	80120e4 <__kernel_rem_pio2+0x3ac>
 80120fa:	ac42      	add	r4, sp, #264	; 0x108
 80120fc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012100:	ed80 7b00 	vstr	d7, [r0]
 8012104:	3901      	subs	r1, #1
 8012106:	e727      	b.n	8011f58 <__kernel_rem_pio2+0x220>
 8012108:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801210a:	2902      	cmp	r1, #2
 801210c:	dc0a      	bgt.n	8012124 <__kernel_rem_pio2+0x3ec>
 801210e:	2900      	cmp	r1, #0
 8012110:	dc2c      	bgt.n	801216c <__kernel_rem_pio2+0x434>
 8012112:	d045      	beq.n	80121a0 <__kernel_rem_pio2+0x468>
 8012114:	f008 0007 	and.w	r0, r8, #7
 8012118:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801211c:	ecbd 8b06 	vpop	{d8-d10}
 8012120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012124:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012126:	2a03      	cmp	r2, #3
 8012128:	d1f4      	bne.n	8012114 <__kernel_rem_pio2+0x3dc>
 801212a:	aa42      	add	r2, sp, #264	; 0x108
 801212c:	4413      	add	r3, r2
 801212e:	461a      	mov	r2, r3
 8012130:	4619      	mov	r1, r3
 8012132:	4658      	mov	r0, fp
 8012134:	2800      	cmp	r0, #0
 8012136:	f1a1 0108 	sub.w	r1, r1, #8
 801213a:	dc54      	bgt.n	80121e6 <__kernel_rem_pio2+0x4ae>
 801213c:	4659      	mov	r1, fp
 801213e:	2901      	cmp	r1, #1
 8012140:	f1a2 0208 	sub.w	r2, r2, #8
 8012144:	dc5f      	bgt.n	8012206 <__kernel_rem_pio2+0x4ce>
 8012146:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012260 <__kernel_rem_pio2+0x528>
 801214a:	3308      	adds	r3, #8
 801214c:	f1bb 0f01 	cmp.w	fp, #1
 8012150:	dc69      	bgt.n	8012226 <__kernel_rem_pio2+0x4ee>
 8012152:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012156:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801215a:	2e00      	cmp	r6, #0
 801215c:	d16a      	bne.n	8012234 <__kernel_rem_pio2+0x4fc>
 801215e:	ed87 5b00 	vstr	d5, [r7]
 8012162:	ed87 6b02 	vstr	d6, [r7, #8]
 8012166:	ed87 7b04 	vstr	d7, [r7, #16]
 801216a:	e7d3      	b.n	8012114 <__kernel_rem_pio2+0x3dc>
 801216c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012260 <__kernel_rem_pio2+0x528>
 8012170:	ab42      	add	r3, sp, #264	; 0x108
 8012172:	441a      	add	r2, r3
 8012174:	465b      	mov	r3, fp
 8012176:	2b00      	cmp	r3, #0
 8012178:	da26      	bge.n	80121c8 <__kernel_rem_pio2+0x490>
 801217a:	b35e      	cbz	r6, 80121d4 <__kernel_rem_pio2+0x49c>
 801217c:	eeb1 7b46 	vneg.f64	d7, d6
 8012180:	ed87 7b00 	vstr	d7, [r7]
 8012184:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012188:	aa44      	add	r2, sp, #272	; 0x110
 801218a:	2301      	movs	r3, #1
 801218c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012190:	459b      	cmp	fp, r3
 8012192:	da22      	bge.n	80121da <__kernel_rem_pio2+0x4a2>
 8012194:	b10e      	cbz	r6, 801219a <__kernel_rem_pio2+0x462>
 8012196:	eeb1 7b47 	vneg.f64	d7, d7
 801219a:	ed87 7b02 	vstr	d7, [r7, #8]
 801219e:	e7b9      	b.n	8012114 <__kernel_rem_pio2+0x3dc>
 80121a0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012260 <__kernel_rem_pio2+0x528>
 80121a4:	ab42      	add	r3, sp, #264	; 0x108
 80121a6:	441a      	add	r2, r3
 80121a8:	f1bb 0f00 	cmp.w	fp, #0
 80121ac:	da05      	bge.n	80121ba <__kernel_rem_pio2+0x482>
 80121ae:	b10e      	cbz	r6, 80121b4 <__kernel_rem_pio2+0x47c>
 80121b0:	eeb1 7b47 	vneg.f64	d7, d7
 80121b4:	ed87 7b00 	vstr	d7, [r7]
 80121b8:	e7ac      	b.n	8012114 <__kernel_rem_pio2+0x3dc>
 80121ba:	ed32 6b02 	vldmdb	r2!, {d6}
 80121be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80121c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121c6:	e7ef      	b.n	80121a8 <__kernel_rem_pio2+0x470>
 80121c8:	ed32 7b02 	vldmdb	r2!, {d7}
 80121cc:	3b01      	subs	r3, #1
 80121ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80121d2:	e7d0      	b.n	8012176 <__kernel_rem_pio2+0x43e>
 80121d4:	eeb0 7b46 	vmov.f64	d7, d6
 80121d8:	e7d2      	b.n	8012180 <__kernel_rem_pio2+0x448>
 80121da:	ecb2 6b02 	vldmia	r2!, {d6}
 80121de:	3301      	adds	r3, #1
 80121e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121e4:	e7d4      	b.n	8012190 <__kernel_rem_pio2+0x458>
 80121e6:	ed91 7b00 	vldr	d7, [r1]
 80121ea:	ed91 5b02 	vldr	d5, [r1, #8]
 80121ee:	3801      	subs	r0, #1
 80121f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80121f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121f8:	ed81 6b00 	vstr	d6, [r1]
 80121fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012200:	ed81 7b02 	vstr	d7, [r1, #8]
 8012204:	e796      	b.n	8012134 <__kernel_rem_pio2+0x3fc>
 8012206:	ed92 7b00 	vldr	d7, [r2]
 801220a:	ed92 5b02 	vldr	d5, [r2, #8]
 801220e:	3901      	subs	r1, #1
 8012210:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012214:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012218:	ed82 6b00 	vstr	d6, [r2]
 801221c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012220:	ed82 7b02 	vstr	d7, [r2, #8]
 8012224:	e78b      	b.n	801213e <__kernel_rem_pio2+0x406>
 8012226:	ed33 6b02 	vldmdb	r3!, {d6}
 801222a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801222e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012232:	e78b      	b.n	801214c <__kernel_rem_pio2+0x414>
 8012234:	eeb1 5b45 	vneg.f64	d5, d5
 8012238:	eeb1 6b46 	vneg.f64	d6, d6
 801223c:	ed87 5b00 	vstr	d5, [r7]
 8012240:	eeb1 7b47 	vneg.f64	d7, d7
 8012244:	ed87 6b02 	vstr	d6, [r7, #8]
 8012248:	e78d      	b.n	8012166 <__kernel_rem_pio2+0x42e>
 801224a:	bf00      	nop
 801224c:	f3af 8000 	nop.w
 8012250:	00000000 	.word	0x00000000
 8012254:	41700000 	.word	0x41700000
 8012258:	00000000 	.word	0x00000000
 801225c:	3e700000 	.word	0x3e700000
	...

08012268 <__kernel_sin>:
 8012268:	ee10 3a90 	vmov	r3, s1
 801226c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012270:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012274:	da04      	bge.n	8012280 <__kernel_sin+0x18>
 8012276:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801227a:	ee17 3a90 	vmov	r3, s15
 801227e:	b35b      	cbz	r3, 80122d8 <__kernel_sin+0x70>
 8012280:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012284:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012288:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80122e0 <__kernel_sin+0x78>
 801228c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80122e8 <__kernel_sin+0x80>
 8012290:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012294:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80122f0 <__kernel_sin+0x88>
 8012298:	eea4 7b06 	vfma.f64	d7, d4, d6
 801229c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80122f8 <__kernel_sin+0x90>
 80122a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80122a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012300 <__kernel_sin+0x98>
 80122a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80122ac:	b930      	cbnz	r0, 80122bc <__kernel_sin+0x54>
 80122ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012308 <__kernel_sin+0xa0>
 80122b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80122b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80122ba:	4770      	bx	lr
 80122bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80122c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80122c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80122c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80122cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012310 <__kernel_sin+0xa8>
 80122d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80122d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop
 80122dc:	f3af 8000 	nop.w
 80122e0:	5acfd57c 	.word	0x5acfd57c
 80122e4:	3de5d93a 	.word	0x3de5d93a
 80122e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80122ec:	be5ae5e6 	.word	0xbe5ae5e6
 80122f0:	57b1fe7d 	.word	0x57b1fe7d
 80122f4:	3ec71de3 	.word	0x3ec71de3
 80122f8:	19c161d5 	.word	0x19c161d5
 80122fc:	bf2a01a0 	.word	0xbf2a01a0
 8012300:	1110f8a6 	.word	0x1110f8a6
 8012304:	3f811111 	.word	0x3f811111
 8012308:	55555549 	.word	0x55555549
 801230c:	bfc55555 	.word	0xbfc55555
 8012310:	55555549 	.word	0x55555549
 8012314:	3fc55555 	.word	0x3fc55555

08012318 <with_errno>:
 8012318:	b513      	push	{r0, r1, r4, lr}
 801231a:	4604      	mov	r4, r0
 801231c:	ed8d 0b00 	vstr	d0, [sp]
 8012320:	f000 fa50 	bl	80127c4 <__errno>
 8012324:	ed9d 0b00 	vldr	d0, [sp]
 8012328:	6004      	str	r4, [r0, #0]
 801232a:	b002      	add	sp, #8
 801232c:	bd10      	pop	{r4, pc}

0801232e <xflow>:
 801232e:	b082      	sub	sp, #8
 8012330:	b158      	cbz	r0, 801234a <xflow+0x1c>
 8012332:	eeb1 7b40 	vneg.f64	d7, d0
 8012336:	ed8d 7b00 	vstr	d7, [sp]
 801233a:	ed9d 7b00 	vldr	d7, [sp]
 801233e:	2022      	movs	r0, #34	; 0x22
 8012340:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012344:	b002      	add	sp, #8
 8012346:	f7ff bfe7 	b.w	8012318 <with_errno>
 801234a:	eeb0 7b40 	vmov.f64	d7, d0
 801234e:	e7f2      	b.n	8012336 <xflow+0x8>

08012350 <__math_uflow>:
 8012350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012358 <__math_uflow+0x8>
 8012354:	f7ff bfeb 	b.w	801232e <xflow>
 8012358:	00000000 	.word	0x00000000
 801235c:	10000000 	.word	0x10000000

08012360 <__math_oflow>:
 8012360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012368 <__math_oflow+0x8>
 8012364:	f7ff bfe3 	b.w	801232e <xflow>
 8012368:	00000000 	.word	0x00000000
 801236c:	70000000 	.word	0x70000000

08012370 <__math_divzero>:
 8012370:	b082      	sub	sp, #8
 8012372:	2800      	cmp	r0, #0
 8012374:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012378:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801237c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012380:	ed8d 7b00 	vstr	d7, [sp]
 8012384:	ed9d 0b00 	vldr	d0, [sp]
 8012388:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012398 <__math_divzero+0x28>
 801238c:	2022      	movs	r0, #34	; 0x22
 801238e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012392:	b002      	add	sp, #8
 8012394:	f7ff bfc0 	b.w	8012318 <with_errno>
	...

080123a0 <__math_invalid>:
 80123a0:	eeb0 7b40 	vmov.f64	d7, d0
 80123a4:	eeb4 7b47 	vcmp.f64	d7, d7
 80123a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ac:	ee30 6b40 	vsub.f64	d6, d0, d0
 80123b0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80123b4:	d602      	bvs.n	80123bc <__math_invalid+0x1c>
 80123b6:	2021      	movs	r0, #33	; 0x21
 80123b8:	f7ff bfae 	b.w	8012318 <with_errno>
 80123bc:	4770      	bx	lr

080123be <__math_check_uflow>:
 80123be:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80123c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c6:	d102      	bne.n	80123ce <__math_check_uflow+0x10>
 80123c8:	2022      	movs	r0, #34	; 0x22
 80123ca:	f7ff bfa5 	b.w	8012318 <with_errno>
 80123ce:	4770      	bx	lr

080123d0 <__math_check_oflow>:
 80123d0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80123f0 <__math_check_oflow+0x20>
 80123d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80123d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80123dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e0:	dd02      	ble.n	80123e8 <__math_check_oflow+0x18>
 80123e2:	2022      	movs	r0, #34	; 0x22
 80123e4:	f7ff bf98 	b.w	8012318 <with_errno>
 80123e8:	4770      	bx	lr
 80123ea:	bf00      	nop
 80123ec:	f3af 8000 	nop.w
 80123f0:	ffffffff 	.word	0xffffffff
 80123f4:	7fefffff 	.word	0x7fefffff

080123f8 <fabs>:
 80123f8:	ec51 0b10 	vmov	r0, r1, d0
 80123fc:	ee10 2a10 	vmov	r2, s0
 8012400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012404:	ec43 2b10 	vmov	d0, r2, r3
 8012408:	4770      	bx	lr
 801240a:	0000      	movs	r0, r0
 801240c:	0000      	movs	r0, r0
	...

08012410 <floor>:
 8012410:	ee10 1a90 	vmov	r1, s1
 8012414:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012418:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801241c:	2b13      	cmp	r3, #19
 801241e:	b530      	push	{r4, r5, lr}
 8012420:	ee10 0a10 	vmov	r0, s0
 8012424:	ee10 5a10 	vmov	r5, s0
 8012428:	dc31      	bgt.n	801248e <floor+0x7e>
 801242a:	2b00      	cmp	r3, #0
 801242c:	da15      	bge.n	801245a <floor+0x4a>
 801242e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80124e8 <floor+0xd8>
 8012432:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012436:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	dd07      	ble.n	8012450 <floor+0x40>
 8012440:	2900      	cmp	r1, #0
 8012442:	da4e      	bge.n	80124e2 <floor+0xd2>
 8012444:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012448:	4318      	orrs	r0, r3
 801244a:	d001      	beq.n	8012450 <floor+0x40>
 801244c:	4928      	ldr	r1, [pc, #160]	; (80124f0 <floor+0xe0>)
 801244e:	2000      	movs	r0, #0
 8012450:	460b      	mov	r3, r1
 8012452:	4602      	mov	r2, r0
 8012454:	ec43 2b10 	vmov	d0, r2, r3
 8012458:	e020      	b.n	801249c <floor+0x8c>
 801245a:	4a26      	ldr	r2, [pc, #152]	; (80124f4 <floor+0xe4>)
 801245c:	411a      	asrs	r2, r3
 801245e:	ea01 0402 	and.w	r4, r1, r2
 8012462:	4304      	orrs	r4, r0
 8012464:	d01a      	beq.n	801249c <floor+0x8c>
 8012466:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80124e8 <floor+0xd8>
 801246a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801246e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	ddeb      	ble.n	8012450 <floor+0x40>
 8012478:	2900      	cmp	r1, #0
 801247a:	bfbe      	ittt	lt
 801247c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012480:	fa40 f303 	asrlt.w	r3, r0, r3
 8012484:	18c9      	addlt	r1, r1, r3
 8012486:	ea21 0102 	bic.w	r1, r1, r2
 801248a:	2000      	movs	r0, #0
 801248c:	e7e0      	b.n	8012450 <floor+0x40>
 801248e:	2b33      	cmp	r3, #51	; 0x33
 8012490:	dd05      	ble.n	801249e <floor+0x8e>
 8012492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012496:	d101      	bne.n	801249c <floor+0x8c>
 8012498:	ee30 0b00 	vadd.f64	d0, d0, d0
 801249c:	bd30      	pop	{r4, r5, pc}
 801249e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80124a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124a6:	40e2      	lsrs	r2, r4
 80124a8:	4202      	tst	r2, r0
 80124aa:	d0f7      	beq.n	801249c <floor+0x8c>
 80124ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80124e8 <floor+0xd8>
 80124b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80124b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124bc:	ddc8      	ble.n	8012450 <floor+0x40>
 80124be:	2900      	cmp	r1, #0
 80124c0:	da02      	bge.n	80124c8 <floor+0xb8>
 80124c2:	2b14      	cmp	r3, #20
 80124c4:	d103      	bne.n	80124ce <floor+0xbe>
 80124c6:	3101      	adds	r1, #1
 80124c8:	ea20 0002 	bic.w	r0, r0, r2
 80124cc:	e7c0      	b.n	8012450 <floor+0x40>
 80124ce:	2401      	movs	r4, #1
 80124d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80124d4:	fa04 f303 	lsl.w	r3, r4, r3
 80124d8:	4418      	add	r0, r3
 80124da:	42a8      	cmp	r0, r5
 80124dc:	bf38      	it	cc
 80124de:	1909      	addcc	r1, r1, r4
 80124e0:	e7f2      	b.n	80124c8 <floor+0xb8>
 80124e2:	2000      	movs	r0, #0
 80124e4:	4601      	mov	r1, r0
 80124e6:	e7b3      	b.n	8012450 <floor+0x40>
 80124e8:	8800759c 	.word	0x8800759c
 80124ec:	7e37e43c 	.word	0x7e37e43c
 80124f0:	bff00000 	.word	0xbff00000
 80124f4:	000fffff 	.word	0x000fffff

080124f8 <scalbn>:
 80124f8:	ee10 1a90 	vmov	r1, s1
 80124fc:	b510      	push	{r4, lr}
 80124fe:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012502:	b98c      	cbnz	r4, 8012528 <scalbn+0x30>
 8012504:	ee10 3a10 	vmov	r3, s0
 8012508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801250c:	430b      	orrs	r3, r1
 801250e:	d011      	beq.n	8012534 <scalbn+0x3c>
 8012510:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80125d8 <scalbn+0xe0>
 8012514:	4b3c      	ldr	r3, [pc, #240]	; (8012608 <scalbn+0x110>)
 8012516:	ee20 0b07 	vmul.f64	d0, d0, d7
 801251a:	4298      	cmp	r0, r3
 801251c:	da0b      	bge.n	8012536 <scalbn+0x3e>
 801251e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80125e0 <scalbn+0xe8>
 8012522:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012526:	e005      	b.n	8012534 <scalbn+0x3c>
 8012528:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801252c:	429c      	cmp	r4, r3
 801252e:	d107      	bne.n	8012540 <scalbn+0x48>
 8012530:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012534:	bd10      	pop	{r4, pc}
 8012536:	ee10 1a90 	vmov	r1, s1
 801253a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801253e:	3c36      	subs	r4, #54	; 0x36
 8012540:	4404      	add	r4, r0
 8012542:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012546:	429c      	cmp	r4, r3
 8012548:	dd0d      	ble.n	8012566 <scalbn+0x6e>
 801254a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80125e8 <scalbn+0xf0>
 801254e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80125f0 <scalbn+0xf8>
 8012552:	eeb0 6b47 	vmov.f64	d6, d7
 8012556:	ee10 3a90 	vmov	r3, s1
 801255a:	2b00      	cmp	r3, #0
 801255c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012560:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012564:	e7e6      	b.n	8012534 <scalbn+0x3c>
 8012566:	2c00      	cmp	r4, #0
 8012568:	dd0a      	ble.n	8012580 <scalbn+0x88>
 801256a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801256e:	ec53 2b10 	vmov	r2, r3, d0
 8012572:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012576:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801257a:	ec43 2b10 	vmov	d0, r2, r3
 801257e:	e7d9      	b.n	8012534 <scalbn+0x3c>
 8012580:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012584:	da19      	bge.n	80125ba <scalbn+0xc2>
 8012586:	f24c 3350 	movw	r3, #50000	; 0xc350
 801258a:	4298      	cmp	r0, r3
 801258c:	ee10 3a90 	vmov	r3, s1
 8012590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012594:	dd09      	ble.n	80125aa <scalbn+0xb2>
 8012596:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80125e8 <scalbn+0xf0>
 801259a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80125f0 <scalbn+0xf8>
 801259e:	eeb0 7b40 	vmov.f64	d7, d0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80125a8:	e7bb      	b.n	8012522 <scalbn+0x2a>
 80125aa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80125e0 <scalbn+0xe8>
 80125ae:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80125f8 <scalbn+0x100>
 80125b2:	eeb0 7b40 	vmov.f64	d7, d0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	e7f4      	b.n	80125a4 <scalbn+0xac>
 80125ba:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80125be:	ec53 2b10 	vmov	r2, r3, d0
 80125c2:	3436      	adds	r4, #54	; 0x36
 80125c4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80125c8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80125cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012600 <scalbn+0x108>
 80125d0:	ec43 2b10 	vmov	d0, r2, r3
 80125d4:	e7a5      	b.n	8012522 <scalbn+0x2a>
 80125d6:	bf00      	nop
 80125d8:	00000000 	.word	0x00000000
 80125dc:	43500000 	.word	0x43500000
 80125e0:	c2f8f359 	.word	0xc2f8f359
 80125e4:	01a56e1f 	.word	0x01a56e1f
 80125e8:	8800759c 	.word	0x8800759c
 80125ec:	7e37e43c 	.word	0x7e37e43c
 80125f0:	8800759c 	.word	0x8800759c
 80125f4:	fe37e43c 	.word	0xfe37e43c
 80125f8:	c2f8f359 	.word	0xc2f8f359
 80125fc:	81a56e1f 	.word	0x81a56e1f
 8012600:	00000000 	.word	0x00000000
 8012604:	3c900000 	.word	0x3c900000
 8012608:	ffff3cb0 	.word	0xffff3cb0

0801260c <atanf>:
 801260c:	b538      	push	{r3, r4, r5, lr}
 801260e:	ee10 5a10 	vmov	r5, s0
 8012612:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012616:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801261a:	eef0 7a40 	vmov.f32	s15, s0
 801261e:	db0f      	blt.n	8012640 <atanf+0x34>
 8012620:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012624:	dd04      	ble.n	8012630 <atanf+0x24>
 8012626:	ee70 7a00 	vadd.f32	s15, s0, s0
 801262a:	eeb0 0a67 	vmov.f32	s0, s15
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012768 <atanf+0x15c>
 8012634:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801276c <atanf+0x160>
 8012638:	2d00      	cmp	r5, #0
 801263a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801263e:	e7f4      	b.n	801262a <atanf+0x1e>
 8012640:	4b4b      	ldr	r3, [pc, #300]	; (8012770 <atanf+0x164>)
 8012642:	429c      	cmp	r4, r3
 8012644:	dc10      	bgt.n	8012668 <atanf+0x5c>
 8012646:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801264a:	da0a      	bge.n	8012662 <atanf+0x56>
 801264c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012774 <atanf+0x168>
 8012650:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012658:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012660:	dce3      	bgt.n	801262a <atanf+0x1e>
 8012662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012666:	e013      	b.n	8012690 <atanf+0x84>
 8012668:	f000 f8a4 	bl	80127b4 <fabsf>
 801266c:	4b42      	ldr	r3, [pc, #264]	; (8012778 <atanf+0x16c>)
 801266e:	429c      	cmp	r4, r3
 8012670:	dc4f      	bgt.n	8012712 <atanf+0x106>
 8012672:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012676:	429c      	cmp	r4, r3
 8012678:	dc41      	bgt.n	80126fe <atanf+0xf2>
 801267a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801267e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012682:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012686:	2300      	movs	r3, #0
 8012688:	ee30 0a27 	vadd.f32	s0, s0, s15
 801268c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012696:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801277c <atanf+0x170>
 801269a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012780 <atanf+0x174>
 801269e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8012784 <atanf+0x178>
 80126a2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80126a6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80126aa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012788 <atanf+0x17c>
 80126ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126b2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801278c <atanf+0x180>
 80126b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80126ba:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012790 <atanf+0x184>
 80126be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012794 <atanf+0x188>
 80126c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80126ca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012798 <atanf+0x18c>
 80126ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 80126d2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801279c <atanf+0x190>
 80126d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80126da:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80127a0 <atanf+0x194>
 80126de:	eea7 5a26 	vfma.f32	s10, s14, s13
 80126e2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80127a4 <atanf+0x198>
 80126e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80126ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80126ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 80126f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80126f6:	d121      	bne.n	801273c <atanf+0x130>
 80126f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126fc:	e795      	b.n	801262a <atanf+0x1e>
 80126fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012702:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012706:	ee30 0a27 	vadd.f32	s0, s0, s15
 801270a:	2301      	movs	r3, #1
 801270c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012710:	e7be      	b.n	8012690 <atanf+0x84>
 8012712:	4b25      	ldr	r3, [pc, #148]	; (80127a8 <atanf+0x19c>)
 8012714:	429c      	cmp	r4, r3
 8012716:	dc0b      	bgt.n	8012730 <atanf+0x124>
 8012718:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801271c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012720:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012724:	2302      	movs	r3, #2
 8012726:	ee70 6a67 	vsub.f32	s13, s0, s15
 801272a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801272e:	e7af      	b.n	8012690 <atanf+0x84>
 8012730:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012734:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012738:	2303      	movs	r3, #3
 801273a:	e7a9      	b.n	8012690 <atanf+0x84>
 801273c:	4a1b      	ldr	r2, [pc, #108]	; (80127ac <atanf+0x1a0>)
 801273e:	491c      	ldr	r1, [pc, #112]	; (80127b0 <atanf+0x1a4>)
 8012740:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012744:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012748:	ed93 0a00 	vldr	s0, [r3]
 801274c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012750:	ed92 0a00 	vldr	s0, [r2]
 8012754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012758:	2d00      	cmp	r5, #0
 801275a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801275e:	bfb8      	it	lt
 8012760:	eef1 7a67 	vneglt.f32	s15, s15
 8012764:	e761      	b.n	801262a <atanf+0x1e>
 8012766:	bf00      	nop
 8012768:	3fc90fdb 	.word	0x3fc90fdb
 801276c:	bfc90fdb 	.word	0xbfc90fdb
 8012770:	3edfffff 	.word	0x3edfffff
 8012774:	7149f2ca 	.word	0x7149f2ca
 8012778:	3f97ffff 	.word	0x3f97ffff
 801277c:	3c8569d7 	.word	0x3c8569d7
 8012780:	3d4bda59 	.word	0x3d4bda59
 8012784:	bd6ef16b 	.word	0xbd6ef16b
 8012788:	3d886b35 	.word	0x3d886b35
 801278c:	3dba2e6e 	.word	0x3dba2e6e
 8012790:	3e124925 	.word	0x3e124925
 8012794:	3eaaaaab 	.word	0x3eaaaaab
 8012798:	bd15a221 	.word	0xbd15a221
 801279c:	bd9d8795 	.word	0xbd9d8795
 80127a0:	bde38e38 	.word	0xbde38e38
 80127a4:	be4ccccd 	.word	0xbe4ccccd
 80127a8:	401bffff 	.word	0x401bffff
 80127ac:	08016d48 	.word	0x08016d48
 80127b0:	08016d58 	.word	0x08016d58

080127b4 <fabsf>:
 80127b4:	ee10 3a10 	vmov	r3, s0
 80127b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127bc:	ee00 3a10 	vmov	s0, r3
 80127c0:	4770      	bx	lr
	...

080127c4 <__errno>:
 80127c4:	4b01      	ldr	r3, [pc, #4]	; (80127cc <__errno+0x8>)
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	24000240 	.word	0x24000240

080127d0 <__libc_init_array>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	4d0d      	ldr	r5, [pc, #52]	; (8012808 <__libc_init_array+0x38>)
 80127d4:	4c0d      	ldr	r4, [pc, #52]	; (801280c <__libc_init_array+0x3c>)
 80127d6:	1b64      	subs	r4, r4, r5
 80127d8:	10a4      	asrs	r4, r4, #2
 80127da:	2600      	movs	r6, #0
 80127dc:	42a6      	cmp	r6, r4
 80127de:	d109      	bne.n	80127f4 <__libc_init_array+0x24>
 80127e0:	4d0b      	ldr	r5, [pc, #44]	; (8012810 <__libc_init_array+0x40>)
 80127e2:	4c0c      	ldr	r4, [pc, #48]	; (8012814 <__libc_init_array+0x44>)
 80127e4:	f002 fd02 	bl	80151ec <_init>
 80127e8:	1b64      	subs	r4, r4, r5
 80127ea:	10a4      	asrs	r4, r4, #2
 80127ec:	2600      	movs	r6, #0
 80127ee:	42a6      	cmp	r6, r4
 80127f0:	d105      	bne.n	80127fe <__libc_init_array+0x2e>
 80127f2:	bd70      	pop	{r4, r5, r6, pc}
 80127f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80127f8:	4798      	blx	r3
 80127fa:	3601      	adds	r6, #1
 80127fc:	e7ee      	b.n	80127dc <__libc_init_array+0xc>
 80127fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012802:	4798      	blx	r3
 8012804:	3601      	adds	r6, #1
 8012806:	e7f2      	b.n	80127ee <__libc_init_array+0x1e>
 8012808:	0801714c 	.word	0x0801714c
 801280c:	0801714c 	.word	0x0801714c
 8012810:	0801714c 	.word	0x0801714c
 8012814:	08017154 	.word	0x08017154

08012818 <memset>:
 8012818:	4402      	add	r2, r0
 801281a:	4603      	mov	r3, r0
 801281c:	4293      	cmp	r3, r2
 801281e:	d100      	bne.n	8012822 <memset+0xa>
 8012820:	4770      	bx	lr
 8012822:	f803 1b01 	strb.w	r1, [r3], #1
 8012826:	e7f9      	b.n	801281c <memset+0x4>

08012828 <__cvt>:
 8012828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801282a:	ed2d 8b02 	vpush	{d8}
 801282e:	eeb0 8b40 	vmov.f64	d8, d0
 8012832:	b085      	sub	sp, #20
 8012834:	4617      	mov	r7, r2
 8012836:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012838:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801283a:	ee18 2a90 	vmov	r2, s17
 801283e:	f025 0520 	bic.w	r5, r5, #32
 8012842:	2a00      	cmp	r2, #0
 8012844:	bfb6      	itet	lt
 8012846:	222d      	movlt	r2, #45	; 0x2d
 8012848:	2200      	movge	r2, #0
 801284a:	eeb1 8b40 	vneglt.f64	d8, d0
 801284e:	2d46      	cmp	r5, #70	; 0x46
 8012850:	460c      	mov	r4, r1
 8012852:	701a      	strb	r2, [r3, #0]
 8012854:	d004      	beq.n	8012860 <__cvt+0x38>
 8012856:	2d45      	cmp	r5, #69	; 0x45
 8012858:	d100      	bne.n	801285c <__cvt+0x34>
 801285a:	3401      	adds	r4, #1
 801285c:	2102      	movs	r1, #2
 801285e:	e000      	b.n	8012862 <__cvt+0x3a>
 8012860:	2103      	movs	r1, #3
 8012862:	ab03      	add	r3, sp, #12
 8012864:	9301      	str	r3, [sp, #4]
 8012866:	ab02      	add	r3, sp, #8
 8012868:	9300      	str	r3, [sp, #0]
 801286a:	4622      	mov	r2, r4
 801286c:	4633      	mov	r3, r6
 801286e:	eeb0 0b48 	vmov.f64	d0, d8
 8012872:	f000 fddd 	bl	8013430 <_dtoa_r>
 8012876:	2d47      	cmp	r5, #71	; 0x47
 8012878:	d101      	bne.n	801287e <__cvt+0x56>
 801287a:	07fb      	lsls	r3, r7, #31
 801287c:	d51a      	bpl.n	80128b4 <__cvt+0x8c>
 801287e:	2d46      	cmp	r5, #70	; 0x46
 8012880:	eb00 0204 	add.w	r2, r0, r4
 8012884:	d10c      	bne.n	80128a0 <__cvt+0x78>
 8012886:	7803      	ldrb	r3, [r0, #0]
 8012888:	2b30      	cmp	r3, #48	; 0x30
 801288a:	d107      	bne.n	801289c <__cvt+0x74>
 801288c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012894:	bf1c      	itt	ne
 8012896:	f1c4 0401 	rsbne	r4, r4, #1
 801289a:	6034      	strne	r4, [r6, #0]
 801289c:	6833      	ldr	r3, [r6, #0]
 801289e:	441a      	add	r2, r3
 80128a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	bf08      	it	eq
 80128aa:	9203      	streq	r2, [sp, #12]
 80128ac:	2130      	movs	r1, #48	; 0x30
 80128ae:	9b03      	ldr	r3, [sp, #12]
 80128b0:	4293      	cmp	r3, r2
 80128b2:	d307      	bcc.n	80128c4 <__cvt+0x9c>
 80128b4:	9b03      	ldr	r3, [sp, #12]
 80128b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128b8:	1a1b      	subs	r3, r3, r0
 80128ba:	6013      	str	r3, [r2, #0]
 80128bc:	b005      	add	sp, #20
 80128be:	ecbd 8b02 	vpop	{d8}
 80128c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128c4:	1c5c      	adds	r4, r3, #1
 80128c6:	9403      	str	r4, [sp, #12]
 80128c8:	7019      	strb	r1, [r3, #0]
 80128ca:	e7f0      	b.n	80128ae <__cvt+0x86>

080128cc <__exponent>:
 80128cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128ce:	4603      	mov	r3, r0
 80128d0:	2900      	cmp	r1, #0
 80128d2:	bfb8      	it	lt
 80128d4:	4249      	neglt	r1, r1
 80128d6:	f803 2b02 	strb.w	r2, [r3], #2
 80128da:	bfb4      	ite	lt
 80128dc:	222d      	movlt	r2, #45	; 0x2d
 80128de:	222b      	movge	r2, #43	; 0x2b
 80128e0:	2909      	cmp	r1, #9
 80128e2:	7042      	strb	r2, [r0, #1]
 80128e4:	dd2a      	ble.n	801293c <__exponent+0x70>
 80128e6:	f10d 0407 	add.w	r4, sp, #7
 80128ea:	46a4      	mov	ip, r4
 80128ec:	270a      	movs	r7, #10
 80128ee:	46a6      	mov	lr, r4
 80128f0:	460a      	mov	r2, r1
 80128f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80128f6:	fb07 1516 	mls	r5, r7, r6, r1
 80128fa:	3530      	adds	r5, #48	; 0x30
 80128fc:	2a63      	cmp	r2, #99	; 0x63
 80128fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012906:	4631      	mov	r1, r6
 8012908:	dcf1      	bgt.n	80128ee <__exponent+0x22>
 801290a:	3130      	adds	r1, #48	; 0x30
 801290c:	f1ae 0502 	sub.w	r5, lr, #2
 8012910:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012914:	1c44      	adds	r4, r0, #1
 8012916:	4629      	mov	r1, r5
 8012918:	4561      	cmp	r1, ip
 801291a:	d30a      	bcc.n	8012932 <__exponent+0x66>
 801291c:	f10d 0209 	add.w	r2, sp, #9
 8012920:	eba2 020e 	sub.w	r2, r2, lr
 8012924:	4565      	cmp	r5, ip
 8012926:	bf88      	it	hi
 8012928:	2200      	movhi	r2, #0
 801292a:	4413      	add	r3, r2
 801292c:	1a18      	subs	r0, r3, r0
 801292e:	b003      	add	sp, #12
 8012930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012936:	f804 2f01 	strb.w	r2, [r4, #1]!
 801293a:	e7ed      	b.n	8012918 <__exponent+0x4c>
 801293c:	2330      	movs	r3, #48	; 0x30
 801293e:	3130      	adds	r1, #48	; 0x30
 8012940:	7083      	strb	r3, [r0, #2]
 8012942:	70c1      	strb	r1, [r0, #3]
 8012944:	1d03      	adds	r3, r0, #4
 8012946:	e7f1      	b.n	801292c <__exponent+0x60>

08012948 <_printf_float>:
 8012948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	b08b      	sub	sp, #44	; 0x2c
 801294e:	460c      	mov	r4, r1
 8012950:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012954:	4616      	mov	r6, r2
 8012956:	461f      	mov	r7, r3
 8012958:	4605      	mov	r5, r0
 801295a:	f001 fc8f 	bl	801427c <_localeconv_r>
 801295e:	f8d0 b000 	ldr.w	fp, [r0]
 8012962:	4658      	mov	r0, fp
 8012964:	f7ed fcbc 	bl	80002e0 <strlen>
 8012968:	2300      	movs	r3, #0
 801296a:	9308      	str	r3, [sp, #32]
 801296c:	f8d8 3000 	ldr.w	r3, [r8]
 8012970:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012974:	6822      	ldr	r2, [r4, #0]
 8012976:	3307      	adds	r3, #7
 8012978:	f023 0307 	bic.w	r3, r3, #7
 801297c:	f103 0108 	add.w	r1, r3, #8
 8012980:	f8c8 1000 	str.w	r1, [r8]
 8012984:	4682      	mov	sl, r0
 8012986:	e9d3 0100 	ldrd	r0, r1, [r3]
 801298a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801298e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012bf0 <_printf_float+0x2a8>
 8012992:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012996:	eeb0 6bc0 	vabs.f64	d6, d0
 801299a:	eeb4 6b47 	vcmp.f64	d6, d7
 801299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a2:	dd24      	ble.n	80129ee <_printf_float+0xa6>
 80129a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80129a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ac:	d502      	bpl.n	80129b4 <_printf_float+0x6c>
 80129ae:	232d      	movs	r3, #45	; 0x2d
 80129b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129b4:	4b90      	ldr	r3, [pc, #576]	; (8012bf8 <_printf_float+0x2b0>)
 80129b6:	4891      	ldr	r0, [pc, #580]	; (8012bfc <_printf_float+0x2b4>)
 80129b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80129bc:	bf94      	ite	ls
 80129be:	4698      	movls	r8, r3
 80129c0:	4680      	movhi	r8, r0
 80129c2:	2303      	movs	r3, #3
 80129c4:	6123      	str	r3, [r4, #16]
 80129c6:	f022 0204 	bic.w	r2, r2, #4
 80129ca:	2300      	movs	r3, #0
 80129cc:	6022      	str	r2, [r4, #0]
 80129ce:	9304      	str	r3, [sp, #16]
 80129d0:	9700      	str	r7, [sp, #0]
 80129d2:	4633      	mov	r3, r6
 80129d4:	aa09      	add	r2, sp, #36	; 0x24
 80129d6:	4621      	mov	r1, r4
 80129d8:	4628      	mov	r0, r5
 80129da:	f000 f9d3 	bl	8012d84 <_printf_common>
 80129de:	3001      	adds	r0, #1
 80129e0:	f040 808a 	bne.w	8012af8 <_printf_float+0x1b0>
 80129e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129e8:	b00b      	add	sp, #44	; 0x2c
 80129ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ee:	eeb4 0b40 	vcmp.f64	d0, d0
 80129f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f6:	d709      	bvc.n	8012a0c <_printf_float+0xc4>
 80129f8:	ee10 3a90 	vmov	r3, s1
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	bfbc      	itt	lt
 8012a00:	232d      	movlt	r3, #45	; 0x2d
 8012a02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a06:	487e      	ldr	r0, [pc, #504]	; (8012c00 <_printf_float+0x2b8>)
 8012a08:	4b7e      	ldr	r3, [pc, #504]	; (8012c04 <_printf_float+0x2bc>)
 8012a0a:	e7d5      	b.n	80129b8 <_printf_float+0x70>
 8012a0c:	6863      	ldr	r3, [r4, #4]
 8012a0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012a12:	9104      	str	r1, [sp, #16]
 8012a14:	1c59      	adds	r1, r3, #1
 8012a16:	d13c      	bne.n	8012a92 <_printf_float+0x14a>
 8012a18:	2306      	movs	r3, #6
 8012a1a:	6063      	str	r3, [r4, #4]
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	9303      	str	r3, [sp, #12]
 8012a20:	ab08      	add	r3, sp, #32
 8012a22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012a2a:	ab07      	add	r3, sp, #28
 8012a2c:	6861      	ldr	r1, [r4, #4]
 8012a2e:	9300      	str	r3, [sp, #0]
 8012a30:	6022      	str	r2, [r4, #0]
 8012a32:	f10d 031b 	add.w	r3, sp, #27
 8012a36:	4628      	mov	r0, r5
 8012a38:	f7ff fef6 	bl	8012828 <__cvt>
 8012a3c:	9b04      	ldr	r3, [sp, #16]
 8012a3e:	9907      	ldr	r1, [sp, #28]
 8012a40:	2b47      	cmp	r3, #71	; 0x47
 8012a42:	4680      	mov	r8, r0
 8012a44:	d108      	bne.n	8012a58 <_printf_float+0x110>
 8012a46:	1cc8      	adds	r0, r1, #3
 8012a48:	db02      	blt.n	8012a50 <_printf_float+0x108>
 8012a4a:	6863      	ldr	r3, [r4, #4]
 8012a4c:	4299      	cmp	r1, r3
 8012a4e:	dd41      	ble.n	8012ad4 <_printf_float+0x18c>
 8012a50:	f1a9 0902 	sub.w	r9, r9, #2
 8012a54:	fa5f f989 	uxtb.w	r9, r9
 8012a58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a5c:	d820      	bhi.n	8012aa0 <_printf_float+0x158>
 8012a5e:	3901      	subs	r1, #1
 8012a60:	464a      	mov	r2, r9
 8012a62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a66:	9107      	str	r1, [sp, #28]
 8012a68:	f7ff ff30 	bl	80128cc <__exponent>
 8012a6c:	9a08      	ldr	r2, [sp, #32]
 8012a6e:	9004      	str	r0, [sp, #16]
 8012a70:	1813      	adds	r3, r2, r0
 8012a72:	2a01      	cmp	r2, #1
 8012a74:	6123      	str	r3, [r4, #16]
 8012a76:	dc02      	bgt.n	8012a7e <_printf_float+0x136>
 8012a78:	6822      	ldr	r2, [r4, #0]
 8012a7a:	07d2      	lsls	r2, r2, #31
 8012a7c:	d501      	bpl.n	8012a82 <_printf_float+0x13a>
 8012a7e:	3301      	adds	r3, #1
 8012a80:	6123      	str	r3, [r4, #16]
 8012a82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d0a2      	beq.n	80129d0 <_printf_float+0x88>
 8012a8a:	232d      	movs	r3, #45	; 0x2d
 8012a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a90:	e79e      	b.n	80129d0 <_printf_float+0x88>
 8012a92:	9904      	ldr	r1, [sp, #16]
 8012a94:	2947      	cmp	r1, #71	; 0x47
 8012a96:	d1c1      	bne.n	8012a1c <_printf_float+0xd4>
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1bf      	bne.n	8012a1c <_printf_float+0xd4>
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	e7bc      	b.n	8012a1a <_printf_float+0xd2>
 8012aa0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012aa4:	d118      	bne.n	8012ad8 <_printf_float+0x190>
 8012aa6:	2900      	cmp	r1, #0
 8012aa8:	6863      	ldr	r3, [r4, #4]
 8012aaa:	dd0b      	ble.n	8012ac4 <_printf_float+0x17c>
 8012aac:	6121      	str	r1, [r4, #16]
 8012aae:	b913      	cbnz	r3, 8012ab6 <_printf_float+0x16e>
 8012ab0:	6822      	ldr	r2, [r4, #0]
 8012ab2:	07d0      	lsls	r0, r2, #31
 8012ab4:	d502      	bpl.n	8012abc <_printf_float+0x174>
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	440b      	add	r3, r1
 8012aba:	6123      	str	r3, [r4, #16]
 8012abc:	2300      	movs	r3, #0
 8012abe:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ac0:	9304      	str	r3, [sp, #16]
 8012ac2:	e7de      	b.n	8012a82 <_printf_float+0x13a>
 8012ac4:	b913      	cbnz	r3, 8012acc <_printf_float+0x184>
 8012ac6:	6822      	ldr	r2, [r4, #0]
 8012ac8:	07d2      	lsls	r2, r2, #31
 8012aca:	d501      	bpl.n	8012ad0 <_printf_float+0x188>
 8012acc:	3302      	adds	r3, #2
 8012ace:	e7f4      	b.n	8012aba <_printf_float+0x172>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e7f2      	b.n	8012aba <_printf_float+0x172>
 8012ad4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012ad8:	9b08      	ldr	r3, [sp, #32]
 8012ada:	4299      	cmp	r1, r3
 8012adc:	db05      	blt.n	8012aea <_printf_float+0x1a2>
 8012ade:	6823      	ldr	r3, [r4, #0]
 8012ae0:	6121      	str	r1, [r4, #16]
 8012ae2:	07d8      	lsls	r0, r3, #31
 8012ae4:	d5ea      	bpl.n	8012abc <_printf_float+0x174>
 8012ae6:	1c4b      	adds	r3, r1, #1
 8012ae8:	e7e7      	b.n	8012aba <_printf_float+0x172>
 8012aea:	2900      	cmp	r1, #0
 8012aec:	bfd4      	ite	le
 8012aee:	f1c1 0202 	rsble	r2, r1, #2
 8012af2:	2201      	movgt	r2, #1
 8012af4:	4413      	add	r3, r2
 8012af6:	e7e0      	b.n	8012aba <_printf_float+0x172>
 8012af8:	6823      	ldr	r3, [r4, #0]
 8012afa:	055a      	lsls	r2, r3, #21
 8012afc:	d407      	bmi.n	8012b0e <_printf_float+0x1c6>
 8012afe:	6923      	ldr	r3, [r4, #16]
 8012b00:	4642      	mov	r2, r8
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b8      	blx	r7
 8012b08:	3001      	adds	r0, #1
 8012b0a:	d12a      	bne.n	8012b62 <_printf_float+0x21a>
 8012b0c:	e76a      	b.n	80129e4 <_printf_float+0x9c>
 8012b0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012b12:	f240 80e2 	bls.w	8012cda <_printf_float+0x392>
 8012b16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012b1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b22:	d133      	bne.n	8012b8c <_printf_float+0x244>
 8012b24:	4a38      	ldr	r2, [pc, #224]	; (8012c08 <_printf_float+0x2c0>)
 8012b26:	2301      	movs	r3, #1
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	47b8      	blx	r7
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f43f af58 	beq.w	80129e4 <_printf_float+0x9c>
 8012b34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	db02      	blt.n	8012b42 <_printf_float+0x1fa>
 8012b3c:	6823      	ldr	r3, [r4, #0]
 8012b3e:	07d8      	lsls	r0, r3, #31
 8012b40:	d50f      	bpl.n	8012b62 <_printf_float+0x21a>
 8012b42:	4653      	mov	r3, sl
 8012b44:	465a      	mov	r2, fp
 8012b46:	4631      	mov	r1, r6
 8012b48:	4628      	mov	r0, r5
 8012b4a:	47b8      	blx	r7
 8012b4c:	3001      	adds	r0, #1
 8012b4e:	f43f af49 	beq.w	80129e4 <_printf_float+0x9c>
 8012b52:	f04f 0800 	mov.w	r8, #0
 8012b56:	f104 091a 	add.w	r9, r4, #26
 8012b5a:	9b08      	ldr	r3, [sp, #32]
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	4543      	cmp	r3, r8
 8012b60:	dc09      	bgt.n	8012b76 <_printf_float+0x22e>
 8012b62:	6823      	ldr	r3, [r4, #0]
 8012b64:	079b      	lsls	r3, r3, #30
 8012b66:	f100 8108 	bmi.w	8012d7a <_printf_float+0x432>
 8012b6a:	68e0      	ldr	r0, [r4, #12]
 8012b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b6e:	4298      	cmp	r0, r3
 8012b70:	bfb8      	it	lt
 8012b72:	4618      	movlt	r0, r3
 8012b74:	e738      	b.n	80129e8 <_printf_float+0xa0>
 8012b76:	2301      	movs	r3, #1
 8012b78:	464a      	mov	r2, r9
 8012b7a:	4631      	mov	r1, r6
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	47b8      	blx	r7
 8012b80:	3001      	adds	r0, #1
 8012b82:	f43f af2f 	beq.w	80129e4 <_printf_float+0x9c>
 8012b86:	f108 0801 	add.w	r8, r8, #1
 8012b8a:	e7e6      	b.n	8012b5a <_printf_float+0x212>
 8012b8c:	9b07      	ldr	r3, [sp, #28]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	dc3c      	bgt.n	8012c0c <_printf_float+0x2c4>
 8012b92:	4a1d      	ldr	r2, [pc, #116]	; (8012c08 <_printf_float+0x2c0>)
 8012b94:	2301      	movs	r3, #1
 8012b96:	4631      	mov	r1, r6
 8012b98:	4628      	mov	r0, r5
 8012b9a:	47b8      	blx	r7
 8012b9c:	3001      	adds	r0, #1
 8012b9e:	f43f af21 	beq.w	80129e4 <_printf_float+0x9c>
 8012ba2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012ba6:	4313      	orrs	r3, r2
 8012ba8:	d102      	bne.n	8012bb0 <_printf_float+0x268>
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	07d9      	lsls	r1, r3, #31
 8012bae:	d5d8      	bpl.n	8012b62 <_printf_float+0x21a>
 8012bb0:	4653      	mov	r3, sl
 8012bb2:	465a      	mov	r2, fp
 8012bb4:	4631      	mov	r1, r6
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	47b8      	blx	r7
 8012bba:	3001      	adds	r0, #1
 8012bbc:	f43f af12 	beq.w	80129e4 <_printf_float+0x9c>
 8012bc0:	f04f 0900 	mov.w	r9, #0
 8012bc4:	f104 0a1a 	add.w	sl, r4, #26
 8012bc8:	9b07      	ldr	r3, [sp, #28]
 8012bca:	425b      	negs	r3, r3
 8012bcc:	454b      	cmp	r3, r9
 8012bce:	dc01      	bgt.n	8012bd4 <_printf_float+0x28c>
 8012bd0:	9b08      	ldr	r3, [sp, #32]
 8012bd2:	e795      	b.n	8012b00 <_printf_float+0x1b8>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	4652      	mov	r2, sl
 8012bd8:	4631      	mov	r1, r6
 8012bda:	4628      	mov	r0, r5
 8012bdc:	47b8      	blx	r7
 8012bde:	3001      	adds	r0, #1
 8012be0:	f43f af00 	beq.w	80129e4 <_printf_float+0x9c>
 8012be4:	f109 0901 	add.w	r9, r9, #1
 8012be8:	e7ee      	b.n	8012bc8 <_printf_float+0x280>
 8012bea:	bf00      	nop
 8012bec:	f3af 8000 	nop.w
 8012bf0:	ffffffff 	.word	0xffffffff
 8012bf4:	7fefffff 	.word	0x7fefffff
 8012bf8:	08016d6c 	.word	0x08016d6c
 8012bfc:	08016d70 	.word	0x08016d70
 8012c00:	08016d78 	.word	0x08016d78
 8012c04:	08016d74 	.word	0x08016d74
 8012c08:	08016d7c 	.word	0x08016d7c
 8012c0c:	9a08      	ldr	r2, [sp, #32]
 8012c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c10:	429a      	cmp	r2, r3
 8012c12:	bfa8      	it	ge
 8012c14:	461a      	movge	r2, r3
 8012c16:	2a00      	cmp	r2, #0
 8012c18:	4691      	mov	r9, r2
 8012c1a:	dc38      	bgt.n	8012c8e <_printf_float+0x346>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	9305      	str	r3, [sp, #20]
 8012c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c24:	f104 021a 	add.w	r2, r4, #26
 8012c28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c2a:	9905      	ldr	r1, [sp, #20]
 8012c2c:	9304      	str	r3, [sp, #16]
 8012c2e:	eba3 0309 	sub.w	r3, r3, r9
 8012c32:	428b      	cmp	r3, r1
 8012c34:	dc33      	bgt.n	8012c9e <_printf_float+0x356>
 8012c36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	db3c      	blt.n	8012cb8 <_printf_float+0x370>
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	07da      	lsls	r2, r3, #31
 8012c42:	d439      	bmi.n	8012cb8 <_printf_float+0x370>
 8012c44:	9b08      	ldr	r3, [sp, #32]
 8012c46:	9a04      	ldr	r2, [sp, #16]
 8012c48:	9907      	ldr	r1, [sp, #28]
 8012c4a:	1a9a      	subs	r2, r3, r2
 8012c4c:	eba3 0901 	sub.w	r9, r3, r1
 8012c50:	4591      	cmp	r9, r2
 8012c52:	bfa8      	it	ge
 8012c54:	4691      	movge	r9, r2
 8012c56:	f1b9 0f00 	cmp.w	r9, #0
 8012c5a:	dc35      	bgt.n	8012cc8 <_printf_float+0x380>
 8012c5c:	f04f 0800 	mov.w	r8, #0
 8012c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c64:	f104 0a1a 	add.w	sl, r4, #26
 8012c68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c6c:	1a9b      	subs	r3, r3, r2
 8012c6e:	eba3 0309 	sub.w	r3, r3, r9
 8012c72:	4543      	cmp	r3, r8
 8012c74:	f77f af75 	ble.w	8012b62 <_printf_float+0x21a>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	4652      	mov	r2, sl
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4628      	mov	r0, r5
 8012c80:	47b8      	blx	r7
 8012c82:	3001      	adds	r0, #1
 8012c84:	f43f aeae 	beq.w	80129e4 <_printf_float+0x9c>
 8012c88:	f108 0801 	add.w	r8, r8, #1
 8012c8c:	e7ec      	b.n	8012c68 <_printf_float+0x320>
 8012c8e:	4613      	mov	r3, r2
 8012c90:	4631      	mov	r1, r6
 8012c92:	4642      	mov	r2, r8
 8012c94:	4628      	mov	r0, r5
 8012c96:	47b8      	blx	r7
 8012c98:	3001      	adds	r0, #1
 8012c9a:	d1bf      	bne.n	8012c1c <_printf_float+0x2d4>
 8012c9c:	e6a2      	b.n	80129e4 <_printf_float+0x9c>
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	4631      	mov	r1, r6
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	9204      	str	r2, [sp, #16]
 8012ca6:	47b8      	blx	r7
 8012ca8:	3001      	adds	r0, #1
 8012caa:	f43f ae9b 	beq.w	80129e4 <_printf_float+0x9c>
 8012cae:	9b05      	ldr	r3, [sp, #20]
 8012cb0:	9a04      	ldr	r2, [sp, #16]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	9305      	str	r3, [sp, #20]
 8012cb6:	e7b7      	b.n	8012c28 <_printf_float+0x2e0>
 8012cb8:	4653      	mov	r3, sl
 8012cba:	465a      	mov	r2, fp
 8012cbc:	4631      	mov	r1, r6
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	47b8      	blx	r7
 8012cc2:	3001      	adds	r0, #1
 8012cc4:	d1be      	bne.n	8012c44 <_printf_float+0x2fc>
 8012cc6:	e68d      	b.n	80129e4 <_printf_float+0x9c>
 8012cc8:	9a04      	ldr	r2, [sp, #16]
 8012cca:	464b      	mov	r3, r9
 8012ccc:	4442      	add	r2, r8
 8012cce:	4631      	mov	r1, r6
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	47b8      	blx	r7
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	d1c1      	bne.n	8012c5c <_printf_float+0x314>
 8012cd8:	e684      	b.n	80129e4 <_printf_float+0x9c>
 8012cda:	9a08      	ldr	r2, [sp, #32]
 8012cdc:	2a01      	cmp	r2, #1
 8012cde:	dc01      	bgt.n	8012ce4 <_printf_float+0x39c>
 8012ce0:	07db      	lsls	r3, r3, #31
 8012ce2:	d537      	bpl.n	8012d54 <_printf_float+0x40c>
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	4642      	mov	r2, r8
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4628      	mov	r0, r5
 8012cec:	47b8      	blx	r7
 8012cee:	3001      	adds	r0, #1
 8012cf0:	f43f ae78 	beq.w	80129e4 <_printf_float+0x9c>
 8012cf4:	4653      	mov	r3, sl
 8012cf6:	465a      	mov	r2, fp
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	47b8      	blx	r7
 8012cfe:	3001      	adds	r0, #1
 8012d00:	f43f ae70 	beq.w	80129e4 <_printf_float+0x9c>
 8012d04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012d08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d10:	d01b      	beq.n	8012d4a <_printf_float+0x402>
 8012d12:	9b08      	ldr	r3, [sp, #32]
 8012d14:	f108 0201 	add.w	r2, r8, #1
 8012d18:	3b01      	subs	r3, #1
 8012d1a:	4631      	mov	r1, r6
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	47b8      	blx	r7
 8012d20:	3001      	adds	r0, #1
 8012d22:	d10e      	bne.n	8012d42 <_printf_float+0x3fa>
 8012d24:	e65e      	b.n	80129e4 <_printf_float+0x9c>
 8012d26:	2301      	movs	r3, #1
 8012d28:	464a      	mov	r2, r9
 8012d2a:	4631      	mov	r1, r6
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	47b8      	blx	r7
 8012d30:	3001      	adds	r0, #1
 8012d32:	f43f ae57 	beq.w	80129e4 <_printf_float+0x9c>
 8012d36:	f108 0801 	add.w	r8, r8, #1
 8012d3a:	9b08      	ldr	r3, [sp, #32]
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	4543      	cmp	r3, r8
 8012d40:	dcf1      	bgt.n	8012d26 <_printf_float+0x3de>
 8012d42:	9b04      	ldr	r3, [sp, #16]
 8012d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d48:	e6db      	b.n	8012b02 <_printf_float+0x1ba>
 8012d4a:	f04f 0800 	mov.w	r8, #0
 8012d4e:	f104 091a 	add.w	r9, r4, #26
 8012d52:	e7f2      	b.n	8012d3a <_printf_float+0x3f2>
 8012d54:	2301      	movs	r3, #1
 8012d56:	4642      	mov	r2, r8
 8012d58:	e7df      	b.n	8012d1a <_printf_float+0x3d2>
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	464a      	mov	r2, r9
 8012d5e:	4631      	mov	r1, r6
 8012d60:	4628      	mov	r0, r5
 8012d62:	47b8      	blx	r7
 8012d64:	3001      	adds	r0, #1
 8012d66:	f43f ae3d 	beq.w	80129e4 <_printf_float+0x9c>
 8012d6a:	f108 0801 	add.w	r8, r8, #1
 8012d6e:	68e3      	ldr	r3, [r4, #12]
 8012d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d72:	1a5b      	subs	r3, r3, r1
 8012d74:	4543      	cmp	r3, r8
 8012d76:	dcf0      	bgt.n	8012d5a <_printf_float+0x412>
 8012d78:	e6f7      	b.n	8012b6a <_printf_float+0x222>
 8012d7a:	f04f 0800 	mov.w	r8, #0
 8012d7e:	f104 0919 	add.w	r9, r4, #25
 8012d82:	e7f4      	b.n	8012d6e <_printf_float+0x426>

08012d84 <_printf_common>:
 8012d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d88:	4616      	mov	r6, r2
 8012d8a:	4699      	mov	r9, r3
 8012d8c:	688a      	ldr	r2, [r1, #8]
 8012d8e:	690b      	ldr	r3, [r1, #16]
 8012d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d94:	4293      	cmp	r3, r2
 8012d96:	bfb8      	it	lt
 8012d98:	4613      	movlt	r3, r2
 8012d9a:	6033      	str	r3, [r6, #0]
 8012d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012da0:	4607      	mov	r7, r0
 8012da2:	460c      	mov	r4, r1
 8012da4:	b10a      	cbz	r2, 8012daa <_printf_common+0x26>
 8012da6:	3301      	adds	r3, #1
 8012da8:	6033      	str	r3, [r6, #0]
 8012daa:	6823      	ldr	r3, [r4, #0]
 8012dac:	0699      	lsls	r1, r3, #26
 8012dae:	bf42      	ittt	mi
 8012db0:	6833      	ldrmi	r3, [r6, #0]
 8012db2:	3302      	addmi	r3, #2
 8012db4:	6033      	strmi	r3, [r6, #0]
 8012db6:	6825      	ldr	r5, [r4, #0]
 8012db8:	f015 0506 	ands.w	r5, r5, #6
 8012dbc:	d106      	bne.n	8012dcc <_printf_common+0x48>
 8012dbe:	f104 0a19 	add.w	sl, r4, #25
 8012dc2:	68e3      	ldr	r3, [r4, #12]
 8012dc4:	6832      	ldr	r2, [r6, #0]
 8012dc6:	1a9b      	subs	r3, r3, r2
 8012dc8:	42ab      	cmp	r3, r5
 8012dca:	dc26      	bgt.n	8012e1a <_printf_common+0x96>
 8012dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012dd0:	1e13      	subs	r3, r2, #0
 8012dd2:	6822      	ldr	r2, [r4, #0]
 8012dd4:	bf18      	it	ne
 8012dd6:	2301      	movne	r3, #1
 8012dd8:	0692      	lsls	r2, r2, #26
 8012dda:	d42b      	bmi.n	8012e34 <_printf_common+0xb0>
 8012ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012de0:	4649      	mov	r1, r9
 8012de2:	4638      	mov	r0, r7
 8012de4:	47c0      	blx	r8
 8012de6:	3001      	adds	r0, #1
 8012de8:	d01e      	beq.n	8012e28 <_printf_common+0xa4>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	68e5      	ldr	r5, [r4, #12]
 8012dee:	6832      	ldr	r2, [r6, #0]
 8012df0:	f003 0306 	and.w	r3, r3, #6
 8012df4:	2b04      	cmp	r3, #4
 8012df6:	bf08      	it	eq
 8012df8:	1aad      	subeq	r5, r5, r2
 8012dfa:	68a3      	ldr	r3, [r4, #8]
 8012dfc:	6922      	ldr	r2, [r4, #16]
 8012dfe:	bf0c      	ite	eq
 8012e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e04:	2500      	movne	r5, #0
 8012e06:	4293      	cmp	r3, r2
 8012e08:	bfc4      	itt	gt
 8012e0a:	1a9b      	subgt	r3, r3, r2
 8012e0c:	18ed      	addgt	r5, r5, r3
 8012e0e:	2600      	movs	r6, #0
 8012e10:	341a      	adds	r4, #26
 8012e12:	42b5      	cmp	r5, r6
 8012e14:	d11a      	bne.n	8012e4c <_printf_common+0xc8>
 8012e16:	2000      	movs	r0, #0
 8012e18:	e008      	b.n	8012e2c <_printf_common+0xa8>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	4652      	mov	r2, sl
 8012e1e:	4649      	mov	r1, r9
 8012e20:	4638      	mov	r0, r7
 8012e22:	47c0      	blx	r8
 8012e24:	3001      	adds	r0, #1
 8012e26:	d103      	bne.n	8012e30 <_printf_common+0xac>
 8012e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e30:	3501      	adds	r5, #1
 8012e32:	e7c6      	b.n	8012dc2 <_printf_common+0x3e>
 8012e34:	18e1      	adds	r1, r4, r3
 8012e36:	1c5a      	adds	r2, r3, #1
 8012e38:	2030      	movs	r0, #48	; 0x30
 8012e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e3e:	4422      	add	r2, r4
 8012e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e48:	3302      	adds	r3, #2
 8012e4a:	e7c7      	b.n	8012ddc <_printf_common+0x58>
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	4622      	mov	r2, r4
 8012e50:	4649      	mov	r1, r9
 8012e52:	4638      	mov	r0, r7
 8012e54:	47c0      	blx	r8
 8012e56:	3001      	adds	r0, #1
 8012e58:	d0e6      	beq.n	8012e28 <_printf_common+0xa4>
 8012e5a:	3601      	adds	r6, #1
 8012e5c:	e7d9      	b.n	8012e12 <_printf_common+0x8e>
	...

08012e60 <_printf_i>:
 8012e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e64:	7e0f      	ldrb	r7, [r1, #24]
 8012e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e68:	2f78      	cmp	r7, #120	; 0x78
 8012e6a:	4691      	mov	r9, r2
 8012e6c:	4680      	mov	r8, r0
 8012e6e:	460c      	mov	r4, r1
 8012e70:	469a      	mov	sl, r3
 8012e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012e76:	d807      	bhi.n	8012e88 <_printf_i+0x28>
 8012e78:	2f62      	cmp	r7, #98	; 0x62
 8012e7a:	d80a      	bhi.n	8012e92 <_printf_i+0x32>
 8012e7c:	2f00      	cmp	r7, #0
 8012e7e:	f000 80d8 	beq.w	8013032 <_printf_i+0x1d2>
 8012e82:	2f58      	cmp	r7, #88	; 0x58
 8012e84:	f000 80a3 	beq.w	8012fce <_printf_i+0x16e>
 8012e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012e90:	e03a      	b.n	8012f08 <_printf_i+0xa8>
 8012e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012e96:	2b15      	cmp	r3, #21
 8012e98:	d8f6      	bhi.n	8012e88 <_printf_i+0x28>
 8012e9a:	a101      	add	r1, pc, #4	; (adr r1, 8012ea0 <_printf_i+0x40>)
 8012e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ea0:	08012ef9 	.word	0x08012ef9
 8012ea4:	08012f0d 	.word	0x08012f0d
 8012ea8:	08012e89 	.word	0x08012e89
 8012eac:	08012e89 	.word	0x08012e89
 8012eb0:	08012e89 	.word	0x08012e89
 8012eb4:	08012e89 	.word	0x08012e89
 8012eb8:	08012f0d 	.word	0x08012f0d
 8012ebc:	08012e89 	.word	0x08012e89
 8012ec0:	08012e89 	.word	0x08012e89
 8012ec4:	08012e89 	.word	0x08012e89
 8012ec8:	08012e89 	.word	0x08012e89
 8012ecc:	08013019 	.word	0x08013019
 8012ed0:	08012f3d 	.word	0x08012f3d
 8012ed4:	08012ffb 	.word	0x08012ffb
 8012ed8:	08012e89 	.word	0x08012e89
 8012edc:	08012e89 	.word	0x08012e89
 8012ee0:	0801303b 	.word	0x0801303b
 8012ee4:	08012e89 	.word	0x08012e89
 8012ee8:	08012f3d 	.word	0x08012f3d
 8012eec:	08012e89 	.word	0x08012e89
 8012ef0:	08012e89 	.word	0x08012e89
 8012ef4:	08013003 	.word	0x08013003
 8012ef8:	682b      	ldr	r3, [r5, #0]
 8012efa:	1d1a      	adds	r2, r3, #4
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	602a      	str	r2, [r5, #0]
 8012f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e0a3      	b.n	8013054 <_printf_i+0x1f4>
 8012f0c:	6820      	ldr	r0, [r4, #0]
 8012f0e:	6829      	ldr	r1, [r5, #0]
 8012f10:	0606      	lsls	r6, r0, #24
 8012f12:	f101 0304 	add.w	r3, r1, #4
 8012f16:	d50a      	bpl.n	8012f2e <_printf_i+0xce>
 8012f18:	680e      	ldr	r6, [r1, #0]
 8012f1a:	602b      	str	r3, [r5, #0]
 8012f1c:	2e00      	cmp	r6, #0
 8012f1e:	da03      	bge.n	8012f28 <_printf_i+0xc8>
 8012f20:	232d      	movs	r3, #45	; 0x2d
 8012f22:	4276      	negs	r6, r6
 8012f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f28:	485e      	ldr	r0, [pc, #376]	; (80130a4 <_printf_i+0x244>)
 8012f2a:	230a      	movs	r3, #10
 8012f2c:	e019      	b.n	8012f62 <_printf_i+0x102>
 8012f2e:	680e      	ldr	r6, [r1, #0]
 8012f30:	602b      	str	r3, [r5, #0]
 8012f32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f36:	bf18      	it	ne
 8012f38:	b236      	sxthne	r6, r6
 8012f3a:	e7ef      	b.n	8012f1c <_printf_i+0xbc>
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	6820      	ldr	r0, [r4, #0]
 8012f40:	1d19      	adds	r1, r3, #4
 8012f42:	6029      	str	r1, [r5, #0]
 8012f44:	0601      	lsls	r1, r0, #24
 8012f46:	d501      	bpl.n	8012f4c <_printf_i+0xec>
 8012f48:	681e      	ldr	r6, [r3, #0]
 8012f4a:	e002      	b.n	8012f52 <_printf_i+0xf2>
 8012f4c:	0646      	lsls	r6, r0, #25
 8012f4e:	d5fb      	bpl.n	8012f48 <_printf_i+0xe8>
 8012f50:	881e      	ldrh	r6, [r3, #0]
 8012f52:	4854      	ldr	r0, [pc, #336]	; (80130a4 <_printf_i+0x244>)
 8012f54:	2f6f      	cmp	r7, #111	; 0x6f
 8012f56:	bf0c      	ite	eq
 8012f58:	2308      	moveq	r3, #8
 8012f5a:	230a      	movne	r3, #10
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f62:	6865      	ldr	r5, [r4, #4]
 8012f64:	60a5      	str	r5, [r4, #8]
 8012f66:	2d00      	cmp	r5, #0
 8012f68:	bfa2      	ittt	ge
 8012f6a:	6821      	ldrge	r1, [r4, #0]
 8012f6c:	f021 0104 	bicge.w	r1, r1, #4
 8012f70:	6021      	strge	r1, [r4, #0]
 8012f72:	b90e      	cbnz	r6, 8012f78 <_printf_i+0x118>
 8012f74:	2d00      	cmp	r5, #0
 8012f76:	d04d      	beq.n	8013014 <_printf_i+0x1b4>
 8012f78:	4615      	mov	r5, r2
 8012f7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012f7e:	fb03 6711 	mls	r7, r3, r1, r6
 8012f82:	5dc7      	ldrb	r7, [r0, r7]
 8012f84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012f88:	4637      	mov	r7, r6
 8012f8a:	42bb      	cmp	r3, r7
 8012f8c:	460e      	mov	r6, r1
 8012f8e:	d9f4      	bls.n	8012f7a <_printf_i+0x11a>
 8012f90:	2b08      	cmp	r3, #8
 8012f92:	d10b      	bne.n	8012fac <_printf_i+0x14c>
 8012f94:	6823      	ldr	r3, [r4, #0]
 8012f96:	07de      	lsls	r6, r3, #31
 8012f98:	d508      	bpl.n	8012fac <_printf_i+0x14c>
 8012f9a:	6923      	ldr	r3, [r4, #16]
 8012f9c:	6861      	ldr	r1, [r4, #4]
 8012f9e:	4299      	cmp	r1, r3
 8012fa0:	bfde      	ittt	le
 8012fa2:	2330      	movle	r3, #48	; 0x30
 8012fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012fa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012fac:	1b52      	subs	r2, r2, r5
 8012fae:	6122      	str	r2, [r4, #16]
 8012fb0:	f8cd a000 	str.w	sl, [sp]
 8012fb4:	464b      	mov	r3, r9
 8012fb6:	aa03      	add	r2, sp, #12
 8012fb8:	4621      	mov	r1, r4
 8012fba:	4640      	mov	r0, r8
 8012fbc:	f7ff fee2 	bl	8012d84 <_printf_common>
 8012fc0:	3001      	adds	r0, #1
 8012fc2:	d14c      	bne.n	801305e <_printf_i+0x1fe>
 8012fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fc8:	b004      	add	sp, #16
 8012fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fce:	4835      	ldr	r0, [pc, #212]	; (80130a4 <_printf_i+0x244>)
 8012fd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012fd4:	6829      	ldr	r1, [r5, #0]
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012fdc:	6029      	str	r1, [r5, #0]
 8012fde:	061d      	lsls	r5, r3, #24
 8012fe0:	d514      	bpl.n	801300c <_printf_i+0x1ac>
 8012fe2:	07df      	lsls	r7, r3, #31
 8012fe4:	bf44      	itt	mi
 8012fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8012fea:	6023      	strmi	r3, [r4, #0]
 8012fec:	b91e      	cbnz	r6, 8012ff6 <_printf_i+0x196>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	f023 0320 	bic.w	r3, r3, #32
 8012ff4:	6023      	str	r3, [r4, #0]
 8012ff6:	2310      	movs	r3, #16
 8012ff8:	e7b0      	b.n	8012f5c <_printf_i+0xfc>
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	f043 0320 	orr.w	r3, r3, #32
 8013000:	6023      	str	r3, [r4, #0]
 8013002:	2378      	movs	r3, #120	; 0x78
 8013004:	4828      	ldr	r0, [pc, #160]	; (80130a8 <_printf_i+0x248>)
 8013006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801300a:	e7e3      	b.n	8012fd4 <_printf_i+0x174>
 801300c:	0659      	lsls	r1, r3, #25
 801300e:	bf48      	it	mi
 8013010:	b2b6      	uxthmi	r6, r6
 8013012:	e7e6      	b.n	8012fe2 <_printf_i+0x182>
 8013014:	4615      	mov	r5, r2
 8013016:	e7bb      	b.n	8012f90 <_printf_i+0x130>
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	6826      	ldr	r6, [r4, #0]
 801301c:	6961      	ldr	r1, [r4, #20]
 801301e:	1d18      	adds	r0, r3, #4
 8013020:	6028      	str	r0, [r5, #0]
 8013022:	0635      	lsls	r5, r6, #24
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	d501      	bpl.n	801302c <_printf_i+0x1cc>
 8013028:	6019      	str	r1, [r3, #0]
 801302a:	e002      	b.n	8013032 <_printf_i+0x1d2>
 801302c:	0670      	lsls	r0, r6, #25
 801302e:	d5fb      	bpl.n	8013028 <_printf_i+0x1c8>
 8013030:	8019      	strh	r1, [r3, #0]
 8013032:	2300      	movs	r3, #0
 8013034:	6123      	str	r3, [r4, #16]
 8013036:	4615      	mov	r5, r2
 8013038:	e7ba      	b.n	8012fb0 <_printf_i+0x150>
 801303a:	682b      	ldr	r3, [r5, #0]
 801303c:	1d1a      	adds	r2, r3, #4
 801303e:	602a      	str	r2, [r5, #0]
 8013040:	681d      	ldr	r5, [r3, #0]
 8013042:	6862      	ldr	r2, [r4, #4]
 8013044:	2100      	movs	r1, #0
 8013046:	4628      	mov	r0, r5
 8013048:	f7ed f952 	bl	80002f0 <memchr>
 801304c:	b108      	cbz	r0, 8013052 <_printf_i+0x1f2>
 801304e:	1b40      	subs	r0, r0, r5
 8013050:	6060      	str	r0, [r4, #4]
 8013052:	6863      	ldr	r3, [r4, #4]
 8013054:	6123      	str	r3, [r4, #16]
 8013056:	2300      	movs	r3, #0
 8013058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801305c:	e7a8      	b.n	8012fb0 <_printf_i+0x150>
 801305e:	6923      	ldr	r3, [r4, #16]
 8013060:	462a      	mov	r2, r5
 8013062:	4649      	mov	r1, r9
 8013064:	4640      	mov	r0, r8
 8013066:	47d0      	blx	sl
 8013068:	3001      	adds	r0, #1
 801306a:	d0ab      	beq.n	8012fc4 <_printf_i+0x164>
 801306c:	6823      	ldr	r3, [r4, #0]
 801306e:	079b      	lsls	r3, r3, #30
 8013070:	d413      	bmi.n	801309a <_printf_i+0x23a>
 8013072:	68e0      	ldr	r0, [r4, #12]
 8013074:	9b03      	ldr	r3, [sp, #12]
 8013076:	4298      	cmp	r0, r3
 8013078:	bfb8      	it	lt
 801307a:	4618      	movlt	r0, r3
 801307c:	e7a4      	b.n	8012fc8 <_printf_i+0x168>
 801307e:	2301      	movs	r3, #1
 8013080:	4632      	mov	r2, r6
 8013082:	4649      	mov	r1, r9
 8013084:	4640      	mov	r0, r8
 8013086:	47d0      	blx	sl
 8013088:	3001      	adds	r0, #1
 801308a:	d09b      	beq.n	8012fc4 <_printf_i+0x164>
 801308c:	3501      	adds	r5, #1
 801308e:	68e3      	ldr	r3, [r4, #12]
 8013090:	9903      	ldr	r1, [sp, #12]
 8013092:	1a5b      	subs	r3, r3, r1
 8013094:	42ab      	cmp	r3, r5
 8013096:	dcf2      	bgt.n	801307e <_printf_i+0x21e>
 8013098:	e7eb      	b.n	8013072 <_printf_i+0x212>
 801309a:	2500      	movs	r5, #0
 801309c:	f104 0619 	add.w	r6, r4, #25
 80130a0:	e7f5      	b.n	801308e <_printf_i+0x22e>
 80130a2:	bf00      	nop
 80130a4:	08016d7e 	.word	0x08016d7e
 80130a8:	08016d8f 	.word	0x08016d8f

080130ac <_puts_r>:
 80130ac:	b570      	push	{r4, r5, r6, lr}
 80130ae:	460e      	mov	r6, r1
 80130b0:	4605      	mov	r5, r0
 80130b2:	b118      	cbz	r0, 80130bc <_puts_r+0x10>
 80130b4:	6983      	ldr	r3, [r0, #24]
 80130b6:	b90b      	cbnz	r3, 80130bc <_puts_r+0x10>
 80130b8:	f001 f842 	bl	8014140 <__sinit>
 80130bc:	69ab      	ldr	r3, [r5, #24]
 80130be:	68ac      	ldr	r4, [r5, #8]
 80130c0:	b913      	cbnz	r3, 80130c8 <_puts_r+0x1c>
 80130c2:	4628      	mov	r0, r5
 80130c4:	f001 f83c 	bl	8014140 <__sinit>
 80130c8:	4b2c      	ldr	r3, [pc, #176]	; (801317c <_puts_r+0xd0>)
 80130ca:	429c      	cmp	r4, r3
 80130cc:	d120      	bne.n	8013110 <_puts_r+0x64>
 80130ce:	686c      	ldr	r4, [r5, #4]
 80130d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130d2:	07db      	lsls	r3, r3, #31
 80130d4:	d405      	bmi.n	80130e2 <_puts_r+0x36>
 80130d6:	89a3      	ldrh	r3, [r4, #12]
 80130d8:	0598      	lsls	r0, r3, #22
 80130da:	d402      	bmi.n	80130e2 <_puts_r+0x36>
 80130dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130de:	f001 f8d2 	bl	8014286 <__retarget_lock_acquire_recursive>
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	0719      	lsls	r1, r3, #28
 80130e6:	d51d      	bpl.n	8013124 <_puts_r+0x78>
 80130e8:	6923      	ldr	r3, [r4, #16]
 80130ea:	b1db      	cbz	r3, 8013124 <_puts_r+0x78>
 80130ec:	3e01      	subs	r6, #1
 80130ee:	68a3      	ldr	r3, [r4, #8]
 80130f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80130f4:	3b01      	subs	r3, #1
 80130f6:	60a3      	str	r3, [r4, #8]
 80130f8:	bb39      	cbnz	r1, 801314a <_puts_r+0x9e>
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	da38      	bge.n	8013170 <_puts_r+0xc4>
 80130fe:	4622      	mov	r2, r4
 8013100:	210a      	movs	r1, #10
 8013102:	4628      	mov	r0, r5
 8013104:	f000 f848 	bl	8013198 <__swbuf_r>
 8013108:	3001      	adds	r0, #1
 801310a:	d011      	beq.n	8013130 <_puts_r+0x84>
 801310c:	250a      	movs	r5, #10
 801310e:	e011      	b.n	8013134 <_puts_r+0x88>
 8013110:	4b1b      	ldr	r3, [pc, #108]	; (8013180 <_puts_r+0xd4>)
 8013112:	429c      	cmp	r4, r3
 8013114:	d101      	bne.n	801311a <_puts_r+0x6e>
 8013116:	68ac      	ldr	r4, [r5, #8]
 8013118:	e7da      	b.n	80130d0 <_puts_r+0x24>
 801311a:	4b1a      	ldr	r3, [pc, #104]	; (8013184 <_puts_r+0xd8>)
 801311c:	429c      	cmp	r4, r3
 801311e:	bf08      	it	eq
 8013120:	68ec      	ldreq	r4, [r5, #12]
 8013122:	e7d5      	b.n	80130d0 <_puts_r+0x24>
 8013124:	4621      	mov	r1, r4
 8013126:	4628      	mov	r0, r5
 8013128:	f000 f888 	bl	801323c <__swsetup_r>
 801312c:	2800      	cmp	r0, #0
 801312e:	d0dd      	beq.n	80130ec <_puts_r+0x40>
 8013130:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013136:	07da      	lsls	r2, r3, #31
 8013138:	d405      	bmi.n	8013146 <_puts_r+0x9a>
 801313a:	89a3      	ldrh	r3, [r4, #12]
 801313c:	059b      	lsls	r3, r3, #22
 801313e:	d402      	bmi.n	8013146 <_puts_r+0x9a>
 8013140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013142:	f001 f8a1 	bl	8014288 <__retarget_lock_release_recursive>
 8013146:	4628      	mov	r0, r5
 8013148:	bd70      	pop	{r4, r5, r6, pc}
 801314a:	2b00      	cmp	r3, #0
 801314c:	da04      	bge.n	8013158 <_puts_r+0xac>
 801314e:	69a2      	ldr	r2, [r4, #24]
 8013150:	429a      	cmp	r2, r3
 8013152:	dc06      	bgt.n	8013162 <_puts_r+0xb6>
 8013154:	290a      	cmp	r1, #10
 8013156:	d004      	beq.n	8013162 <_puts_r+0xb6>
 8013158:	6823      	ldr	r3, [r4, #0]
 801315a:	1c5a      	adds	r2, r3, #1
 801315c:	6022      	str	r2, [r4, #0]
 801315e:	7019      	strb	r1, [r3, #0]
 8013160:	e7c5      	b.n	80130ee <_puts_r+0x42>
 8013162:	4622      	mov	r2, r4
 8013164:	4628      	mov	r0, r5
 8013166:	f000 f817 	bl	8013198 <__swbuf_r>
 801316a:	3001      	adds	r0, #1
 801316c:	d1bf      	bne.n	80130ee <_puts_r+0x42>
 801316e:	e7df      	b.n	8013130 <_puts_r+0x84>
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	250a      	movs	r5, #10
 8013174:	1c5a      	adds	r2, r3, #1
 8013176:	6022      	str	r2, [r4, #0]
 8013178:	701d      	strb	r5, [r3, #0]
 801317a:	e7db      	b.n	8013134 <_puts_r+0x88>
 801317c:	08016e50 	.word	0x08016e50
 8013180:	08016e70 	.word	0x08016e70
 8013184:	08016e30 	.word	0x08016e30

08013188 <puts>:
 8013188:	4b02      	ldr	r3, [pc, #8]	; (8013194 <puts+0xc>)
 801318a:	4601      	mov	r1, r0
 801318c:	6818      	ldr	r0, [r3, #0]
 801318e:	f7ff bf8d 	b.w	80130ac <_puts_r>
 8013192:	bf00      	nop
 8013194:	24000240 	.word	0x24000240

08013198 <__swbuf_r>:
 8013198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801319a:	460e      	mov	r6, r1
 801319c:	4614      	mov	r4, r2
 801319e:	4605      	mov	r5, r0
 80131a0:	b118      	cbz	r0, 80131aa <__swbuf_r+0x12>
 80131a2:	6983      	ldr	r3, [r0, #24]
 80131a4:	b90b      	cbnz	r3, 80131aa <__swbuf_r+0x12>
 80131a6:	f000 ffcb 	bl	8014140 <__sinit>
 80131aa:	4b21      	ldr	r3, [pc, #132]	; (8013230 <__swbuf_r+0x98>)
 80131ac:	429c      	cmp	r4, r3
 80131ae:	d12b      	bne.n	8013208 <__swbuf_r+0x70>
 80131b0:	686c      	ldr	r4, [r5, #4]
 80131b2:	69a3      	ldr	r3, [r4, #24]
 80131b4:	60a3      	str	r3, [r4, #8]
 80131b6:	89a3      	ldrh	r3, [r4, #12]
 80131b8:	071a      	lsls	r2, r3, #28
 80131ba:	d52f      	bpl.n	801321c <__swbuf_r+0x84>
 80131bc:	6923      	ldr	r3, [r4, #16]
 80131be:	b36b      	cbz	r3, 801321c <__swbuf_r+0x84>
 80131c0:	6923      	ldr	r3, [r4, #16]
 80131c2:	6820      	ldr	r0, [r4, #0]
 80131c4:	1ac0      	subs	r0, r0, r3
 80131c6:	6963      	ldr	r3, [r4, #20]
 80131c8:	b2f6      	uxtb	r6, r6
 80131ca:	4283      	cmp	r3, r0
 80131cc:	4637      	mov	r7, r6
 80131ce:	dc04      	bgt.n	80131da <__swbuf_r+0x42>
 80131d0:	4621      	mov	r1, r4
 80131d2:	4628      	mov	r0, r5
 80131d4:	f000 ff20 	bl	8014018 <_fflush_r>
 80131d8:	bb30      	cbnz	r0, 8013228 <__swbuf_r+0x90>
 80131da:	68a3      	ldr	r3, [r4, #8]
 80131dc:	3b01      	subs	r3, #1
 80131de:	60a3      	str	r3, [r4, #8]
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	1c5a      	adds	r2, r3, #1
 80131e4:	6022      	str	r2, [r4, #0]
 80131e6:	701e      	strb	r6, [r3, #0]
 80131e8:	6963      	ldr	r3, [r4, #20]
 80131ea:	3001      	adds	r0, #1
 80131ec:	4283      	cmp	r3, r0
 80131ee:	d004      	beq.n	80131fa <__swbuf_r+0x62>
 80131f0:	89a3      	ldrh	r3, [r4, #12]
 80131f2:	07db      	lsls	r3, r3, #31
 80131f4:	d506      	bpl.n	8013204 <__swbuf_r+0x6c>
 80131f6:	2e0a      	cmp	r6, #10
 80131f8:	d104      	bne.n	8013204 <__swbuf_r+0x6c>
 80131fa:	4621      	mov	r1, r4
 80131fc:	4628      	mov	r0, r5
 80131fe:	f000 ff0b 	bl	8014018 <_fflush_r>
 8013202:	b988      	cbnz	r0, 8013228 <__swbuf_r+0x90>
 8013204:	4638      	mov	r0, r7
 8013206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013208:	4b0a      	ldr	r3, [pc, #40]	; (8013234 <__swbuf_r+0x9c>)
 801320a:	429c      	cmp	r4, r3
 801320c:	d101      	bne.n	8013212 <__swbuf_r+0x7a>
 801320e:	68ac      	ldr	r4, [r5, #8]
 8013210:	e7cf      	b.n	80131b2 <__swbuf_r+0x1a>
 8013212:	4b09      	ldr	r3, [pc, #36]	; (8013238 <__swbuf_r+0xa0>)
 8013214:	429c      	cmp	r4, r3
 8013216:	bf08      	it	eq
 8013218:	68ec      	ldreq	r4, [r5, #12]
 801321a:	e7ca      	b.n	80131b2 <__swbuf_r+0x1a>
 801321c:	4621      	mov	r1, r4
 801321e:	4628      	mov	r0, r5
 8013220:	f000 f80c 	bl	801323c <__swsetup_r>
 8013224:	2800      	cmp	r0, #0
 8013226:	d0cb      	beq.n	80131c0 <__swbuf_r+0x28>
 8013228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801322c:	e7ea      	b.n	8013204 <__swbuf_r+0x6c>
 801322e:	bf00      	nop
 8013230:	08016e50 	.word	0x08016e50
 8013234:	08016e70 	.word	0x08016e70
 8013238:	08016e30 	.word	0x08016e30

0801323c <__swsetup_r>:
 801323c:	4b32      	ldr	r3, [pc, #200]	; (8013308 <__swsetup_r+0xcc>)
 801323e:	b570      	push	{r4, r5, r6, lr}
 8013240:	681d      	ldr	r5, [r3, #0]
 8013242:	4606      	mov	r6, r0
 8013244:	460c      	mov	r4, r1
 8013246:	b125      	cbz	r5, 8013252 <__swsetup_r+0x16>
 8013248:	69ab      	ldr	r3, [r5, #24]
 801324a:	b913      	cbnz	r3, 8013252 <__swsetup_r+0x16>
 801324c:	4628      	mov	r0, r5
 801324e:	f000 ff77 	bl	8014140 <__sinit>
 8013252:	4b2e      	ldr	r3, [pc, #184]	; (801330c <__swsetup_r+0xd0>)
 8013254:	429c      	cmp	r4, r3
 8013256:	d10f      	bne.n	8013278 <__swsetup_r+0x3c>
 8013258:	686c      	ldr	r4, [r5, #4]
 801325a:	89a3      	ldrh	r3, [r4, #12]
 801325c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013260:	0719      	lsls	r1, r3, #28
 8013262:	d42c      	bmi.n	80132be <__swsetup_r+0x82>
 8013264:	06dd      	lsls	r5, r3, #27
 8013266:	d411      	bmi.n	801328c <__swsetup_r+0x50>
 8013268:	2309      	movs	r3, #9
 801326a:	6033      	str	r3, [r6, #0]
 801326c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013270:	81a3      	strh	r3, [r4, #12]
 8013272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013276:	e03e      	b.n	80132f6 <__swsetup_r+0xba>
 8013278:	4b25      	ldr	r3, [pc, #148]	; (8013310 <__swsetup_r+0xd4>)
 801327a:	429c      	cmp	r4, r3
 801327c:	d101      	bne.n	8013282 <__swsetup_r+0x46>
 801327e:	68ac      	ldr	r4, [r5, #8]
 8013280:	e7eb      	b.n	801325a <__swsetup_r+0x1e>
 8013282:	4b24      	ldr	r3, [pc, #144]	; (8013314 <__swsetup_r+0xd8>)
 8013284:	429c      	cmp	r4, r3
 8013286:	bf08      	it	eq
 8013288:	68ec      	ldreq	r4, [r5, #12]
 801328a:	e7e6      	b.n	801325a <__swsetup_r+0x1e>
 801328c:	0758      	lsls	r0, r3, #29
 801328e:	d512      	bpl.n	80132b6 <__swsetup_r+0x7a>
 8013290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013292:	b141      	cbz	r1, 80132a6 <__swsetup_r+0x6a>
 8013294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013298:	4299      	cmp	r1, r3
 801329a:	d002      	beq.n	80132a2 <__swsetup_r+0x66>
 801329c:	4630      	mov	r0, r6
 801329e:	f001 fc09 	bl	8014ab4 <_free_r>
 80132a2:	2300      	movs	r3, #0
 80132a4:	6363      	str	r3, [r4, #52]	; 0x34
 80132a6:	89a3      	ldrh	r3, [r4, #12]
 80132a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132ac:	81a3      	strh	r3, [r4, #12]
 80132ae:	2300      	movs	r3, #0
 80132b0:	6063      	str	r3, [r4, #4]
 80132b2:	6923      	ldr	r3, [r4, #16]
 80132b4:	6023      	str	r3, [r4, #0]
 80132b6:	89a3      	ldrh	r3, [r4, #12]
 80132b8:	f043 0308 	orr.w	r3, r3, #8
 80132bc:	81a3      	strh	r3, [r4, #12]
 80132be:	6923      	ldr	r3, [r4, #16]
 80132c0:	b94b      	cbnz	r3, 80132d6 <__swsetup_r+0x9a>
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132cc:	d003      	beq.n	80132d6 <__swsetup_r+0x9a>
 80132ce:	4621      	mov	r1, r4
 80132d0:	4630      	mov	r0, r6
 80132d2:	f000 ffff 	bl	80142d4 <__smakebuf_r>
 80132d6:	89a0      	ldrh	r0, [r4, #12]
 80132d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132dc:	f010 0301 	ands.w	r3, r0, #1
 80132e0:	d00a      	beq.n	80132f8 <__swsetup_r+0xbc>
 80132e2:	2300      	movs	r3, #0
 80132e4:	60a3      	str	r3, [r4, #8]
 80132e6:	6963      	ldr	r3, [r4, #20]
 80132e8:	425b      	negs	r3, r3
 80132ea:	61a3      	str	r3, [r4, #24]
 80132ec:	6923      	ldr	r3, [r4, #16]
 80132ee:	b943      	cbnz	r3, 8013302 <__swsetup_r+0xc6>
 80132f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132f4:	d1ba      	bne.n	801326c <__swsetup_r+0x30>
 80132f6:	bd70      	pop	{r4, r5, r6, pc}
 80132f8:	0781      	lsls	r1, r0, #30
 80132fa:	bf58      	it	pl
 80132fc:	6963      	ldrpl	r3, [r4, #20]
 80132fe:	60a3      	str	r3, [r4, #8]
 8013300:	e7f4      	b.n	80132ec <__swsetup_r+0xb0>
 8013302:	2000      	movs	r0, #0
 8013304:	e7f7      	b.n	80132f6 <__swsetup_r+0xba>
 8013306:	bf00      	nop
 8013308:	24000240 	.word	0x24000240
 801330c:	08016e50 	.word	0x08016e50
 8013310:	08016e70 	.word	0x08016e70
 8013314:	08016e30 	.word	0x08016e30

08013318 <quorem>:
 8013318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801331c:	6903      	ldr	r3, [r0, #16]
 801331e:	690c      	ldr	r4, [r1, #16]
 8013320:	42a3      	cmp	r3, r4
 8013322:	4607      	mov	r7, r0
 8013324:	f2c0 8081 	blt.w	801342a <quorem+0x112>
 8013328:	3c01      	subs	r4, #1
 801332a:	f101 0814 	add.w	r8, r1, #20
 801332e:	f100 0514 	add.w	r5, r0, #20
 8013332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013336:	9301      	str	r3, [sp, #4]
 8013338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801333c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013340:	3301      	adds	r3, #1
 8013342:	429a      	cmp	r2, r3
 8013344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801334c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013350:	d331      	bcc.n	80133b6 <quorem+0x9e>
 8013352:	f04f 0e00 	mov.w	lr, #0
 8013356:	4640      	mov	r0, r8
 8013358:	46ac      	mov	ip, r5
 801335a:	46f2      	mov	sl, lr
 801335c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013360:	b293      	uxth	r3, r2
 8013362:	fb06 e303 	mla	r3, r6, r3, lr
 8013366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801336a:	b29b      	uxth	r3, r3
 801336c:	ebaa 0303 	sub.w	r3, sl, r3
 8013370:	f8dc a000 	ldr.w	sl, [ip]
 8013374:	0c12      	lsrs	r2, r2, #16
 8013376:	fa13 f38a 	uxtah	r3, r3, sl
 801337a:	fb06 e202 	mla	r2, r6, r2, lr
 801337e:	9300      	str	r3, [sp, #0]
 8013380:	9b00      	ldr	r3, [sp, #0]
 8013382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013386:	b292      	uxth	r2, r2
 8013388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801338c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013390:	f8bd 3000 	ldrh.w	r3, [sp]
 8013394:	4581      	cmp	r9, r0
 8013396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801339a:	f84c 3b04 	str.w	r3, [ip], #4
 801339e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80133a2:	d2db      	bcs.n	801335c <quorem+0x44>
 80133a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80133a8:	b92b      	cbnz	r3, 80133b6 <quorem+0x9e>
 80133aa:	9b01      	ldr	r3, [sp, #4]
 80133ac:	3b04      	subs	r3, #4
 80133ae:	429d      	cmp	r5, r3
 80133b0:	461a      	mov	r2, r3
 80133b2:	d32e      	bcc.n	8013412 <quorem+0xfa>
 80133b4:	613c      	str	r4, [r7, #16]
 80133b6:	4638      	mov	r0, r7
 80133b8:	f001 fa64 	bl	8014884 <__mcmp>
 80133bc:	2800      	cmp	r0, #0
 80133be:	db24      	blt.n	801340a <quorem+0xf2>
 80133c0:	3601      	adds	r6, #1
 80133c2:	4628      	mov	r0, r5
 80133c4:	f04f 0c00 	mov.w	ip, #0
 80133c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80133cc:	f8d0 e000 	ldr.w	lr, [r0]
 80133d0:	b293      	uxth	r3, r2
 80133d2:	ebac 0303 	sub.w	r3, ip, r3
 80133d6:	0c12      	lsrs	r2, r2, #16
 80133d8:	fa13 f38e 	uxtah	r3, r3, lr
 80133dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80133e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133ea:	45c1      	cmp	r9, r8
 80133ec:	f840 3b04 	str.w	r3, [r0], #4
 80133f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80133f4:	d2e8      	bcs.n	80133c8 <quorem+0xb0>
 80133f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133fe:	b922      	cbnz	r2, 801340a <quorem+0xf2>
 8013400:	3b04      	subs	r3, #4
 8013402:	429d      	cmp	r5, r3
 8013404:	461a      	mov	r2, r3
 8013406:	d30a      	bcc.n	801341e <quorem+0x106>
 8013408:	613c      	str	r4, [r7, #16]
 801340a:	4630      	mov	r0, r6
 801340c:	b003      	add	sp, #12
 801340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013412:	6812      	ldr	r2, [r2, #0]
 8013414:	3b04      	subs	r3, #4
 8013416:	2a00      	cmp	r2, #0
 8013418:	d1cc      	bne.n	80133b4 <quorem+0x9c>
 801341a:	3c01      	subs	r4, #1
 801341c:	e7c7      	b.n	80133ae <quorem+0x96>
 801341e:	6812      	ldr	r2, [r2, #0]
 8013420:	3b04      	subs	r3, #4
 8013422:	2a00      	cmp	r2, #0
 8013424:	d1f0      	bne.n	8013408 <quorem+0xf0>
 8013426:	3c01      	subs	r4, #1
 8013428:	e7eb      	b.n	8013402 <quorem+0xea>
 801342a:	2000      	movs	r0, #0
 801342c:	e7ee      	b.n	801340c <quorem+0xf4>
	...

08013430 <_dtoa_r>:
 8013430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013434:	ed2d 8b02 	vpush	{d8}
 8013438:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801343a:	b091      	sub	sp, #68	; 0x44
 801343c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013440:	ec59 8b10 	vmov	r8, r9, d0
 8013444:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013446:	9106      	str	r1, [sp, #24]
 8013448:	4606      	mov	r6, r0
 801344a:	9208      	str	r2, [sp, #32]
 801344c:	930c      	str	r3, [sp, #48]	; 0x30
 801344e:	b975      	cbnz	r5, 801346e <_dtoa_r+0x3e>
 8013450:	2010      	movs	r0, #16
 8013452:	f000 ff7f 	bl	8014354 <malloc>
 8013456:	4602      	mov	r2, r0
 8013458:	6270      	str	r0, [r6, #36]	; 0x24
 801345a:	b920      	cbnz	r0, 8013466 <_dtoa_r+0x36>
 801345c:	4baa      	ldr	r3, [pc, #680]	; (8013708 <_dtoa_r+0x2d8>)
 801345e:	21ea      	movs	r1, #234	; 0xea
 8013460:	48aa      	ldr	r0, [pc, #680]	; (801370c <_dtoa_r+0x2dc>)
 8013462:	f001 fc6d 	bl	8014d40 <__assert_func>
 8013466:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801346a:	6005      	str	r5, [r0, #0]
 801346c:	60c5      	str	r5, [r0, #12]
 801346e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013470:	6819      	ldr	r1, [r3, #0]
 8013472:	b151      	cbz	r1, 801348a <_dtoa_r+0x5a>
 8013474:	685a      	ldr	r2, [r3, #4]
 8013476:	604a      	str	r2, [r1, #4]
 8013478:	2301      	movs	r3, #1
 801347a:	4093      	lsls	r3, r2
 801347c:	608b      	str	r3, [r1, #8]
 801347e:	4630      	mov	r0, r6
 8013480:	f000 ffbe 	bl	8014400 <_Bfree>
 8013484:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013486:	2200      	movs	r2, #0
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	f1b9 0300 	subs.w	r3, r9, #0
 801348e:	bfbb      	ittet	lt
 8013490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013494:	9303      	strlt	r3, [sp, #12]
 8013496:	2300      	movge	r3, #0
 8013498:	2201      	movlt	r2, #1
 801349a:	bfac      	ite	ge
 801349c:	6023      	strge	r3, [r4, #0]
 801349e:	6022      	strlt	r2, [r4, #0]
 80134a0:	4b9b      	ldr	r3, [pc, #620]	; (8013710 <_dtoa_r+0x2e0>)
 80134a2:	9c03      	ldr	r4, [sp, #12]
 80134a4:	43a3      	bics	r3, r4
 80134a6:	d11c      	bne.n	80134e2 <_dtoa_r+0xb2>
 80134a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80134ae:	6013      	str	r3, [r2, #0]
 80134b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80134b4:	ea53 0308 	orrs.w	r3, r3, r8
 80134b8:	f000 84fd 	beq.w	8013eb6 <_dtoa_r+0xa86>
 80134bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134be:	b963      	cbnz	r3, 80134da <_dtoa_r+0xaa>
 80134c0:	4b94      	ldr	r3, [pc, #592]	; (8013714 <_dtoa_r+0x2e4>)
 80134c2:	e01f      	b.n	8013504 <_dtoa_r+0xd4>
 80134c4:	4b94      	ldr	r3, [pc, #592]	; (8013718 <_dtoa_r+0x2e8>)
 80134c6:	9301      	str	r3, [sp, #4]
 80134c8:	3308      	adds	r3, #8
 80134ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134cc:	6013      	str	r3, [r2, #0]
 80134ce:	9801      	ldr	r0, [sp, #4]
 80134d0:	b011      	add	sp, #68	; 0x44
 80134d2:	ecbd 8b02 	vpop	{d8}
 80134d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134da:	4b8e      	ldr	r3, [pc, #568]	; (8013714 <_dtoa_r+0x2e4>)
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	3303      	adds	r3, #3
 80134e0:	e7f3      	b.n	80134ca <_dtoa_r+0x9a>
 80134e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80134e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80134ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ee:	d10b      	bne.n	8013508 <_dtoa_r+0xd8>
 80134f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134f2:	2301      	movs	r3, #1
 80134f4:	6013      	str	r3, [r2, #0]
 80134f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 84d9 	beq.w	8013eb0 <_dtoa_r+0xa80>
 80134fe:	4887      	ldr	r0, [pc, #540]	; (801371c <_dtoa_r+0x2ec>)
 8013500:	6018      	str	r0, [r3, #0]
 8013502:	1e43      	subs	r3, r0, #1
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	e7e2      	b.n	80134ce <_dtoa_r+0x9e>
 8013508:	a90f      	add	r1, sp, #60	; 0x3c
 801350a:	aa0e      	add	r2, sp, #56	; 0x38
 801350c:	4630      	mov	r0, r6
 801350e:	eeb0 0b48 	vmov.f64	d0, d8
 8013512:	f001 fa5d 	bl	80149d0 <__d2b>
 8013516:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801351a:	4605      	mov	r5, r0
 801351c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801351e:	2900      	cmp	r1, #0
 8013520:	d046      	beq.n	80135b0 <_dtoa_r+0x180>
 8013522:	ee18 4a90 	vmov	r4, s17
 8013526:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801352a:	ec53 2b18 	vmov	r2, r3, d8
 801352e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013532:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013536:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801353a:	2400      	movs	r4, #0
 801353c:	ec43 2b16 	vmov	d6, r2, r3
 8013540:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013544:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80136f0 <_dtoa_r+0x2c0>
 8013548:	ee36 7b47 	vsub.f64	d7, d6, d7
 801354c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80136f8 <_dtoa_r+0x2c8>
 8013550:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013554:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013700 <_dtoa_r+0x2d0>
 8013558:	ee07 1a90 	vmov	s15, r1
 801355c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013560:	eeb0 7b46 	vmov.f64	d7, d6
 8013564:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013568:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801356c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013574:	ee16 ba90 	vmov	fp, s13
 8013578:	940a      	str	r4, [sp, #40]	; 0x28
 801357a:	d508      	bpl.n	801358e <_dtoa_r+0x15e>
 801357c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013580:	eeb4 6b47 	vcmp.f64	d6, d7
 8013584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013588:	bf18      	it	ne
 801358a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801358e:	f1bb 0f16 	cmp.w	fp, #22
 8013592:	d82f      	bhi.n	80135f4 <_dtoa_r+0x1c4>
 8013594:	4b62      	ldr	r3, [pc, #392]	; (8013720 <_dtoa_r+0x2f0>)
 8013596:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801359a:	ed93 7b00 	vldr	d7, [r3]
 801359e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80135a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a6:	d501      	bpl.n	80135ac <_dtoa_r+0x17c>
 80135a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80135ac:	2300      	movs	r3, #0
 80135ae:	e022      	b.n	80135f6 <_dtoa_r+0x1c6>
 80135b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80135b2:	4401      	add	r1, r0
 80135b4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80135b8:	2b20      	cmp	r3, #32
 80135ba:	bfc1      	itttt	gt
 80135bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80135c0:	fa04 f303 	lslgt.w	r3, r4, r3
 80135c4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80135c8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80135cc:	bfd6      	itet	le
 80135ce:	f1c3 0320 	rsble	r3, r3, #32
 80135d2:	ea43 0808 	orrgt.w	r8, r3, r8
 80135d6:	fa08 f803 	lslle.w	r8, r8, r3
 80135da:	ee07 8a90 	vmov	s15, r8
 80135de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80135e2:	3901      	subs	r1, #1
 80135e4:	ee17 4a90 	vmov	r4, s15
 80135e8:	ec53 2b17 	vmov	r2, r3, d7
 80135ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80135f0:	2401      	movs	r4, #1
 80135f2:	e7a3      	b.n	801353c <_dtoa_r+0x10c>
 80135f4:	2301      	movs	r3, #1
 80135f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80135f8:	1a43      	subs	r3, r0, r1
 80135fa:	1e5a      	subs	r2, r3, #1
 80135fc:	bf45      	ittet	mi
 80135fe:	f1c3 0301 	rsbmi	r3, r3, #1
 8013602:	9304      	strmi	r3, [sp, #16]
 8013604:	2300      	movpl	r3, #0
 8013606:	2300      	movmi	r3, #0
 8013608:	9205      	str	r2, [sp, #20]
 801360a:	bf54      	ite	pl
 801360c:	9304      	strpl	r3, [sp, #16]
 801360e:	9305      	strmi	r3, [sp, #20]
 8013610:	f1bb 0f00 	cmp.w	fp, #0
 8013614:	db18      	blt.n	8013648 <_dtoa_r+0x218>
 8013616:	9b05      	ldr	r3, [sp, #20]
 8013618:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801361c:	445b      	add	r3, fp
 801361e:	9305      	str	r3, [sp, #20]
 8013620:	2300      	movs	r3, #0
 8013622:	9a06      	ldr	r2, [sp, #24]
 8013624:	2a09      	cmp	r2, #9
 8013626:	d849      	bhi.n	80136bc <_dtoa_r+0x28c>
 8013628:	2a05      	cmp	r2, #5
 801362a:	bfc4      	itt	gt
 801362c:	3a04      	subgt	r2, #4
 801362e:	9206      	strgt	r2, [sp, #24]
 8013630:	9a06      	ldr	r2, [sp, #24]
 8013632:	f1a2 0202 	sub.w	r2, r2, #2
 8013636:	bfcc      	ite	gt
 8013638:	2400      	movgt	r4, #0
 801363a:	2401      	movle	r4, #1
 801363c:	2a03      	cmp	r2, #3
 801363e:	d848      	bhi.n	80136d2 <_dtoa_r+0x2a2>
 8013640:	e8df f002 	tbb	[pc, r2]
 8013644:	3a2c2e0b 	.word	0x3a2c2e0b
 8013648:	9b04      	ldr	r3, [sp, #16]
 801364a:	2200      	movs	r2, #0
 801364c:	eba3 030b 	sub.w	r3, r3, fp
 8013650:	9304      	str	r3, [sp, #16]
 8013652:	9209      	str	r2, [sp, #36]	; 0x24
 8013654:	f1cb 0300 	rsb	r3, fp, #0
 8013658:	e7e3      	b.n	8013622 <_dtoa_r+0x1f2>
 801365a:	2200      	movs	r2, #0
 801365c:	9207      	str	r2, [sp, #28]
 801365e:	9a08      	ldr	r2, [sp, #32]
 8013660:	2a00      	cmp	r2, #0
 8013662:	dc39      	bgt.n	80136d8 <_dtoa_r+0x2a8>
 8013664:	f04f 0a01 	mov.w	sl, #1
 8013668:	46d1      	mov	r9, sl
 801366a:	4652      	mov	r2, sl
 801366c:	f8cd a020 	str.w	sl, [sp, #32]
 8013670:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013672:	2100      	movs	r1, #0
 8013674:	6079      	str	r1, [r7, #4]
 8013676:	2004      	movs	r0, #4
 8013678:	f100 0c14 	add.w	ip, r0, #20
 801367c:	4594      	cmp	ip, r2
 801367e:	6879      	ldr	r1, [r7, #4]
 8013680:	d92f      	bls.n	80136e2 <_dtoa_r+0x2b2>
 8013682:	4630      	mov	r0, r6
 8013684:	930d      	str	r3, [sp, #52]	; 0x34
 8013686:	f000 fe7b 	bl	8014380 <_Balloc>
 801368a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801368c:	9001      	str	r0, [sp, #4]
 801368e:	4602      	mov	r2, r0
 8013690:	2800      	cmp	r0, #0
 8013692:	d149      	bne.n	8013728 <_dtoa_r+0x2f8>
 8013694:	4b23      	ldr	r3, [pc, #140]	; (8013724 <_dtoa_r+0x2f4>)
 8013696:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801369a:	e6e1      	b.n	8013460 <_dtoa_r+0x30>
 801369c:	2201      	movs	r2, #1
 801369e:	e7dd      	b.n	801365c <_dtoa_r+0x22c>
 80136a0:	2200      	movs	r2, #0
 80136a2:	9207      	str	r2, [sp, #28]
 80136a4:	9a08      	ldr	r2, [sp, #32]
 80136a6:	eb0b 0a02 	add.w	sl, fp, r2
 80136aa:	f10a 0901 	add.w	r9, sl, #1
 80136ae:	464a      	mov	r2, r9
 80136b0:	2a01      	cmp	r2, #1
 80136b2:	bfb8      	it	lt
 80136b4:	2201      	movlt	r2, #1
 80136b6:	e7db      	b.n	8013670 <_dtoa_r+0x240>
 80136b8:	2201      	movs	r2, #1
 80136ba:	e7f2      	b.n	80136a2 <_dtoa_r+0x272>
 80136bc:	2401      	movs	r4, #1
 80136be:	2200      	movs	r2, #0
 80136c0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80136c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80136c8:	2100      	movs	r1, #0
 80136ca:	46d1      	mov	r9, sl
 80136cc:	2212      	movs	r2, #18
 80136ce:	9108      	str	r1, [sp, #32]
 80136d0:	e7ce      	b.n	8013670 <_dtoa_r+0x240>
 80136d2:	2201      	movs	r2, #1
 80136d4:	9207      	str	r2, [sp, #28]
 80136d6:	e7f5      	b.n	80136c4 <_dtoa_r+0x294>
 80136d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80136dc:	46d1      	mov	r9, sl
 80136de:	4652      	mov	r2, sl
 80136e0:	e7c6      	b.n	8013670 <_dtoa_r+0x240>
 80136e2:	3101      	adds	r1, #1
 80136e4:	6079      	str	r1, [r7, #4]
 80136e6:	0040      	lsls	r0, r0, #1
 80136e8:	e7c6      	b.n	8013678 <_dtoa_r+0x248>
 80136ea:	bf00      	nop
 80136ec:	f3af 8000 	nop.w
 80136f0:	636f4361 	.word	0x636f4361
 80136f4:	3fd287a7 	.word	0x3fd287a7
 80136f8:	8b60c8b3 	.word	0x8b60c8b3
 80136fc:	3fc68a28 	.word	0x3fc68a28
 8013700:	509f79fb 	.word	0x509f79fb
 8013704:	3fd34413 	.word	0x3fd34413
 8013708:	08016dad 	.word	0x08016dad
 801370c:	08016dc4 	.word	0x08016dc4
 8013710:	7ff00000 	.word	0x7ff00000
 8013714:	08016da9 	.word	0x08016da9
 8013718:	08016da0 	.word	0x08016da0
 801371c:	08016d7d 	.word	0x08016d7d
 8013720:	08016f18 	.word	0x08016f18
 8013724:	08016e1f 	.word	0x08016e1f
 8013728:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801372a:	9901      	ldr	r1, [sp, #4]
 801372c:	6011      	str	r1, [r2, #0]
 801372e:	f1b9 0f0e 	cmp.w	r9, #14
 8013732:	d86c      	bhi.n	801380e <_dtoa_r+0x3de>
 8013734:	2c00      	cmp	r4, #0
 8013736:	d06a      	beq.n	801380e <_dtoa_r+0x3de>
 8013738:	f1bb 0f00 	cmp.w	fp, #0
 801373c:	f340 80a0 	ble.w	8013880 <_dtoa_r+0x450>
 8013740:	49c1      	ldr	r1, [pc, #772]	; (8013a48 <_dtoa_r+0x618>)
 8013742:	f00b 020f 	and.w	r2, fp, #15
 8013746:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801374a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801374e:	ed92 7b00 	vldr	d7, [r2]
 8013752:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013756:	f000 8087 	beq.w	8013868 <_dtoa_r+0x438>
 801375a:	4abc      	ldr	r2, [pc, #752]	; (8013a4c <_dtoa_r+0x61c>)
 801375c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013760:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013764:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013768:	f001 010f 	and.w	r1, r1, #15
 801376c:	2203      	movs	r2, #3
 801376e:	48b7      	ldr	r0, [pc, #732]	; (8013a4c <_dtoa_r+0x61c>)
 8013770:	2900      	cmp	r1, #0
 8013772:	d17b      	bne.n	801386c <_dtoa_r+0x43c>
 8013774:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013778:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801377c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013782:	2900      	cmp	r1, #0
 8013784:	f000 80a2 	beq.w	80138cc <_dtoa_r+0x49c>
 8013788:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801378c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013790:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	f140 8098 	bpl.w	80138cc <_dtoa_r+0x49c>
 801379c:	f1b9 0f00 	cmp.w	r9, #0
 80137a0:	f000 8094 	beq.w	80138cc <_dtoa_r+0x49c>
 80137a4:	f1ba 0f00 	cmp.w	sl, #0
 80137a8:	dd2f      	ble.n	801380a <_dtoa_r+0x3da>
 80137aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80137ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80137b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137b6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80137ba:	3201      	adds	r2, #1
 80137bc:	4650      	mov	r0, sl
 80137be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80137c2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80137c6:	ee07 2a90 	vmov	s15, r2
 80137ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80137ce:	eea7 5b06 	vfma.f64	d5, d7, d6
 80137d2:	ee15 4a90 	vmov	r4, s11
 80137d6:	ec52 1b15 	vmov	r1, r2, d5
 80137da:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80137de:	2800      	cmp	r0, #0
 80137e0:	d177      	bne.n	80138d2 <_dtoa_r+0x4a2>
 80137e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80137e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80137ea:	ec42 1b17 	vmov	d7, r1, r2
 80137ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f6:	f300 8263 	bgt.w	8013cc0 <_dtoa_r+0x890>
 80137fa:	eeb1 7b47 	vneg.f64	d7, d7
 80137fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013806:	f100 8258 	bmi.w	8013cba <_dtoa_r+0x88a>
 801380a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801380e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013810:	2a00      	cmp	r2, #0
 8013812:	f2c0 811d 	blt.w	8013a50 <_dtoa_r+0x620>
 8013816:	f1bb 0f0e 	cmp.w	fp, #14
 801381a:	f300 8119 	bgt.w	8013a50 <_dtoa_r+0x620>
 801381e:	4b8a      	ldr	r3, [pc, #552]	; (8013a48 <_dtoa_r+0x618>)
 8013820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013824:	ed93 6b00 	vldr	d6, [r3]
 8013828:	9b08      	ldr	r3, [sp, #32]
 801382a:	2b00      	cmp	r3, #0
 801382c:	f280 80b7 	bge.w	801399e <_dtoa_r+0x56e>
 8013830:	f1b9 0f00 	cmp.w	r9, #0
 8013834:	f300 80b3 	bgt.w	801399e <_dtoa_r+0x56e>
 8013838:	f040 823f 	bne.w	8013cba <_dtoa_r+0x88a>
 801383c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013840:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013850:	464c      	mov	r4, r9
 8013852:	464f      	mov	r7, r9
 8013854:	f280 8215 	bge.w	8013c82 <_dtoa_r+0x852>
 8013858:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801385c:	2331      	movs	r3, #49	; 0x31
 801385e:	f808 3b01 	strb.w	r3, [r8], #1
 8013862:	f10b 0b01 	add.w	fp, fp, #1
 8013866:	e211      	b.n	8013c8c <_dtoa_r+0x85c>
 8013868:	2202      	movs	r2, #2
 801386a:	e780      	b.n	801376e <_dtoa_r+0x33e>
 801386c:	07cc      	lsls	r4, r1, #31
 801386e:	d504      	bpl.n	801387a <_dtoa_r+0x44a>
 8013870:	ed90 6b00 	vldr	d6, [r0]
 8013874:	3201      	adds	r2, #1
 8013876:	ee27 7b06 	vmul.f64	d7, d7, d6
 801387a:	1049      	asrs	r1, r1, #1
 801387c:	3008      	adds	r0, #8
 801387e:	e777      	b.n	8013770 <_dtoa_r+0x340>
 8013880:	d022      	beq.n	80138c8 <_dtoa_r+0x498>
 8013882:	f1cb 0100 	rsb	r1, fp, #0
 8013886:	4a70      	ldr	r2, [pc, #448]	; (8013a48 <_dtoa_r+0x618>)
 8013888:	f001 000f 	and.w	r0, r1, #15
 801388c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013890:	ed92 7b00 	vldr	d7, [r2]
 8013894:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013898:	ed8d 7b02 	vstr	d7, [sp, #8]
 801389c:	486b      	ldr	r0, [pc, #428]	; (8013a4c <_dtoa_r+0x61c>)
 801389e:	1109      	asrs	r1, r1, #4
 80138a0:	2400      	movs	r4, #0
 80138a2:	2202      	movs	r2, #2
 80138a4:	b929      	cbnz	r1, 80138b2 <_dtoa_r+0x482>
 80138a6:	2c00      	cmp	r4, #0
 80138a8:	f43f af6a 	beq.w	8013780 <_dtoa_r+0x350>
 80138ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138b0:	e766      	b.n	8013780 <_dtoa_r+0x350>
 80138b2:	07cf      	lsls	r7, r1, #31
 80138b4:	d505      	bpl.n	80138c2 <_dtoa_r+0x492>
 80138b6:	ed90 6b00 	vldr	d6, [r0]
 80138ba:	3201      	adds	r2, #1
 80138bc:	2401      	movs	r4, #1
 80138be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138c2:	1049      	asrs	r1, r1, #1
 80138c4:	3008      	adds	r0, #8
 80138c6:	e7ed      	b.n	80138a4 <_dtoa_r+0x474>
 80138c8:	2202      	movs	r2, #2
 80138ca:	e759      	b.n	8013780 <_dtoa_r+0x350>
 80138cc:	465f      	mov	r7, fp
 80138ce:	4648      	mov	r0, r9
 80138d0:	e775      	b.n	80137be <_dtoa_r+0x38e>
 80138d2:	ec42 1b17 	vmov	d7, r1, r2
 80138d6:	4a5c      	ldr	r2, [pc, #368]	; (8013a48 <_dtoa_r+0x618>)
 80138d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80138dc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80138e0:	9a01      	ldr	r2, [sp, #4]
 80138e2:	1814      	adds	r4, r2, r0
 80138e4:	9a07      	ldr	r2, [sp, #28]
 80138e6:	b352      	cbz	r2, 801393e <_dtoa_r+0x50e>
 80138e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80138ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80138f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80138f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80138f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80138fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013900:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013904:	ee14 2a90 	vmov	r2, s9
 8013908:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801390c:	3230      	adds	r2, #48	; 0x30
 801390e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013912:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391a:	f808 2b01 	strb.w	r2, [r8], #1
 801391e:	d439      	bmi.n	8013994 <_dtoa_r+0x564>
 8013920:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013924:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801392c:	d472      	bmi.n	8013a14 <_dtoa_r+0x5e4>
 801392e:	45a0      	cmp	r8, r4
 8013930:	f43f af6b 	beq.w	801380a <_dtoa_r+0x3da>
 8013934:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013938:	ee26 6b03 	vmul.f64	d6, d6, d3
 801393c:	e7e0      	b.n	8013900 <_dtoa_r+0x4d0>
 801393e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013942:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013946:	4621      	mov	r1, r4
 8013948:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801394c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013950:	ee14 2a90 	vmov	r2, s9
 8013954:	3230      	adds	r2, #48	; 0x30
 8013956:	f808 2b01 	strb.w	r2, [r8], #1
 801395a:	45a0      	cmp	r8, r4
 801395c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013960:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013964:	d118      	bne.n	8013998 <_dtoa_r+0x568>
 8013966:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801396a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801396e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013976:	dc4d      	bgt.n	8013a14 <_dtoa_r+0x5e4>
 8013978:	ee35 7b47 	vsub.f64	d7, d5, d7
 801397c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013984:	f57f af41 	bpl.w	801380a <_dtoa_r+0x3da>
 8013988:	4688      	mov	r8, r1
 801398a:	3901      	subs	r1, #1
 801398c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013990:	2b30      	cmp	r3, #48	; 0x30
 8013992:	d0f9      	beq.n	8013988 <_dtoa_r+0x558>
 8013994:	46bb      	mov	fp, r7
 8013996:	e02a      	b.n	80139ee <_dtoa_r+0x5be>
 8013998:	ee26 6b03 	vmul.f64	d6, d6, d3
 801399c:	e7d6      	b.n	801394c <_dtoa_r+0x51c>
 801399e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80139a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80139aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80139ae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80139b2:	ee15 3a10 	vmov	r3, s10
 80139b6:	3330      	adds	r3, #48	; 0x30
 80139b8:	f808 3b01 	strb.w	r3, [r8], #1
 80139bc:	9b01      	ldr	r3, [sp, #4]
 80139be:	eba8 0303 	sub.w	r3, r8, r3
 80139c2:	4599      	cmp	r9, r3
 80139c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80139c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80139cc:	d133      	bne.n	8013a36 <_dtoa_r+0x606>
 80139ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80139d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80139d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139da:	dc1a      	bgt.n	8013a12 <_dtoa_r+0x5e2>
 80139dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80139e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e4:	d103      	bne.n	80139ee <_dtoa_r+0x5be>
 80139e6:	ee15 3a10 	vmov	r3, s10
 80139ea:	07d9      	lsls	r1, r3, #31
 80139ec:	d411      	bmi.n	8013a12 <_dtoa_r+0x5e2>
 80139ee:	4629      	mov	r1, r5
 80139f0:	4630      	mov	r0, r6
 80139f2:	f000 fd05 	bl	8014400 <_Bfree>
 80139f6:	2300      	movs	r3, #0
 80139f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139fa:	f888 3000 	strb.w	r3, [r8]
 80139fe:	f10b 0301 	add.w	r3, fp, #1
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	f43f ad61 	beq.w	80134ce <_dtoa_r+0x9e>
 8013a0c:	f8c3 8000 	str.w	r8, [r3]
 8013a10:	e55d      	b.n	80134ce <_dtoa_r+0x9e>
 8013a12:	465f      	mov	r7, fp
 8013a14:	4643      	mov	r3, r8
 8013a16:	4698      	mov	r8, r3
 8013a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a1c:	2a39      	cmp	r2, #57	; 0x39
 8013a1e:	d106      	bne.n	8013a2e <_dtoa_r+0x5fe>
 8013a20:	9a01      	ldr	r2, [sp, #4]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d1f7      	bne.n	8013a16 <_dtoa_r+0x5e6>
 8013a26:	9901      	ldr	r1, [sp, #4]
 8013a28:	2230      	movs	r2, #48	; 0x30
 8013a2a:	3701      	adds	r7, #1
 8013a2c:	700a      	strb	r2, [r1, #0]
 8013a2e:	781a      	ldrb	r2, [r3, #0]
 8013a30:	3201      	adds	r2, #1
 8013a32:	701a      	strb	r2, [r3, #0]
 8013a34:	e7ae      	b.n	8013994 <_dtoa_r+0x564>
 8013a36:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013a3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a42:	d1b2      	bne.n	80139aa <_dtoa_r+0x57a>
 8013a44:	e7d3      	b.n	80139ee <_dtoa_r+0x5be>
 8013a46:	bf00      	nop
 8013a48:	08016f18 	.word	0x08016f18
 8013a4c:	08016ef0 	.word	0x08016ef0
 8013a50:	9907      	ldr	r1, [sp, #28]
 8013a52:	2900      	cmp	r1, #0
 8013a54:	f000 80d0 	beq.w	8013bf8 <_dtoa_r+0x7c8>
 8013a58:	9906      	ldr	r1, [sp, #24]
 8013a5a:	2901      	cmp	r1, #1
 8013a5c:	f300 80b4 	bgt.w	8013bc8 <_dtoa_r+0x798>
 8013a60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a62:	2900      	cmp	r1, #0
 8013a64:	f000 80ac 	beq.w	8013bc0 <_dtoa_r+0x790>
 8013a68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013a70:	461c      	mov	r4, r3
 8013a72:	930a      	str	r3, [sp, #40]	; 0x28
 8013a74:	9b04      	ldr	r3, [sp, #16]
 8013a76:	4413      	add	r3, r2
 8013a78:	9304      	str	r3, [sp, #16]
 8013a7a:	9b05      	ldr	r3, [sp, #20]
 8013a7c:	2101      	movs	r1, #1
 8013a7e:	4413      	add	r3, r2
 8013a80:	4630      	mov	r0, r6
 8013a82:	9305      	str	r3, [sp, #20]
 8013a84:	f000 fd74 	bl	8014570 <__i2b>
 8013a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a8a:	4607      	mov	r7, r0
 8013a8c:	f1b8 0f00 	cmp.w	r8, #0
 8013a90:	dd0d      	ble.n	8013aae <_dtoa_r+0x67e>
 8013a92:	9a05      	ldr	r2, [sp, #20]
 8013a94:	2a00      	cmp	r2, #0
 8013a96:	dd0a      	ble.n	8013aae <_dtoa_r+0x67e>
 8013a98:	4542      	cmp	r2, r8
 8013a9a:	9904      	ldr	r1, [sp, #16]
 8013a9c:	bfa8      	it	ge
 8013a9e:	4642      	movge	r2, r8
 8013aa0:	1a89      	subs	r1, r1, r2
 8013aa2:	9104      	str	r1, [sp, #16]
 8013aa4:	9905      	ldr	r1, [sp, #20]
 8013aa6:	eba8 0802 	sub.w	r8, r8, r2
 8013aaa:	1a8a      	subs	r2, r1, r2
 8013aac:	9205      	str	r2, [sp, #20]
 8013aae:	b303      	cbz	r3, 8013af2 <_dtoa_r+0x6c2>
 8013ab0:	9a07      	ldr	r2, [sp, #28]
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	f000 80a5 	beq.w	8013c02 <_dtoa_r+0x7d2>
 8013ab8:	2c00      	cmp	r4, #0
 8013aba:	dd13      	ble.n	8013ae4 <_dtoa_r+0x6b4>
 8013abc:	4639      	mov	r1, r7
 8013abe:	4622      	mov	r2, r4
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8013ac4:	f000 fe14 	bl	80146f0 <__pow5mult>
 8013ac8:	462a      	mov	r2, r5
 8013aca:	4601      	mov	r1, r0
 8013acc:	4607      	mov	r7, r0
 8013ace:	4630      	mov	r0, r6
 8013ad0:	f000 fd64 	bl	801459c <__multiply>
 8013ad4:	4629      	mov	r1, r5
 8013ad6:	900a      	str	r0, [sp, #40]	; 0x28
 8013ad8:	4630      	mov	r0, r6
 8013ada:	f000 fc91 	bl	8014400 <_Bfree>
 8013ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ae2:	4615      	mov	r5, r2
 8013ae4:	1b1a      	subs	r2, r3, r4
 8013ae6:	d004      	beq.n	8013af2 <_dtoa_r+0x6c2>
 8013ae8:	4629      	mov	r1, r5
 8013aea:	4630      	mov	r0, r6
 8013aec:	f000 fe00 	bl	80146f0 <__pow5mult>
 8013af0:	4605      	mov	r5, r0
 8013af2:	2101      	movs	r1, #1
 8013af4:	4630      	mov	r0, r6
 8013af6:	f000 fd3b 	bl	8014570 <__i2b>
 8013afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	4604      	mov	r4, r0
 8013b00:	f340 8081 	ble.w	8013c06 <_dtoa_r+0x7d6>
 8013b04:	461a      	mov	r2, r3
 8013b06:	4601      	mov	r1, r0
 8013b08:	4630      	mov	r0, r6
 8013b0a:	f000 fdf1 	bl	80146f0 <__pow5mult>
 8013b0e:	9b06      	ldr	r3, [sp, #24]
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	4604      	mov	r4, r0
 8013b14:	dd7a      	ble.n	8013c0c <_dtoa_r+0x7dc>
 8013b16:	2300      	movs	r3, #0
 8013b18:	930a      	str	r3, [sp, #40]	; 0x28
 8013b1a:	6922      	ldr	r2, [r4, #16]
 8013b1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013b20:	6910      	ldr	r0, [r2, #16]
 8013b22:	f000 fcd5 	bl	80144d0 <__hi0bits>
 8013b26:	f1c0 0020 	rsb	r0, r0, #32
 8013b2a:	9b05      	ldr	r3, [sp, #20]
 8013b2c:	4418      	add	r0, r3
 8013b2e:	f010 001f 	ands.w	r0, r0, #31
 8013b32:	f000 808c 	beq.w	8013c4e <_dtoa_r+0x81e>
 8013b36:	f1c0 0220 	rsb	r2, r0, #32
 8013b3a:	2a04      	cmp	r2, #4
 8013b3c:	f340 8085 	ble.w	8013c4a <_dtoa_r+0x81a>
 8013b40:	f1c0 001c 	rsb	r0, r0, #28
 8013b44:	9b04      	ldr	r3, [sp, #16]
 8013b46:	4403      	add	r3, r0
 8013b48:	9304      	str	r3, [sp, #16]
 8013b4a:	9b05      	ldr	r3, [sp, #20]
 8013b4c:	4403      	add	r3, r0
 8013b4e:	4480      	add	r8, r0
 8013b50:	9305      	str	r3, [sp, #20]
 8013b52:	9b04      	ldr	r3, [sp, #16]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	dd05      	ble.n	8013b64 <_dtoa_r+0x734>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f000 fe21 	bl	80147a4 <__lshift>
 8013b62:	4605      	mov	r5, r0
 8013b64:	9b05      	ldr	r3, [sp, #20]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	dd05      	ble.n	8013b76 <_dtoa_r+0x746>
 8013b6a:	4621      	mov	r1, r4
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f000 fe18 	bl	80147a4 <__lshift>
 8013b74:	4604      	mov	r4, r0
 8013b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d06a      	beq.n	8013c52 <_dtoa_r+0x822>
 8013b7c:	4621      	mov	r1, r4
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f000 fe80 	bl	8014884 <__mcmp>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	da64      	bge.n	8013c52 <_dtoa_r+0x822>
 8013b88:	2300      	movs	r3, #0
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	220a      	movs	r2, #10
 8013b8e:	4630      	mov	r0, r6
 8013b90:	f000 fc58 	bl	8014444 <__multadd>
 8013b94:	9b07      	ldr	r3, [sp, #28]
 8013b96:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f000 8191 	beq.w	8013ec4 <_dtoa_r+0xa94>
 8013ba2:	4639      	mov	r1, r7
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	220a      	movs	r2, #10
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f000 fc4b 	bl	8014444 <__multadd>
 8013bae:	f1ba 0f00 	cmp.w	sl, #0
 8013bb2:	4607      	mov	r7, r0
 8013bb4:	f300 808d 	bgt.w	8013cd2 <_dtoa_r+0x8a2>
 8013bb8:	9b06      	ldr	r3, [sp, #24]
 8013bba:	2b02      	cmp	r3, #2
 8013bbc:	dc50      	bgt.n	8013c60 <_dtoa_r+0x830>
 8013bbe:	e088      	b.n	8013cd2 <_dtoa_r+0x8a2>
 8013bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013bc6:	e751      	b.n	8013a6c <_dtoa_r+0x63c>
 8013bc8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8013bcc:	42a3      	cmp	r3, r4
 8013bce:	bfbf      	itttt	lt
 8013bd0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013bd2:	1ae3      	sublt	r3, r4, r3
 8013bd4:	18d2      	addlt	r2, r2, r3
 8013bd6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013bd8:	bfb6      	itet	lt
 8013bda:	4623      	movlt	r3, r4
 8013bdc:	1b1c      	subge	r4, r3, r4
 8013bde:	2400      	movlt	r4, #0
 8013be0:	f1b9 0f00 	cmp.w	r9, #0
 8013be4:	bfb5      	itete	lt
 8013be6:	9a04      	ldrlt	r2, [sp, #16]
 8013be8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013bec:	eba2 0809 	sublt.w	r8, r2, r9
 8013bf0:	464a      	movge	r2, r9
 8013bf2:	bfb8      	it	lt
 8013bf4:	2200      	movlt	r2, #0
 8013bf6:	e73c      	b.n	8013a72 <_dtoa_r+0x642>
 8013bf8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013bfc:	9f07      	ldr	r7, [sp, #28]
 8013bfe:	461c      	mov	r4, r3
 8013c00:	e744      	b.n	8013a8c <_dtoa_r+0x65c>
 8013c02:	461a      	mov	r2, r3
 8013c04:	e770      	b.n	8013ae8 <_dtoa_r+0x6b8>
 8013c06:	9b06      	ldr	r3, [sp, #24]
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	dc18      	bgt.n	8013c3e <_dtoa_r+0x80e>
 8013c0c:	9b02      	ldr	r3, [sp, #8]
 8013c0e:	b9b3      	cbnz	r3, 8013c3e <_dtoa_r+0x80e>
 8013c10:	9b03      	ldr	r3, [sp, #12]
 8013c12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013c16:	b9a2      	cbnz	r2, 8013c42 <_dtoa_r+0x812>
 8013c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013c1c:	0d12      	lsrs	r2, r2, #20
 8013c1e:	0512      	lsls	r2, r2, #20
 8013c20:	b18a      	cbz	r2, 8013c46 <_dtoa_r+0x816>
 8013c22:	9b04      	ldr	r3, [sp, #16]
 8013c24:	3301      	adds	r3, #1
 8013c26:	9304      	str	r3, [sp, #16]
 8013c28:	9b05      	ldr	r3, [sp, #20]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	9305      	str	r3, [sp, #20]
 8013c2e:	2301      	movs	r3, #1
 8013c30:	930a      	str	r3, [sp, #40]	; 0x28
 8013c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	f47f af70 	bne.w	8013b1a <_dtoa_r+0x6ea>
 8013c3a:	2001      	movs	r0, #1
 8013c3c:	e775      	b.n	8013b2a <_dtoa_r+0x6fa>
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e7f6      	b.n	8013c30 <_dtoa_r+0x800>
 8013c42:	9b02      	ldr	r3, [sp, #8]
 8013c44:	e7f4      	b.n	8013c30 <_dtoa_r+0x800>
 8013c46:	920a      	str	r2, [sp, #40]	; 0x28
 8013c48:	e7f3      	b.n	8013c32 <_dtoa_r+0x802>
 8013c4a:	d082      	beq.n	8013b52 <_dtoa_r+0x722>
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	301c      	adds	r0, #28
 8013c50:	e778      	b.n	8013b44 <_dtoa_r+0x714>
 8013c52:	f1b9 0f00 	cmp.w	r9, #0
 8013c56:	dc37      	bgt.n	8013cc8 <_dtoa_r+0x898>
 8013c58:	9b06      	ldr	r3, [sp, #24]
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	dd34      	ble.n	8013cc8 <_dtoa_r+0x898>
 8013c5e:	46ca      	mov	sl, r9
 8013c60:	f1ba 0f00 	cmp.w	sl, #0
 8013c64:	d10d      	bne.n	8013c82 <_dtoa_r+0x852>
 8013c66:	4621      	mov	r1, r4
 8013c68:	4653      	mov	r3, sl
 8013c6a:	2205      	movs	r2, #5
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f000 fbe9 	bl	8014444 <__multadd>
 8013c72:	4601      	mov	r1, r0
 8013c74:	4604      	mov	r4, r0
 8013c76:	4628      	mov	r0, r5
 8013c78:	f000 fe04 	bl	8014884 <__mcmp>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	f73f adeb 	bgt.w	8013858 <_dtoa_r+0x428>
 8013c82:	9b08      	ldr	r3, [sp, #32]
 8013c84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013c88:	ea6f 0b03 	mvn.w	fp, r3
 8013c8c:	f04f 0900 	mov.w	r9, #0
 8013c90:	4621      	mov	r1, r4
 8013c92:	4630      	mov	r0, r6
 8013c94:	f000 fbb4 	bl	8014400 <_Bfree>
 8013c98:	2f00      	cmp	r7, #0
 8013c9a:	f43f aea8 	beq.w	80139ee <_dtoa_r+0x5be>
 8013c9e:	f1b9 0f00 	cmp.w	r9, #0
 8013ca2:	d005      	beq.n	8013cb0 <_dtoa_r+0x880>
 8013ca4:	45b9      	cmp	r9, r7
 8013ca6:	d003      	beq.n	8013cb0 <_dtoa_r+0x880>
 8013ca8:	4649      	mov	r1, r9
 8013caa:	4630      	mov	r0, r6
 8013cac:	f000 fba8 	bl	8014400 <_Bfree>
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f000 fba4 	bl	8014400 <_Bfree>
 8013cb8:	e699      	b.n	80139ee <_dtoa_r+0x5be>
 8013cba:	2400      	movs	r4, #0
 8013cbc:	4627      	mov	r7, r4
 8013cbe:	e7e0      	b.n	8013c82 <_dtoa_r+0x852>
 8013cc0:	46bb      	mov	fp, r7
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	4607      	mov	r7, r0
 8013cc6:	e5c7      	b.n	8013858 <_dtoa_r+0x428>
 8013cc8:	9b07      	ldr	r3, [sp, #28]
 8013cca:	46ca      	mov	sl, r9
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f000 8100 	beq.w	8013ed2 <_dtoa_r+0xaa2>
 8013cd2:	f1b8 0f00 	cmp.w	r8, #0
 8013cd6:	dd05      	ble.n	8013ce4 <_dtoa_r+0x8b4>
 8013cd8:	4639      	mov	r1, r7
 8013cda:	4642      	mov	r2, r8
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f000 fd61 	bl	80147a4 <__lshift>
 8013ce2:	4607      	mov	r7, r0
 8013ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d05d      	beq.n	8013da6 <_dtoa_r+0x976>
 8013cea:	6879      	ldr	r1, [r7, #4]
 8013cec:	4630      	mov	r0, r6
 8013cee:	f000 fb47 	bl	8014380 <_Balloc>
 8013cf2:	4680      	mov	r8, r0
 8013cf4:	b928      	cbnz	r0, 8013d02 <_dtoa_r+0x8d2>
 8013cf6:	4b82      	ldr	r3, [pc, #520]	; (8013f00 <_dtoa_r+0xad0>)
 8013cf8:	4602      	mov	r2, r0
 8013cfa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013cfe:	f7ff bbaf 	b.w	8013460 <_dtoa_r+0x30>
 8013d02:	693a      	ldr	r2, [r7, #16]
 8013d04:	3202      	adds	r2, #2
 8013d06:	0092      	lsls	r2, r2, #2
 8013d08:	f107 010c 	add.w	r1, r7, #12
 8013d0c:	300c      	adds	r0, #12
 8013d0e:	f000 fb29 	bl	8014364 <memcpy>
 8013d12:	2201      	movs	r2, #1
 8013d14:	4641      	mov	r1, r8
 8013d16:	4630      	mov	r0, r6
 8013d18:	f000 fd44 	bl	80147a4 <__lshift>
 8013d1c:	9b01      	ldr	r3, [sp, #4]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	9304      	str	r3, [sp, #16]
 8013d22:	9b01      	ldr	r3, [sp, #4]
 8013d24:	4453      	add	r3, sl
 8013d26:	9308      	str	r3, [sp, #32]
 8013d28:	9b02      	ldr	r3, [sp, #8]
 8013d2a:	f003 0301 	and.w	r3, r3, #1
 8013d2e:	46b9      	mov	r9, r7
 8013d30:	9307      	str	r3, [sp, #28]
 8013d32:	4607      	mov	r7, r0
 8013d34:	9b04      	ldr	r3, [sp, #16]
 8013d36:	4621      	mov	r1, r4
 8013d38:	3b01      	subs	r3, #1
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	9302      	str	r3, [sp, #8]
 8013d3e:	f7ff faeb 	bl	8013318 <quorem>
 8013d42:	4603      	mov	r3, r0
 8013d44:	3330      	adds	r3, #48	; 0x30
 8013d46:	9005      	str	r0, [sp, #20]
 8013d48:	4649      	mov	r1, r9
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d4e:	f000 fd99 	bl	8014884 <__mcmp>
 8013d52:	463a      	mov	r2, r7
 8013d54:	4682      	mov	sl, r0
 8013d56:	4621      	mov	r1, r4
 8013d58:	4630      	mov	r0, r6
 8013d5a:	f000 fdaf 	bl	80148bc <__mdiff>
 8013d5e:	68c2      	ldr	r2, [r0, #12]
 8013d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d62:	4680      	mov	r8, r0
 8013d64:	bb0a      	cbnz	r2, 8013daa <_dtoa_r+0x97a>
 8013d66:	4601      	mov	r1, r0
 8013d68:	4628      	mov	r0, r5
 8013d6a:	f000 fd8b 	bl	8014884 <__mcmp>
 8013d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d70:	4602      	mov	r2, r0
 8013d72:	4641      	mov	r1, r8
 8013d74:	4630      	mov	r0, r6
 8013d76:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013d7a:	f000 fb41 	bl	8014400 <_Bfree>
 8013d7e:	9b06      	ldr	r3, [sp, #24]
 8013d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d82:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013d86:	ea43 0102 	orr.w	r1, r3, r2
 8013d8a:	9b07      	ldr	r3, [sp, #28]
 8013d8c:	430b      	orrs	r3, r1
 8013d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d90:	d10d      	bne.n	8013dae <_dtoa_r+0x97e>
 8013d92:	2b39      	cmp	r3, #57	; 0x39
 8013d94:	d029      	beq.n	8013dea <_dtoa_r+0x9ba>
 8013d96:	f1ba 0f00 	cmp.w	sl, #0
 8013d9a:	dd01      	ble.n	8013da0 <_dtoa_r+0x970>
 8013d9c:	9b05      	ldr	r3, [sp, #20]
 8013d9e:	3331      	adds	r3, #49	; 0x31
 8013da0:	9a02      	ldr	r2, [sp, #8]
 8013da2:	7013      	strb	r3, [r2, #0]
 8013da4:	e774      	b.n	8013c90 <_dtoa_r+0x860>
 8013da6:	4638      	mov	r0, r7
 8013da8:	e7b8      	b.n	8013d1c <_dtoa_r+0x8ec>
 8013daa:	2201      	movs	r2, #1
 8013dac:	e7e1      	b.n	8013d72 <_dtoa_r+0x942>
 8013dae:	f1ba 0f00 	cmp.w	sl, #0
 8013db2:	db06      	blt.n	8013dc2 <_dtoa_r+0x992>
 8013db4:	9906      	ldr	r1, [sp, #24]
 8013db6:	ea41 0a0a 	orr.w	sl, r1, sl
 8013dba:	9907      	ldr	r1, [sp, #28]
 8013dbc:	ea5a 0101 	orrs.w	r1, sl, r1
 8013dc0:	d120      	bne.n	8013e04 <_dtoa_r+0x9d4>
 8013dc2:	2a00      	cmp	r2, #0
 8013dc4:	ddec      	ble.n	8013da0 <_dtoa_r+0x970>
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	2201      	movs	r2, #1
 8013dca:	4630      	mov	r0, r6
 8013dcc:	9304      	str	r3, [sp, #16]
 8013dce:	f000 fce9 	bl	80147a4 <__lshift>
 8013dd2:	4621      	mov	r1, r4
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	f000 fd55 	bl	8014884 <__mcmp>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	9b04      	ldr	r3, [sp, #16]
 8013dde:	dc02      	bgt.n	8013de6 <_dtoa_r+0x9b6>
 8013de0:	d1de      	bne.n	8013da0 <_dtoa_r+0x970>
 8013de2:	07da      	lsls	r2, r3, #31
 8013de4:	d5dc      	bpl.n	8013da0 <_dtoa_r+0x970>
 8013de6:	2b39      	cmp	r3, #57	; 0x39
 8013de8:	d1d8      	bne.n	8013d9c <_dtoa_r+0x96c>
 8013dea:	9a02      	ldr	r2, [sp, #8]
 8013dec:	2339      	movs	r3, #57	; 0x39
 8013dee:	7013      	strb	r3, [r2, #0]
 8013df0:	4643      	mov	r3, r8
 8013df2:	4698      	mov	r8, r3
 8013df4:	3b01      	subs	r3, #1
 8013df6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013dfa:	2a39      	cmp	r2, #57	; 0x39
 8013dfc:	d051      	beq.n	8013ea2 <_dtoa_r+0xa72>
 8013dfe:	3201      	adds	r2, #1
 8013e00:	701a      	strb	r2, [r3, #0]
 8013e02:	e745      	b.n	8013c90 <_dtoa_r+0x860>
 8013e04:	2a00      	cmp	r2, #0
 8013e06:	dd03      	ble.n	8013e10 <_dtoa_r+0x9e0>
 8013e08:	2b39      	cmp	r3, #57	; 0x39
 8013e0a:	d0ee      	beq.n	8013dea <_dtoa_r+0x9ba>
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	e7c7      	b.n	8013da0 <_dtoa_r+0x970>
 8013e10:	9a04      	ldr	r2, [sp, #16]
 8013e12:	9908      	ldr	r1, [sp, #32]
 8013e14:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013e18:	428a      	cmp	r2, r1
 8013e1a:	d02b      	beq.n	8013e74 <_dtoa_r+0xa44>
 8013e1c:	4629      	mov	r1, r5
 8013e1e:	2300      	movs	r3, #0
 8013e20:	220a      	movs	r2, #10
 8013e22:	4630      	mov	r0, r6
 8013e24:	f000 fb0e 	bl	8014444 <__multadd>
 8013e28:	45b9      	cmp	r9, r7
 8013e2a:	4605      	mov	r5, r0
 8013e2c:	f04f 0300 	mov.w	r3, #0
 8013e30:	f04f 020a 	mov.w	r2, #10
 8013e34:	4649      	mov	r1, r9
 8013e36:	4630      	mov	r0, r6
 8013e38:	d107      	bne.n	8013e4a <_dtoa_r+0xa1a>
 8013e3a:	f000 fb03 	bl	8014444 <__multadd>
 8013e3e:	4681      	mov	r9, r0
 8013e40:	4607      	mov	r7, r0
 8013e42:	9b04      	ldr	r3, [sp, #16]
 8013e44:	3301      	adds	r3, #1
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	e774      	b.n	8013d34 <_dtoa_r+0x904>
 8013e4a:	f000 fafb 	bl	8014444 <__multadd>
 8013e4e:	4639      	mov	r1, r7
 8013e50:	4681      	mov	r9, r0
 8013e52:	2300      	movs	r3, #0
 8013e54:	220a      	movs	r2, #10
 8013e56:	4630      	mov	r0, r6
 8013e58:	f000 faf4 	bl	8014444 <__multadd>
 8013e5c:	4607      	mov	r7, r0
 8013e5e:	e7f0      	b.n	8013e42 <_dtoa_r+0xa12>
 8013e60:	f1ba 0f00 	cmp.w	sl, #0
 8013e64:	9a01      	ldr	r2, [sp, #4]
 8013e66:	bfcc      	ite	gt
 8013e68:	46d0      	movgt	r8, sl
 8013e6a:	f04f 0801 	movle.w	r8, #1
 8013e6e:	4490      	add	r8, r2
 8013e70:	f04f 0900 	mov.w	r9, #0
 8013e74:	4629      	mov	r1, r5
 8013e76:	2201      	movs	r2, #1
 8013e78:	4630      	mov	r0, r6
 8013e7a:	9302      	str	r3, [sp, #8]
 8013e7c:	f000 fc92 	bl	80147a4 <__lshift>
 8013e80:	4621      	mov	r1, r4
 8013e82:	4605      	mov	r5, r0
 8013e84:	f000 fcfe 	bl	8014884 <__mcmp>
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	dcb1      	bgt.n	8013df0 <_dtoa_r+0x9c0>
 8013e8c:	d102      	bne.n	8013e94 <_dtoa_r+0xa64>
 8013e8e:	9b02      	ldr	r3, [sp, #8]
 8013e90:	07db      	lsls	r3, r3, #31
 8013e92:	d4ad      	bmi.n	8013df0 <_dtoa_r+0x9c0>
 8013e94:	4643      	mov	r3, r8
 8013e96:	4698      	mov	r8, r3
 8013e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e9c:	2a30      	cmp	r2, #48	; 0x30
 8013e9e:	d0fa      	beq.n	8013e96 <_dtoa_r+0xa66>
 8013ea0:	e6f6      	b.n	8013c90 <_dtoa_r+0x860>
 8013ea2:	9a01      	ldr	r2, [sp, #4]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d1a4      	bne.n	8013df2 <_dtoa_r+0x9c2>
 8013ea8:	f10b 0b01 	add.w	fp, fp, #1
 8013eac:	2331      	movs	r3, #49	; 0x31
 8013eae:	e778      	b.n	8013da2 <_dtoa_r+0x972>
 8013eb0:	4b14      	ldr	r3, [pc, #80]	; (8013f04 <_dtoa_r+0xad4>)
 8013eb2:	f7ff bb27 	b.w	8013504 <_dtoa_r+0xd4>
 8013eb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f47f ab03 	bne.w	80134c4 <_dtoa_r+0x94>
 8013ebe:	4b12      	ldr	r3, [pc, #72]	; (8013f08 <_dtoa_r+0xad8>)
 8013ec0:	f7ff bb20 	b.w	8013504 <_dtoa_r+0xd4>
 8013ec4:	f1ba 0f00 	cmp.w	sl, #0
 8013ec8:	dc03      	bgt.n	8013ed2 <_dtoa_r+0xaa2>
 8013eca:	9b06      	ldr	r3, [sp, #24]
 8013ecc:	2b02      	cmp	r3, #2
 8013ece:	f73f aec7 	bgt.w	8013c60 <_dtoa_r+0x830>
 8013ed2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ed6:	4621      	mov	r1, r4
 8013ed8:	4628      	mov	r0, r5
 8013eda:	f7ff fa1d 	bl	8013318 <quorem>
 8013ede:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013ee2:	f808 3b01 	strb.w	r3, [r8], #1
 8013ee6:	9a01      	ldr	r2, [sp, #4]
 8013ee8:	eba8 0202 	sub.w	r2, r8, r2
 8013eec:	4592      	cmp	sl, r2
 8013eee:	ddb7      	ble.n	8013e60 <_dtoa_r+0xa30>
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	220a      	movs	r2, #10
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	f000 faa4 	bl	8014444 <__multadd>
 8013efc:	4605      	mov	r5, r0
 8013efe:	e7ea      	b.n	8013ed6 <_dtoa_r+0xaa6>
 8013f00:	08016e1f 	.word	0x08016e1f
 8013f04:	08016d7c 	.word	0x08016d7c
 8013f08:	08016da0 	.word	0x08016da0

08013f0c <__sflush_r>:
 8013f0c:	898a      	ldrh	r2, [r1, #12]
 8013f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f12:	4605      	mov	r5, r0
 8013f14:	0710      	lsls	r0, r2, #28
 8013f16:	460c      	mov	r4, r1
 8013f18:	d458      	bmi.n	8013fcc <__sflush_r+0xc0>
 8013f1a:	684b      	ldr	r3, [r1, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	dc05      	bgt.n	8013f2c <__sflush_r+0x20>
 8013f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	dc02      	bgt.n	8013f2c <__sflush_r+0x20>
 8013f26:	2000      	movs	r0, #0
 8013f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	d0f9      	beq.n	8013f26 <__sflush_r+0x1a>
 8013f32:	2300      	movs	r3, #0
 8013f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f38:	682f      	ldr	r7, [r5, #0]
 8013f3a:	602b      	str	r3, [r5, #0]
 8013f3c:	d032      	beq.n	8013fa4 <__sflush_r+0x98>
 8013f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f40:	89a3      	ldrh	r3, [r4, #12]
 8013f42:	075a      	lsls	r2, r3, #29
 8013f44:	d505      	bpl.n	8013f52 <__sflush_r+0x46>
 8013f46:	6863      	ldr	r3, [r4, #4]
 8013f48:	1ac0      	subs	r0, r0, r3
 8013f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f4c:	b10b      	cbz	r3, 8013f52 <__sflush_r+0x46>
 8013f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f50:	1ac0      	subs	r0, r0, r3
 8013f52:	2300      	movs	r3, #0
 8013f54:	4602      	mov	r2, r0
 8013f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f58:	6a21      	ldr	r1, [r4, #32]
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	47b0      	blx	r6
 8013f5e:	1c43      	adds	r3, r0, #1
 8013f60:	89a3      	ldrh	r3, [r4, #12]
 8013f62:	d106      	bne.n	8013f72 <__sflush_r+0x66>
 8013f64:	6829      	ldr	r1, [r5, #0]
 8013f66:	291d      	cmp	r1, #29
 8013f68:	d82c      	bhi.n	8013fc4 <__sflush_r+0xb8>
 8013f6a:	4a2a      	ldr	r2, [pc, #168]	; (8014014 <__sflush_r+0x108>)
 8013f6c:	40ca      	lsrs	r2, r1
 8013f6e:	07d6      	lsls	r6, r2, #31
 8013f70:	d528      	bpl.n	8013fc4 <__sflush_r+0xb8>
 8013f72:	2200      	movs	r2, #0
 8013f74:	6062      	str	r2, [r4, #4]
 8013f76:	04d9      	lsls	r1, r3, #19
 8013f78:	6922      	ldr	r2, [r4, #16]
 8013f7a:	6022      	str	r2, [r4, #0]
 8013f7c:	d504      	bpl.n	8013f88 <__sflush_r+0x7c>
 8013f7e:	1c42      	adds	r2, r0, #1
 8013f80:	d101      	bne.n	8013f86 <__sflush_r+0x7a>
 8013f82:	682b      	ldr	r3, [r5, #0]
 8013f84:	b903      	cbnz	r3, 8013f88 <__sflush_r+0x7c>
 8013f86:	6560      	str	r0, [r4, #84]	; 0x54
 8013f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f8a:	602f      	str	r7, [r5, #0]
 8013f8c:	2900      	cmp	r1, #0
 8013f8e:	d0ca      	beq.n	8013f26 <__sflush_r+0x1a>
 8013f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f94:	4299      	cmp	r1, r3
 8013f96:	d002      	beq.n	8013f9e <__sflush_r+0x92>
 8013f98:	4628      	mov	r0, r5
 8013f9a:	f000 fd8b 	bl	8014ab4 <_free_r>
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8013fa2:	e7c1      	b.n	8013f28 <__sflush_r+0x1c>
 8013fa4:	6a21      	ldr	r1, [r4, #32]
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	4628      	mov	r0, r5
 8013faa:	47b0      	blx	r6
 8013fac:	1c41      	adds	r1, r0, #1
 8013fae:	d1c7      	bne.n	8013f40 <__sflush_r+0x34>
 8013fb0:	682b      	ldr	r3, [r5, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d0c4      	beq.n	8013f40 <__sflush_r+0x34>
 8013fb6:	2b1d      	cmp	r3, #29
 8013fb8:	d001      	beq.n	8013fbe <__sflush_r+0xb2>
 8013fba:	2b16      	cmp	r3, #22
 8013fbc:	d101      	bne.n	8013fc2 <__sflush_r+0xb6>
 8013fbe:	602f      	str	r7, [r5, #0]
 8013fc0:	e7b1      	b.n	8013f26 <__sflush_r+0x1a>
 8013fc2:	89a3      	ldrh	r3, [r4, #12]
 8013fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fc8:	81a3      	strh	r3, [r4, #12]
 8013fca:	e7ad      	b.n	8013f28 <__sflush_r+0x1c>
 8013fcc:	690f      	ldr	r7, [r1, #16]
 8013fce:	2f00      	cmp	r7, #0
 8013fd0:	d0a9      	beq.n	8013f26 <__sflush_r+0x1a>
 8013fd2:	0793      	lsls	r3, r2, #30
 8013fd4:	680e      	ldr	r6, [r1, #0]
 8013fd6:	bf08      	it	eq
 8013fd8:	694b      	ldreq	r3, [r1, #20]
 8013fda:	600f      	str	r7, [r1, #0]
 8013fdc:	bf18      	it	ne
 8013fde:	2300      	movne	r3, #0
 8013fe0:	eba6 0807 	sub.w	r8, r6, r7
 8013fe4:	608b      	str	r3, [r1, #8]
 8013fe6:	f1b8 0f00 	cmp.w	r8, #0
 8013fea:	dd9c      	ble.n	8013f26 <__sflush_r+0x1a>
 8013fec:	6a21      	ldr	r1, [r4, #32]
 8013fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ff0:	4643      	mov	r3, r8
 8013ff2:	463a      	mov	r2, r7
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	47b0      	blx	r6
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	dc06      	bgt.n	801400a <__sflush_r+0xfe>
 8013ffc:	89a3      	ldrh	r3, [r4, #12]
 8013ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014002:	81a3      	strh	r3, [r4, #12]
 8014004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014008:	e78e      	b.n	8013f28 <__sflush_r+0x1c>
 801400a:	4407      	add	r7, r0
 801400c:	eba8 0800 	sub.w	r8, r8, r0
 8014010:	e7e9      	b.n	8013fe6 <__sflush_r+0xda>
 8014012:	bf00      	nop
 8014014:	20400001 	.word	0x20400001

08014018 <_fflush_r>:
 8014018:	b538      	push	{r3, r4, r5, lr}
 801401a:	690b      	ldr	r3, [r1, #16]
 801401c:	4605      	mov	r5, r0
 801401e:	460c      	mov	r4, r1
 8014020:	b913      	cbnz	r3, 8014028 <_fflush_r+0x10>
 8014022:	2500      	movs	r5, #0
 8014024:	4628      	mov	r0, r5
 8014026:	bd38      	pop	{r3, r4, r5, pc}
 8014028:	b118      	cbz	r0, 8014032 <_fflush_r+0x1a>
 801402a:	6983      	ldr	r3, [r0, #24]
 801402c:	b90b      	cbnz	r3, 8014032 <_fflush_r+0x1a>
 801402e:	f000 f887 	bl	8014140 <__sinit>
 8014032:	4b14      	ldr	r3, [pc, #80]	; (8014084 <_fflush_r+0x6c>)
 8014034:	429c      	cmp	r4, r3
 8014036:	d11b      	bne.n	8014070 <_fflush_r+0x58>
 8014038:	686c      	ldr	r4, [r5, #4]
 801403a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d0ef      	beq.n	8014022 <_fflush_r+0xa>
 8014042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014044:	07d0      	lsls	r0, r2, #31
 8014046:	d404      	bmi.n	8014052 <_fflush_r+0x3a>
 8014048:	0599      	lsls	r1, r3, #22
 801404a:	d402      	bmi.n	8014052 <_fflush_r+0x3a>
 801404c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801404e:	f000 f91a 	bl	8014286 <__retarget_lock_acquire_recursive>
 8014052:	4628      	mov	r0, r5
 8014054:	4621      	mov	r1, r4
 8014056:	f7ff ff59 	bl	8013f0c <__sflush_r>
 801405a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801405c:	07da      	lsls	r2, r3, #31
 801405e:	4605      	mov	r5, r0
 8014060:	d4e0      	bmi.n	8014024 <_fflush_r+0xc>
 8014062:	89a3      	ldrh	r3, [r4, #12]
 8014064:	059b      	lsls	r3, r3, #22
 8014066:	d4dd      	bmi.n	8014024 <_fflush_r+0xc>
 8014068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801406a:	f000 f90d 	bl	8014288 <__retarget_lock_release_recursive>
 801406e:	e7d9      	b.n	8014024 <_fflush_r+0xc>
 8014070:	4b05      	ldr	r3, [pc, #20]	; (8014088 <_fflush_r+0x70>)
 8014072:	429c      	cmp	r4, r3
 8014074:	d101      	bne.n	801407a <_fflush_r+0x62>
 8014076:	68ac      	ldr	r4, [r5, #8]
 8014078:	e7df      	b.n	801403a <_fflush_r+0x22>
 801407a:	4b04      	ldr	r3, [pc, #16]	; (801408c <_fflush_r+0x74>)
 801407c:	429c      	cmp	r4, r3
 801407e:	bf08      	it	eq
 8014080:	68ec      	ldreq	r4, [r5, #12]
 8014082:	e7da      	b.n	801403a <_fflush_r+0x22>
 8014084:	08016e50 	.word	0x08016e50
 8014088:	08016e70 	.word	0x08016e70
 801408c:	08016e30 	.word	0x08016e30

08014090 <std>:
 8014090:	2300      	movs	r3, #0
 8014092:	b510      	push	{r4, lr}
 8014094:	4604      	mov	r4, r0
 8014096:	e9c0 3300 	strd	r3, r3, [r0]
 801409a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801409e:	6083      	str	r3, [r0, #8]
 80140a0:	8181      	strh	r1, [r0, #12]
 80140a2:	6643      	str	r3, [r0, #100]	; 0x64
 80140a4:	81c2      	strh	r2, [r0, #14]
 80140a6:	6183      	str	r3, [r0, #24]
 80140a8:	4619      	mov	r1, r3
 80140aa:	2208      	movs	r2, #8
 80140ac:	305c      	adds	r0, #92	; 0x5c
 80140ae:	f7fe fbb3 	bl	8012818 <memset>
 80140b2:	4b05      	ldr	r3, [pc, #20]	; (80140c8 <std+0x38>)
 80140b4:	6263      	str	r3, [r4, #36]	; 0x24
 80140b6:	4b05      	ldr	r3, [pc, #20]	; (80140cc <std+0x3c>)
 80140b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80140ba:	4b05      	ldr	r3, [pc, #20]	; (80140d0 <std+0x40>)
 80140bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80140be:	4b05      	ldr	r3, [pc, #20]	; (80140d4 <std+0x44>)
 80140c0:	6224      	str	r4, [r4, #32]
 80140c2:	6323      	str	r3, [r4, #48]	; 0x30
 80140c4:	bd10      	pop	{r4, pc}
 80140c6:	bf00      	nop
 80140c8:	08014c95 	.word	0x08014c95
 80140cc:	08014cb7 	.word	0x08014cb7
 80140d0:	08014cef 	.word	0x08014cef
 80140d4:	08014d13 	.word	0x08014d13

080140d8 <_cleanup_r>:
 80140d8:	4901      	ldr	r1, [pc, #4]	; (80140e0 <_cleanup_r+0x8>)
 80140da:	f000 b8af 	b.w	801423c <_fwalk_reent>
 80140de:	bf00      	nop
 80140e0:	08014019 	.word	0x08014019

080140e4 <__sfmoreglue>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	2268      	movs	r2, #104	; 0x68
 80140e8:	1e4d      	subs	r5, r1, #1
 80140ea:	4355      	muls	r5, r2
 80140ec:	460e      	mov	r6, r1
 80140ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140f2:	f000 fd4b 	bl	8014b8c <_malloc_r>
 80140f6:	4604      	mov	r4, r0
 80140f8:	b140      	cbz	r0, 801410c <__sfmoreglue+0x28>
 80140fa:	2100      	movs	r1, #0
 80140fc:	e9c0 1600 	strd	r1, r6, [r0]
 8014100:	300c      	adds	r0, #12
 8014102:	60a0      	str	r0, [r4, #8]
 8014104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014108:	f7fe fb86 	bl	8012818 <memset>
 801410c:	4620      	mov	r0, r4
 801410e:	bd70      	pop	{r4, r5, r6, pc}

08014110 <__sfp_lock_acquire>:
 8014110:	4801      	ldr	r0, [pc, #4]	; (8014118 <__sfp_lock_acquire+0x8>)
 8014112:	f000 b8b8 	b.w	8014286 <__retarget_lock_acquire_recursive>
 8014116:	bf00      	nop
 8014118:	24001751 	.word	0x24001751

0801411c <__sfp_lock_release>:
 801411c:	4801      	ldr	r0, [pc, #4]	; (8014124 <__sfp_lock_release+0x8>)
 801411e:	f000 b8b3 	b.w	8014288 <__retarget_lock_release_recursive>
 8014122:	bf00      	nop
 8014124:	24001751 	.word	0x24001751

08014128 <__sinit_lock_acquire>:
 8014128:	4801      	ldr	r0, [pc, #4]	; (8014130 <__sinit_lock_acquire+0x8>)
 801412a:	f000 b8ac 	b.w	8014286 <__retarget_lock_acquire_recursive>
 801412e:	bf00      	nop
 8014130:	24001752 	.word	0x24001752

08014134 <__sinit_lock_release>:
 8014134:	4801      	ldr	r0, [pc, #4]	; (801413c <__sinit_lock_release+0x8>)
 8014136:	f000 b8a7 	b.w	8014288 <__retarget_lock_release_recursive>
 801413a:	bf00      	nop
 801413c:	24001752 	.word	0x24001752

08014140 <__sinit>:
 8014140:	b510      	push	{r4, lr}
 8014142:	4604      	mov	r4, r0
 8014144:	f7ff fff0 	bl	8014128 <__sinit_lock_acquire>
 8014148:	69a3      	ldr	r3, [r4, #24]
 801414a:	b11b      	cbz	r3, 8014154 <__sinit+0x14>
 801414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014150:	f7ff bff0 	b.w	8014134 <__sinit_lock_release>
 8014154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014158:	6523      	str	r3, [r4, #80]	; 0x50
 801415a:	4b13      	ldr	r3, [pc, #76]	; (80141a8 <__sinit+0x68>)
 801415c:	4a13      	ldr	r2, [pc, #76]	; (80141ac <__sinit+0x6c>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	62a2      	str	r2, [r4, #40]	; 0x28
 8014162:	42a3      	cmp	r3, r4
 8014164:	bf04      	itt	eq
 8014166:	2301      	moveq	r3, #1
 8014168:	61a3      	streq	r3, [r4, #24]
 801416a:	4620      	mov	r0, r4
 801416c:	f000 f820 	bl	80141b0 <__sfp>
 8014170:	6060      	str	r0, [r4, #4]
 8014172:	4620      	mov	r0, r4
 8014174:	f000 f81c 	bl	80141b0 <__sfp>
 8014178:	60a0      	str	r0, [r4, #8]
 801417a:	4620      	mov	r0, r4
 801417c:	f000 f818 	bl	80141b0 <__sfp>
 8014180:	2200      	movs	r2, #0
 8014182:	60e0      	str	r0, [r4, #12]
 8014184:	2104      	movs	r1, #4
 8014186:	6860      	ldr	r0, [r4, #4]
 8014188:	f7ff ff82 	bl	8014090 <std>
 801418c:	68a0      	ldr	r0, [r4, #8]
 801418e:	2201      	movs	r2, #1
 8014190:	2109      	movs	r1, #9
 8014192:	f7ff ff7d 	bl	8014090 <std>
 8014196:	68e0      	ldr	r0, [r4, #12]
 8014198:	2202      	movs	r2, #2
 801419a:	2112      	movs	r1, #18
 801419c:	f7ff ff78 	bl	8014090 <std>
 80141a0:	2301      	movs	r3, #1
 80141a2:	61a3      	str	r3, [r4, #24]
 80141a4:	e7d2      	b.n	801414c <__sinit+0xc>
 80141a6:	bf00      	nop
 80141a8:	08016d68 	.word	0x08016d68
 80141ac:	080140d9 	.word	0x080140d9

080141b0 <__sfp>:
 80141b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141b2:	4607      	mov	r7, r0
 80141b4:	f7ff ffac 	bl	8014110 <__sfp_lock_acquire>
 80141b8:	4b1e      	ldr	r3, [pc, #120]	; (8014234 <__sfp+0x84>)
 80141ba:	681e      	ldr	r6, [r3, #0]
 80141bc:	69b3      	ldr	r3, [r6, #24]
 80141be:	b913      	cbnz	r3, 80141c6 <__sfp+0x16>
 80141c0:	4630      	mov	r0, r6
 80141c2:	f7ff ffbd 	bl	8014140 <__sinit>
 80141c6:	3648      	adds	r6, #72	; 0x48
 80141c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80141cc:	3b01      	subs	r3, #1
 80141ce:	d503      	bpl.n	80141d8 <__sfp+0x28>
 80141d0:	6833      	ldr	r3, [r6, #0]
 80141d2:	b30b      	cbz	r3, 8014218 <__sfp+0x68>
 80141d4:	6836      	ldr	r6, [r6, #0]
 80141d6:	e7f7      	b.n	80141c8 <__sfp+0x18>
 80141d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80141dc:	b9d5      	cbnz	r5, 8014214 <__sfp+0x64>
 80141de:	4b16      	ldr	r3, [pc, #88]	; (8014238 <__sfp+0x88>)
 80141e0:	60e3      	str	r3, [r4, #12]
 80141e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141e6:	6665      	str	r5, [r4, #100]	; 0x64
 80141e8:	f000 f84c 	bl	8014284 <__retarget_lock_init_recursive>
 80141ec:	f7ff ff96 	bl	801411c <__sfp_lock_release>
 80141f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80141f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80141f8:	6025      	str	r5, [r4, #0]
 80141fa:	61a5      	str	r5, [r4, #24]
 80141fc:	2208      	movs	r2, #8
 80141fe:	4629      	mov	r1, r5
 8014200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014204:	f7fe fb08 	bl	8012818 <memset>
 8014208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801420c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014210:	4620      	mov	r0, r4
 8014212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014214:	3468      	adds	r4, #104	; 0x68
 8014216:	e7d9      	b.n	80141cc <__sfp+0x1c>
 8014218:	2104      	movs	r1, #4
 801421a:	4638      	mov	r0, r7
 801421c:	f7ff ff62 	bl	80140e4 <__sfmoreglue>
 8014220:	4604      	mov	r4, r0
 8014222:	6030      	str	r0, [r6, #0]
 8014224:	2800      	cmp	r0, #0
 8014226:	d1d5      	bne.n	80141d4 <__sfp+0x24>
 8014228:	f7ff ff78 	bl	801411c <__sfp_lock_release>
 801422c:	230c      	movs	r3, #12
 801422e:	603b      	str	r3, [r7, #0]
 8014230:	e7ee      	b.n	8014210 <__sfp+0x60>
 8014232:	bf00      	nop
 8014234:	08016d68 	.word	0x08016d68
 8014238:	ffff0001 	.word	0xffff0001

0801423c <_fwalk_reent>:
 801423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014240:	4606      	mov	r6, r0
 8014242:	4688      	mov	r8, r1
 8014244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014248:	2700      	movs	r7, #0
 801424a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801424e:	f1b9 0901 	subs.w	r9, r9, #1
 8014252:	d505      	bpl.n	8014260 <_fwalk_reent+0x24>
 8014254:	6824      	ldr	r4, [r4, #0]
 8014256:	2c00      	cmp	r4, #0
 8014258:	d1f7      	bne.n	801424a <_fwalk_reent+0xe>
 801425a:	4638      	mov	r0, r7
 801425c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014260:	89ab      	ldrh	r3, [r5, #12]
 8014262:	2b01      	cmp	r3, #1
 8014264:	d907      	bls.n	8014276 <_fwalk_reent+0x3a>
 8014266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801426a:	3301      	adds	r3, #1
 801426c:	d003      	beq.n	8014276 <_fwalk_reent+0x3a>
 801426e:	4629      	mov	r1, r5
 8014270:	4630      	mov	r0, r6
 8014272:	47c0      	blx	r8
 8014274:	4307      	orrs	r7, r0
 8014276:	3568      	adds	r5, #104	; 0x68
 8014278:	e7e9      	b.n	801424e <_fwalk_reent+0x12>
	...

0801427c <_localeconv_r>:
 801427c:	4800      	ldr	r0, [pc, #0]	; (8014280 <_localeconv_r+0x4>)
 801427e:	4770      	bx	lr
 8014280:	24000394 	.word	0x24000394

08014284 <__retarget_lock_init_recursive>:
 8014284:	4770      	bx	lr

08014286 <__retarget_lock_acquire_recursive>:
 8014286:	4770      	bx	lr

08014288 <__retarget_lock_release_recursive>:
 8014288:	4770      	bx	lr

0801428a <__swhatbuf_r>:
 801428a:	b570      	push	{r4, r5, r6, lr}
 801428c:	460e      	mov	r6, r1
 801428e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014292:	2900      	cmp	r1, #0
 8014294:	b096      	sub	sp, #88	; 0x58
 8014296:	4614      	mov	r4, r2
 8014298:	461d      	mov	r5, r3
 801429a:	da08      	bge.n	80142ae <__swhatbuf_r+0x24>
 801429c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80142a0:	2200      	movs	r2, #0
 80142a2:	602a      	str	r2, [r5, #0]
 80142a4:	061a      	lsls	r2, r3, #24
 80142a6:	d410      	bmi.n	80142ca <__swhatbuf_r+0x40>
 80142a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142ac:	e00e      	b.n	80142cc <__swhatbuf_r+0x42>
 80142ae:	466a      	mov	r2, sp
 80142b0:	f000 fd86 	bl	8014dc0 <_fstat_r>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	dbf1      	blt.n	801429c <__swhatbuf_r+0x12>
 80142b8:	9a01      	ldr	r2, [sp, #4]
 80142ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80142be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80142c2:	425a      	negs	r2, r3
 80142c4:	415a      	adcs	r2, r3
 80142c6:	602a      	str	r2, [r5, #0]
 80142c8:	e7ee      	b.n	80142a8 <__swhatbuf_r+0x1e>
 80142ca:	2340      	movs	r3, #64	; 0x40
 80142cc:	2000      	movs	r0, #0
 80142ce:	6023      	str	r3, [r4, #0]
 80142d0:	b016      	add	sp, #88	; 0x58
 80142d2:	bd70      	pop	{r4, r5, r6, pc}

080142d4 <__smakebuf_r>:
 80142d4:	898b      	ldrh	r3, [r1, #12]
 80142d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80142d8:	079d      	lsls	r5, r3, #30
 80142da:	4606      	mov	r6, r0
 80142dc:	460c      	mov	r4, r1
 80142de:	d507      	bpl.n	80142f0 <__smakebuf_r+0x1c>
 80142e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	6123      	str	r3, [r4, #16]
 80142e8:	2301      	movs	r3, #1
 80142ea:	6163      	str	r3, [r4, #20]
 80142ec:	b002      	add	sp, #8
 80142ee:	bd70      	pop	{r4, r5, r6, pc}
 80142f0:	ab01      	add	r3, sp, #4
 80142f2:	466a      	mov	r2, sp
 80142f4:	f7ff ffc9 	bl	801428a <__swhatbuf_r>
 80142f8:	9900      	ldr	r1, [sp, #0]
 80142fa:	4605      	mov	r5, r0
 80142fc:	4630      	mov	r0, r6
 80142fe:	f000 fc45 	bl	8014b8c <_malloc_r>
 8014302:	b948      	cbnz	r0, 8014318 <__smakebuf_r+0x44>
 8014304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014308:	059a      	lsls	r2, r3, #22
 801430a:	d4ef      	bmi.n	80142ec <__smakebuf_r+0x18>
 801430c:	f023 0303 	bic.w	r3, r3, #3
 8014310:	f043 0302 	orr.w	r3, r3, #2
 8014314:	81a3      	strh	r3, [r4, #12]
 8014316:	e7e3      	b.n	80142e0 <__smakebuf_r+0xc>
 8014318:	4b0d      	ldr	r3, [pc, #52]	; (8014350 <__smakebuf_r+0x7c>)
 801431a:	62b3      	str	r3, [r6, #40]	; 0x28
 801431c:	89a3      	ldrh	r3, [r4, #12]
 801431e:	6020      	str	r0, [r4, #0]
 8014320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014324:	81a3      	strh	r3, [r4, #12]
 8014326:	9b00      	ldr	r3, [sp, #0]
 8014328:	6163      	str	r3, [r4, #20]
 801432a:	9b01      	ldr	r3, [sp, #4]
 801432c:	6120      	str	r0, [r4, #16]
 801432e:	b15b      	cbz	r3, 8014348 <__smakebuf_r+0x74>
 8014330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014334:	4630      	mov	r0, r6
 8014336:	f000 fd55 	bl	8014de4 <_isatty_r>
 801433a:	b128      	cbz	r0, 8014348 <__smakebuf_r+0x74>
 801433c:	89a3      	ldrh	r3, [r4, #12]
 801433e:	f023 0303 	bic.w	r3, r3, #3
 8014342:	f043 0301 	orr.w	r3, r3, #1
 8014346:	81a3      	strh	r3, [r4, #12]
 8014348:	89a0      	ldrh	r0, [r4, #12]
 801434a:	4305      	orrs	r5, r0
 801434c:	81a5      	strh	r5, [r4, #12]
 801434e:	e7cd      	b.n	80142ec <__smakebuf_r+0x18>
 8014350:	080140d9 	.word	0x080140d9

08014354 <malloc>:
 8014354:	4b02      	ldr	r3, [pc, #8]	; (8014360 <malloc+0xc>)
 8014356:	4601      	mov	r1, r0
 8014358:	6818      	ldr	r0, [r3, #0]
 801435a:	f000 bc17 	b.w	8014b8c <_malloc_r>
 801435e:	bf00      	nop
 8014360:	24000240 	.word	0x24000240

08014364 <memcpy>:
 8014364:	440a      	add	r2, r1
 8014366:	4291      	cmp	r1, r2
 8014368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801436c:	d100      	bne.n	8014370 <memcpy+0xc>
 801436e:	4770      	bx	lr
 8014370:	b510      	push	{r4, lr}
 8014372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014376:	f803 4f01 	strb.w	r4, [r3, #1]!
 801437a:	4291      	cmp	r1, r2
 801437c:	d1f9      	bne.n	8014372 <memcpy+0xe>
 801437e:	bd10      	pop	{r4, pc}

08014380 <_Balloc>:
 8014380:	b570      	push	{r4, r5, r6, lr}
 8014382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014384:	4604      	mov	r4, r0
 8014386:	460d      	mov	r5, r1
 8014388:	b976      	cbnz	r6, 80143a8 <_Balloc+0x28>
 801438a:	2010      	movs	r0, #16
 801438c:	f7ff ffe2 	bl	8014354 <malloc>
 8014390:	4602      	mov	r2, r0
 8014392:	6260      	str	r0, [r4, #36]	; 0x24
 8014394:	b920      	cbnz	r0, 80143a0 <_Balloc+0x20>
 8014396:	4b18      	ldr	r3, [pc, #96]	; (80143f8 <_Balloc+0x78>)
 8014398:	4818      	ldr	r0, [pc, #96]	; (80143fc <_Balloc+0x7c>)
 801439a:	2166      	movs	r1, #102	; 0x66
 801439c:	f000 fcd0 	bl	8014d40 <__assert_func>
 80143a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143a4:	6006      	str	r6, [r0, #0]
 80143a6:	60c6      	str	r6, [r0, #12]
 80143a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80143aa:	68f3      	ldr	r3, [r6, #12]
 80143ac:	b183      	cbz	r3, 80143d0 <_Balloc+0x50>
 80143ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143b6:	b9b8      	cbnz	r0, 80143e8 <_Balloc+0x68>
 80143b8:	2101      	movs	r1, #1
 80143ba:	fa01 f605 	lsl.w	r6, r1, r5
 80143be:	1d72      	adds	r2, r6, #5
 80143c0:	0092      	lsls	r2, r2, #2
 80143c2:	4620      	mov	r0, r4
 80143c4:	f000 fb60 	bl	8014a88 <_calloc_r>
 80143c8:	b160      	cbz	r0, 80143e4 <_Balloc+0x64>
 80143ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80143ce:	e00e      	b.n	80143ee <_Balloc+0x6e>
 80143d0:	2221      	movs	r2, #33	; 0x21
 80143d2:	2104      	movs	r1, #4
 80143d4:	4620      	mov	r0, r4
 80143d6:	f000 fb57 	bl	8014a88 <_calloc_r>
 80143da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143dc:	60f0      	str	r0, [r6, #12]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d1e4      	bne.n	80143ae <_Balloc+0x2e>
 80143e4:	2000      	movs	r0, #0
 80143e6:	bd70      	pop	{r4, r5, r6, pc}
 80143e8:	6802      	ldr	r2, [r0, #0]
 80143ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80143ee:	2300      	movs	r3, #0
 80143f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80143f4:	e7f7      	b.n	80143e6 <_Balloc+0x66>
 80143f6:	bf00      	nop
 80143f8:	08016dad 	.word	0x08016dad
 80143fc:	08016e90 	.word	0x08016e90

08014400 <_Bfree>:
 8014400:	b570      	push	{r4, r5, r6, lr}
 8014402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014404:	4605      	mov	r5, r0
 8014406:	460c      	mov	r4, r1
 8014408:	b976      	cbnz	r6, 8014428 <_Bfree+0x28>
 801440a:	2010      	movs	r0, #16
 801440c:	f7ff ffa2 	bl	8014354 <malloc>
 8014410:	4602      	mov	r2, r0
 8014412:	6268      	str	r0, [r5, #36]	; 0x24
 8014414:	b920      	cbnz	r0, 8014420 <_Bfree+0x20>
 8014416:	4b09      	ldr	r3, [pc, #36]	; (801443c <_Bfree+0x3c>)
 8014418:	4809      	ldr	r0, [pc, #36]	; (8014440 <_Bfree+0x40>)
 801441a:	218a      	movs	r1, #138	; 0x8a
 801441c:	f000 fc90 	bl	8014d40 <__assert_func>
 8014420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014424:	6006      	str	r6, [r0, #0]
 8014426:	60c6      	str	r6, [r0, #12]
 8014428:	b13c      	cbz	r4, 801443a <_Bfree+0x3a>
 801442a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801442c:	6862      	ldr	r2, [r4, #4]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014434:	6021      	str	r1, [r4, #0]
 8014436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801443a:	bd70      	pop	{r4, r5, r6, pc}
 801443c:	08016dad 	.word	0x08016dad
 8014440:	08016e90 	.word	0x08016e90

08014444 <__multadd>:
 8014444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014448:	690d      	ldr	r5, [r1, #16]
 801444a:	4607      	mov	r7, r0
 801444c:	460c      	mov	r4, r1
 801444e:	461e      	mov	r6, r3
 8014450:	f101 0c14 	add.w	ip, r1, #20
 8014454:	2000      	movs	r0, #0
 8014456:	f8dc 3000 	ldr.w	r3, [ip]
 801445a:	b299      	uxth	r1, r3
 801445c:	fb02 6101 	mla	r1, r2, r1, r6
 8014460:	0c1e      	lsrs	r6, r3, #16
 8014462:	0c0b      	lsrs	r3, r1, #16
 8014464:	fb02 3306 	mla	r3, r2, r6, r3
 8014468:	b289      	uxth	r1, r1
 801446a:	3001      	adds	r0, #1
 801446c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014470:	4285      	cmp	r5, r0
 8014472:	f84c 1b04 	str.w	r1, [ip], #4
 8014476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801447a:	dcec      	bgt.n	8014456 <__multadd+0x12>
 801447c:	b30e      	cbz	r6, 80144c2 <__multadd+0x7e>
 801447e:	68a3      	ldr	r3, [r4, #8]
 8014480:	42ab      	cmp	r3, r5
 8014482:	dc19      	bgt.n	80144b8 <__multadd+0x74>
 8014484:	6861      	ldr	r1, [r4, #4]
 8014486:	4638      	mov	r0, r7
 8014488:	3101      	adds	r1, #1
 801448a:	f7ff ff79 	bl	8014380 <_Balloc>
 801448e:	4680      	mov	r8, r0
 8014490:	b928      	cbnz	r0, 801449e <__multadd+0x5a>
 8014492:	4602      	mov	r2, r0
 8014494:	4b0c      	ldr	r3, [pc, #48]	; (80144c8 <__multadd+0x84>)
 8014496:	480d      	ldr	r0, [pc, #52]	; (80144cc <__multadd+0x88>)
 8014498:	21b5      	movs	r1, #181	; 0xb5
 801449a:	f000 fc51 	bl	8014d40 <__assert_func>
 801449e:	6922      	ldr	r2, [r4, #16]
 80144a0:	3202      	adds	r2, #2
 80144a2:	f104 010c 	add.w	r1, r4, #12
 80144a6:	0092      	lsls	r2, r2, #2
 80144a8:	300c      	adds	r0, #12
 80144aa:	f7ff ff5b 	bl	8014364 <memcpy>
 80144ae:	4621      	mov	r1, r4
 80144b0:	4638      	mov	r0, r7
 80144b2:	f7ff ffa5 	bl	8014400 <_Bfree>
 80144b6:	4644      	mov	r4, r8
 80144b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144bc:	3501      	adds	r5, #1
 80144be:	615e      	str	r6, [r3, #20]
 80144c0:	6125      	str	r5, [r4, #16]
 80144c2:	4620      	mov	r0, r4
 80144c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144c8:	08016e1f 	.word	0x08016e1f
 80144cc:	08016e90 	.word	0x08016e90

080144d0 <__hi0bits>:
 80144d0:	0c03      	lsrs	r3, r0, #16
 80144d2:	041b      	lsls	r3, r3, #16
 80144d4:	b9d3      	cbnz	r3, 801450c <__hi0bits+0x3c>
 80144d6:	0400      	lsls	r0, r0, #16
 80144d8:	2310      	movs	r3, #16
 80144da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80144de:	bf04      	itt	eq
 80144e0:	0200      	lsleq	r0, r0, #8
 80144e2:	3308      	addeq	r3, #8
 80144e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80144e8:	bf04      	itt	eq
 80144ea:	0100      	lsleq	r0, r0, #4
 80144ec:	3304      	addeq	r3, #4
 80144ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80144f2:	bf04      	itt	eq
 80144f4:	0080      	lsleq	r0, r0, #2
 80144f6:	3302      	addeq	r3, #2
 80144f8:	2800      	cmp	r0, #0
 80144fa:	db05      	blt.n	8014508 <__hi0bits+0x38>
 80144fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014500:	f103 0301 	add.w	r3, r3, #1
 8014504:	bf08      	it	eq
 8014506:	2320      	moveq	r3, #32
 8014508:	4618      	mov	r0, r3
 801450a:	4770      	bx	lr
 801450c:	2300      	movs	r3, #0
 801450e:	e7e4      	b.n	80144da <__hi0bits+0xa>

08014510 <__lo0bits>:
 8014510:	6803      	ldr	r3, [r0, #0]
 8014512:	f013 0207 	ands.w	r2, r3, #7
 8014516:	4601      	mov	r1, r0
 8014518:	d00b      	beq.n	8014532 <__lo0bits+0x22>
 801451a:	07da      	lsls	r2, r3, #31
 801451c:	d423      	bmi.n	8014566 <__lo0bits+0x56>
 801451e:	0798      	lsls	r0, r3, #30
 8014520:	bf49      	itett	mi
 8014522:	085b      	lsrmi	r3, r3, #1
 8014524:	089b      	lsrpl	r3, r3, #2
 8014526:	2001      	movmi	r0, #1
 8014528:	600b      	strmi	r3, [r1, #0]
 801452a:	bf5c      	itt	pl
 801452c:	600b      	strpl	r3, [r1, #0]
 801452e:	2002      	movpl	r0, #2
 8014530:	4770      	bx	lr
 8014532:	b298      	uxth	r0, r3
 8014534:	b9a8      	cbnz	r0, 8014562 <__lo0bits+0x52>
 8014536:	0c1b      	lsrs	r3, r3, #16
 8014538:	2010      	movs	r0, #16
 801453a:	b2da      	uxtb	r2, r3
 801453c:	b90a      	cbnz	r2, 8014542 <__lo0bits+0x32>
 801453e:	3008      	adds	r0, #8
 8014540:	0a1b      	lsrs	r3, r3, #8
 8014542:	071a      	lsls	r2, r3, #28
 8014544:	bf04      	itt	eq
 8014546:	091b      	lsreq	r3, r3, #4
 8014548:	3004      	addeq	r0, #4
 801454a:	079a      	lsls	r2, r3, #30
 801454c:	bf04      	itt	eq
 801454e:	089b      	lsreq	r3, r3, #2
 8014550:	3002      	addeq	r0, #2
 8014552:	07da      	lsls	r2, r3, #31
 8014554:	d403      	bmi.n	801455e <__lo0bits+0x4e>
 8014556:	085b      	lsrs	r3, r3, #1
 8014558:	f100 0001 	add.w	r0, r0, #1
 801455c:	d005      	beq.n	801456a <__lo0bits+0x5a>
 801455e:	600b      	str	r3, [r1, #0]
 8014560:	4770      	bx	lr
 8014562:	4610      	mov	r0, r2
 8014564:	e7e9      	b.n	801453a <__lo0bits+0x2a>
 8014566:	2000      	movs	r0, #0
 8014568:	4770      	bx	lr
 801456a:	2020      	movs	r0, #32
 801456c:	4770      	bx	lr
	...

08014570 <__i2b>:
 8014570:	b510      	push	{r4, lr}
 8014572:	460c      	mov	r4, r1
 8014574:	2101      	movs	r1, #1
 8014576:	f7ff ff03 	bl	8014380 <_Balloc>
 801457a:	4602      	mov	r2, r0
 801457c:	b928      	cbnz	r0, 801458a <__i2b+0x1a>
 801457e:	4b05      	ldr	r3, [pc, #20]	; (8014594 <__i2b+0x24>)
 8014580:	4805      	ldr	r0, [pc, #20]	; (8014598 <__i2b+0x28>)
 8014582:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014586:	f000 fbdb 	bl	8014d40 <__assert_func>
 801458a:	2301      	movs	r3, #1
 801458c:	6144      	str	r4, [r0, #20]
 801458e:	6103      	str	r3, [r0, #16]
 8014590:	bd10      	pop	{r4, pc}
 8014592:	bf00      	nop
 8014594:	08016e1f 	.word	0x08016e1f
 8014598:	08016e90 	.word	0x08016e90

0801459c <__multiply>:
 801459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a0:	4691      	mov	r9, r2
 80145a2:	690a      	ldr	r2, [r1, #16]
 80145a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	bfb8      	it	lt
 80145ac:	460b      	movlt	r3, r1
 80145ae:	460c      	mov	r4, r1
 80145b0:	bfbc      	itt	lt
 80145b2:	464c      	movlt	r4, r9
 80145b4:	4699      	movlt	r9, r3
 80145b6:	6927      	ldr	r7, [r4, #16]
 80145b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145bc:	68a3      	ldr	r3, [r4, #8]
 80145be:	6861      	ldr	r1, [r4, #4]
 80145c0:	eb07 060a 	add.w	r6, r7, sl
 80145c4:	42b3      	cmp	r3, r6
 80145c6:	b085      	sub	sp, #20
 80145c8:	bfb8      	it	lt
 80145ca:	3101      	addlt	r1, #1
 80145cc:	f7ff fed8 	bl	8014380 <_Balloc>
 80145d0:	b930      	cbnz	r0, 80145e0 <__multiply+0x44>
 80145d2:	4602      	mov	r2, r0
 80145d4:	4b44      	ldr	r3, [pc, #272]	; (80146e8 <__multiply+0x14c>)
 80145d6:	4845      	ldr	r0, [pc, #276]	; (80146ec <__multiply+0x150>)
 80145d8:	f240 115d 	movw	r1, #349	; 0x15d
 80145dc:	f000 fbb0 	bl	8014d40 <__assert_func>
 80145e0:	f100 0514 	add.w	r5, r0, #20
 80145e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80145e8:	462b      	mov	r3, r5
 80145ea:	2200      	movs	r2, #0
 80145ec:	4543      	cmp	r3, r8
 80145ee:	d321      	bcc.n	8014634 <__multiply+0x98>
 80145f0:	f104 0314 	add.w	r3, r4, #20
 80145f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80145f8:	f109 0314 	add.w	r3, r9, #20
 80145fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014600:	9202      	str	r2, [sp, #8]
 8014602:	1b3a      	subs	r2, r7, r4
 8014604:	3a15      	subs	r2, #21
 8014606:	f022 0203 	bic.w	r2, r2, #3
 801460a:	3204      	adds	r2, #4
 801460c:	f104 0115 	add.w	r1, r4, #21
 8014610:	428f      	cmp	r7, r1
 8014612:	bf38      	it	cc
 8014614:	2204      	movcc	r2, #4
 8014616:	9201      	str	r2, [sp, #4]
 8014618:	9a02      	ldr	r2, [sp, #8]
 801461a:	9303      	str	r3, [sp, #12]
 801461c:	429a      	cmp	r2, r3
 801461e:	d80c      	bhi.n	801463a <__multiply+0x9e>
 8014620:	2e00      	cmp	r6, #0
 8014622:	dd03      	ble.n	801462c <__multiply+0x90>
 8014624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014628:	2b00      	cmp	r3, #0
 801462a:	d05a      	beq.n	80146e2 <__multiply+0x146>
 801462c:	6106      	str	r6, [r0, #16]
 801462e:	b005      	add	sp, #20
 8014630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014634:	f843 2b04 	str.w	r2, [r3], #4
 8014638:	e7d8      	b.n	80145ec <__multiply+0x50>
 801463a:	f8b3 a000 	ldrh.w	sl, [r3]
 801463e:	f1ba 0f00 	cmp.w	sl, #0
 8014642:	d024      	beq.n	801468e <__multiply+0xf2>
 8014644:	f104 0e14 	add.w	lr, r4, #20
 8014648:	46a9      	mov	r9, r5
 801464a:	f04f 0c00 	mov.w	ip, #0
 801464e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014652:	f8d9 1000 	ldr.w	r1, [r9]
 8014656:	fa1f fb82 	uxth.w	fp, r2
 801465a:	b289      	uxth	r1, r1
 801465c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014664:	f8d9 2000 	ldr.w	r2, [r9]
 8014668:	4461      	add	r1, ip
 801466a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801466e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014676:	b289      	uxth	r1, r1
 8014678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801467c:	4577      	cmp	r7, lr
 801467e:	f849 1b04 	str.w	r1, [r9], #4
 8014682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014686:	d8e2      	bhi.n	801464e <__multiply+0xb2>
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	f845 c002 	str.w	ip, [r5, r2]
 801468e:	9a03      	ldr	r2, [sp, #12]
 8014690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014694:	3304      	adds	r3, #4
 8014696:	f1b9 0f00 	cmp.w	r9, #0
 801469a:	d020      	beq.n	80146de <__multiply+0x142>
 801469c:	6829      	ldr	r1, [r5, #0]
 801469e:	f104 0c14 	add.w	ip, r4, #20
 80146a2:	46ae      	mov	lr, r5
 80146a4:	f04f 0a00 	mov.w	sl, #0
 80146a8:	f8bc b000 	ldrh.w	fp, [ip]
 80146ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80146b0:	fb09 220b 	mla	r2, r9, fp, r2
 80146b4:	4492      	add	sl, r2
 80146b6:	b289      	uxth	r1, r1
 80146b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80146bc:	f84e 1b04 	str.w	r1, [lr], #4
 80146c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80146c4:	f8be 1000 	ldrh.w	r1, [lr]
 80146c8:	0c12      	lsrs	r2, r2, #16
 80146ca:	fb09 1102 	mla	r1, r9, r2, r1
 80146ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80146d2:	4567      	cmp	r7, ip
 80146d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146d8:	d8e6      	bhi.n	80146a8 <__multiply+0x10c>
 80146da:	9a01      	ldr	r2, [sp, #4]
 80146dc:	50a9      	str	r1, [r5, r2]
 80146de:	3504      	adds	r5, #4
 80146e0:	e79a      	b.n	8014618 <__multiply+0x7c>
 80146e2:	3e01      	subs	r6, #1
 80146e4:	e79c      	b.n	8014620 <__multiply+0x84>
 80146e6:	bf00      	nop
 80146e8:	08016e1f 	.word	0x08016e1f
 80146ec:	08016e90 	.word	0x08016e90

080146f0 <__pow5mult>:
 80146f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f4:	4615      	mov	r5, r2
 80146f6:	f012 0203 	ands.w	r2, r2, #3
 80146fa:	4606      	mov	r6, r0
 80146fc:	460f      	mov	r7, r1
 80146fe:	d007      	beq.n	8014710 <__pow5mult+0x20>
 8014700:	4c25      	ldr	r4, [pc, #148]	; (8014798 <__pow5mult+0xa8>)
 8014702:	3a01      	subs	r2, #1
 8014704:	2300      	movs	r3, #0
 8014706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801470a:	f7ff fe9b 	bl	8014444 <__multadd>
 801470e:	4607      	mov	r7, r0
 8014710:	10ad      	asrs	r5, r5, #2
 8014712:	d03d      	beq.n	8014790 <__pow5mult+0xa0>
 8014714:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014716:	b97c      	cbnz	r4, 8014738 <__pow5mult+0x48>
 8014718:	2010      	movs	r0, #16
 801471a:	f7ff fe1b 	bl	8014354 <malloc>
 801471e:	4602      	mov	r2, r0
 8014720:	6270      	str	r0, [r6, #36]	; 0x24
 8014722:	b928      	cbnz	r0, 8014730 <__pow5mult+0x40>
 8014724:	4b1d      	ldr	r3, [pc, #116]	; (801479c <__pow5mult+0xac>)
 8014726:	481e      	ldr	r0, [pc, #120]	; (80147a0 <__pow5mult+0xb0>)
 8014728:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801472c:	f000 fb08 	bl	8014d40 <__assert_func>
 8014730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014734:	6004      	str	r4, [r0, #0]
 8014736:	60c4      	str	r4, [r0, #12]
 8014738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801473c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014740:	b94c      	cbnz	r4, 8014756 <__pow5mult+0x66>
 8014742:	f240 2171 	movw	r1, #625	; 0x271
 8014746:	4630      	mov	r0, r6
 8014748:	f7ff ff12 	bl	8014570 <__i2b>
 801474c:	2300      	movs	r3, #0
 801474e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014752:	4604      	mov	r4, r0
 8014754:	6003      	str	r3, [r0, #0]
 8014756:	f04f 0900 	mov.w	r9, #0
 801475a:	07eb      	lsls	r3, r5, #31
 801475c:	d50a      	bpl.n	8014774 <__pow5mult+0x84>
 801475e:	4639      	mov	r1, r7
 8014760:	4622      	mov	r2, r4
 8014762:	4630      	mov	r0, r6
 8014764:	f7ff ff1a 	bl	801459c <__multiply>
 8014768:	4639      	mov	r1, r7
 801476a:	4680      	mov	r8, r0
 801476c:	4630      	mov	r0, r6
 801476e:	f7ff fe47 	bl	8014400 <_Bfree>
 8014772:	4647      	mov	r7, r8
 8014774:	106d      	asrs	r5, r5, #1
 8014776:	d00b      	beq.n	8014790 <__pow5mult+0xa0>
 8014778:	6820      	ldr	r0, [r4, #0]
 801477a:	b938      	cbnz	r0, 801478c <__pow5mult+0x9c>
 801477c:	4622      	mov	r2, r4
 801477e:	4621      	mov	r1, r4
 8014780:	4630      	mov	r0, r6
 8014782:	f7ff ff0b 	bl	801459c <__multiply>
 8014786:	6020      	str	r0, [r4, #0]
 8014788:	f8c0 9000 	str.w	r9, [r0]
 801478c:	4604      	mov	r4, r0
 801478e:	e7e4      	b.n	801475a <__pow5mult+0x6a>
 8014790:	4638      	mov	r0, r7
 8014792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014796:	bf00      	nop
 8014798:	08016fe0 	.word	0x08016fe0
 801479c:	08016dad 	.word	0x08016dad
 80147a0:	08016e90 	.word	0x08016e90

080147a4 <__lshift>:
 80147a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147a8:	460c      	mov	r4, r1
 80147aa:	6849      	ldr	r1, [r1, #4]
 80147ac:	6923      	ldr	r3, [r4, #16]
 80147ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147b2:	68a3      	ldr	r3, [r4, #8]
 80147b4:	4607      	mov	r7, r0
 80147b6:	4691      	mov	r9, r2
 80147b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147bc:	f108 0601 	add.w	r6, r8, #1
 80147c0:	42b3      	cmp	r3, r6
 80147c2:	db0b      	blt.n	80147dc <__lshift+0x38>
 80147c4:	4638      	mov	r0, r7
 80147c6:	f7ff fddb 	bl	8014380 <_Balloc>
 80147ca:	4605      	mov	r5, r0
 80147cc:	b948      	cbnz	r0, 80147e2 <__lshift+0x3e>
 80147ce:	4602      	mov	r2, r0
 80147d0:	4b2a      	ldr	r3, [pc, #168]	; (801487c <__lshift+0xd8>)
 80147d2:	482b      	ldr	r0, [pc, #172]	; (8014880 <__lshift+0xdc>)
 80147d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80147d8:	f000 fab2 	bl	8014d40 <__assert_func>
 80147dc:	3101      	adds	r1, #1
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	e7ee      	b.n	80147c0 <__lshift+0x1c>
 80147e2:	2300      	movs	r3, #0
 80147e4:	f100 0114 	add.w	r1, r0, #20
 80147e8:	f100 0210 	add.w	r2, r0, #16
 80147ec:	4618      	mov	r0, r3
 80147ee:	4553      	cmp	r3, sl
 80147f0:	db37      	blt.n	8014862 <__lshift+0xbe>
 80147f2:	6920      	ldr	r0, [r4, #16]
 80147f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80147f8:	f104 0314 	add.w	r3, r4, #20
 80147fc:	f019 091f 	ands.w	r9, r9, #31
 8014800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014804:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014808:	d02f      	beq.n	801486a <__lshift+0xc6>
 801480a:	f1c9 0e20 	rsb	lr, r9, #32
 801480e:	468a      	mov	sl, r1
 8014810:	f04f 0c00 	mov.w	ip, #0
 8014814:	681a      	ldr	r2, [r3, #0]
 8014816:	fa02 f209 	lsl.w	r2, r2, r9
 801481a:	ea42 020c 	orr.w	r2, r2, ip
 801481e:	f84a 2b04 	str.w	r2, [sl], #4
 8014822:	f853 2b04 	ldr.w	r2, [r3], #4
 8014826:	4298      	cmp	r0, r3
 8014828:	fa22 fc0e 	lsr.w	ip, r2, lr
 801482c:	d8f2      	bhi.n	8014814 <__lshift+0x70>
 801482e:	1b03      	subs	r3, r0, r4
 8014830:	3b15      	subs	r3, #21
 8014832:	f023 0303 	bic.w	r3, r3, #3
 8014836:	3304      	adds	r3, #4
 8014838:	f104 0215 	add.w	r2, r4, #21
 801483c:	4290      	cmp	r0, r2
 801483e:	bf38      	it	cc
 8014840:	2304      	movcc	r3, #4
 8014842:	f841 c003 	str.w	ip, [r1, r3]
 8014846:	f1bc 0f00 	cmp.w	ip, #0
 801484a:	d001      	beq.n	8014850 <__lshift+0xac>
 801484c:	f108 0602 	add.w	r6, r8, #2
 8014850:	3e01      	subs	r6, #1
 8014852:	4638      	mov	r0, r7
 8014854:	612e      	str	r6, [r5, #16]
 8014856:	4621      	mov	r1, r4
 8014858:	f7ff fdd2 	bl	8014400 <_Bfree>
 801485c:	4628      	mov	r0, r5
 801485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014862:	f842 0f04 	str.w	r0, [r2, #4]!
 8014866:	3301      	adds	r3, #1
 8014868:	e7c1      	b.n	80147ee <__lshift+0x4a>
 801486a:	3904      	subs	r1, #4
 801486c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014870:	f841 2f04 	str.w	r2, [r1, #4]!
 8014874:	4298      	cmp	r0, r3
 8014876:	d8f9      	bhi.n	801486c <__lshift+0xc8>
 8014878:	e7ea      	b.n	8014850 <__lshift+0xac>
 801487a:	bf00      	nop
 801487c:	08016e1f 	.word	0x08016e1f
 8014880:	08016e90 	.word	0x08016e90

08014884 <__mcmp>:
 8014884:	b530      	push	{r4, r5, lr}
 8014886:	6902      	ldr	r2, [r0, #16]
 8014888:	690c      	ldr	r4, [r1, #16]
 801488a:	1b12      	subs	r2, r2, r4
 801488c:	d10e      	bne.n	80148ac <__mcmp+0x28>
 801488e:	f100 0314 	add.w	r3, r0, #20
 8014892:	3114      	adds	r1, #20
 8014894:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014898:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801489c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80148a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80148a4:	42a5      	cmp	r5, r4
 80148a6:	d003      	beq.n	80148b0 <__mcmp+0x2c>
 80148a8:	d305      	bcc.n	80148b6 <__mcmp+0x32>
 80148aa:	2201      	movs	r2, #1
 80148ac:	4610      	mov	r0, r2
 80148ae:	bd30      	pop	{r4, r5, pc}
 80148b0:	4283      	cmp	r3, r0
 80148b2:	d3f3      	bcc.n	801489c <__mcmp+0x18>
 80148b4:	e7fa      	b.n	80148ac <__mcmp+0x28>
 80148b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148ba:	e7f7      	b.n	80148ac <__mcmp+0x28>

080148bc <__mdiff>:
 80148bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c0:	460c      	mov	r4, r1
 80148c2:	4606      	mov	r6, r0
 80148c4:	4611      	mov	r1, r2
 80148c6:	4620      	mov	r0, r4
 80148c8:	4690      	mov	r8, r2
 80148ca:	f7ff ffdb 	bl	8014884 <__mcmp>
 80148ce:	1e05      	subs	r5, r0, #0
 80148d0:	d110      	bne.n	80148f4 <__mdiff+0x38>
 80148d2:	4629      	mov	r1, r5
 80148d4:	4630      	mov	r0, r6
 80148d6:	f7ff fd53 	bl	8014380 <_Balloc>
 80148da:	b930      	cbnz	r0, 80148ea <__mdiff+0x2e>
 80148dc:	4b3a      	ldr	r3, [pc, #232]	; (80149c8 <__mdiff+0x10c>)
 80148de:	4602      	mov	r2, r0
 80148e0:	f240 2132 	movw	r1, #562	; 0x232
 80148e4:	4839      	ldr	r0, [pc, #228]	; (80149cc <__mdiff+0x110>)
 80148e6:	f000 fa2b 	bl	8014d40 <__assert_func>
 80148ea:	2301      	movs	r3, #1
 80148ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80148f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f4:	bfa4      	itt	ge
 80148f6:	4643      	movge	r3, r8
 80148f8:	46a0      	movge	r8, r4
 80148fa:	4630      	mov	r0, r6
 80148fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014900:	bfa6      	itte	ge
 8014902:	461c      	movge	r4, r3
 8014904:	2500      	movge	r5, #0
 8014906:	2501      	movlt	r5, #1
 8014908:	f7ff fd3a 	bl	8014380 <_Balloc>
 801490c:	b920      	cbnz	r0, 8014918 <__mdiff+0x5c>
 801490e:	4b2e      	ldr	r3, [pc, #184]	; (80149c8 <__mdiff+0x10c>)
 8014910:	4602      	mov	r2, r0
 8014912:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014916:	e7e5      	b.n	80148e4 <__mdiff+0x28>
 8014918:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801491c:	6926      	ldr	r6, [r4, #16]
 801491e:	60c5      	str	r5, [r0, #12]
 8014920:	f104 0914 	add.w	r9, r4, #20
 8014924:	f108 0514 	add.w	r5, r8, #20
 8014928:	f100 0e14 	add.w	lr, r0, #20
 801492c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014934:	f108 0210 	add.w	r2, r8, #16
 8014938:	46f2      	mov	sl, lr
 801493a:	2100      	movs	r1, #0
 801493c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014940:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014944:	fa1f f883 	uxth.w	r8, r3
 8014948:	fa11 f18b 	uxtah	r1, r1, fp
 801494c:	0c1b      	lsrs	r3, r3, #16
 801494e:	eba1 0808 	sub.w	r8, r1, r8
 8014952:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014956:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801495a:	fa1f f888 	uxth.w	r8, r8
 801495e:	1419      	asrs	r1, r3, #16
 8014960:	454e      	cmp	r6, r9
 8014962:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014966:	f84a 3b04 	str.w	r3, [sl], #4
 801496a:	d8e7      	bhi.n	801493c <__mdiff+0x80>
 801496c:	1b33      	subs	r3, r6, r4
 801496e:	3b15      	subs	r3, #21
 8014970:	f023 0303 	bic.w	r3, r3, #3
 8014974:	3304      	adds	r3, #4
 8014976:	3415      	adds	r4, #21
 8014978:	42a6      	cmp	r6, r4
 801497a:	bf38      	it	cc
 801497c:	2304      	movcc	r3, #4
 801497e:	441d      	add	r5, r3
 8014980:	4473      	add	r3, lr
 8014982:	469e      	mov	lr, r3
 8014984:	462e      	mov	r6, r5
 8014986:	4566      	cmp	r6, ip
 8014988:	d30e      	bcc.n	80149a8 <__mdiff+0xec>
 801498a:	f10c 0203 	add.w	r2, ip, #3
 801498e:	1b52      	subs	r2, r2, r5
 8014990:	f022 0203 	bic.w	r2, r2, #3
 8014994:	3d03      	subs	r5, #3
 8014996:	45ac      	cmp	ip, r5
 8014998:	bf38      	it	cc
 801499a:	2200      	movcc	r2, #0
 801499c:	441a      	add	r2, r3
 801499e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80149a2:	b17b      	cbz	r3, 80149c4 <__mdiff+0x108>
 80149a4:	6107      	str	r7, [r0, #16]
 80149a6:	e7a3      	b.n	80148f0 <__mdiff+0x34>
 80149a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80149ac:	fa11 f288 	uxtah	r2, r1, r8
 80149b0:	1414      	asrs	r4, r2, #16
 80149b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80149b6:	b292      	uxth	r2, r2
 80149b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80149bc:	f84e 2b04 	str.w	r2, [lr], #4
 80149c0:	1421      	asrs	r1, r4, #16
 80149c2:	e7e0      	b.n	8014986 <__mdiff+0xca>
 80149c4:	3f01      	subs	r7, #1
 80149c6:	e7ea      	b.n	801499e <__mdiff+0xe2>
 80149c8:	08016e1f 	.word	0x08016e1f
 80149cc:	08016e90 	.word	0x08016e90

080149d0 <__d2b>:
 80149d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149d4:	4689      	mov	r9, r1
 80149d6:	2101      	movs	r1, #1
 80149d8:	ec57 6b10 	vmov	r6, r7, d0
 80149dc:	4690      	mov	r8, r2
 80149de:	f7ff fccf 	bl	8014380 <_Balloc>
 80149e2:	4604      	mov	r4, r0
 80149e4:	b930      	cbnz	r0, 80149f4 <__d2b+0x24>
 80149e6:	4602      	mov	r2, r0
 80149e8:	4b25      	ldr	r3, [pc, #148]	; (8014a80 <__d2b+0xb0>)
 80149ea:	4826      	ldr	r0, [pc, #152]	; (8014a84 <__d2b+0xb4>)
 80149ec:	f240 310a 	movw	r1, #778	; 0x30a
 80149f0:	f000 f9a6 	bl	8014d40 <__assert_func>
 80149f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80149f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80149fc:	bb35      	cbnz	r5, 8014a4c <__d2b+0x7c>
 80149fe:	2e00      	cmp	r6, #0
 8014a00:	9301      	str	r3, [sp, #4]
 8014a02:	d028      	beq.n	8014a56 <__d2b+0x86>
 8014a04:	4668      	mov	r0, sp
 8014a06:	9600      	str	r6, [sp, #0]
 8014a08:	f7ff fd82 	bl	8014510 <__lo0bits>
 8014a0c:	9900      	ldr	r1, [sp, #0]
 8014a0e:	b300      	cbz	r0, 8014a52 <__d2b+0x82>
 8014a10:	9a01      	ldr	r2, [sp, #4]
 8014a12:	f1c0 0320 	rsb	r3, r0, #32
 8014a16:	fa02 f303 	lsl.w	r3, r2, r3
 8014a1a:	430b      	orrs	r3, r1
 8014a1c:	40c2      	lsrs	r2, r0
 8014a1e:	6163      	str	r3, [r4, #20]
 8014a20:	9201      	str	r2, [sp, #4]
 8014a22:	9b01      	ldr	r3, [sp, #4]
 8014a24:	61a3      	str	r3, [r4, #24]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	bf14      	ite	ne
 8014a2a:	2202      	movne	r2, #2
 8014a2c:	2201      	moveq	r2, #1
 8014a2e:	6122      	str	r2, [r4, #16]
 8014a30:	b1d5      	cbz	r5, 8014a68 <__d2b+0x98>
 8014a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a36:	4405      	add	r5, r0
 8014a38:	f8c9 5000 	str.w	r5, [r9]
 8014a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a40:	f8c8 0000 	str.w	r0, [r8]
 8014a44:	4620      	mov	r0, r4
 8014a46:	b003      	add	sp, #12
 8014a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a50:	e7d5      	b.n	80149fe <__d2b+0x2e>
 8014a52:	6161      	str	r1, [r4, #20]
 8014a54:	e7e5      	b.n	8014a22 <__d2b+0x52>
 8014a56:	a801      	add	r0, sp, #4
 8014a58:	f7ff fd5a 	bl	8014510 <__lo0bits>
 8014a5c:	9b01      	ldr	r3, [sp, #4]
 8014a5e:	6163      	str	r3, [r4, #20]
 8014a60:	2201      	movs	r2, #1
 8014a62:	6122      	str	r2, [r4, #16]
 8014a64:	3020      	adds	r0, #32
 8014a66:	e7e3      	b.n	8014a30 <__d2b+0x60>
 8014a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a70:	f8c9 0000 	str.w	r0, [r9]
 8014a74:	6918      	ldr	r0, [r3, #16]
 8014a76:	f7ff fd2b 	bl	80144d0 <__hi0bits>
 8014a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014a7e:	e7df      	b.n	8014a40 <__d2b+0x70>
 8014a80:	08016e1f 	.word	0x08016e1f
 8014a84:	08016e90 	.word	0x08016e90

08014a88 <_calloc_r>:
 8014a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a8a:	fba1 2402 	umull	r2, r4, r1, r2
 8014a8e:	b94c      	cbnz	r4, 8014aa4 <_calloc_r+0x1c>
 8014a90:	4611      	mov	r1, r2
 8014a92:	9201      	str	r2, [sp, #4]
 8014a94:	f000 f87a 	bl	8014b8c <_malloc_r>
 8014a98:	9a01      	ldr	r2, [sp, #4]
 8014a9a:	4605      	mov	r5, r0
 8014a9c:	b930      	cbnz	r0, 8014aac <_calloc_r+0x24>
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	b003      	add	sp, #12
 8014aa2:	bd30      	pop	{r4, r5, pc}
 8014aa4:	220c      	movs	r2, #12
 8014aa6:	6002      	str	r2, [r0, #0]
 8014aa8:	2500      	movs	r5, #0
 8014aaa:	e7f8      	b.n	8014a9e <_calloc_r+0x16>
 8014aac:	4621      	mov	r1, r4
 8014aae:	f7fd feb3 	bl	8012818 <memset>
 8014ab2:	e7f4      	b.n	8014a9e <_calloc_r+0x16>

08014ab4 <_free_r>:
 8014ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ab6:	2900      	cmp	r1, #0
 8014ab8:	d044      	beq.n	8014b44 <_free_r+0x90>
 8014aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014abe:	9001      	str	r0, [sp, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8014ac6:	bfb8      	it	lt
 8014ac8:	18e4      	addlt	r4, r4, r3
 8014aca:	f000 f9bf 	bl	8014e4c <__malloc_lock>
 8014ace:	4a1e      	ldr	r2, [pc, #120]	; (8014b48 <_free_r+0x94>)
 8014ad0:	9801      	ldr	r0, [sp, #4]
 8014ad2:	6813      	ldr	r3, [r2, #0]
 8014ad4:	b933      	cbnz	r3, 8014ae4 <_free_r+0x30>
 8014ad6:	6063      	str	r3, [r4, #4]
 8014ad8:	6014      	str	r4, [r2, #0]
 8014ada:	b003      	add	sp, #12
 8014adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ae0:	f000 b9ba 	b.w	8014e58 <__malloc_unlock>
 8014ae4:	42a3      	cmp	r3, r4
 8014ae6:	d908      	bls.n	8014afa <_free_r+0x46>
 8014ae8:	6825      	ldr	r5, [r4, #0]
 8014aea:	1961      	adds	r1, r4, r5
 8014aec:	428b      	cmp	r3, r1
 8014aee:	bf01      	itttt	eq
 8014af0:	6819      	ldreq	r1, [r3, #0]
 8014af2:	685b      	ldreq	r3, [r3, #4]
 8014af4:	1949      	addeq	r1, r1, r5
 8014af6:	6021      	streq	r1, [r4, #0]
 8014af8:	e7ed      	b.n	8014ad6 <_free_r+0x22>
 8014afa:	461a      	mov	r2, r3
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	b10b      	cbz	r3, 8014b04 <_free_r+0x50>
 8014b00:	42a3      	cmp	r3, r4
 8014b02:	d9fa      	bls.n	8014afa <_free_r+0x46>
 8014b04:	6811      	ldr	r1, [r2, #0]
 8014b06:	1855      	adds	r5, r2, r1
 8014b08:	42a5      	cmp	r5, r4
 8014b0a:	d10b      	bne.n	8014b24 <_free_r+0x70>
 8014b0c:	6824      	ldr	r4, [r4, #0]
 8014b0e:	4421      	add	r1, r4
 8014b10:	1854      	adds	r4, r2, r1
 8014b12:	42a3      	cmp	r3, r4
 8014b14:	6011      	str	r1, [r2, #0]
 8014b16:	d1e0      	bne.n	8014ada <_free_r+0x26>
 8014b18:	681c      	ldr	r4, [r3, #0]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	6053      	str	r3, [r2, #4]
 8014b1e:	4421      	add	r1, r4
 8014b20:	6011      	str	r1, [r2, #0]
 8014b22:	e7da      	b.n	8014ada <_free_r+0x26>
 8014b24:	d902      	bls.n	8014b2c <_free_r+0x78>
 8014b26:	230c      	movs	r3, #12
 8014b28:	6003      	str	r3, [r0, #0]
 8014b2a:	e7d6      	b.n	8014ada <_free_r+0x26>
 8014b2c:	6825      	ldr	r5, [r4, #0]
 8014b2e:	1961      	adds	r1, r4, r5
 8014b30:	428b      	cmp	r3, r1
 8014b32:	bf04      	itt	eq
 8014b34:	6819      	ldreq	r1, [r3, #0]
 8014b36:	685b      	ldreq	r3, [r3, #4]
 8014b38:	6063      	str	r3, [r4, #4]
 8014b3a:	bf04      	itt	eq
 8014b3c:	1949      	addeq	r1, r1, r5
 8014b3e:	6021      	streq	r1, [r4, #0]
 8014b40:	6054      	str	r4, [r2, #4]
 8014b42:	e7ca      	b.n	8014ada <_free_r+0x26>
 8014b44:	b003      	add	sp, #12
 8014b46:	bd30      	pop	{r4, r5, pc}
 8014b48:	24001754 	.word	0x24001754

08014b4c <sbrk_aligned>:
 8014b4c:	b570      	push	{r4, r5, r6, lr}
 8014b4e:	4e0e      	ldr	r6, [pc, #56]	; (8014b88 <sbrk_aligned+0x3c>)
 8014b50:	460c      	mov	r4, r1
 8014b52:	6831      	ldr	r1, [r6, #0]
 8014b54:	4605      	mov	r5, r0
 8014b56:	b911      	cbnz	r1, 8014b5e <sbrk_aligned+0x12>
 8014b58:	f000 f88c 	bl	8014c74 <_sbrk_r>
 8014b5c:	6030      	str	r0, [r6, #0]
 8014b5e:	4621      	mov	r1, r4
 8014b60:	4628      	mov	r0, r5
 8014b62:	f000 f887 	bl	8014c74 <_sbrk_r>
 8014b66:	1c43      	adds	r3, r0, #1
 8014b68:	d00a      	beq.n	8014b80 <sbrk_aligned+0x34>
 8014b6a:	1cc4      	adds	r4, r0, #3
 8014b6c:	f024 0403 	bic.w	r4, r4, #3
 8014b70:	42a0      	cmp	r0, r4
 8014b72:	d007      	beq.n	8014b84 <sbrk_aligned+0x38>
 8014b74:	1a21      	subs	r1, r4, r0
 8014b76:	4628      	mov	r0, r5
 8014b78:	f000 f87c 	bl	8014c74 <_sbrk_r>
 8014b7c:	3001      	adds	r0, #1
 8014b7e:	d101      	bne.n	8014b84 <sbrk_aligned+0x38>
 8014b80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b84:	4620      	mov	r0, r4
 8014b86:	bd70      	pop	{r4, r5, r6, pc}
 8014b88:	24001758 	.word	0x24001758

08014b8c <_malloc_r>:
 8014b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b90:	1ccd      	adds	r5, r1, #3
 8014b92:	f025 0503 	bic.w	r5, r5, #3
 8014b96:	3508      	adds	r5, #8
 8014b98:	2d0c      	cmp	r5, #12
 8014b9a:	bf38      	it	cc
 8014b9c:	250c      	movcc	r5, #12
 8014b9e:	2d00      	cmp	r5, #0
 8014ba0:	4607      	mov	r7, r0
 8014ba2:	db01      	blt.n	8014ba8 <_malloc_r+0x1c>
 8014ba4:	42a9      	cmp	r1, r5
 8014ba6:	d905      	bls.n	8014bb4 <_malloc_r+0x28>
 8014ba8:	230c      	movs	r3, #12
 8014baa:	603b      	str	r3, [r7, #0]
 8014bac:	2600      	movs	r6, #0
 8014bae:	4630      	mov	r0, r6
 8014bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb4:	4e2e      	ldr	r6, [pc, #184]	; (8014c70 <_malloc_r+0xe4>)
 8014bb6:	f000 f949 	bl	8014e4c <__malloc_lock>
 8014bba:	6833      	ldr	r3, [r6, #0]
 8014bbc:	461c      	mov	r4, r3
 8014bbe:	bb34      	cbnz	r4, 8014c0e <_malloc_r+0x82>
 8014bc0:	4629      	mov	r1, r5
 8014bc2:	4638      	mov	r0, r7
 8014bc4:	f7ff ffc2 	bl	8014b4c <sbrk_aligned>
 8014bc8:	1c43      	adds	r3, r0, #1
 8014bca:	4604      	mov	r4, r0
 8014bcc:	d14d      	bne.n	8014c6a <_malloc_r+0xde>
 8014bce:	6834      	ldr	r4, [r6, #0]
 8014bd0:	4626      	mov	r6, r4
 8014bd2:	2e00      	cmp	r6, #0
 8014bd4:	d140      	bne.n	8014c58 <_malloc_r+0xcc>
 8014bd6:	6823      	ldr	r3, [r4, #0]
 8014bd8:	4631      	mov	r1, r6
 8014bda:	4638      	mov	r0, r7
 8014bdc:	eb04 0803 	add.w	r8, r4, r3
 8014be0:	f000 f848 	bl	8014c74 <_sbrk_r>
 8014be4:	4580      	cmp	r8, r0
 8014be6:	d13a      	bne.n	8014c5e <_malloc_r+0xd2>
 8014be8:	6821      	ldr	r1, [r4, #0]
 8014bea:	3503      	adds	r5, #3
 8014bec:	1a6d      	subs	r5, r5, r1
 8014bee:	f025 0503 	bic.w	r5, r5, #3
 8014bf2:	3508      	adds	r5, #8
 8014bf4:	2d0c      	cmp	r5, #12
 8014bf6:	bf38      	it	cc
 8014bf8:	250c      	movcc	r5, #12
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	4638      	mov	r0, r7
 8014bfe:	f7ff ffa5 	bl	8014b4c <sbrk_aligned>
 8014c02:	3001      	adds	r0, #1
 8014c04:	d02b      	beq.n	8014c5e <_malloc_r+0xd2>
 8014c06:	6823      	ldr	r3, [r4, #0]
 8014c08:	442b      	add	r3, r5
 8014c0a:	6023      	str	r3, [r4, #0]
 8014c0c:	e00e      	b.n	8014c2c <_malloc_r+0xa0>
 8014c0e:	6822      	ldr	r2, [r4, #0]
 8014c10:	1b52      	subs	r2, r2, r5
 8014c12:	d41e      	bmi.n	8014c52 <_malloc_r+0xc6>
 8014c14:	2a0b      	cmp	r2, #11
 8014c16:	d916      	bls.n	8014c46 <_malloc_r+0xba>
 8014c18:	1961      	adds	r1, r4, r5
 8014c1a:	42a3      	cmp	r3, r4
 8014c1c:	6025      	str	r5, [r4, #0]
 8014c1e:	bf18      	it	ne
 8014c20:	6059      	strne	r1, [r3, #4]
 8014c22:	6863      	ldr	r3, [r4, #4]
 8014c24:	bf08      	it	eq
 8014c26:	6031      	streq	r1, [r6, #0]
 8014c28:	5162      	str	r2, [r4, r5]
 8014c2a:	604b      	str	r3, [r1, #4]
 8014c2c:	4638      	mov	r0, r7
 8014c2e:	f104 060b 	add.w	r6, r4, #11
 8014c32:	f000 f911 	bl	8014e58 <__malloc_unlock>
 8014c36:	f026 0607 	bic.w	r6, r6, #7
 8014c3a:	1d23      	adds	r3, r4, #4
 8014c3c:	1af2      	subs	r2, r6, r3
 8014c3e:	d0b6      	beq.n	8014bae <_malloc_r+0x22>
 8014c40:	1b9b      	subs	r3, r3, r6
 8014c42:	50a3      	str	r3, [r4, r2]
 8014c44:	e7b3      	b.n	8014bae <_malloc_r+0x22>
 8014c46:	6862      	ldr	r2, [r4, #4]
 8014c48:	42a3      	cmp	r3, r4
 8014c4a:	bf0c      	ite	eq
 8014c4c:	6032      	streq	r2, [r6, #0]
 8014c4e:	605a      	strne	r2, [r3, #4]
 8014c50:	e7ec      	b.n	8014c2c <_malloc_r+0xa0>
 8014c52:	4623      	mov	r3, r4
 8014c54:	6864      	ldr	r4, [r4, #4]
 8014c56:	e7b2      	b.n	8014bbe <_malloc_r+0x32>
 8014c58:	4634      	mov	r4, r6
 8014c5a:	6876      	ldr	r6, [r6, #4]
 8014c5c:	e7b9      	b.n	8014bd2 <_malloc_r+0x46>
 8014c5e:	230c      	movs	r3, #12
 8014c60:	603b      	str	r3, [r7, #0]
 8014c62:	4638      	mov	r0, r7
 8014c64:	f000 f8f8 	bl	8014e58 <__malloc_unlock>
 8014c68:	e7a1      	b.n	8014bae <_malloc_r+0x22>
 8014c6a:	6025      	str	r5, [r4, #0]
 8014c6c:	e7de      	b.n	8014c2c <_malloc_r+0xa0>
 8014c6e:	bf00      	nop
 8014c70:	24001754 	.word	0x24001754

08014c74 <_sbrk_r>:
 8014c74:	b538      	push	{r3, r4, r5, lr}
 8014c76:	4d06      	ldr	r5, [pc, #24]	; (8014c90 <_sbrk_r+0x1c>)
 8014c78:	2300      	movs	r3, #0
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	4608      	mov	r0, r1
 8014c7e:	602b      	str	r3, [r5, #0]
 8014c80:	f7f0 fd04 	bl	800568c <_sbrk>
 8014c84:	1c43      	adds	r3, r0, #1
 8014c86:	d102      	bne.n	8014c8e <_sbrk_r+0x1a>
 8014c88:	682b      	ldr	r3, [r5, #0]
 8014c8a:	b103      	cbz	r3, 8014c8e <_sbrk_r+0x1a>
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
 8014c90:	2400175c 	.word	0x2400175c

08014c94 <__sread>:
 8014c94:	b510      	push	{r4, lr}
 8014c96:	460c      	mov	r4, r1
 8014c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c9c:	f000 fa3c 	bl	8015118 <_read_r>
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	bfab      	itete	ge
 8014ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8014ca8:	181b      	addge	r3, r3, r0
 8014caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014cae:	bfac      	ite	ge
 8014cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014cb2:	81a3      	strhlt	r3, [r4, #12]
 8014cb4:	bd10      	pop	{r4, pc}

08014cb6 <__swrite>:
 8014cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cba:	461f      	mov	r7, r3
 8014cbc:	898b      	ldrh	r3, [r1, #12]
 8014cbe:	05db      	lsls	r3, r3, #23
 8014cc0:	4605      	mov	r5, r0
 8014cc2:	460c      	mov	r4, r1
 8014cc4:	4616      	mov	r6, r2
 8014cc6:	d505      	bpl.n	8014cd4 <__swrite+0x1e>
 8014cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ccc:	2302      	movs	r3, #2
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f000 f898 	bl	8014e04 <_lseek_r>
 8014cd4:	89a3      	ldrh	r3, [r4, #12]
 8014cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cde:	81a3      	strh	r3, [r4, #12]
 8014ce0:	4632      	mov	r2, r6
 8014ce2:	463b      	mov	r3, r7
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cea:	f000 b817 	b.w	8014d1c <_write_r>

08014cee <__sseek>:
 8014cee:	b510      	push	{r4, lr}
 8014cf0:	460c      	mov	r4, r1
 8014cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cf6:	f000 f885 	bl	8014e04 <_lseek_r>
 8014cfa:	1c43      	adds	r3, r0, #1
 8014cfc:	89a3      	ldrh	r3, [r4, #12]
 8014cfe:	bf15      	itete	ne
 8014d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d0a:	81a3      	strheq	r3, [r4, #12]
 8014d0c:	bf18      	it	ne
 8014d0e:	81a3      	strhne	r3, [r4, #12]
 8014d10:	bd10      	pop	{r4, pc}

08014d12 <__sclose>:
 8014d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d16:	f000 b831 	b.w	8014d7c <_close_r>
	...

08014d1c <_write_r>:
 8014d1c:	b538      	push	{r3, r4, r5, lr}
 8014d1e:	4d07      	ldr	r5, [pc, #28]	; (8014d3c <_write_r+0x20>)
 8014d20:	4604      	mov	r4, r0
 8014d22:	4608      	mov	r0, r1
 8014d24:	4611      	mov	r1, r2
 8014d26:	2200      	movs	r2, #0
 8014d28:	602a      	str	r2, [r5, #0]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	f7f0 fc5d 	bl	80055ea <_write>
 8014d30:	1c43      	adds	r3, r0, #1
 8014d32:	d102      	bne.n	8014d3a <_write_r+0x1e>
 8014d34:	682b      	ldr	r3, [r5, #0]
 8014d36:	b103      	cbz	r3, 8014d3a <_write_r+0x1e>
 8014d38:	6023      	str	r3, [r4, #0]
 8014d3a:	bd38      	pop	{r3, r4, r5, pc}
 8014d3c:	2400175c 	.word	0x2400175c

08014d40 <__assert_func>:
 8014d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d42:	4614      	mov	r4, r2
 8014d44:	461a      	mov	r2, r3
 8014d46:	4b09      	ldr	r3, [pc, #36]	; (8014d6c <__assert_func+0x2c>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	4605      	mov	r5, r0
 8014d4c:	68d8      	ldr	r0, [r3, #12]
 8014d4e:	b14c      	cbz	r4, 8014d64 <__assert_func+0x24>
 8014d50:	4b07      	ldr	r3, [pc, #28]	; (8014d70 <__assert_func+0x30>)
 8014d52:	9100      	str	r1, [sp, #0]
 8014d54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d58:	4906      	ldr	r1, [pc, #24]	; (8014d74 <__assert_func+0x34>)
 8014d5a:	462b      	mov	r3, r5
 8014d5c:	f000 f81e 	bl	8014d9c <fiprintf>
 8014d60:	f000 f9f9 	bl	8015156 <abort>
 8014d64:	4b04      	ldr	r3, [pc, #16]	; (8014d78 <__assert_func+0x38>)
 8014d66:	461c      	mov	r4, r3
 8014d68:	e7f3      	b.n	8014d52 <__assert_func+0x12>
 8014d6a:	bf00      	nop
 8014d6c:	24000240 	.word	0x24000240
 8014d70:	08016fec 	.word	0x08016fec
 8014d74:	08016ff9 	.word	0x08016ff9
 8014d78:	08017027 	.word	0x08017027

08014d7c <_close_r>:
 8014d7c:	b538      	push	{r3, r4, r5, lr}
 8014d7e:	4d06      	ldr	r5, [pc, #24]	; (8014d98 <_close_r+0x1c>)
 8014d80:	2300      	movs	r3, #0
 8014d82:	4604      	mov	r4, r0
 8014d84:	4608      	mov	r0, r1
 8014d86:	602b      	str	r3, [r5, #0]
 8014d88:	f7f0 fc4b 	bl	8005622 <_close>
 8014d8c:	1c43      	adds	r3, r0, #1
 8014d8e:	d102      	bne.n	8014d96 <_close_r+0x1a>
 8014d90:	682b      	ldr	r3, [r5, #0]
 8014d92:	b103      	cbz	r3, 8014d96 <_close_r+0x1a>
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	2400175c 	.word	0x2400175c

08014d9c <fiprintf>:
 8014d9c:	b40e      	push	{r1, r2, r3}
 8014d9e:	b503      	push	{r0, r1, lr}
 8014da0:	4601      	mov	r1, r0
 8014da2:	ab03      	add	r3, sp, #12
 8014da4:	4805      	ldr	r0, [pc, #20]	; (8014dbc <fiprintf+0x20>)
 8014da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014daa:	6800      	ldr	r0, [r0, #0]
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	f000 f883 	bl	8014eb8 <_vfiprintf_r>
 8014db2:	b002      	add	sp, #8
 8014db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014db8:	b003      	add	sp, #12
 8014dba:	4770      	bx	lr
 8014dbc:	24000240 	.word	0x24000240

08014dc0 <_fstat_r>:
 8014dc0:	b538      	push	{r3, r4, r5, lr}
 8014dc2:	4d07      	ldr	r5, [pc, #28]	; (8014de0 <_fstat_r+0x20>)
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	4608      	mov	r0, r1
 8014dca:	4611      	mov	r1, r2
 8014dcc:	602b      	str	r3, [r5, #0]
 8014dce:	f7f0 fc34 	bl	800563a <_fstat>
 8014dd2:	1c43      	adds	r3, r0, #1
 8014dd4:	d102      	bne.n	8014ddc <_fstat_r+0x1c>
 8014dd6:	682b      	ldr	r3, [r5, #0]
 8014dd8:	b103      	cbz	r3, 8014ddc <_fstat_r+0x1c>
 8014dda:	6023      	str	r3, [r4, #0]
 8014ddc:	bd38      	pop	{r3, r4, r5, pc}
 8014dde:	bf00      	nop
 8014de0:	2400175c 	.word	0x2400175c

08014de4 <_isatty_r>:
 8014de4:	b538      	push	{r3, r4, r5, lr}
 8014de6:	4d06      	ldr	r5, [pc, #24]	; (8014e00 <_isatty_r+0x1c>)
 8014de8:	2300      	movs	r3, #0
 8014dea:	4604      	mov	r4, r0
 8014dec:	4608      	mov	r0, r1
 8014dee:	602b      	str	r3, [r5, #0]
 8014df0:	f7f0 fc33 	bl	800565a <_isatty>
 8014df4:	1c43      	adds	r3, r0, #1
 8014df6:	d102      	bne.n	8014dfe <_isatty_r+0x1a>
 8014df8:	682b      	ldr	r3, [r5, #0]
 8014dfa:	b103      	cbz	r3, 8014dfe <_isatty_r+0x1a>
 8014dfc:	6023      	str	r3, [r4, #0]
 8014dfe:	bd38      	pop	{r3, r4, r5, pc}
 8014e00:	2400175c 	.word	0x2400175c

08014e04 <_lseek_r>:
 8014e04:	b538      	push	{r3, r4, r5, lr}
 8014e06:	4d07      	ldr	r5, [pc, #28]	; (8014e24 <_lseek_r+0x20>)
 8014e08:	4604      	mov	r4, r0
 8014e0a:	4608      	mov	r0, r1
 8014e0c:	4611      	mov	r1, r2
 8014e0e:	2200      	movs	r2, #0
 8014e10:	602a      	str	r2, [r5, #0]
 8014e12:	461a      	mov	r2, r3
 8014e14:	f7f0 fc2c 	bl	8005670 <_lseek>
 8014e18:	1c43      	adds	r3, r0, #1
 8014e1a:	d102      	bne.n	8014e22 <_lseek_r+0x1e>
 8014e1c:	682b      	ldr	r3, [r5, #0]
 8014e1e:	b103      	cbz	r3, 8014e22 <_lseek_r+0x1e>
 8014e20:	6023      	str	r3, [r4, #0]
 8014e22:	bd38      	pop	{r3, r4, r5, pc}
 8014e24:	2400175c 	.word	0x2400175c

08014e28 <__ascii_mbtowc>:
 8014e28:	b082      	sub	sp, #8
 8014e2a:	b901      	cbnz	r1, 8014e2e <__ascii_mbtowc+0x6>
 8014e2c:	a901      	add	r1, sp, #4
 8014e2e:	b142      	cbz	r2, 8014e42 <__ascii_mbtowc+0x1a>
 8014e30:	b14b      	cbz	r3, 8014e46 <__ascii_mbtowc+0x1e>
 8014e32:	7813      	ldrb	r3, [r2, #0]
 8014e34:	600b      	str	r3, [r1, #0]
 8014e36:	7812      	ldrb	r2, [r2, #0]
 8014e38:	1e10      	subs	r0, r2, #0
 8014e3a:	bf18      	it	ne
 8014e3c:	2001      	movne	r0, #1
 8014e3e:	b002      	add	sp, #8
 8014e40:	4770      	bx	lr
 8014e42:	4610      	mov	r0, r2
 8014e44:	e7fb      	b.n	8014e3e <__ascii_mbtowc+0x16>
 8014e46:	f06f 0001 	mvn.w	r0, #1
 8014e4a:	e7f8      	b.n	8014e3e <__ascii_mbtowc+0x16>

08014e4c <__malloc_lock>:
 8014e4c:	4801      	ldr	r0, [pc, #4]	; (8014e54 <__malloc_lock+0x8>)
 8014e4e:	f7ff ba1a 	b.w	8014286 <__retarget_lock_acquire_recursive>
 8014e52:	bf00      	nop
 8014e54:	24001750 	.word	0x24001750

08014e58 <__malloc_unlock>:
 8014e58:	4801      	ldr	r0, [pc, #4]	; (8014e60 <__malloc_unlock+0x8>)
 8014e5a:	f7ff ba15 	b.w	8014288 <__retarget_lock_release_recursive>
 8014e5e:	bf00      	nop
 8014e60:	24001750 	.word	0x24001750

08014e64 <__sfputc_r>:
 8014e64:	6893      	ldr	r3, [r2, #8]
 8014e66:	3b01      	subs	r3, #1
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	b410      	push	{r4}
 8014e6c:	6093      	str	r3, [r2, #8]
 8014e6e:	da08      	bge.n	8014e82 <__sfputc_r+0x1e>
 8014e70:	6994      	ldr	r4, [r2, #24]
 8014e72:	42a3      	cmp	r3, r4
 8014e74:	db01      	blt.n	8014e7a <__sfputc_r+0x16>
 8014e76:	290a      	cmp	r1, #10
 8014e78:	d103      	bne.n	8014e82 <__sfputc_r+0x1e>
 8014e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e7e:	f7fe b98b 	b.w	8013198 <__swbuf_r>
 8014e82:	6813      	ldr	r3, [r2, #0]
 8014e84:	1c58      	adds	r0, r3, #1
 8014e86:	6010      	str	r0, [r2, #0]
 8014e88:	7019      	strb	r1, [r3, #0]
 8014e8a:	4608      	mov	r0, r1
 8014e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e90:	4770      	bx	lr

08014e92 <__sfputs_r>:
 8014e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e94:	4606      	mov	r6, r0
 8014e96:	460f      	mov	r7, r1
 8014e98:	4614      	mov	r4, r2
 8014e9a:	18d5      	adds	r5, r2, r3
 8014e9c:	42ac      	cmp	r4, r5
 8014e9e:	d101      	bne.n	8014ea4 <__sfputs_r+0x12>
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	e007      	b.n	8014eb4 <__sfputs_r+0x22>
 8014ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ea8:	463a      	mov	r2, r7
 8014eaa:	4630      	mov	r0, r6
 8014eac:	f7ff ffda 	bl	8014e64 <__sfputc_r>
 8014eb0:	1c43      	adds	r3, r0, #1
 8014eb2:	d1f3      	bne.n	8014e9c <__sfputs_r+0xa>
 8014eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014eb8 <_vfiprintf_r>:
 8014eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ebc:	460d      	mov	r5, r1
 8014ebe:	b09d      	sub	sp, #116	; 0x74
 8014ec0:	4614      	mov	r4, r2
 8014ec2:	4698      	mov	r8, r3
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	b118      	cbz	r0, 8014ed0 <_vfiprintf_r+0x18>
 8014ec8:	6983      	ldr	r3, [r0, #24]
 8014eca:	b90b      	cbnz	r3, 8014ed0 <_vfiprintf_r+0x18>
 8014ecc:	f7ff f938 	bl	8014140 <__sinit>
 8014ed0:	4b89      	ldr	r3, [pc, #548]	; (80150f8 <_vfiprintf_r+0x240>)
 8014ed2:	429d      	cmp	r5, r3
 8014ed4:	d11b      	bne.n	8014f0e <_vfiprintf_r+0x56>
 8014ed6:	6875      	ldr	r5, [r6, #4]
 8014ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014eda:	07d9      	lsls	r1, r3, #31
 8014edc:	d405      	bmi.n	8014eea <_vfiprintf_r+0x32>
 8014ede:	89ab      	ldrh	r3, [r5, #12]
 8014ee0:	059a      	lsls	r2, r3, #22
 8014ee2:	d402      	bmi.n	8014eea <_vfiprintf_r+0x32>
 8014ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ee6:	f7ff f9ce 	bl	8014286 <__retarget_lock_acquire_recursive>
 8014eea:	89ab      	ldrh	r3, [r5, #12]
 8014eec:	071b      	lsls	r3, r3, #28
 8014eee:	d501      	bpl.n	8014ef4 <_vfiprintf_r+0x3c>
 8014ef0:	692b      	ldr	r3, [r5, #16]
 8014ef2:	b9eb      	cbnz	r3, 8014f30 <_vfiprintf_r+0x78>
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f7fe f9a0 	bl	801323c <__swsetup_r>
 8014efc:	b1c0      	cbz	r0, 8014f30 <_vfiprintf_r+0x78>
 8014efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f00:	07dc      	lsls	r4, r3, #31
 8014f02:	d50e      	bpl.n	8014f22 <_vfiprintf_r+0x6a>
 8014f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f08:	b01d      	add	sp, #116	; 0x74
 8014f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0e:	4b7b      	ldr	r3, [pc, #492]	; (80150fc <_vfiprintf_r+0x244>)
 8014f10:	429d      	cmp	r5, r3
 8014f12:	d101      	bne.n	8014f18 <_vfiprintf_r+0x60>
 8014f14:	68b5      	ldr	r5, [r6, #8]
 8014f16:	e7df      	b.n	8014ed8 <_vfiprintf_r+0x20>
 8014f18:	4b79      	ldr	r3, [pc, #484]	; (8015100 <_vfiprintf_r+0x248>)
 8014f1a:	429d      	cmp	r5, r3
 8014f1c:	bf08      	it	eq
 8014f1e:	68f5      	ldreq	r5, [r6, #12]
 8014f20:	e7da      	b.n	8014ed8 <_vfiprintf_r+0x20>
 8014f22:	89ab      	ldrh	r3, [r5, #12]
 8014f24:	0598      	lsls	r0, r3, #22
 8014f26:	d4ed      	bmi.n	8014f04 <_vfiprintf_r+0x4c>
 8014f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f2a:	f7ff f9ad 	bl	8014288 <__retarget_lock_release_recursive>
 8014f2e:	e7e9      	b.n	8014f04 <_vfiprintf_r+0x4c>
 8014f30:	2300      	movs	r3, #0
 8014f32:	9309      	str	r3, [sp, #36]	; 0x24
 8014f34:	2320      	movs	r3, #32
 8014f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f3e:	2330      	movs	r3, #48	; 0x30
 8014f40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015104 <_vfiprintf_r+0x24c>
 8014f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f48:	f04f 0901 	mov.w	r9, #1
 8014f4c:	4623      	mov	r3, r4
 8014f4e:	469a      	mov	sl, r3
 8014f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f54:	b10a      	cbz	r2, 8014f5a <_vfiprintf_r+0xa2>
 8014f56:	2a25      	cmp	r2, #37	; 0x25
 8014f58:	d1f9      	bne.n	8014f4e <_vfiprintf_r+0x96>
 8014f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8014f5e:	d00b      	beq.n	8014f78 <_vfiprintf_r+0xc0>
 8014f60:	465b      	mov	r3, fp
 8014f62:	4622      	mov	r2, r4
 8014f64:	4629      	mov	r1, r5
 8014f66:	4630      	mov	r0, r6
 8014f68:	f7ff ff93 	bl	8014e92 <__sfputs_r>
 8014f6c:	3001      	adds	r0, #1
 8014f6e:	f000 80aa 	beq.w	80150c6 <_vfiprintf_r+0x20e>
 8014f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f74:	445a      	add	r2, fp
 8014f76:	9209      	str	r2, [sp, #36]	; 0x24
 8014f78:	f89a 3000 	ldrb.w	r3, [sl]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f000 80a2 	beq.w	80150c6 <_vfiprintf_r+0x20e>
 8014f82:	2300      	movs	r3, #0
 8014f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f8c:	f10a 0a01 	add.w	sl, sl, #1
 8014f90:	9304      	str	r3, [sp, #16]
 8014f92:	9307      	str	r3, [sp, #28]
 8014f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f98:	931a      	str	r3, [sp, #104]	; 0x68
 8014f9a:	4654      	mov	r4, sl
 8014f9c:	2205      	movs	r2, #5
 8014f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fa2:	4858      	ldr	r0, [pc, #352]	; (8015104 <_vfiprintf_r+0x24c>)
 8014fa4:	f7eb f9a4 	bl	80002f0 <memchr>
 8014fa8:	9a04      	ldr	r2, [sp, #16]
 8014faa:	b9d8      	cbnz	r0, 8014fe4 <_vfiprintf_r+0x12c>
 8014fac:	06d1      	lsls	r1, r2, #27
 8014fae:	bf44      	itt	mi
 8014fb0:	2320      	movmi	r3, #32
 8014fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fb6:	0713      	lsls	r3, r2, #28
 8014fb8:	bf44      	itt	mi
 8014fba:	232b      	movmi	r3, #43	; 0x2b
 8014fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8014fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8014fc6:	d015      	beq.n	8014ff4 <_vfiprintf_r+0x13c>
 8014fc8:	9a07      	ldr	r2, [sp, #28]
 8014fca:	4654      	mov	r4, sl
 8014fcc:	2000      	movs	r0, #0
 8014fce:	f04f 0c0a 	mov.w	ip, #10
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fd8:	3b30      	subs	r3, #48	; 0x30
 8014fda:	2b09      	cmp	r3, #9
 8014fdc:	d94e      	bls.n	801507c <_vfiprintf_r+0x1c4>
 8014fde:	b1b0      	cbz	r0, 801500e <_vfiprintf_r+0x156>
 8014fe0:	9207      	str	r2, [sp, #28]
 8014fe2:	e014      	b.n	801500e <_vfiprintf_r+0x156>
 8014fe4:	eba0 0308 	sub.w	r3, r0, r8
 8014fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8014fec:	4313      	orrs	r3, r2
 8014fee:	9304      	str	r3, [sp, #16]
 8014ff0:	46a2      	mov	sl, r4
 8014ff2:	e7d2      	b.n	8014f9a <_vfiprintf_r+0xe2>
 8014ff4:	9b03      	ldr	r3, [sp, #12]
 8014ff6:	1d19      	adds	r1, r3, #4
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	9103      	str	r1, [sp, #12]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	bfbb      	ittet	lt
 8015000:	425b      	neglt	r3, r3
 8015002:	f042 0202 	orrlt.w	r2, r2, #2
 8015006:	9307      	strge	r3, [sp, #28]
 8015008:	9307      	strlt	r3, [sp, #28]
 801500a:	bfb8      	it	lt
 801500c:	9204      	strlt	r2, [sp, #16]
 801500e:	7823      	ldrb	r3, [r4, #0]
 8015010:	2b2e      	cmp	r3, #46	; 0x2e
 8015012:	d10c      	bne.n	801502e <_vfiprintf_r+0x176>
 8015014:	7863      	ldrb	r3, [r4, #1]
 8015016:	2b2a      	cmp	r3, #42	; 0x2a
 8015018:	d135      	bne.n	8015086 <_vfiprintf_r+0x1ce>
 801501a:	9b03      	ldr	r3, [sp, #12]
 801501c:	1d1a      	adds	r2, r3, #4
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	9203      	str	r2, [sp, #12]
 8015022:	2b00      	cmp	r3, #0
 8015024:	bfb8      	it	lt
 8015026:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801502a:	3402      	adds	r4, #2
 801502c:	9305      	str	r3, [sp, #20]
 801502e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015114 <_vfiprintf_r+0x25c>
 8015032:	7821      	ldrb	r1, [r4, #0]
 8015034:	2203      	movs	r2, #3
 8015036:	4650      	mov	r0, sl
 8015038:	f7eb f95a 	bl	80002f0 <memchr>
 801503c:	b140      	cbz	r0, 8015050 <_vfiprintf_r+0x198>
 801503e:	2340      	movs	r3, #64	; 0x40
 8015040:	eba0 000a 	sub.w	r0, r0, sl
 8015044:	fa03 f000 	lsl.w	r0, r3, r0
 8015048:	9b04      	ldr	r3, [sp, #16]
 801504a:	4303      	orrs	r3, r0
 801504c:	3401      	adds	r4, #1
 801504e:	9304      	str	r3, [sp, #16]
 8015050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015054:	482c      	ldr	r0, [pc, #176]	; (8015108 <_vfiprintf_r+0x250>)
 8015056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801505a:	2206      	movs	r2, #6
 801505c:	f7eb f948 	bl	80002f0 <memchr>
 8015060:	2800      	cmp	r0, #0
 8015062:	d03f      	beq.n	80150e4 <_vfiprintf_r+0x22c>
 8015064:	4b29      	ldr	r3, [pc, #164]	; (801510c <_vfiprintf_r+0x254>)
 8015066:	bb1b      	cbnz	r3, 80150b0 <_vfiprintf_r+0x1f8>
 8015068:	9b03      	ldr	r3, [sp, #12]
 801506a:	3307      	adds	r3, #7
 801506c:	f023 0307 	bic.w	r3, r3, #7
 8015070:	3308      	adds	r3, #8
 8015072:	9303      	str	r3, [sp, #12]
 8015074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015076:	443b      	add	r3, r7
 8015078:	9309      	str	r3, [sp, #36]	; 0x24
 801507a:	e767      	b.n	8014f4c <_vfiprintf_r+0x94>
 801507c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015080:	460c      	mov	r4, r1
 8015082:	2001      	movs	r0, #1
 8015084:	e7a5      	b.n	8014fd2 <_vfiprintf_r+0x11a>
 8015086:	2300      	movs	r3, #0
 8015088:	3401      	adds	r4, #1
 801508a:	9305      	str	r3, [sp, #20]
 801508c:	4619      	mov	r1, r3
 801508e:	f04f 0c0a 	mov.w	ip, #10
 8015092:	4620      	mov	r0, r4
 8015094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015098:	3a30      	subs	r2, #48	; 0x30
 801509a:	2a09      	cmp	r2, #9
 801509c:	d903      	bls.n	80150a6 <_vfiprintf_r+0x1ee>
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d0c5      	beq.n	801502e <_vfiprintf_r+0x176>
 80150a2:	9105      	str	r1, [sp, #20]
 80150a4:	e7c3      	b.n	801502e <_vfiprintf_r+0x176>
 80150a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80150aa:	4604      	mov	r4, r0
 80150ac:	2301      	movs	r3, #1
 80150ae:	e7f0      	b.n	8015092 <_vfiprintf_r+0x1da>
 80150b0:	ab03      	add	r3, sp, #12
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	462a      	mov	r2, r5
 80150b6:	4b16      	ldr	r3, [pc, #88]	; (8015110 <_vfiprintf_r+0x258>)
 80150b8:	a904      	add	r1, sp, #16
 80150ba:	4630      	mov	r0, r6
 80150bc:	f7fd fc44 	bl	8012948 <_printf_float>
 80150c0:	4607      	mov	r7, r0
 80150c2:	1c78      	adds	r0, r7, #1
 80150c4:	d1d6      	bne.n	8015074 <_vfiprintf_r+0x1bc>
 80150c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150c8:	07d9      	lsls	r1, r3, #31
 80150ca:	d405      	bmi.n	80150d8 <_vfiprintf_r+0x220>
 80150cc:	89ab      	ldrh	r3, [r5, #12]
 80150ce:	059a      	lsls	r2, r3, #22
 80150d0:	d402      	bmi.n	80150d8 <_vfiprintf_r+0x220>
 80150d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150d4:	f7ff f8d8 	bl	8014288 <__retarget_lock_release_recursive>
 80150d8:	89ab      	ldrh	r3, [r5, #12]
 80150da:	065b      	lsls	r3, r3, #25
 80150dc:	f53f af12 	bmi.w	8014f04 <_vfiprintf_r+0x4c>
 80150e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150e2:	e711      	b.n	8014f08 <_vfiprintf_r+0x50>
 80150e4:	ab03      	add	r3, sp, #12
 80150e6:	9300      	str	r3, [sp, #0]
 80150e8:	462a      	mov	r2, r5
 80150ea:	4b09      	ldr	r3, [pc, #36]	; (8015110 <_vfiprintf_r+0x258>)
 80150ec:	a904      	add	r1, sp, #16
 80150ee:	4630      	mov	r0, r6
 80150f0:	f7fd feb6 	bl	8012e60 <_printf_i>
 80150f4:	e7e4      	b.n	80150c0 <_vfiprintf_r+0x208>
 80150f6:	bf00      	nop
 80150f8:	08016e50 	.word	0x08016e50
 80150fc:	08016e70 	.word	0x08016e70
 8015100:	08016e30 	.word	0x08016e30
 8015104:	08017032 	.word	0x08017032
 8015108:	0801703c 	.word	0x0801703c
 801510c:	08012949 	.word	0x08012949
 8015110:	08014e93 	.word	0x08014e93
 8015114:	08017038 	.word	0x08017038

08015118 <_read_r>:
 8015118:	b538      	push	{r3, r4, r5, lr}
 801511a:	4d07      	ldr	r5, [pc, #28]	; (8015138 <_read_r+0x20>)
 801511c:	4604      	mov	r4, r0
 801511e:	4608      	mov	r0, r1
 8015120:	4611      	mov	r1, r2
 8015122:	2200      	movs	r2, #0
 8015124:	602a      	str	r2, [r5, #0]
 8015126:	461a      	mov	r2, r3
 8015128:	f7f0 fa42 	bl	80055b0 <_read>
 801512c:	1c43      	adds	r3, r0, #1
 801512e:	d102      	bne.n	8015136 <_read_r+0x1e>
 8015130:	682b      	ldr	r3, [r5, #0]
 8015132:	b103      	cbz	r3, 8015136 <_read_r+0x1e>
 8015134:	6023      	str	r3, [r4, #0]
 8015136:	bd38      	pop	{r3, r4, r5, pc}
 8015138:	2400175c 	.word	0x2400175c

0801513c <__ascii_wctomb>:
 801513c:	b149      	cbz	r1, 8015152 <__ascii_wctomb+0x16>
 801513e:	2aff      	cmp	r2, #255	; 0xff
 8015140:	bf85      	ittet	hi
 8015142:	238a      	movhi	r3, #138	; 0x8a
 8015144:	6003      	strhi	r3, [r0, #0]
 8015146:	700a      	strbls	r2, [r1, #0]
 8015148:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801514c:	bf98      	it	ls
 801514e:	2001      	movls	r0, #1
 8015150:	4770      	bx	lr
 8015152:	4608      	mov	r0, r1
 8015154:	4770      	bx	lr

08015156 <abort>:
 8015156:	b508      	push	{r3, lr}
 8015158:	2006      	movs	r0, #6
 801515a:	f000 f82b 	bl	80151b4 <raise>
 801515e:	2001      	movs	r0, #1
 8015160:	f7f0 fa1c 	bl	800559c <_exit>

08015164 <_raise_r>:
 8015164:	291f      	cmp	r1, #31
 8015166:	b538      	push	{r3, r4, r5, lr}
 8015168:	4604      	mov	r4, r0
 801516a:	460d      	mov	r5, r1
 801516c:	d904      	bls.n	8015178 <_raise_r+0x14>
 801516e:	2316      	movs	r3, #22
 8015170:	6003      	str	r3, [r0, #0]
 8015172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015176:	bd38      	pop	{r3, r4, r5, pc}
 8015178:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801517a:	b112      	cbz	r2, 8015182 <_raise_r+0x1e>
 801517c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015180:	b94b      	cbnz	r3, 8015196 <_raise_r+0x32>
 8015182:	4620      	mov	r0, r4
 8015184:	f000 f830 	bl	80151e8 <_getpid_r>
 8015188:	462a      	mov	r2, r5
 801518a:	4601      	mov	r1, r0
 801518c:	4620      	mov	r0, r4
 801518e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015192:	f000 b817 	b.w	80151c4 <_kill_r>
 8015196:	2b01      	cmp	r3, #1
 8015198:	d00a      	beq.n	80151b0 <_raise_r+0x4c>
 801519a:	1c59      	adds	r1, r3, #1
 801519c:	d103      	bne.n	80151a6 <_raise_r+0x42>
 801519e:	2316      	movs	r3, #22
 80151a0:	6003      	str	r3, [r0, #0]
 80151a2:	2001      	movs	r0, #1
 80151a4:	e7e7      	b.n	8015176 <_raise_r+0x12>
 80151a6:	2400      	movs	r4, #0
 80151a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80151ac:	4628      	mov	r0, r5
 80151ae:	4798      	blx	r3
 80151b0:	2000      	movs	r0, #0
 80151b2:	e7e0      	b.n	8015176 <_raise_r+0x12>

080151b4 <raise>:
 80151b4:	4b02      	ldr	r3, [pc, #8]	; (80151c0 <raise+0xc>)
 80151b6:	4601      	mov	r1, r0
 80151b8:	6818      	ldr	r0, [r3, #0]
 80151ba:	f7ff bfd3 	b.w	8015164 <_raise_r>
 80151be:	bf00      	nop
 80151c0:	24000240 	.word	0x24000240

080151c4 <_kill_r>:
 80151c4:	b538      	push	{r3, r4, r5, lr}
 80151c6:	4d07      	ldr	r5, [pc, #28]	; (80151e4 <_kill_r+0x20>)
 80151c8:	2300      	movs	r3, #0
 80151ca:	4604      	mov	r4, r0
 80151cc:	4608      	mov	r0, r1
 80151ce:	4611      	mov	r1, r2
 80151d0:	602b      	str	r3, [r5, #0]
 80151d2:	f7f0 f9d3 	bl	800557c <_kill>
 80151d6:	1c43      	adds	r3, r0, #1
 80151d8:	d102      	bne.n	80151e0 <_kill_r+0x1c>
 80151da:	682b      	ldr	r3, [r5, #0]
 80151dc:	b103      	cbz	r3, 80151e0 <_kill_r+0x1c>
 80151de:	6023      	str	r3, [r4, #0]
 80151e0:	bd38      	pop	{r3, r4, r5, pc}
 80151e2:	bf00      	nop
 80151e4:	2400175c 	.word	0x2400175c

080151e8 <_getpid_r>:
 80151e8:	f7f0 b9c0 	b.w	800556c <_getpid>

080151ec <_init>:
 80151ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ee:	bf00      	nop
 80151f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151f2:	bc08      	pop	{r3}
 80151f4:	469e      	mov	lr, r3
 80151f6:	4770      	bx	lr

080151f8 <_fini>:
 80151f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151fa:	bf00      	nop
 80151fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151fe:	bc08      	pop	{r3}
 8015200:	469e      	mov	lr, r3
 8015202:	4770      	bx	lr
