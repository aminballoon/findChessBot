
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d04  08011b90  08011b90  00021b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013894  08013894  00023894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801389c  0801389c  0002389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080138a4  080138a4  000238a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  080138ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f38  240001f4  08013aa0  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400112c  08013aa0  0003112c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e4e0  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b9f  00000000  00000000  0006e702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016d8  00000000  00000000  000742a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001538  00000000  00000000  00075980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e58b  00000000  00000000  00076eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000238e2  00000000  00000000  000b5443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dbd8  00000000  00000000  000d8d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002468fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ebc  00000000  00000000  00246950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b78 	.word	0x08011b78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08011b78 	.word	0x08011b78

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00c f906 	bl	800c8ec <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00c f993 	bl	800ca18 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a32      	ldr	r2, [pc, #200]	; (8000904 <_ZN10RobotJointC1Ev+0xd4>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	2002      	movs	r0, #2
 8000846:	eeb0 0a67 	vmov.f32	s0, s15
 800084a:	f000 fda0 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800084e:	eeb0 7b40 	vmov.f64	d7, d0
 8000852:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	edc3 7a01 	vstr	s15, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	2003      	movs	r0, #3
 8000864:	eeb0 0a67 	vmov.f32	s0, s15
 8000868:	f000 fd91 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800086c:	eeb0 7b40 	vmov.f64	d7, d0
 8000870:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	edc3 7a02 	vstr	s15, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	2004      	movs	r0, #4
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	f000 fd82 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800088a:	eeb0 7b40 	vmov.f64	d7, d0
 800088e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	edc3 7a03 	vstr	s15, [r3, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f04f 0200 	mov.w	r2, #0
 800089e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008b2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f04f 0200 	mov.w	r2, #0
 80008bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <_ZN10RobotJointC1Ev+0xd8>)
 80008ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <_ZN10RobotJointC1Ev+0xd4>)
 80008f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	3a83126f 	.word	0x3a83126f
 8000908:	3f19999a 	.word	0x3f19999a

0800090c <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

}
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
					/ (L3S3 * this->L12);
	this->w_q4 = (Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3);
}
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000922:	b480      	push	{r7}
 8000924:	b091      	sub	sp, #68	; 0x44
 8000926:	af00      	add	r7, sp, #0
 8000928:	61f8      	str	r0, [r7, #28]
 800092a:	ed87 0a06 	vstr	s0, [r7, #24]
 800092e:	edc7 0a05 	vstr	s1, [r7, #20]
 8000932:	ed87 1a04 	vstr	s2, [r7, #16]
 8000936:	edc7 1a03 	vstr	s3, [r7, #12]
 800093a:	ed87 2a02 	vstr	s4, [r7, #8]
 800093e:	edc7 2a01 	vstr	s5, [r7, #4]
 8000942:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000956:	ed97 7a01 	vldr	s14, [r7, #4]
 800095a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800095e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000968:	ed97 7a03 	vldr	s14, [r7, #12]
 800096c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000974:	edd7 7a05 	vldr	s15, [r7, #20]
 8000978:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 800097c:	edd7 6a01 	vldr	s13, [r7, #4]
 8000980:	edd7 7a06 	vldr	s15, [r7, #24]
 8000984:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000988:	edd7 7a06 	vldr	s15, [r7, #24]
 800098c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000990:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000994:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000998:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 800099c:	ed97 7a04 	vldr	s14, [r7, #16]
 80009a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 80009a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80009ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80009b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80009b8:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 80009bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80009c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 80009c8:	ed97 7a00 	vldr	s14, [r7]
 80009cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80009d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 80009d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80009dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 80009e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80009f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 80009f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80009fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000a00:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a08:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a10:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a18:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000a1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000a38:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000a3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a40:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000a44:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000a48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a50:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000a60:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000a64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a68:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a6c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a70:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a78:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a84:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000a88:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000a9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000a9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa2:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000aa6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000aaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000aae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ab6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000aba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000abe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000ac2:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000ac6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000aca:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ace:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ad2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ad6:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000ada:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000ade:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000ae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000aea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000af4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000afc:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000b00:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000b04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b0c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000b1c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000b20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b24:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b28:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b34:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000b38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b40:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000b44:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8000b5e:	bf00      	nop
 8000b60:	3744      	adds	r7, #68	; 0x44
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	ed2d 8b08 	vpush	{d8-d11}
 8000b70:	b08a      	sub	sp, #40	; 0x28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b88:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000b90:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000b98:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ba0:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000ba8:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000bb0:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000bb8:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	ed93 7a00 	vldr	s14, [r3]
 8000bc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000bd4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000bd8:	edd7 7a00 	vldr	s15, [r7]
 8000bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	edd3 6a00 	vldr	s13, [r3]
 8000be6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	ed93 7a00 	vldr	s14, [r3]
 8000bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c14:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	2004      	movs	r0, #4
 8000c20:	eeb0 0a67 	vmov.f32	s0, s15
 8000c24:	f000 fbb3 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000c28:	eeb0 7b40 	vmov.f64	d7, d0
 8000c2c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000c30:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c38:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	ed93 7a00 	vldr	s14, [r3]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	edd3 5a00 	vldr	s11, [r3]
 8000c48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c54:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c60:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000c64:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000c68:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c8e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	2004      	movs	r0, #4
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	f000 fb76 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000caa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000cae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cb2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	ed93 7a00 	vldr	s14, [r3]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	edd3 5a00 	vldr	s11, [r3]
 8000cc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cc6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cce:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cda:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000cde:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000ce2:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000ce6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000cf0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cf4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cfc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edd3 7a00 	vldr	s15, [r3]
 8000d06:	2003      	movs	r0, #3
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	f000 fb3f 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d10:	eeb0 7b40 	vmov.f64	d7, d0
 8000d14:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000d18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000d1c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	ed93 7a00 	vldr	s14, [r3]
 8000d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3e:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000d42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d46:	edd7 7a00 	vldr	s15, [r7]
 8000d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	edd3 5a00 	vldr	s11, [r3]
 8000d54:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000d68:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	edd3 6a00 	vldr	s13, [r3]
 8000d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d8e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	2004      	movs	r0, #4
 8000d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9e:	f000 faf6 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000da2:	eeb0 7b40 	vmov.f64	d7, d0
 8000da6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000daa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000db2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	edd3 5a00 	vldr	s11, [r3]
 8000dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000dca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dce:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dda:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000dde:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000de2:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000de6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	ed93 7a00 	vldr	s14, [r3]
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e06:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e0e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	2004      	movs	r0, #4
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	f000 fab6 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e22:	eeb0 7b40 	vmov.f64	d7, d0
 8000e26:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000e2a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e32:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	ed93 7a00 	vldr	s14, [r3]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edd3 5a00 	vldr	s11, [r3]
 8000e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e46:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e4e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5a:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edd3 6a00 	vldr	s13, [r3]
 8000e70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000e80:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e84:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	2004      	movs	r0, #4
 8000e90:	eeb0 0a67 	vmov.f32	s0, s15
 8000e94:	f000 fa7b 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e98:	eeb0 7b40 	vmov.f64	d7, d0
 8000e9c:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8000ea0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ea4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea8:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	ed93 7a00 	vldr	s14, [r3]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 5a00 	vldr	s11, [r3]
 8000eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ebc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000ec0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ed0:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ed4:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8000ed8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000edc:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ee0:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f02:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	f000 fa3c 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f16:	eeb0 7b40 	vmov.f64	d7, d0
 8000f1a:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8000f1e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f26:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a00 	vldr	s14, [r3]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 5a00 	vldr	s11, [r3]
 8000f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f3a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f42:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4e:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f52:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a00 	vldr	s14, [r3]
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a00 	vldr	s15, [r3]
 8000f88:	2004      	movs	r0, #4
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	f000 f9fe 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f92:	eeb0 7b40 	vmov.f64	d7, d0
 8000f96:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000f9a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa2:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 5a00 	vldr	s11, [r3]
 8000fb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fba:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fbe:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fca:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fce:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edd3 6a00 	vldr	s13, [r3]
 8000fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	2004      	movs	r0, #4
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	f000 f9c3 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001008:	eeb0 7b40 	vmov.f64	d7, d0
 800100c:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001010:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001014:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001018:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edd3 5a00 	vldr	s11, [r3]
 8001028:	edd7 7a04 	vldr	s15, [r7, #16]
 800102c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001030:	edd7 7a06 	vldr	s15, [r7, #24]
 8001034:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001040:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001044:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001048:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800104c:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001050:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 8001054:	edd7 7a03 	vldr	s15, [r7, #12]
 8001058:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	2003      	movs	r0, #3
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	f000 f991 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800106c:	eeb0 7b40 	vmov.f64	d7, d0
 8001070:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001074:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001078:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	edd7 7a04 	vldr	s15, [r7, #16]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800108e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001092:	edd7 7a06 	vldr	s15, [r7, #24]
 8001096:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800109a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800109e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80010a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80010c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ca:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	2003      	movs	r0, #3
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	f000 f958 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010de:	eeb0 7b40 	vmov.f64	d7, d0
 80010e2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80010e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80010ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ee:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80010f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	2003      	movs	r0, #3
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	f000 f942 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800110a:	eeb0 7b40 	vmov.f64	d7, d0
 800110e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001112:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001116:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	ed93 7a00 	vldr	s14, [r3]
 8001120:	edd7 7a04 	vldr	s15, [r7, #16]
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001130:	edd7 7a05 	vldr	s15, [r7, #20]
 8001134:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001138:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	edd7 7a05 	vldr	s15, [r7, #20]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	edd7 7a07 	vldr	s15, [r7, #28]
 800114e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001152:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	2004      	movs	r0, #4
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	f000 f910 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800116e:	eeb0 7b40 	vmov.f64	d7, d0
 8001172:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001176:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800117a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800117e:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	ed93 7a00 	vldr	s14, [r3]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edd3 5a00 	vldr	s11, [r3]
 800118e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001192:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001196:	edd7 7a06 	vldr	s15, [r7, #24]
 800119a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800119e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011aa:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80011b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edd3 6a00 	vldr	s13, [r3]
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011cc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80011d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	2004      	movs	r0, #4
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	f000 f8d3 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011e8:	eeb0 7b40 	vmov.f64	d7, d0
 80011ec:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80011f0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f8:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 5a00 	vldr	s11, [r3]
 8001208:	edd7 7a04 	vldr	s15, [r7, #16]
 800120c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001210:	edd7 7a06 	vldr	s15, [r7, #24]
 8001214:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001220:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001224:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001228:	ee38 7b47 	vsub.f64	d7, d8, d7
 800122c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001236:	edd7 7a04 	vldr	s15, [r7, #16]
 800123a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	2002      	movs	r0, #2
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	f000 f89c 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001256:	eeb0 7b40 	vmov.f64	d7, d0
 800125a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800125e:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001262:	edd7 7a03 	vldr	s15, [r7, #12]
 8001266:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	2003      	movs	r0, #3
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	f000 f88a 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800127a:	eeb0 7b40 	vmov.f64	d7, d0
 800127e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001282:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001286:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	edd7 7a04 	vldr	s15, [r7, #16]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800129c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a8:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	2003      	movs	r0, #3
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f000 f865 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012c4:	eeb0 7b40 	vmov.f64	d7, d0
 80012c8:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80012cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80012d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	edd7 7a04 	vldr	s15, [r7, #16]
 80012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012f6:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80012fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	edd3 6a00 	vldr	s13, [r3]
 800130c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800131c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001320:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	2004      	movs	r0, #4
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f000 f82d 	bl	800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001334:	eeb0 7b40 	vmov.f64	d7, d0
 8001338:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800133c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001340:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001344:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 5a00 	vldr	s11, [r3]
 8001354:	edd7 7a04 	vldr	s15, [r7, #16]
 8001358:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800135c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001360:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800136c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001370:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001374:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001378:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	ecbd 8b08 	vpop	{d8-d11}
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	ed87 0a01 	vstr	s0, [r7, #4]
 8001398:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800139a:	edd7 7a01 	vldr	s15, [r7, #4]
 800139e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	ee06 3a90 	vmov	s13, r3
 80013a8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80013ac:	eeb0 1b46 	vmov.f64	d1, d6
 80013b0:	eeb0 0b47 	vmov.f64	d0, d7
 80013b4:	f00d fc38 	bl	800ec28 <pow>
 80013b8:	eeb0 7b40 	vmov.f64	d7, d0
    }
 80013bc:	eeb0 0b47 	vmov.f64	d0, d7
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	fefb 7a67 	vrintm.f32	s15, s15
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	ed87 0a01 	vstr	s0, [r7, #4]
 80013f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f4:	fef8 7a67 	vrinta.f32	s15, s15
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	22b4      	movs	r2, #180	; 0xb4
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	761a      	strb	r2, [r3, #24]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	22ef      	movs	r2, #239	; 0xef
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
}
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f00a f81c 	bl	800b4cc <HAL_TIM_PWM_Start>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d13f      	bne.n	800152e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691c      	ldr	r4, [r3, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001750 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	f7ff ff87 	bl	80013e6 <_ZSt5roundf>
 80014d8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80014dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	3301      	adds	r3, #1
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001754 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	f7ff ff60 	bl	80013c6 <_ZSt5floorf>
 8001506:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	9600      	str	r6, [sp, #0]
 8001516:	462b      	mov	r3, r5
 8001518:	4622      	mov	r2, r4
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f9cf 	bl	80018c0 <_ZN10ServoMotor10GripperMapElllll>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 800152c:	e176      	b.n	800181c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d13f      	bne.n	80015b6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691c      	ldr	r4, [r3, #16]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	3301      	adds	r3, #1
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001550:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001750 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001558:	eeb0 0a67 	vmov.f32	s0, s15
 800155c:	f7ff ff43 	bl	80013e6 <_ZSt5roundf>
 8001560:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	3301      	adds	r3, #1
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001754 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	f7ff ff1c 	bl	80013c6 <_ZSt5floorf>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9600      	str	r6, [sp, #0]
 800159e:	462b      	mov	r3, r5
 80015a0:	4622      	mov	r2, r4
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f98b 	bl	80018c0 <_ZN10ServoMotor10GripperMapElllll>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b4:	e132      	b.n	800181c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d13f      	bne.n	800163e <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691c      	ldr	r4, [r3, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	3301      	adds	r3, #1
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001750 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80015dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	f7ff feff 	bl	80013e6 <_ZSt5roundf>
 80015e8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80015ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	3301      	adds	r3, #1
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001606:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001754 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800160a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f7ff fed8 	bl	80013c6 <_ZSt5floorf>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800161a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161e:	ee17 3a90 	vmov	r3, s15
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	9600      	str	r6, [sp, #0]
 8001626:	462b      	mov	r3, r5
 8001628:	4622      	mov	r2, r4
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f947 	bl	80018c0 <_ZN10ServoMotor10GripperMapElllll>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800163c:	e0ee      	b.n	800181c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d13f      	bne.n	80016c6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691c      	ldr	r4, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	3301      	adds	r3, #1
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001660:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001750 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	f7ff febb 	bl	80013e6 <_ZSt5roundf>
 8001670:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001678:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	3301      	adds	r3, #1
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001754 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	f7ff fe94 	bl	80013c6 <_ZSt5floorf>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80016a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a6:	ee17 3a90 	vmov	r3, s15
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	9600      	str	r6, [sp, #0]
 80016ae:	462b      	mov	r3, r5
 80016b0:	4622      	mov	r2, r4
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f903 	bl	80018c0 <_ZN10ServoMotor10GripperMapElllll>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016c4:	e0aa      	b.n	800181c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d144      	bne.n	8001758 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691c      	ldr	r4, [r3, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	3301      	adds	r3, #1
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001750 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f7ff fe77 	bl	80013e6 <_ZSt5roundf>
 80016f8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80016fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001700:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	3301      	adds	r3, #1
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001716:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001754 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	f7ff fe50 	bl	80013c6 <_ZSt5floorf>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 800172a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172e:	ee17 3a90 	vmov	r3, s15
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9600      	str	r6, [sp, #0]
 8001736:	462b      	mov	r3, r5
 8001738:	4622      	mov	r2, r4
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8bf 	bl	80018c0 <_ZN10ServoMotor10GripperMapElllll>
 8001742:	4602      	mov	r2, r0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800174c:	e066      	b.n	800181c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 800174e:	bf00      	nop
 8001750:	3d4ccccd 	.word	0x3d4ccccd
 8001754:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b14      	cmp	r3, #20
 800175e:	d13f      	bne.n	80017e0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691c      	ldr	r4, [r3, #16]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	3301      	adds	r3, #1
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177a:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001750 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 800177e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	f7ff fe2e 	bl	80013e6 <_ZSt5roundf>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 800178e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001792:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	3301      	adds	r3, #1
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a8:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001754 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80017ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	f7ff fe07 	bl	80013c6 <_ZSt5floorf>
 80017b8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80017bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c0:	ee17 3a90 	vmov	r3, s15
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	9600      	str	r6, [sp, #0]
 80017c8:	462b      	mov	r3, r5
 80017ca:	4622      	mov	r2, r4
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f876 	bl	80018c0 <_ZN10ServoMotor10GripperMapElllll>
 80017d4:	4602      	mov	r2, r0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017de:	e01d      	b.n	800181c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001824 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	761a      	strb	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	765a      	strb	r2, [r3, #25]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7e5b      	ldrb	r3, [r3, #25]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fe09 	bl	800149c <_ZN10ServoMotor17ServoRotateDegreeEl>
 800188a:	e000      	b.n	800188e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800188c:	bf00      	nop
}
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e1b      	ldrb	r3, [r3, #24]
 80018a0:	f083 0301 	eor.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fdf3 	bl	800149c <_ZN10ServoMotor17ServoRotateDegreeEl>
 80018b6:	e000      	b.n	80018ba <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 80018b8:	bf00      	nop
}
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	69f9      	ldr	r1, [r7, #28]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	1a8a      	subs	r2, r1, r2
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1acb      	subs	r3, r1, r3
 80018e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4413      	add	r3, r2
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001902:	edd7 7a01 	vldr	s15, [r7, #4]
 8001906:	eef0 7ae7 	vabs.f32	s15, s15
 800190a:	eeb0 0a67 	vmov.f32	s0, s15
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001938:	61da      	str	r2, [r3, #28]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a15      	ldr	r2, [pc, #84]	; (8001994 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800193e:	621a      	str	r2, [r3, #32]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	22c7      	movs	r2, #199	; 0xc7
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001962:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001968:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800196a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800199c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f832 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
}
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	41a00000 	.word	0x41a00000
 8001990:	469c4000 	.word	0x469c4000
 8001994:	43480000 	.word	0x43480000
 8001998:	42700000 	.word	0x42700000
 800199c:	00000000 	.word	0x00000000

080019a0 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
}
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f009 fd7f 	bl	800b4cc <HAL_TIM_PWM_Start>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	ed2d 8b02 	vpush	{d8}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80019f4:	eeb0 0a67 	vmov.f32	s0, s15
 80019f8:	f7ff ff7e 	bl	80018f8 <_ZSt4fabsf>
 80019fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e01b      	b.n	8001a5a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	f7ff ff64 	bl	80018f8 <_ZSt4fabsf>
 8001a30:	eeb0 7a40 	vmov.f32	s14, s0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	bfac      	ite	ge
 8001a44:	2301      	movge	r3, #1
 8001a46:	2300      	movlt	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e001      	b.n	8001a5a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a60:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001cfc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	f2c0 80db 	blt.w	8001c26 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6898      	ldr	r0, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f006 ffc3 	bl	8008a08 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001d00 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	f7ff fc99 	bl	80013e6 <_ZSt5roundf>
 8001ab4:	eef0 7a40 	vmov.f32	s15, s0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac2:	ee17 2a90 	vmov	r2, s15
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d113      	bne.n	8001af8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fa5b 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ae2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001af0:	ee17 2a90 	vmov	r2, s15
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001af6:	e1e0      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d113      	bne.n	8001b28 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fa43 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001b12:	eeb0 7b40 	vmov.f64	d7, d0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b20:	ee17 2a90 	vmov	r2, s15
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b26:	e1c8      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d113      	bne.n	8001b58 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fa2b 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001b42:	eeb0 7b40 	vmov.f64	d7, d0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b50:	ee17 2a90 	vmov	r2, s15
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b56:	e1b0      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d113      	bne.n	8001b88 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fa13 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001b72:	eeb0 7b40 	vmov.f64	d7, d0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b80:	ee17 2a90 	vmov	r2, s15
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b86:	e198      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d113      	bne.n	8001bb8 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f9fb 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bb0:	ee17 2a90 	vmov	r2, s15
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bb6:	e180      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b14      	cmp	r3, #20
 8001bbe:	d113      	bne.n	8001be8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f9e3 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001bd2:	eeb0 7b40 	vmov.f64	d7, d0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001be0:	ee17 2a90 	vmov	r2, s15
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001be6:	e168      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c24:	e149      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001d04 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c38:	f200 80e5 	bhi.w	8001e06 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6898      	ldr	r0, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f006 fedd 	bl	8008a08 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	3301      	adds	r3, #1
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001c60:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c64:	f7ff fe48 	bl	80018f8 <_ZSt4fabsf>
 8001c68:	eef0 7a40 	vmov.f32	s15, s0
 8001c6c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001c70:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001d00 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	f7ff fbaf 	bl	80013e6 <_ZSt5roundf>
 8001c88:	eef0 7a40 	vmov.f32	s15, s0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c96:	ee17 2a90 	vmov	r2, s15
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d113      	bne.n	8001ccc <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f971 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001cb6:	eeb0 7b40 	vmov.f64	d7, d0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cc4:	ee17 2a90 	vmov	r2, s15
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cca:	e0f6      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d119      	bne.n	8001d08 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f959 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ce6:	eeb0 7b40 	vmov.f64	d7, d0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cf4:	ee17 2a90 	vmov	r2, s15
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cfa:	e0de      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8001cfc:	3a83126f 	.word	0x3a83126f
 8001d00:	4d64e1c0 	.word	0x4d64e1c0
 8001d04:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d113      	bne.n	8001d38 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f93b 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d22:	eeb0 7b40 	vmov.f64	d7, d0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d30:	ee17 2a90 	vmov	r2, s15
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d36:	e0c0      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d113      	bne.n	8001d68 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f923 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d52:	eeb0 7b40 	vmov.f64	d7, d0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d60:	ee17 2a90 	vmov	r2, s15
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d66:	e0a8      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d113      	bne.n	8001d98 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f90b 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d82:	eeb0 7b40 	vmov.f64	d7, d0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d90:	ee17 2a90 	vmov	r2, s15
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d96:	e090      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b14      	cmp	r3, #20
 8001d9e:	d113      	bne.n	8001dc8 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f8f3 	bl	8001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001db2:	eeb0 7b40 	vmov.f64	d7, d0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc0:	ee17 2a90 	vmov	r2, s15
 8001dc4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001dc6:	e078      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2200      	movs	r2, #0
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e04:	e059      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e18:	e04f      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d105      	bne.n	8001e2e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e2c:	e045      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d105      	bne.n	8001e42 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e40:	e03b      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d105      	bne.n	8001e56 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e54:	e031      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d105      	bne.n	8001e6a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e68:	e027      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b14      	cmp	r3, #20
 8001e70:	d105      	bne.n	8001e7e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e7c:	e01d      	b.n	8001eba <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	ecbd 8b02 	vpop	{d8}
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop

08001ec8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8001ed4:	ed97 0a00 	vldr	s0, [r7]
 8001ed8:	f7ff fd0e 	bl	80018f8 <_ZSt4fabsf>
 8001edc:	eef0 7a40 	vmov.f32	s15, s0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f02:	eeb0 0b47 	vmov.f64	d0, d7
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ffe5 	bl	8001eee <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f24:	eeb0 7b40 	vmov.f64	d7, d0
 8001f28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	0000      	movs	r0, r0
 8001f3c:	0000      	movs	r0, r0
	...

08001f40 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f52:	edd7 7a00 	vldr	s15, [r7]
 8001f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001f72:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001f90 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001f76:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8001f7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fd28 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	54442eea 	.word	0x54442eea
 8001f94:	401921fb 	.word	0x401921fb

08001f98 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001faa:	eeb0 0b47 	vmov.f64	d0, d7
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <MX_CRC_Init+0x54>)
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <MX_CRC_Init+0x58>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_CRC_Init+0x54>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_CRC_Init+0x54>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_CRC_Init+0x54>)
 8001fd0:	f248 0205 	movw	r2, #32773	; 0x8005
 8001fd4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <MX_CRC_Init+0x54>)
 8001fd8:	2208      	movs	r2, #8
 8001fda:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_CRC_Init+0x54>)
 8001fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_CRC_Init+0x54>)
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_CRC_Init+0x54>)
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_CRC_Init+0x54>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_CRC_Init+0x54>)
 8001ff8:	f003 fb1e 	bl	8005638 <HAL_CRC_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8002002:	f001 fb99 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24000920 	.word	0x24000920
 8002010:	58024c00 	.word	0x58024c00

08002014 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <HAL_CRC_MspInit+0x3c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10e      	bne.n	8002044 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_CRC_MspInit+0x40>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202c:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_CRC_MspInit+0x40>)
 800202e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_CRC_MspInit+0x40>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	58024c00 	.word	0x58024c00
 8002054:	58024400 	.word	0x58024400

08002058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_DMA_Init+0x7c>)
 8002060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <MX_DMA_Init+0x7c>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_DMA_Init+0x7c>)
 8002070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	200b      	movs	r0, #11
 8002082:	f003 fa98 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002086:	200b      	movs	r0, #11
 8002088:	f003 faaf 	bl	80055ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	200c      	movs	r0, #12
 8002092:	f003 fa90 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002096:	200c      	movs	r0, #12
 8002098:	f003 faa7 	bl	80055ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	200d      	movs	r0, #13
 80020a2:	f003 fa88 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80020a6:	200d      	movs	r0, #13
 80020a8:	f003 fa9f 	bl	80055ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	200e      	movs	r0, #14
 80020b2:	f003 fa80 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020b6:	200e      	movs	r0, #14
 80020b8:	f003 fa97 	bl	80055ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	200f      	movs	r0, #15
 80020c2:	f003 fa78 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f003 fa8f 	bl	80055ea <HAL_NVIC_EnableIRQ>

}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58024400 	.word	0x58024400

080020d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	; 0x30
 80020dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ee:	4b8e      	ldr	r3, [pc, #568]	; (8002328 <MX_GPIO_Init+0x250>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f4:	4a8c      	ldr	r2, [pc, #560]	; (8002328 <MX_GPIO_Init+0x250>)
 80020f6:	f043 0310 	orr.w	r3, r3, #16
 80020fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020fe:	4b8a      	ldr	r3, [pc, #552]	; (8002328 <MX_GPIO_Init+0x250>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	4b86      	ldr	r3, [pc, #536]	; (8002328 <MX_GPIO_Init+0x250>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002112:	4a85      	ldr	r2, [pc, #532]	; (8002328 <MX_GPIO_Init+0x250>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211c:	4b82      	ldr	r3, [pc, #520]	; (8002328 <MX_GPIO_Init+0x250>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <MX_GPIO_Init+0x250>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	4a7d      	ldr	r2, [pc, #500]	; (8002328 <MX_GPIO_Init+0x250>)
 8002132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213a:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <MX_GPIO_Init+0x250>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b77      	ldr	r3, [pc, #476]	; (8002328 <MX_GPIO_Init+0x250>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	4a76      	ldr	r2, [pc, #472]	; (8002328 <MX_GPIO_Init+0x250>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002158:	4b73      	ldr	r3, [pc, #460]	; (8002328 <MX_GPIO_Init+0x250>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4b70      	ldr	r3, [pc, #448]	; (8002328 <MX_GPIO_Init+0x250>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <MX_GPIO_Init+0x250>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002176:	4b6c      	ldr	r3, [pc, #432]	; (8002328 <MX_GPIO_Init+0x250>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002184:	4b68      	ldr	r3, [pc, #416]	; (8002328 <MX_GPIO_Init+0x250>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218a:	4a67      	ldr	r2, [pc, #412]	; (8002328 <MX_GPIO_Init+0x250>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <MX_GPIO_Init+0x250>)
 8002196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a2:	4b61      	ldr	r3, [pc, #388]	; (8002328 <MX_GPIO_Init+0x250>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	4a5f      	ldr	r2, [pc, #380]	; (8002328 <MX_GPIO_Init+0x250>)
 80021aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <MX_GPIO_Init+0x250>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80021c0:	2200      	movs	r2, #0
 80021c2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80021c6:	4859      	ldr	r0, [pc, #356]	; (800232c <MX_GPIO_Init+0x254>)
 80021c8:	f006 fc1e 	bl	8008a08 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f24c 0102 	movw	r1, #49154	; 0xc002
 80021d2:	4857      	ldr	r0, [pc, #348]	; (8002330 <MX_GPIO_Init+0x258>)
 80021d4:	f006 fc18 	bl	8008a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021de:	4855      	ldr	r0, [pc, #340]	; (8002334 <MX_GPIO_Init+0x25c>)
 80021e0:	f006 fc12 	bl	8008a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ea:	4853      	ldr	r0, [pc, #332]	; (8002338 <MX_GPIO_Init+0x260>)
 80021ec:	f006 fc0c 	bl	8008a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f6:	4851      	ldr	r0, [pc, #324]	; (800233c <MX_GPIO_Init+0x264>)
 80021f8:	f006 fc06 	bl	8008a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80021fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002202:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4849      	ldr	r0, [pc, #292]	; (8002338 <MX_GPIO_Init+0x260>)
 8002214:	f006 fa48 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002218:	f644 2321 	movw	r3, #18977	; 0x4a21
 800221c:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	483e      	ldr	r0, [pc, #248]	; (800232c <MX_GPIO_Init+0x254>)
 8002232:	f006 fa39 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8002236:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800223c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	4838      	ldr	r0, [pc, #224]	; (8002330 <MX_GPIO_Init+0x258>)
 800224e:	f006 fa2b 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002252:	f24c 0302 	movw	r3, #49154	; 0xc002
 8002256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4831      	ldr	r0, [pc, #196]	; (8002330 <MX_GPIO_Init+0x258>)
 800226c:	f006 fa1c 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	482a      	ldr	r0, [pc, #168]	; (8002334 <MX_GPIO_Init+0x25c>)
 800228a:	f006 fa0d 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800228e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4824      	ldr	r0, [pc, #144]	; (8002338 <MX_GPIO_Init+0x260>)
 80022a8:	f006 f9fe 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 80022ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	481d      	ldr	r0, [pc, #116]	; (800233c <MX_GPIO_Init+0x264>)
 80022c6:	f006 f9ef 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80022ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	4817      	ldr	r0, [pc, #92]	; (8002340 <MX_GPIO_Init+0x268>)
 80022e2:	f006 f9e1 	bl	80086a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	480c      	ldr	r0, [pc, #48]	; (800232c <MX_GPIO_Init+0x254>)
 80022fc:	f006 f9d4 	bl	80086a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2017      	movs	r0, #23
 8002306:	f003 f956 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800230a:	2017      	movs	r0, #23
 800230c:	f003 f96d 	bl	80055ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2028      	movs	r0, #40	; 0x28
 8002316:	f003 f94e 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800231a:	2028      	movs	r0, #40	; 0x28
 800231c:	f003 f965 	bl	80055ea <HAL_NVIC_EnableIRQ>

}
 8002320:	bf00      	nop
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	58020400 	.word	0x58020400
 8002330:	58021000 	.word	0x58021000
 8002334:	58020c00 	.word	0x58020c00
 8002338:	58020800 	.word	0x58020800
 800233c:	58020000 	.word	0x58020000
 8002340:	58021800 	.word	0x58021800

08002344 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a99      	ldr	r2, [pc, #612]	; (80025b8 <HAL_UARTEx_RxEventCallback+0x274>)
 8002354:	4293      	cmp	r3, r2
 8002356:	f040 8200 	bne.w	800275a <HAL_UARTEx_RxEventCallback+0x416>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 800235a:	4a98      	ldr	r2, [pc, #608]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800235c:	4b98      	ldr	r3, [pc, #608]	; (80025c0 <HAL_UARTEx_RxEventCallback+0x27c>)
 800235e:	4614      	mov	r4, r2
 8002360:	461d      	mov	r5, r3
 8002362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002366:	682b      	ldr	r3, [r5, #0]
 8002368:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 800236a:	2214      	movs	r2, #20
 800236c:	2100      	movs	r1, #0
 800236e:	4894      	ldr	r0, [pc, #592]	; (80025c0 <HAL_UARTEx_RxEventCallback+0x27c>)
 8002370:	f00c ffb8 	bl	800f2e4 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	2b02      	cmp	r3, #2
 8002378:	f240 81de 	bls.w	8002738 <HAL_UARTEx_RxEventCallback+0x3f4>
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	2b14      	cmp	r3, #20
 8002380:	f200 81da 	bhi.w	8002738 <HAL_UARTEx_RxEventCallback+0x3f4>
			cmdDataSize = Size - 2;	// Calculate data length.
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	3b02      	subs	r3, #2
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b8e      	ldr	r3, [pc, #568]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 800238c:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 800238e:	4b8d      	ldr	r3, [pc, #564]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4989      	ldr	r1, [pc, #548]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002398:	488b      	ldr	r0, [pc, #556]	; (80025c8 <HAL_UARTEx_RxEventCallback+0x284>)
 800239a:	f003 f9b1 	bl	8005700 <HAL_CRC_Calculate>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b8a      	ldr	r3, [pc, #552]	; (80025cc <HAL_UARTEx_RxEventCallback+0x288>)
 80023a4:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80023a6:	4b87      	ldr	r3, [pc, #540]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b83      	ldr	r3, [pc, #524]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	4b83      	ldr	r3, [pc, #524]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	497f      	ldr	r1, [pc, #508]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_UARTEx_RxEventCallback+0x28c>)
 80023cc:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_UARTEx_RxEventCallback+0x288>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	4b7e      	ldr	r3, [pc, #504]	; (80025d0 <HAL_UARTEx_RxEventCallback+0x28c>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	429a      	cmp	r2, r3
 80023dc:	bf0c      	ite	eq
 80023de:	2301      	moveq	r3, #1
 80023e0:	2300      	movne	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 81c9 	beq.w	800277c <HAL_UARTEx_RxEventCallback+0x438>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	2102      	movs	r1, #2
 80023ee:	4879      	ldr	r0, [pc, #484]	; (80025d4 <HAL_UARTEx_RxEventCallback+0x290>)
 80023f0:	f006 fb0a 	bl	8008a08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023fa:	4877      	ldr	r0, [pc, #476]	; (80025d8 <HAL_UARTEx_RxEventCallback+0x294>)
 80023fc:	f006 fb04 	bl	8008a08 <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8002400:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b41      	cmp	r3, #65	; 0x41
 8002406:	d106      	bne.n	8002416 <HAL_UARTEx_RxEventCallback+0xd2>
 8002408:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d101      	bne.n	8002416 <HAL_UARTEx_RxEventCallback+0xd2>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_UARTEx_RxEventCallback+0xd4>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800241c:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b25a      	sxtb	r2, r3
 8002424:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002426:	789b      	ldrb	r3, [r3, #2]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b25a      	sxtb	r2, r3
 800242e:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <HAL_UARTEx_RxEventCallback+0x298>)
 8002430:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002432:	e1a3      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b42      	cmp	r3, #66	; 0x42
 800243a:	d106      	bne.n	800244a <HAL_UARTEx_RxEventCallback+0x106>
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b03      	cmp	r3, #3
 8002444:	d101      	bne.n	800244a <HAL_UARTEx_RxEventCallback+0x106>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_UARTEx_RxEventCallback+0x108>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002450:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b25a      	sxtb	r2, r3
 8002458:	4b58      	ldr	r3, [pc, #352]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800245a:	789b      	ldrb	r3, [r3, #2]
 800245c:	b25b      	sxtb	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b25a      	sxtb	r2, r3
 8002462:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <HAL_UARTEx_RxEventCallback+0x29c>)
 8002464:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002466:	e189      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8002468:	4b54      	ldr	r3, [pc, #336]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b43      	cmp	r3, #67	; 0x43
 800246e:	d106      	bne.n	800247e <HAL_UARTEx_RxEventCallback+0x13a>
 8002470:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d101      	bne.n	800247e <HAL_UARTEx_RxEventCallback+0x13a>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_UARTEx_RxEventCallback+0x13c>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00b      	beq.n	800249c <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b25a      	sxtb	r2, r3
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	b25b      	sxtb	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b25a      	sxtb	r2, r3
 8002496:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8002498:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800249a:	e16f      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 800249c:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b44      	cmp	r3, #68	; 0x44
 80024a2:	d106      	bne.n	80024b2 <HAL_UARTEx_RxEventCallback+0x16e>
 80024a4:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d101      	bne.n	80024b2 <HAL_UARTEx_RxEventCallback+0x16e>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_UARTEx_RxEventCallback+0x170>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b25a      	sxtb	r2, r3
 80024c0:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80024c2:	789b      	ldrb	r3, [r3, #2]
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_UARTEx_RxEventCallback+0x2a4>)
 80024cc:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80024ce:	e155      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 80024d0:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b51      	cmp	r3, #81	; 0x51
 80024d6:	d106      	bne.n	80024e6 <HAL_UARTEx_RxEventCallback+0x1a2>
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d101      	bne.n	80024e6 <HAL_UARTEx_RxEventCallback+0x1a2>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_UARTEx_RxEventCallback+0x1a4>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80024f6:	789b      	ldrb	r3, [r3, #2]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b25a      	sxtb	r2, r3
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002500:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002502:	e13b      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b52      	cmp	r3, #82	; 0x52
 800250a:	d106      	bne.n	800251a <HAL_UARTEx_RxEventCallback+0x1d6>
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b03      	cmp	r3, #3
 8002514:	d101      	bne.n	800251a <HAL_UARTEx_RxEventCallback+0x1d6>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_UARTEx_RxEventCallback+0x1d8>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	b25a      	sxtb	r2, r3
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800252a:	789b      	ldrb	r3, [r3, #2]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b25a      	sxtb	r2, r3
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8002534:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002536:	e121      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b53      	cmp	r3, #83	; 0x53
 800253e:	d106      	bne.n	800254e <HAL_UARTEx_RxEventCallback+0x20a>
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d101      	bne.n	800254e <HAL_UARTEx_RxEventCallback+0x20a>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_UARTEx_RxEventCallback+0x20c>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	b25a      	sxtb	r2, r3
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	b25b      	sxtb	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b25a      	sxtb	r2, r3
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8002568:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800256a:	e107      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b54      	cmp	r3, #84	; 0x54
 8002572:	d106      	bne.n	8002582 <HAL_UARTEx_RxEventCallback+0x23e>
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b03      	cmp	r3, #3
 800257c:	d101      	bne.n	8002582 <HAL_UARTEx_RxEventCallback+0x23e>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_UARTEx_RxEventCallback+0x240>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	b25a      	sxtb	r2, r3
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	b25b      	sxtb	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	b25a      	sxtb	r2, r3
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_UARTEx_RxEventCallback+0x2b4>)
 800259c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800259e:	e0ed      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_UARTEx_RxEventCallback+0x278>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b61      	cmp	r3, #97	; 0x61
 80025a6:	d129      	bne.n	80025fc <HAL_UARTEx_RxEventCallback+0x2b8>
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_UARTEx_RxEventCallback+0x280>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d124      	bne.n	80025fc <HAL_UARTEx_RxEventCallback+0x2b8>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e023      	b.n	80025fe <HAL_UARTEx_RxEventCallback+0x2ba>
 80025b6:	bf00      	nop
 80025b8:	24000e90 	.word	0x24000e90
 80025bc:	240006d4 	.word	0x240006d4
 80025c0:	240006e8 	.word	0x240006e8
 80025c4:	240006fc 	.word	0x240006fc
 80025c8:	24000920 	.word	0x24000920
 80025cc:	240006cc 	.word	0x240006cc
 80025d0:	240006ce 	.word	0x240006ce
 80025d4:	58021000 	.word	0x58021000
 80025d8:	58020400 	.word	0x58020400
 80025dc:	240006b3 	.word	0x240006b3
 80025e0:	240006b4 	.word	0x240006b4
 80025e4:	240006b5 	.word	0x240006b5
 80025e8:	240006b6 	.word	0x240006b6
 80025ec:	240006b7 	.word	0x240006b7
 80025f0:	240006b8 	.word	0x240006b8
 80025f4:	240006b9 	.word	0x240006b9
 80025f8:	240006ba 	.word	0x240006ba
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d014      	beq.n	800262c <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8002602:	4b94      	ldr	r3, [pc, #592]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	b25a      	sxtb	r2, r3
 8002608:	4b93      	ldr	r3, [pc, #588]	; (8002858 <HAL_UARTEx_RxEventCallback+0x514>)
 800260a:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800260c:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	b25a      	sxtb	r2, r3
 8002612:	4b92      	ldr	r3, [pc, #584]	; (800285c <HAL_UARTEx_RxEventCallback+0x518>)
 8002614:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8002616:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002618:	78db      	ldrb	r3, [r3, #3]
 800261a:	b25a      	sxtb	r2, r3
 800261c:	4b90      	ldr	r3, [pc, #576]	; (8002860 <HAL_UARTEx_RxEventCallback+0x51c>)
 800261e:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8002620:	4b8c      	ldr	r3, [pc, #560]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002622:	791b      	ldrb	r3, [r3, #4]
 8002624:	b25a      	sxtb	r2, r3
 8002626:	4b8f      	ldr	r3, [pc, #572]	; (8002864 <HAL_UARTEx_RxEventCallback+0x520>)
 8002628:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800262a:	e0a7      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 800262c:	4b89      	ldr	r3, [pc, #548]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b71      	cmp	r3, #113	; 0x71
 8002632:	d106      	bne.n	8002642 <HAL_UARTEx_RxEventCallback+0x2fe>
 8002634:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <HAL_UARTEx_RxEventCallback+0x524>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b05      	cmp	r3, #5
 800263c:	d101      	bne.n	8002642 <HAL_UARTEx_RxEventCallback+0x2fe>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_UARTEx_RxEventCallback+0x300>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d014      	beq.n	8002672 <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8002648:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	b25a      	sxtb	r2, r3
 800264e:	4b87      	ldr	r3, [pc, #540]	; (800286c <HAL_UARTEx_RxEventCallback+0x528>)
 8002650:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8002652:	4b80      	ldr	r3, [pc, #512]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002654:	789b      	ldrb	r3, [r3, #2]
 8002656:	b25a      	sxtb	r2, r3
 8002658:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_UARTEx_RxEventCallback+0x52c>)
 800265a:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 800265c:	4b7d      	ldr	r3, [pc, #500]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	b25a      	sxtb	r2, r3
 8002662:	4b84      	ldr	r3, [pc, #528]	; (8002874 <HAL_UARTEx_RxEventCallback+0x530>)
 8002664:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8002666:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002668:	791b      	ldrb	r3, [r3, #4]
 800266a:	b25a      	sxtb	r2, r3
 800266c:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_UARTEx_RxEventCallback+0x534>)
 800266e:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002670:	e084      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8002672:	4b78      	ldr	r3, [pc, #480]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b81      	cmp	r3, #129	; 0x81
 8002678:	d106      	bne.n	8002688 <HAL_UARTEx_RxEventCallback+0x344>
 800267a:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <HAL_UARTEx_RxEventCallback+0x524>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d101      	bne.n	8002688 <HAL_UARTEx_RxEventCallback+0x344>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_UARTEx_RxEventCallback+0x346>
 8002688:	2300      	movs	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d015      	beq.n	80026ba <HAL_UARTEx_RxEventCallback+0x376>
					gripperstate = Old_Rx_Buffer[1];
 800268e:	4b71      	ldr	r3, [pc, #452]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	461a      	mov	r2, r3
 8002694:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_UARTEx_RxEventCallback+0x538>)
 8002696:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <HAL_UARTEx_RxEventCallback+0x538>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 80026aa:	4875      	ldr	r0, [pc, #468]	; (8002880 <HAL_UARTEx_RxEventCallback+0x53c>)
 80026ac:	f7ff f8f2 	bl	8001894 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80026b0:	e064      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
					} else {
						gripper.GripperClose();
 80026b2:	4873      	ldr	r0, [pc, #460]	; (8002880 <HAL_UARTEx_RxEventCallback+0x53c>)
 80026b4:	f7ff f8d8 	bl	8001868 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80026b8:	e060      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 80026ba:	4b66      	ldr	r3, [pc, #408]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b91      	cmp	r3, #145	; 0x91
 80026c0:	d106      	bne.n	80026d0 <HAL_UARTEx_RxEventCallback+0x38c>
 80026c2:	4b69      	ldr	r3, [pc, #420]	; (8002868 <HAL_UARTEx_RxEventCallback+0x524>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d101      	bne.n	80026d0 <HAL_UARTEx_RxEventCallback+0x38c>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_UARTEx_RxEventCallback+0x38e>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d052      	beq.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 80026de:	7892      	ldrb	r2, [r2, #2]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_UARTEx_RxEventCallback+0x540>)
 80026ec:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 80026f0:	4b58      	ldr	r3, [pc, #352]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	4a57      	ldr	r2, [pc, #348]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 80026f8:	7912      	ldrb	r2, [r2, #4]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_UARTEx_RxEventCallback+0x544>)
 8002706:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 800270a:	4b52      	ldr	r3, [pc, #328]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 800270c:	795b      	ldrb	r3, [r3, #5]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002712:	7992      	ldrb	r2, [r2, #6]
 8002714:	4313      	orrs	r3, r2
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <HAL_UARTEx_RxEventCallback+0x548>)
 8002720:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_UARTEx_RxEventCallback+0x510>)
 8002726:	79db      	ldrb	r3, [r3, #7]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_UARTEx_RxEventCallback+0x54c>)
 8002732:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002736:	e021      	b.n	800277c <HAL_UARTEx_RxEventCallback+0x438>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	2102      	movs	r1, #2
 800273c:	4855      	ldr	r0, [pc, #340]	; (8002894 <HAL_UARTEx_RxEventCallback+0x550>)
 800273e:	f006 f963 	bl	8008a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002742:	2201      	movs	r2, #1
 8002744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002748:	4853      	ldr	r0, [pc, #332]	; (8002898 <HAL_UARTEx_RxEventCallback+0x554>)
 800274a:	f006 f95d 	bl	8008a08 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 800274e:	220c      	movs	r2, #12
 8002750:	4952      	ldr	r1, [pc, #328]	; (800289c <HAL_UARTEx_RxEventCallback+0x558>)
 8002752:	4853      	ldr	r0, [pc, #332]	; (80028a0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8002754:	f00a fa34 	bl	800cbc0 <HAL_UART_Transmit_DMA>
 8002758:	e011      	b.n	800277e <HAL_UARTEx_RxEventCallback+0x43a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	2102      	movs	r1, #2
 800275e:	484d      	ldr	r0, [pc, #308]	; (8002894 <HAL_UARTEx_RxEventCallback+0x550>)
 8002760:	f006 f952 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276a:	484b      	ldr	r0, [pc, #300]	; (8002898 <HAL_UARTEx_RxEventCallback+0x554>)
 800276c:	f006 f94c 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8002770:	2215      	movs	r2, #21
 8002772:	494c      	ldr	r1, [pc, #304]	; (80028a4 <HAL_UARTEx_RxEventCallback+0x560>)
 8002774:	484a      	ldr	r0, [pc, #296]	; (80028a0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8002776:	f00a fa23 	bl	800cbc0 <HAL_UART_Transmit_DMA>
 800277a:	e000      	b.n	800277e <HAL_UARTEx_RxEventCallback+0x43a>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800277c:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800277e:	2214      	movs	r2, #20
 8002780:	4949      	ldr	r1, [pc, #292]	; (80028a8 <HAL_UARTEx_RxEventCallback+0x564>)
 8002782:	4847      	ldr	r0, [pc, #284]	; (80028a0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8002784:	f00c f96f 	bl	800ea66 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002788:	4b48      	ldr	r3, [pc, #288]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a48      	ldr	r2, [pc, #288]	; (80028b0 <HAL_UARTEx_RxEventCallback+0x56c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d04a      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <HAL_UARTEx_RxEventCallback+0x570>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d045      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a45      	ldr	r2, [pc, #276]	; (80028b8 <HAL_UARTEx_RxEventCallback+0x574>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d040      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a44      	ldr	r2, [pc, #272]	; (80028bc <HAL_UARTEx_RxEventCallback+0x578>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d03b      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027b0:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a42      	ldr	r2, [pc, #264]	; (80028c0 <HAL_UARTEx_RxEventCallback+0x57c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d036      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027ba:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a41      	ldr	r2, [pc, #260]	; (80028c4 <HAL_UARTEx_RxEventCallback+0x580>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d031      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <HAL_UARTEx_RxEventCallback+0x584>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02c      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3e      	ldr	r2, [pc, #248]	; (80028cc <HAL_UARTEx_RxEventCallback+0x588>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d027      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_UARTEx_RxEventCallback+0x58c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d022      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_UARTEx_RxEventCallback+0x590>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01d      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <HAL_UARTEx_RxEventCallback+0x594>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d018      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_UARTEx_RxEventCallback+0x598>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <HAL_UARTEx_RxEventCallback+0x59c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00e      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <HAL_UARTEx_RxEventCallback+0x5a0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <HAL_UARTEx_RxEventCallback+0x5a4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_UARTEx_RxEventCallback+0x4e4>
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <HAL_UARTEx_RxEventCallback+0x5a8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <HAL_UARTEx_RxEventCallback+0x4f6>
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0208 	bic.w	r2, r2, #8
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e008      	b.n	800284c <HAL_UARTEx_RxEventCallback+0x508>
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_UARTEx_RxEventCallback+0x568>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0204 	bic.w	r2, r2, #4
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	240006d4 	.word	0x240006d4
 8002858:	240006b3 	.word	0x240006b3
 800285c:	240006b4 	.word	0x240006b4
 8002860:	240006b5 	.word	0x240006b5
 8002864:	240006b6 	.word	0x240006b6
 8002868:	240006fc 	.word	0x240006fc
 800286c:	240006b7 	.word	0x240006b7
 8002870:	240006b8 	.word	0x240006b8
 8002874:	240006b9 	.word	0x240006b9
 8002878:	240006ba 	.word	0x240006ba
 800287c:	240006d0 	.word	0x240006d0
 8002880:	24000694 	.word	0x24000694
 8002884:	240006bc 	.word	0x240006bc
 8002888:	240006c0 	.word	0x240006c0
 800288c:	240006c4 	.word	0x240006c4
 8002890:	240006c8 	.word	0x240006c8
 8002894:	58021000 	.word	0x58021000
 8002898:	58020400 	.word	0x58020400
 800289c:	08011b90 	.word	0x08011b90
 80028a0:	24000e90 	.word	0x24000e90
 80028a4:	08011ba0 	.word	0x08011ba0
 80028a8:	240006e8 	.word	0x240006e8
 80028ac:	24000e18 	.word	0x24000e18
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8

080028f0 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	f040 8111 	bne.w	8002b24 <HAL_TIM_PeriodElapsedCallback+0x234>
//		stepperJ4.StepperSetFrequency(dq4);

//		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0.0,fcb_joint3.Encoder / 2609.0, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);

		int i;
				for (i = 1 ; i<num ; i++)
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	4b5a      	ldr	r3, [pc, #360]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	da2f      	bge.n	8002970 <HAL_TIM_PeriodElapsedCallback+0x80>
				{
					box_q1[i-1] = box_q1[i];
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	3b01      	subs	r3, #1
 8002914:	4957      	ldr	r1, [pc, #348]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	440a      	add	r2, r1
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4955      	ldr	r1, [pc, #340]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b01      	subs	r3, #1
 800292a:	4953      	ldr	r1, [pc, #332]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	440a      	add	r2, r1
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4950      	ldr	r1, [pc, #320]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3b01      	subs	r3, #1
 8002940:	494e      	ldr	r1, [pc, #312]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	440a      	add	r2, r1
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	494c      	ldr	r1, [pc, #304]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	601a      	str	r2, [r3, #0]
					box_q4[i-1] = box_q4[i];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b01      	subs	r3, #1
 8002956:	494a      	ldr	r1, [pc, #296]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	440a      	add	r2, r1
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	4947      	ldr	r1, [pc, #284]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3301      	adds	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	e7ca      	b.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x16>
				}
				 box_q1[num-1] = w_q1;
 8002970:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	493e      	ldr	r1, [pc, #248]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b25a      	sxtb	r2, r3
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	ee07 2a90 	vmov	s15, r2
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 80029a0:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	4a39      	ldr	r2, [pc, #228]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = w_q4;
 80029b2:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4930      	ldr	r1, [pc, #192]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	601a      	str	r2, [r3, #0]

				u_q1 = 0.0;
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	da58      	bge.n	8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				{
					u_q1 += box_q1[i];
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 8002a0e:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	ed93 7a00 	vldr	s14, [r3]
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a26:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002a42:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	ed93 7a00 	vldr	s14, [r3]
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e7be      	b.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8002a6a:	bf00      	nop
 8002a6c:	24000a64 	.word	0x24000a64
 8002a70:	24000010 	.word	0x24000010
 8002a74:	24000734 	.word	0x24000734
 8002a78:	240007ac 	.word	0x240007ac
 8002a7c:	24000824 	.word	0x24000824
 8002a80:	2400089c 	.word	0x2400089c
 8002a84:	24000718 	.word	0x24000718
 8002a88:	240006b9 	.word	0x240006b9
 8002a8c:	2400071c 	.word	0x2400071c
 8002a90:	24000720 	.word	0x24000720
 8002a94:	24000724 	.word	0x24000724
 8002a98:	24000728 	.word	0x24000728
 8002a9c:	2400072c 	.word	0x2400072c
 8002aa0:	24000730 	.word	0x24000730
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 8002aa4:	4bd8      	ldr	r3, [pc, #864]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002aa6:	edd3 6a00 	vldr	s13, [r3]
 8002aaa:	4bd8      	ldr	r3, [pc, #864]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aba:	eef1 7a67 	vneg.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	48d3      	ldr	r0, [pc, #844]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002ac4:	f7ff fa3c 	bl	8001f40 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 8002ac8:	4bd2      	ldr	r3, [pc, #840]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ad2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8002ada:	48cf      	ldr	r0, [pc, #828]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002adc:	f7fe ff7c 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8002ae0:	4bce      	ldr	r3, [pc, #824]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	4bc9      	ldr	r3, [pc, #804]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002af6:	eeb0 0a66 	vmov.f32	s0, s13
 8002afa:	48c9      	ldr	r0, [pc, #804]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002afc:	f7ff fa20 	bl	8001f40 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperOpenLoopSpeed(u_q4/num*-1.0);
 8002b00:	4bc8      	ldr	r3, [pc, #800]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002b02:	edd3 6a00 	vldr	s13, [r3]
 8002b06:	4bc1      	ldr	r3, [pc, #772]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b16:	eef1 7a67 	vneg.f32	s15, s15
 8002b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1e:	48c2      	ldr	r0, [pc, #776]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002b20:	f7ff fa0e 	bl	8001f40 <_ZN7Stepper20StepperOpenLoopSpeedEf>


}


	if (htim == &htim7) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4ac1      	ldr	r2, [pc, #772]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	f040 83ea 	bne.w	8003302 <HAL_TIM_PeriodElapsedCallback+0xa12>

				encoderJ1.AMT21_Read();
 8002b2e:	48c0      	ldr	r0, [pc, #768]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b30:	f7fd fdc9 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
				HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002b34:	48be      	ldr	r0, [pc, #760]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b36:	f7fd fdf5 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4bbd      	ldr	r3, [pc, #756]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002b40:	701a      	strb	r2, [r3, #0]
				if (HALENCJ1OK == HAL_OK) {
 8002b42:	4bbc      	ldr	r3, [pc, #752]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d110      	bne.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x27c>
					fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 8002b4a:	48b9      	ldr	r0, [pc, #740]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b4c:	f7fd fe4e 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002b50:	4603      	mov	r3, r0
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b5a:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8002e00 <HAL_TIM_PeriodElapsedCallback+0x510>
 8002b5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b66:	4bb4      	ldr	r3, [pc, #720]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002b68:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//				if(HALENCJ2OK == HAL_OK){
//					encoderJ2.unwarp();
//					fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
//				}

				encoderJ3.AMT21_Read();
 8002b6c:	48b3      	ldr	r0, [pc, #716]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002b6e:	f7fd fdaa 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
				HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002b72:	48b2      	ldr	r0, [pc, #712]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002b74:	f7fd fdd6 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4bb0      	ldr	r3, [pc, #704]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002b7e:	701a      	strb	r2, [r3, #0]
				if (HALENCJ3OK == HAL_OK) {
 8002b80:	4baf      	ldr	r3, [pc, #700]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d110      	bne.n	8002baa <HAL_TIM_PeriodElapsedCallback+0x2ba>
					fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 8002b88:	48ac      	ldr	r0, [pc, #688]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002b8a:	f7fd fe2f 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b98:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8002e00 <HAL_TIM_PeriodElapsedCallback+0x510>
 8002b9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ba0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ba4:	4ba7      	ldr	r3, [pc, #668]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002ba6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				}

				encoderJ4.AMT21_Read();
 8002baa:	48a7      	ldr	r0, [pc, #668]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002bac:	f7fd fd8b 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
				HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8002bb0:	48a5      	ldr	r0, [pc, #660]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002bb2:	f7fd fdb7 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4ba4      	ldr	r3, [pc, #656]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002bbc:	701a      	strb	r2, [r3, #0]
				if (HALENCJ4OK == HAL_OK) {
 8002bbe:	4ba3      	ldr	r3, [pc, #652]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d110      	bne.n	8002be8 <HAL_TIM_PeriodElapsedCallback+0x2f8>
					fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 8002bc6:	48a0      	ldr	r0, [pc, #640]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002bc8:	f7fd fe10 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002bd6:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8002e00 <HAL_TIM_PeriodElapsedCallback+0x510>
 8002bda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002be2:	4b9b      	ldr	r3, [pc, #620]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002be4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				}

				float t2 = t * t;
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002bea:	ed93 7a00 	vldr	s14, [r3]
 8002bee:	4b99      	ldr	r3, [pc, #612]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf8:	edc7 7a06 	vstr	s15, [r7, #24]
				float t3 = t * t * t;
 8002bfc:	4b95      	ldr	r3, [pc, #596]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	4b94      	ldr	r3, [pc, #592]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0c:	4b91      	ldr	r3, [pc, #580]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c16:	edc7 7a05 	vstr	s15, [r7, #20]
				float t4 = t * t * t * t;
 8002c1a:	4b8e      	ldr	r3, [pc, #568]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c1c:	ed93 7a00 	vldr	s14, [r3]
 8002c20:	4b8c      	ldr	r3, [pc, #560]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c2a:	4b8a      	ldr	r3, [pc, #552]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c34:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a04 	vstr	s15, [r7, #16]
				float t5 = t * t * t * t * t;
 8002c42:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c52:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5c:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c66:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	edc7 7a03 	vstr	s15, [r7, #12]



		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002c76:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002c7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c7e:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002c80:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8002c84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c88:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002c8c:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c96:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002ca0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8002ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ca8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002cac:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002cb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002cbc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002cc0:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002cc2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8002cc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cca:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002cce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002cde:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002ce4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cec:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8002cf0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d0a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d10:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8002d14:	4b48      	ldr	r3, [pc, #288]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d16:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d2a:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8002d2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d3c:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d4e:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d60:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8002d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d72:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 8002d76:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002d78:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002d7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d80:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002d82:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8002d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002da2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8002da6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002daa:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002dae:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002db6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002dbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002dc4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8002dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dcc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002dd0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002dd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ddc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002de0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002de6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dee:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8002df2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dfa:	e02d      	b.n	8002e58 <HAL_TIM_PeriodElapsedCallback+0x568>
 8002dfc:	f3af 8000 	nop.w
 8002e00:	645a1cac 	.word	0x645a1cac
 8002e04:	4004df3b 	.word	0x4004df3b
 8002e08:	24000724 	.word	0x24000724
 8002e0c:	24000010 	.word	0x24000010
 8002e10:	24000264 	.word	0x24000264
 8002e14:	24000728 	.word	0x24000728
 8002e18:	2400028c 	.word	0x2400028c
 8002e1c:	2400072c 	.word	0x2400072c
 8002e20:	240002b4 	.word	0x240002b4
 8002e24:	24000730 	.word	0x24000730
 8002e28:	240002dc 	.word	0x240002dc
 8002e2c:	24000cc4 	.word	0x24000cc4
 8002e30:	24000210 	.word	0x24000210
 8002e34:	240006b0 	.word	0x240006b0
 8002e38:	24000304 	.word	0x24000304
 8002e3c:	2400022c 	.word	0x2400022c
 8002e40:	240006b1 	.word	0x240006b1
 8002e44:	240004cc 	.word	0x240004cc
 8002e48:	24000248 	.word	0x24000248
 8002e4c:	240006b2 	.word	0x240006b2
 8002e50:	240005b0 	.word	0x240005b0
 8002e54:	24000704 	.word	0x24000704
 8002e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002e60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e68:	4bc3      	ldr	r3, [pc, #780]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002e6a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8002e6e:	4bc2      	ldr	r3, [pc, #776]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002e70:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8002e74:	4bc0      	ldr	r3, [pc, #768]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002e76:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8002e7a:	4bc0      	ldr	r3, [pc, #768]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e88:	4bbb      	ldr	r3, [pc, #748]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002e8a:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8002e8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9a:	4bb7      	ldr	r3, [pc, #732]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002e9c:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eac:	4bb2      	ldr	r3, [pc, #712]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002eae:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002eb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebe:	4bae      	ldr	r3, [pc, #696]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002ec0:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8002ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	4ba9      	ldr	r3, [pc, #676]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002ed2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
		//
		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8002ed6:	4baa      	ldr	r3, [pc, #680]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002ed8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002edc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee0:	48a7      	ldr	r0, [pc, #668]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002ee2:	f7fd fe42 	bl	8000b6a <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8002ee6:	4ba6      	ldr	r3, [pc, #664]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eec:	4aa4      	ldr	r2, [pc, #656]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002eee:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8002ef2:	4ba3      	ldr	r3, [pc, #652]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ef8:	4aa1      	ldr	r2, [pc, #644]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002efa:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8002efe:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f00:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	489b      	ldr	r0, [pc, #620]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f0a:	f7fd fe2e 	bl	8000b6a <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8002f0e:	4b9a      	ldr	r3, [pc, #616]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f14:	4a98      	ldr	r2, [pc, #608]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f16:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8002f1a:	4b97      	ldr	r3, [pc, #604]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f20:	4a95      	ldr	r2, [pc, #596]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f22:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint1.Kp_p = 1.0;
 8002f26:	4b96      	ldr	r3, [pc, #600]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8002f2e:	4b94      	ldr	r3, [pc, #592]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8002f36:	4b92      	ldr	r3, [pc, #584]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 1.0;
 8002f3e:	4b8e      	ldr	r3, [pc, #568]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8002f46:	4b8c      	ldr	r3, [pc, #560]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8002f4e:	4b8a      	ldr	r3, [pc, #552]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint1.Kp_v = 1.0;
 8002f56:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f5c:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8002f5e:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8002f66:	4b86      	ldr	r3, [pc, #536]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 1.0;
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f74:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8002f76:	4b80      	ldr	r3, [pc, #512]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8002f7e:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8002f86:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f88:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002f8c:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f8e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002f98:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8002f9c:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002f9e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002fa2:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002fa4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fac:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002fae:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002fb4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002fb8:	4b71      	ldr	r3, [pc, #452]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002fba:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8002fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002fc4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002fca:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002fd0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8002fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd8:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002fda:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8002fde:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002fe0:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002fe4:	4b66      	ldr	r3, [pc, #408]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002fe6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fee:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002ff0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8002ff4:	4b60      	ldr	r3, [pc, #384]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002ff6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002ffc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003006:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800300c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003012:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800301c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003022:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003026:	4b54      	ldr	r3, [pc, #336]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003028:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003032:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity+
 8003036:	4b52      	ldr	r3, [pc, #328]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003038:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_v * fcb_joint1.Error_v) +
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800303e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003042:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003044:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003048:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity+
 800304c:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v) +
 8003050:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003052:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003058:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800305c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v) +
 8003060:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v)) ;
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003066:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800306a:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800306c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003070:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003072:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003076:	ee76 7a67 	vsub.f32	s15, s12, s15
 800307a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v) +
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity+
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003084:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = fcb_joint3.Goal_Velocity +
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800308a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 800308e:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003090:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003094:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003096:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800309a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = fcb_joint3.Goal_Velocity +
 800309e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v) +
 80030a2:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030a4:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030aa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80030ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 80030b2:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v)) ;
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030b8:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030be:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030c4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80030c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v) +
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = fcb_joint3.Goal_Velocity +
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030d6:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Output_Joint_W/1000.0);
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 80030dc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80030e0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003184 <HAL_TIM_PeriodElapsedCallback+0x894>
 80030e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030e8:	eeb0 0a47 	vmov.f32	s0, s14
 80030ec:	4826      	ldr	r0, [pc, #152]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80030ee:	f7fe ff27 	bl	8001f40 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Output_Joint_W/1000.0);
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 80030f4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80030f8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003184 <HAL_TIM_PeriodElapsedCallback+0x894>
 80030fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003100:	eeb0 0a47 	vmov.f32	s0, s14
 8003104:	4821      	ldr	r0, [pc, #132]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003106:	f7fe ff1b 	bl	8001f40 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800310c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003110:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003118:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800312e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003148:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800314c:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800314e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8003152:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003154:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003158:	4a07      	ldr	r2, [pc, #28]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800315a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + (sample_time_1000);
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003160:	ed93 7a00 	vldr	s14, [r3]
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003170:	edc3 7a00 	vstr	s15, [r3]
 8003174:	e00e      	b.n	8003194 <HAL_TIM_PeriodElapsedCallback+0x8a4>
 8003176:	bf00      	nop
 8003178:	240004cc 	.word	0x240004cc
 800317c:	24000704 	.word	0x24000704
 8003180:	24000304 	.word	0x24000304
 8003184:	447a0000 	.word	0x447a0000
 8003188:	24000264 	.word	0x24000264
 800318c:	240002b4 	.word	0x240002b4
 8003190:	2400000c 	.word	0x2400000c


		if (t >= fcb_joint1.T)
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8003196:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	bf94      	ite	ls
 80031aa:	2301      	movls	r3, #1
 80031ac:	2300      	movhi	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a6 	beq.w	8003302 <HAL_TIM_PeriodElapsedCallback+0xa12>
		{
			t = 0.0;
 80031b6:	4b56      	ldr	r3, [pc, #344]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 80031be:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 80031c8:	6013      	str	r3, [r2, #0]

			fcb_joint1.Sum_Error_p = 0;
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 80031f2:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 800320c:	4b42      	ldr	r3, [pc, #264]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			if (direction_traj == 0)
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d036      	beq.n	8003296 <HAL_TIM_PeriodElapsedCallback+0x9a6>
			{
				fcb_joint1.UpdateQuinticCoff(10.0, (fcb_joint1.Encoder), (fcb_joint1.Encoder) - 1570, 0.0, 0.0, 0.0, 0.0);
 8003228:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 800322a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8003230:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003234:	eddf 6a39 	vldr	s13, [pc, #228]	; 800331c <HAL_TIM_PeriodElapsedCallback+0xa2c>
 8003238:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800323c:	ed9f 3a38 	vldr	s6, [pc, #224]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 8003240:	eddf 2a37 	vldr	s5, [pc, #220]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 8003244:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 8003248:	eddf 1a35 	vldr	s3, [pc, #212]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 800324c:	eeb0 1a67 	vmov.f32	s2, s15
 8003250:	eef0 0a47 	vmov.f32	s1, s14
 8003254:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003258:	482c      	ldr	r0, [pc, #176]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 800325a:	f7fd fb62 	bl	8000922 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(10.0, (fcb_joint3.Encoder), (fcb_joint3.Encoder) - 1570, 0.0, 0.0, 0.0, 0.0);
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8003260:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8003266:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800326a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800331c <HAL_TIM_PeriodElapsedCallback+0xa2c>
 800326e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003272:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 8003276:	eddf 2a2a 	vldr	s5, [pc, #168]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 800327a:	ed9f 2a29 	vldr	s4, [pc, #164]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 800327e:	eddf 1a28 	vldr	s3, [pc, #160]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 8003282:	eeb0 1a67 	vmov.f32	s2, s15
 8003286:	eef0 0a47 	vmov.f32	s1, s14
 800328a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800328e:	4822      	ldr	r0, [pc, #136]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8003290:	f7fd fb47 	bl	8000922 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		//					chess_board_ang = 0.0;
		//					direction_traj ^= 1;
		//				}

	}
}
 8003294:	e035      	b.n	8003302 <HAL_TIM_PeriodElapsedCallback+0xa12>
				fcb_joint1.UpdateQuinticCoff(10.0, (fcb_joint1.Encoder), (fcb_joint1.Encoder) + 1570, 0.0, 0.0, 0.0, 0.0);
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8003298:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 800329e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80032a2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800331c <HAL_TIM_PeriodElapsedCallback+0xa2c>
 80032a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032aa:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032ae:	eddf 2a1c 	vldr	s5, [pc, #112]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032b2:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032b6:	eddf 1a1a 	vldr	s3, [pc, #104]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032ba:	eeb0 1a67 	vmov.f32	s2, s15
 80032be:	eef0 0a47 	vmov.f32	s1, s14
 80032c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80032c8:	f7fd fb2b 	bl	8000922 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(10.0, (fcb_joint3.Encoder), (fcb_joint3.Encoder) + 1570, 0.0, 0.0, 0.0, 0.0);
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80032ce:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80032d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80032d8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800331c <HAL_TIM_PeriodElapsedCallback+0xa2c>
 80032dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e0:	ed9f 3a0f 	vldr	s6, [pc, #60]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032e4:	eddf 2a0e 	vldr	s5, [pc, #56]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032e8:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032ec:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8003320 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80032f0:	eeb0 1a67 	vmov.f32	s2, s15
 80032f4:	eef0 0a47 	vmov.f32	s1, s14
 80032f8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80032fc:	4806      	ldr	r0, [pc, #24]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80032fe:	f7fd fb10 	bl	8000922 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
}
 8003302:	bf00      	nop
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	24000304 	.word	0x24000304
 8003310:	24000704 	.word	0x24000704
 8003314:	24000700 	.word	0x24000700
 8003318:	240004cc 	.word	0x240004cc
 800331c:	44c44000 	.word	0x44c44000
	...

08003328 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800332c:	f001 ffa6 	bl	800527c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003330:	f000 f962 	bl	80035f8 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003334:	f7fe fed0 	bl	80020d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003338:	f7fe fe8e 	bl	8002058 <MX_DMA_Init>
	MX_USART3_UART_Init();
 800333c:	f001 fcf2 	bl	8004d24 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8003340:	f000 fef6 	bl	8004130 <MX_TIM2_Init>
	MX_UART4_Init();
 8003344:	f001 fc4c 	bl	8004be0 <MX_UART4_Init>
	MX_TIM4_Init();
 8003348:	f000 ffe2 	bl	8004310 <MX_TIM4_Init>
	MX_SPI3_Init();
 800334c:	f000 fb44 	bl	80039d8 <MX_SPI3_Init>
	MX_TIM1_Init();
 8003350:	f000 fe40 	bl	8003fd4 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003354:	f000 ff64 	bl	8004220 <MX_TIM3_Init>
	MX_TIM5_Init();
 8003358:	f001 f852 	bl	8004400 <MX_TIM5_Init>
	MX_TIM15_Init();
 800335c:	f001 f98c 	bl	8004678 <MX_TIM15_Init>
	MX_CRC_Init();
 8003360:	f7fe fe2a 	bl	8001fb8 <MX_CRC_Init>
	MX_UART7_Init();
 8003364:	f001 fc90 	bl	8004c88 <MX_UART7_Init>
	MX_TIM6_Init();
 8003368:	f001 f898 	bl	800449c <MX_TIM6_Init>
	MX_TIM7_Init();
 800336c:	f001 f8cc 	bl	8004508 <MX_TIM7_Init>
	MX_TIM12_Init();
 8003370:	f001 f900 	bl	8004574 <MX_TIM12_Init>
	MX_TIM13_Init();
 8003374:	f001 f938 	bl	80045e8 <MX_TIM13_Init>
	MX_TIM14_Init();
 8003378:	f001 f95a 	bl	8004630 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800337c:	2201      	movs	r2, #1
 800337e:	2101      	movs	r1, #1
 8003380:	487b      	ldr	r0, [pc, #492]	; (8003570 <main+0x248>)
 8003382:	f005 fb41 	bl	8008a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003386:	2201      	movs	r2, #1
 8003388:	2102      	movs	r1, #2
 800338a:	487a      	ldr	r0, [pc, #488]	; (8003574 <main+0x24c>)
 800338c:	f005 fb3c 	bl	8008a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003390:	2200      	movs	r2, #0
 8003392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003396:	4876      	ldr	r0, [pc, #472]	; (8003570 <main+0x248>)
 8003398:	f005 fb36 	bl	8008a08 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 800339c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8003578 <main+0x250>
 80033a0:	4876      	ldr	r0, [pc, #472]	; (800357c <main+0x254>)
 80033a2:	f7fe fb19 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 80033a6:	2108      	movs	r1, #8
 80033a8:	4874      	ldr	r0, [pc, #464]	; (800357c <main+0x254>)
 80033aa:	f7fe fdb1 	bl	8001f10 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80033ae:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8003580 <main+0x258>
 80033b2:	4872      	ldr	r0, [pc, #456]	; (800357c <main+0x254>)
 80033b4:	f7fe fd88 	bl	8001ec8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80033b8:	4870      	ldr	r0, [pc, #448]	; (800357c <main+0x254>)
 80033ba:	f7fe fafc 	bl	80019b6 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80033be:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8003578 <main+0x250>
 80033c2:	4870      	ldr	r0, [pc, #448]	; (8003584 <main+0x25c>)
 80033c4:	f7fe fb08 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 80033c8:	2108      	movs	r1, #8
 80033ca:	486e      	ldr	r0, [pc, #440]	; (8003584 <main+0x25c>)
 80033cc:	f7fe fda0 	bl	8001f10 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80033d0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80033d4:	486b      	ldr	r0, [pc, #428]	; (8003584 <main+0x25c>)
 80033d6:	f7fe fd77 	bl	8001ec8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80033da:	486a      	ldr	r0, [pc, #424]	; (8003584 <main+0x25c>)
 80033dc:	f7fe faeb 	bl	80019b6 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80033e0:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8003578 <main+0x250>
 80033e4:	4868      	ldr	r0, [pc, #416]	; (8003588 <main+0x260>)
 80033e6:	f7fe faf7 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 80033ea:	2108      	movs	r1, #8
 80033ec:	4866      	ldr	r0, [pc, #408]	; (8003588 <main+0x260>)
 80033ee:	f7fe fd8f 	bl	8001f10 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80033f2:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80033f6:	4864      	ldr	r0, [pc, #400]	; (8003588 <main+0x260>)
 80033f8:	f7fe fd66 	bl	8001ec8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80033fc:	4862      	ldr	r0, [pc, #392]	; (8003588 <main+0x260>)
 80033fe:	f7fe fada 	bl	80019b6 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8003402:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8003578 <main+0x250>
 8003406:	4861      	ldr	r0, [pc, #388]	; (800358c <main+0x264>)
 8003408:	f7fe fae6 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 800340c:	2108      	movs	r1, #8
 800340e:	485f      	ldr	r0, [pc, #380]	; (800358c <main+0x264>)
 8003410:	f7fe fd7e 	bl	8001f10 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8003414:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003418:	485c      	ldr	r0, [pc, #368]	; (800358c <main+0x264>)
 800341a:	f7fe fd55 	bl	8001ec8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 800341e:	485b      	ldr	r0, [pc, #364]	; (800358c <main+0x264>)
 8003420:	f7fe fac9 	bl	80019b6 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 8003424:	2141      	movs	r1, #65	; 0x41
 8003426:	485a      	ldr	r0, [pc, #360]	; (8003590 <main+0x268>)
 8003428:	f7fe fa0d 	bl	8001846 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 800342c:	2100      	movs	r1, #0
 800342e:	4858      	ldr	r0, [pc, #352]	; (8003590 <main+0x268>)
 8003430:	f7fe f9f8 	bl	8001824 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8003434:	4856      	ldr	r0, [pc, #344]	; (8003590 <main+0x268>)
 8003436:	f7fe f821 	bl	800147c <_ZN10ServoMotor11ServoEnableEv>
	fcb_joint3.Q = 0.12;
 800343a:	4b56      	ldr	r3, [pc, #344]	; (8003594 <main+0x26c>)
 800343c:	4a56      	ldr	r2, [pc, #344]	; (8003598 <main+0x270>)
 800343e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.0001;
 8003442:	4b54      	ldr	r3, [pc, #336]	; (8003594 <main+0x26c>)
 8003444:	4a55      	ldr	r2, [pc, #340]	; (800359c <main+0x274>)
 8003446:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	HAL_Delay(3000);
 800344a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800344e:	f001 ffa7 	bl	80053a0 <HAL_Delay>
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8003452:	2214      	movs	r2, #20
 8003454:	4952      	ldr	r1, [pc, #328]	; (80035a0 <main+0x278>)
 8003456:	4853      	ldr	r0, [pc, #332]	; (80035a4 <main+0x27c>)
 8003458:	f00b fb05 	bl	800ea66 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800345c:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <main+0x280>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <main+0x284>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d04a      	beq.n	80034fc <main+0x1d4>
 8003466:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <main+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a51      	ldr	r2, [pc, #324]	; (80035b0 <main+0x288>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d045      	beq.n	80034fc <main+0x1d4>
 8003470:	4b4d      	ldr	r3, [pc, #308]	; (80035a8 <main+0x280>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a4f      	ldr	r2, [pc, #316]	; (80035b4 <main+0x28c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d040      	beq.n	80034fc <main+0x1d4>
 800347a:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <main+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a4e      	ldr	r2, [pc, #312]	; (80035b8 <main+0x290>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d03b      	beq.n	80034fc <main+0x1d4>
 8003484:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <main+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a4c      	ldr	r2, [pc, #304]	; (80035bc <main+0x294>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d036      	beq.n	80034fc <main+0x1d4>
 800348e:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <main+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4b      	ldr	r2, [pc, #300]	; (80035c0 <main+0x298>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d031      	beq.n	80034fc <main+0x1d4>
 8003498:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <main+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a49      	ldr	r2, [pc, #292]	; (80035c4 <main+0x29c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02c      	beq.n	80034fc <main+0x1d4>
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <main+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a48      	ldr	r2, [pc, #288]	; (80035c8 <main+0x2a0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d027      	beq.n	80034fc <main+0x1d4>
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <main+0x280>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a46      	ldr	r2, [pc, #280]	; (80035cc <main+0x2a4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d022      	beq.n	80034fc <main+0x1d4>
 80034b6:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <main+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a45      	ldr	r2, [pc, #276]	; (80035d0 <main+0x2a8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01d      	beq.n	80034fc <main+0x1d4>
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <main+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a43      	ldr	r2, [pc, #268]	; (80035d4 <main+0x2ac>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d018      	beq.n	80034fc <main+0x1d4>
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <main+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a42      	ldr	r2, [pc, #264]	; (80035d8 <main+0x2b0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <main+0x1d4>
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <main+0x280>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a40      	ldr	r2, [pc, #256]	; (80035dc <main+0x2b4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00e      	beq.n	80034fc <main+0x1d4>
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <main+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a3f      	ldr	r2, [pc, #252]	; (80035e0 <main+0x2b8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <main+0x1d4>
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <main+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <main+0x2bc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <main+0x1d4>
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <main+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <main+0x2c0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d108      	bne.n	800350e <main+0x1e6>
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <main+0x280>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <main+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0208 	bic.w	r2, r2, #8
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e007      	b.n	800351e <main+0x1f6>
 800350e:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <main+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <main+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0204 	bic.w	r2, r2, #4
 800351c:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		encoderJ1.AMT21_Read();
 800351e:	4833      	ldr	r0, [pc, #204]	; (80035ec <main+0x2c4>)
 8003520:	f7fd f8d1 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003524:	4831      	ldr	r0, [pc, #196]	; (80035ec <main+0x2c4>)
 8003526:	f7fd f8fd 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <main+0x2c8>)
 8003530:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <main+0x2c8>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d110      	bne.n	800355c <main+0x234>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 800353a:	482c      	ldr	r0, [pc, #176]	; (80035ec <main+0x2c4>)
 800353c:	f7fd f956 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003540:	4603      	mov	r3, r0
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800354a:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8003568 <main+0x240>
 800354e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003552:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <main+0x2cc>)
 8003558:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		stepperJ1.StepperSetFrequency(20.0f); // + กลับด้าน +
 800355c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003560:	4806      	ldr	r0, [pc, #24]	; (800357c <main+0x254>)
 8003562:	f7fe fa39 	bl	80019d8 <_ZN7Stepper19StepperSetFrequencyEf>
		encoderJ1.AMT21_Read();
 8003566:	e7da      	b.n	800351e <main+0x1f6>
 8003568:	645a1cac 	.word	0x645a1cac
 800356c:	4004df3b 	.word	0x4004df3b
 8003570:	58020400 	.word	0x58020400
 8003574:	58021000 	.word	0x58021000
 8003578:	00000000 	.word	0x00000000
 800357c:	24000264 	.word	0x24000264
 8003580:	42280000 	.word	0x42280000
 8003584:	2400028c 	.word	0x2400028c
 8003588:	240002b4 	.word	0x240002b4
 800358c:	240002dc 	.word	0x240002dc
 8003590:	24000694 	.word	0x24000694
 8003594:	240004cc 	.word	0x240004cc
 8003598:	3df5c28f 	.word	0x3df5c28f
 800359c:	38d1b717 	.word	0x38d1b717
 80035a0:	240006e8 	.word	0x240006e8
 80035a4:	24000e90 	.word	0x24000e90
 80035a8:	24000e18 	.word	0x24000e18
 80035ac:	40020010 	.word	0x40020010
 80035b0:	40020028 	.word	0x40020028
 80035b4:	40020040 	.word	0x40020040
 80035b8:	40020058 	.word	0x40020058
 80035bc:	40020070 	.word	0x40020070
 80035c0:	40020088 	.word	0x40020088
 80035c4:	400200a0 	.word	0x400200a0
 80035c8:	400200b8 	.word	0x400200b8
 80035cc:	40020410 	.word	0x40020410
 80035d0:	40020428 	.word	0x40020428
 80035d4:	40020440 	.word	0x40020440
 80035d8:	40020458 	.word	0x40020458
 80035dc:	40020470 	.word	0x40020470
 80035e0:	40020488 	.word	0x40020488
 80035e4:	400204a0 	.word	0x400204a0
 80035e8:	400204b8 	.word	0x400204b8
 80035ec:	24000210 	.word	0x24000210
 80035f0:	240006b0 	.word	0x240006b0
 80035f4:	24000304 	.word	0x24000304

080035f8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b09c      	sub	sp, #112	; 0x70
 80035fc:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	224c      	movs	r2, #76	; 0x4c
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f00b fe6c 	bl	800f2e4 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2220      	movs	r2, #32
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f00b fe66 	bl	800f2e4 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003618:	2002      	movs	r0, #2
 800361a:	f005 fa29 	bl	8008a70 <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800361e:	2300      	movs	r3, #0
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <_Z18SystemClock_Configv+0x10c>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	4a37      	ldr	r2, [pc, #220]	; (8003704 <_Z18SystemClock_Configv+0x10c>)
 8003628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362c:	6193      	str	r3, [r2, #24]
 800362e:	4b35      	ldr	r3, [pc, #212]	; (8003704 <_Z18SystemClock_Configv+0x10c>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4b33      	ldr	r3, [pc, #204]	; (8003708 <_Z18SystemClock_Configv+0x110>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a32      	ldr	r2, [pc, #200]	; (8003708 <_Z18SystemClock_Configv+0x110>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <_Z18SystemClock_Configv+0x110>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <_Z18SystemClock_Configv+0x10c>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d000      	beq.n	800366a <_Z18SystemClock_Configv+0x72>
 8003668:	e7f2      	b.n	8003650 <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800366a:	2302      	movs	r3, #2
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800366e:	2301      	movs	r3, #1
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003676:	2302      	movs	r3, #2
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800367a:	2300      	movs	r3, #0
 800367c:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 800367e:	2304      	movs	r3, #4
 8003680:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003682:	233c      	movs	r3, #60	; 0x3c
 8003684:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 8003686:	2302      	movs	r3, #2
 8003688:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 800368a:	2306      	movs	r3, #6
 800368c:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 800368e:	2302      	movs	r3, #2
 8003690:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003692:	230c      	movs	r3, #12
 8003694:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003696:	2300      	movs	r3, #0
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800369e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a2:	4618      	mov	r0, r3
 80036a4:	f005 fa1e 	bl	8008ae4 <HAL_RCC_OscConfig>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 80036b8:	f000 f83e 	bl	8003738 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036bc:	233f      	movs	r3, #63	; 0x3f
 80036be:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c0:	2303      	movs	r3, #3
 80036c2:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80036c8:	2308      	movs	r3, #8
 80036ca:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80036d0:	2340      	movs	r3, #64	; 0x40
 80036d2:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80036d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d8:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	2104      	movs	r1, #4
 80036e2:	4618      	mov	r0, r3
 80036e4:	f005 fe2a 	bl	800933c <HAL_RCC_ClockConfig>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf14      	ite	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	2300      	moveq	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 80036f8:	f000 f81e 	bl	8003738 <Error_Handler>
}
}
 80036fc:	bf00      	nop
 80036fe:	3770      	adds	r7, #112	; 0x70
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	58024800 	.word	0x58024800
 8003708:	58000400 	.word	0x58000400

0800370c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]

}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800373c:	2200      	movs	r2, #0
 800373e:	2101      	movs	r1, #1
 8003740:	4808      	ldr	r0, [pc, #32]	; (8003764 <Error_Handler+0x2c>)
 8003742:	f005 f961 	bl	8008a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003746:	2200      	movs	r2, #0
 8003748:	2102      	movs	r1, #2
 800374a:	4807      	ldr	r0, [pc, #28]	; (8003768 <Error_Handler+0x30>)
 800374c:	f005 f95c 	bl	8008a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003750:	2201      	movs	r2, #1
 8003752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003756:	4803      	ldr	r0, [pc, #12]	; (8003764 <Error_Handler+0x2c>)
 8003758:	f005 f956 	bl	8008a08 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800375c:	b672      	cpsid	i
}
 800375e:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003760:	e7fe      	b.n	8003760 <Error_Handler+0x28>
 8003762:	bf00      	nop
 8003764:	58020400 	.word	0x58020400
 8003768:	58021000 	.word	0x58021000

0800376c <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 80b7 	bne.w	80038ec <_Z41__static_initialization_and_destruction_0ii+0x180>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	4293      	cmp	r3, r2
 8003786:	f040 80b1 	bne.w	80038ec <_Z41__static_initialization_and_destruction_0ii+0x180>
AMT21 encoderJ1(&huart4, 0xD4);
 800378a:	22d4      	movs	r2, #212	; 0xd4
 800378c:	496f      	ldr	r1, [pc, #444]	; (800394c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 800378e:	4870      	ldr	r0, [pc, #448]	; (8003950 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003790:	f7fc ff7a 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003794:	22c4      	movs	r2, #196	; 0xc4
 8003796:	496d      	ldr	r1, [pc, #436]	; (800394c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003798:	486e      	ldr	r0, [pc, #440]	; (8003954 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800379a:	f7fc ff75 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 800379e:	22a4      	movs	r2, #164	; 0xa4
 80037a0:	496a      	ldr	r1, [pc, #424]	; (800394c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80037a2:	486d      	ldr	r0, [pc, #436]	; (8003958 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80037a4:	f7fc ff70 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80037a8:	2320      	movs	r3, #32
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4b6b      	ldr	r3, [pc, #428]	; (800395c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	496b      	ldr	r1, [pc, #428]	; (8003960 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80037b2:	486c      	ldr	r0, [pc, #432]	; (8003964 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80037b4:	f7fe f8b0 	bl	8001918 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80037b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80037c0:	2204      	movs	r2, #4
 80037c2:	496a      	ldr	r1, [pc, #424]	; (800396c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80037c4:	486a      	ldr	r0, [pc, #424]	; (8003970 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80037c6:	f7fe f8a7 	bl	8001918 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80037ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4b65      	ldr	r3, [pc, #404]	; (8003968 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80037d2:	2204      	movs	r2, #4
 80037d4:	4967      	ldr	r1, [pc, #412]	; (8003974 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80037d6:	4868      	ldr	r0, [pc, #416]	; (8003978 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80037d8:	f7fe f89e 	bl	8001918 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 80037dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	4b5e      	ldr	r3, [pc, #376]	; (800395c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80037e4:	2208      	movs	r2, #8
 80037e6:	4965      	ldr	r1, [pc, #404]	; (800397c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80037e8:	4865      	ldr	r0, [pc, #404]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80037ea:	f7fe f895 	bl	8001918 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 80037ee:	4865      	ldr	r0, [pc, #404]	; (8003984 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80037f0:	f7fd f81e 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 80037f4:	4864      	ldr	r0, [pc, #400]	; (8003988 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80037f6:	f7fd f81b 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 80037fa:	4864      	ldr	r0, [pc, #400]	; (800398c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80037fc:	f7fd f818 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8003800:	4863      	ldr	r0, [pc, #396]	; (8003990 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003802:	f7fd f815 	bl	8000830 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003806:	2208      	movs	r2, #8
 8003808:	4962      	ldr	r1, [pc, #392]	; (8003994 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800380a:	4863      	ldr	r0, [pc, #396]	; (8003998 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800380c:	f7fd fdfb 	bl	8001406 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003810:	4b62      	ldr	r3, [pc, #392]	; (800399c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800381e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003824:	ed93 7a00 	vldr	s14, [r3]
 8003828:	4b5d      	ldr	r3, [pc, #372]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003832:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003836:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800383a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800383e:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003840:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8003844:	4b55      	ldr	r3, [pc, #340]	; (800399c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003846:	edd3 7a00 	vldr	s15, [r3]
 800384a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003852:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003854:	ed93 7a00 	vldr	s14, [r3]
 8003858:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003862:	4b4f      	ldr	r3, [pc, #316]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003870:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003874:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800387a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003888:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800388c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003890:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003892:	ed93 7a00 	vldr	s14, [r3]
 8003896:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80038ae:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 80038b2:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038bc:	ee37 5b07 	vadd.f64	d5, d7, d7
 80038c0:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80038c2:	ed93 7a00 	vldr	s14, [r3]
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80038e8:	edc3 7a00 	vstr	s15, [r3]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d128      	bne.n	8003944 <_Z41__static_initialization_and_destruction_0ii+0x1d8>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d123      	bne.n	8003944 <_Z41__static_initialization_and_destruction_0ii+0x1d8>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 80038fc:	4826      	ldr	r0, [pc, #152]	; (8003998 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80038fe:	f7fd fdb2 	bl	8001466 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_joint4;
 8003902:	4823      	ldr	r0, [pc, #140]	; (8003990 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003904:	f7fd f802 	bl	800090c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8003908:	4820      	ldr	r0, [pc, #128]	; (800398c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800390a:	f7fc ffff 	bl	800090c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 800390e:	481e      	ldr	r0, [pc, #120]	; (8003988 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003910:	f7fc fffc 	bl	800090c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8003914:	481b      	ldr	r0, [pc, #108]	; (8003984 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003916:	f7fc fff9 	bl	800090c <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 800391a:	4819      	ldr	r0, [pc, #100]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800391c:	f7fe f840 	bl	80019a0 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003920:	4815      	ldr	r0, [pc, #84]	; (8003978 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003922:	f7fe f83d 	bl	80019a0 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003926:	4812      	ldr	r0, [pc, #72]	; (8003970 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8003928:	f7fe f83a 	bl	80019a0 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 800392c:	480d      	ldr	r0, [pc, #52]	; (8003964 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800392e:	f7fe f837 	bl	80019a0 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8003932:	4809      	ldr	r0, [pc, #36]	; (8003958 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003934:	f7fc febc 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8003938:	4806      	ldr	r0, [pc, #24]	; (8003954 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800393a:	f7fc feb9 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 800393e:	4804      	ldr	r0, [pc, #16]	; (8003950 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003940:	f7fc feb6 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	24001010 	.word	0x24001010
 8003950:	24000210 	.word	0x24000210
 8003954:	2400022c 	.word	0x2400022c
 8003958:	24000248 	.word	0x24000248
 800395c:	58020400 	.word	0x58020400
 8003960:	24000ab0 	.word	0x24000ab0
 8003964:	24000264 	.word	0x24000264
 8003968:	58021000 	.word	0x58021000
 800396c:	24000b94 	.word	0x24000b94
 8003970:	2400028c 	.word	0x2400028c
 8003974:	24000a18 	.word	0x24000a18
 8003978:	240002b4 	.word	0x240002b4
 800397c:	24000be0 	.word	0x24000be0
 8003980:	240002dc 	.word	0x240002dc
 8003984:	24000304 	.word	0x24000304
 8003988:	240003e8 	.word	0x240003e8
 800398c:	240004cc 	.word	0x240004cc
 8003990:	240005b0 	.word	0x240005b0
 8003994:	240009cc 	.word	0x240009cc
 8003998:	24000694 	.word	0x24000694
 800399c:	24000004 	.word	0x24000004
 80039a0:	24000000 	.word	0x24000000
 80039a4:	24000708 	.word	0x24000708
 80039a8:	2400070c 	.word	0x2400070c
 80039ac:	24000008 	.word	0x24000008
 80039b0:	24000710 	.word	0x24000710
 80039b4:	24000714 	.word	0x24000714

080039b8 <_GLOBAL__sub_I_TIM_MS>:
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039c0:	2001      	movs	r0, #1
 80039c2:	f7ff fed3 	bl	800376c <_Z41__static_initialization_and_destruction_0ii>
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_GLOBAL__sub_D_TIM_MS>:
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7ff fecb 	bl	800376c <_Z41__static_initialization_and_destruction_0ii>
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <MX_SPI3_Init+0xa4>)
 80039de:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <MX_SPI3_Init+0xa8>)
 80039e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <MX_SPI3_Init+0xa4>)
 80039e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80039e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <MX_SPI3_Init+0xa4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <MX_SPI3_Init+0xa4>)
 80039f2:	2203      	movs	r2, #3
 80039f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <MX_SPI3_Init+0xa4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <MX_SPI3_Init+0xa4>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a08:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a68:	f007 fb56 	bl	800b118 <HAL_SPI_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003a72:	f7ff fe61 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	24000944 	.word	0x24000944
 8003a80:	40003c00 	.word	0x40003c00

08003a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0b8      	sub	sp, #224	; 0xe0
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	22bc      	movs	r2, #188	; 0xbc
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f00b fc1d 	bl	800f2e4 <memset>
  if(spiHandle->Instance==SPI3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <HAL_SPI_MspInit+0xc0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d142      	bne.n	8003b3a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003abe:	f107 0310 	add.w	r3, r7, #16
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f005 ffc6 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003ace:	f7ff fe33 	bl	8003738 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_SPI_MspInit+0xc4>)
 8003ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_SPI_MspInit+0xc4>)
 8003ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_SPI_MspInit+0xc4>)
 8003ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_SPI_MspInit+0xc4>)
 8003af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <HAL_SPI_MspInit+0xc4>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_SPI_MspInit+0xc4>)
 8003b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003b0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b28:	2306      	movs	r3, #6
 8003b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b32:	4619      	mov	r1, r3
 8003b34:	4805      	ldr	r0, [pc, #20]	; (8003b4c <HAL_SPI_MspInit+0xc8>)
 8003b36:	f004 fdb7 	bl	80086a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	37e0      	adds	r7, #224	; 0xe0
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40003c00 	.word	0x40003c00
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	58020800 	.word	0x58020800

08003b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_MspInit+0x30>)
 8003b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b5c:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <HAL_MspInit+0x30>)
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_MspInit+0x30>)
 8003b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	58024400 	.word	0x58024400

08003b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <NMI_Handler+0x4>

08003b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <HardFault_Handler+0x4>

08003b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <MemManage_Handler+0x4>

08003b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <BusFault_Handler+0x4>

08003b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <UsageFault_Handler+0x4>

08003ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bd0:	f001 fbc6 	bl	8005360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003bd4:	f001 fd23 	bl	800561e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <DMA1_Stream0_IRQHandler+0x10>)
 8003be2:	f003 fa4f 	bl	8007084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	24000f98 	.word	0x24000f98

08003bf0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <DMA1_Stream1_IRQHandler+0x10>)
 8003bf6:	f003 fa45 	bl	8007084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	24000e18 	.word	0x24000e18

08003c04 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <DMA1_Stream2_IRQHandler+0x10>)
 8003c0a:	f003 fa3b 	bl	8007084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	24000f20 	.word	0x24000f20

08003c18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <DMA1_Stream3_IRQHandler+0x10>)
 8003c1e:	f003 fa31 	bl	8007084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	24000d10 	.word	0x24000d10

08003c2c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <DMA1_Stream4_IRQHandler+0x10>)
 8003c32:	f003 fa27 	bl	8007084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	240010a0 	.word	0x240010a0

08003c40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8003c44:	2040      	movs	r0, #64	; 0x40
 8003c46:	f004 fef8 	bl	8008a3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8003c4a:	2080      	movs	r0, #128	; 0x80
 8003c4c:	f004 fef5 	bl	8008a3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c58:	4802      	ldr	r0, [pc, #8]	; (8003c64 <USART3_IRQHandler+0x10>)
 8003c5a:	f009 f843 	bl	800cce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	24000e90 	.word	0x24000e90

08003c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003c6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c70:	f004 fee3 	bl	8008a3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003c74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c78:	f004 fedf 	bl	8008a3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8003c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c80:	f004 fedb 	bl	8008a3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003c84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c88:	f004 fed7 	bl	8008a3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003c96:	f007 fd27 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	24000c78 	.word	0x24000c78

08003ca4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003caa:	f007 fd1d 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	24000afc 	.word	0x24000afc

08003cb8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003cbe:	f007 fd13 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	24000c2c 	.word	0x24000c2c

08003ccc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <TIM5_IRQHandler+0x10>)
 8003cd2:	f007 fd09 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	24000a64 	.word	0x24000a64

08003ce0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <UART4_IRQHandler+0x10>)
 8003ce6:	f008 fffd 	bl	800cce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	24001010 	.word	0x24001010

08003cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <TIM6_DAC_IRQHandler+0x10>)
 8003cfa:	f007 fcf5 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	24000b48 	.word	0x24000b48

08003d08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <TIM7_IRQHandler+0x10>)
 8003d0e:	f007 fceb 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	24000cc4 	.word	0x24000cc4

08003d1c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <UART7_IRQHandler+0x10>)
 8003d22:	f008 ffdf 	bl	800cce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	24000d88 	.word	0x24000d88

08003d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
	return 1;
 8003d34:	2301      	movs	r3, #1
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_kill>:

int _kill(int pid, int sig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d4a:	f00b faa1 	bl	800f290 <__errno>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2216      	movs	r2, #22
 8003d52:	601a      	str	r2, [r3, #0]
	return -1;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_exit>:

void _exit (int status)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ffe7 	bl	8003d40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d72:	e7fe      	b.n	8003d72 <_exit+0x12>

08003d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00a      	b.n	8003d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d86:	f3af 8000 	nop.w
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	60ba      	str	r2, [r7, #8]
 8003d92:	b2ca      	uxtb	r2, r1
 8003d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	dbf0      	blt.n	8003d86 <_read+0x12>
	}

return len;
 8003da4:	687b      	ldr	r3, [r7, #4]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e009      	b.n	8003dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	60ba      	str	r2, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dbf1      	blt.n	8003dc0 <_write+0x12>
	}
	return len;
 8003ddc:	687b      	ldr	r3, [r7, #4]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_close>:

int _close(int file)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	return -1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_isatty>:

int _isatty(int file)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	return 1;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e58:	4a14      	ldr	r2, [pc, #80]	; (8003eac <_sbrk+0x5c>)
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <_sbrk+0x60>)
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <_sbrk+0x64>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <_sbrk+0x64>)
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <_sbrk+0x68>)
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <_sbrk+0x64>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d207      	bcs.n	8003e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e80:	f00b fa06 	bl	800f290 <__errno>
 8003e84:	4603      	mov	r3, r0
 8003e86:	220c      	movs	r2, #12
 8003e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	e009      	b.n	8003ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <_sbrk+0x64>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <_sbrk+0x64>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <_sbrk+0x64>)
 8003ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	24001730 	.word	0x24001730
 8003eb0:	00000400 	.word	0x00000400
 8003eb4:	24000914 	.word	0x24000914
 8003eb8:	24001130 	.word	0x24001130

08003ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <SystemInit+0xec>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <SystemInit+0xec>)
 8003ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <SystemInit+0xf0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d807      	bhi.n	8003eec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <SystemInit+0xf0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 030f 	bic.w	r3, r3, #15
 8003ee4:	4a31      	ldr	r2, [pc, #196]	; (8003fac <SystemInit+0xf0>)
 8003ee6:	f043 0307 	orr.w	r3, r3, #7
 8003eea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003eec:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <SystemInit+0xf4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <SystemInit+0xf4>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <SystemInit+0xf4>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003efe:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <SystemInit+0xf4>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	492b      	ldr	r1, [pc, #172]	; (8003fb0 <SystemInit+0xf4>)
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <SystemInit+0xf8>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f0a:	4b28      	ldr	r3, [pc, #160]	; (8003fac <SystemInit+0xf0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <SystemInit+0xf0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	4a23      	ldr	r2, [pc, #140]	; (8003fac <SystemInit+0xf0>)
 8003f20:	f043 0307 	orr.w	r3, r3, #7
 8003f24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <SystemInit+0xf4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f2c:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <SystemInit+0xf4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f32:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <SystemInit+0xf4>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <SystemInit+0xf4>)
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <SystemInit+0xfc>)
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <SystemInit+0xf4>)
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <SystemInit+0x100>)
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f44:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <SystemInit+0xf4>)
 8003f46:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <SystemInit+0x104>)
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <SystemInit+0xf4>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <SystemInit+0xf4>)
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <SystemInit+0x104>)
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <SystemInit+0xf4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <SystemInit+0xf4>)
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <SystemInit+0x104>)
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <SystemInit+0xf4>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <SystemInit+0xf4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <SystemInit+0xf4>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <SystemInit+0xf4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <SystemInit+0x108>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <SystemInit+0x10c>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f86:	d202      	bcs.n	8003f8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <SystemInit+0x110>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <SystemInit+0x114>)
 8003f90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f94:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <SystemInit+0xec>)
 8003f98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f9c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	52002000 	.word	0x52002000
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fb8:	02020200 	.word	0x02020200
 8003fbc:	01ff0000 	.word	0x01ff0000
 8003fc0:	01010280 	.word	0x01010280
 8003fc4:	5c001000 	.word	0x5c001000
 8003fc8:	ffff0000 	.word	0xffff0000
 8003fcc:	51008108 	.word	0x51008108
 8003fd0:	52004000 	.word	0x52004000

08003fd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b09a      	sub	sp, #104	; 0x68
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	615a      	str	r2, [r3, #20]
 8004006:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	222c      	movs	r2, #44	; 0x2c
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f00b f968 	bl	800f2e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004014:	4b44      	ldr	r3, [pc, #272]	; (8004128 <MX_TIM1_Init+0x154>)
 8004016:	4a45      	ldr	r2, [pc, #276]	; (800412c <MX_TIM1_Init+0x158>)
 8004018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800401a:	4b43      	ldr	r3, [pc, #268]	; (8004128 <MX_TIM1_Init+0x154>)
 800401c:	22c7      	movs	r2, #199	; 0xc7
 800401e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <MX_TIM1_Init+0x154>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8004026:	4b40      	ldr	r3, [pc, #256]	; (8004128 <MX_TIM1_Init+0x154>)
 8004028:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800402c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800402e:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <MX_TIM1_Init+0x154>)
 8004030:	2200      	movs	r2, #0
 8004032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004034:	4b3c      	ldr	r3, [pc, #240]	; (8004128 <MX_TIM1_Init+0x154>)
 8004036:	2200      	movs	r2, #0
 8004038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800403a:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <MX_TIM1_Init+0x154>)
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004040:	4839      	ldr	r0, [pc, #228]	; (8004128 <MX_TIM1_Init+0x154>)
 8004042:	f007 f98a 	bl	800b35a <HAL_TIM_Base_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800404c:	f7ff fb74 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004054:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004056:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800405a:	4619      	mov	r1, r3
 800405c:	4832      	ldr	r0, [pc, #200]	; (8004128 <MX_TIM1_Init+0x154>)
 800405e:	f007 fd77 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004068:	f7ff fb66 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800406c:	482e      	ldr	r0, [pc, #184]	; (8004128 <MX_TIM1_Init+0x154>)
 800406e:	f007 f9cb 	bl	800b408 <HAL_TIM_PWM_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004078:	f7ff fb5e 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800407c:	2300      	movs	r3, #0
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004088:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800408c:	4619      	mov	r1, r3
 800408e:	4826      	ldr	r0, [pc, #152]	; (8004128 <MX_TIM1_Init+0x154>)
 8004090:	f008 fab2 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800409a:	f7ff fb4d 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800409e:	2360      	movs	r3, #96	; 0x60
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80040a2:	f240 1339 	movw	r3, #313	; 0x139
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a8:	2300      	movs	r3, #0
 80040aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040ac:	2300      	movs	r3, #0
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040b4:	2300      	movs	r3, #0
 80040b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040b8:	2300      	movs	r3, #0
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040c0:	2204      	movs	r2, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4818      	ldr	r0, [pc, #96]	; (8004128 <MX_TIM1_Init+0x154>)
 80040c6:	f007 fc2f 	bl	800b928 <HAL_TIM_PWM_ConfigChannel>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80040d0:	f7ff fb32 	bl	8003738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80040f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4807      	ldr	r0, [pc, #28]	; (8004128 <MX_TIM1_Init+0x154>)
 800410a:	f008 fb03 	bl	800c714 <HAL_TIMEx_ConfigBreakDeadTime>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004114:	f7ff fb10 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004118:	4803      	ldr	r0, [pc, #12]	; (8004128 <MX_TIM1_Init+0x154>)
 800411a:	f000 fc85 	bl	8004a28 <HAL_TIM_MspPostInit>

}
 800411e:	bf00      	nop
 8004120:	3768      	adds	r7, #104	; 0x68
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	24000b94 	.word	0x24000b94
 800412c:	40010000 	.word	0x40010000

08004130 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004150:	463b      	mov	r3, r7
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	615a      	str	r2, [r3, #20]
 8004160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004162:	4b2e      	ldr	r3, [pc, #184]	; (800421c <MX_TIM2_Init+0xec>)
 8004164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004168:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <MX_TIM2_Init+0xec>)
 800416c:	22c7      	movs	r2, #199	; 0xc7
 800416e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <MX_TIM2_Init+0xec>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <MX_TIM2_Init+0xec>)
 8004178:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800417c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <MX_TIM2_Init+0xec>)
 8004180:	2200      	movs	r2, #0
 8004182:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <MX_TIM2_Init+0xec>)
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800418a:	4824      	ldr	r0, [pc, #144]	; (800421c <MX_TIM2_Init+0xec>)
 800418c:	f007 f8e5 	bl	800b35a <HAL_TIM_Base_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004196:	f7ff facf 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041a4:	4619      	mov	r1, r3
 80041a6:	481d      	ldr	r0, [pc, #116]	; (800421c <MX_TIM2_Init+0xec>)
 80041a8:	f007 fcd2 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80041b2:	f7ff fac1 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041b6:	4819      	ldr	r0, [pc, #100]	; (800421c <MX_TIM2_Init+0xec>)
 80041b8:	f007 f926 	bl	800b408 <HAL_TIM_PWM_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80041c2:	f7ff fab9 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041ce:	f107 031c 	add.w	r3, r7, #28
 80041d2:	4619      	mov	r1, r3
 80041d4:	4811      	ldr	r0, [pc, #68]	; (800421c <MX_TIM2_Init+0xec>)
 80041d6:	f008 fa0f 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80041e0:	f7ff faaa 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e4:	2360      	movs	r3, #96	; 0x60
 80041e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80041e8:	f240 1339 	movw	r3, #313	; 0x139
 80041ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041f6:	463b      	mov	r3, r7
 80041f8:	2208      	movs	r2, #8
 80041fa:	4619      	mov	r1, r3
 80041fc:	4807      	ldr	r0, [pc, #28]	; (800421c <MX_TIM2_Init+0xec>)
 80041fe:	f007 fb93 	bl	800b928 <HAL_TIM_PWM_ConfigChannel>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004208:	f7ff fa96 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <MX_TIM2_Init+0xec>)
 800420e:	f000 fc0b 	bl	8004a28 <HAL_TIM_MspPostInit>

}
 8004212:	bf00      	nop
 8004214:	3738      	adds	r7, #56	; 0x38
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	24000be0 	.word	0x24000be0

08004220 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	; 0x38
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004240:	463b      	mov	r3, r7
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	615a      	str	r2, [r3, #20]
 8004250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <MX_TIM3_Init+0xe8>)
 8004254:	4a2d      	ldr	r2, [pc, #180]	; (800430c <MX_TIM3_Init+0xec>)
 8004256:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <MX_TIM3_Init+0xe8>)
 800425a:	22c7      	movs	r2, #199	; 0xc7
 800425c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425e:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <MX_TIM3_Init+0xe8>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004264:	4b28      	ldr	r3, [pc, #160]	; (8004308 <MX_TIM3_Init+0xe8>)
 8004266:	f640 125f 	movw	r2, #2399	; 0x95f
 800426a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <MX_TIM3_Init+0xe8>)
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <MX_TIM3_Init+0xe8>)
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004278:	4823      	ldr	r0, [pc, #140]	; (8004308 <MX_TIM3_Init+0xe8>)
 800427a:	f007 f86e 	bl	800b35a <HAL_TIM_Base_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004284:	f7ff fa58 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800428e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004292:	4619      	mov	r1, r3
 8004294:	481c      	ldr	r0, [pc, #112]	; (8004308 <MX_TIM3_Init+0xe8>)
 8004296:	f007 fc5b 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80042a0:	f7ff fa4a 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042a4:	4818      	ldr	r0, [pc, #96]	; (8004308 <MX_TIM3_Init+0xe8>)
 80042a6:	f007 f8af 	bl	800b408 <HAL_TIM_PWM_Init>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80042b0:	f7ff fa42 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	4619      	mov	r1, r3
 80042c2:	4811      	ldr	r0, [pc, #68]	; (8004308 <MX_TIM3_Init+0xe8>)
 80042c4:	f008 f998 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80042ce:	f7ff fa33 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d2:	2360      	movs	r3, #96	; 0x60
 80042d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042e2:	463b      	mov	r3, r7
 80042e4:	2200      	movs	r2, #0
 80042e6:	4619      	mov	r1, r3
 80042e8:	4807      	ldr	r0, [pc, #28]	; (8004308 <MX_TIM3_Init+0xe8>)
 80042ea:	f007 fb1d 	bl	800b928 <HAL_TIM_PWM_ConfigChannel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80042f4:	f7ff fa20 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80042f8:	4803      	ldr	r0, [pc, #12]	; (8004308 <MX_TIM3_Init+0xe8>)
 80042fa:	f000 fb95 	bl	8004a28 <HAL_TIM_MspPostInit>

}
 80042fe:	bf00      	nop
 8004300:	3738      	adds	r7, #56	; 0x38
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	24000ab0 	.word	0x24000ab0
 800430c:	40000400 	.word	0x40000400

08004310 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004330:	463b      	mov	r3, r7
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	60da      	str	r2, [r3, #12]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	615a      	str	r2, [r3, #20]
 8004340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <MX_TIM4_Init+0xe8>)
 8004344:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <MX_TIM4_Init+0xec>)
 8004346:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <MX_TIM4_Init+0xe8>)
 800434a:	22ef      	movs	r2, #239	; 0xef
 800434c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <MX_TIM4_Init+0xe8>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004354:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <MX_TIM4_Init+0xe8>)
 8004356:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800435a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435c:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <MX_TIM4_Init+0xe8>)
 800435e:	2200      	movs	r2, #0
 8004360:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <MX_TIM4_Init+0xe8>)
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004368:	4823      	ldr	r0, [pc, #140]	; (80043f8 <MX_TIM4_Init+0xe8>)
 800436a:	f006 fff6 	bl	800b35a <HAL_TIM_Base_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004374:	f7ff f9e0 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800437e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004382:	4619      	mov	r1, r3
 8004384:	481c      	ldr	r0, [pc, #112]	; (80043f8 <MX_TIM4_Init+0xe8>)
 8004386:	f007 fbe3 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004390:	f7ff f9d2 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004394:	4818      	ldr	r0, [pc, #96]	; (80043f8 <MX_TIM4_Init+0xe8>)
 8004396:	f007 f837 	bl	800b408 <HAL_TIM_PWM_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80043a0:	f7ff f9ca 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043ac:	f107 031c 	add.w	r3, r7, #28
 80043b0:	4619      	mov	r1, r3
 80043b2:	4811      	ldr	r0, [pc, #68]	; (80043f8 <MX_TIM4_Init+0xe8>)
 80043b4:	f008 f920 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80043be:	f7ff f9bb 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c2:	2360      	movs	r3, #96	; 0x60
 80043c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043d2:	463b      	mov	r3, r7
 80043d4:	2208      	movs	r2, #8
 80043d6:	4619      	mov	r1, r3
 80043d8:	4807      	ldr	r0, [pc, #28]	; (80043f8 <MX_TIM4_Init+0xe8>)
 80043da:	f007 faa5 	bl	800b928 <HAL_TIM_PWM_ConfigChannel>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80043e4:	f7ff f9a8 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80043e8:	4803      	ldr	r0, [pc, #12]	; (80043f8 <MX_TIM4_Init+0xe8>)
 80043ea:	f000 fb1d 	bl	8004a28 <HAL_TIM_MspPostInit>

}
 80043ee:	bf00      	nop
 80043f0:	3738      	adds	r7, #56	; 0x38
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	240009cc 	.word	0x240009cc
 80043fc:	40000800 	.word	0x40000800

08004400 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004406:	f107 0310 	add.w	r3, r7, #16
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <MX_TIM5_Init+0x94>)
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <MX_TIM5_Init+0x98>)
 8004422:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <MX_TIM5_Init+0x94>)
 8004426:	22c7      	movs	r2, #199	; 0xc7
 8004428:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <MX_TIM5_Init+0x94>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <MX_TIM5_Init+0x94>)
 8004432:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004436:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <MX_TIM5_Init+0x94>)
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <MX_TIM5_Init+0x94>)
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004444:	4813      	ldr	r0, [pc, #76]	; (8004494 <MX_TIM5_Init+0x94>)
 8004446:	f006 ff88 	bl	800b35a <HAL_TIM_Base_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004450:	f7ff f972 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004458:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800445a:	f107 0310 	add.w	r3, r7, #16
 800445e:	4619      	mov	r1, r3
 8004460:	480c      	ldr	r0, [pc, #48]	; (8004494 <MX_TIM5_Init+0x94>)
 8004462:	f007 fb75 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800446c:	f7ff f964 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4805      	ldr	r0, [pc, #20]	; (8004494 <MX_TIM5_Init+0x94>)
 800447e:	f008 f8bb 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004488:	f7ff f956 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	24000a64 	.word	0x24000a64
 8004498:	40000c00 	.word	0x40000c00

0800449c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <MX_TIM6_Init+0x64>)
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <MX_TIM6_Init+0x68>)
 80044b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <MX_TIM6_Init+0x64>)
 80044b4:	22c7      	movs	r2, #199	; 0xc7
 80044b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <MX_TIM6_Init+0x64>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <MX_TIM6_Init+0x64>)
 80044c0:	f241 726f 	movw	r2, #5999	; 0x176f
 80044c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <MX_TIM6_Init+0x64>)
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80044cc:	480c      	ldr	r0, [pc, #48]	; (8004500 <MX_TIM6_Init+0x64>)
 80044ce:	f006 ff44 	bl	800b35a <HAL_TIM_Base_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80044d8:	f7ff f92e 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4805      	ldr	r0, [pc, #20]	; (8004500 <MX_TIM6_Init+0x64>)
 80044ea:	f008 f885 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80044f4:	f7ff f920 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	24000b48 	.word	0x24000b48
 8004504:	40001000 	.word	0x40001000

08004508 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <MX_TIM7_Init+0x64>)
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <MX_TIM7_Init+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <MX_TIM7_Init+0x64>)
 8004520:	22c7      	movs	r2, #199	; 0xc7
 8004522:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <MX_TIM7_Init+0x64>)
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <MX_TIM7_Init+0x64>)
 800452c:	f240 42af 	movw	r2, #1199	; 0x4af
 8004530:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <MX_TIM7_Init+0x64>)
 8004534:	2280      	movs	r2, #128	; 0x80
 8004536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004538:	480c      	ldr	r0, [pc, #48]	; (800456c <MX_TIM7_Init+0x64>)
 800453a:	f006 ff0e 	bl	800b35a <HAL_TIM_Base_Init>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004544:	f7ff f8f8 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004550:	1d3b      	adds	r3, r7, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4805      	ldr	r0, [pc, #20]	; (800456c <MX_TIM7_Init+0x64>)
 8004556:	f008 f84f 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004560:	f7ff f8ea 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	24000cc4 	.word	0x24000cc4
 8004570:	40001400 	.word	0x40001400

08004574 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800457a:	463b      	mov	r3, r7
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <MX_TIM12_Init+0x6c>)
 8004588:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <MX_TIM12_Init+0x70>)
 800458a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <MX_TIM12_Init+0x6c>)
 800458e:	22c7      	movs	r2, #199	; 0xc7
 8004590:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <MX_TIM12_Init+0x6c>)
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <MX_TIM12_Init+0x6c>)
 800459a:	f240 2257 	movw	r2, #599	; 0x257
 800459e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <MX_TIM12_Init+0x6c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045a6:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <MX_TIM12_Init+0x6c>)
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80045ac:	480c      	ldr	r0, [pc, #48]	; (80045e0 <MX_TIM12_Init+0x6c>)
 80045ae:	f006 fed4 	bl	800b35a <HAL_TIM_Base_Init>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80045b8:	f7ff f8be 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80045c2:	463b      	mov	r3, r7
 80045c4:	4619      	mov	r1, r3
 80045c6:	4806      	ldr	r0, [pc, #24]	; (80045e0 <MX_TIM12_Init+0x6c>)
 80045c8:	f007 fac2 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80045d2:	f7ff f8b1 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	24000c78 	.word	0x24000c78
 80045e4:	40001800 	.word	0x40001800

080045e8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <MX_TIM13_Init+0x40>)
 80045ee:	4a0f      	ldr	r2, [pc, #60]	; (800462c <MX_TIM13_Init+0x44>)
 80045f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <MX_TIM13_Init+0x40>)
 80045f4:	22c7      	movs	r2, #199	; 0xc7
 80045f6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <MX_TIM13_Init+0x40>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <MX_TIM13_Init+0x40>)
 8004600:	f240 2257 	movw	r2, #599	; 0x257
 8004604:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <MX_TIM13_Init+0x40>)
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <MX_TIM13_Init+0x40>)
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004612:	4805      	ldr	r0, [pc, #20]	; (8004628 <MX_TIM13_Init+0x40>)
 8004614:	f006 fea1 	bl	800b35a <HAL_TIM_Base_Init>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800461e:	f7ff f88b 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	24000afc 	.word	0x24000afc
 800462c:	40001c00 	.word	0x40001c00

08004630 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <MX_TIM14_Init+0x40>)
 8004636:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <MX_TIM14_Init+0x44>)
 8004638:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <MX_TIM14_Init+0x40>)
 800463c:	22c7      	movs	r2, #199	; 0xc7
 800463e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <MX_TIM14_Init+0x40>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <MX_TIM14_Init+0x40>)
 8004648:	f640 125f 	movw	r2, #2399	; 0x95f
 800464c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <MX_TIM14_Init+0x40>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <MX_TIM14_Init+0x40>)
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <MX_TIM14_Init+0x40>)
 800465c:	f006 fe7d 	bl	800b35a <HAL_TIM_Base_Init>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004666:	f7ff f867 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	24000c2c 	.word	0x24000c2c
 8004674:	40002000 	.word	0x40002000

08004678 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b09a      	sub	sp, #104	; 0x68
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800467e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800468c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
 80046a8:	615a      	str	r2, [r3, #20]
 80046aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	222c      	movs	r2, #44	; 0x2c
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f00a fe16 	bl	800f2e4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046ba:	4a40      	ldr	r2, [pc, #256]	; (80047bc <MX_TIM15_Init+0x144>)
 80046bc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046c0:	22ef      	movs	r2, #239	; 0xef
 80046c2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046c4:	4b3c      	ldr	r3, [pc, #240]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80046d0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d2:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80046d8:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046da:	2200      	movs	r2, #0
 80046dc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80046e4:	4834      	ldr	r0, [pc, #208]	; (80047b8 <MX_TIM15_Init+0x140>)
 80046e6:	f006 fe38 	bl	800b35a <HAL_TIM_Base_Init>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80046f0:	f7ff f822 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80046fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046fe:	4619      	mov	r1, r3
 8004700:	482d      	ldr	r0, [pc, #180]	; (80047b8 <MX_TIM15_Init+0x140>)
 8004702:	f007 fa25 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800470c:	f7ff f814 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004710:	4829      	ldr	r0, [pc, #164]	; (80047b8 <MX_TIM15_Init+0x140>)
 8004712:	f006 fe79 	bl	800b408 <HAL_TIM_PWM_Init>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800471c:	f7ff f80c 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004724:	2300      	movs	r3, #0
 8004726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004728:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800472c:	4619      	mov	r1, r3
 800472e:	4822      	ldr	r0, [pc, #136]	; (80047b8 <MX_TIM15_Init+0x140>)
 8004730:	f007 ff62 	bl	800c5f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800473a:	f7fe fffd 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800473e:	2360      	movs	r3, #96	; 0x60
 8004740:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004742:	f240 1339 	movw	r3, #313	; 0x139
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004748:	2300      	movs	r3, #0
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800474c:	2300      	movs	r3, #0
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004754:	2300      	movs	r3, #0
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004758:	2300      	movs	r3, #0
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800475c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004760:	2204      	movs	r2, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4814      	ldr	r0, [pc, #80]	; (80047b8 <MX_TIM15_Init+0x140>)
 8004766:	f007 f8df 	bl	800b928 <HAL_TIM_PWM_ConfigChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004770:	f7fe ffe2 	bl	8003738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800478c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004792:	2300      	movs	r3, #0
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4807      	ldr	r0, [pc, #28]	; (80047b8 <MX_TIM15_Init+0x140>)
 800479c:	f007 ffba 	bl	800c714 <HAL_TIMEx_ConfigBreakDeadTime>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80047a6:	f7fe ffc7 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80047aa:	4803      	ldr	r0, [pc, #12]	; (80047b8 <MX_TIM15_Init+0x140>)
 80047ac:	f000 f93c 	bl	8004a28 <HAL_TIM_MspPostInit>

}
 80047b0:	bf00      	nop
 80047b2:	3768      	adds	r7, #104	; 0x68
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	24000a18 	.word	0x24000a18
 80047bc:	40014000 	.word	0x40014000

080047c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a8b      	ldr	r2, [pc, #556]	; (80049fc <HAL_TIM_Base_MspInit+0x23c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10f      	bne.n	80047f2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047d2:	4b8b      	ldr	r3, [pc, #556]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80047d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d8:	4a89      	ldr	r2, [pc, #548]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047e2:	4b87      	ldr	r3, [pc, #540]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80047e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80047f0:	e100      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d10f      	bne.n	800481c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047fc:	4b80      	ldr	r3, [pc, #512]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80047fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004802:	4a7f      	ldr	r2, [pc, #508]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800480c:	4b7c      	ldr	r3, [pc, #496]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800480e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800481a:	e0eb      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a78      	ldr	r2, [pc, #480]	; (8004a04 <HAL_TIM_Base_MspInit+0x244>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10f      	bne.n	8004846 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004826:	4b76      	ldr	r3, [pc, #472]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800482c:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800482e:	f043 0302 	orr.w	r3, r3, #2
 8004832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004844:	e0d6      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <HAL_TIM_Base_MspInit+0x248>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10f      	bne.n	8004870 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004850:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004856:	4a6a      	ldr	r2, [pc, #424]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004860:	4b67      	ldr	r3, [pc, #412]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800486e:	e0c1      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a65      	ldr	r2, [pc, #404]	; (8004a0c <HAL_TIM_Base_MspInit+0x24c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d117      	bne.n	80048aa <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800487a:	4b61      	ldr	r3, [pc, #388]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800487c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004880:	4a5f      	ldr	r2, [pc, #380]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004882:	f043 0308 	orr.w	r3, r3, #8
 8004886:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800488a:	4b5d      	ldr	r3, [pc, #372]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800488c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004898:	2200      	movs	r2, #0
 800489a:	2100      	movs	r1, #0
 800489c:	2032      	movs	r0, #50	; 0x32
 800489e:	f000 fe8a 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80048a2:	2032      	movs	r0, #50	; 0x32
 80048a4:	f000 fea1 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 80048a8:	e0a4      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a58      	ldr	r2, [pc, #352]	; (8004a10 <HAL_TIM_Base_MspInit+0x250>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d117      	bne.n	80048e4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048b4:	4b52      	ldr	r3, [pc, #328]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80048b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ba:	4a51      	ldr	r2, [pc, #324]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80048bc:	f043 0310 	orr.w	r3, r3, #16
 80048c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048c4:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80048c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	2036      	movs	r0, #54	; 0x36
 80048d8:	f000 fe6d 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048dc:	2036      	movs	r0, #54	; 0x36
 80048de:	f000 fe84 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 80048e2:	e087      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a4a      	ldr	r2, [pc, #296]	; (8004a14 <HAL_TIM_Base_MspInit+0x254>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d117      	bne.n	800491e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048ee:	4b44      	ldr	r3, [pc, #272]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80048f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048f4:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80048f6:	f043 0320 	orr.w	r3, r3, #32
 80048fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048fe:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800490c:	2200      	movs	r2, #0
 800490e:	2100      	movs	r1, #0
 8004910:	2037      	movs	r0, #55	; 0x37
 8004912:	f000 fe50 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004916:	2037      	movs	r0, #55	; 0x37
 8004918:	f000 fe67 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 800491c:	e06a      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3d      	ldr	r2, [pc, #244]	; (8004a18 <HAL_TIM_Base_MspInit+0x258>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d117      	bne.n	8004958 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004928:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800492a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800492e:	4a34      	ldr	r2, [pc, #208]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800493a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	202b      	movs	r0, #43	; 0x2b
 800494c:	f000 fe33 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004950:	202b      	movs	r0, #43	; 0x2b
 8004952:	f000 fe4a 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 8004956:	e04d      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <HAL_TIM_Base_MspInit+0x25c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d117      	bne.n	8004992 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004972:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 8004974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	202c      	movs	r0, #44	; 0x2c
 8004986:	f000 fe16 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800498a:	202c      	movs	r0, #44	; 0x2c
 800498c:	f000 fe2d 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 8004990:	e030      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <HAL_TIM_Base_MspInit+0x260>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d117      	bne.n	80049cc <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800499c:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 800499e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049a2:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80049ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80049ba:	2200      	movs	r2, #0
 80049bc:	2100      	movs	r1, #0
 80049be:	202d      	movs	r0, #45	; 0x2d
 80049c0:	f000 fdf9 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80049c4:	202d      	movs	r0, #45	; 0x2d
 80049c6:	f000 fe10 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 80049ca:	e013      	b.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <HAL_TIM_Base_MspInit+0x264>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80049d6:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80049d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_TIM_Base_MspInit+0x240>)
 80049e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
}
 80049f4:	bf00      	nop
 80049f6:	3738      	adds	r7, #56	; 0x38
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010000 	.word	0x40010000
 8004a00:	58024400 	.word	0x58024400
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40001000 	.word	0x40001000
 8004a14:	40001400 	.word	0x40001400
 8004a18:	40001800 	.word	0x40001800
 8004a1c:	40001c00 	.word	0x40001c00
 8004a20:	40002000 	.word	0x40002000
 8004a24:	40014000 	.word	0x40014000

08004a28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a30:	f107 031c 	add.w	r3, r7, #28
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5e      	ldr	r2, [pc, #376]	; (8004bc0 <HAL_TIM_MspPostInit+0x198>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d120      	bne.n	8004a8c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a4a:	4b5e      	ldr	r3, [pc, #376]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a50:	4a5c      	ldr	r2, [pc, #368]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004a52:	f043 0310 	orr.w	r3, r3, #16
 8004a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a5a:	4b5a      	ldr	r3, [pc, #360]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8004a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a76:	2300      	movs	r3, #0
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8004a7e:	f107 031c 	add.w	r3, r7, #28
 8004a82:	4619      	mov	r1, r3
 8004a84:	4850      	ldr	r0, [pc, #320]	; (8004bc8 <HAL_TIM_MspPostInit+0x1a0>)
 8004a86:	f003 fe0f 	bl	80086a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004a8a:	e094      	b.n	8004bb6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d120      	bne.n	8004ad8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a96:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9c:	4a49      	ldr	r2, [pc, #292]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004a9e:	f043 0302 	orr.w	r3, r3, #2
 8004aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8004ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aba:	2302      	movs	r3, #2
 8004abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8004aca:	f107 031c 	add.w	r3, r7, #28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	483e      	ldr	r0, [pc, #248]	; (8004bcc <HAL_TIM_MspPostInit+0x1a4>)
 8004ad2:	f003 fde9 	bl	80086a8 <HAL_GPIO_Init>
}
 8004ad6:	e06e      	b.n	8004bb6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <HAL_TIM_MspPostInit+0x1a8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d11f      	bne.n	8004b22 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ae8:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8004b00:	2340      	movs	r3, #64	; 0x40
 8004b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b04:	2302      	movs	r3, #2
 8004b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b10:	2302      	movs	r3, #2
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8004b14:	f107 031c 	add.w	r3, r7, #28
 8004b18:	4619      	mov	r1, r3
 8004b1a:	482e      	ldr	r0, [pc, #184]	; (8004bd4 <HAL_TIM_MspPostInit+0x1ac>)
 8004b1c:	f003 fdc4 	bl	80086a8 <HAL_GPIO_Init>
}
 8004b20:	e049      	b.n	8004bb6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2c      	ldr	r2, [pc, #176]	; (8004bd8 <HAL_TIM_MspPostInit+0x1b0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d120      	bne.n	8004b6e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b32:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8004b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b50:	2302      	movs	r3, #2
 8004b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 031c 	add.w	r3, r7, #28
 8004b64:	4619      	mov	r1, r3
 8004b66:	4819      	ldr	r0, [pc, #100]	; (8004bcc <HAL_TIM_MspPostInit+0x1a4>)
 8004b68:	f003 fd9e 	bl	80086a8 <HAL_GPIO_Init>
}
 8004b6c:	e023      	b.n	8004bb6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1a      	ldr	r2, [pc, #104]	; (8004bdc <HAL_TIM_MspPostInit+0x1b4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d11e      	bne.n	8004bb6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7e:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_TIM_MspPostInit+0x19c>)
 8004b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8004b96:	2340      	movs	r3, #64	; 0x40
 8004b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <HAL_TIM_MspPostInit+0x1a0>)
 8004bb2:	f003 fd79 	bl	80086a8 <HAL_GPIO_Init>
}
 8004bb6:	bf00      	nop
 8004bb8:	3730      	adds	r7, #48	; 0x30
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	58021000 	.word	0x58021000
 8004bcc:	58020400 	.word	0x58020400
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	58020000 	.word	0x58020000
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40014000 	.word	0x40014000

08004be0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004be6:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <MX_UART4_Init+0xa0>)
 8004be8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <MX_UART4_Init+0xa4>)
 8004bee:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004bf0:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004bf6:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c04:	220c      	movs	r2, #12
 8004c06:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c08:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c1a:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004c20:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c22:	2208      	movs	r2, #8
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004c2e:	4813      	ldr	r0, [pc, #76]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c30:	f007 fe0c 	bl	800c84c <HAL_UART_Init>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8004c3a:	f7fe fd7d 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004c3e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004c42:	480e      	ldr	r0, [pc, #56]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c44:	f009 fe93 	bl	800e96e <HAL_UARTEx_SetTxFifoThreshold>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8004c4e:	f7fe fd73 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004c52:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004c56:	4809      	ldr	r0, [pc, #36]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c58:	f009 fec7 	bl	800e9ea <HAL_UARTEx_SetRxFifoThreshold>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8004c62:	f7fe fd69 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8004c66:	4805      	ldr	r0, [pc, #20]	; (8004c7c <MX_UART4_Init+0x9c>)
 8004c68:	f009 fe0d 	bl	800e886 <HAL_UARTEx_EnableFifoMode>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8004c72:	f7fe fd61 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	24001010 	.word	0x24001010
 8004c80:	40004c00 	.word	0x40004c00
 8004c84:	001e8480 	.word	0x001e8480

08004c88 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004c8c:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <MX_UART7_Init+0x94>)
 8004c8e:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <MX_UART7_Init+0x98>)
 8004c90:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004c92:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <MX_UART7_Init+0x94>)
 8004c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c98:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004c9a:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <MX_UART7_Init+0x94>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <MX_UART7_Init+0x94>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004ca6:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <MX_UART7_Init+0x94>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cae:	220c      	movs	r2, #12
 8004cb0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cb8:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <MX_UART7_Init+0x94>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004cd0:	4812      	ldr	r0, [pc, #72]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cd2:	f007 fdbb 	bl	800c84c <HAL_UART_Init>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8004cdc:	f7fe fd2c 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004ce0:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004ce4:	480d      	ldr	r0, [pc, #52]	; (8004d1c <MX_UART7_Init+0x94>)
 8004ce6:	f009 fe42 	bl	800e96e <HAL_UARTEx_SetTxFifoThreshold>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8004cf0:	f7fe fd22 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004cf4:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <MX_UART7_Init+0x94>)
 8004cfa:	f009 fe76 	bl	800e9ea <HAL_UARTEx_SetRxFifoThreshold>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8004d04:	f7fe fd18 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8004d08:	4804      	ldr	r0, [pc, #16]	; (8004d1c <MX_UART7_Init+0x94>)
 8004d0a:	f009 fdbc 	bl	800e886 <HAL_UARTEx_EnableFifoMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8004d14:	f7fe fd10 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004d18:	bf00      	nop
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	24000d88 	.word	0x24000d88
 8004d20:	40007800 	.word	0x40007800

08004d24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d2a:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <MX_USART3_UART_Init+0x94>)
 8004d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004d2e:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004d36:	4b1f      	ldr	r3, [pc, #124]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004d48:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d4a:	220c      	movs	r2, #12
 8004d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d54:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d60:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004d6c:	4811      	ldr	r0, [pc, #68]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d6e:	f007 fd6d 	bl	800c84c <HAL_UART_Init>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004d78:	f7fe fcde 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	480d      	ldr	r0, [pc, #52]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d80:	f009 fdf5 	bl	800e96e <HAL_UARTEx_SetTxFifoThreshold>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004d8a:	f7fe fcd5 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4808      	ldr	r0, [pc, #32]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004d92:	f009 fe2a 	bl	800e9ea <HAL_UARTEx_SetRxFifoThreshold>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004d9c:	f7fe fccc 	bl	8003738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004da0:	4804      	ldr	r0, [pc, #16]	; (8004db4 <MX_USART3_UART_Init+0x90>)
 8004da2:	f009 fdab 	bl	800e8fc <HAL_UARTEx_DisableFifoMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004dac:	f7fe fcc4 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	24000e90 	.word	0x24000e90
 8004db8:	40004800 	.word	0x40004800

08004dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b0bc      	sub	sp, #240	; 0xf0
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dd4:	f107 0320 	add.w	r3, r7, #32
 8004dd8:	22bc      	movs	r2, #188	; 0xbc
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f00a fa81 	bl	800f2e4 <memset>
  if(uartHandle->Instance==UART4)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4aa1      	ldr	r2, [pc, #644]	; (800506c <HAL_UART_MspInit+0x2b0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f040 80b7 	bne.w	8004f5c <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004dee:	2302      	movs	r3, #2
 8004df0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004df2:	2300      	movs	r3, #0
 8004df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004df8:	f107 0320 	add.w	r3, r7, #32
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fe29 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004e08:	f7fe fc96 	bl	8003738 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004e0c:	4b98      	ldr	r3, [pc, #608]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e12:	4a97      	ldr	r2, [pc, #604]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e1c:	4b94      	ldr	r3, [pc, #592]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e30:	4a8f      	ldr	r2, [pc, #572]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004e60:	2308      	movs	r3, #8
 8004e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4881      	ldr	r0, [pc, #516]	; (8005074 <HAL_UART_MspInit+0x2b8>)
 8004e6e:	f003 fc1b 	bl	80086a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8004e72:	4b81      	ldr	r3, [pc, #516]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e74:	4a81      	ldr	r2, [pc, #516]	; (800507c <HAL_UART_MspInit+0x2c0>)
 8004e76:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004e78:	4b7f      	ldr	r3, [pc, #508]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e7a:	223f      	movs	r2, #63	; 0x3f
 8004e7c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7e:	4b7e      	ldr	r3, [pc, #504]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e84:	4b7c      	ldr	r3, [pc, #496]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e8a:	4b7b      	ldr	r3, [pc, #492]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e90:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e92:	4b79      	ldr	r3, [pc, #484]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e98:	4b77      	ldr	r3, [pc, #476]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004e9e:	4b76      	ldr	r3, [pc, #472]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ea4:	4b74      	ldr	r3, [pc, #464]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004eac:	2204      	movs	r2, #4
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004eb0:	4b71      	ldr	r3, [pc, #452]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004eb6:	4b70      	ldr	r3, [pc, #448]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004ebc:	4b6e      	ldr	r3, [pc, #440]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004ec2:	486d      	ldr	r0, [pc, #436]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004ec4:	f000 fdb6 	bl	8005a34 <HAL_DMA_Init>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8004ece:	f7fe fc33 	bl	8003738 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a68      	ldr	r2, [pc, #416]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004ed6:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ed8:	4a67      	ldr	r2, [pc, #412]	; (8005078 <HAL_UART_MspInit+0x2bc>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004ede:	4b68      	ldr	r3, [pc, #416]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004ee0:	4a68      	ldr	r2, [pc, #416]	; (8005084 <HAL_UART_MspInit+0x2c8>)
 8004ee2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8004ee4:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004ee6:	2240      	movs	r2, #64	; 0x40
 8004ee8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ef0:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ef6:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004efe:	4b60      	ldr	r3, [pc, #384]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f04:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004f0a:	4b5d      	ldr	r3, [pc, #372]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f10:	4b5b      	ldr	r3, [pc, #364]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f16:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f18:	2204      	movs	r2, #4
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f1c:	4b58      	ldr	r3, [pc, #352]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f1e:	2203      	movs	r2, #3
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004f22:	4b57      	ldr	r3, [pc, #348]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004f28:	4b55      	ldr	r3, [pc, #340]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004f2e:	4854      	ldr	r0, [pc, #336]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f30:	f000 fd80 	bl	8005a34 <HAL_DMA_Init>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8004f3a:	f7fe fbfd 	bl	8003738 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a4f      	ldr	r2, [pc, #316]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f42:	679a      	str	r2, [r3, #120]	; 0x78
 8004f44:	4a4e      	ldr	r2, [pc, #312]	; (8005080 <HAL_UART_MspInit+0x2c4>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2034      	movs	r0, #52	; 0x34
 8004f50:	f000 fb31 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004f54:	2034      	movs	r0, #52	; 0x34
 8004f56:	f000 fb48 	bl	80055ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004f5a:	e153      	b.n	8005204 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a49      	ldr	r2, [pc, #292]	; (8005088 <HAL_UART_MspInit+0x2cc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	f040 8098 	bne.w	8005098 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f72:	f107 0320 	add.w	r3, r7, #32
 8004f76:	4618      	mov	r0, r3
 8004f78:	f004 fd6c 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8004f82:	f7fe fbd9 	bl	8003738 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004f86:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f8c:	4a38      	ldr	r2, [pc, #224]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fa4:	4b32      	ldr	r3, [pc, #200]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004faa:	4a31      	ldr	r2, [pc, #196]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004fac:	f043 0310 	orr.w	r3, r3, #16
 8004fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <HAL_UART_MspInit+0x2b4>)
 8004fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004fc2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004fdc:	2307      	movs	r3, #7
 8004fde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fe2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4828      	ldr	r0, [pc, #160]	; (800508c <HAL_UART_MspInit+0x2d0>)
 8004fea:	f003 fb5d 	bl	80086a8 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8004fee:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8004ff0:	4a28      	ldr	r2, [pc, #160]	; (8005094 <HAL_UART_MspInit+0x2d8>)
 8004ff2:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8004ff4:	4b26      	ldr	r3, [pc, #152]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8004ff6:	2250      	movs	r2, #80	; 0x50
 8004ff8:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ffa:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005000:	4b23      	ldr	r3, [pc, #140]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005002:	2200      	movs	r2, #0
 8005004:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800500c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005010:	2200      	movs	r2, #0
 8005012:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005014:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005016:	2200      	movs	r2, #0
 8005018:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 800501c:	2200      	movs	r2, #0
 800501e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005022:	2200      	movs	r2, #0
 8005024:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005028:	2204      	movs	r2, #4
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800502c:	4b18      	ldr	r3, [pc, #96]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 800502e:	2203      	movs	r2, #3
 8005030:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005034:	2200      	movs	r2, #0
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800503e:	4814      	ldr	r0, [pc, #80]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005040:	f000 fcf8 	bl	8005a34 <HAL_DMA_Init>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800504a:	f7fe fb75 	bl	8003738 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a0f      	ldr	r2, [pc, #60]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005052:	679a      	str	r2, [r3, #120]	; 0x78
 8005054:	4a0e      	ldr	r2, [pc, #56]	; (8005090 <HAL_UART_MspInit+0x2d4>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	2100      	movs	r1, #0
 800505e:	2052      	movs	r0, #82	; 0x52
 8005060:	f000 faa9 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005064:	2052      	movs	r0, #82	; 0x52
 8005066:	f000 fac0 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 800506a:	e0cb      	b.n	8005204 <HAL_UART_MspInit+0x448>
 800506c:	40004c00 	.word	0x40004c00
 8005070:	58024400 	.word	0x58024400
 8005074:	58020c00 	.word	0x58020c00
 8005078:	24000d10 	.word	0x24000d10
 800507c:	40020058 	.word	0x40020058
 8005080:	240010a0 	.word	0x240010a0
 8005084:	40020070 	.word	0x40020070
 8005088:	40007800 	.word	0x40007800
 800508c:	58021000 	.word	0x58021000
 8005090:	24000f98 	.word	0x24000f98
 8005094:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a5b      	ldr	r2, [pc, #364]	; (800520c <HAL_UART_MspInit+0x450>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	f040 80b0 	bne.w	8005204 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80050a4:	2302      	movs	r3, #2
 80050a6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050ae:	f107 0320 	add.w	r3, r7, #32
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fcce 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80050be:	f7fe fb3b 	bl	8003738 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80050c2:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_UART_MspInit+0x454>)
 80050c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c8:	4a51      	ldr	r2, [pc, #324]	; (8005210 <HAL_UART_MspInit+0x454>)
 80050ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050d2:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <HAL_UART_MspInit+0x454>)
 80050d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_UART_MspInit+0x454>)
 80050e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e6:	4a4a      	ldr	r2, [pc, #296]	; (8005210 <HAL_UART_MspInit+0x454>)
 80050e8:	f043 0308 	orr.w	r3, r3, #8
 80050ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050f0:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_UART_MspInit+0x454>)
 80050f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005106:	2302      	movs	r3, #2
 8005108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005118:	2307      	movs	r3, #7
 800511a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800511e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005122:	4619      	mov	r1, r3
 8005124:	483b      	ldr	r0, [pc, #236]	; (8005214 <HAL_UART_MspInit+0x458>)
 8005126:	f003 fabf 	bl	80086a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_UART_MspInit+0x45c>)
 800512c:	4a3b      	ldr	r2, [pc, #236]	; (800521c <HAL_UART_MspInit+0x460>)
 800512e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005132:	222d      	movs	r2, #45	; 0x2d
 8005134:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005136:	4b38      	ldr	r3, [pc, #224]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005138:	2200      	movs	r2, #0
 800513a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800513c:	4b36      	ldr	r3, [pc, #216]	; (8005218 <HAL_UART_MspInit+0x45c>)
 800513e:	2200      	movs	r2, #0
 8005140:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005142:	4b35      	ldr	r3, [pc, #212]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005148:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800514a:	4b33      	ldr	r3, [pc, #204]	; (8005218 <HAL_UART_MspInit+0x45c>)
 800514c:	2200      	movs	r2, #0
 800514e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005152:	2200      	movs	r2, #0
 8005154:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005156:	4b30      	ldr	r3, [pc, #192]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005158:	2200      	movs	r2, #0
 800515a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800515c:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_UART_MspInit+0x45c>)
 800515e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005162:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005164:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005166:	2200      	movs	r2, #0
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800516a:	482b      	ldr	r0, [pc, #172]	; (8005218 <HAL_UART_MspInit+0x45c>)
 800516c:	f000 fc62 	bl	8005a34 <HAL_DMA_Init>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_UART_MspInit+0x3be>
      Error_Handler();
 8005176:	f7fe fadf 	bl	8003738 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a26      	ldr	r2, [pc, #152]	; (8005218 <HAL_UART_MspInit+0x45c>)
 800517e:	67da      	str	r2, [r3, #124]	; 0x7c
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <HAL_UART_MspInit+0x45c>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <HAL_UART_MspInit+0x464>)
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <HAL_UART_MspInit+0x468>)
 800518a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800518c:	4b24      	ldr	r3, [pc, #144]	; (8005220 <HAL_UART_MspInit+0x464>)
 800518e:	222e      	movs	r2, #46	; 0x2e
 8005190:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_UART_MspInit+0x464>)
 8005194:	2240      	movs	r2, #64	; 0x40
 8005196:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <HAL_UART_MspInit+0x464>)
 800519a:	2200      	movs	r2, #0
 800519c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051a6:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051ac:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051be:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051c0:	4b17      	ldr	r3, [pc, #92]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051c2:	2204      	movs	r2, #4
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051c6:	4b16      	ldr	r3, [pc, #88]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051c8:	2203      	movs	r2, #3
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80051cc:	4b14      	ldr	r3, [pc, #80]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80051d2:	4b13      	ldr	r3, [pc, #76]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80051d8:	4811      	ldr	r0, [pc, #68]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051da:	f000 fc2b 	bl	8005a34 <HAL_DMA_Init>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80051e4:	f7fe faa8 	bl	8003738 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051ec:	679a      	str	r2, [r3, #120]	; 0x78
 80051ee:	4a0c      	ldr	r2, [pc, #48]	; (8005220 <HAL_UART_MspInit+0x464>)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80051f4:	2200      	movs	r2, #0
 80051f6:	2100      	movs	r1, #0
 80051f8:	2027      	movs	r0, #39	; 0x27
 80051fa:	f000 f9dc 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80051fe:	2027      	movs	r0, #39	; 0x27
 8005200:	f000 f9f3 	bl	80055ea <HAL_NVIC_EnableIRQ>
}
 8005204:	bf00      	nop
 8005206:	37f0      	adds	r7, #240	; 0xf0
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40004800 	.word	0x40004800
 8005210:	58024400 	.word	0x58024400
 8005214:	58020c00 	.word	0x58020c00
 8005218:	24000e18 	.word	0x24000e18
 800521c:	40020028 	.word	0x40020028
 8005220:	24000f20 	.word	0x24000f20
 8005224:	40020040 	.word	0x40020040

08005228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8005228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800522c:	f7fe fe46 	bl	8003ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005230:	480c      	ldr	r0, [pc, #48]	; (8005264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005232:	490d      	ldr	r1, [pc, #52]	; (8005268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005234:	4a0d      	ldr	r2, [pc, #52]	; (800526c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005238:	e002      	b.n	8005240 <LoopCopyDataInit>

0800523a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800523a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800523c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800523e:	3304      	adds	r3, #4

08005240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005244:	d3f9      	bcc.n	800523a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005246:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005248:	4c0a      	ldr	r4, [pc, #40]	; (8005274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800524a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800524c:	e001      	b.n	8005252 <LoopFillZerobss>

0800524e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800524e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005250:	3204      	adds	r2, #4

08005252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005254:	d3fb      	bcc.n	800524e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005256:	f00a f821 	bl	800f29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800525a:	f7fe f865 	bl	8003328 <main>
  bx  lr
 800525e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8005260:	24001730 	.word	0x24001730
  ldr r0, =_sdata
 8005264:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005268:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 800526c:	080138ac 	.word	0x080138ac
  ldr r2, =_sbss
 8005270:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8005274:	2400112c 	.word	0x2400112c

08005278 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005278:	e7fe      	b.n	8005278 <ADC3_IRQHandler>
	...

0800527c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005282:	2003      	movs	r0, #3
 8005284:	f000 f98c 	bl	80055a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005288:	f004 fa0e 	bl	80096a8 <HAL_RCC_GetSysClockFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <HAL_Init+0x68>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	4913      	ldr	r1, [pc, #76]	; (80052e8 <HAL_Init+0x6c>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_Init+0x68>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <HAL_Init+0x6c>)
 80052b0:	5cd3      	ldrb	r3, [r2, r3]
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <HAL_Init+0x70>)
 80052be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <HAL_Init+0x74>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052c6:	2000      	movs	r0, #0
 80052c8:	f000 f814 	bl	80052f4 <HAL_InitTick>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e002      	b.n	80052dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80052d6:	f7fe fc3b 	bl	8003b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	58024400 	.word	0x58024400
 80052e8:	08011bb8 	.word	0x08011bb8
 80052ec:	24000018 	.word	0x24000018
 80052f0:	24000014 	.word	0x24000014

080052f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80052fc:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_InitTick+0x60>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e021      	b.n	800534c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <HAL_InitTick+0x64>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_InitTick+0x60>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005316:	fbb3 f3f1 	udiv	r3, r3, r1
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f971 	bl	8005606 <HAL_SYSTICK_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e00e      	b.n	800534c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d80a      	bhi.n	800534a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005334:	2200      	movs	r2, #0
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	f000 f93b 	bl	80055b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005340:	4a06      	ldr	r2, [pc, #24]	; (800535c <HAL_InitTick+0x68>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e000      	b.n	800534c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	24000020 	.word	0x24000020
 8005358:	24000014 	.word	0x24000014
 800535c:	2400001c 	.word	0x2400001c

08005360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_IncTick+0x20>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_IncTick+0x24>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4413      	add	r3, r2
 8005370:	4a04      	ldr	r2, [pc, #16]	; (8005384 <HAL_IncTick+0x24>)
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	24000020 	.word	0x24000020
 8005384:	24001118 	.word	0x24001118

08005388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return uwTick;
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <HAL_GetTick+0x14>)
 800538e:	681b      	ldr	r3, [r3, #0]
}
 8005390:	4618      	mov	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	24001118 	.word	0x24001118

080053a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053a8:	f7ff ffee 	bl	8005388 <HAL_GetTick>
 80053ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d005      	beq.n	80053c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <HAL_Delay+0x44>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053c6:	bf00      	nop
 80053c8:	f7ff ffde 	bl	8005388 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d8f7      	bhi.n	80053c8 <HAL_Delay+0x28>
  {
  }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	24000020 	.word	0x24000020

080053e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_GetREVID+0x14>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0c1b      	lsrs	r3, r3, #16
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	5c001000 	.word	0x5c001000

08005400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <__NVIC_SetPriorityGrouping+0x40>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800541c:	4013      	ands	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <__NVIC_SetPriorityGrouping+0x44>)
 800542a:	4313      	orrs	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800542e:	4a04      	ldr	r2, [pc, #16]	; (8005440 <__NVIC_SetPriorityGrouping+0x40>)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	60d3      	str	r3, [r2, #12]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	e000ed00 	.word	0xe000ed00
 8005444:	05fa0000 	.word	0x05fa0000

08005448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <__NVIC_GetPriorityGrouping+0x18>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	f003 0307 	and.w	r3, r3, #7
}
 8005456:	4618      	mov	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800546e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005472:	2b00      	cmp	r3, #0
 8005474:	db0b      	blt.n	800548e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	f003 021f 	and.w	r2, r3, #31
 800547c:	4907      	ldr	r1, [pc, #28]	; (800549c <__NVIC_EnableIRQ+0x38>)
 800547e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	2001      	movs	r0, #1
 8005486:	fa00 f202 	lsl.w	r2, r0, r2
 800548a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000e100 	.word	0xe000e100

080054a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	6039      	str	r1, [r7, #0]
 80054aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db0a      	blt.n	80054ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	490c      	ldr	r1, [pc, #48]	; (80054ec <__NVIC_SetPriority+0x4c>)
 80054ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054be:	0112      	lsls	r2, r2, #4
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	440b      	add	r3, r1
 80054c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054c8:	e00a      	b.n	80054e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	4908      	ldr	r1, [pc, #32]	; (80054f0 <__NVIC_SetPriority+0x50>)
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	3b04      	subs	r3, #4
 80054d8:	0112      	lsls	r2, r2, #4
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	440b      	add	r3, r1
 80054de:	761a      	strb	r2, [r3, #24]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	e000e100 	.word	0xe000e100
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f1c3 0307 	rsb	r3, r3, #7
 800550e:	2b04      	cmp	r3, #4
 8005510:	bf28      	it	cs
 8005512:	2304      	movcs	r3, #4
 8005514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3304      	adds	r3, #4
 800551a:	2b06      	cmp	r3, #6
 800551c:	d902      	bls.n	8005524 <NVIC_EncodePriority+0x30>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3b03      	subs	r3, #3
 8005522:	e000      	b.n	8005526 <NVIC_EncodePriority+0x32>
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	401a      	ands	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800553c:	f04f 31ff 	mov.w	r1, #4294967295
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	43d9      	mvns	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800554c:	4313      	orrs	r3, r2
         );
}
 800554e:	4618      	mov	r0, r3
 8005550:	3724      	adds	r7, #36	; 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3b01      	subs	r3, #1
 8005568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800556c:	d301      	bcc.n	8005572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800556e:	2301      	movs	r3, #1
 8005570:	e00f      	b.n	8005592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <SysTick_Config+0x40>)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800557a:	210f      	movs	r1, #15
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	f7ff ff8e 	bl	80054a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <SysTick_Config+0x40>)
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800558a:	4b04      	ldr	r3, [pc, #16]	; (800559c <SysTick_Config+0x40>)
 800558c:	2207      	movs	r2, #7
 800558e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	e000e010 	.word	0xe000e010

080055a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff29 	bl	8005400 <__NVIC_SetPriorityGrouping>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4603      	mov	r3, r0
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055c4:	f7ff ff40 	bl	8005448 <__NVIC_GetPriorityGrouping>
 80055c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	6978      	ldr	r0, [r7, #20]
 80055d0:	f7ff ff90 	bl	80054f4 <NVIC_EncodePriority>
 80055d4:	4602      	mov	r2, r0
 80055d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055da:	4611      	mov	r1, r2
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ff5f 	bl	80054a0 <__NVIC_SetPriority>
}
 80055e2:	bf00      	nop
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff33 	bl	8005464 <__NVIC_EnableIRQ>
}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ffa4 	bl	800555c <SysTick_Config>
 8005614:	4603      	mov	r3, r0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005622:	f000 f802 	bl	800562a <HAL_SYSTICK_Callback>
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800562a:	b480      	push	{r7}
 800562c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e054      	b.n	80056f4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	7f5b      	ldrb	r3, [r3, #29]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d105      	bne.n	8005660 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fcda 	bl	8002014 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	791b      	ldrb	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a22      	ldr	r2, [pc, #136]	; (80056fc <HAL_CRC_Init+0xc4>)
 8005674:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0218 	bic.w	r2, r2, #24
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	e00c      	b.n	80056a2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	461a      	mov	r2, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f948 	bl	8005928 <HAL_CRCEx_Polynomial_Set>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e028      	b.n	80056f4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	795b      	ldrb	r3, [r3, #5]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f04f 32ff 	mov.w	r2, #4294967295
 80056b2:	611a      	str	r2, [r3, #16]
 80056b4:	e004      	b.n	80056c0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6912      	ldr	r2, [r2, #16]
 80056be:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	04c11db7 	.word	0x04c11db7

08005700 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2202      	movs	r2, #2
 8005714:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d006      	beq.n	800573c <HAL_CRC_Calculate+0x3c>
 800572e:	2b03      	cmp	r3, #3
 8005730:	d829      	bhi.n	8005786 <HAL_CRC_Calculate+0x86>
 8005732:	2b01      	cmp	r3, #1
 8005734:	d019      	beq.n	800576a <HAL_CRC_Calculate+0x6a>
 8005736:	2b02      	cmp	r3, #2
 8005738:	d01e      	beq.n	8005778 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800573a:	e024      	b.n	8005786 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00a      	b.n	8005758 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3301      	adds	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d3f0      	bcc.n	8005742 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]
      break;
 8005768:	e00e      	b.n	8005788 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f812 	bl	8005798 <CRC_Handle_8>
 8005774:	6138      	str	r0, [r7, #16]
      break;
 8005776:	e007      	b.n	8005788 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f899 	bl	80058b4 <CRC_Handle_16>
 8005782:	6138      	str	r0, [r7, #16]
      break;
 8005784:	e000      	b.n	8005788 <HAL_CRC_Calculate+0x88>
      break;
 8005786:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800578e:	693b      	ldr	r3, [r7, #16]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e023      	b.n	80057f2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	3301      	adds	r3, #1
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	440b      	add	r3, r1
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057c4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	440b      	add	r3, r1
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80057d4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	3303      	adds	r3, #3
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	440b      	add	r3, r1
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80057e8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	089b      	lsrs	r3, r3, #2
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3d6      	bcc.n	80057aa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d04d      	beq.n	80058a2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	4413      	add	r3, r2
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d116      	bne.n	8005858 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	b21a      	sxth	r2, r3
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	3301      	adds	r3, #1
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	440b      	add	r3, r1
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b21b      	sxth	r3, r3
 8005846:	4313      	orrs	r3, r2
 8005848:	b21b      	sxth	r3, r3
 800584a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	8b7a      	ldrh	r2, [r7, #26]
 8005856:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b03      	cmp	r3, #3
 8005860:	d11f      	bne.n	80058a2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4413      	add	r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	b21a      	sxth	r2, r3
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	3301      	adds	r3, #1
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	440b      	add	r3, r1
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b21b      	sxth	r3, r3
 800587e:	4313      	orrs	r3, r2
 8005880:	b21b      	sxth	r3, r3
 8005882:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	8b7a      	ldrh	r2, [r7, #26]
 800588e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	3302      	adds	r3, #2
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4413      	add	r3, r2
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3724      	adds	r7, #36	; 0x24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e013      	b.n	80058ee <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4413      	add	r3, r2
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	041a      	lsls	r2, r3, #16
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	3302      	adds	r3, #2
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	440b      	add	r3, r1
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3301      	adds	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3e6      	bcc.n	80058c6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4413      	add	r3, r2
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
}
 800591c:	4618      	mov	r0, r3
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005938:	231f      	movs	r3, #31
 800593a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800593c:	bf00      	nop
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1e5a      	subs	r2, r3, #1
 8005942:	613a      	str	r2, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <HAL_CRCEx_Polynomial_Set+0x34>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_CRCEx_Polynomial_Set+0x16>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b18      	cmp	r3, #24
 8005960:	d846      	bhi.n	80059f0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005962:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	080059f7 	.word	0x080059f7
 800596c:	080059f1 	.word	0x080059f1
 8005970:	080059f1 	.word	0x080059f1
 8005974:	080059f1 	.word	0x080059f1
 8005978:	080059f1 	.word	0x080059f1
 800597c:	080059f1 	.word	0x080059f1
 8005980:	080059f1 	.word	0x080059f1
 8005984:	080059f1 	.word	0x080059f1
 8005988:	080059e5 	.word	0x080059e5
 800598c:	080059f1 	.word	0x080059f1
 8005990:	080059f1 	.word	0x080059f1
 8005994:	080059f1 	.word	0x080059f1
 8005998:	080059f1 	.word	0x080059f1
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	080059f1 	.word	0x080059f1
 80059a4:	080059f1 	.word	0x080059f1
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	080059f1 	.word	0x080059f1
 80059b0:	080059f1 	.word	0x080059f1
 80059b4:	080059f1 	.word	0x080059f1
 80059b8:	080059f1 	.word	0x080059f1
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	080059cd 	.word	0x080059cd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d913      	bls.n	80059fa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059d6:	e010      	b.n	80059fa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b07      	cmp	r3, #7
 80059dc:	d90f      	bls.n	80059fe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059e2:	e00c      	b.n	80059fe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d90b      	bls.n	8005a02 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059ee:	e008      	b.n	8005a02 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
      break;
 80059f4:	e006      	b.n	8005a04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059f6:	bf00      	nop
 80059f8:	e004      	b.n	8005a04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059fe:	bf00      	nop
 8005a00:	e000      	b.n	8005a04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005a02:	bf00      	nop
  }
  if (status == HAL_OK)
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f023 0118 	bic.w	r1, r3, #24
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005a3c:	f7ff fca4 	bl	8005388 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e316      	b.n	800607a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a66      	ldr	r2, [pc, #408]	; (8005bec <HAL_DMA_Init+0x1b8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d04a      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a65      	ldr	r2, [pc, #404]	; (8005bf0 <HAL_DMA_Init+0x1bc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d045      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a63      	ldr	r2, [pc, #396]	; (8005bf4 <HAL_DMA_Init+0x1c0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d040      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a62      	ldr	r2, [pc, #392]	; (8005bf8 <HAL_DMA_Init+0x1c4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d03b      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a60      	ldr	r2, [pc, #384]	; (8005bfc <HAL_DMA_Init+0x1c8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d036      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <HAL_DMA_Init+0x1cc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d031      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5d      	ldr	r2, [pc, #372]	; (8005c04 <HAL_DMA_Init+0x1d0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d02c      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a5c      	ldr	r2, [pc, #368]	; (8005c08 <HAL_DMA_Init+0x1d4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d027      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5a      	ldr	r2, [pc, #360]	; (8005c0c <HAL_DMA_Init+0x1d8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a59      	ldr	r2, [pc, #356]	; (8005c10 <HAL_DMA_Init+0x1dc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a57      	ldr	r2, [pc, #348]	; (8005c14 <HAL_DMA_Init+0x1e0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a56      	ldr	r2, [pc, #344]	; (8005c18 <HAL_DMA_Init+0x1e4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a54      	ldr	r2, [pc, #336]	; (8005c1c <HAL_DMA_Init+0x1e8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a53      	ldr	r2, [pc, #332]	; (8005c20 <HAL_DMA_Init+0x1ec>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a51      	ldr	r2, [pc, #324]	; (8005c24 <HAL_DMA_Init+0x1f0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_DMA_Init+0xb8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a50      	ldr	r2, [pc, #320]	; (8005c28 <HAL_DMA_Init+0x1f4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA_Init+0xbc>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_Init+0xbe>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 813b 	beq.w	8005d6e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a37      	ldr	r2, [pc, #220]	; (8005bec <HAL_DMA_Init+0x1b8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d04a      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a36      	ldr	r2, [pc, #216]	; (8005bf0 <HAL_DMA_Init+0x1bc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d045      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a34      	ldr	r2, [pc, #208]	; (8005bf4 <HAL_DMA_Init+0x1c0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d040      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <HAL_DMA_Init+0x1c4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d03b      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a31      	ldr	r2, [pc, #196]	; (8005bfc <HAL_DMA_Init+0x1c8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d036      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a30      	ldr	r2, [pc, #192]	; (8005c00 <HAL_DMA_Init+0x1cc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d031      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2e      	ldr	r2, [pc, #184]	; (8005c04 <HAL_DMA_Init+0x1d0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d02c      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2d      	ldr	r2, [pc, #180]	; (8005c08 <HAL_DMA_Init+0x1d4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d027      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <HAL_DMA_Init+0x1d8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d022      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <HAL_DMA_Init+0x1dc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d01d      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <HAL_DMA_Init+0x1e0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d018      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <HAL_DMA_Init+0x1e4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d013      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a25      	ldr	r2, [pc, #148]	; (8005c1c <HAL_DMA_Init+0x1e8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00e      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <HAL_DMA_Init+0x1ec>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <HAL_DMA_Init+0x1f0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_DMA_Init+0x174>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_DMA_Init+0x1f4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d108      	bne.n	8005bba <HAL_DMA_Init+0x186>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	e007      	b.n	8005bca <HAL_DMA_Init+0x196>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bca:	e02f      	b.n	8005c2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bcc:	f7ff fbdc 	bl	8005388 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d928      	bls.n	8005c2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2203      	movs	r2, #3
 8005be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e246      	b.n	800607a <HAL_DMA_Init+0x646>
 8005bec:	40020010 	.word	0x40020010
 8005bf0:	40020028 	.word	0x40020028
 8005bf4:	40020040 	.word	0x40020040
 8005bf8:	40020058 	.word	0x40020058
 8005bfc:	40020070 	.word	0x40020070
 8005c00:	40020088 	.word	0x40020088
 8005c04:	400200a0 	.word	0x400200a0
 8005c08:	400200b8 	.word	0x400200b8
 8005c0c:	40020410 	.word	0x40020410
 8005c10:	40020428 	.word	0x40020428
 8005c14:	40020440 	.word	0x40020440
 8005c18:	40020458 	.word	0x40020458
 8005c1c:	40020470 	.word	0x40020470
 8005c20:	40020488 	.word	0x40020488
 8005c24:	400204a0 	.word	0x400204a0
 8005c28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1c8      	bne.n	8005bcc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4b83      	ldr	r3, [pc, #524]	; (8005e54 <HAL_DMA_Init+0x420>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d107      	bne.n	8005c90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c90:	4b71      	ldr	r3, [pc, #452]	; (8005e58 <HAL_DMA_Init+0x424>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b71      	ldr	r3, [pc, #452]	; (8005e5c <HAL_DMA_Init+0x428>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9c:	d328      	bcc.n	8005cf0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b28      	cmp	r3, #40	; 0x28
 8005ca4:	d903      	bls.n	8005cae <HAL_DMA_Init+0x27a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b2e      	cmp	r3, #46	; 0x2e
 8005cac:	d917      	bls.n	8005cde <HAL_DMA_Init+0x2aa>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb4:	d903      	bls.n	8005cbe <HAL_DMA_Init+0x28a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b42      	cmp	r3, #66	; 0x42
 8005cbc:	d90f      	bls.n	8005cde <HAL_DMA_Init+0x2aa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b46      	cmp	r3, #70	; 0x46
 8005cc4:	d903      	bls.n	8005cce <HAL_DMA_Init+0x29a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b48      	cmp	r3, #72	; 0x48
 8005ccc:	d907      	bls.n	8005cde <HAL_DMA_Init+0x2aa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8005cd4:	d905      	bls.n	8005ce2 <HAL_DMA_Init+0x2ae>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b52      	cmp	r3, #82	; 0x52
 8005cdc:	d801      	bhi.n	8005ce2 <HAL_DMA_Init+0x2ae>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_DMA_Init+0x2b0>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0307 	bic.w	r3, r3, #7
 8005d06:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d117      	bne.n	8005d4a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00e      	beq.n	8005d4a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f002 fb31 	bl	8008394 <DMA_CheckFifoParam>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e197      	b.n	800607a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f002 fa6c 	bl	8008230 <DMA_CalcBaseAndBitshift>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	223f      	movs	r2, #63	; 0x3f
 8005d66:	409a      	lsls	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	e0cd      	b.n	8005f0a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3b      	ldr	r2, [pc, #236]	; (8005e60 <HAL_DMA_Init+0x42c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d022      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a39      	ldr	r2, [pc, #228]	; (8005e64 <HAL_DMA_Init+0x430>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01d      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <HAL_DMA_Init+0x434>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d018      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a36      	ldr	r2, [pc, #216]	; (8005e6c <HAL_DMA_Init+0x438>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a35      	ldr	r2, [pc, #212]	; (8005e70 <HAL_DMA_Init+0x43c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <HAL_DMA_Init+0x440>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d009      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a32      	ldr	r2, [pc, #200]	; (8005e78 <HAL_DMA_Init+0x444>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_DMA_Init+0x38a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <HAL_DMA_Init+0x448>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_DMA_Init+0x38e>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_DMA_Init+0x390>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8097 	beq.w	8005ef8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a24      	ldr	r2, [pc, #144]	; (8005e60 <HAL_DMA_Init+0x42c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d021      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a22      	ldr	r2, [pc, #136]	; (8005e64 <HAL_DMA_Init+0x430>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01c      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a21      	ldr	r2, [pc, #132]	; (8005e68 <HAL_DMA_Init+0x434>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d017      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1f      	ldr	r2, [pc, #124]	; (8005e6c <HAL_DMA_Init+0x438>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d012      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <HAL_DMA_Init+0x43c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00d      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_DMA_Init+0x440>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d008      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <HAL_DMA_Init+0x444>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <HAL_DMA_Init+0x3e4>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <HAL_DMA_Init+0x448>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_DMA_Init+0x44c>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d020      	beq.n	8005e84 <HAL_DMA_Init+0x450>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b80      	cmp	r3, #128	; 0x80
 8005e48:	d102      	bne.n	8005e50 <HAL_DMA_Init+0x41c>
 8005e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e4e:	e01a      	b.n	8005e86 <HAL_DMA_Init+0x452>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e018      	b.n	8005e86 <HAL_DMA_Init+0x452>
 8005e54:	fe10803f 	.word	0xfe10803f
 8005e58:	5c001000 	.word	0x5c001000
 8005e5c:	ffff0000 	.word	0xffff0000
 8005e60:	58025408 	.word	0x58025408
 8005e64:	5802541c 	.word	0x5802541c
 8005e68:	58025430 	.word	0x58025430
 8005e6c:	58025444 	.word	0x58025444
 8005e70:	58025458 	.word	0x58025458
 8005e74:	5802546c 	.word	0x5802546c
 8005e78:	58025480 	.word	0x58025480
 8005e7c:	58025494 	.word	0x58025494
 8005e80:	fffe000f 	.word	0xfffe000f
 8005e84:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68d2      	ldr	r2, [r2, #12]
 8005e8a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005eb4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b6e      	ldr	r3, [pc, #440]	; (8006084 <HAL_DMA_Init+0x650>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	4a6e      	ldr	r2, [pc, #440]	; (8006088 <HAL_DMA_Init+0x654>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	009a      	lsls	r2, r3, #2
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f002 f9a7 	bl	8008230 <DMA_CalcBaseAndBitshift>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	2201      	movs	r2, #1
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e008      	b.n	8005f0a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2240      	movs	r2, #64	; 0x40
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0b7      	b.n	800607a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a5f      	ldr	r2, [pc, #380]	; (800608c <HAL_DMA_Init+0x658>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d072      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5d      	ldr	r2, [pc, #372]	; (8006090 <HAL_DMA_Init+0x65c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d06d      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a5c      	ldr	r2, [pc, #368]	; (8006094 <HAL_DMA_Init+0x660>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d068      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5a      	ldr	r2, [pc, #360]	; (8006098 <HAL_DMA_Init+0x664>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d063      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a59      	ldr	r2, [pc, #356]	; (800609c <HAL_DMA_Init+0x668>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d05e      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a57      	ldr	r2, [pc, #348]	; (80060a0 <HAL_DMA_Init+0x66c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d059      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a56      	ldr	r2, [pc, #344]	; (80060a4 <HAL_DMA_Init+0x670>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d054      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a54      	ldr	r2, [pc, #336]	; (80060a8 <HAL_DMA_Init+0x674>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d04f      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a53      	ldr	r2, [pc, #332]	; (80060ac <HAL_DMA_Init+0x678>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a51      	ldr	r2, [pc, #324]	; (80060b0 <HAL_DMA_Init+0x67c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a50      	ldr	r2, [pc, #320]	; (80060b4 <HAL_DMA_Init+0x680>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a4e      	ldr	r2, [pc, #312]	; (80060b8 <HAL_DMA_Init+0x684>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4d      	ldr	r2, [pc, #308]	; (80060bc <HAL_DMA_Init+0x688>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a4b      	ldr	r2, [pc, #300]	; (80060c0 <HAL_DMA_Init+0x68c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	; (80060c4 <HAL_DMA_Init+0x690>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a48      	ldr	r2, [pc, #288]	; (80060c8 <HAL_DMA_Init+0x694>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a47      	ldr	r2, [pc, #284]	; (80060cc <HAL_DMA_Init+0x698>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a45      	ldr	r2, [pc, #276]	; (80060d0 <HAL_DMA_Init+0x69c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a44      	ldr	r2, [pc, #272]	; (80060d4 <HAL_DMA_Init+0x6a0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a42      	ldr	r2, [pc, #264]	; (80060d8 <HAL_DMA_Init+0x6a4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a41      	ldr	r2, [pc, #260]	; (80060dc <HAL_DMA_Init+0x6a8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3f      	ldr	r2, [pc, #252]	; (80060e0 <HAL_DMA_Init+0x6ac>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3e      	ldr	r2, [pc, #248]	; (80060e4 <HAL_DMA_Init+0x6b0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_Init+0x5c6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3c      	ldr	r2, [pc, #240]	; (80060e8 <HAL_DMA_Init+0x6b4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_DMA_Init+0x5ca>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_DMA_Init+0x5cc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d032      	beq.n	800606a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f002 fa41 	bl	800848c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b80      	cmp	r3, #128	; 0x80
 8006010:	d102      	bne.n	8006018 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800602c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d010      	beq.n	8006058 <HAL_DMA_Init+0x624>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d80c      	bhi.n	8006058 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 fabe 	bl	80085c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e008      	b.n	800606a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	a7fdabf8 	.word	0xa7fdabf8
 8006088:	cccccccd 	.word	0xcccccccd
 800608c:	40020010 	.word	0x40020010
 8006090:	40020028 	.word	0x40020028
 8006094:	40020040 	.word	0x40020040
 8006098:	40020058 	.word	0x40020058
 800609c:	40020070 	.word	0x40020070
 80060a0:	40020088 	.word	0x40020088
 80060a4:	400200a0 	.word	0x400200a0
 80060a8:	400200b8 	.word	0x400200b8
 80060ac:	40020410 	.word	0x40020410
 80060b0:	40020428 	.word	0x40020428
 80060b4:	40020440 	.word	0x40020440
 80060b8:	40020458 	.word	0x40020458
 80060bc:	40020470 	.word	0x40020470
 80060c0:	40020488 	.word	0x40020488
 80060c4:	400204a0 	.word	0x400204a0
 80060c8:	400204b8 	.word	0x400204b8
 80060cc:	58025408 	.word	0x58025408
 80060d0:	5802541c 	.word	0x5802541c
 80060d4:	58025430 	.word	0x58025430
 80060d8:	58025444 	.word	0x58025444
 80060dc:	58025458 	.word	0x58025458
 80060e0:	5802546c 	.word	0x5802546c
 80060e4:	58025480 	.word	0x58025480
 80060e8:	58025494 	.word	0x58025494

080060ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e226      	b.n	8006556 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_DMA_Start_IT+0x2a>
 8006112:	2302      	movs	r3, #2
 8006114:	e21f      	b.n	8006556 <HAL_DMA_Start_IT+0x46a>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	f040 820a 	bne.w	8006540 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a68      	ldr	r2, [pc, #416]	; (80062e0 <HAL_DMA_Start_IT+0x1f4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04a      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a66      	ldr	r2, [pc, #408]	; (80062e4 <HAL_DMA_Start_IT+0x1f8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d045      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a65      	ldr	r2, [pc, #404]	; (80062e8 <HAL_DMA_Start_IT+0x1fc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d040      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a63      	ldr	r2, [pc, #396]	; (80062ec <HAL_DMA_Start_IT+0x200>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a62      	ldr	r2, [pc, #392]	; (80062f0 <HAL_DMA_Start_IT+0x204>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d036      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a60      	ldr	r2, [pc, #384]	; (80062f4 <HAL_DMA_Start_IT+0x208>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a5f      	ldr	r2, [pc, #380]	; (80062f8 <HAL_DMA_Start_IT+0x20c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a5d      	ldr	r2, [pc, #372]	; (80062fc <HAL_DMA_Start_IT+0x210>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a5c      	ldr	r2, [pc, #368]	; (8006300 <HAL_DMA_Start_IT+0x214>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5a      	ldr	r2, [pc, #360]	; (8006304 <HAL_DMA_Start_IT+0x218>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a59      	ldr	r2, [pc, #356]	; (8006308 <HAL_DMA_Start_IT+0x21c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a57      	ldr	r2, [pc, #348]	; (800630c <HAL_DMA_Start_IT+0x220>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a56      	ldr	r2, [pc, #344]	; (8006310 <HAL_DMA_Start_IT+0x224>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a54      	ldr	r2, [pc, #336]	; (8006314 <HAL_DMA_Start_IT+0x228>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a53      	ldr	r2, [pc, #332]	; (8006318 <HAL_DMA_Start_IT+0x22c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_DMA_Start_IT+0xee>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a51      	ldr	r2, [pc, #324]	; (800631c <HAL_DMA_Start_IT+0x230>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <HAL_DMA_Start_IT+0x100>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <HAL_DMA_Start_IT+0x110>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f001 fe68 	bl	8007ed8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <HAL_DMA_Start_IT+0x1f4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d04a      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a33      	ldr	r2, [pc, #204]	; (80062e4 <HAL_DMA_Start_IT+0x1f8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d045      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a31      	ldr	r2, [pc, #196]	; (80062e8 <HAL_DMA_Start_IT+0x1fc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d040      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a30      	ldr	r2, [pc, #192]	; (80062ec <HAL_DMA_Start_IT+0x200>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d03b      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2e      	ldr	r2, [pc, #184]	; (80062f0 <HAL_DMA_Start_IT+0x204>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d036      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <HAL_DMA_Start_IT+0x208>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d031      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2b      	ldr	r2, [pc, #172]	; (80062f8 <HAL_DMA_Start_IT+0x20c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d02c      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <HAL_DMA_Start_IT+0x210>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d027      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a28      	ldr	r2, [pc, #160]	; (8006300 <HAL_DMA_Start_IT+0x214>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a27      	ldr	r2, [pc, #156]	; (8006304 <HAL_DMA_Start_IT+0x218>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d01d      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a25      	ldr	r2, [pc, #148]	; (8006308 <HAL_DMA_Start_IT+0x21c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_DMA_Start_IT+0x220>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <HAL_DMA_Start_IT+0x224>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a21      	ldr	r2, [pc, #132]	; (8006314 <HAL_DMA_Start_IT+0x228>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1f      	ldr	r2, [pc, #124]	; (8006318 <HAL_DMA_Start_IT+0x22c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_DMA_Start_IT+0x1bc>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_DMA_Start_IT+0x230>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d101      	bne.n	80062ac <HAL_DMA_Start_IT+0x1c0>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_DMA_Start_IT+0x1c2>
 80062ac:	2300      	movs	r3, #0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d036      	beq.n	8006320 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f023 021e 	bic.w	r2, r3, #30
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0216 	orr.w	r2, r2, #22
 80062c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d03e      	beq.n	800634c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0208 	orr.w	r2, r2, #8
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e035      	b.n	800634c <HAL_DMA_Start_IT+0x260>
 80062e0:	40020010 	.word	0x40020010
 80062e4:	40020028 	.word	0x40020028
 80062e8:	40020040 	.word	0x40020040
 80062ec:	40020058 	.word	0x40020058
 80062f0:	40020070 	.word	0x40020070
 80062f4:	40020088 	.word	0x40020088
 80062f8:	400200a0 	.word	0x400200a0
 80062fc:	400200b8 	.word	0x400200b8
 8006300:	40020410 	.word	0x40020410
 8006304:	40020428 	.word	0x40020428
 8006308:	40020440 	.word	0x40020440
 800630c:	40020458 	.word	0x40020458
 8006310:	40020470 	.word	0x40020470
 8006314:	40020488 	.word	0x40020488
 8006318:	400204a0 	.word	0x400204a0
 800631c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 020e 	bic.w	r2, r3, #14
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 020a 	orr.w	r2, r2, #10
 8006332:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0204 	orr.w	r2, r2, #4
 800634a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a83      	ldr	r2, [pc, #524]	; (8006560 <HAL_DMA_Start_IT+0x474>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d072      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a82      	ldr	r2, [pc, #520]	; (8006564 <HAL_DMA_Start_IT+0x478>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d06d      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a80      	ldr	r2, [pc, #512]	; (8006568 <HAL_DMA_Start_IT+0x47c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d068      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a7f      	ldr	r2, [pc, #508]	; (800656c <HAL_DMA_Start_IT+0x480>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d063      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a7d      	ldr	r2, [pc, #500]	; (8006570 <HAL_DMA_Start_IT+0x484>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d05e      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a7c      	ldr	r2, [pc, #496]	; (8006574 <HAL_DMA_Start_IT+0x488>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d059      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7a      	ldr	r2, [pc, #488]	; (8006578 <HAL_DMA_Start_IT+0x48c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d054      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a79      	ldr	r2, [pc, #484]	; (800657c <HAL_DMA_Start_IT+0x490>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d04f      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a77      	ldr	r2, [pc, #476]	; (8006580 <HAL_DMA_Start_IT+0x494>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04a      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a76      	ldr	r2, [pc, #472]	; (8006584 <HAL_DMA_Start_IT+0x498>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d045      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a74      	ldr	r2, [pc, #464]	; (8006588 <HAL_DMA_Start_IT+0x49c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a73      	ldr	r2, [pc, #460]	; (800658c <HAL_DMA_Start_IT+0x4a0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d03b      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a71      	ldr	r2, [pc, #452]	; (8006590 <HAL_DMA_Start_IT+0x4a4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d036      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a70      	ldr	r2, [pc, #448]	; (8006594 <HAL_DMA_Start_IT+0x4a8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d031      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6e      	ldr	r2, [pc, #440]	; (8006598 <HAL_DMA_Start_IT+0x4ac>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02c      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6d      	ldr	r2, [pc, #436]	; (800659c <HAL_DMA_Start_IT+0x4b0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d027      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6b      	ldr	r2, [pc, #428]	; (80065a0 <HAL_DMA_Start_IT+0x4b4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6a      	ldr	r2, [pc, #424]	; (80065a4 <HAL_DMA_Start_IT+0x4b8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01d      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a68      	ldr	r2, [pc, #416]	; (80065a8 <HAL_DMA_Start_IT+0x4bc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a67      	ldr	r2, [pc, #412]	; (80065ac <HAL_DMA_Start_IT+0x4c0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_DMA_Start_IT+0x4c4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a64      	ldr	r2, [pc, #400]	; (80065b4 <HAL_DMA_Start_IT+0x4c8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a62      	ldr	r2, [pc, #392]	; (80065b8 <HAL_DMA_Start_IT+0x4cc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_DMA_Start_IT+0x350>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a61      	ldr	r2, [pc, #388]	; (80065bc <HAL_DMA_Start_IT+0x4d0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d101      	bne.n	8006440 <HAL_DMA_Start_IT+0x354>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <HAL_DMA_Start_IT+0x356>
 8006440:	2300      	movs	r3, #0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01a      	beq.n	800647c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006462:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800647a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a37      	ldr	r2, [pc, #220]	; (8006560 <HAL_DMA_Start_IT+0x474>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04a      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a36      	ldr	r2, [pc, #216]	; (8006564 <HAL_DMA_Start_IT+0x478>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d045      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a34      	ldr	r2, [pc, #208]	; (8006568 <HAL_DMA_Start_IT+0x47c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d040      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a33      	ldr	r2, [pc, #204]	; (800656c <HAL_DMA_Start_IT+0x480>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d03b      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a31      	ldr	r2, [pc, #196]	; (8006570 <HAL_DMA_Start_IT+0x484>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d036      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a30      	ldr	r2, [pc, #192]	; (8006574 <HAL_DMA_Start_IT+0x488>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d031      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_DMA_Start_IT+0x48c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02c      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	; (800657c <HAL_DMA_Start_IT+0x490>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d027      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_DMA_Start_IT+0x494>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_DMA_Start_IT+0x498>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_DMA_Start_IT+0x49c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_DMA_Start_IT+0x4a0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_DMA_Start_IT+0x4a4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_DMA_Start_IT+0x4a8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_DMA_Start_IT+0x4ac>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_DMA_Start_IT+0x430>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_DMA_Start_IT+0x4b0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d108      	bne.n	800652e <HAL_DMA_Start_IT+0x442>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e012      	b.n	8006554 <HAL_DMA_Start_IT+0x468>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e009      	b.n	8006554 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006546:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40020010 	.word	0x40020010
 8006564:	40020028 	.word	0x40020028
 8006568:	40020040 	.word	0x40020040
 800656c:	40020058 	.word	0x40020058
 8006570:	40020070 	.word	0x40020070
 8006574:	40020088 	.word	0x40020088
 8006578:	400200a0 	.word	0x400200a0
 800657c:	400200b8 	.word	0x400200b8
 8006580:	40020410 	.word	0x40020410
 8006584:	40020428 	.word	0x40020428
 8006588:	40020440 	.word	0x40020440
 800658c:	40020458 	.word	0x40020458
 8006590:	40020470 	.word	0x40020470
 8006594:	40020488 	.word	0x40020488
 8006598:	400204a0 	.word	0x400204a0
 800659c:	400204b8 	.word	0x400204b8
 80065a0:	58025408 	.word	0x58025408
 80065a4:	5802541c 	.word	0x5802541c
 80065a8:	58025430 	.word	0x58025430
 80065ac:	58025444 	.word	0x58025444
 80065b0:	58025458 	.word	0x58025458
 80065b4:	5802546c 	.word	0x5802546c
 80065b8:	58025480 	.word	0x58025480
 80065bc:	58025494 	.word	0x58025494

080065c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80065c8:	f7fe fede 	bl	8005388 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e2dc      	b.n	8006b92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d008      	beq.n	80065f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e2cd      	b.n	8006b92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a76      	ldr	r2, [pc, #472]	; (80067d4 <HAL_DMA_Abort+0x214>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d04a      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a74      	ldr	r2, [pc, #464]	; (80067d8 <HAL_DMA_Abort+0x218>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d045      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a73      	ldr	r2, [pc, #460]	; (80067dc <HAL_DMA_Abort+0x21c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d040      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a71      	ldr	r2, [pc, #452]	; (80067e0 <HAL_DMA_Abort+0x220>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d03b      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a70      	ldr	r2, [pc, #448]	; (80067e4 <HAL_DMA_Abort+0x224>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d036      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a6e      	ldr	r2, [pc, #440]	; (80067e8 <HAL_DMA_Abort+0x228>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d031      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6d      	ldr	r2, [pc, #436]	; (80067ec <HAL_DMA_Abort+0x22c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d02c      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a6b      	ldr	r2, [pc, #428]	; (80067f0 <HAL_DMA_Abort+0x230>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d027      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a6a      	ldr	r2, [pc, #424]	; (80067f4 <HAL_DMA_Abort+0x234>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a68      	ldr	r2, [pc, #416]	; (80067f8 <HAL_DMA_Abort+0x238>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a67      	ldr	r2, [pc, #412]	; (80067fc <HAL_DMA_Abort+0x23c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a65      	ldr	r2, [pc, #404]	; (8006800 <HAL_DMA_Abort+0x240>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a64      	ldr	r2, [pc, #400]	; (8006804 <HAL_DMA_Abort+0x244>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a62      	ldr	r2, [pc, #392]	; (8006808 <HAL_DMA_Abort+0x248>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a61      	ldr	r2, [pc, #388]	; (800680c <HAL_DMA_Abort+0x24c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_DMA_Abort+0xd6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a5f      	ldr	r2, [pc, #380]	; (8006810 <HAL_DMA_Abort+0x250>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_DMA_Abort+0xda>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <HAL_DMA_Abort+0xdc>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d013      	beq.n	80066c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 021e 	bic.w	r2, r2, #30
 80066ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e00a      	b.n	80066de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 020e 	bic.w	r2, r2, #14
 80066d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3c      	ldr	r2, [pc, #240]	; (80067d4 <HAL_DMA_Abort+0x214>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d072      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3a      	ldr	r2, [pc, #232]	; (80067d8 <HAL_DMA_Abort+0x218>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d06d      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a39      	ldr	r2, [pc, #228]	; (80067dc <HAL_DMA_Abort+0x21c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d068      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a37      	ldr	r2, [pc, #220]	; (80067e0 <HAL_DMA_Abort+0x220>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d063      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a36      	ldr	r2, [pc, #216]	; (80067e4 <HAL_DMA_Abort+0x224>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d05e      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a34      	ldr	r2, [pc, #208]	; (80067e8 <HAL_DMA_Abort+0x228>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d059      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a33      	ldr	r2, [pc, #204]	; (80067ec <HAL_DMA_Abort+0x22c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d054      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a31      	ldr	r2, [pc, #196]	; (80067f0 <HAL_DMA_Abort+0x230>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d04f      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a30      	ldr	r2, [pc, #192]	; (80067f4 <HAL_DMA_Abort+0x234>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d04a      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a2e      	ldr	r2, [pc, #184]	; (80067f8 <HAL_DMA_Abort+0x238>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d045      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2d      	ldr	r2, [pc, #180]	; (80067fc <HAL_DMA_Abort+0x23c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d040      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <HAL_DMA_Abort+0x240>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d03b      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <HAL_DMA_Abort+0x244>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d036      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a28      	ldr	r2, [pc, #160]	; (8006808 <HAL_DMA_Abort+0x248>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d031      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a27      	ldr	r2, [pc, #156]	; (800680c <HAL_DMA_Abort+0x24c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d02c      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a25      	ldr	r2, [pc, #148]	; (8006810 <HAL_DMA_Abort+0x250>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d027      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a24      	ldr	r2, [pc, #144]	; (8006814 <HAL_DMA_Abort+0x254>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d022      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a22      	ldr	r2, [pc, #136]	; (8006818 <HAL_DMA_Abort+0x258>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01d      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a21      	ldr	r2, [pc, #132]	; (800681c <HAL_DMA_Abort+0x25c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d018      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <HAL_DMA_Abort+0x260>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d013      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <HAL_DMA_Abort+0x264>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_DMA_Abort+0x268>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_DMA_Abort+0x26c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_DMA_Abort+0x20e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <HAL_DMA_Abort+0x270>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d132      	bne.n	8006834 <HAL_DMA_Abort+0x274>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e031      	b.n	8006836 <HAL_DMA_Abort+0x276>
 80067d2:	bf00      	nop
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	58025408 	.word	0x58025408
 8006818:	5802541c 	.word	0x5802541c
 800681c:	58025430 	.word	0x58025430
 8006820:	58025444 	.word	0x58025444
 8006824:	58025458 	.word	0x58025458
 8006828:	5802546c 	.word	0x5802546c
 800682c:	58025480 	.word	0x58025480
 8006830:	58025494 	.word	0x58025494
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006848:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a6d      	ldr	r2, [pc, #436]	; (8006a04 <HAL_DMA_Abort+0x444>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d04a      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a6b      	ldr	r2, [pc, #428]	; (8006a08 <HAL_DMA_Abort+0x448>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d045      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a6a      	ldr	r2, [pc, #424]	; (8006a0c <HAL_DMA_Abort+0x44c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d040      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a68      	ldr	r2, [pc, #416]	; (8006a10 <HAL_DMA_Abort+0x450>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d03b      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a67      	ldr	r2, [pc, #412]	; (8006a14 <HAL_DMA_Abort+0x454>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d036      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a65      	ldr	r2, [pc, #404]	; (8006a18 <HAL_DMA_Abort+0x458>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d031      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a64      	ldr	r2, [pc, #400]	; (8006a1c <HAL_DMA_Abort+0x45c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d02c      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a62      	ldr	r2, [pc, #392]	; (8006a20 <HAL_DMA_Abort+0x460>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d027      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a61      	ldr	r2, [pc, #388]	; (8006a24 <HAL_DMA_Abort+0x464>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d022      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a5f      	ldr	r2, [pc, #380]	; (8006a28 <HAL_DMA_Abort+0x468>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d01d      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a5e      	ldr	r2, [pc, #376]	; (8006a2c <HAL_DMA_Abort+0x46c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d018      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a5c      	ldr	r2, [pc, #368]	; (8006a30 <HAL_DMA_Abort+0x470>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a5b      	ldr	r2, [pc, #364]	; (8006a34 <HAL_DMA_Abort+0x474>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00e      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a59      	ldr	r2, [pc, #356]	; (8006a38 <HAL_DMA_Abort+0x478>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d009      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a58      	ldr	r2, [pc, #352]	; (8006a3c <HAL_DMA_Abort+0x47c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_DMA_Abort+0x32a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a56      	ldr	r2, [pc, #344]	; (8006a40 <HAL_DMA_Abort+0x480>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d108      	bne.n	80068fc <HAL_DMA_Abort+0x33c>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e007      	b.n	800690c <HAL_DMA_Abort+0x34c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800690c:	e013      	b.n	8006936 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800690e:	f7fe fd3b 	bl	8005388 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b05      	cmp	r3, #5
 800691a:	d90c      	bls.n	8006936 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2203      	movs	r2, #3
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e12d      	b.n	8006b92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2f      	ldr	r2, [pc, #188]	; (8006a04 <HAL_DMA_Abort+0x444>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d04a      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a2d      	ldr	r2, [pc, #180]	; (8006a08 <HAL_DMA_Abort+0x448>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d045      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <HAL_DMA_Abort+0x44c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d040      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a2a      	ldr	r2, [pc, #168]	; (8006a10 <HAL_DMA_Abort+0x450>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d03b      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <HAL_DMA_Abort+0x454>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d036      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <HAL_DMA_Abort+0x458>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <HAL_DMA_Abort+0x45c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d02c      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <HAL_DMA_Abort+0x460>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d027      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <HAL_DMA_Abort+0x464>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a21      	ldr	r2, [pc, #132]	; (8006a28 <HAL_DMA_Abort+0x468>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <HAL_DMA_Abort+0x46c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1e      	ldr	r2, [pc, #120]	; (8006a30 <HAL_DMA_Abort+0x470>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <HAL_DMA_Abort+0x474>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <HAL_DMA_Abort+0x478>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <HAL_DMA_Abort+0x47c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_DMA_Abort+0x422>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <HAL_DMA_Abort+0x480>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d101      	bne.n	80069e6 <HAL_DMA_Abort+0x426>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_DMA_Abort+0x428>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d02b      	beq.n	8006a44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	223f      	movs	r2, #63	; 0x3f
 80069fc:	409a      	lsls	r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	e02a      	b.n	8006a5a <HAL_DMA_Abort+0x49a>
 8006a04:	40020010 	.word	0x40020010
 8006a08:	40020028 	.word	0x40020028
 8006a0c:	40020040 	.word	0x40020040
 8006a10:	40020058 	.word	0x40020058
 8006a14:	40020070 	.word	0x40020070
 8006a18:	40020088 	.word	0x40020088
 8006a1c:	400200a0 	.word	0x400200a0
 8006a20:	400200b8 	.word	0x400200b8
 8006a24:	40020410 	.word	0x40020410
 8006a28:	40020428 	.word	0x40020428
 8006a2c:	40020440 	.word	0x40020440
 8006a30:	40020458 	.word	0x40020458
 8006a34:	40020470 	.word	0x40020470
 8006a38:	40020488 	.word	0x40020488
 8006a3c:	400204a0 	.word	0x400204a0
 8006a40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2201      	movs	r2, #1
 8006a54:	409a      	lsls	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a4f      	ldr	r2, [pc, #316]	; (8006b9c <HAL_DMA_Abort+0x5dc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d072      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a4d      	ldr	r2, [pc, #308]	; (8006ba0 <HAL_DMA_Abort+0x5e0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d06d      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a4c      	ldr	r2, [pc, #304]	; (8006ba4 <HAL_DMA_Abort+0x5e4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d068      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a4a      	ldr	r2, [pc, #296]	; (8006ba8 <HAL_DMA_Abort+0x5e8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d063      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a49      	ldr	r2, [pc, #292]	; (8006bac <HAL_DMA_Abort+0x5ec>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d05e      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a47      	ldr	r2, [pc, #284]	; (8006bb0 <HAL_DMA_Abort+0x5f0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d059      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a46      	ldr	r2, [pc, #280]	; (8006bb4 <HAL_DMA_Abort+0x5f4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d054      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a44      	ldr	r2, [pc, #272]	; (8006bb8 <HAL_DMA_Abort+0x5f8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d04f      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a43      	ldr	r2, [pc, #268]	; (8006bbc <HAL_DMA_Abort+0x5fc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d04a      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a41      	ldr	r2, [pc, #260]	; (8006bc0 <HAL_DMA_Abort+0x600>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d045      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_DMA_Abort+0x604>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d040      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a3e      	ldr	r2, [pc, #248]	; (8006bc8 <HAL_DMA_Abort+0x608>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d03b      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a3d      	ldr	r2, [pc, #244]	; (8006bcc <HAL_DMA_Abort+0x60c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d036      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a3b      	ldr	r2, [pc, #236]	; (8006bd0 <HAL_DMA_Abort+0x610>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d031      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a3a      	ldr	r2, [pc, #232]	; (8006bd4 <HAL_DMA_Abort+0x614>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d02c      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a38      	ldr	r2, [pc, #224]	; (8006bd8 <HAL_DMA_Abort+0x618>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d027      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a37      	ldr	r2, [pc, #220]	; (8006bdc <HAL_DMA_Abort+0x61c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d022      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a35      	ldr	r2, [pc, #212]	; (8006be0 <HAL_DMA_Abort+0x620>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01d      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a34      	ldr	r2, [pc, #208]	; (8006be4 <HAL_DMA_Abort+0x624>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d018      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a32      	ldr	r2, [pc, #200]	; (8006be8 <HAL_DMA_Abort+0x628>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a31      	ldr	r2, [pc, #196]	; (8006bec <HAL_DMA_Abort+0x62c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00e      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2f      	ldr	r2, [pc, #188]	; (8006bf0 <HAL_DMA_Abort+0x630>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2e      	ldr	r2, [pc, #184]	; (8006bf4 <HAL_DMA_Abort+0x634>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_DMA_Abort+0x58a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <HAL_DMA_Abort+0x638>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d101      	bne.n	8006b4e <HAL_DMA_Abort+0x58e>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <HAL_DMA_Abort+0x590>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d015      	beq.n	8006b80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00c      	beq.n	8006b80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8
 8006bdc:	58025408 	.word	0x58025408
 8006be0:	5802541c 	.word	0x5802541c
 8006be4:	58025430 	.word	0x58025430
 8006be8:	58025444 	.word	0x58025444
 8006bec:	58025458 	.word	0x58025458
 8006bf0:	5802546c 	.word	0x5802546c
 8006bf4:	58025480 	.word	0x58025480
 8006bf8:	58025494 	.word	0x58025494

08006bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e205      	b.n	800701a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d004      	beq.n	8006c24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e1fa      	b.n	800701a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a8c      	ldr	r2, [pc, #560]	; (8006e5c <HAL_DMA_Abort_IT+0x260>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d04a      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a8b      	ldr	r2, [pc, #556]	; (8006e60 <HAL_DMA_Abort_IT+0x264>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d045      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a89      	ldr	r2, [pc, #548]	; (8006e64 <HAL_DMA_Abort_IT+0x268>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d040      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a88      	ldr	r2, [pc, #544]	; (8006e68 <HAL_DMA_Abort_IT+0x26c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d03b      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a86      	ldr	r2, [pc, #536]	; (8006e6c <HAL_DMA_Abort_IT+0x270>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d036      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a85      	ldr	r2, [pc, #532]	; (8006e70 <HAL_DMA_Abort_IT+0x274>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d031      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a83      	ldr	r2, [pc, #524]	; (8006e74 <HAL_DMA_Abort_IT+0x278>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d02c      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a82      	ldr	r2, [pc, #520]	; (8006e78 <HAL_DMA_Abort_IT+0x27c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d027      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a80      	ldr	r2, [pc, #512]	; (8006e7c <HAL_DMA_Abort_IT+0x280>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d022      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7f      	ldr	r2, [pc, #508]	; (8006e80 <HAL_DMA_Abort_IT+0x284>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d01d      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a7d      	ldr	r2, [pc, #500]	; (8006e84 <HAL_DMA_Abort_IT+0x288>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d018      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7c      	ldr	r2, [pc, #496]	; (8006e88 <HAL_DMA_Abort_IT+0x28c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a7a      	ldr	r2, [pc, #488]	; (8006e8c <HAL_DMA_Abort_IT+0x290>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a79      	ldr	r2, [pc, #484]	; (8006e90 <HAL_DMA_Abort_IT+0x294>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d009      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a77      	ldr	r2, [pc, #476]	; (8006e94 <HAL_DMA_Abort_IT+0x298>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a76      	ldr	r2, [pc, #472]	; (8006e98 <HAL_DMA_Abort_IT+0x29c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d101      	bne.n	8006cc8 <HAL_DMA_Abort_IT+0xcc>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <HAL_DMA_Abort_IT+0xce>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d065      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a60      	ldr	r2, [pc, #384]	; (8006e5c <HAL_DMA_Abort_IT+0x260>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d04a      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5e      	ldr	r2, [pc, #376]	; (8006e60 <HAL_DMA_Abort_IT+0x264>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d045      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a5d      	ldr	r2, [pc, #372]	; (8006e64 <HAL_DMA_Abort_IT+0x268>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d040      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a5b      	ldr	r2, [pc, #364]	; (8006e68 <HAL_DMA_Abort_IT+0x26c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d03b      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a5a      	ldr	r2, [pc, #360]	; (8006e6c <HAL_DMA_Abort_IT+0x270>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d036      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a58      	ldr	r2, [pc, #352]	; (8006e70 <HAL_DMA_Abort_IT+0x274>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d031      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a57      	ldr	r2, [pc, #348]	; (8006e74 <HAL_DMA_Abort_IT+0x278>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d02c      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a55      	ldr	r2, [pc, #340]	; (8006e78 <HAL_DMA_Abort_IT+0x27c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d027      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a54      	ldr	r2, [pc, #336]	; (8006e7c <HAL_DMA_Abort_IT+0x280>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d022      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a52      	ldr	r2, [pc, #328]	; (8006e80 <HAL_DMA_Abort_IT+0x284>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01d      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a51      	ldr	r2, [pc, #324]	; (8006e84 <HAL_DMA_Abort_IT+0x288>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d018      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_DMA_Abort_IT+0x28c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a4e      	ldr	r2, [pc, #312]	; (8006e8c <HAL_DMA_Abort_IT+0x290>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00e      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a4c      	ldr	r2, [pc, #304]	; (8006e90 <HAL_DMA_Abort_IT+0x294>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d009      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a4b      	ldr	r2, [pc, #300]	; (8006e94 <HAL_DMA_Abort_IT+0x298>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d004      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x17a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a49      	ldr	r2, [pc, #292]	; (8006e98 <HAL_DMA_Abort_IT+0x29c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <HAL_DMA_Abort_IT+0x18c>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e147      	b.n	8007018 <HAL_DMA_Abort_IT+0x41c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e13e      	b.n	8007018 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 020e 	bic.w	r2, r2, #14
 8006da8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <HAL_DMA_Abort_IT+0x260>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d04a      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a29      	ldr	r2, [pc, #164]	; (8006e60 <HAL_DMA_Abort_IT+0x264>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d045      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <HAL_DMA_Abort_IT+0x268>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d040      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <HAL_DMA_Abort_IT+0x26c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d03b      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <HAL_DMA_Abort_IT+0x270>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d036      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a23      	ldr	r2, [pc, #140]	; (8006e70 <HAL_DMA_Abort_IT+0x274>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d031      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_DMA_Abort_IT+0x278>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d02c      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <HAL_DMA_Abort_IT+0x27c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d027      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <HAL_DMA_Abort_IT+0x280>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d022      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <HAL_DMA_Abort_IT+0x284>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01d      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <HAL_DMA_Abort_IT+0x288>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1a      	ldr	r2, [pc, #104]	; (8006e88 <HAL_DMA_Abort_IT+0x28c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <HAL_DMA_Abort_IT+0x290>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <HAL_DMA_Abort_IT+0x294>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <HAL_DMA_Abort_IT+0x298>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x24e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <HAL_DMA_Abort_IT+0x29c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d128      	bne.n	8006e9c <HAL_DMA_Abort_IT+0x2a0>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0201 	bic.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e027      	b.n	8006eac <HAL_DMA_Abort_IT+0x2b0>
 8006e5c:	40020010 	.word	0x40020010
 8006e60:	40020028 	.word	0x40020028
 8006e64:	40020040 	.word	0x40020040
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	40020070 	.word	0x40020070
 8006e70:	40020088 	.word	0x40020088
 8006e74:	400200a0 	.word	0x400200a0
 8006e78:	400200b8 	.word	0x400200b8
 8006e7c:	40020410 	.word	0x40020410
 8006e80:	40020428 	.word	0x40020428
 8006e84:	40020440 	.word	0x40020440
 8006e88:	40020458 	.word	0x40020458
 8006e8c:	40020470 	.word	0x40020470
 8006e90:	40020488 	.word	0x40020488
 8006e94:	400204a0 	.word	0x400204a0
 8006e98:	400204b8 	.word	0x400204b8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0201 	bic.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a5c      	ldr	r2, [pc, #368]	; (8007024 <HAL_DMA_Abort_IT+0x428>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d072      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a5b      	ldr	r2, [pc, #364]	; (8007028 <HAL_DMA_Abort_IT+0x42c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d06d      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a59      	ldr	r2, [pc, #356]	; (800702c <HAL_DMA_Abort_IT+0x430>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d068      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a58      	ldr	r2, [pc, #352]	; (8007030 <HAL_DMA_Abort_IT+0x434>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d063      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a56      	ldr	r2, [pc, #344]	; (8007034 <HAL_DMA_Abort_IT+0x438>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d05e      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a55      	ldr	r2, [pc, #340]	; (8007038 <HAL_DMA_Abort_IT+0x43c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d059      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a53      	ldr	r2, [pc, #332]	; (800703c <HAL_DMA_Abort_IT+0x440>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d054      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a52      	ldr	r2, [pc, #328]	; (8007040 <HAL_DMA_Abort_IT+0x444>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d04f      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a50      	ldr	r2, [pc, #320]	; (8007044 <HAL_DMA_Abort_IT+0x448>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d04a      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a4f      	ldr	r2, [pc, #316]	; (8007048 <HAL_DMA_Abort_IT+0x44c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d045      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a4d      	ldr	r2, [pc, #308]	; (800704c <HAL_DMA_Abort_IT+0x450>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d040      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a4c      	ldr	r2, [pc, #304]	; (8007050 <HAL_DMA_Abort_IT+0x454>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d03b      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a4a      	ldr	r2, [pc, #296]	; (8007054 <HAL_DMA_Abort_IT+0x458>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d036      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a49      	ldr	r2, [pc, #292]	; (8007058 <HAL_DMA_Abort_IT+0x45c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d031      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a47      	ldr	r2, [pc, #284]	; (800705c <HAL_DMA_Abort_IT+0x460>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02c      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a46      	ldr	r2, [pc, #280]	; (8007060 <HAL_DMA_Abort_IT+0x464>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d027      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a44      	ldr	r2, [pc, #272]	; (8007064 <HAL_DMA_Abort_IT+0x468>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d022      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a43      	ldr	r2, [pc, #268]	; (8007068 <HAL_DMA_Abort_IT+0x46c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d01d      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a41      	ldr	r2, [pc, #260]	; (800706c <HAL_DMA_Abort_IT+0x470>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d018      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <HAL_DMA_Abort_IT+0x474>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3e      	ldr	r2, [pc, #248]	; (8007074 <HAL_DMA_Abort_IT+0x478>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00e      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a3d      	ldr	r2, [pc, #244]	; (8007078 <HAL_DMA_Abort_IT+0x47c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a3b      	ldr	r2, [pc, #236]	; (800707c <HAL_DMA_Abort_IT+0x480>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x3a0>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a3a      	ldr	r2, [pc, #232]	; (8007080 <HAL_DMA_Abort_IT+0x484>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d101      	bne.n	8006fa0 <HAL_DMA_Abort_IT+0x3a4>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <HAL_DMA_Abort_IT+0x3a6>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d028      	beq.n	8006ff8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fd4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ff6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8
 8007064:	58025408 	.word	0x58025408
 8007068:	5802541c 	.word	0x5802541c
 800706c:	58025430 	.word	0x58025430
 8007070:	58025444 	.word	0x58025444
 8007074:	58025458 	.word	0x58025458
 8007078:	5802546c 	.word	0x5802546c
 800707c:	58025480 	.word	0x58025480
 8007080:	58025494 	.word	0x58025494

08007084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007090:	4b67      	ldr	r3, [pc, #412]	; (8007230 <HAL_DMA_IRQHandler+0x1ac>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a67      	ldr	r2, [pc, #412]	; (8007234 <HAL_DMA_IRQHandler+0x1b0>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	0a9b      	lsrs	r3, r3, #10
 800709c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a5f      	ldr	r2, [pc, #380]	; (8007238 <HAL_DMA_IRQHandler+0x1b4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d04a      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5d      	ldr	r2, [pc, #372]	; (800723c <HAL_DMA_IRQHandler+0x1b8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d045      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a5c      	ldr	r2, [pc, #368]	; (8007240 <HAL_DMA_IRQHandler+0x1bc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d040      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a5a      	ldr	r2, [pc, #360]	; (8007244 <HAL_DMA_IRQHandler+0x1c0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d03b      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a59      	ldr	r2, [pc, #356]	; (8007248 <HAL_DMA_IRQHandler+0x1c4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d036      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a57      	ldr	r2, [pc, #348]	; (800724c <HAL_DMA_IRQHandler+0x1c8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d031      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a56      	ldr	r2, [pc, #344]	; (8007250 <HAL_DMA_IRQHandler+0x1cc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d02c      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a54      	ldr	r2, [pc, #336]	; (8007254 <HAL_DMA_IRQHandler+0x1d0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d027      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a53      	ldr	r2, [pc, #332]	; (8007258 <HAL_DMA_IRQHandler+0x1d4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d022      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a51      	ldr	r2, [pc, #324]	; (800725c <HAL_DMA_IRQHandler+0x1d8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d01d      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a50      	ldr	r2, [pc, #320]	; (8007260 <HAL_DMA_IRQHandler+0x1dc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d018      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a4e      	ldr	r2, [pc, #312]	; (8007264 <HAL_DMA_IRQHandler+0x1e0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4d      	ldr	r2, [pc, #308]	; (8007268 <HAL_DMA_IRQHandler+0x1e4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00e      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a4b      	ldr	r2, [pc, #300]	; (800726c <HAL_DMA_IRQHandler+0x1e8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d009      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a4a      	ldr	r2, [pc, #296]	; (8007270 <HAL_DMA_IRQHandler+0x1ec>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_DMA_IRQHandler+0xd2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a48      	ldr	r2, [pc, #288]	; (8007274 <HAL_DMA_IRQHandler+0x1f0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d101      	bne.n	800715a <HAL_DMA_IRQHandler+0xd6>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <HAL_DMA_IRQHandler+0xd8>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 842b 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2208      	movs	r2, #8
 800716c:	409a      	lsls	r2, r3
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80a2 	beq.w	80072bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2e      	ldr	r2, [pc, #184]	; (8007238 <HAL_DMA_IRQHandler+0x1b4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d04a      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2d      	ldr	r2, [pc, #180]	; (800723c <HAL_DMA_IRQHandler+0x1b8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d045      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2b      	ldr	r2, [pc, #172]	; (8007240 <HAL_DMA_IRQHandler+0x1bc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d040      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <HAL_DMA_IRQHandler+0x1c0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d03b      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a28      	ldr	r2, [pc, #160]	; (8007248 <HAL_DMA_IRQHandler+0x1c4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d036      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a27      	ldr	r2, [pc, #156]	; (800724c <HAL_DMA_IRQHandler+0x1c8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d031      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a25      	ldr	r2, [pc, #148]	; (8007250 <HAL_DMA_IRQHandler+0x1cc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d02c      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a24      	ldr	r2, [pc, #144]	; (8007254 <HAL_DMA_IRQHandler+0x1d0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d027      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a22      	ldr	r2, [pc, #136]	; (8007258 <HAL_DMA_IRQHandler+0x1d4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <HAL_DMA_IRQHandler+0x1d8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01d      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <HAL_DMA_IRQHandler+0x1dc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <HAL_DMA_IRQHandler+0x1e0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1c      	ldr	r2, [pc, #112]	; (8007268 <HAL_DMA_IRQHandler+0x1e4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1b      	ldr	r2, [pc, #108]	; (800726c <HAL_DMA_IRQHandler+0x1e8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a19      	ldr	r2, [pc, #100]	; (8007270 <HAL_DMA_IRQHandler+0x1ec>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_DMA_IRQHandler+0x194>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a18      	ldr	r2, [pc, #96]	; (8007274 <HAL_DMA_IRQHandler+0x1f0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d12f      	bne.n	8007278 <HAL_DMA_IRQHandler+0x1f4>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e02e      	b.n	800728c <HAL_DMA_IRQHandler+0x208>
 800722e:	bf00      	nop
 8007230:	24000014 	.word	0x24000014
 8007234:	1b4e81b5 	.word	0x1b4e81b5
 8007238:	40020010 	.word	0x40020010
 800723c:	40020028 	.word	0x40020028
 8007240:	40020040 	.word	0x40020040
 8007244:	40020058 	.word	0x40020058
 8007248:	40020070 	.word	0x40020070
 800724c:	40020088 	.word	0x40020088
 8007250:	400200a0 	.word	0x400200a0
 8007254:	400200b8 	.word	0x400200b8
 8007258:	40020410 	.word	0x40020410
 800725c:	40020428 	.word	0x40020428
 8007260:	40020440 	.word	0x40020440
 8007264:	40020458 	.word	0x40020458
 8007268:	40020470 	.word	0x40020470
 800726c:	40020488 	.word	0x40020488
 8007270:	400204a0 	.word	0x400204a0
 8007274:	400204b8 	.word	0x400204b8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf14      	ite	ne
 8007286:	2301      	movne	r3, #1
 8007288:	2300      	moveq	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d015      	beq.n	80072bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0204 	bic.w	r2, r2, #4
 800729e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	2208      	movs	r2, #8
 80072aa:	409a      	lsls	r2, r3
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b4:	f043 0201 	orr.w	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d06e      	beq.n	80073b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a69      	ldr	r2, [pc, #420]	; (800747c <HAL_DMA_IRQHandler+0x3f8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d04a      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a67      	ldr	r2, [pc, #412]	; (8007480 <HAL_DMA_IRQHandler+0x3fc>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d045      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a66      	ldr	r2, [pc, #408]	; (8007484 <HAL_DMA_IRQHandler+0x400>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d040      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a64      	ldr	r2, [pc, #400]	; (8007488 <HAL_DMA_IRQHandler+0x404>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d03b      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a63      	ldr	r2, [pc, #396]	; (800748c <HAL_DMA_IRQHandler+0x408>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d036      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a61      	ldr	r2, [pc, #388]	; (8007490 <HAL_DMA_IRQHandler+0x40c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d031      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a60      	ldr	r2, [pc, #384]	; (8007494 <HAL_DMA_IRQHandler+0x410>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d02c      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5e      	ldr	r2, [pc, #376]	; (8007498 <HAL_DMA_IRQHandler+0x414>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d027      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5d      	ldr	r2, [pc, #372]	; (800749c <HAL_DMA_IRQHandler+0x418>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d022      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a5b      	ldr	r2, [pc, #364]	; (80074a0 <HAL_DMA_IRQHandler+0x41c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01d      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a5a      	ldr	r2, [pc, #360]	; (80074a4 <HAL_DMA_IRQHandler+0x420>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d018      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a58      	ldr	r2, [pc, #352]	; (80074a8 <HAL_DMA_IRQHandler+0x424>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a57      	ldr	r2, [pc, #348]	; (80074ac <HAL_DMA_IRQHandler+0x428>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00e      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a55      	ldr	r2, [pc, #340]	; (80074b0 <HAL_DMA_IRQHandler+0x42c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d009      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a54      	ldr	r2, [pc, #336]	; (80074b4 <HAL_DMA_IRQHandler+0x430>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <HAL_DMA_IRQHandler+0x2ee>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a52      	ldr	r2, [pc, #328]	; (80074b8 <HAL_DMA_IRQHandler+0x434>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d10a      	bne.n	8007388 <HAL_DMA_IRQHandler+0x304>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e003      	b.n	8007390 <HAL_DMA_IRQHandler+0x30c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00d      	beq.n	80073b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2201      	movs	r2, #1
 800739e:	409a      	lsls	r2, r3
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a8:	f043 0202 	orr.w	r2, r3, #2
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	2204      	movs	r2, #4
 80073ba:	409a      	lsls	r2, r3
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	4013      	ands	r3, r2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 808f 	beq.w	80074e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a2c      	ldr	r2, [pc, #176]	; (800747c <HAL_DMA_IRQHandler+0x3f8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d04a      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a2a      	ldr	r2, [pc, #168]	; (8007480 <HAL_DMA_IRQHandler+0x3fc>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d045      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a29      	ldr	r2, [pc, #164]	; (8007484 <HAL_DMA_IRQHandler+0x400>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d040      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a27      	ldr	r2, [pc, #156]	; (8007488 <HAL_DMA_IRQHandler+0x404>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d03b      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a26      	ldr	r2, [pc, #152]	; (800748c <HAL_DMA_IRQHandler+0x408>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d036      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a24      	ldr	r2, [pc, #144]	; (8007490 <HAL_DMA_IRQHandler+0x40c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d031      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a23      	ldr	r2, [pc, #140]	; (8007494 <HAL_DMA_IRQHandler+0x410>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d02c      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a21      	ldr	r2, [pc, #132]	; (8007498 <HAL_DMA_IRQHandler+0x414>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d027      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a20      	ldr	r2, [pc, #128]	; (800749c <HAL_DMA_IRQHandler+0x418>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d022      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <HAL_DMA_IRQHandler+0x41c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01d      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <HAL_DMA_IRQHandler+0x420>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d018      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <HAL_DMA_IRQHandler+0x424>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1a      	ldr	r2, [pc, #104]	; (80074ac <HAL_DMA_IRQHandler+0x428>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00e      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a18      	ldr	r2, [pc, #96]	; (80074b0 <HAL_DMA_IRQHandler+0x42c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d009      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a17      	ldr	r2, [pc, #92]	; (80074b4 <HAL_DMA_IRQHandler+0x430>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d004      	beq.n	8007466 <HAL_DMA_IRQHandler+0x3e2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <HAL_DMA_IRQHandler+0x434>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d12a      	bne.n	80074bc <HAL_DMA_IRQHandler+0x438>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	e023      	b.n	80074c4 <HAL_DMA_IRQHandler+0x440>
 800747c:	40020010 	.word	0x40020010
 8007480:	40020028 	.word	0x40020028
 8007484:	40020040 	.word	0x40020040
 8007488:	40020058 	.word	0x40020058
 800748c:	40020070 	.word	0x40020070
 8007490:	40020088 	.word	0x40020088
 8007494:	400200a0 	.word	0x400200a0
 8007498:	400200b8 	.word	0x400200b8
 800749c:	40020410 	.word	0x40020410
 80074a0:	40020428 	.word	0x40020428
 80074a4:	40020440 	.word	0x40020440
 80074a8:	40020458 	.word	0x40020458
 80074ac:	40020470 	.word	0x40020470
 80074b0:	40020488 	.word	0x40020488
 80074b4:	400204a0 	.word	0x400204a0
 80074b8:	400204b8 	.word	0x400204b8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00d      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2204      	movs	r2, #4
 80074d2:	409a      	lsls	r2, r3
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074dc:	f043 0204 	orr.w	r2, r3, #4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e8:	f003 031f 	and.w	r3, r3, #31
 80074ec:	2210      	movs	r2, #16
 80074ee:	409a      	lsls	r2, r3
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80a6 	beq.w	8007646 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a85      	ldr	r2, [pc, #532]	; (8007714 <HAL_DMA_IRQHandler+0x690>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d04a      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a83      	ldr	r2, [pc, #524]	; (8007718 <HAL_DMA_IRQHandler+0x694>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d045      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a82      	ldr	r2, [pc, #520]	; (800771c <HAL_DMA_IRQHandler+0x698>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d040      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a80      	ldr	r2, [pc, #512]	; (8007720 <HAL_DMA_IRQHandler+0x69c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d03b      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a7f      	ldr	r2, [pc, #508]	; (8007724 <HAL_DMA_IRQHandler+0x6a0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d036      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7d      	ldr	r2, [pc, #500]	; (8007728 <HAL_DMA_IRQHandler+0x6a4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d031      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7c      	ldr	r2, [pc, #496]	; (800772c <HAL_DMA_IRQHandler+0x6a8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d02c      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a7a      	ldr	r2, [pc, #488]	; (8007730 <HAL_DMA_IRQHandler+0x6ac>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d027      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a79      	ldr	r2, [pc, #484]	; (8007734 <HAL_DMA_IRQHandler+0x6b0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a77      	ldr	r2, [pc, #476]	; (8007738 <HAL_DMA_IRQHandler+0x6b4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01d      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a76      	ldr	r2, [pc, #472]	; (800773c <HAL_DMA_IRQHandler+0x6b8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a74      	ldr	r2, [pc, #464]	; (8007740 <HAL_DMA_IRQHandler+0x6bc>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a73      	ldr	r2, [pc, #460]	; (8007744 <HAL_DMA_IRQHandler+0x6c0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a71      	ldr	r2, [pc, #452]	; (8007748 <HAL_DMA_IRQHandler+0x6c4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a70      	ldr	r2, [pc, #448]	; (800774c <HAL_DMA_IRQHandler+0x6c8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_DMA_IRQHandler+0x516>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a6e      	ldr	r2, [pc, #440]	; (8007750 <HAL_DMA_IRQHandler+0x6cc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10a      	bne.n	80075b0 <HAL_DMA_IRQHandler+0x52c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	e009      	b.n	80075c4 <HAL_DMA_IRQHandler+0x540>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf14      	ite	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	2300      	moveq	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d03e      	beq.n	8007646 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	2210      	movs	r2, #16
 80075d2:	409a      	lsls	r2, r3
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d018      	beq.n	8007618 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d108      	bne.n	8007606 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d024      	beq.n	8007646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
 8007604:	e01f      	b.n	8007646 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01b      	beq.n	8007646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
 8007616:	e016      	b.n	8007646 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d107      	bne.n	8007636 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0208 	bic.w	r2, r2, #8
 8007634:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	2220      	movs	r2, #32
 8007650:	409a      	lsls	r2, r3
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	4013      	ands	r3, r2
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8110 	beq.w	800787c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <HAL_DMA_IRQHandler+0x690>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d04a      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2b      	ldr	r2, [pc, #172]	; (8007718 <HAL_DMA_IRQHandler+0x694>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d045      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a29      	ldr	r2, [pc, #164]	; (800771c <HAL_DMA_IRQHandler+0x698>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a28      	ldr	r2, [pc, #160]	; (8007720 <HAL_DMA_IRQHandler+0x69c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d03b      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a26      	ldr	r2, [pc, #152]	; (8007724 <HAL_DMA_IRQHandler+0x6a0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d036      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a25      	ldr	r2, [pc, #148]	; (8007728 <HAL_DMA_IRQHandler+0x6a4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d031      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a23      	ldr	r2, [pc, #140]	; (800772c <HAL_DMA_IRQHandler+0x6a8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d02c      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a22      	ldr	r2, [pc, #136]	; (8007730 <HAL_DMA_IRQHandler+0x6ac>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d027      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <HAL_DMA_IRQHandler+0x6b0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d022      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <HAL_DMA_IRQHandler+0x6b4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01d      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1d      	ldr	r2, [pc, #116]	; (800773c <HAL_DMA_IRQHandler+0x6b8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <HAL_DMA_IRQHandler+0x6bc>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <HAL_DMA_IRQHandler+0x6c0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00e      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a19      	ldr	r2, [pc, #100]	; (8007748 <HAL_DMA_IRQHandler+0x6c4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a17      	ldr	r2, [pc, #92]	; (800774c <HAL_DMA_IRQHandler+0x6c8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_DMA_IRQHandler+0x678>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a16      	ldr	r2, [pc, #88]	; (8007750 <HAL_DMA_IRQHandler+0x6cc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d12b      	bne.n	8007754 <HAL_DMA_IRQHandler+0x6d0>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b00      	cmp	r3, #0
 8007708:	bf14      	ite	ne
 800770a:	2301      	movne	r3, #1
 800770c:	2300      	moveq	r3, #0
 800770e:	b2db      	uxtb	r3, r3
 8007710:	e02a      	b.n	8007768 <HAL_DMA_IRQHandler+0x6e4>
 8007712:	bf00      	nop
 8007714:	40020010 	.word	0x40020010
 8007718:	40020028 	.word	0x40020028
 800771c:	40020040 	.word	0x40020040
 8007720:	40020058 	.word	0x40020058
 8007724:	40020070 	.word	0x40020070
 8007728:	40020088 	.word	0x40020088
 800772c:	400200a0 	.word	0x400200a0
 8007730:	400200b8 	.word	0x400200b8
 8007734:	40020410 	.word	0x40020410
 8007738:	40020428 	.word	0x40020428
 800773c:	40020440 	.word	0x40020440
 8007740:	40020458 	.word	0x40020458
 8007744:	40020470 	.word	0x40020470
 8007748:	40020488 	.word	0x40020488
 800774c:	400204a0 	.word	0x400204a0
 8007750:	400204b8 	.word	0x400204b8
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2301      	movne	r3, #1
 8007764:	2300      	moveq	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8087 	beq.w	800787c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	2220      	movs	r2, #32
 8007778:	409a      	lsls	r2, r3
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b04      	cmp	r3, #4
 8007788:	d139      	bne.n	80077fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0216 	bic.w	r2, r2, #22
 8007798:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695a      	ldr	r2, [r3, #20]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <HAL_DMA_IRQHandler+0x736>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0208 	bic.w	r2, r2, #8
 80077c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	223f      	movs	r2, #63	; 0x3f
 80077d4:	409a      	lsls	r2, r3
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 834a 	beq.w	8007e88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
          }
          return;
 80077fc:	e344      	b.n	8007e88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d018      	beq.n	800783e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d108      	bne.n	800782c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	2b00      	cmp	r3, #0
 8007820:	d02c      	beq.n	800787c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	e027      	b.n	800787c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d023      	beq.n	800787c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
 800783c:	e01e      	b.n	800787c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10f      	bne.n	800786c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0210 	bic.w	r2, r2, #16
 800785a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 8306 	beq.w	8007e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8088 	beq.w	80079a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2204      	movs	r2, #4
 8007898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a7a      	ldr	r2, [pc, #488]	; (8007a8c <HAL_DMA_IRQHandler+0xa08>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d04a      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a79      	ldr	r2, [pc, #484]	; (8007a90 <HAL_DMA_IRQHandler+0xa0c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d045      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a77      	ldr	r2, [pc, #476]	; (8007a94 <HAL_DMA_IRQHandler+0xa10>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d040      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a76      	ldr	r2, [pc, #472]	; (8007a98 <HAL_DMA_IRQHandler+0xa14>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d03b      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a74      	ldr	r2, [pc, #464]	; (8007a9c <HAL_DMA_IRQHandler+0xa18>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d036      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a73      	ldr	r2, [pc, #460]	; (8007aa0 <HAL_DMA_IRQHandler+0xa1c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d031      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a71      	ldr	r2, [pc, #452]	; (8007aa4 <HAL_DMA_IRQHandler+0xa20>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d02c      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a70      	ldr	r2, [pc, #448]	; (8007aa8 <HAL_DMA_IRQHandler+0xa24>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d027      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a6e      	ldr	r2, [pc, #440]	; (8007aac <HAL_DMA_IRQHandler+0xa28>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d022      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a6d      	ldr	r2, [pc, #436]	; (8007ab0 <HAL_DMA_IRQHandler+0xa2c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d01d      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a6b      	ldr	r2, [pc, #428]	; (8007ab4 <HAL_DMA_IRQHandler+0xa30>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d018      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a6a      	ldr	r2, [pc, #424]	; (8007ab8 <HAL_DMA_IRQHandler+0xa34>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a68      	ldr	r2, [pc, #416]	; (8007abc <HAL_DMA_IRQHandler+0xa38>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a67      	ldr	r2, [pc, #412]	; (8007ac0 <HAL_DMA_IRQHandler+0xa3c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a65      	ldr	r2, [pc, #404]	; (8007ac4 <HAL_DMA_IRQHandler+0xa40>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_DMA_IRQHandler+0x8b8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a64      	ldr	r2, [pc, #400]	; (8007ac8 <HAL_DMA_IRQHandler+0xa44>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d108      	bne.n	800794e <HAL_DMA_IRQHandler+0x8ca>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e007      	b.n	800795e <HAL_DMA_IRQHandler+0x8da>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0201 	bic.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007966:	429a      	cmp	r2, r3
 8007968:	d307      	bcc.n	800797a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f2      	bne.n	800795e <HAL_DMA_IRQHandler+0x8da>
 8007978:	e000      	b.n	800797c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800797a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2203      	movs	r2, #3
 800798e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007992:	e003      	b.n	800799c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8272 	beq.w	8007e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	e26c      	b.n	8007e92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a43      	ldr	r2, [pc, #268]	; (8007acc <HAL_DMA_IRQHandler+0xa48>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d022      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a42      	ldr	r2, [pc, #264]	; (8007ad0 <HAL_DMA_IRQHandler+0xa4c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d01d      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a40      	ldr	r2, [pc, #256]	; (8007ad4 <HAL_DMA_IRQHandler+0xa50>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d018      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <HAL_DMA_IRQHandler+0xa54>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d013      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a3d      	ldr	r2, [pc, #244]	; (8007adc <HAL_DMA_IRQHandler+0xa58>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00e      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a3c      	ldr	r2, [pc, #240]	; (8007ae0 <HAL_DMA_IRQHandler+0xa5c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a3a      	ldr	r2, [pc, #232]	; (8007ae4 <HAL_DMA_IRQHandler+0xa60>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d004      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x984>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a39      	ldr	r2, [pc, #228]	; (8007ae8 <HAL_DMA_IRQHandler+0xa64>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d101      	bne.n	8007a0c <HAL_DMA_IRQHandler+0x988>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <HAL_DMA_IRQHandler+0x98a>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 823f 	beq.w	8007e92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	2204      	movs	r2, #4
 8007a26:	409a      	lsls	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80cd 	beq.w	8007bcc <HAL_DMA_IRQHandler+0xb48>
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80c7 	beq.w	8007bcc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a42:	f003 031f 	and.w	r3, r3, #31
 8007a46:	2204      	movs	r2, #4
 8007a48:	409a      	lsls	r2, r3
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d049      	beq.n	8007aec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8210 	beq.w	8007e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a74:	e20a      	b.n	8007e8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8206 	beq.w	8007e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a88:	e200      	b.n	8007e8c <HAL_DMA_IRQHandler+0xe08>
 8007a8a:	bf00      	nop
 8007a8c:	40020010 	.word	0x40020010
 8007a90:	40020028 	.word	0x40020028
 8007a94:	40020040 	.word	0x40020040
 8007a98:	40020058 	.word	0x40020058
 8007a9c:	40020070 	.word	0x40020070
 8007aa0:	40020088 	.word	0x40020088
 8007aa4:	400200a0 	.word	0x400200a0
 8007aa8:	400200b8 	.word	0x400200b8
 8007aac:	40020410 	.word	0x40020410
 8007ab0:	40020428 	.word	0x40020428
 8007ab4:	40020440 	.word	0x40020440
 8007ab8:	40020458 	.word	0x40020458
 8007abc:	40020470 	.word	0x40020470
 8007ac0:	40020488 	.word	0x40020488
 8007ac4:	400204a0 	.word	0x400204a0
 8007ac8:	400204b8 	.word	0x400204b8
 8007acc:	58025408 	.word	0x58025408
 8007ad0:	5802541c 	.word	0x5802541c
 8007ad4:	58025430 	.word	0x58025430
 8007ad8:	58025444 	.word	0x58025444
 8007adc:	58025458 	.word	0x58025458
 8007ae0:	5802546c 	.word	0x5802546c
 8007ae4:	58025480 	.word	0x58025480
 8007ae8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d160      	bne.n	8007bb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a8c      	ldr	r2, [pc, #560]	; (8007d2c <HAL_DMA_IRQHandler+0xca8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d04a      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a8a      	ldr	r2, [pc, #552]	; (8007d30 <HAL_DMA_IRQHandler+0xcac>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d045      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a89      	ldr	r2, [pc, #548]	; (8007d34 <HAL_DMA_IRQHandler+0xcb0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d040      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a87      	ldr	r2, [pc, #540]	; (8007d38 <HAL_DMA_IRQHandler+0xcb4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d03b      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a86      	ldr	r2, [pc, #536]	; (8007d3c <HAL_DMA_IRQHandler+0xcb8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d036      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a84      	ldr	r2, [pc, #528]	; (8007d40 <HAL_DMA_IRQHandler+0xcbc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d031      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a83      	ldr	r2, [pc, #524]	; (8007d44 <HAL_DMA_IRQHandler+0xcc0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d02c      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a81      	ldr	r2, [pc, #516]	; (8007d48 <HAL_DMA_IRQHandler+0xcc4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d027      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a80      	ldr	r2, [pc, #512]	; (8007d4c <HAL_DMA_IRQHandler+0xcc8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d022      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a7e      	ldr	r2, [pc, #504]	; (8007d50 <HAL_DMA_IRQHandler+0xccc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01d      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a7d      	ldr	r2, [pc, #500]	; (8007d54 <HAL_DMA_IRQHandler+0xcd0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d018      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a7b      	ldr	r2, [pc, #492]	; (8007d58 <HAL_DMA_IRQHandler+0xcd4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a7a      	ldr	r2, [pc, #488]	; (8007d5c <HAL_DMA_IRQHandler+0xcd8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00e      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a78      	ldr	r2, [pc, #480]	; (8007d60 <HAL_DMA_IRQHandler+0xcdc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a77      	ldr	r2, [pc, #476]	; (8007d64 <HAL_DMA_IRQHandler+0xce0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xb12>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a75      	ldr	r2, [pc, #468]	; (8007d68 <HAL_DMA_IRQHandler+0xce4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <HAL_DMA_IRQHandler+0xb24>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0208 	bic.w	r2, r2, #8
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e007      	b.n	8007bb8 <HAL_DMA_IRQHandler+0xb34>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0204 	bic.w	r2, r2, #4
 8007bb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8165 	beq.w	8007e8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bca:	e15f      	b.n	8007e8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	409a      	lsls	r2, r3
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80c5 	beq.w	8007d6c <HAL_DMA_IRQHandler+0xce8>
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 80bf 	beq.w	8007d6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	409a      	lsls	r2, r3
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d018      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 813a 	beq.w	8007e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c24:	e134      	b.n	8007e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 8130 	beq.w	8007e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c38:	e12a      	b.n	8007e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d168      	bne.n	8007d16 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a38      	ldr	r2, [pc, #224]	; (8007d2c <HAL_DMA_IRQHandler+0xca8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d04a      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a37      	ldr	r2, [pc, #220]	; (8007d30 <HAL_DMA_IRQHandler+0xcac>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d045      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a35      	ldr	r2, [pc, #212]	; (8007d34 <HAL_DMA_IRQHandler+0xcb0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d040      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a34      	ldr	r2, [pc, #208]	; (8007d38 <HAL_DMA_IRQHandler+0xcb4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d03b      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a32      	ldr	r2, [pc, #200]	; (8007d3c <HAL_DMA_IRQHandler+0xcb8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d036      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a31      	ldr	r2, [pc, #196]	; (8007d40 <HAL_DMA_IRQHandler+0xcbc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d031      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a2f      	ldr	r2, [pc, #188]	; (8007d44 <HAL_DMA_IRQHandler+0xcc0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d02c      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2e      	ldr	r2, [pc, #184]	; (8007d48 <HAL_DMA_IRQHandler+0xcc4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d027      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a2c      	ldr	r2, [pc, #176]	; (8007d4c <HAL_DMA_IRQHandler+0xcc8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d022      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a2b      	ldr	r2, [pc, #172]	; (8007d50 <HAL_DMA_IRQHandler+0xccc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <HAL_DMA_IRQHandler+0xcd0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a28      	ldr	r2, [pc, #160]	; (8007d58 <HAL_DMA_IRQHandler+0xcd4>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	; (8007d5c <HAL_DMA_IRQHandler+0xcd8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <HAL_DMA_IRQHandler+0xcdc>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a23      	ldr	r2, [pc, #140]	; (8007d64 <HAL_DMA_IRQHandler+0xce0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xc60>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a22      	ldr	r2, [pc, #136]	; (8007d68 <HAL_DMA_IRQHandler+0xce4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d108      	bne.n	8007cf6 <HAL_DMA_IRQHandler+0xc72>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0214 	bic.w	r2, r2, #20
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e007      	b.n	8007d06 <HAL_DMA_IRQHandler+0xc82>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 020a 	bic.w	r2, r2, #10
 8007d04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80b8 	beq.w	8007e90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d28:	e0b2      	b.n	8007e90 <HAL_DMA_IRQHandler+0xe0c>
 8007d2a:	bf00      	nop
 8007d2c:	40020010 	.word	0x40020010
 8007d30:	40020028 	.word	0x40020028
 8007d34:	40020040 	.word	0x40020040
 8007d38:	40020058 	.word	0x40020058
 8007d3c:	40020070 	.word	0x40020070
 8007d40:	40020088 	.word	0x40020088
 8007d44:	400200a0 	.word	0x400200a0
 8007d48:	400200b8 	.word	0x400200b8
 8007d4c:	40020410 	.word	0x40020410
 8007d50:	40020428 	.word	0x40020428
 8007d54:	40020440 	.word	0x40020440
 8007d58:	40020458 	.word	0x40020458
 8007d5c:	40020470 	.word	0x40020470
 8007d60:	40020488 	.word	0x40020488
 8007d64:	400204a0 	.word	0x400204a0
 8007d68:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	2208      	movs	r2, #8
 8007d76:	409a      	lsls	r2, r3
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8088 	beq.w	8007e92 <HAL_DMA_IRQHandler+0xe0e>
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8082 	beq.w	8007e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a41      	ldr	r2, [pc, #260]	; (8007e98 <HAL_DMA_IRQHandler+0xe14>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d04a      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a3f      	ldr	r2, [pc, #252]	; (8007e9c <HAL_DMA_IRQHandler+0xe18>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d045      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3e      	ldr	r2, [pc, #248]	; (8007ea0 <HAL_DMA_IRQHandler+0xe1c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d040      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3c      	ldr	r2, [pc, #240]	; (8007ea4 <HAL_DMA_IRQHandler+0xe20>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d03b      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a3b      	ldr	r2, [pc, #236]	; (8007ea8 <HAL_DMA_IRQHandler+0xe24>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d036      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a39      	ldr	r2, [pc, #228]	; (8007eac <HAL_DMA_IRQHandler+0xe28>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d031      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a38      	ldr	r2, [pc, #224]	; (8007eb0 <HAL_DMA_IRQHandler+0xe2c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d02c      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a36      	ldr	r2, [pc, #216]	; (8007eb4 <HAL_DMA_IRQHandler+0xe30>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d027      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a35      	ldr	r2, [pc, #212]	; (8007eb8 <HAL_DMA_IRQHandler+0xe34>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d022      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a33      	ldr	r2, [pc, #204]	; (8007ebc <HAL_DMA_IRQHandler+0xe38>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01d      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a32      	ldr	r2, [pc, #200]	; (8007ec0 <HAL_DMA_IRQHandler+0xe3c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d018      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a30      	ldr	r2, [pc, #192]	; (8007ec4 <HAL_DMA_IRQHandler+0xe40>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ec8 <HAL_DMA_IRQHandler+0xe44>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00e      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2d      	ldr	r2, [pc, #180]	; (8007ecc <HAL_DMA_IRQHandler+0xe48>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d009      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ed0 <HAL_DMA_IRQHandler+0xe4c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xdaa>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2a      	ldr	r2, [pc, #168]	; (8007ed4 <HAL_DMA_IRQHandler+0xe50>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d108      	bne.n	8007e40 <HAL_DMA_IRQHandler+0xdbc>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 021c 	bic.w	r2, r2, #28
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	e007      	b.n	8007e50 <HAL_DMA_IRQHandler+0xdcc>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 020e 	bic.w	r2, r2, #14
 8007e4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e54:	f003 031f 	and.w	r3, r3, #31
 8007e58:	2201      	movs	r2, #1
 8007e5a:	409a      	lsls	r2, r3
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
 8007e86:	e004      	b.n	8007e92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e88:	bf00      	nop
 8007e8a:	e002      	b.n	8007e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e92:	3728      	adds	r7, #40	; 0x28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	40020010 	.word	0x40020010
 8007e9c:	40020028 	.word	0x40020028
 8007ea0:	40020040 	.word	0x40020040
 8007ea4:	40020058 	.word	0x40020058
 8007ea8:	40020070 	.word	0x40020070
 8007eac:	40020088 	.word	0x40020088
 8007eb0:	400200a0 	.word	0x400200a0
 8007eb4:	400200b8 	.word	0x400200b8
 8007eb8:	40020410 	.word	0x40020410
 8007ebc:	40020428 	.word	0x40020428
 8007ec0:	40020440 	.word	0x40020440
 8007ec4:	40020458 	.word	0x40020458
 8007ec8:	40020470 	.word	0x40020470
 8007ecc:	40020488 	.word	0x40020488
 8007ed0:	400204a0 	.word	0x400204a0
 8007ed4:	400204b8 	.word	0x400204b8

08007ed8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a84      	ldr	r2, [pc, #528]	; (8008108 <DMA_SetConfig+0x230>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d072      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a82      	ldr	r2, [pc, #520]	; (800810c <DMA_SetConfig+0x234>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d06d      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a81      	ldr	r2, [pc, #516]	; (8008110 <DMA_SetConfig+0x238>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d068      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a7f      	ldr	r2, [pc, #508]	; (8008114 <DMA_SetConfig+0x23c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d063      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a7e      	ldr	r2, [pc, #504]	; (8008118 <DMA_SetConfig+0x240>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d05e      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a7c      	ldr	r2, [pc, #496]	; (800811c <DMA_SetConfig+0x244>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d059      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a7b      	ldr	r2, [pc, #492]	; (8008120 <DMA_SetConfig+0x248>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d054      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a79      	ldr	r2, [pc, #484]	; (8008124 <DMA_SetConfig+0x24c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d04f      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a78      	ldr	r2, [pc, #480]	; (8008128 <DMA_SetConfig+0x250>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d04a      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a76      	ldr	r2, [pc, #472]	; (800812c <DMA_SetConfig+0x254>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d045      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a75      	ldr	r2, [pc, #468]	; (8008130 <DMA_SetConfig+0x258>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d040      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a73      	ldr	r2, [pc, #460]	; (8008134 <DMA_SetConfig+0x25c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d03b      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a72      	ldr	r2, [pc, #456]	; (8008138 <DMA_SetConfig+0x260>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d036      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a70      	ldr	r2, [pc, #448]	; (800813c <DMA_SetConfig+0x264>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d031      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a6f      	ldr	r2, [pc, #444]	; (8008140 <DMA_SetConfig+0x268>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d02c      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a6d      	ldr	r2, [pc, #436]	; (8008144 <DMA_SetConfig+0x26c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d027      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a6c      	ldr	r2, [pc, #432]	; (8008148 <DMA_SetConfig+0x270>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d022      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a6a      	ldr	r2, [pc, #424]	; (800814c <DMA_SetConfig+0x274>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01d      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a69      	ldr	r2, [pc, #420]	; (8008150 <DMA_SetConfig+0x278>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d018      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a67      	ldr	r2, [pc, #412]	; (8008154 <DMA_SetConfig+0x27c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a66      	ldr	r2, [pc, #408]	; (8008158 <DMA_SetConfig+0x280>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00e      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a64      	ldr	r2, [pc, #400]	; (800815c <DMA_SetConfig+0x284>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a63      	ldr	r2, [pc, #396]	; (8008160 <DMA_SetConfig+0x288>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <DMA_SetConfig+0x10a>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a61      	ldr	r2, [pc, #388]	; (8008164 <DMA_SetConfig+0x28c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d101      	bne.n	8007fe6 <DMA_SetConfig+0x10e>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <DMA_SetConfig+0x110>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00d      	beq.n	8008008 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ff4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008006:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a3e      	ldr	r2, [pc, #248]	; (8008108 <DMA_SetConfig+0x230>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d04a      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a3d      	ldr	r2, [pc, #244]	; (800810c <DMA_SetConfig+0x234>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d045      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a3b      	ldr	r2, [pc, #236]	; (8008110 <DMA_SetConfig+0x238>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d040      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a3a      	ldr	r2, [pc, #232]	; (8008114 <DMA_SetConfig+0x23c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d03b      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a38      	ldr	r2, [pc, #224]	; (8008118 <DMA_SetConfig+0x240>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d036      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a37      	ldr	r2, [pc, #220]	; (800811c <DMA_SetConfig+0x244>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d031      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a35      	ldr	r2, [pc, #212]	; (8008120 <DMA_SetConfig+0x248>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02c      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a34      	ldr	r2, [pc, #208]	; (8008124 <DMA_SetConfig+0x24c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d027      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a32      	ldr	r2, [pc, #200]	; (8008128 <DMA_SetConfig+0x250>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d022      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a31      	ldr	r2, [pc, #196]	; (800812c <DMA_SetConfig+0x254>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01d      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2f      	ldr	r2, [pc, #188]	; (8008130 <DMA_SetConfig+0x258>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d018      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2e      	ldr	r2, [pc, #184]	; (8008134 <DMA_SetConfig+0x25c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a2c      	ldr	r2, [pc, #176]	; (8008138 <DMA_SetConfig+0x260>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00e      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a2b      	ldr	r2, [pc, #172]	; (800813c <DMA_SetConfig+0x264>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a29      	ldr	r2, [pc, #164]	; (8008140 <DMA_SetConfig+0x268>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <DMA_SetConfig+0x1d0>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a28      	ldr	r2, [pc, #160]	; (8008144 <DMA_SetConfig+0x26c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d101      	bne.n	80080ac <DMA_SetConfig+0x1d4>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <DMA_SetConfig+0x1d6>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d05a      	beq.n	8008168 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	223f      	movs	r2, #63	; 0x3f
 80080bc:	409a      	lsls	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b40      	cmp	r3, #64	; 0x40
 80080e0:	d108      	bne.n	80080f4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080f2:	e087      	b.n	8008204 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]
}
 8008104:	e07e      	b.n	8008204 <DMA_SetConfig+0x32c>
 8008106:	bf00      	nop
 8008108:	40020010 	.word	0x40020010
 800810c:	40020028 	.word	0x40020028
 8008110:	40020040 	.word	0x40020040
 8008114:	40020058 	.word	0x40020058
 8008118:	40020070 	.word	0x40020070
 800811c:	40020088 	.word	0x40020088
 8008120:	400200a0 	.word	0x400200a0
 8008124:	400200b8 	.word	0x400200b8
 8008128:	40020410 	.word	0x40020410
 800812c:	40020428 	.word	0x40020428
 8008130:	40020440 	.word	0x40020440
 8008134:	40020458 	.word	0x40020458
 8008138:	40020470 	.word	0x40020470
 800813c:	40020488 	.word	0x40020488
 8008140:	400204a0 	.word	0x400204a0
 8008144:	400204b8 	.word	0x400204b8
 8008148:	58025408 	.word	0x58025408
 800814c:	5802541c 	.word	0x5802541c
 8008150:	58025430 	.word	0x58025430
 8008154:	58025444 	.word	0x58025444
 8008158:	58025458 	.word	0x58025458
 800815c:	5802546c 	.word	0x5802546c
 8008160:	58025480 	.word	0x58025480
 8008164:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a28      	ldr	r2, [pc, #160]	; (8008210 <DMA_SetConfig+0x338>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d022      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a27      	ldr	r2, [pc, #156]	; (8008214 <DMA_SetConfig+0x33c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d01d      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a25      	ldr	r2, [pc, #148]	; (8008218 <DMA_SetConfig+0x340>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d018      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a24      	ldr	r2, [pc, #144]	; (800821c <DMA_SetConfig+0x344>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a22      	ldr	r2, [pc, #136]	; (8008220 <DMA_SetConfig+0x348>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00e      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a21      	ldr	r2, [pc, #132]	; (8008224 <DMA_SetConfig+0x34c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d009      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1f      	ldr	r2, [pc, #124]	; (8008228 <DMA_SetConfig+0x350>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d004      	beq.n	80081b8 <DMA_SetConfig+0x2e0>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1e      	ldr	r2, [pc, #120]	; (800822c <DMA_SetConfig+0x354>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d101      	bne.n	80081bc <DMA_SetConfig+0x2e4>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <DMA_SetConfig+0x2e6>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d020      	beq.n	8008204 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	f003 031f 	and.w	r3, r3, #31
 80081ca:	2201      	movs	r2, #1
 80081cc:	409a      	lsls	r2, r3
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d108      	bne.n	80081f4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	60da      	str	r2, [r3, #12]
}
 80081f2:	e007      	b.n	8008204 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	60da      	str	r2, [r3, #12]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	58025408 	.word	0x58025408
 8008214:	5802541c 	.word	0x5802541c
 8008218:	58025430 	.word	0x58025430
 800821c:	58025444 	.word	0x58025444
 8008220:	58025458 	.word	0x58025458
 8008224:	5802546c 	.word	0x5802546c
 8008228:	58025480 	.word	0x58025480
 800822c:	58025494 	.word	0x58025494

08008230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a42      	ldr	r2, [pc, #264]	; (8008348 <DMA_CalcBaseAndBitshift+0x118>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d04a      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a41      	ldr	r2, [pc, #260]	; (800834c <DMA_CalcBaseAndBitshift+0x11c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d045      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a3f      	ldr	r2, [pc, #252]	; (8008350 <DMA_CalcBaseAndBitshift+0x120>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d040      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a3e      	ldr	r2, [pc, #248]	; (8008354 <DMA_CalcBaseAndBitshift+0x124>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d03b      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a3c      	ldr	r2, [pc, #240]	; (8008358 <DMA_CalcBaseAndBitshift+0x128>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d036      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a3b      	ldr	r2, [pc, #236]	; (800835c <DMA_CalcBaseAndBitshift+0x12c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d031      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a39      	ldr	r2, [pc, #228]	; (8008360 <DMA_CalcBaseAndBitshift+0x130>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d02c      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a38      	ldr	r2, [pc, #224]	; (8008364 <DMA_CalcBaseAndBitshift+0x134>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d027      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a36      	ldr	r2, [pc, #216]	; (8008368 <DMA_CalcBaseAndBitshift+0x138>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d022      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a35      	ldr	r2, [pc, #212]	; (800836c <DMA_CalcBaseAndBitshift+0x13c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d01d      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a33      	ldr	r2, [pc, #204]	; (8008370 <DMA_CalcBaseAndBitshift+0x140>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d018      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a32      	ldr	r2, [pc, #200]	; (8008374 <DMA_CalcBaseAndBitshift+0x144>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d013      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a30      	ldr	r2, [pc, #192]	; (8008378 <DMA_CalcBaseAndBitshift+0x148>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00e      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a2f      	ldr	r2, [pc, #188]	; (800837c <DMA_CalcBaseAndBitshift+0x14c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d009      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a2d      	ldr	r2, [pc, #180]	; (8008380 <DMA_CalcBaseAndBitshift+0x150>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d004      	beq.n	80082d8 <DMA_CalcBaseAndBitshift+0xa8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a2c      	ldr	r2, [pc, #176]	; (8008384 <DMA_CalcBaseAndBitshift+0x154>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d101      	bne.n	80082dc <DMA_CalcBaseAndBitshift+0xac>
 80082d8:	2301      	movs	r3, #1
 80082da:	e000      	b.n	80082de <DMA_CalcBaseAndBitshift+0xae>
 80082dc:	2300      	movs	r3, #0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d024      	beq.n	800832c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3b10      	subs	r3, #16
 80082ea:	4a27      	ldr	r2, [pc, #156]	; (8008388 <DMA_CalcBaseAndBitshift+0x158>)
 80082ec:	fba2 2303 	umull	r2, r3, r2, r3
 80082f0:	091b      	lsrs	r3, r3, #4
 80082f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	4a24      	ldr	r2, [pc, #144]	; (800838c <DMA_CalcBaseAndBitshift+0x15c>)
 80082fc:	5cd3      	ldrb	r3, [r2, r3]
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b03      	cmp	r3, #3
 8008308:	d908      	bls.n	800831c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	4b1f      	ldr	r3, [pc, #124]	; (8008390 <DMA_CalcBaseAndBitshift+0x160>)
 8008312:	4013      	ands	r3, r2
 8008314:	1d1a      	adds	r2, r3, #4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	659a      	str	r2, [r3, #88]	; 0x58
 800831a:	e00d      	b.n	8008338 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <DMA_CalcBaseAndBitshift+0x160>)
 8008324:	4013      	ands	r3, r2
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6593      	str	r3, [r2, #88]	; 0x58
 800832a:	e005      	b.n	8008338 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	40020010 	.word	0x40020010
 800834c:	40020028 	.word	0x40020028
 8008350:	40020040 	.word	0x40020040
 8008354:	40020058 	.word	0x40020058
 8008358:	40020070 	.word	0x40020070
 800835c:	40020088 	.word	0x40020088
 8008360:	400200a0 	.word	0x400200a0
 8008364:	400200b8 	.word	0x400200b8
 8008368:	40020410 	.word	0x40020410
 800836c:	40020428 	.word	0x40020428
 8008370:	40020440 	.word	0x40020440
 8008374:	40020458 	.word	0x40020458
 8008378:	40020470 	.word	0x40020470
 800837c:	40020488 	.word	0x40020488
 8008380:	400204a0 	.word	0x400204a0
 8008384:	400204b8 	.word	0x400204b8
 8008388:	aaaaaaab 	.word	0xaaaaaaab
 800838c:	08011bc8 	.word	0x08011bc8
 8008390:	fffffc00 	.word	0xfffffc00

08008394 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d120      	bne.n	80083ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d858      	bhi.n	8008462 <DMA_CheckFifoParam+0xce>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <DMA_CheckFifoParam+0x24>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083c9 	.word	0x080083c9
 80083bc:	080083db 	.word	0x080083db
 80083c0:	080083c9 	.word	0x080083c9
 80083c4:	08008463 	.word	0x08008463
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d048      	beq.n	8008466 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083d8:	e045      	b.n	8008466 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083e2:	d142      	bne.n	800846a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083e8:	e03f      	b.n	800846a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f2:	d123      	bne.n	800843c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d838      	bhi.n	800846e <DMA_CheckFifoParam+0xda>
 80083fc:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <DMA_CheckFifoParam+0x70>)
 80083fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008402:	bf00      	nop
 8008404:	08008415 	.word	0x08008415
 8008408:	0800841b 	.word	0x0800841b
 800840c:	08008415 	.word	0x08008415
 8008410:	0800842d 	.word	0x0800842d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
        break;
 8008418:	e030      	b.n	800847c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d025      	beq.n	8008472 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800842a:	e022      	b.n	8008472 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008434:	d11f      	bne.n	8008476 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800843a:	e01c      	b.n	8008476 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008440:	2b02      	cmp	r3, #2
 8008442:	d902      	bls.n	800844a <DMA_CheckFifoParam+0xb6>
 8008444:	2b03      	cmp	r3, #3
 8008446:	d003      	beq.n	8008450 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008448:	e018      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
        break;
 800844e:	e015      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00e      	beq.n	800847a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
    break;
 8008460:	e00b      	b.n	800847a <DMA_CheckFifoParam+0xe6>
        break;
 8008462:	bf00      	nop
 8008464:	e00a      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        break;
 8008466:	bf00      	nop
 8008468:	e008      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        break;
 800846a:	bf00      	nop
 800846c:	e006      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        break;
 800846e:	bf00      	nop
 8008470:	e004      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <DMA_CheckFifoParam+0xe8>
        break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <DMA_CheckFifoParam+0xe8>
    break;
 800847a:	bf00      	nop
    }
  }

  return status;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop

0800848c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a38      	ldr	r2, [pc, #224]	; (8008580 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d022      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a36      	ldr	r2, [pc, #216]	; (8008584 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01d      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a35      	ldr	r2, [pc, #212]	; (8008588 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d018      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a33      	ldr	r2, [pc, #204]	; (800858c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a32      	ldr	r2, [pc, #200]	; (8008590 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00e      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a30      	ldr	r2, [pc, #192]	; (8008594 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d009      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a2f      	ldr	r2, [pc, #188]	; (8008598 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a2d      	ldr	r2, [pc, #180]	; (800859c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d101      	bne.n	80084ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01a      	beq.n	800852a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	3b08      	subs	r3, #8
 80084fc:	4a28      	ldr	r2, [pc, #160]	; (80085a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	091b      	lsrs	r3, r3, #4
 8008504:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4b26      	ldr	r3, [pc, #152]	; (80085a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	461a      	mov	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008518:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f003 031f 	and.w	r3, r3, #31
 8008520:	2201      	movs	r2, #1
 8008522:	409a      	lsls	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008528:	e024      	b.n	8008574 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	3b10      	subs	r3, #16
 8008532:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008534:	fba2 2303 	umull	r2, r3, r2, r3
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4a1c      	ldr	r2, [pc, #112]	; (80085b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d806      	bhi.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d902      	bls.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3308      	adds	r3, #8
 8008550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	461a      	mov	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a16      	ldr	r2, [pc, #88]	; (80085bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008564:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	2201      	movs	r2, #1
 800856e:	409a      	lsls	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	58025408 	.word	0x58025408
 8008584:	5802541c 	.word	0x5802541c
 8008588:	58025430 	.word	0x58025430
 800858c:	58025444 	.word	0x58025444
 8008590:	58025458 	.word	0x58025458
 8008594:	5802546c 	.word	0x5802546c
 8008598:	58025480 	.word	0x58025480
 800859c:	58025494 	.word	0x58025494
 80085a0:	cccccccd 	.word	0xcccccccd
 80085a4:	16009600 	.word	0x16009600
 80085a8:	58025880 	.word	0x58025880
 80085ac:	aaaaaaab 	.word	0xaaaaaaab
 80085b0:	400204b8 	.word	0x400204b8
 80085b4:	4002040f 	.word	0x4002040f
 80085b8:	10008200 	.word	0x10008200
 80085bc:	40020880 	.word	0x40020880

080085c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d04a      	beq.n	800866c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d847      	bhi.n	800866c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a25      	ldr	r2, [pc, #148]	; (8008678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d022      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a24      	ldr	r2, [pc, #144]	; (800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01d      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a22      	ldr	r2, [pc, #136]	; (8008680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a21      	ldr	r2, [pc, #132]	; (8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a1e      	ldr	r2, [pc, #120]	; (800868c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a1c      	ldr	r2, [pc, #112]	; (8008690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1b      	ldr	r2, [pc, #108]	; (8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d101      	bne.n	8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a15      	ldr	r2, [pc, #84]	; (800869c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008648:	671a      	str	r2, [r3, #112]	; 0x70
 800864a:	e009      	b.n	8008660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	461a      	mov	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a11      	ldr	r2, [pc, #68]	; (80086a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800865e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3b01      	subs	r3, #1
 8008664:	2201      	movs	r2, #1
 8008666:	409a      	lsls	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800866c:	bf00      	nop
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	58025408 	.word	0x58025408
 800867c:	5802541c 	.word	0x5802541c
 8008680:	58025430 	.word	0x58025430
 8008684:	58025444 	.word	0x58025444
 8008688:	58025458 	.word	0x58025458
 800868c:	5802546c 	.word	0x5802546c
 8008690:	58025480 	.word	0x58025480
 8008694:	58025494 	.word	0x58025494
 8008698:	1600963f 	.word	0x1600963f
 800869c:	58025940 	.word	0x58025940
 80086a0:	1000823f 	.word	0x1000823f
 80086a4:	40020940 	.word	0x40020940

080086a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b089      	sub	sp, #36	; 0x24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80086b6:	4b89      	ldr	r3, [pc, #548]	; (80088dc <HAL_GPIO_Init+0x234>)
 80086b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086ba:	e194      	b.n	80089e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	2101      	movs	r1, #1
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	fa01 f303 	lsl.w	r3, r1, r3
 80086c8:	4013      	ands	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 8186 	beq.w	80089e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d005      	beq.n	80086ec <HAL_GPIO_Init+0x44>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d130      	bne.n	800874e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	2203      	movs	r2, #3
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	4013      	ands	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	4313      	orrs	r3, r2
 8008714:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008722:	2201      	movs	r2, #1
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	fa02 f303 	lsl.w	r3, r2, r3
 800872a:	43db      	mvns	r3, r3
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	4013      	ands	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	091b      	lsrs	r3, r3, #4
 8008738:	f003 0201 	and.w	r2, r3, #1
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	4313      	orrs	r3, r2
 8008746:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d017      	beq.n	800878a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	2203      	movs	r2, #3
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	43db      	mvns	r3, r3
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	4013      	ands	r3, r2
 8008770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d123      	bne.n	80087de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	08da      	lsrs	r2, r3, #3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3208      	adds	r2, #8
 800879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	220f      	movs	r2, #15
 80087ae:	fa02 f303 	lsl.w	r3, r2, r3
 80087b2:	43db      	mvns	r3, r3
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	4013      	ands	r3, r2
 80087b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	08da      	lsrs	r2, r3, #3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3208      	adds	r2, #8
 80087d8:	69b9      	ldr	r1, [r7, #24]
 80087da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	2203      	movs	r2, #3
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	43db      	mvns	r3, r3
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	4013      	ands	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f003 0203 	and.w	r2, r3, #3
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4313      	orrs	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 80e0 	beq.w	80089e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008820:	4b2f      	ldr	r3, [pc, #188]	; (80088e0 <HAL_GPIO_Init+0x238>)
 8008822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008826:	4a2e      	ldr	r2, [pc, #184]	; (80088e0 <HAL_GPIO_Init+0x238>)
 8008828:	f043 0302 	orr.w	r3, r3, #2
 800882c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008830:	4b2b      	ldr	r3, [pc, #172]	; (80088e0 <HAL_GPIO_Init+0x238>)
 8008832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800883e:	4a29      	ldr	r2, [pc, #164]	; (80088e4 <HAL_GPIO_Init+0x23c>)
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	089b      	lsrs	r3, r3, #2
 8008844:	3302      	adds	r3, #2
 8008846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	220f      	movs	r2, #15
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	43db      	mvns	r3, r3
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	4013      	ands	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a20      	ldr	r2, [pc, #128]	; (80088e8 <HAL_GPIO_Init+0x240>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d052      	beq.n	8008910 <HAL_GPIO_Init+0x268>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1f      	ldr	r2, [pc, #124]	; (80088ec <HAL_GPIO_Init+0x244>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d031      	beq.n	80088d6 <HAL_GPIO_Init+0x22e>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1e      	ldr	r2, [pc, #120]	; (80088f0 <HAL_GPIO_Init+0x248>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d02b      	beq.n	80088d2 <HAL_GPIO_Init+0x22a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <HAL_GPIO_Init+0x24c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d025      	beq.n	80088ce <HAL_GPIO_Init+0x226>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <HAL_GPIO_Init+0x250>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01f      	beq.n	80088ca <HAL_GPIO_Init+0x222>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <HAL_GPIO_Init+0x254>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d019      	beq.n	80088c6 <HAL_GPIO_Init+0x21e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1a      	ldr	r2, [pc, #104]	; (8008900 <HAL_GPIO_Init+0x258>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <HAL_GPIO_Init+0x21a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <HAL_GPIO_Init+0x25c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00d      	beq.n	80088be <HAL_GPIO_Init+0x216>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a18      	ldr	r2, [pc, #96]	; (8008908 <HAL_GPIO_Init+0x260>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d007      	beq.n	80088ba <HAL_GPIO_Init+0x212>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a17      	ldr	r2, [pc, #92]	; (800890c <HAL_GPIO_Init+0x264>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d101      	bne.n	80088b6 <HAL_GPIO_Init+0x20e>
 80088b2:	2309      	movs	r3, #9
 80088b4:	e02d      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088b6:	230a      	movs	r3, #10
 80088b8:	e02b      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088ba:	2308      	movs	r3, #8
 80088bc:	e029      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088be:	2307      	movs	r3, #7
 80088c0:	e027      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088c2:	2306      	movs	r3, #6
 80088c4:	e025      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088c6:	2305      	movs	r3, #5
 80088c8:	e023      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088ca:	2304      	movs	r3, #4
 80088cc:	e021      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088ce:	2303      	movs	r3, #3
 80088d0:	e01f      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e01d      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e01b      	b.n	8008912 <HAL_GPIO_Init+0x26a>
 80088da:	bf00      	nop
 80088dc:	58000080 	.word	0x58000080
 80088e0:	58024400 	.word	0x58024400
 80088e4:	58000400 	.word	0x58000400
 80088e8:	58020000 	.word	0x58020000
 80088ec:	58020400 	.word	0x58020400
 80088f0:	58020800 	.word	0x58020800
 80088f4:	58020c00 	.word	0x58020c00
 80088f8:	58021000 	.word	0x58021000
 80088fc:	58021400 	.word	0x58021400
 8008900:	58021800 	.word	0x58021800
 8008904:	58021c00 	.word	0x58021c00
 8008908:	58022000 	.word	0x58022000
 800890c:	58022400 	.word	0x58022400
 8008910:	2300      	movs	r3, #0
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	f002 0203 	and.w	r2, r2, #3
 8008918:	0092      	lsls	r2, r2, #2
 800891a:	4093      	lsls	r3, r2
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	4313      	orrs	r3, r2
 8008920:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008922:	4938      	ldr	r1, [pc, #224]	; (8008a04 <HAL_GPIO_Init+0x35c>)
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	089b      	lsrs	r3, r3, #2
 8008928:	3302      	adds	r3, #2
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	43db      	mvns	r3, r3
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	4013      	ands	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800895e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	43db      	mvns	r3, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4013      	ands	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	4313      	orrs	r3, r2
 8008982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	43db      	mvns	r3, r3
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	4013      	ands	r3, r2
 800899a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	43db      	mvns	r3, r3
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	4013      	ands	r3, r2
 80089c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	3301      	adds	r3, #1
 80089e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f ae63 	bne.w	80086bc <HAL_GPIO_Init+0x14>
  }
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3724      	adds	r7, #36	; 0x24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	58000400 	.word	0x58000400

08008a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	807b      	strh	r3, [r7, #2]
 8008a14:	4613      	mov	r3, r2
 8008a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a18:	787b      	ldrb	r3, [r7, #1]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a1e:	887a      	ldrh	r2, [r7, #2]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a24:	e003      	b.n	8008a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a26:	887b      	ldrh	r3, [r7, #2]
 8008a28:	041a      	lsls	r2, r3, #16
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	619a      	str	r2, [r3, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	4603      	mov	r3, r0
 8008a42:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a58:	88fb      	ldrh	r3, [r7, #6]
 8008a5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fa fe5d 	bl	8003720 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a78:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d00a      	beq.n	8008a9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a84:	4b16      	ldr	r3, [pc, #88]	; (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d001      	beq.n	8008a96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e01f      	b.n	8008ad6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e01d      	b.n	8008ad6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f023 0207 	bic.w	r2, r3, #7
 8008aa2:	490f      	ldr	r1, [pc, #60]	; (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008aaa:	f7fc fc6d 	bl	8005388 <HAL_GetTick>
 8008aae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ab0:	e009      	b.n	8008ac6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008ab2:	f7fc fc69 	bl	8005388 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ac0:	d901      	bls.n	8008ac6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e007      	b.n	8008ad6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ac6:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ad2:	d1ee      	bne.n	8008ab2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	58024800 	.word	0x58024800

08008ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08c      	sub	sp, #48	; 0x30
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f000 bc1c 	b.w	8009330 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8087 	beq.w	8008c14 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b06:	4b9e      	ldr	r3, [pc, #632]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b10:	4b9b      	ldr	r3, [pc, #620]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d007      	beq.n	8008b2c <HAL_RCC_OscConfig+0x48>
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	2b18      	cmp	r3, #24
 8008b20:	d110      	bne.n	8008b44 <HAL_RCC_OscConfig+0x60>
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d10b      	bne.n	8008b44 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b2c:	4b94      	ldr	r3, [pc, #592]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d06c      	beq.n	8008c12 <HAL_RCC_OscConfig+0x12e>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d168      	bne.n	8008c12 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e3f5      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4c:	d106      	bne.n	8008b5c <HAL_RCC_OscConfig+0x78>
 8008b4e:	4b8c      	ldr	r3, [pc, #560]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a8b      	ldr	r2, [pc, #556]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	e02e      	b.n	8008bba <HAL_RCC_OscConfig+0xd6>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10c      	bne.n	8008b7e <HAL_RCC_OscConfig+0x9a>
 8008b64:	4b86      	ldr	r3, [pc, #536]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a85      	ldr	r2, [pc, #532]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	4b83      	ldr	r3, [pc, #524]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a82      	ldr	r2, [pc, #520]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	e01d      	b.n	8008bba <HAL_RCC_OscConfig+0xd6>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b86:	d10c      	bne.n	8008ba2 <HAL_RCC_OscConfig+0xbe>
 8008b88:	4b7d      	ldr	r3, [pc, #500]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a7c      	ldr	r2, [pc, #496]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	4b7a      	ldr	r3, [pc, #488]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a79      	ldr	r2, [pc, #484]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e00b      	b.n	8008bba <HAL_RCC_OscConfig+0xd6>
 8008ba2:	4b77      	ldr	r3, [pc, #476]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a76      	ldr	r2, [pc, #472]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	4b74      	ldr	r3, [pc, #464]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a73      	ldr	r2, [pc, #460]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d013      	beq.n	8008bea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc2:	f7fc fbe1 	bl	8005388 <HAL_GetTick>
 8008bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bca:	f7fc fbdd 	bl	8005388 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b64      	cmp	r3, #100	; 0x64
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e3a9      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bdc:	4b68      	ldr	r3, [pc, #416]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0f0      	beq.n	8008bca <HAL_RCC_OscConfig+0xe6>
 8008be8:	e014      	b.n	8008c14 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bea:	f7fc fbcd 	bl	8005388 <HAL_GetTick>
 8008bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bf0:	e008      	b.n	8008c04 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bf2:	f7fc fbc9 	bl	8005388 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b64      	cmp	r3, #100	; 0x64
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e395      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c04:	4b5e      	ldr	r3, [pc, #376]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f0      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x10e>
 8008c10:	e000      	b.n	8008c14 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80ca 	beq.w	8008db6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c22:	4b57      	ldr	r3, [pc, #348]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c2a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c2c:	4b54      	ldr	r3, [pc, #336]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <HAL_RCC_OscConfig+0x164>
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	2b18      	cmp	r3, #24
 8008c3c:	d156      	bne.n	8008cec <HAL_RCC_OscConfig+0x208>
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d151      	bne.n	8008cec <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c48:	4b4d      	ldr	r3, [pc, #308]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <HAL_RCC_OscConfig+0x17c>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e367      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c60:	4b47      	ldr	r3, [pc, #284]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f023 0219 	bic.w	r2, r3, #25
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	4944      	ldr	r1, [pc, #272]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c72:	f7fc fb89 	bl	8005388 <HAL_GetTick>
 8008c76:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c78:	e008      	b.n	8008c8c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c7a:	f7fc fb85 	bl	8005388 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e351      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c8c:	4b3c      	ldr	r3, [pc, #240]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0f0      	beq.n	8008c7a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c98:	f7fc fba6 	bl	80053e8 <HAL_GetREVID>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d817      	bhi.n	8008cd6 <HAL_RCC_OscConfig+0x1f2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b40      	cmp	r3, #64	; 0x40
 8008cac:	d108      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x1dc>
 8008cae:	4b34      	ldr	r3, [pc, #208]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008cb6:	4a32      	ldr	r2, [pc, #200]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cbe:	e07a      	b.n	8008db6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc0:	4b2f      	ldr	r3, [pc, #188]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	031b      	lsls	r3, r3, #12
 8008cce:	492c      	ldr	r1, [pc, #176]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cd4:	e06f      	b.n	8008db6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd6:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	061b      	lsls	r3, r3, #24
 8008ce4:	4926      	ldr	r1, [pc, #152]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cea:	e064      	b.n	8008db6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d047      	beq.n	8008d84 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cf4:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f023 0219 	bic.w	r2, r3, #25
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	491f      	ldr	r1, [pc, #124]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d06:	f7fc fb3f 	bl	8005388 <HAL_GetTick>
 8008d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d0c:	e008      	b.n	8008d20 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d0e:	f7fc fb3b 	bl	8005388 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d901      	bls.n	8008d20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e307      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d20:	4b17      	ldr	r3, [pc, #92]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0f0      	beq.n	8008d0e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d2c:	f7fc fb5c 	bl	80053e8 <HAL_GetREVID>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d817      	bhi.n	8008d6a <HAL_RCC_OscConfig+0x286>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	2b40      	cmp	r3, #64	; 0x40
 8008d40:	d108      	bne.n	8008d54 <HAL_RCC_OscConfig+0x270>
 8008d42:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d4a:	4a0d      	ldr	r2, [pc, #52]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d50:	6053      	str	r3, [r2, #4]
 8008d52:	e030      	b.n	8008db6 <HAL_RCC_OscConfig+0x2d2>
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	031b      	lsls	r3, r3, #12
 8008d62:	4907      	ldr	r1, [pc, #28]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	604b      	str	r3, [r1, #4]
 8008d68:	e025      	b.n	8008db6 <HAL_RCC_OscConfig+0x2d2>
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	061b      	lsls	r3, r3, #24
 8008d78:	4901      	ldr	r1, [pc, #4]	; (8008d80 <HAL_RCC_OscConfig+0x29c>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	604b      	str	r3, [r1, #4]
 8008d7e:	e01a      	b.n	8008db6 <HAL_RCC_OscConfig+0x2d2>
 8008d80:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d84:	4b9e      	ldr	r3, [pc, #632]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a9d      	ldr	r2, [pc, #628]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008d8a:	f023 0301 	bic.w	r3, r3, #1
 8008d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7fc fafa 	bl	8005388 <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d98:	f7fc faf6 	bl	8005388 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e2c2      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008daa:	4b95      	ldr	r3, [pc, #596]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 80a9 	beq.w	8008f16 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc4:	4b8e      	ldr	r3, [pc, #568]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dce:	4b8c      	ldr	r3, [pc, #560]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	2b08      	cmp	r3, #8
 8008dd8:	d007      	beq.n	8008dea <HAL_RCC_OscConfig+0x306>
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	2b18      	cmp	r3, #24
 8008dde:	d13a      	bne.n	8008e56 <HAL_RCC_OscConfig+0x372>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d135      	bne.n	8008e56 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dea:	4b85      	ldr	r3, [pc, #532]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_RCC_OscConfig+0x31e>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	d001      	beq.n	8008e02 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e296      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e02:	f7fc faf1 	bl	80053e8 <HAL_GetREVID>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d817      	bhi.n	8008e40 <HAL_RCC_OscConfig+0x35c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d108      	bne.n	8008e2a <HAL_RCC_OscConfig+0x346>
 8008e18:	4b79      	ldr	r3, [pc, #484]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e20:	4a77      	ldr	r2, [pc, #476]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e26:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e28:	e075      	b.n	8008f16 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e2a:	4b75      	ldr	r3, [pc, #468]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	069b      	lsls	r3, r3, #26
 8008e38:	4971      	ldr	r1, [pc, #452]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e3e:	e06a      	b.n	8008f16 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e40:	4b6f      	ldr	r3, [pc, #444]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	061b      	lsls	r3, r3, #24
 8008e4e:	496c      	ldr	r1, [pc, #432]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e54:	e05f      	b.n	8008f16 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d042      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e5e:	4b68      	ldr	r3, [pc, #416]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a67      	ldr	r2, [pc, #412]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6a:	f7fc fa8d 	bl	8005388 <HAL_GetTick>
 8008e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e70:	e008      	b.n	8008e84 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008e72:	f7fc fa89 	bl	8005388 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e255      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e84:	4b5e      	ldr	r3, [pc, #376]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f0      	beq.n	8008e72 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e90:	f7fc faaa 	bl	80053e8 <HAL_GetREVID>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d817      	bhi.n	8008ece <HAL_RCC_OscConfig+0x3ea>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	d108      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x3d4>
 8008ea6:	4b56      	ldr	r3, [pc, #344]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008eae:	4a54      	ldr	r2, [pc, #336]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eb4:	6053      	str	r3, [r2, #4]
 8008eb6:	e02e      	b.n	8008f16 <HAL_RCC_OscConfig+0x432>
 8008eb8:	4b51      	ldr	r3, [pc, #324]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	069b      	lsls	r3, r3, #26
 8008ec6:	494e      	ldr	r1, [pc, #312]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	604b      	str	r3, [r1, #4]
 8008ecc:	e023      	b.n	8008f16 <HAL_RCC_OscConfig+0x432>
 8008ece:	4b4c      	ldr	r3, [pc, #304]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	061b      	lsls	r3, r3, #24
 8008edc:	4948      	ldr	r1, [pc, #288]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60cb      	str	r3, [r1, #12]
 8008ee2:	e018      	b.n	8008f16 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ee4:	4b46      	ldr	r3, [pc, #280]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a45      	ldr	r2, [pc, #276]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7fc fa4a 	bl	8005388 <HAL_GetTick>
 8008ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ef8:	f7fc fa46 	bl	8005388 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e212      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f0a:	4b3d      	ldr	r3, [pc, #244]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f0      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d036      	beq.n	8008f90 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d019      	beq.n	8008f5e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f2a:	4b35      	ldr	r3, [pc, #212]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f2e:	4a34      	ldr	r2, [pc, #208]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f30:	f043 0301 	orr.w	r3, r3, #1
 8008f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f36:	f7fc fa27 	bl	8005388 <HAL_GetTick>
 8008f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f3e:	f7fc fa23 	bl	8005388 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e1ef      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f50:	4b2b      	ldr	r3, [pc, #172]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x45a>
 8008f5c:	e018      	b.n	8008f90 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f5e:	4b28      	ldr	r3, [pc, #160]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f62:	4a27      	ldr	r2, [pc, #156]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f6a:	f7fc fa0d 	bl	8005388 <HAL_GetTick>
 8008f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f70:	e008      	b.n	8008f84 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f72:	f7fc fa09 	bl	8005388 <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d901      	bls.n	8008f84 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e1d5      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f84:	4b1e      	ldr	r3, [pc, #120]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1f0      	bne.n	8008f72 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d039      	beq.n	8009010 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d019      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fa4:	4b16      	ldr	r3, [pc, #88]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a15      	ldr	r2, [pc, #84]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fb0:	f7fc f9ea 	bl	8005388 <HAL_GetTick>
 8008fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fb8:	f7fc f9e6 	bl	8005388 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e1b2      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0f0      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x4d4>
 8008fd6:	e01b      	b.n	8009010 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a08      	ldr	r2, [pc, #32]	; (8009000 <HAL_RCC_OscConfig+0x51c>)
 8008fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fe4:	f7fc f9d0 	bl	8005388 <HAL_GetTick>
 8008fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fea:	e00b      	b.n	8009004 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fec:	f7fc f9cc 	bl	8005388 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d904      	bls.n	8009004 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e198      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
 8008ffe:	bf00      	nop
 8009000:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009004:	4ba3      	ldr	r3, [pc, #652]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1ed      	bne.n	8008fec <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8081 	beq.w	8009120 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800901e:	4b9e      	ldr	r3, [pc, #632]	; (8009298 <HAL_RCC_OscConfig+0x7b4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a9d      	ldr	r2, [pc, #628]	; (8009298 <HAL_RCC_OscConfig+0x7b4>)
 8009024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800902a:	f7fc f9ad 	bl	8005388 <HAL_GetTick>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009032:	f7fc f9a9 	bl	8005388 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b64      	cmp	r3, #100	; 0x64
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e175      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009044:	4b94      	ldr	r3, [pc, #592]	; (8009298 <HAL_RCC_OscConfig+0x7b4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0f0      	beq.n	8009032 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d106      	bne.n	8009066 <HAL_RCC_OscConfig+0x582>
 8009058:	4b8e      	ldr	r3, [pc, #568]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800905a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905c:	4a8d      	ldr	r2, [pc, #564]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	6713      	str	r3, [r2, #112]	; 0x70
 8009064:	e02d      	b.n	80090c2 <HAL_RCC_OscConfig+0x5de>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10c      	bne.n	8009088 <HAL_RCC_OscConfig+0x5a4>
 800906e:	4b89      	ldr	r3, [pc, #548]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009072:	4a88      	ldr	r2, [pc, #544]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	6713      	str	r3, [r2, #112]	; 0x70
 800907a:	4b86      	ldr	r3, [pc, #536]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907e:	4a85      	ldr	r2, [pc, #532]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009080:	f023 0304 	bic.w	r3, r3, #4
 8009084:	6713      	str	r3, [r2, #112]	; 0x70
 8009086:	e01c      	b.n	80090c2 <HAL_RCC_OscConfig+0x5de>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b05      	cmp	r3, #5
 800908e:	d10c      	bne.n	80090aa <HAL_RCC_OscConfig+0x5c6>
 8009090:	4b80      	ldr	r3, [pc, #512]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009094:	4a7f      	ldr	r2, [pc, #508]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009096:	f043 0304 	orr.w	r3, r3, #4
 800909a:	6713      	str	r3, [r2, #112]	; 0x70
 800909c:	4b7d      	ldr	r3, [pc, #500]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a0:	4a7c      	ldr	r2, [pc, #496]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80090a2:	f043 0301 	orr.w	r3, r3, #1
 80090a6:	6713      	str	r3, [r2, #112]	; 0x70
 80090a8:	e00b      	b.n	80090c2 <HAL_RCC_OscConfig+0x5de>
 80090aa:	4b7a      	ldr	r3, [pc, #488]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	4a79      	ldr	r2, [pc, #484]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	6713      	str	r3, [r2, #112]	; 0x70
 80090b6:	4b77      	ldr	r3, [pc, #476]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	4a76      	ldr	r2, [pc, #472]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80090bc:	f023 0304 	bic.w	r3, r3, #4
 80090c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d015      	beq.n	80090f6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ca:	f7fc f95d 	bl	8005388 <HAL_GetTick>
 80090ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090d0:	e00a      	b.n	80090e8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090d2:	f7fc f959 	bl	8005388 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d901      	bls.n	80090e8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e123      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090e8:	4b6a      	ldr	r3, [pc, #424]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0ee      	beq.n	80090d2 <HAL_RCC_OscConfig+0x5ee>
 80090f4:	e014      	b.n	8009120 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f6:	f7fc f947 	bl	8005388 <HAL_GetTick>
 80090fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090fc:	e00a      	b.n	8009114 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090fe:	f7fc f943 	bl	8005388 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	f241 3288 	movw	r2, #5000	; 0x1388
 800910c:	4293      	cmp	r3, r2
 800910e:	d901      	bls.n	8009114 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e10d      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009114:	4b5f      	ldr	r3, [pc, #380]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1ee      	bne.n	80090fe <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8102 	beq.w	800932e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800912a:	4b5a      	ldr	r3, [pc, #360]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009132:	2b18      	cmp	r3, #24
 8009134:	f000 80bd 	beq.w	80092b2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b02      	cmp	r3, #2
 800913e:	f040 8095 	bne.w	800926c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009142:	4b54      	ldr	r3, [pc, #336]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a53      	ldr	r2, [pc, #332]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800914c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914e:	f7fc f91b 	bl	8005388 <HAL_GetTick>
 8009152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009154:	e008      	b.n	8009168 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009156:	f7fc f917 	bl	8005388 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d901      	bls.n	8009168 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e0e3      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009168:	4b4a      	ldr	r3, [pc, #296]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1f0      	bne.n	8009156 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009174:	4b47      	ldr	r3, [pc, #284]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009178:	4b48      	ldr	r3, [pc, #288]	; (800929c <HAL_RCC_OscConfig+0x7b8>)
 800917a:	4013      	ands	r3, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009184:	0112      	lsls	r2, r2, #4
 8009186:	430a      	orrs	r2, r1
 8009188:	4942      	ldr	r1, [pc, #264]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800918a:	4313      	orrs	r3, r2
 800918c:	628b      	str	r3, [r1, #40]	; 0x28
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	3b01      	subs	r3, #1
 8009194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919c:	3b01      	subs	r3, #1
 800919e:	025b      	lsls	r3, r3, #9
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	3b01      	subs	r3, #1
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b6:	3b01      	subs	r3, #1
 80091b8:	061b      	lsls	r3, r3, #24
 80091ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091be:	4935      	ldr	r1, [pc, #212]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80091c4:	4b33      	ldr	r3, [pc, #204]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	4a32      	ldr	r2, [pc, #200]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091ca:	f023 0301 	bic.w	r3, r3, #1
 80091ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091d0:	4b30      	ldr	r3, [pc, #192]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <HAL_RCC_OscConfig+0x7bc>)
 80091d6:	4013      	ands	r3, r2
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091dc:	00d2      	lsls	r2, r2, #3
 80091de:	492d      	ldr	r1, [pc, #180]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091e4:	4b2b      	ldr	r3, [pc, #172]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	f023 020c 	bic.w	r2, r3, #12
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	4928      	ldr	r1, [pc, #160]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091f6:	4b27      	ldr	r3, [pc, #156]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	f023 0202 	bic.w	r2, r3, #2
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009202:	4924      	ldr	r1, [pc, #144]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009204:	4313      	orrs	r3, r2
 8009206:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009208:	4b22      	ldr	r3, [pc, #136]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	4a21      	ldr	r2, [pc, #132]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800920e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009214:	4b1f      	ldr	r3, [pc, #124]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	4a1e      	ldr	r2, [pc, #120]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800921a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009220:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	4a1b      	ldr	r2, [pc, #108]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009226:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800922a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800922c:	4b19      	ldr	r3, [pc, #100]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4a18      	ldr	r2, [pc, #96]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009238:	4b16      	ldr	r3, [pc, #88]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a15      	ldr	r2, [pc, #84]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800923e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009244:	f7fc f8a0 	bl	8005388 <HAL_GetTick>
 8009248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800924c:	f7fc f89c 	bl	8005388 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e068      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800925e:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f0      	beq.n	800924c <HAL_RCC_OscConfig+0x768>
 800926a:	e060      	b.n	800932e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a08      	ldr	r2, [pc, #32]	; (8009294 <HAL_RCC_OscConfig+0x7b0>)
 8009272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009278:	f7fc f886 	bl	8005388 <HAL_GetTick>
 800927c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800927e:	e011      	b.n	80092a4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009280:	f7fc f882 	bl	8005388 <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	2b02      	cmp	r3, #2
 800928c:	d90a      	bls.n	80092a4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e04e      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
 8009292:	bf00      	nop
 8009294:	58024400 	.word	0x58024400
 8009298:	58024800 	.word	0x58024800
 800929c:	fffffc0c 	.word	0xfffffc0c
 80092a0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092a4:	4b24      	ldr	r3, [pc, #144]	; (8009338 <HAL_RCC_OscConfig+0x854>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e7      	bne.n	8009280 <HAL_RCC_OscConfig+0x79c>
 80092b0:	e03d      	b.n	800932e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092b2:	4b21      	ldr	r3, [pc, #132]	; (8009338 <HAL_RCC_OscConfig+0x854>)
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092b8:	4b1f      	ldr	r3, [pc, #124]	; (8009338 <HAL_RCC_OscConfig+0x854>)
 80092ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d031      	beq.n	800932a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f003 0203 	and.w	r2, r3, #3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d12a      	bne.n	800932a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	091b      	lsrs	r3, r3, #4
 80092d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d122      	bne.n	800932a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d11a      	bne.n	800932a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	0a5b      	lsrs	r3, r3, #9
 80092f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009300:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009302:	429a      	cmp	r2, r3
 8009304:	d111      	bne.n	800932a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009314:	429a      	cmp	r2, r3
 8009316:	d108      	bne.n	800932a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	0e1b      	lsrs	r3, r3, #24
 800931c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009324:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009326:	429a      	cmp	r2, r3
 8009328:	d001      	beq.n	800932e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3730      	adds	r7, #48	; 0x30
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	58024400 	.word	0x58024400

0800933c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e19c      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009350:	4b8a      	ldr	r3, [pc, #552]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d910      	bls.n	8009380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800935e:	4b87      	ldr	r3, [pc, #540]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f023 020f 	bic.w	r2, r3, #15
 8009366:	4985      	ldr	r1, [pc, #532]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	4313      	orrs	r3, r2
 800936c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800936e:	4b83      	ldr	r3, [pc, #524]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d001      	beq.n	8009380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e184      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b00      	cmp	r3, #0
 800938a:	d010      	beq.n	80093ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	4b7b      	ldr	r3, [pc, #492]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009398:	429a      	cmp	r2, r3
 800939a:	d908      	bls.n	80093ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800939c:	4b78      	ldr	r3, [pc, #480]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	4975      	ldr	r1, [pc, #468]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d010      	beq.n	80093dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695a      	ldr	r2, [r3, #20]
 80093be:	4b70      	ldr	r3, [pc, #448]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d908      	bls.n	80093dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093ca:	4b6d      	ldr	r3, [pc, #436]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	496a      	ldr	r1, [pc, #424]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d010      	beq.n	800940a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	4b64      	ldr	r3, [pc, #400]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d908      	bls.n	800940a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093f8:	4b61      	ldr	r3, [pc, #388]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	495e      	ldr	r1, [pc, #376]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009406:	4313      	orrs	r3, r2
 8009408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0320 	and.w	r3, r3, #32
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69da      	ldr	r2, [r3, #28]
 800941a:	4b59      	ldr	r3, [pc, #356]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009422:	429a      	cmp	r2, r3
 8009424:	d908      	bls.n	8009438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009426:	4b56      	ldr	r3, [pc, #344]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	4953      	ldr	r1, [pc, #332]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009434:	4313      	orrs	r3, r2
 8009436:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	4b4d      	ldr	r3, [pc, #308]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	429a      	cmp	r2, r3
 8009452:	d908      	bls.n	8009466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009454:	4b4a      	ldr	r3, [pc, #296]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	f023 020f 	bic.w	r2, r3, #15
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	4947      	ldr	r1, [pc, #284]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009462:	4313      	orrs	r3, r2
 8009464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d055      	beq.n	800951e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009472:	4b43      	ldr	r3, [pc, #268]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	4940      	ldr	r1, [pc, #256]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009480:	4313      	orrs	r3, r2
 8009482:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d107      	bne.n	800949c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800948c:	4b3c      	ldr	r3, [pc, #240]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d121      	bne.n	80094dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e0f6      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d107      	bne.n	80094b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094a4:	4b36      	ldr	r3, [pc, #216]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d115      	bne.n	80094dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e0ea      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d107      	bne.n	80094cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094bc:	4b30      	ldr	r3, [pc, #192]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d109      	bne.n	80094dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0de      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094cc:	4b2c      	ldr	r3, [pc, #176]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e0d6      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094dc:	4b28      	ldr	r3, [pc, #160]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f023 0207 	bic.w	r2, r3, #7
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	4925      	ldr	r1, [pc, #148]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ee:	f7fb ff4b 	bl	8005388 <HAL_GetTick>
 80094f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094f4:	e00a      	b.n	800950c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094f6:	f7fb ff47 	bl	8005388 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	f241 3288 	movw	r2, #5000	; 0x1388
 8009504:	4293      	cmp	r3, r2
 8009506:	d901      	bls.n	800950c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e0be      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800950c:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	429a      	cmp	r2, r3
 800951c:	d1eb      	bne.n	80094f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d010      	beq.n	800954c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	429a      	cmp	r2, r3
 8009538:	d208      	bcs.n	800954c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800953a:	4b11      	ldr	r3, [pc, #68]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f023 020f 	bic.w	r2, r3, #15
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	490e      	ldr	r1, [pc, #56]	; (8009580 <HAL_RCC_ClockConfig+0x244>)
 8009548:	4313      	orrs	r3, r2
 800954a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 030f 	and.w	r3, r3, #15
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d214      	bcs.n	8009584 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800955a:	4b08      	ldr	r3, [pc, #32]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f023 020f 	bic.w	r2, r3, #15
 8009562:	4906      	ldr	r1, [pc, #24]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	4313      	orrs	r3, r2
 8009568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800956a:	4b04      	ldr	r3, [pc, #16]	; (800957c <HAL_RCC_ClockConfig+0x240>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d005      	beq.n	8009584 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e086      	b.n	800968a <HAL_RCC_ClockConfig+0x34e>
 800957c:	52002000 	.word	0x52002000
 8009580:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d010      	beq.n	80095b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	691a      	ldr	r2, [r3, #16]
 8009594:	4b3f      	ldr	r3, [pc, #252]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800959c:	429a      	cmp	r2, r3
 800959e:	d208      	bcs.n	80095b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095a0:	4b3c      	ldr	r3, [pc, #240]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	4939      	ldr	r1, [pc, #228]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d010      	beq.n	80095e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	4b34      	ldr	r3, [pc, #208]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d208      	bcs.n	80095e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095ce:	4b31      	ldr	r3, [pc, #196]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	492e      	ldr	r1, [pc, #184]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0310 	and.w	r3, r3, #16
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d010      	beq.n	800960e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	4b28      	ldr	r3, [pc, #160]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d208      	bcs.n	800960e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095fc:	4b25      	ldr	r3, [pc, #148]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	4922      	ldr	r1, [pc, #136]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 800960a:	4313      	orrs	r3, r2
 800960c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b00      	cmp	r3, #0
 8009618:	d010      	beq.n	800963c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009626:	429a      	cmp	r2, r3
 8009628:	d208      	bcs.n	800963c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800962a:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	4917      	ldr	r1, [pc, #92]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 8009638:	4313      	orrs	r3, r2
 800963a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800963c:	f000 f834 	bl	80096a8 <HAL_RCC_GetSysClockFreq>
 8009640:	4602      	mov	r2, r0
 8009642:	4b14      	ldr	r3, [pc, #80]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	f003 030f 	and.w	r3, r3, #15
 800964c:	4912      	ldr	r1, [pc, #72]	; (8009698 <HAL_RCC_ClockConfig+0x35c>)
 800964e:	5ccb      	ldrb	r3, [r1, r3]
 8009650:	f003 031f 	and.w	r3, r3, #31
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
 8009658:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800965a:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <HAL_RCC_ClockConfig+0x358>)
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	4a0d      	ldr	r2, [pc, #52]	; (8009698 <HAL_RCC_ClockConfig+0x35c>)
 8009664:	5cd3      	ldrb	r3, [r2, r3]
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	fa22 f303 	lsr.w	r3, r2, r3
 8009670:	4a0a      	ldr	r2, [pc, #40]	; (800969c <HAL_RCC_ClockConfig+0x360>)
 8009672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009674:	4a0a      	ldr	r2, [pc, #40]	; (80096a0 <HAL_RCC_ClockConfig+0x364>)
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800967a:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <HAL_RCC_ClockConfig+0x368>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4618      	mov	r0, r3
 8009680:	f7fb fe38 	bl	80052f4 <HAL_InitTick>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	58024400 	.word	0x58024400
 8009698:	08011bb8 	.word	0x08011bb8
 800969c:	24000018 	.word	0x24000018
 80096a0:	24000014 	.word	0x24000014
 80096a4:	2400001c 	.word	0x2400001c

080096a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b089      	sub	sp, #36	; 0x24
 80096ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096ae:	4bb3      	ldr	r3, [pc, #716]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096b6:	2b18      	cmp	r3, #24
 80096b8:	f200 8155 	bhi.w	8009966 <HAL_RCC_GetSysClockFreq+0x2be>
 80096bc:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80096be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c2:	bf00      	nop
 80096c4:	08009729 	.word	0x08009729
 80096c8:	08009967 	.word	0x08009967
 80096cc:	08009967 	.word	0x08009967
 80096d0:	08009967 	.word	0x08009967
 80096d4:	08009967 	.word	0x08009967
 80096d8:	08009967 	.word	0x08009967
 80096dc:	08009967 	.word	0x08009967
 80096e0:	08009967 	.word	0x08009967
 80096e4:	0800974f 	.word	0x0800974f
 80096e8:	08009967 	.word	0x08009967
 80096ec:	08009967 	.word	0x08009967
 80096f0:	08009967 	.word	0x08009967
 80096f4:	08009967 	.word	0x08009967
 80096f8:	08009967 	.word	0x08009967
 80096fc:	08009967 	.word	0x08009967
 8009700:	08009967 	.word	0x08009967
 8009704:	08009755 	.word	0x08009755
 8009708:	08009967 	.word	0x08009967
 800970c:	08009967 	.word	0x08009967
 8009710:	08009967 	.word	0x08009967
 8009714:	08009967 	.word	0x08009967
 8009718:	08009967 	.word	0x08009967
 800971c:	08009967 	.word	0x08009967
 8009720:	08009967 	.word	0x08009967
 8009724:	0800975b 	.word	0x0800975b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009728:	4b94      	ldr	r3, [pc, #592]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009734:	4b91      	ldr	r3, [pc, #580]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	08db      	lsrs	r3, r3, #3
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	4a90      	ldr	r2, [pc, #576]	; (8009980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009740:	fa22 f303 	lsr.w	r3, r2, r3
 8009744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009746:	e111      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009748:	4b8d      	ldr	r3, [pc, #564]	; (8009980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800974a:	61bb      	str	r3, [r7, #24]
    break;
 800974c:	e10e      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800974e:	4b8d      	ldr	r3, [pc, #564]	; (8009984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009750:	61bb      	str	r3, [r7, #24]
    break;
 8009752:	e10b      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009754:	4b8c      	ldr	r3, [pc, #560]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009756:	61bb      	str	r3, [r7, #24]
    break;
 8009758:	e108      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800975a:	4b88      	ldr	r3, [pc, #544]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009764:	4b85      	ldr	r3, [pc, #532]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	091b      	lsrs	r3, r3, #4
 800976a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800976e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009770:	4b82      	ldr	r3, [pc, #520]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800977a:	4b80      	ldr	r3, [pc, #512]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800977c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977e:	08db      	lsrs	r3, r3, #3
 8009780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009792:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80e1 	beq.w	8009960 <HAL_RCC_GetSysClockFreq+0x2b8>
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	f000 8083 	beq.w	80098ac <HAL_RCC_GetSysClockFreq+0x204>
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	f200 80a1 	bhi.w	80098f0 <HAL_RCC_GetSysClockFreq+0x248>
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <HAL_RCC_GetSysClockFreq+0x114>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d056      	beq.n	8009868 <HAL_RCC_GetSysClockFreq+0x1c0>
 80097ba:	e099      	b.n	80098f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097bc:	4b6f      	ldr	r3, [pc, #444]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d02d      	beq.n	8009824 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097c8:	4b6c      	ldr	r3, [pc, #432]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	08db      	lsrs	r3, r3, #3
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	4a6b      	ldr	r2, [pc, #428]	; (8009980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097d4:	fa22 f303 	lsr.w	r3, r2, r3
 80097d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097f2:	4b62      	ldr	r3, [pc, #392]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009802:	ed97 6a02 	vldr	s12, [r7, #8]
 8009806:	eddf 5a61 	vldr	s11, [pc, #388]	; 800998c <HAL_RCC_GetSysClockFreq+0x2e4>
 800980a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800980e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800981a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800981e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009822:	e087      	b.n	8009934 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009990 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009836:	4b51      	ldr	r3, [pc, #324]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009846:	ed97 6a02 	vldr	s12, [r7, #8]
 800984a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800998c <HAL_RCC_GetSysClockFreq+0x2e4>
 800984e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800985a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800985e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009866:	e065      	b.n	8009934 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009872:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009994 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800987a:	4b40      	ldr	r3, [pc, #256]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800988a:	ed97 6a02 	vldr	s12, [r7, #8]
 800988e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800998c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800989a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800989e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098aa:	e043      	b.n	8009934 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009998 <HAL_RCC_GetSysClockFreq+0x2f0>
 80098ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098be:	4b2f      	ldr	r3, [pc, #188]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80098d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800998c <HAL_RCC_GetSysClockFreq+0x2e4>
 80098d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ee:	e021      	b.n	8009934 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009994 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009902:	4b1e      	ldr	r3, [pc, #120]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009912:	ed97 6a02 	vldr	s12, [r7, #8]
 8009916:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800998c <HAL_RCC_GetSysClockFreq+0x2e4>
 800991a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009932:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009934:	4b11      	ldr	r3, [pc, #68]	; (800997c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009938:	0a5b      	lsrs	r3, r3, #9
 800993a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993e:	3301      	adds	r3, #1
 8009940:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	ee07 3a90 	vmov	s15, r3
 8009948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800994c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009958:	ee17 3a90 	vmov	r3, s15
 800995c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800995e:	e005      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	61bb      	str	r3, [r7, #24]
    break;
 8009964:	e002      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009966:	4b07      	ldr	r3, [pc, #28]	; (8009984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009968:	61bb      	str	r3, [r7, #24]
    break;
 800996a:	bf00      	nop
  }

  return sysclockfreq;
 800996c:	69bb      	ldr	r3, [r7, #24]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3724      	adds	r7, #36	; 0x24
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	58024400 	.word	0x58024400
 8009980:	03d09000 	.word	0x03d09000
 8009984:	003d0900 	.word	0x003d0900
 8009988:	02dc6c00 	.word	0x02dc6c00
 800998c:	46000000 	.word	0x46000000
 8009990:	4c742400 	.word	0x4c742400
 8009994:	4a742400 	.word	0x4a742400
 8009998:	4c371b00 	.word	0x4c371b00

0800999c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099a2:	f7ff fe81 	bl	80096a8 <HAL_RCC_GetSysClockFreq>
 80099a6:	4602      	mov	r2, r0
 80099a8:	4b10      	ldr	r3, [pc, #64]	; (80099ec <HAL_RCC_GetHCLKFreq+0x50>)
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	f003 030f 	and.w	r3, r3, #15
 80099b2:	490f      	ldr	r1, [pc, #60]	; (80099f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80099b4:	5ccb      	ldrb	r3, [r1, r3]
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	fa22 f303 	lsr.w	r3, r2, r3
 80099be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <HAL_RCC_GetHCLKFreq+0x50>)
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80099ca:	5cd3      	ldrb	r3, [r2, r3]
 80099cc:	f003 031f 	and.w	r3, r3, #31
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	fa22 f303 	lsr.w	r3, r2, r3
 80099d6:	4a07      	ldr	r2, [pc, #28]	; (80099f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80099d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099da:	4a07      	ldr	r2, [pc, #28]	; (80099f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80099e0:	4b04      	ldr	r3, [pc, #16]	; (80099f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80099e2:	681b      	ldr	r3, [r3, #0]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	58024400 	.word	0x58024400
 80099f0:	08011bb8 	.word	0x08011bb8
 80099f4:	24000018 	.word	0x24000018
 80099f8:	24000014 	.word	0x24000014

080099fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a00:	f7ff ffcc 	bl	800999c <HAL_RCC_GetHCLKFreq>
 8009a04:	4602      	mov	r2, r0
 8009a06:	4b06      	ldr	r3, [pc, #24]	; (8009a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	091b      	lsrs	r3, r3, #4
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	4904      	ldr	r1, [pc, #16]	; (8009a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a12:	5ccb      	ldrb	r3, [r1, r3]
 8009a14:	f003 031f 	and.w	r3, r3, #31
 8009a18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	58024400 	.word	0x58024400
 8009a24:	08011bb8 	.word	0x08011bb8

08009a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a2c:	f7ff ffb6 	bl	800999c <HAL_RCC_GetHCLKFreq>
 8009a30:	4602      	mov	r2, r0
 8009a32:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	0a1b      	lsrs	r3, r3, #8
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a3e:	5ccb      	ldrb	r3, [r1, r3]
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	08011bb8 	.word	0x08011bb8

08009a54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a60:	2300      	movs	r3, #0
 8009a62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d03f      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a78:	d02a      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009a7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a7e:	d824      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a84:	d018      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a8a:	d81e      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a94:	d007      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009a96:	e018      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a98:	4bab      	ldr	r3, [pc, #684]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4aaa      	ldr	r2, [pc, #680]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009aa4:	e015      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	2102      	movs	r1, #2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f001 f9cf 	bl	800ae50 <RCCEx_PLL2_Config>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ab6:	e00c      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3324      	adds	r3, #36	; 0x24
 8009abc:	2102      	movs	r1, #2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 fa78 	bl	800afb4 <RCCEx_PLL3_Config>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ac8:	e003      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	75fb      	strb	r3, [r7, #23]
      break;
 8009ace:	e000      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d109      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ad8:	4b9b      	ldr	r3, [pc, #620]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae4:	4998      	ldr	r1, [pc, #608]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8009aea:	e001      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d03d      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d826      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009b04:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b21 	.word	0x08009b21
 8009b10:	08009b2f 	.word	0x08009b2f
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	08009b59 	.word	0x08009b59
 8009b1c:	08009b59 	.word	0x08009b59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b20:	4b89      	ldr	r3, [pc, #548]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	4a88      	ldr	r2, [pc, #544]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b2c:	e015      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3304      	adds	r3, #4
 8009b32:	2100      	movs	r1, #0
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 f98b 	bl	800ae50 <RCCEx_PLL2_Config>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b3e:	e00c      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3324      	adds	r3, #36	; 0x24
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 fa34 	bl	800afb4 <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
      break;
 8009b56:	e000      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b60:	4b79      	ldr	r3, [pc, #484]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b64:	f023 0207 	bic.w	r2, r3, #7
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6c:	4976      	ldr	r1, [pc, #472]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	650b      	str	r3, [r1, #80]	; 0x50
 8009b72:	e001      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d042      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8c:	d02b      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b92:	d825      	bhi.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009b94:	2bc0      	cmp	r3, #192	; 0xc0
 8009b96:	d028      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009b98:	2bc0      	cmp	r3, #192	; 0xc0
 8009b9a:	d821      	bhi.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d016      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009ba0:	2b80      	cmp	r3, #128	; 0x80
 8009ba2:	d81d      	bhi.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	d007      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009bac:	e018      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bae:	4b66      	ldr	r3, [pc, #408]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb2:	4a65      	ldr	r2, [pc, #404]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009bba:	e017      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f944 	bl	800ae50 <RCCEx_PLL2_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009bcc:	e00e      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3324      	adds	r3, #36	; 0x24
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f001 f9ed 	bl	800afb4 <RCCEx_PLL3_Config>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009bde:	e005      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
      break;
 8009be4:	e002      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009be6:	bf00      	nop
 8009be8:	e000      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d109      	bne.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009bf2:	4b55      	ldr	r3, [pc, #340]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfe:	4952      	ldr	r1, [pc, #328]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	650b      	str	r3, [r1, #80]	; 0x50
 8009c04:	e001      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d049      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c20:	d030      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c26:	d82a      	bhi.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009c28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c2c:	d02c      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009c2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c32:	d824      	bhi.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c38:	d018      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c3e:	d81e      	bhi.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c48:	d007      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009c4a:	e018      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c4c:	4b3e      	ldr	r3, [pc, #248]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a3d      	ldr	r2, [pc, #244]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c58:	e017      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f001 f8f5 	bl	800ae50 <RCCEx_PLL2_Config>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009c6a:	e00e      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3324      	adds	r3, #36	; 0x24
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 f99e 	bl	800afb4 <RCCEx_PLL3_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c7c:	e005      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
      break;
 8009c82:	e002      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009c84:	bf00      	nop
 8009c86:	e000      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10a      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009c90:	4b2d      	ldr	r3, [pc, #180]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c9e:	492a      	ldr	r1, [pc, #168]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8009ca4:	e001      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d04c      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cc0:	d030      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cc6:	d82a      	bhi.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009cc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ccc:	d02c      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cd2:	d824      	bhi.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd8:	d018      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cde:	d81e      	bhi.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ce8:	d007      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009cea:	e018      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cec:	4b16      	ldr	r3, [pc, #88]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cf8:	e017      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 f8a5 	bl	800ae50 <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d0a:	e00e      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3324      	adds	r3, #36	; 0x24
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 f94e 	bl	800afb4 <RCCEx_PLL3_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d1c:	e005      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	75fb      	strb	r3, [r7, #23]
      break;
 8009d22:	e002      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009d24:	bf00      	nop
 8009d26:	e000      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10d      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d3e:	4902      	ldr	r1, [pc, #8]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	658b      	str	r3, [r1, #88]	; 0x58
 8009d44:	e004      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009d46:	bf00      	nop
 8009d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d032      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d60:	2b30      	cmp	r3, #48	; 0x30
 8009d62:	d01c      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009d64:	2b30      	cmp	r3, #48	; 0x30
 8009d66:	d817      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	d00c      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009d6c:	2b20      	cmp	r3, #32
 8009d6e:	d813      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d016      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009d74:	2b10      	cmp	r3, #16
 8009d76:	d10f      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d78:	4baf      	ldr	r3, [pc, #700]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4aae      	ldr	r2, [pc, #696]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009d84:	e00e      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	2102      	movs	r1, #2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 f85f 	bl	800ae50 <RCCEx_PLL2_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009d96:	e005      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e002      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009d9e:	bf00      	nop
 8009da0:	e000      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d109      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009daa:	4ba3      	ldr	r3, [pc, #652]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db6:	49a0      	ldr	r1, [pc, #640]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009dbc:	e001      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d047      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd6:	d030      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ddc:	d82a      	bhi.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009dde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009de2:	d02c      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009de8:	d824      	bhi.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dee:	d018      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009df4:	d81e      	bhi.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfe:	d007      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009e00:	e018      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e02:	4b8d      	ldr	r3, [pc, #564]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	4a8c      	ldr	r2, [pc, #560]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e0e:	e017      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3304      	adds	r3, #4
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f001 f81a 	bl	800ae50 <RCCEx_PLL2_Config>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e20:	e00e      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3324      	adds	r3, #36	; 0x24
 8009e26:	2100      	movs	r1, #0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 f8c3 	bl	800afb4 <RCCEx_PLL3_Config>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e32:	e005      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	75fb      	strb	r3, [r7, #23]
      break;
 8009e38:	e002      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009e46:	4b7c      	ldr	r3, [pc, #496]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e52:	4979      	ldr	r1, [pc, #484]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	650b      	str	r3, [r1, #80]	; 0x50
 8009e58:	e001      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d049      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e72:	d02e      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e78:	d828      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e7e:	d02a      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e84:	d822      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009e86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e8a:	d026      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009e8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e90:	d81c      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e96:	d010      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e9c:	d816      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01d      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea6:	d111      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	2101      	movs	r1, #1
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 ffce 	bl	800ae50 <RCCEx_PLL2_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009eb8:	e012      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3324      	adds	r3, #36	; 0x24
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f001 f877 	bl	800afb4 <RCCEx_PLL3_Config>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009eca:	e009      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed0:	e006      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009ed2:	bf00      	nop
 8009ed4:	e004      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009ed6:	bf00      	nop
 8009ed8:	e002      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009eda:	bf00      	nop
 8009edc:	e000      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ee0:	7dfb      	ldrb	r3, [r7, #23]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d109      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009ee6:	4b54      	ldr	r3, [pc, #336]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef2:	4951      	ldr	r1, [pc, #324]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	650b      	str	r3, [r1, #80]	; 0x50
 8009ef8:	e001      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d04b      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f14:	d02e      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f1a:	d828      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f20:	d02a      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f26:	d822      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f2c:	d026      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f32:	d81c      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f38:	d010      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f3e:	d816      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01d      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f48:	d111      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	2101      	movs	r1, #1
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 ff7d 	bl	800ae50 <RCCEx_PLL2_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009f5a:	e012      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	2101      	movs	r1, #1
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 f826 	bl	800afb4 <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009f6c:	e009      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
      break;
 8009f72:	e006      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009f74:	bf00      	nop
 8009f76:	e004      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009f78:	bf00      	nop
 8009f7a:	e002      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009f7c:	bf00      	nop
 8009f7e:	e000      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009f88:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f96:	4928      	ldr	r1, [pc, #160]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	658b      	str	r3, [r1, #88]	; 0x58
 8009f9c:	e001      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d02f      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb6:	d00e      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fbc:	d814      	bhi.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d015      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc6:	d10f      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc8:	4b1b      	ldr	r3, [pc, #108]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	4a1a      	ldr	r2, [pc, #104]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009fd4:	e00c      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	2101      	movs	r1, #1
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 ff37 	bl	800ae50 <RCCEx_PLL2_Config>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009fe6:	e003      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	75fb      	strb	r3, [r7, #23]
      break;
 8009fec:	e000      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d109      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ff6:	4b10      	ldr	r3, [pc, #64]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a002:	490d      	ldr	r1, [pc, #52]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a004:	4313      	orrs	r3, r2
 800a006:	650b      	str	r3, [r1, #80]	; 0x50
 800a008:	e001      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d033      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d81c      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a022:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a063 	.word	0x0800a063
 800a02c:	0800a03d 	.word	0x0800a03d
 800a030:	0800a04b 	.word	0x0800a04b
 800a034:	0800a063 	.word	0x0800a063
 800a038:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03c:	4bb8      	ldr	r3, [pc, #736]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	4ab7      	ldr	r2, [pc, #732]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a048:	e00c      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3304      	adds	r3, #4
 800a04e:	2102      	movs	r1, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fefd 	bl	800ae50 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a05a:	e003      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
      break;
 800a060:	e000      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a062:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a06a:	4bad      	ldr	r3, [pc, #692]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a06e:	f023 0203 	bic.w	r2, r3, #3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a076:	49aa      	ldr	r1, [pc, #680]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a07c:	e001      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
 800a080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 8086 	beq.w	800a19c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a090:	4ba4      	ldr	r3, [pc, #656]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4aa3      	ldr	r2, [pc, #652]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a09a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a09c:	f7fb f974 	bl	8005388 <HAL_GetTick>
 800a0a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0a2:	e009      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0a4:	f7fb f970 	bl	8005388 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	2b64      	cmp	r3, #100	; 0x64
 800a0b0:	d902      	bls.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	75fb      	strb	r3, [r7, #23]
        break;
 800a0b6:	e005      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0b8:	4b9a      	ldr	r3, [pc, #616]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0ef      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d166      	bne.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a0ca:	4b95      	ldr	r3, [pc, #596]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0d4:	4053      	eors	r3, r2
 800a0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d013      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a0de:	4b90      	ldr	r3, [pc, #576]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a0e8:	4b8d      	ldr	r3, [pc, #564]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ec:	4a8c      	ldr	r2, [pc, #560]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a0f4:	4b8a      	ldr	r3, [pc, #552]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f8:	4a89      	ldr	r2, [pc, #548]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a100:	4a87      	ldr	r2, [pc, #540]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a10c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a110:	d115      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a112:	f7fb f939 	bl	8005388 <HAL_GetTick>
 800a116:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a118:	e00b      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a11a:	f7fb f935 	bl	8005388 <HAL_GetTick>
 800a11e:	4602      	mov	r2, r0
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	f241 3288 	movw	r2, #5000	; 0x1388
 800a128:	4293      	cmp	r3, r2
 800a12a:	d902      	bls.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	75fb      	strb	r3, [r7, #23]
            break;
 800a130:	e005      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a132:	4b7b      	ldr	r3, [pc, #492]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0ed      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d126      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a152:	d10d      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a154:	4b72      	ldr	r3, [pc, #456]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a162:	0919      	lsrs	r1, r3, #4
 800a164:	4b70      	ldr	r3, [pc, #448]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a166:	400b      	ands	r3, r1
 800a168:	496d      	ldr	r1, [pc, #436]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	610b      	str	r3, [r1, #16]
 800a16e:	e005      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a170:	4b6b      	ldr	r3, [pc, #428]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	4a6a      	ldr	r2, [pc, #424]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a176:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a17a:	6113      	str	r3, [r2, #16]
 800a17c:	4b68      	ldr	r3, [pc, #416]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a17e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a18a:	4965      	ldr	r1, [pc, #404]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	670b      	str	r3, [r1, #112]	; 0x70
 800a190:	e004      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	75bb      	strb	r3, [r7, #22]
 800a196:	e001      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d07e      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ac:	2b28      	cmp	r3, #40	; 0x28
 800a1ae:	d867      	bhi.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a1b0:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b6:	bf00      	nop
 800a1b8:	0800a287 	.word	0x0800a287
 800a1bc:	0800a281 	.word	0x0800a281
 800a1c0:	0800a281 	.word	0x0800a281
 800a1c4:	0800a281 	.word	0x0800a281
 800a1c8:	0800a281 	.word	0x0800a281
 800a1cc:	0800a281 	.word	0x0800a281
 800a1d0:	0800a281 	.word	0x0800a281
 800a1d4:	0800a281 	.word	0x0800a281
 800a1d8:	0800a25d 	.word	0x0800a25d
 800a1dc:	0800a281 	.word	0x0800a281
 800a1e0:	0800a281 	.word	0x0800a281
 800a1e4:	0800a281 	.word	0x0800a281
 800a1e8:	0800a281 	.word	0x0800a281
 800a1ec:	0800a281 	.word	0x0800a281
 800a1f0:	0800a281 	.word	0x0800a281
 800a1f4:	0800a281 	.word	0x0800a281
 800a1f8:	0800a26f 	.word	0x0800a26f
 800a1fc:	0800a281 	.word	0x0800a281
 800a200:	0800a281 	.word	0x0800a281
 800a204:	0800a281 	.word	0x0800a281
 800a208:	0800a281 	.word	0x0800a281
 800a20c:	0800a281 	.word	0x0800a281
 800a210:	0800a281 	.word	0x0800a281
 800a214:	0800a281 	.word	0x0800a281
 800a218:	0800a287 	.word	0x0800a287
 800a21c:	0800a281 	.word	0x0800a281
 800a220:	0800a281 	.word	0x0800a281
 800a224:	0800a281 	.word	0x0800a281
 800a228:	0800a281 	.word	0x0800a281
 800a22c:	0800a281 	.word	0x0800a281
 800a230:	0800a281 	.word	0x0800a281
 800a234:	0800a281 	.word	0x0800a281
 800a238:	0800a287 	.word	0x0800a287
 800a23c:	0800a281 	.word	0x0800a281
 800a240:	0800a281 	.word	0x0800a281
 800a244:	0800a281 	.word	0x0800a281
 800a248:	0800a281 	.word	0x0800a281
 800a24c:	0800a281 	.word	0x0800a281
 800a250:	0800a281 	.word	0x0800a281
 800a254:	0800a281 	.word	0x0800a281
 800a258:	0800a287 	.word	0x0800a287
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3304      	adds	r3, #4
 800a260:	2101      	movs	r1, #1
 800a262:	4618      	mov	r0, r3
 800a264:	f000 fdf4 	bl	800ae50 <RCCEx_PLL2_Config>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a26c:	e00c      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3324      	adds	r3, #36	; 0x24
 800a272:	2101      	movs	r1, #1
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fe9d 	bl	800afb4 <RCCEx_PLL3_Config>
 800a27a:	4603      	mov	r3, r0
 800a27c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a27e:	e003      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	75fb      	strb	r3, [r7, #23]
      break;
 800a284:	e000      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a286:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d109      	bne.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a292:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a29a:	4921      	ldr	r1, [pc, #132]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	654b      	str	r3, [r1, #84]	; 0x54
 800a2a0:	e001      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d03e      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b6:	2b05      	cmp	r3, #5
 800a2b8:	d820      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a2ba:	a201      	add	r2, pc, #4	; (adr r2, 800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c0:	0800a303 	.word	0x0800a303
 800a2c4:	0800a2d9 	.word	0x0800a2d9
 800a2c8:	0800a2eb 	.word	0x0800a2eb
 800a2cc:	0800a303 	.word	0x0800a303
 800a2d0:	0800a303 	.word	0x0800a303
 800a2d4:	0800a303 	.word	0x0800a303
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	2101      	movs	r1, #1
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fdb6 	bl	800ae50 <RCCEx_PLL2_Config>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a2e8:	e00c      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3324      	adds	r3, #36	; 0x24
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fe5f 	bl	800afb4 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a2fa:	e003      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a300:	e000      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a302:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d110      	bne.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a30a:	4b05      	ldr	r3, [pc, #20]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30e:	f023 0207 	bic.w	r2, r3, #7
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a316:	4902      	ldr	r1, [pc, #8]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	654b      	str	r3, [r1, #84]	; 0x54
 800a31c:	e008      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a31e:	bf00      	nop
 800a320:	58024400 	.word	0x58024400
 800a324:	58024800 	.word	0x58024800
 800a328:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d039      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a342:	2b05      	cmp	r3, #5
 800a344:	d820      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a346:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a38f 	.word	0x0800a38f
 800a350:	0800a365 	.word	0x0800a365
 800a354:	0800a377 	.word	0x0800a377
 800a358:	0800a38f 	.word	0x0800a38f
 800a35c:	0800a38f 	.word	0x0800a38f
 800a360:	0800a38f 	.word	0x0800a38f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3304      	adds	r3, #4
 800a368:	2101      	movs	r1, #1
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fd70 	bl	800ae50 <RCCEx_PLL2_Config>
 800a370:	4603      	mov	r3, r0
 800a372:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a374:	e00c      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3324      	adds	r3, #36	; 0x24
 800a37a:	2101      	movs	r1, #1
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fe19 	bl	800afb4 <RCCEx_PLL3_Config>
 800a382:	4603      	mov	r3, r0
 800a384:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a386:	e003      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	75fb      	strb	r3, [r7, #23]
      break;
 800a38c:	e000      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a38e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a396:	4bb7      	ldr	r3, [pc, #732]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a39a:	f023 0207 	bic.w	r2, r3, #7
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a4:	49b3      	ldr	r1, [pc, #716]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	658b      	str	r3, [r1, #88]	; 0x58
 800a3aa:	e001      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0320 	and.w	r3, r3, #32
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d04b      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3c6:	d02e      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3cc:	d828      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d2:	d02a      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d8:	d822      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a3da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3de:	d026      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a3e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3e4:	d81c      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3ea:	d010      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f0:	d816      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d01d      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a3f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fa:	d111      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3304      	adds	r3, #4
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fd24 	bl	800ae50 <RCCEx_PLL2_Config>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a40c:	e012      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3324      	adds	r3, #36	; 0x24
 800a412:	2102      	movs	r1, #2
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fdcd 	bl	800afb4 <RCCEx_PLL3_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a41e:	e009      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	75fb      	strb	r3, [r7, #23]
      break;
 800a424:	e006      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a426:	bf00      	nop
 800a428:	e004      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a42a:	bf00      	nop
 800a42c:	e002      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a42e:	bf00      	nop
 800a430:	e000      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a432:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10a      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a43a:	4b8e      	ldr	r3, [pc, #568]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a448:	498a      	ldr	r1, [pc, #552]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	654b      	str	r3, [r1, #84]	; 0x54
 800a44e:	e001      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d04b      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a466:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a46a:	d02e      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a46c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a470:	d828      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a476:	d02a      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47c:	d822      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a47e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a482:	d026      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a488:	d81c      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a48e:	d010      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a494:	d816      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01d      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a49e:	d111      	bne.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 fcd2 	bl	800ae50 <RCCEx_PLL2_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a4b0:	e012      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3324      	adds	r3, #36	; 0x24
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fd7b 	bl	800afb4 <RCCEx_PLL3_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a4c2:	e009      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c8:	e006      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a4ca:	bf00      	nop
 800a4cc:	e004      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a4ce:	bf00      	nop
 800a4d0:	e002      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a4d2:	bf00      	nop
 800a4d4:	e000      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a4d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a4de:	4b65      	ldr	r3, [pc, #404]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ec:	4961      	ldr	r1, [pc, #388]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	658b      	str	r3, [r1, #88]	; 0x58
 800a4f2:	e001      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
 800a4f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a500:	2b00      	cmp	r3, #0
 800a502:	d04b      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a50a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a50e:	d02e      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a510:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a514:	d828      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a51a:	d02a      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a520:	d822      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a522:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a526:	d026      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a528:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a52c:	d81c      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a52e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a532:	d010      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a538:	d816      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01d      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a53e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a542:	d111      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fc80 	bl	800ae50 <RCCEx_PLL2_Config>
 800a550:	4603      	mov	r3, r0
 800a552:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a554:	e012      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3324      	adds	r3, #36	; 0x24
 800a55a:	2102      	movs	r1, #2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fd29 	bl	800afb4 <RCCEx_PLL3_Config>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a566:	e009      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	75fb      	strb	r3, [r7, #23]
      break;
 800a56c:	e006      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a56e:	bf00      	nop
 800a570:	e004      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a572:	bf00      	nop
 800a574:	e002      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a576:	bf00      	nop
 800a578:	e000      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a57a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a582:	4b3c      	ldr	r3, [pc, #240]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a590:	4938      	ldr	r1, [pc, #224]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a592:	4313      	orrs	r3, r2
 800a594:	658b      	str	r3, [r1, #88]	; 0x58
 800a596:	e001      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01a      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b2:	d10a      	bne.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3324      	adds	r3, #36	; 0x24
 800a5b8:	2102      	movs	r1, #2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fcfa 	bl	800afb4 <RCCEx_PLL3_Config>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a5ca:	4b2a      	ldr	r3, [pc, #168]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d8:	4926      	ldr	r1, [pc, #152]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0310 	and.w	r3, r3, #16
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01a      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f4:	d10a      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3324      	adds	r3, #36	; 0x24
 800a5fa:	2102      	movs	r1, #2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fcd9 	bl	800afb4 <RCCEx_PLL3_Config>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a60c:	4b19      	ldr	r3, [pc, #100]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a61a:	4916      	ldr	r1, [pc, #88]	; (800a674 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d036      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a636:	d01f      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a63c:	d817      	bhi.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d003      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a646:	d009      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a648:	e011      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3304      	adds	r3, #4
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fbfd 	bl	800ae50 <RCCEx_PLL2_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a65a:	e00e      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3324      	adds	r3, #36	; 0x24
 800a660:	2102      	movs	r1, #2
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fca6 	bl	800afb4 <RCCEx_PLL3_Config>
 800a668:	4603      	mov	r3, r0
 800a66a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a66c:	e005      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	75fb      	strb	r3, [r7, #23]
      break;
 800a672:	e002      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a674:	58024400 	.word	0x58024400
      break;
 800a678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a680:	4b93      	ldr	r3, [pc, #588]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a68e:	4990      	ldr	r1, [pc, #576]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a690:	4313      	orrs	r3, r2
 800a692:	658b      	str	r3, [r1, #88]	; 0x58
 800a694:	e001      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d033      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6b0:	d01c      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a6b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6b6:	d816      	bhi.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a6b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6bc:	d003      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a6be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6c2:	d007      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a6c4:	e00f      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c6:	4b82      	ldr	r3, [pc, #520]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ca:	4a81      	ldr	r2, [pc, #516]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a6cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a6d2:	e00c      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3324      	adds	r3, #36	; 0x24
 800a6d8:	2101      	movs	r1, #1
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fc6a 	bl	800afb4 <RCCEx_PLL3_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a6e4:	e003      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ea:	e000      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a6ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6f4:	4b76      	ldr	r3, [pc, #472]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a702:	4973      	ldr	r1, [pc, #460]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a704:	4313      	orrs	r3, r2
 800a706:	654b      	str	r3, [r1, #84]	; 0x54
 800a708:	e001      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d029      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d007      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a728:	e00f      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a72a:	4b69      	ldr	r3, [pc, #420]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	4a68      	ldr	r2, [pc, #416]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a736:	e00b      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3304      	adds	r3, #4
 800a73c:	2102      	movs	r1, #2
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fb86 	bl	800ae50 <RCCEx_PLL2_Config>
 800a744:	4603      	mov	r3, r0
 800a746:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a748:	e002      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
      break;
 800a74e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d109      	bne.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a756:	4b5e      	ldr	r3, [pc, #376]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a762:	495b      	ldr	r1, [pc, #364]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a764:	4313      	orrs	r3, r2
 800a766:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a768:	e001      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3324      	adds	r3, #36	; 0x24
 800a77e:	2102      	movs	r1, #2
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fc17 	bl	800afb4 <RCCEx_PLL3_Config>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d030      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7a4:	d017      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a7a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7aa:	d811      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a7ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b0:	d013      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a7b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b6:	d80b      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d010      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c0:	d106      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7c2:	4b43      	ldr	r3, [pc, #268]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	4a42      	ldr	r2, [pc, #264]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a7ce:	e007      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d4:	e004      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a7d6:	bf00      	nop
 800a7d8:	e002      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a7da:	bf00      	nop
 800a7dc:	e000      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a7de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d109      	bne.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7e6:	4b3a      	ldr	r3, [pc, #232]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7f2:	4937      	ldr	r1, [pc, #220]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	654b      	str	r3, [r1, #84]	; 0x54
 800a7f8:	e001      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a80a:	4b31      	ldr	r3, [pc, #196]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a816:	492e      	ldr	r1, [pc, #184]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a818:	4313      	orrs	r3, r2
 800a81a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d009      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a828:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a836:	4926      	ldr	r1, [pc, #152]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d008      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a848:	4b21      	ldr	r3, [pc, #132]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a854:	491e      	ldr	r1, [pc, #120]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a856:	4313      	orrs	r3, r2
 800a858:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00d      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a866:	4b1a      	ldr	r3, [pc, #104]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	4a19      	ldr	r2, [pc, #100]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a86c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a870:	6113      	str	r3, [r2, #16]
 800a872:	4b17      	ldr	r3, [pc, #92]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a874:	691a      	ldr	r2, [r3, #16]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a87c:	4914      	ldr	r1, [pc, #80]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	da08      	bge.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a88a:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a896:	490e      	ldr	r1, [pc, #56]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8a8:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b6:	4906      	ldr	r1, [pc, #24]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a8bc:	7dbb      	ldrb	r3, [r7, #22]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e000      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	58024400 	.word	0x58024400

0800a8d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a8d8:	f7ff f860 	bl	800999c <HAL_RCC_GetHCLKFreq>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	091b      	lsrs	r3, r3, #4
 800a8e4:	f003 0307 	and.w	r3, r3, #7
 800a8e8:	4904      	ldr	r1, [pc, #16]	; (800a8fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a8ea:	5ccb      	ldrb	r3, [r1, r3]
 800a8ec:	f003 031f 	and.w	r3, r3, #31
 800a8f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	58024400 	.word	0x58024400
 800a8fc:	08011bb8 	.word	0x08011bb8

0800a900 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a900:	b480      	push	{r7}
 800a902:	b089      	sub	sp, #36	; 0x24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a908:	4ba1      	ldr	r3, [pc, #644]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a912:	4b9f      	ldr	r3, [pc, #636]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a916:	0b1b      	lsrs	r3, r3, #12
 800a918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a91c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a91e:	4b9c      	ldr	r3, [pc, #624]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	091b      	lsrs	r3, r3, #4
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a92a:	4b99      	ldr	r3, [pc, #612]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92e:	08db      	lsrs	r3, r3, #3
 800a930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	fb02 f303 	mul.w	r3, r2, r3
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8111 	beq.w	800ab70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	2b02      	cmp	r3, #2
 800a952:	f000 8083 	beq.w	800aa5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f200 80a1 	bhi.w	800aaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d056      	beq.n	800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a96a:	e099      	b.n	800aaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a96c:	4b88      	ldr	r3, [pc, #544]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02d      	beq.n	800a9d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a978:	4b85      	ldr	r3, [pc, #532]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	08db      	lsrs	r3, r3, #3
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	4a84      	ldr	r2, [pc, #528]	; (800ab94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a984:	fa22 f303 	lsr.w	r3, r2, r3
 800a988:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a2:	4b7b      	ldr	r3, [pc, #492]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a9d2:	e087      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e6:	4b6a      	ldr	r3, [pc, #424]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa16:	e065      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2a:	4b59      	ldr	r3, [pc, #356]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa5a:	e043      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6e:	4b48      	ldr	r3, [pc, #288]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa9e:	e021      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aaae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab2:	4b37      	ldr	r3, [pc, #220]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aade:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aae2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800aae4:	4b2a      	ldr	r3, [pc, #168]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	0a5b      	lsrs	r3, r3, #9
 800aaea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab0a:	ee17 2a90 	vmov	r2, s15
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ab12:	4b1f      	ldr	r3, [pc, #124]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab38:	ee17 2a90 	vmov	r2, s15
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ab40:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab44:	0e1b      	lsrs	r3, r3, #24
 800ab46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab66:	ee17 2a90 	vmov	r2, s15
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab6e:	e008      	b.n	800ab82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	609a      	str	r2, [r3, #8]
}
 800ab82:	bf00      	nop
 800ab84:	3724      	adds	r7, #36	; 0x24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	58024400 	.word	0x58024400
 800ab94:	03d09000 	.word	0x03d09000
 800ab98:	46000000 	.word	0x46000000
 800ab9c:	4c742400 	.word	0x4c742400
 800aba0:	4a742400 	.word	0x4a742400
 800aba4:	4c371b00 	.word	0x4c371b00

0800aba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b089      	sub	sp, #36	; 0x24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb0:	4ba1      	ldr	r3, [pc, #644]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800abba:	4b9f      	ldr	r3, [pc, #636]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbe:	0d1b      	lsrs	r3, r3, #20
 800abc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abc6:	4b9c      	ldr	r3, [pc, #624]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800abd2:	4b99      	ldr	r3, [pc, #612]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd6:	08db      	lsrs	r3, r3, #3
 800abd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 8111 	beq.w	800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	f000 8083 	beq.w	800ad04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f200 80a1 	bhi.w	800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d056      	beq.n	800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac12:	e099      	b.n	800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac14:	4b88      	ldr	r3, [pc, #544]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d02d      	beq.n	800ac7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac20:	4b85      	ldr	r3, [pc, #532]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	08db      	lsrs	r3, r3, #3
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	4a84      	ldr	r2, [pc, #528]	; (800ae3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b7b      	ldr	r3, [pc, #492]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac7a:	e087      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b6a      	ldr	r3, [pc, #424]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acbe:	e065      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd2:	4b59      	ldr	r3, [pc, #356]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad02:	e043      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad16:	4b48      	ldr	r3, [pc, #288]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad46:	e021      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5a:	4b37      	ldr	r3, [pc, #220]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ad8c:	4b2a      	ldr	r3, [pc, #168]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	0a5b      	lsrs	r3, r3, #9
 800ad92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada6:	edd7 6a07 	vldr	s13, [r7, #28]
 800adaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb2:	ee17 2a90 	vmov	r2, s15
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800adba:	4b1f      	ldr	r3, [pc, #124]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add4:	edd7 6a07 	vldr	s13, [r7, #28]
 800add8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800addc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade0:	ee17 2a90 	vmov	r2, s15
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ade8:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	0e1b      	lsrs	r3, r3, #24
 800adee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0e:	ee17 2a90 	vmov	r2, s15
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae16:	e008      	b.n	800ae2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	609a      	str	r2, [r3, #8]
}
 800ae2a:	bf00      	nop
 800ae2c:	3724      	adds	r7, #36	; 0x24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	58024400 	.word	0x58024400
 800ae3c:	03d09000 	.word	0x03d09000
 800ae40:	46000000 	.word	0x46000000
 800ae44:	4c742400 	.word	0x4c742400
 800ae48:	4a742400 	.word	0x4a742400
 800ae4c:	4c371b00 	.word	0x4c371b00

0800ae50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae5e:	4b53      	ldr	r3, [pc, #332]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d101      	bne.n	800ae6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e099      	b.n	800afa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae6e:	4b4f      	ldr	r3, [pc, #316]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a4e      	ldr	r2, [pc, #312]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae7a:	f7fa fa85 	bl	8005388 <HAL_GetTick>
 800ae7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae80:	e008      	b.n	800ae94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ae82:	f7fa fa81 	bl	8005388 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d901      	bls.n	800ae94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e086      	b.n	800afa2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae94:	4b45      	ldr	r3, [pc, #276]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1f0      	bne.n	800ae82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aea0:	4b42      	ldr	r3, [pc, #264]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	031b      	lsls	r3, r3, #12
 800aeae:	493f      	ldr	r1, [pc, #252]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	628b      	str	r3, [r1, #40]	; 0x28
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	025b      	lsls	r3, r3, #9
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	3b01      	subs	r3, #1
 800aed0:	041b      	lsls	r3, r3, #16
 800aed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aed6:	431a      	orrs	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	3b01      	subs	r3, #1
 800aede:	061b      	lsls	r3, r3, #24
 800aee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aee4:	4931      	ldr	r1, [pc, #196]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aee6:	4313      	orrs	r3, r2
 800aee8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aeea:	4b30      	ldr	r3, [pc, #192]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	492d      	ldr	r1, [pc, #180]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aefc:	4b2b      	ldr	r3, [pc, #172]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f023 0220 	bic.w	r2, r3, #32
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	4928      	ldr	r1, [pc, #160]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af0e:	4b27      	ldr	r3, [pc, #156]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af12:	4a26      	ldr	r2, [pc, #152]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af14:	f023 0310 	bic.w	r3, r3, #16
 800af18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af1a:	4b24      	ldr	r3, [pc, #144]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <RCCEx_PLL2_Config+0x160>)
 800af20:	4013      	ands	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	69d2      	ldr	r2, [r2, #28]
 800af26:	00d2      	lsls	r2, r2, #3
 800af28:	4920      	ldr	r1, [pc, #128]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af2e:	4b1f      	ldr	r3, [pc, #124]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	4a1e      	ldr	r2, [pc, #120]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af34:	f043 0310 	orr.w	r3, r3, #16
 800af38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af40:	4b1a      	ldr	r3, [pc, #104]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	4a19      	ldr	r2, [pc, #100]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af4c:	e00f      	b.n	800af6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d106      	bne.n	800af62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af54:	4b15      	ldr	r3, [pc, #84]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af58:	4a14      	ldr	r2, [pc, #80]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af60:	e005      	b.n	800af6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af62:	4b12      	ldr	r3, [pc, #72]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	4a11      	ldr	r2, [pc, #68]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af6e:	4b0f      	ldr	r3, [pc, #60]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a0e      	ldr	r2, [pc, #56]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af7a:	f7fa fa05 	bl	8005388 <HAL_GetTick>
 800af7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af80:	e008      	b.n	800af94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800af82:	f7fa fa01 	bl	8005388 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d901      	bls.n	800af94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e006      	b.n	800afa2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af94:	4b05      	ldr	r3, [pc, #20]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0f0      	beq.n	800af82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	58024400 	.word	0x58024400
 800afb0:	ffff0007 	.word	0xffff0007

0800afb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afc2:	4b53      	ldr	r3, [pc, #332]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d101      	bne.n	800afd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e099      	b.n	800b106 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afd2:	4b4f      	ldr	r3, [pc, #316]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a4e      	ldr	r2, [pc, #312]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800afd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afde:	f7fa f9d3 	bl	8005388 <HAL_GetTick>
 800afe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afe4:	e008      	b.n	800aff8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800afe6:	f7fa f9cf 	bl	8005388 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d901      	bls.n	800aff8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e086      	b.n	800b106 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aff8:	4b45      	ldr	r3, [pc, #276]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1f0      	bne.n	800afe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b004:	4b42      	ldr	r3, [pc, #264]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b008:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	051b      	lsls	r3, r3, #20
 800b012:	493f      	ldr	r1, [pc, #252]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b014:	4313      	orrs	r3, r2
 800b016:	628b      	str	r3, [r1, #40]	; 0x28
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	3b01      	subs	r3, #1
 800b028:	025b      	lsls	r3, r3, #9
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	3b01      	subs	r3, #1
 800b034:	041b      	lsls	r3, r3, #16
 800b036:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	3b01      	subs	r3, #1
 800b042:	061b      	lsls	r3, r3, #24
 800b044:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b048:	4931      	ldr	r1, [pc, #196]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b04e:	4b30      	ldr	r3, [pc, #192]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	492d      	ldr	r1, [pc, #180]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b060:	4b2b      	ldr	r3, [pc, #172]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	4928      	ldr	r1, [pc, #160]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b072:	4b27      	ldr	r3, [pc, #156]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b076:	4a26      	ldr	r2, [pc, #152]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b07c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b07e:	4b24      	ldr	r3, [pc, #144]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <RCCEx_PLL3_Config+0x160>)
 800b084:	4013      	ands	r3, r2
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	69d2      	ldr	r2, [r2, #28]
 800b08a:	00d2      	lsls	r2, r2, #3
 800b08c:	4920      	ldr	r1, [pc, #128]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b092:	4b1f      	ldr	r3, [pc, #124]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	4a1e      	ldr	r2, [pc, #120]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d106      	bne.n	800b0b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0a4:	4b1a      	ldr	r3, [pc, #104]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	4a19      	ldr	r2, [pc, #100]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0b0:	e00f      	b.n	800b0d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d106      	bne.n	800b0c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0b8:	4b15      	ldr	r3, [pc, #84]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a14      	ldr	r2, [pc, #80]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0c4:	e005      	b.n	800b0d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	4a11      	ldr	r2, [pc, #68]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a0e      	ldr	r2, [pc, #56]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0de:	f7fa f953 	bl	8005388 <HAL_GetTick>
 800b0e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0e4:	e008      	b.n	800b0f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b0e6:	f7fa f94f 	bl	8005388 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d901      	bls.n	800b0f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e006      	b.n	800b106 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0f0      	beq.n	800b0e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	58024400 	.word	0x58024400
 800b114:	ffff0007 	.word	0xffff0007

0800b118 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e0f1      	b.n	800b30e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a78      	ldr	r2, [pc, #480]	; (800b318 <HAL_SPI_Init+0x200>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00f      	beq.n	800b15a <HAL_SPI_Init+0x42>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a77      	ldr	r2, [pc, #476]	; (800b31c <HAL_SPI_Init+0x204>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d00a      	beq.n	800b15a <HAL_SPI_Init+0x42>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a75      	ldr	r2, [pc, #468]	; (800b320 <HAL_SPI_Init+0x208>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d005      	beq.n	800b15a <HAL_SPI_Init+0x42>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	2b0f      	cmp	r3, #15
 800b154:	d901      	bls.n	800b15a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e0d9      	b.n	800b30e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f8e2 	bl	800b324 <SPI_GetPacketSize>
 800b160:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a6c      	ldr	r2, [pc, #432]	; (800b318 <HAL_SPI_Init+0x200>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00c      	beq.n	800b186 <HAL_SPI_Init+0x6e>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a6a      	ldr	r2, [pc, #424]	; (800b31c <HAL_SPI_Init+0x204>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d007      	beq.n	800b186 <HAL_SPI_Init+0x6e>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a69      	ldr	r2, [pc, #420]	; (800b320 <HAL_SPI_Init+0x208>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d002      	beq.n	800b186 <HAL_SPI_Init+0x6e>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b08      	cmp	r3, #8
 800b184:	d811      	bhi.n	800b1aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b18a:	4a63      	ldr	r2, [pc, #396]	; (800b318 <HAL_SPI_Init+0x200>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d009      	beq.n	800b1a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a61      	ldr	r2, [pc, #388]	; (800b31c <HAL_SPI_Init+0x204>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d004      	beq.n	800b1a4 <HAL_SPI_Init+0x8c>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a60      	ldr	r2, [pc, #384]	; (800b320 <HAL_SPI_Init+0x208>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d104      	bne.n	800b1ae <HAL_SPI_Init+0x96>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b10      	cmp	r3, #16
 800b1a8:	d901      	bls.n	800b1ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e0af      	b.n	800b30e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f8 fc5e 	bl	8003a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0201 	bic.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b1ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1f4:	d119      	bne.n	800b22a <HAL_SPI_Init+0x112>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1fe:	d103      	bne.n	800b208 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b204:	2b00      	cmp	r3, #0
 800b206:	d008      	beq.n	800b21a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10c      	bne.n	800b22a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b218:	d107      	bne.n	800b22a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b228:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	69da      	ldr	r2, [r3, #28]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b232:	431a      	orrs	r2, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	431a      	orrs	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b23c:	ea42 0103 	orr.w	r1, r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68da      	ldr	r2, [r3, #12]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	430a      	orrs	r2, r1
 800b24a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	431a      	orrs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	431a      	orrs	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27e:	431a      	orrs	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b28a:	ea42 0103 	orr.w	r1, r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	430a      	orrs	r2, r1
 800b298:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d113      	bne.n	800b2ca <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	40013000 	.word	0x40013000
 800b31c:	40003800 	.word	0x40003800
 800b320:	40003c00 	.word	0x40003c00

0800b324 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	3301      	adds	r3, #1
 800b334:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	3301      	adds	r3, #1
 800b33c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	3307      	adds	r3, #7
 800b342:	08db      	lsrs	r3, r3, #3
 800b344:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e049      	b.n	800b400 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b00      	cmp	r3, #0
 800b376:	d106      	bne.n	800b386 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7f9 fa1d 	bl	80047c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2202      	movs	r2, #2
 800b38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3304      	adds	r3, #4
 800b396:	4619      	mov	r1, r3
 800b398:	4610      	mov	r0, r2
 800b39a:	f000 fcf9 	bl	800bd90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e049      	b.n	800b4ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d106      	bne.n	800b434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f841 	bl	800b4b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3304      	adds	r3, #4
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f000 fca2 	bl	800bd90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b4be:	bf00      	nop
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
	...

0800b4cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d109      	bne.n	800b4f0 <HAL_TIM_PWM_Start+0x24>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	bf14      	ite	ne
 800b4e8:	2301      	movne	r3, #1
 800b4ea:	2300      	moveq	r3, #0
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	e03c      	b.n	800b56a <HAL_TIM_PWM_Start+0x9e>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	d109      	bne.n	800b50a <HAL_TIM_PWM_Start+0x3e>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	bf14      	ite	ne
 800b502:	2301      	movne	r3, #1
 800b504:	2300      	moveq	r3, #0
 800b506:	b2db      	uxtb	r3, r3
 800b508:	e02f      	b.n	800b56a <HAL_TIM_PWM_Start+0x9e>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b08      	cmp	r3, #8
 800b50e:	d109      	bne.n	800b524 <HAL_TIM_PWM_Start+0x58>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b01      	cmp	r3, #1
 800b51a:	bf14      	ite	ne
 800b51c:	2301      	movne	r3, #1
 800b51e:	2300      	moveq	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	e022      	b.n	800b56a <HAL_TIM_PWM_Start+0x9e>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b0c      	cmp	r3, #12
 800b528:	d109      	bne.n	800b53e <HAL_TIM_PWM_Start+0x72>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b01      	cmp	r3, #1
 800b534:	bf14      	ite	ne
 800b536:	2301      	movne	r3, #1
 800b538:	2300      	moveq	r3, #0
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	e015      	b.n	800b56a <HAL_TIM_PWM_Start+0x9e>
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b10      	cmp	r3, #16
 800b542:	d109      	bne.n	800b558 <HAL_TIM_PWM_Start+0x8c>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	bf14      	ite	ne
 800b550:	2301      	movne	r3, #1
 800b552:	2300      	moveq	r3, #0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	e008      	b.n	800b56a <HAL_TIM_PWM_Start+0x9e>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	bf14      	ite	ne
 800b564:	2301      	movne	r3, #1
 800b566:	2300      	moveq	r3, #0
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e0a1      	b.n	800b6b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d104      	bne.n	800b582 <HAL_TIM_PWM_Start+0xb6>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b580:	e023      	b.n	800b5ca <HAL_TIM_PWM_Start+0xfe>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b04      	cmp	r3, #4
 800b586:	d104      	bne.n	800b592 <HAL_TIM_PWM_Start+0xc6>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b590:	e01b      	b.n	800b5ca <HAL_TIM_PWM_Start+0xfe>
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b08      	cmp	r3, #8
 800b596:	d104      	bne.n	800b5a2 <HAL_TIM_PWM_Start+0xd6>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5a0:	e013      	b.n	800b5ca <HAL_TIM_PWM_Start+0xfe>
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	2b0c      	cmp	r3, #12
 800b5a6:	d104      	bne.n	800b5b2 <HAL_TIM_PWM_Start+0xe6>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5b0:	e00b      	b.n	800b5ca <HAL_TIM_PWM_Start+0xfe>
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b10      	cmp	r3, #16
 800b5b6:	d104      	bne.n	800b5c2 <HAL_TIM_PWM_Start+0xf6>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5c0:	e003      	b.n	800b5ca <HAL_TIM_PWM_Start+0xfe>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 ffea 	bl	800c5ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a38      	ldr	r2, [pc, #224]	; (800b6c0 <HAL_TIM_PWM_Start+0x1f4>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d013      	beq.n	800b60a <HAL_TIM_PWM_Start+0x13e>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a37      	ldr	r2, [pc, #220]	; (800b6c4 <HAL_TIM_PWM_Start+0x1f8>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d00e      	beq.n	800b60a <HAL_TIM_PWM_Start+0x13e>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a35      	ldr	r2, [pc, #212]	; (800b6c8 <HAL_TIM_PWM_Start+0x1fc>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d009      	beq.n	800b60a <HAL_TIM_PWM_Start+0x13e>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a34      	ldr	r2, [pc, #208]	; (800b6cc <HAL_TIM_PWM_Start+0x200>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d004      	beq.n	800b60a <HAL_TIM_PWM_Start+0x13e>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a32      	ldr	r2, [pc, #200]	; (800b6d0 <HAL_TIM_PWM_Start+0x204>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d101      	bne.n	800b60e <HAL_TIM_PWM_Start+0x142>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e000      	b.n	800b610 <HAL_TIM_PWM_Start+0x144>
 800b60e:	2300      	movs	r3, #0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d007      	beq.n	800b624 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b622:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a25      	ldr	r2, [pc, #148]	; (800b6c0 <HAL_TIM_PWM_Start+0x1f4>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d022      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b636:	d01d      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a25      	ldr	r2, [pc, #148]	; (800b6d4 <HAL_TIM_PWM_Start+0x208>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d018      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a24      	ldr	r2, [pc, #144]	; (800b6d8 <HAL_TIM_PWM_Start+0x20c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d013      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a22      	ldr	r2, [pc, #136]	; (800b6dc <HAL_TIM_PWM_Start+0x210>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d00e      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a1a      	ldr	r2, [pc, #104]	; (800b6c4 <HAL_TIM_PWM_Start+0x1f8>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d009      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a1e      	ldr	r2, [pc, #120]	; (800b6e0 <HAL_TIM_PWM_Start+0x214>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d004      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1a8>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a16      	ldr	r2, [pc, #88]	; (800b6c8 <HAL_TIM_PWM_Start+0x1fc>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d115      	bne.n	800b6a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	4b1a      	ldr	r3, [pc, #104]	; (800b6e4 <HAL_TIM_PWM_Start+0x218>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b06      	cmp	r3, #6
 800b684:	d015      	beq.n	800b6b2 <HAL_TIM_PWM_Start+0x1e6>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68c:	d011      	beq.n	800b6b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f042 0201 	orr.w	r2, r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b69e:	e008      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0201 	orr.w	r2, r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e000      	b.n	800b6b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	40010000 	.word	0x40010000
 800b6c4:	40010400 	.word	0x40010400
 800b6c8:	40014000 	.word	0x40014000
 800b6cc:	40014400 	.word	0x40014400
 800b6d0:	40014800 	.word	0x40014800
 800b6d4:	40000400 	.word	0x40000400
 800b6d8:	40000800 	.word	0x40000800
 800b6dc:	40000c00 	.word	0x40000c00
 800b6e0:	40001800 	.word	0x40001800
 800b6e4:	00010007 	.word	0x00010007

0800b6e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d122      	bne.n	800b744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d11b      	bne.n	800b744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0202 	mvn.w	r2, #2
 800b714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	f003 0303 	and.w	r3, r3, #3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fb12 	bl	800bd54 <HAL_TIM_IC_CaptureCallback>
 800b730:	e005      	b.n	800b73e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fb04 	bl	800bd40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fb15 	bl	800bd68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d122      	bne.n	800b798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d11b      	bne.n	800b798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0204 	mvn.w	r2, #4
 800b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2202      	movs	r2, #2
 800b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fae8 	bl	800bd54 <HAL_TIM_IC_CaptureCallback>
 800b784:	e005      	b.n	800b792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fada 	bl	800bd40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 faeb 	bl	800bd68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0308 	and.w	r3, r3, #8
 800b7a2:	2b08      	cmp	r3, #8
 800b7a4:	d122      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0308 	and.w	r3, r3, #8
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d11b      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f06f 0208 	mvn.w	r2, #8
 800b7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fabe 	bl	800bd54 <HAL_TIM_IC_CaptureCallback>
 800b7d8:	e005      	b.n	800b7e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fab0 	bl	800bd40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fac1 	bl	800bd68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0310 	and.w	r3, r3, #16
 800b7f6:	2b10      	cmp	r3, #16
 800b7f8:	d122      	bne.n	800b840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0310 	and.w	r3, r3, #16
 800b804:	2b10      	cmp	r3, #16
 800b806:	d11b      	bne.n	800b840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0210 	mvn.w	r2, #16
 800b810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2208      	movs	r2, #8
 800b816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fa94 	bl	800bd54 <HAL_TIM_IC_CaptureCallback>
 800b82c:	e005      	b.n	800b83a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa86 	bl	800bd40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fa97 	bl	800bd68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d10e      	bne.n	800b86c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d107      	bne.n	800b86c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0201 	mvn.w	r2, #1
 800b864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7f7 f842 	bl	80028f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b876:	2b80      	cmp	r3, #128	; 0x80
 800b878:	d10e      	bne.n	800b898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b884:	2b80      	cmp	r3, #128	; 0x80
 800b886:	d107      	bne.n	800b898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 ffc6 	bl	800c824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a6:	d10e      	bne.n	800b8c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b2:	2b80      	cmp	r3, #128	; 0x80
 800b8b4:	d107      	bne.n	800b8c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 ffb9 	bl	800c838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d0:	2b40      	cmp	r3, #64	; 0x40
 800b8d2:	d10e      	bne.n	800b8f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8de:	2b40      	cmp	r3, #64	; 0x40
 800b8e0:	d107      	bne.n	800b8f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fa45 	bl	800bd7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b20      	cmp	r3, #32
 800b8fe:	d10e      	bne.n	800b91e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f003 0320 	and.w	r3, r3, #32
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d107      	bne.n	800b91e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f06f 0220 	mvn.w	r2, #32
 800b916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 ff79 	bl	800c810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d101      	bne.n	800b946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b942:	2302      	movs	r3, #2
 800b944:	e0ff      	b.n	800bb46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b14      	cmp	r3, #20
 800b952:	f200 80f0 	bhi.w	800bb36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b956:	a201      	add	r2, pc, #4	; (adr r2, 800b95c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b9b1 	.word	0x0800b9b1
 800b960:	0800bb37 	.word	0x0800bb37
 800b964:	0800bb37 	.word	0x0800bb37
 800b968:	0800bb37 	.word	0x0800bb37
 800b96c:	0800b9f1 	.word	0x0800b9f1
 800b970:	0800bb37 	.word	0x0800bb37
 800b974:	0800bb37 	.word	0x0800bb37
 800b978:	0800bb37 	.word	0x0800bb37
 800b97c:	0800ba33 	.word	0x0800ba33
 800b980:	0800bb37 	.word	0x0800bb37
 800b984:	0800bb37 	.word	0x0800bb37
 800b988:	0800bb37 	.word	0x0800bb37
 800b98c:	0800ba73 	.word	0x0800ba73
 800b990:	0800bb37 	.word	0x0800bb37
 800b994:	0800bb37 	.word	0x0800bb37
 800b998:	0800bb37 	.word	0x0800bb37
 800b99c:	0800bab5 	.word	0x0800bab5
 800b9a0:	0800bb37 	.word	0x0800bb37
 800b9a4:	0800bb37 	.word	0x0800bb37
 800b9a8:	0800bb37 	.word	0x0800bb37
 800b9ac:	0800baf5 	.word	0x0800baf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fa84 	bl	800bec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699a      	ldr	r2, [r3, #24]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f042 0208 	orr.w	r2, r2, #8
 800b9ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	699a      	ldr	r2, [r3, #24]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0204 	bic.w	r2, r2, #4
 800b9da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6999      	ldr	r1, [r3, #24]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	691a      	ldr	r2, [r3, #16]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	619a      	str	r2, [r3, #24]
      break;
 800b9ee:	e0a5      	b.n	800bb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68b9      	ldr	r1, [r7, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 faf4 	bl	800bfe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	699a      	ldr	r2, [r3, #24]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6999      	ldr	r1, [r3, #24]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	021a      	lsls	r2, r3, #8
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	619a      	str	r2, [r3, #24]
      break;
 800ba30:	e084      	b.n	800bb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68b9      	ldr	r1, [r7, #8]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 fb5d 	bl	800c0f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69da      	ldr	r2, [r3, #28]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0208 	orr.w	r2, r2, #8
 800ba4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69da      	ldr	r2, [r3, #28]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0204 	bic.w	r2, r2, #4
 800ba5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	69d9      	ldr	r1, [r3, #28]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	691a      	ldr	r2, [r3, #16]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	61da      	str	r2, [r3, #28]
      break;
 800ba70:	e064      	b.n	800bb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68b9      	ldr	r1, [r7, #8]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fbc5 	bl	800c208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	69da      	ldr	r2, [r3, #28]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	69da      	ldr	r2, [r3, #28]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	69d9      	ldr	r1, [r3, #28]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	021a      	lsls	r2, r3, #8
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	61da      	str	r2, [r3, #28]
      break;
 800bab2:	e043      	b.n	800bb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68b9      	ldr	r1, [r7, #8]
 800baba:	4618      	mov	r0, r3
 800babc:	f000 fc0e 	bl	800c2dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f042 0208 	orr.w	r2, r2, #8
 800bace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f022 0204 	bic.w	r2, r2, #4
 800bade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	691a      	ldr	r2, [r3, #16]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800baf2:	e023      	b.n	800bb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68b9      	ldr	r1, [r7, #8]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fc52 	bl	800c3a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	021a      	lsls	r2, r3, #8
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bb34:	e002      	b.n	800bb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	75fb      	strb	r3, [r7, #23]
      break;
 800bb3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop

0800bb50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d101      	bne.n	800bb6c <HAL_TIM_ConfigClockSource+0x1c>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	e0dc      	b.n	800bd26 <HAL_TIM_ConfigClockSource+0x1d6>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	4b6a      	ldr	r3, [pc, #424]	; (800bd30 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb88:	4013      	ands	r3, r2
 800bb8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a64      	ldr	r2, [pc, #400]	; (800bd34 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	f000 80a9 	beq.w	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bba8:	4a62      	ldr	r2, [pc, #392]	; (800bd34 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	f200 80ae 	bhi.w	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbb0:	4a61      	ldr	r2, [pc, #388]	; (800bd38 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	f000 80a1 	beq.w	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbb8:	4a5f      	ldr	r2, [pc, #380]	; (800bd38 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	f200 80a6 	bhi.w	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc0:	4a5e      	ldr	r2, [pc, #376]	; (800bd3c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	f000 8099 	beq.w	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbc8:	4a5c      	ldr	r2, [pc, #368]	; (800bd3c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	f200 809e 	bhi.w	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bbd4:	f000 8091 	beq.w	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bbdc:	f200 8096 	bhi.w	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbe4:	f000 8089 	beq.w	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbec:	f200 808e 	bhi.w	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf4:	d03e      	beq.n	800bc74 <HAL_TIM_ConfigClockSource+0x124>
 800bbf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbfa:	f200 8087 	bhi.w	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc02:	f000 8086 	beq.w	800bd12 <HAL_TIM_ConfigClockSource+0x1c2>
 800bc06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc0a:	d87f      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc0c:	2b70      	cmp	r3, #112	; 0x70
 800bc0e:	d01a      	beq.n	800bc46 <HAL_TIM_ConfigClockSource+0xf6>
 800bc10:	2b70      	cmp	r3, #112	; 0x70
 800bc12:	d87b      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc14:	2b60      	cmp	r3, #96	; 0x60
 800bc16:	d050      	beq.n	800bcba <HAL_TIM_ConfigClockSource+0x16a>
 800bc18:	2b60      	cmp	r3, #96	; 0x60
 800bc1a:	d877      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc1c:	2b50      	cmp	r3, #80	; 0x50
 800bc1e:	d03c      	beq.n	800bc9a <HAL_TIM_ConfigClockSource+0x14a>
 800bc20:	2b50      	cmp	r3, #80	; 0x50
 800bc22:	d873      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc24:	2b40      	cmp	r3, #64	; 0x40
 800bc26:	d058      	beq.n	800bcda <HAL_TIM_ConfigClockSource+0x18a>
 800bc28:	2b40      	cmp	r3, #64	; 0x40
 800bc2a:	d86f      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc2c:	2b30      	cmp	r3, #48	; 0x30
 800bc2e:	d064      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bc30:	2b30      	cmp	r3, #48	; 0x30
 800bc32:	d86b      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc34:	2b20      	cmp	r3, #32
 800bc36:	d060      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bc38:	2b20      	cmp	r3, #32
 800bc3a:	d867      	bhi.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d05c      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bc40:	2b10      	cmp	r3, #16
 800bc42:	d05a      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0x1aa>
 800bc44:	e062      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6899      	ldr	r1, [r3, #8]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f000 fc89 	bl	800c56c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	609a      	str	r2, [r3, #8]
      break;
 800bc72:	e04f      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6818      	ldr	r0, [r3, #0]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	6899      	ldr	r1, [r3, #8]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f000 fc72 	bl	800c56c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689a      	ldr	r2, [r3, #8]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc96:	609a      	str	r2, [r3, #8]
      break;
 800bc98:	e03c      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	6859      	ldr	r1, [r3, #4]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	461a      	mov	r2, r3
 800bca8:	f000 fbe2 	bl	800c470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2150      	movs	r1, #80	; 0x50
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fc3c 	bl	800c530 <TIM_ITRx_SetConfig>
      break;
 800bcb8:	e02c      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	6859      	ldr	r1, [r3, #4]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f000 fc01 	bl	800c4ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2160      	movs	r1, #96	; 0x60
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 fc2c 	bl	800c530 <TIM_ITRx_SetConfig>
      break;
 800bcd8:	e01c      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	6859      	ldr	r1, [r3, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f000 fbc2 	bl	800c470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2140      	movs	r1, #64	; 0x40
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fc1c 	bl	800c530 <TIM_ITRx_SetConfig>
      break;
 800bcf8:	e00c      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4619      	mov	r1, r3
 800bd04:	4610      	mov	r0, r2
 800bd06:	f000 fc13 	bl	800c530 <TIM_ITRx_SetConfig>
      break;
 800bd0a:	e003      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd10:	e000      	b.n	800bd14 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bd12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	ffceff88 	.word	0xffceff88
 800bd34:	00100040 	.word	0x00100040
 800bd38:	00100030 	.word	0x00100030
 800bd3c:	00100020 	.word	0x00100020

0800bd40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a40      	ldr	r2, [pc, #256]	; (800bea4 <TIM_Base_SetConfig+0x114>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d013      	beq.n	800bdd0 <TIM_Base_SetConfig+0x40>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdae:	d00f      	beq.n	800bdd0 <TIM_Base_SetConfig+0x40>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a3d      	ldr	r2, [pc, #244]	; (800bea8 <TIM_Base_SetConfig+0x118>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d00b      	beq.n	800bdd0 <TIM_Base_SetConfig+0x40>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a3c      	ldr	r2, [pc, #240]	; (800beac <TIM_Base_SetConfig+0x11c>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d007      	beq.n	800bdd0 <TIM_Base_SetConfig+0x40>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a3b      	ldr	r2, [pc, #236]	; (800beb0 <TIM_Base_SetConfig+0x120>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d003      	beq.n	800bdd0 <TIM_Base_SetConfig+0x40>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a3a      	ldr	r2, [pc, #232]	; (800beb4 <TIM_Base_SetConfig+0x124>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d108      	bne.n	800bde2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a2f      	ldr	r2, [pc, #188]	; (800bea4 <TIM_Base_SetConfig+0x114>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d01f      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf0:	d01b      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a2c      	ldr	r2, [pc, #176]	; (800bea8 <TIM_Base_SetConfig+0x118>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d017      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a2b      	ldr	r2, [pc, #172]	; (800beac <TIM_Base_SetConfig+0x11c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d013      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a2a      	ldr	r2, [pc, #168]	; (800beb0 <TIM_Base_SetConfig+0x120>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d00f      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a29      	ldr	r2, [pc, #164]	; (800beb4 <TIM_Base_SetConfig+0x124>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d00b      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a28      	ldr	r2, [pc, #160]	; (800beb8 <TIM_Base_SetConfig+0x128>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d007      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a27      	ldr	r2, [pc, #156]	; (800bebc <TIM_Base_SetConfig+0x12c>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d003      	beq.n	800be2a <TIM_Base_SetConfig+0x9a>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a26      	ldr	r2, [pc, #152]	; (800bec0 <TIM_Base_SetConfig+0x130>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d108      	bne.n	800be3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	4313      	orrs	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	689a      	ldr	r2, [r3, #8]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a10      	ldr	r2, [pc, #64]	; (800bea4 <TIM_Base_SetConfig+0x114>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d00f      	beq.n	800be88 <TIM_Base_SetConfig+0xf8>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a12      	ldr	r2, [pc, #72]	; (800beb4 <TIM_Base_SetConfig+0x124>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00b      	beq.n	800be88 <TIM_Base_SetConfig+0xf8>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a11      	ldr	r2, [pc, #68]	; (800beb8 <TIM_Base_SetConfig+0x128>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d007      	beq.n	800be88 <TIM_Base_SetConfig+0xf8>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a10      	ldr	r2, [pc, #64]	; (800bebc <TIM_Base_SetConfig+0x12c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d003      	beq.n	800be88 <TIM_Base_SetConfig+0xf8>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a0f      	ldr	r2, [pc, #60]	; (800bec0 <TIM_Base_SetConfig+0x130>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d103      	bne.n	800be90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	691a      	ldr	r2, [r3, #16]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	615a      	str	r2, [r3, #20]
}
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	40010000 	.word	0x40010000
 800bea8:	40000400 	.word	0x40000400
 800beac:	40000800 	.word	0x40000800
 800beb0:	40000c00 	.word	0x40000c00
 800beb4:	40010400 	.word	0x40010400
 800beb8:	40014000 	.word	0x40014000
 800bebc:	40014400 	.word	0x40014400
 800bec0:	40014800 	.word	0x40014800

0800bec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	f023 0201 	bic.w	r2, r3, #1
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	4b37      	ldr	r3, [pc, #220]	; (800bfcc <TIM_OC1_SetConfig+0x108>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f023 0303 	bic.w	r3, r3, #3
 800befa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f023 0302 	bic.w	r3, r3, #2
 800bf0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a2d      	ldr	r2, [pc, #180]	; (800bfd0 <TIM_OC1_SetConfig+0x10c>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d00f      	beq.n	800bf40 <TIM_OC1_SetConfig+0x7c>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a2c      	ldr	r2, [pc, #176]	; (800bfd4 <TIM_OC1_SetConfig+0x110>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d00b      	beq.n	800bf40 <TIM_OC1_SetConfig+0x7c>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a2b      	ldr	r2, [pc, #172]	; (800bfd8 <TIM_OC1_SetConfig+0x114>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d007      	beq.n	800bf40 <TIM_OC1_SetConfig+0x7c>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a2a      	ldr	r2, [pc, #168]	; (800bfdc <TIM_OC1_SetConfig+0x118>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d003      	beq.n	800bf40 <TIM_OC1_SetConfig+0x7c>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a29      	ldr	r2, [pc, #164]	; (800bfe0 <TIM_OC1_SetConfig+0x11c>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d10c      	bne.n	800bf5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f023 0308 	bic.w	r3, r3, #8
 800bf46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f023 0304 	bic.w	r3, r3, #4
 800bf58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a1c      	ldr	r2, [pc, #112]	; (800bfd0 <TIM_OC1_SetConfig+0x10c>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d00f      	beq.n	800bf82 <TIM_OC1_SetConfig+0xbe>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a1b      	ldr	r2, [pc, #108]	; (800bfd4 <TIM_OC1_SetConfig+0x110>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d00b      	beq.n	800bf82 <TIM_OC1_SetConfig+0xbe>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a1a      	ldr	r2, [pc, #104]	; (800bfd8 <TIM_OC1_SetConfig+0x114>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d007      	beq.n	800bf82 <TIM_OC1_SetConfig+0xbe>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a19      	ldr	r2, [pc, #100]	; (800bfdc <TIM_OC1_SetConfig+0x118>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d003      	beq.n	800bf82 <TIM_OC1_SetConfig+0xbe>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a18      	ldr	r2, [pc, #96]	; (800bfe0 <TIM_OC1_SetConfig+0x11c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d111      	bne.n	800bfa6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	697a      	ldr	r2, [r7, #20]
 800bfbe:	621a      	str	r2, [r3, #32]
}
 800bfc0:	bf00      	nop
 800bfc2:	371c      	adds	r7, #28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	fffeff8f 	.word	0xfffeff8f
 800bfd0:	40010000 	.word	0x40010000
 800bfd4:	40010400 	.word	0x40010400
 800bfd8:	40014000 	.word	0x40014000
 800bfdc:	40014400 	.word	0x40014400
 800bfe0:	40014800 	.word	0x40014800

0800bfe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f023 0210 	bic.w	r2, r3, #16
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	4b34      	ldr	r3, [pc, #208]	; (800c0e0 <TIM_OC2_SetConfig+0xfc>)
 800c010:	4013      	ands	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	021b      	lsls	r3, r3, #8
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	4313      	orrs	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f023 0320 	bic.w	r3, r3, #32
 800c02e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	4313      	orrs	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a29      	ldr	r2, [pc, #164]	; (800c0e4 <TIM_OC2_SetConfig+0x100>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d003      	beq.n	800c04c <TIM_OC2_SetConfig+0x68>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a28      	ldr	r2, [pc, #160]	; (800c0e8 <TIM_OC2_SetConfig+0x104>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d10d      	bne.n	800c068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	011b      	lsls	r3, r3, #4
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a1e      	ldr	r2, [pc, #120]	; (800c0e4 <TIM_OC2_SetConfig+0x100>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d00f      	beq.n	800c090 <TIM_OC2_SetConfig+0xac>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a1d      	ldr	r2, [pc, #116]	; (800c0e8 <TIM_OC2_SetConfig+0x104>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d00b      	beq.n	800c090 <TIM_OC2_SetConfig+0xac>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a1c      	ldr	r2, [pc, #112]	; (800c0ec <TIM_OC2_SetConfig+0x108>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d007      	beq.n	800c090 <TIM_OC2_SetConfig+0xac>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a1b      	ldr	r2, [pc, #108]	; (800c0f0 <TIM_OC2_SetConfig+0x10c>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d003      	beq.n	800c090 <TIM_OC2_SetConfig+0xac>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a1a      	ldr	r2, [pc, #104]	; (800c0f4 <TIM_OC2_SetConfig+0x110>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d113      	bne.n	800c0b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c09e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	621a      	str	r2, [r3, #32]
}
 800c0d2:	bf00      	nop
 800c0d4:	371c      	adds	r7, #28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	feff8fff 	.word	0xfeff8fff
 800c0e4:	40010000 	.word	0x40010000
 800c0e8:	40010400 	.word	0x40010400
 800c0ec:	40014000 	.word	0x40014000
 800c0f0:	40014400 	.word	0x40014400
 800c0f4:	40014800 	.word	0x40014800

0800c0f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4b33      	ldr	r3, [pc, #204]	; (800c1f0 <TIM_OC3_SetConfig+0xf8>)
 800c124:	4013      	ands	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 0303 	bic.w	r3, r3, #3
 800c12e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4313      	orrs	r3, r2
 800c138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	021b      	lsls	r3, r3, #8
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a28      	ldr	r2, [pc, #160]	; (800c1f4 <TIM_OC3_SetConfig+0xfc>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d003      	beq.n	800c15e <TIM_OC3_SetConfig+0x66>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a27      	ldr	r2, [pc, #156]	; (800c1f8 <TIM_OC3_SetConfig+0x100>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d10d      	bne.n	800c17a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	021b      	lsls	r3, r3, #8
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	4313      	orrs	r3, r2
 800c170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a1d      	ldr	r2, [pc, #116]	; (800c1f4 <TIM_OC3_SetConfig+0xfc>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00f      	beq.n	800c1a2 <TIM_OC3_SetConfig+0xaa>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a1c      	ldr	r2, [pc, #112]	; (800c1f8 <TIM_OC3_SetConfig+0x100>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d00b      	beq.n	800c1a2 <TIM_OC3_SetConfig+0xaa>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a1b      	ldr	r2, [pc, #108]	; (800c1fc <TIM_OC3_SetConfig+0x104>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d007      	beq.n	800c1a2 <TIM_OC3_SetConfig+0xaa>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a1a      	ldr	r2, [pc, #104]	; (800c200 <TIM_OC3_SetConfig+0x108>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d003      	beq.n	800c1a2 <TIM_OC3_SetConfig+0xaa>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a19      	ldr	r2, [pc, #100]	; (800c204 <TIM_OC3_SetConfig+0x10c>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d113      	bne.n	800c1ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	011b      	lsls	r3, r3, #4
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	621a      	str	r2, [r3, #32]
}
 800c1e4:	bf00      	nop
 800c1e6:	371c      	adds	r7, #28
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	fffeff8f 	.word	0xfffeff8f
 800c1f4:	40010000 	.word	0x40010000
 800c1f8:	40010400 	.word	0x40010400
 800c1fc:	40014000 	.word	0x40014000
 800c200:	40014400 	.word	0x40014400
 800c204:	40014800 	.word	0x40014800

0800c208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	4b24      	ldr	r3, [pc, #144]	; (800c2c4 <TIM_OC4_SetConfig+0xbc>)
 800c234:	4013      	ands	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	4313      	orrs	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	031b      	lsls	r3, r3, #12
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a19      	ldr	r2, [pc, #100]	; (800c2c8 <TIM_OC4_SetConfig+0xc0>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d00f      	beq.n	800c288 <TIM_OC4_SetConfig+0x80>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a18      	ldr	r2, [pc, #96]	; (800c2cc <TIM_OC4_SetConfig+0xc4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d00b      	beq.n	800c288 <TIM_OC4_SetConfig+0x80>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a17      	ldr	r2, [pc, #92]	; (800c2d0 <TIM_OC4_SetConfig+0xc8>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d007      	beq.n	800c288 <TIM_OC4_SetConfig+0x80>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a16      	ldr	r2, [pc, #88]	; (800c2d4 <TIM_OC4_SetConfig+0xcc>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d003      	beq.n	800c288 <TIM_OC4_SetConfig+0x80>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a15      	ldr	r2, [pc, #84]	; (800c2d8 <TIM_OC4_SetConfig+0xd0>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d109      	bne.n	800c29c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c28e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	019b      	lsls	r3, r3, #6
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	4313      	orrs	r3, r2
 800c29a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	621a      	str	r2, [r3, #32]
}
 800c2b6:	bf00      	nop
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	feff8fff 	.word	0xfeff8fff
 800c2c8:	40010000 	.word	0x40010000
 800c2cc:	40010400 	.word	0x40010400
 800c2d0:	40014000 	.word	0x40014000
 800c2d4:	40014400 	.word	0x40014400
 800c2d8:	40014800 	.word	0x40014800

0800c2dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	4b21      	ldr	r3, [pc, #132]	; (800c38c <TIM_OC5_SetConfig+0xb0>)
 800c308:	4013      	ands	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c31c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	4313      	orrs	r3, r2
 800c328:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a18      	ldr	r2, [pc, #96]	; (800c390 <TIM_OC5_SetConfig+0xb4>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00f      	beq.n	800c352 <TIM_OC5_SetConfig+0x76>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a17      	ldr	r2, [pc, #92]	; (800c394 <TIM_OC5_SetConfig+0xb8>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d00b      	beq.n	800c352 <TIM_OC5_SetConfig+0x76>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a16      	ldr	r2, [pc, #88]	; (800c398 <TIM_OC5_SetConfig+0xbc>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d007      	beq.n	800c352 <TIM_OC5_SetConfig+0x76>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a15      	ldr	r2, [pc, #84]	; (800c39c <TIM_OC5_SetConfig+0xc0>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d003      	beq.n	800c352 <TIM_OC5_SetConfig+0x76>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a14      	ldr	r2, [pc, #80]	; (800c3a0 <TIM_OC5_SetConfig+0xc4>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d109      	bne.n	800c366 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c358:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	4313      	orrs	r3, r2
 800c364:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	621a      	str	r2, [r3, #32]
}
 800c380:	bf00      	nop
 800c382:	371c      	adds	r7, #28
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	fffeff8f 	.word	0xfffeff8f
 800c390:	40010000 	.word	0x40010000
 800c394:	40010400 	.word	0x40010400
 800c398:	40014000 	.word	0x40014000
 800c39c:	40014400 	.word	0x40014400
 800c3a0:	40014800 	.word	0x40014800

0800c3a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4b22      	ldr	r3, [pc, #136]	; (800c458 <TIM_OC6_SetConfig+0xb4>)
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	021b      	lsls	r3, r3, #8
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	051b      	lsls	r3, r3, #20
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a19      	ldr	r2, [pc, #100]	; (800c45c <TIM_OC6_SetConfig+0xb8>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d00f      	beq.n	800c41c <TIM_OC6_SetConfig+0x78>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a18      	ldr	r2, [pc, #96]	; (800c460 <TIM_OC6_SetConfig+0xbc>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d00b      	beq.n	800c41c <TIM_OC6_SetConfig+0x78>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a17      	ldr	r2, [pc, #92]	; (800c464 <TIM_OC6_SetConfig+0xc0>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d007      	beq.n	800c41c <TIM_OC6_SetConfig+0x78>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a16      	ldr	r2, [pc, #88]	; (800c468 <TIM_OC6_SetConfig+0xc4>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d003      	beq.n	800c41c <TIM_OC6_SetConfig+0x78>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a15      	ldr	r2, [pc, #84]	; (800c46c <TIM_OC6_SetConfig+0xc8>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d109      	bne.n	800c430 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	029b      	lsls	r3, r3, #10
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	685a      	ldr	r2, [r3, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	621a      	str	r2, [r3, #32]
}
 800c44a:	bf00      	nop
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	feff8fff 	.word	0xfeff8fff
 800c45c:	40010000 	.word	0x40010000
 800c460:	40010400 	.word	0x40010400
 800c464:	40014000 	.word	0x40014000
 800c468:	40014400 	.word	0x40014400
 800c46c:	40014800 	.word	0x40014800

0800c470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c470:	b480      	push	{r7}
 800c472:	b087      	sub	sp, #28
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6a1b      	ldr	r3, [r3, #32]
 800c480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	f023 0201 	bic.w	r2, r3, #1
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	699b      	ldr	r3, [r3, #24]
 800c492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c49a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	011b      	lsls	r3, r3, #4
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f023 030a 	bic.w	r3, r3, #10
 800c4ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c4ae:	697a      	ldr	r2, [r7, #20]
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	621a      	str	r2, [r3, #32]
}
 800c4c2:	bf00      	nop
 800c4c4:	371c      	adds	r7, #28
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b087      	sub	sp, #28
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	60b9      	str	r1, [r7, #8]
 800c4d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	f023 0210 	bic.w	r2, r3, #16
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	031b      	lsls	r3, r3, #12
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	4313      	orrs	r3, r2
 800c502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c50a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	011b      	lsls	r3, r3, #4
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	4313      	orrs	r3, r2
 800c514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	621a      	str	r2, [r3, #32]
}
 800c522:	bf00      	nop
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
	...

0800c530 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4b09      	ldr	r3, [pc, #36]	; (800c568 <TIM_ITRx_SetConfig+0x38>)
 800c544:	4013      	ands	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	f043 0307 	orr.w	r3, r3, #7
 800c552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	609a      	str	r2, [r3, #8]
}
 800c55a:	bf00      	nop
 800c55c:	3714      	adds	r7, #20
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	ffcfff8f 	.word	0xffcfff8f

0800c56c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	021a      	lsls	r2, r3, #8
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	431a      	orrs	r2, r3
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	4313      	orrs	r3, r2
 800c594:	697a      	ldr	r2, [r7, #20]
 800c596:	4313      	orrs	r3, r2
 800c598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	609a      	str	r2, [r3, #8]
}
 800c5a0:	bf00      	nop
 800c5a2:	371c      	adds	r7, #28
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f003 031f 	and.w	r3, r3, #31
 800c5be:	2201      	movs	r2, #1
 800c5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a1a      	ldr	r2, [r3, #32]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	43db      	mvns	r3, r3
 800c5ce:	401a      	ands	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6a1a      	ldr	r2, [r3, #32]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f003 031f 	and.w	r3, r3, #31
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	621a      	str	r2, [r3, #32]
}
 800c5ea:	bf00      	nop
 800c5ec:	371c      	adds	r7, #28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d101      	bne.n	800c610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c60c:	2302      	movs	r3, #2
 800c60e:	e06d      	b.n	800c6ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2202      	movs	r2, #2
 800c61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a30      	ldr	r2, [pc, #192]	; (800c6f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d004      	beq.n	800c644 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a2f      	ldr	r2, [pc, #188]	; (800c6fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d108      	bne.n	800c656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c64a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4313      	orrs	r3, r2
 800c654:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c65c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a20      	ldr	r2, [pc, #128]	; (800c6f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d022      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c682:	d01d      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a1d      	ldr	r2, [pc, #116]	; (800c700 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d018      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a1c      	ldr	r2, [pc, #112]	; (800c704 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d013      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a1a      	ldr	r2, [pc, #104]	; (800c708 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d00e      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a15      	ldr	r2, [pc, #84]	; (800c6fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d009      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a16      	ldr	r2, [pc, #88]	; (800c70c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d004      	beq.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a15      	ldr	r2, [pc, #84]	; (800c710 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d10c      	bne.n	800c6da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	40010000 	.word	0x40010000
 800c6fc:	40010400 	.word	0x40010400
 800c700:	40000400 	.word	0x40000400
 800c704:	40000800 	.word	0x40000800
 800c708:	40000c00 	.word	0x40000c00
 800c70c:	40001800 	.word	0x40001800
 800c710:	40014000 	.word	0x40014000

0800c714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c71e:	2300      	movs	r3, #0
 800c720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d101      	bne.n	800c730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c72c:	2302      	movs	r3, #2
 800c72e:	e065      	b.n	800c7fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c796:	4313      	orrs	r3, r2
 800c798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	041b      	lsls	r3, r3, #16
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a16      	ldr	r2, [pc, #88]	; (800c808 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d004      	beq.n	800c7be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a14      	ldr	r2, [pc, #80]	; (800c80c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d115      	bne.n	800c7ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c8:	051b      	lsls	r3, r3, #20
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	69db      	ldr	r3, [r3, #28]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	40010000 	.word	0x40010000
 800c80c:	40010400 	.word	0x40010400

0800c810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e042      	b.n	800c8e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c864:	2b00      	cmp	r3, #0
 800c866:	d106      	bne.n	800c876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7f8 faa3 	bl	8004dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2224      	movs	r2, #36	; 0x24
 800c87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f022 0201 	bic.w	r2, r2, #1
 800c88c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fdee 	bl	800d470 <UART_SetConfig>
 800c894:	4603      	mov	r3, r0
 800c896:	2b01      	cmp	r3, #1
 800c898:	d101      	bne.n	800c89e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e022      	b.n	800c8e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f001 fb42 	bl	800df30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	689a      	ldr	r2, [r3, #8]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f042 0201 	orr.w	r2, r2, #1
 800c8da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f001 fbc9 	bl	800e074 <UART_CheckIdleState>
 800c8e2:	4603      	mov	r3, r0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08a      	sub	sp, #40	; 0x28
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	603b      	str	r3, [r7, #0]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c902:	2b20      	cmp	r3, #32
 800c904:	f040 8083 	bne.w	800ca0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <HAL_UART_Transmit+0x28>
 800c90e:	88fb      	ldrh	r3, [r7, #6]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e07b      	b.n	800ca10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d101      	bne.n	800c926 <HAL_UART_Transmit+0x3a>
 800c922:	2302      	movs	r3, #2
 800c924:	e074      	b.n	800ca10 <HAL_UART_Transmit+0x124>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2221      	movs	r2, #33	; 0x21
 800c93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c93e:	f7f8 fd23 	bl	8005388 <HAL_GetTick>
 800c942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	88fa      	ldrh	r2, [r7, #6]
 800c948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	88fa      	ldrh	r2, [r7, #6]
 800c950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c95c:	d108      	bne.n	800c970 <HAL_UART_Transmit+0x84>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d104      	bne.n	800c970 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c966:	2300      	movs	r3, #0
 800c968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	61bb      	str	r3, [r7, #24]
 800c96e:	e003      	b.n	800c978 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c974:	2300      	movs	r3, #0
 800c976:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c980:	e02c      	b.n	800c9dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2200      	movs	r2, #0
 800c98a:	2180      	movs	r1, #128	; 0x80
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f001 fbbc 	bl	800e10a <UART_WaitOnFlagUntilTimeout>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c998:	2303      	movs	r3, #3
 800c99a:	e039      	b.n	800ca10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10b      	bne.n	800c9ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	3302      	adds	r3, #2
 800c9b6:	61bb      	str	r3, [r7, #24]
 800c9b8:	e007      	b.n	800c9ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	781a      	ldrb	r2, [r3, #0]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1cc      	bne.n	800c982 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2140      	movs	r1, #64	; 0x40
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f001 fb89 	bl	800e10a <UART_WaitOnFlagUntilTimeout>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e006      	b.n	800ca10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e000      	b.n	800ca10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ca0e:	2302      	movs	r3, #2
  }
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3720      	adds	r7, #32
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08a      	sub	sp, #40	; 0x28
 800ca1c:	af02      	add	r7, sp, #8
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	4613      	mov	r3, r2
 800ca26:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	f040 80c0 	bne.w	800cbb4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d002      	beq.n	800ca40 <HAL_UART_Receive+0x28>
 800ca3a:	88fb      	ldrh	r3, [r7, #6]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e0b8      	b.n	800cbb6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d101      	bne.n	800ca52 <HAL_UART_Receive+0x3a>
 800ca4e:	2302      	movs	r3, #2
 800ca50:	e0b1      	b.n	800cbb6 <HAL_UART_Receive+0x19e>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2222      	movs	r2, #34	; 0x22
 800ca66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca70:	f7f8 fc8a 	bl	8005388 <HAL_GetTick>
 800ca74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	88fa      	ldrh	r2, [r7, #6]
 800ca7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	88fa      	ldrh	r2, [r7, #6]
 800ca82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca8e:	d10e      	bne.n	800caae <HAL_UART_Receive+0x96>
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d105      	bne.n	800caa4 <HAL_UART_Receive+0x8c>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ca9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800caa2:	e02d      	b.n	800cb00 <HAL_UART_Receive+0xe8>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	22ff      	movs	r2, #255	; 0xff
 800caa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800caac:	e028      	b.n	800cb00 <HAL_UART_Receive+0xe8>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10d      	bne.n	800cad2 <HAL_UART_Receive+0xba>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d104      	bne.n	800cac8 <HAL_UART_Receive+0xb0>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	22ff      	movs	r2, #255	; 0xff
 800cac2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cac6:	e01b      	b.n	800cb00 <HAL_UART_Receive+0xe8>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	227f      	movs	r2, #127	; 0x7f
 800cacc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cad0:	e016      	b.n	800cb00 <HAL_UART_Receive+0xe8>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cada:	d10d      	bne.n	800caf8 <HAL_UART_Receive+0xe0>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d104      	bne.n	800caee <HAL_UART_Receive+0xd6>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	227f      	movs	r2, #127	; 0x7f
 800cae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800caec:	e008      	b.n	800cb00 <HAL_UART_Receive+0xe8>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	223f      	movs	r2, #63	; 0x3f
 800caf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800caf6:	e003      	b.n	800cb00 <HAL_UART_Receive+0xe8>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb06:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb10:	d108      	bne.n	800cb24 <HAL_UART_Receive+0x10c>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d104      	bne.n	800cb24 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	e003      	b.n	800cb2c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cb34:	e032      	b.n	800cb9c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2120      	movs	r1, #32
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f001 fae2 	bl	800e10a <UART_WaitOnFlagUntilTimeout>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e032      	b.n	800cbb6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10c      	bne.n	800cb70 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	8a7b      	ldrh	r3, [r7, #18]
 800cb60:	4013      	ands	r3, r2
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	3302      	adds	r3, #2
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	e00c      	b.n	800cb8a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	8a7b      	ldrh	r3, [r7, #18]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	3301      	adds	r3, #1
 800cb88:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	3b01      	subs	r3, #1
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1c6      	bne.n	800cb36 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2220      	movs	r2, #32
 800cbac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	e000      	b.n	800cbb6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800cbb4:	2302      	movs	r3, #2
  }
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3720      	adds	r7, #32
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08a      	sub	sp, #40	; 0x28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d17a      	bne.n	800ccce <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d002      	beq.n	800cbe4 <HAL_UART_Transmit_DMA+0x24>
 800cbde:	88fb      	ldrh	r3, [r7, #6]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e073      	b.n	800ccd0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d101      	bne.n	800cbf6 <HAL_UART_Transmit_DMA+0x36>
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	e06c      	b.n	800ccd0 <HAL_UART_Transmit_DMA+0x110>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	88fa      	ldrh	r2, [r7, #6]
 800cc08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	88fa      	ldrh	r2, [r7, #6]
 800cc10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2221      	movs	r2, #33	; 0x21
 800cc20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d02c      	beq.n	800cc86 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc30:	4a29      	ldr	r2, [pc, #164]	; (800ccd8 <HAL_UART_Transmit_DMA+0x118>)
 800cc32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc38:	4a28      	ldr	r2, [pc, #160]	; (800ccdc <HAL_UART_Transmit_DMA+0x11c>)
 800cc3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc40:	4a27      	ldr	r2, [pc, #156]	; (800cce0 <HAL_UART_Transmit_DMA+0x120>)
 800cc42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc48:	2200      	movs	r2, #0
 800cc4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc54:	4619      	mov	r1, r3
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3328      	adds	r3, #40	; 0x28
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	88fb      	ldrh	r3, [r7, #6]
 800cc60:	f7f9 fa44 	bl	80060ec <HAL_DMA_Start_IT>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00d      	beq.n	800cc86 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2210      	movs	r2, #16
 800cc6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e024      	b.n	800ccd0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2240      	movs	r2, #64	; 0x40
 800cc8c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	e853 3f00 	ldrex	r3, [r3]
 800cca4:	613b      	str	r3, [r7, #16]
   return(result);
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccac:	627b      	str	r3, [r7, #36]	; 0x24
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccb6:	623a      	str	r2, [r7, #32]
 800ccb8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccba:	69f9      	ldr	r1, [r7, #28]
 800ccbc:	6a3a      	ldr	r2, [r7, #32]
 800ccbe:	e841 2300 	strex	r3, r2, [r1]
 800ccc2:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1e5      	bne.n	800cc96 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e000      	b.n	800ccd0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ccce:	2302      	movs	r3, #2
  }
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3728      	adds	r7, #40	; 0x28
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	0800e53d 	.word	0x0800e53d
 800ccdc:	0800e5d3 	.word	0x0800e5d3
 800cce0:	0800e749 	.word	0x0800e749

0800cce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b0ba      	sub	sp, #232	; 0xe8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cd0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800cd12:	4013      	ands	r3, r2
 800cd14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cd18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d11b      	bne.n	800cd58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd24:	f003 0320 	and.w	r3, r3, #32
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d015      	beq.n	800cd58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd30:	f003 0320 	and.w	r3, r3, #32
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d105      	bne.n	800cd44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d009      	beq.n	800cd58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 835a 	beq.w	800d402 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	4798      	blx	r3
      }
      return;
 800cd56:	e354      	b.n	800d402 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 811f 	beq.w	800cfa0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cd62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cd66:	4b8b      	ldr	r3, [pc, #556]	; (800cf94 <HAL_UART_IRQHandler+0x2b0>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cd6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cd72:	4b89      	ldr	r3, [pc, #548]	; (800cf98 <HAL_UART_IRQHandler+0x2b4>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 8112 	beq.w	800cfa0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d011      	beq.n	800cdac <HAL_UART_IRQHandler+0xc8>
 800cd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda2:	f043 0201 	orr.w	r2, r3, #1
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdb0:	f003 0302 	and.w	r3, r3, #2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d011      	beq.n	800cddc <HAL_UART_IRQHandler+0xf8>
 800cdb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00b      	beq.n	800cddc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2202      	movs	r2, #2
 800cdca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdd2:	f043 0204 	orr.w	r2, r3, #4
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cde0:	f003 0304 	and.w	r3, r3, #4
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d011      	beq.n	800ce0c <HAL_UART_IRQHandler+0x128>
 800cde8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00b      	beq.n	800ce0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2204      	movs	r2, #4
 800cdfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce02:	f043 0202 	orr.w	r2, r3, #2
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce10:	f003 0308 	and.w	r3, r3, #8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d017      	beq.n	800ce48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce1c:	f003 0320 	and.w	r3, r3, #32
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d105      	bne.n	800ce30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce28:	4b5a      	ldr	r3, [pc, #360]	; (800cf94 <HAL_UART_IRQHandler+0x2b0>)
 800ce2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2208      	movs	r2, #8
 800ce36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce3e:	f043 0208 	orr.w	r2, r3, #8
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d012      	beq.n	800ce7a <HAL_UART_IRQHandler+0x196>
 800ce54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00c      	beq.n	800ce7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce70:	f043 0220 	orr.w	r2, r3, #32
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 82c0 	beq.w	800d406 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce8a:	f003 0320 	and.w	r3, r3, #32
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d013      	beq.n	800ceba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce96:	f003 0320 	and.w	r3, r3, #32
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d105      	bne.n	800ceaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d007      	beq.n	800ceba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cece:	2b40      	cmp	r3, #64	; 0x40
 800ced0:	d005      	beq.n	800cede <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ced2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ced6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d04f      	beq.n	800cf7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f001 fac6 	bl	800e470 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceee:	2b40      	cmp	r3, #64	; 0x40
 800cef0:	d141      	bne.n	800cf76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3308      	adds	r3, #8
 800cef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf00:	e853 3f00 	ldrex	r3, [r3]
 800cf04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cf08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	3308      	adds	r3, #8
 800cf1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cf1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cf22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf2e:	e841 2300 	strex	r3, r2, [r1]
 800cf32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cf36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1d9      	bne.n	800cef2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d013      	beq.n	800cf6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4a:	4a14      	ldr	r2, [pc, #80]	; (800cf9c <HAL_UART_IRQHandler+0x2b8>)
 800cf4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7f9 fe52 	bl	8006bfc <HAL_DMA_Abort_IT>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d017      	beq.n	800cf8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cf68:	4610      	mov	r0, r2
 800cf6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf6c:	e00f      	b.n	800cf8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fa74 	bl	800d45c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf74:	e00b      	b.n	800cf8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa70 	bl	800d45c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf7c:	e007      	b.n	800cf8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fa6c 	bl	800d45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cf8c:	e23b      	b.n	800d406 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf8e:	bf00      	nop
    return;
 800cf90:	e239      	b.n	800d406 <HAL_UART_IRQHandler+0x722>
 800cf92:	bf00      	nop
 800cf94:	10000001 	.word	0x10000001
 800cf98:	04000120 	.word	0x04000120
 800cf9c:	0800e7c9 	.word	0x0800e7c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	f040 81ce 	bne.w	800d346 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cfaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfae:	f003 0310 	and.w	r3, r3, #16
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 81c7 	beq.w	800d346 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cfb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfbc:	f003 0310 	and.w	r3, r3, #16
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 81c0 	beq.w	800d346 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2210      	movs	r2, #16
 800cfcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd8:	2b40      	cmp	r3, #64	; 0x40
 800cfda:	f040 813b 	bne.w	800d254 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a8b      	ldr	r2, [pc, #556]	; (800d214 <HAL_UART_IRQHandler+0x530>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d059      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a89      	ldr	r2, [pc, #548]	; (800d218 <HAL_UART_IRQHandler+0x534>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d053      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a87      	ldr	r2, [pc, #540]	; (800d21c <HAL_UART_IRQHandler+0x538>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d04d      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a85      	ldr	r2, [pc, #532]	; (800d220 <HAL_UART_IRQHandler+0x53c>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d047      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a83      	ldr	r2, [pc, #524]	; (800d224 <HAL_UART_IRQHandler+0x540>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d041      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a81      	ldr	r2, [pc, #516]	; (800d228 <HAL_UART_IRQHandler+0x544>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d03b      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a7f      	ldr	r2, [pc, #508]	; (800d22c <HAL_UART_IRQHandler+0x548>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d035      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a7d      	ldr	r2, [pc, #500]	; (800d230 <HAL_UART_IRQHandler+0x54c>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d02f      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a7b      	ldr	r2, [pc, #492]	; (800d234 <HAL_UART_IRQHandler+0x550>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d029      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a79      	ldr	r2, [pc, #484]	; (800d238 <HAL_UART_IRQHandler+0x554>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d023      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a77      	ldr	r2, [pc, #476]	; (800d23c <HAL_UART_IRQHandler+0x558>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d01d      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a75      	ldr	r2, [pc, #468]	; (800d240 <HAL_UART_IRQHandler+0x55c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d017      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a73      	ldr	r2, [pc, #460]	; (800d244 <HAL_UART_IRQHandler+0x560>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d011      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a71      	ldr	r2, [pc, #452]	; (800d248 <HAL_UART_IRQHandler+0x564>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d00b      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a6f      	ldr	r2, [pc, #444]	; (800d24c <HAL_UART_IRQHandler+0x568>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d005      	beq.n	800d09e <HAL_UART_IRQHandler+0x3ba>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a6d      	ldr	r2, [pc, #436]	; (800d250 <HAL_UART_IRQHandler+0x56c>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d105      	bne.n	800d0aa <HAL_UART_IRQHandler+0x3c6>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	e004      	b.n	800d0b4 <HAL_UART_IRQHandler+0x3d0>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d0b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 81a4 	beq.w	800d40a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	f080 819c 	bcs.w	800d40a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e0:	69db      	ldr	r3, [r3, #28]
 800d0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0e6:	f000 8086 	beq.w	800d1f6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0f6:	e853 3f00 	ldrex	r3, [r3]
 800d0fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d0fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d118:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d120:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d12c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1da      	bne.n	800d0ea <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3308      	adds	r3, #8
 800d13a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d13e:	e853 3f00 	ldrex	r3, [r3]
 800d142:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d146:	f023 0301 	bic.w	r3, r3, #1
 800d14a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3308      	adds	r3, #8
 800d154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d158:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d15c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d160:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d164:	e841 2300 	strex	r3, r2, [r1]
 800d168:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d16a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1e1      	bne.n	800d134 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3308      	adds	r3, #8
 800d176:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d17a:	e853 3f00 	ldrex	r3, [r3]
 800d17e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3308      	adds	r3, #8
 800d190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d194:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d196:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d19a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d19c:	e841 2300 	strex	r3, r2, [r1]
 800d1a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d1a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e3      	bne.n	800d170 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1be:	e853 3f00 	ldrex	r3, [r3]
 800d1c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1c6:	f023 0310 	bic.w	r3, r3, #16
 800d1ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1e0:	e841 2300 	strex	r3, r2, [r1]
 800d1e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e4      	bne.n	800d1b6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f9 f9e5 	bl	80065c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d202:	b29b      	uxth	r3, r3
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	b29b      	uxth	r3, r3
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7f5 f89a 	bl	8002344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d210:	e0fb      	b.n	800d40a <HAL_UART_IRQHandler+0x726>
 800d212:	bf00      	nop
 800d214:	40020010 	.word	0x40020010
 800d218:	40020028 	.word	0x40020028
 800d21c:	40020040 	.word	0x40020040
 800d220:	40020058 	.word	0x40020058
 800d224:	40020070 	.word	0x40020070
 800d228:	40020088 	.word	0x40020088
 800d22c:	400200a0 	.word	0x400200a0
 800d230:	400200b8 	.word	0x400200b8
 800d234:	40020410 	.word	0x40020410
 800d238:	40020428 	.word	0x40020428
 800d23c:	40020440 	.word	0x40020440
 800d240:	40020458 	.word	0x40020458
 800d244:	40020470 	.word	0x40020470
 800d248:	40020488 	.word	0x40020488
 800d24c:	400204a0 	.word	0x400204a0
 800d250:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d260:	b29b      	uxth	r3, r3
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d26e:	b29b      	uxth	r3, r3
 800d270:	2b00      	cmp	r3, #0
 800d272:	f000 80cc 	beq.w	800d40e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 80c7 	beq.w	800d40e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d288:	e853 3f00 	ldrex	r3, [r3]
 800d28c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	461a      	mov	r2, r3
 800d29e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2a2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2aa:	e841 2300 	strex	r3, r2, [r1]
 800d2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1e4      	bne.n	800d280 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	e853 3f00 	ldrex	r3, [r3]
 800d2c4:	623b      	str	r3, [r7, #32]
   return(result);
 800d2c6:	6a3a      	ldr	r2, [r7, #32]
 800d2c8:	4b54      	ldr	r3, [pc, #336]	; (800d41c <HAL_UART_IRQHandler+0x738>)
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d2da:	633a      	str	r2, [r7, #48]	; 0x30
 800d2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e2:	e841 2300 	strex	r3, r2, [r1]
 800d2e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e3      	bne.n	800d2b6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	e853 3f00 	ldrex	r3, [r3]
 800d30e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f023 0310 	bic.w	r3, r3, #16
 800d316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	461a      	mov	r2, r3
 800d320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d324:	61fb      	str	r3, [r7, #28]
 800d326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d328:	69b9      	ldr	r1, [r7, #24]
 800d32a:	69fa      	ldr	r2, [r7, #28]
 800d32c:	e841 2300 	strex	r3, r2, [r1]
 800d330:	617b      	str	r3, [r7, #20]
   return(result);
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1e4      	bne.n	800d302 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7f5 f800 	bl	8002344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d344:	e063      	b.n	800d40e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d34a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <HAL_UART_IRQHandler+0x68c>
 800d352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d008      	beq.n	800d370 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f001 fa6e 	bl	800e84a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d36e:	e051      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d014      	beq.n	800d3a6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d384:	2b00      	cmp	r3, #0
 800d386:	d105      	bne.n	800d394 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d38c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d390:	2b00      	cmp	r3, #0
 800d392:	d008      	beq.n	800d3a6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d03a      	beq.n	800d412 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	4798      	blx	r3
    }
    return;
 800d3a4:	e035      	b.n	800d412 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d009      	beq.n	800d3c6 <HAL_UART_IRQHandler+0x6e2>
 800d3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f001 fa18 	bl	800e7f4 <UART_EndTransmit_IT>
    return;
 800d3c4:	e026      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d009      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x702>
 800d3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f001 fa47 	bl	800e872 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3e4:	e016      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d010      	beq.n	800d414 <HAL_UART_IRQHandler+0x730>
 800d3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	da0c      	bge.n	800d414 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f001 fa2f 	bl	800e85e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d400:	e008      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
      return;
 800d402:	bf00      	nop
 800d404:	e006      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
    return;
 800d406:	bf00      	nop
 800d408:	e004      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
      return;
 800d40a:	bf00      	nop
 800d40c:	e002      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
      return;
 800d40e:	bf00      	nop
 800d410:	e000      	b.n	800d414 <HAL_UART_IRQHandler+0x730>
    return;
 800d412:	bf00      	nop
  }
}
 800d414:	37e8      	adds	r7, #232	; 0xe8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	effffffe 	.word	0xeffffffe

0800d420 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d470:	b5b0      	push	{r4, r5, r7, lr}
 800d472:	b08e      	sub	sp, #56	; 0x38
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689a      	ldr	r2, [r3, #8]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	431a      	orrs	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	431a      	orrs	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	4313      	orrs	r3, r2
 800d494:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	4bbf      	ldr	r3, [pc, #764]	; (800d79c <UART_SetConfig+0x32c>)
 800d49e:	4013      	ands	r3, r2
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4a6:	430b      	orrs	r3, r1
 800d4a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	430a      	orrs	r2, r1
 800d4be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4ab5      	ldr	r2, [pc, #724]	; (800d7a0 <UART_SetConfig+0x330>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d004      	beq.n	800d4da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a1b      	ldr	r3, [r3, #32]
 800d4d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	689a      	ldr	r2, [r3, #8]
 800d4e0:	4bb0      	ldr	r3, [pc, #704]	; (800d7a4 <UART_SetConfig+0x334>)
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	6812      	ldr	r2, [r2, #0]
 800d4e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4ea:	430b      	orrs	r3, r1
 800d4ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f4:	f023 010f 	bic.w	r1, r3, #15
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	430a      	orrs	r2, r1
 800d502:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4aa7      	ldr	r2, [pc, #668]	; (800d7a8 <UART_SetConfig+0x338>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d176      	bne.n	800d5fc <UART_SetConfig+0x18c>
 800d50e:	4ba7      	ldr	r3, [pc, #668]	; (800d7ac <UART_SetConfig+0x33c>)
 800d510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d516:	2b28      	cmp	r3, #40	; 0x28
 800d518:	d86c      	bhi.n	800d5f4 <UART_SetConfig+0x184>
 800d51a:	a201      	add	r2, pc, #4	; (adr r2, 800d520 <UART_SetConfig+0xb0>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d5c5 	.word	0x0800d5c5
 800d524:	0800d5f5 	.word	0x0800d5f5
 800d528:	0800d5f5 	.word	0x0800d5f5
 800d52c:	0800d5f5 	.word	0x0800d5f5
 800d530:	0800d5f5 	.word	0x0800d5f5
 800d534:	0800d5f5 	.word	0x0800d5f5
 800d538:	0800d5f5 	.word	0x0800d5f5
 800d53c:	0800d5f5 	.word	0x0800d5f5
 800d540:	0800d5cd 	.word	0x0800d5cd
 800d544:	0800d5f5 	.word	0x0800d5f5
 800d548:	0800d5f5 	.word	0x0800d5f5
 800d54c:	0800d5f5 	.word	0x0800d5f5
 800d550:	0800d5f5 	.word	0x0800d5f5
 800d554:	0800d5f5 	.word	0x0800d5f5
 800d558:	0800d5f5 	.word	0x0800d5f5
 800d55c:	0800d5f5 	.word	0x0800d5f5
 800d560:	0800d5d5 	.word	0x0800d5d5
 800d564:	0800d5f5 	.word	0x0800d5f5
 800d568:	0800d5f5 	.word	0x0800d5f5
 800d56c:	0800d5f5 	.word	0x0800d5f5
 800d570:	0800d5f5 	.word	0x0800d5f5
 800d574:	0800d5f5 	.word	0x0800d5f5
 800d578:	0800d5f5 	.word	0x0800d5f5
 800d57c:	0800d5f5 	.word	0x0800d5f5
 800d580:	0800d5dd 	.word	0x0800d5dd
 800d584:	0800d5f5 	.word	0x0800d5f5
 800d588:	0800d5f5 	.word	0x0800d5f5
 800d58c:	0800d5f5 	.word	0x0800d5f5
 800d590:	0800d5f5 	.word	0x0800d5f5
 800d594:	0800d5f5 	.word	0x0800d5f5
 800d598:	0800d5f5 	.word	0x0800d5f5
 800d59c:	0800d5f5 	.word	0x0800d5f5
 800d5a0:	0800d5e5 	.word	0x0800d5e5
 800d5a4:	0800d5f5 	.word	0x0800d5f5
 800d5a8:	0800d5f5 	.word	0x0800d5f5
 800d5ac:	0800d5f5 	.word	0x0800d5f5
 800d5b0:	0800d5f5 	.word	0x0800d5f5
 800d5b4:	0800d5f5 	.word	0x0800d5f5
 800d5b8:	0800d5f5 	.word	0x0800d5f5
 800d5bc:	0800d5f5 	.word	0x0800d5f5
 800d5c0:	0800d5ed 	.word	0x0800d5ed
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5ca:	e222      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5cc:	2304      	movs	r3, #4
 800d5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5d2:	e21e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5d4:	2308      	movs	r3, #8
 800d5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5da:	e21a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5dc:	2310      	movs	r3, #16
 800d5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5e2:	e216      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5e4:	2320      	movs	r3, #32
 800d5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5ea:	e212      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5ec:	2340      	movs	r3, #64	; 0x40
 800d5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5f2:	e20e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5f4:	2380      	movs	r3, #128	; 0x80
 800d5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5fa:	e20a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a6b      	ldr	r2, [pc, #428]	; (800d7b0 <UART_SetConfig+0x340>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d130      	bne.n	800d668 <UART_SetConfig+0x1f8>
 800d606:	4b69      	ldr	r3, [pc, #420]	; (800d7ac <UART_SetConfig+0x33c>)
 800d608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d60a:	f003 0307 	and.w	r3, r3, #7
 800d60e:	2b05      	cmp	r3, #5
 800d610:	d826      	bhi.n	800d660 <UART_SetConfig+0x1f0>
 800d612:	a201      	add	r2, pc, #4	; (adr r2, 800d618 <UART_SetConfig+0x1a8>)
 800d614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d618:	0800d631 	.word	0x0800d631
 800d61c:	0800d639 	.word	0x0800d639
 800d620:	0800d641 	.word	0x0800d641
 800d624:	0800d649 	.word	0x0800d649
 800d628:	0800d651 	.word	0x0800d651
 800d62c:	0800d659 	.word	0x0800d659
 800d630:	2300      	movs	r3, #0
 800d632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d636:	e1ec      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d638:	2304      	movs	r3, #4
 800d63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d63e:	e1e8      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d640:	2308      	movs	r3, #8
 800d642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d646:	e1e4      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d648:	2310      	movs	r3, #16
 800d64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d64e:	e1e0      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d650:	2320      	movs	r3, #32
 800d652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d656:	e1dc      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d658:	2340      	movs	r3, #64	; 0x40
 800d65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d65e:	e1d8      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d660:	2380      	movs	r3, #128	; 0x80
 800d662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d666:	e1d4      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a51      	ldr	r2, [pc, #324]	; (800d7b4 <UART_SetConfig+0x344>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d130      	bne.n	800d6d4 <UART_SetConfig+0x264>
 800d672:	4b4e      	ldr	r3, [pc, #312]	; (800d7ac <UART_SetConfig+0x33c>)
 800d674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	2b05      	cmp	r3, #5
 800d67c:	d826      	bhi.n	800d6cc <UART_SetConfig+0x25c>
 800d67e:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <UART_SetConfig+0x214>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d69d 	.word	0x0800d69d
 800d688:	0800d6a5 	.word	0x0800d6a5
 800d68c:	0800d6ad 	.word	0x0800d6ad
 800d690:	0800d6b5 	.word	0x0800d6b5
 800d694:	0800d6bd 	.word	0x0800d6bd
 800d698:	0800d6c5 	.word	0x0800d6c5
 800d69c:	2300      	movs	r3, #0
 800d69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6a2:	e1b6      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6a4:	2304      	movs	r3, #4
 800d6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6aa:	e1b2      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6ac:	2308      	movs	r3, #8
 800d6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6b2:	e1ae      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6b4:	2310      	movs	r3, #16
 800d6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ba:	e1aa      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6bc:	2320      	movs	r3, #32
 800d6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6c2:	e1a6      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6c4:	2340      	movs	r3, #64	; 0x40
 800d6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ca:	e1a2      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6cc:	2380      	movs	r3, #128	; 0x80
 800d6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6d2:	e19e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a37      	ldr	r2, [pc, #220]	; (800d7b8 <UART_SetConfig+0x348>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d130      	bne.n	800d740 <UART_SetConfig+0x2d0>
 800d6de:	4b33      	ldr	r3, [pc, #204]	; (800d7ac <UART_SetConfig+0x33c>)
 800d6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e2:	f003 0307 	and.w	r3, r3, #7
 800d6e6:	2b05      	cmp	r3, #5
 800d6e8:	d826      	bhi.n	800d738 <UART_SetConfig+0x2c8>
 800d6ea:	a201      	add	r2, pc, #4	; (adr r2, 800d6f0 <UART_SetConfig+0x280>)
 800d6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f0:	0800d709 	.word	0x0800d709
 800d6f4:	0800d711 	.word	0x0800d711
 800d6f8:	0800d719 	.word	0x0800d719
 800d6fc:	0800d721 	.word	0x0800d721
 800d700:	0800d729 	.word	0x0800d729
 800d704:	0800d731 	.word	0x0800d731
 800d708:	2300      	movs	r3, #0
 800d70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d70e:	e180      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d710:	2304      	movs	r3, #4
 800d712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d716:	e17c      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d718:	2308      	movs	r3, #8
 800d71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d71e:	e178      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d720:	2310      	movs	r3, #16
 800d722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d726:	e174      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d728:	2320      	movs	r3, #32
 800d72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d72e:	e170      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d730:	2340      	movs	r3, #64	; 0x40
 800d732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d736:	e16c      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d738:	2380      	movs	r3, #128	; 0x80
 800d73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d73e:	e168      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a1d      	ldr	r2, [pc, #116]	; (800d7bc <UART_SetConfig+0x34c>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d142      	bne.n	800d7d0 <UART_SetConfig+0x360>
 800d74a:	4b18      	ldr	r3, [pc, #96]	; (800d7ac <UART_SetConfig+0x33c>)
 800d74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d74e:	f003 0307 	and.w	r3, r3, #7
 800d752:	2b05      	cmp	r3, #5
 800d754:	d838      	bhi.n	800d7c8 <UART_SetConfig+0x358>
 800d756:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <UART_SetConfig+0x2ec>)
 800d758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75c:	0800d775 	.word	0x0800d775
 800d760:	0800d77d 	.word	0x0800d77d
 800d764:	0800d785 	.word	0x0800d785
 800d768:	0800d78d 	.word	0x0800d78d
 800d76c:	0800d795 	.word	0x0800d795
 800d770:	0800d7c1 	.word	0x0800d7c1
 800d774:	2300      	movs	r3, #0
 800d776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d77a:	e14a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d77c:	2304      	movs	r3, #4
 800d77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d782:	e146      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d784:	2308      	movs	r3, #8
 800d786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d78a:	e142      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d78c:	2310      	movs	r3, #16
 800d78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d792:	e13e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d794:	2320      	movs	r3, #32
 800d796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d79a:	e13a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d79c:	cfff69f3 	.word	0xcfff69f3
 800d7a0:	58000c00 	.word	0x58000c00
 800d7a4:	11fff4ff 	.word	0x11fff4ff
 800d7a8:	40011000 	.word	0x40011000
 800d7ac:	58024400 	.word	0x58024400
 800d7b0:	40004400 	.word	0x40004400
 800d7b4:	40004800 	.word	0x40004800
 800d7b8:	40004c00 	.word	0x40004c00
 800d7bc:	40005000 	.word	0x40005000
 800d7c0:	2340      	movs	r3, #64	; 0x40
 800d7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7c6:	e124      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d7c8:	2380      	movs	r3, #128	; 0x80
 800d7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ce:	e120      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4acc      	ldr	r2, [pc, #816]	; (800db08 <UART_SetConfig+0x698>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d176      	bne.n	800d8c8 <UART_SetConfig+0x458>
 800d7da:	4bcc      	ldr	r3, [pc, #816]	; (800db0c <UART_SetConfig+0x69c>)
 800d7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7e2:	2b28      	cmp	r3, #40	; 0x28
 800d7e4:	d86c      	bhi.n	800d8c0 <UART_SetConfig+0x450>
 800d7e6:	a201      	add	r2, pc, #4	; (adr r2, 800d7ec <UART_SetConfig+0x37c>)
 800d7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ec:	0800d891 	.word	0x0800d891
 800d7f0:	0800d8c1 	.word	0x0800d8c1
 800d7f4:	0800d8c1 	.word	0x0800d8c1
 800d7f8:	0800d8c1 	.word	0x0800d8c1
 800d7fc:	0800d8c1 	.word	0x0800d8c1
 800d800:	0800d8c1 	.word	0x0800d8c1
 800d804:	0800d8c1 	.word	0x0800d8c1
 800d808:	0800d8c1 	.word	0x0800d8c1
 800d80c:	0800d899 	.word	0x0800d899
 800d810:	0800d8c1 	.word	0x0800d8c1
 800d814:	0800d8c1 	.word	0x0800d8c1
 800d818:	0800d8c1 	.word	0x0800d8c1
 800d81c:	0800d8c1 	.word	0x0800d8c1
 800d820:	0800d8c1 	.word	0x0800d8c1
 800d824:	0800d8c1 	.word	0x0800d8c1
 800d828:	0800d8c1 	.word	0x0800d8c1
 800d82c:	0800d8a1 	.word	0x0800d8a1
 800d830:	0800d8c1 	.word	0x0800d8c1
 800d834:	0800d8c1 	.word	0x0800d8c1
 800d838:	0800d8c1 	.word	0x0800d8c1
 800d83c:	0800d8c1 	.word	0x0800d8c1
 800d840:	0800d8c1 	.word	0x0800d8c1
 800d844:	0800d8c1 	.word	0x0800d8c1
 800d848:	0800d8c1 	.word	0x0800d8c1
 800d84c:	0800d8a9 	.word	0x0800d8a9
 800d850:	0800d8c1 	.word	0x0800d8c1
 800d854:	0800d8c1 	.word	0x0800d8c1
 800d858:	0800d8c1 	.word	0x0800d8c1
 800d85c:	0800d8c1 	.word	0x0800d8c1
 800d860:	0800d8c1 	.word	0x0800d8c1
 800d864:	0800d8c1 	.word	0x0800d8c1
 800d868:	0800d8c1 	.word	0x0800d8c1
 800d86c:	0800d8b1 	.word	0x0800d8b1
 800d870:	0800d8c1 	.word	0x0800d8c1
 800d874:	0800d8c1 	.word	0x0800d8c1
 800d878:	0800d8c1 	.word	0x0800d8c1
 800d87c:	0800d8c1 	.word	0x0800d8c1
 800d880:	0800d8c1 	.word	0x0800d8c1
 800d884:	0800d8c1 	.word	0x0800d8c1
 800d888:	0800d8c1 	.word	0x0800d8c1
 800d88c:	0800d8b9 	.word	0x0800d8b9
 800d890:	2301      	movs	r3, #1
 800d892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d896:	e0bc      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d898:	2304      	movs	r3, #4
 800d89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d89e:	e0b8      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d8a0:	2308      	movs	r3, #8
 800d8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8a6:	e0b4      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d8a8:	2310      	movs	r3, #16
 800d8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8ae:	e0b0      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d8b0:	2320      	movs	r3, #32
 800d8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8b6:	e0ac      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d8b8:	2340      	movs	r3, #64	; 0x40
 800d8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8be:	e0a8      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d8c0:	2380      	movs	r3, #128	; 0x80
 800d8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8c6:	e0a4      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a90      	ldr	r2, [pc, #576]	; (800db10 <UART_SetConfig+0x6a0>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d130      	bne.n	800d934 <UART_SetConfig+0x4c4>
 800d8d2:	4b8e      	ldr	r3, [pc, #568]	; (800db0c <UART_SetConfig+0x69c>)
 800d8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d6:	f003 0307 	and.w	r3, r3, #7
 800d8da:	2b05      	cmp	r3, #5
 800d8dc:	d826      	bhi.n	800d92c <UART_SetConfig+0x4bc>
 800d8de:	a201      	add	r2, pc, #4	; (adr r2, 800d8e4 <UART_SetConfig+0x474>)
 800d8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e4:	0800d8fd 	.word	0x0800d8fd
 800d8e8:	0800d905 	.word	0x0800d905
 800d8ec:	0800d90d 	.word	0x0800d90d
 800d8f0:	0800d915 	.word	0x0800d915
 800d8f4:	0800d91d 	.word	0x0800d91d
 800d8f8:	0800d925 	.word	0x0800d925
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d902:	e086      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d904:	2304      	movs	r3, #4
 800d906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d90a:	e082      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d90c:	2308      	movs	r3, #8
 800d90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d912:	e07e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d914:	2310      	movs	r3, #16
 800d916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d91a:	e07a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d91c:	2320      	movs	r3, #32
 800d91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d922:	e076      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d92a:	e072      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d92c:	2380      	movs	r3, #128	; 0x80
 800d92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d932:	e06e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a76      	ldr	r2, [pc, #472]	; (800db14 <UART_SetConfig+0x6a4>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d130      	bne.n	800d9a0 <UART_SetConfig+0x530>
 800d93e:	4b73      	ldr	r3, [pc, #460]	; (800db0c <UART_SetConfig+0x69c>)
 800d940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d942:	f003 0307 	and.w	r3, r3, #7
 800d946:	2b05      	cmp	r3, #5
 800d948:	d826      	bhi.n	800d998 <UART_SetConfig+0x528>
 800d94a:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <UART_SetConfig+0x4e0>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d969 	.word	0x0800d969
 800d954:	0800d971 	.word	0x0800d971
 800d958:	0800d979 	.word	0x0800d979
 800d95c:	0800d981 	.word	0x0800d981
 800d960:	0800d989 	.word	0x0800d989
 800d964:	0800d991 	.word	0x0800d991
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d96e:	e050      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d970:	2304      	movs	r3, #4
 800d972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d976:	e04c      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d978:	2308      	movs	r3, #8
 800d97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d97e:	e048      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d980:	2310      	movs	r3, #16
 800d982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d986:	e044      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d988:	2320      	movs	r3, #32
 800d98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d98e:	e040      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d990:	2340      	movs	r3, #64	; 0x40
 800d992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d996:	e03c      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d998:	2380      	movs	r3, #128	; 0x80
 800d99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d99e:	e038      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a5c      	ldr	r2, [pc, #368]	; (800db18 <UART_SetConfig+0x6a8>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d130      	bne.n	800da0c <UART_SetConfig+0x59c>
 800d9aa:	4b58      	ldr	r3, [pc, #352]	; (800db0c <UART_SetConfig+0x69c>)
 800d9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9ae:	f003 0307 	and.w	r3, r3, #7
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d826      	bhi.n	800da04 <UART_SetConfig+0x594>
 800d9b6:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <UART_SetConfig+0x54c>)
 800d9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9bc:	0800d9d5 	.word	0x0800d9d5
 800d9c0:	0800d9dd 	.word	0x0800d9dd
 800d9c4:	0800d9e5 	.word	0x0800d9e5
 800d9c8:	0800d9ed 	.word	0x0800d9ed
 800d9cc:	0800d9f5 	.word	0x0800d9f5
 800d9d0:	0800d9fd 	.word	0x0800d9fd
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9da:	e01a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d9dc:	2304      	movs	r3, #4
 800d9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9e2:	e016      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d9e4:	2308      	movs	r3, #8
 800d9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ea:	e012      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d9ec:	2310      	movs	r3, #16
 800d9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9f2:	e00e      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d9f4:	2320      	movs	r3, #32
 800d9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9fa:	e00a      	b.n	800da12 <UART_SetConfig+0x5a2>
 800d9fc:	2340      	movs	r3, #64	; 0x40
 800d9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da02:	e006      	b.n	800da12 <UART_SetConfig+0x5a2>
 800da04:	2380      	movs	r3, #128	; 0x80
 800da06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da0a:	e002      	b.n	800da12 <UART_SetConfig+0x5a2>
 800da0c:	2380      	movs	r3, #128	; 0x80
 800da0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a40      	ldr	r2, [pc, #256]	; (800db18 <UART_SetConfig+0x6a8>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	f040 80ef 	bne.w	800dbfc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da22:	2b20      	cmp	r3, #32
 800da24:	dc46      	bgt.n	800dab4 <UART_SetConfig+0x644>
 800da26:	2b02      	cmp	r3, #2
 800da28:	f2c0 8081 	blt.w	800db2e <UART_SetConfig+0x6be>
 800da2c:	3b02      	subs	r3, #2
 800da2e:	2b1e      	cmp	r3, #30
 800da30:	d87d      	bhi.n	800db2e <UART_SetConfig+0x6be>
 800da32:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <UART_SetConfig+0x5c8>)
 800da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da38:	0800dabb 	.word	0x0800dabb
 800da3c:	0800db2f 	.word	0x0800db2f
 800da40:	0800dac3 	.word	0x0800dac3
 800da44:	0800db2f 	.word	0x0800db2f
 800da48:	0800db2f 	.word	0x0800db2f
 800da4c:	0800db2f 	.word	0x0800db2f
 800da50:	0800dad3 	.word	0x0800dad3
 800da54:	0800db2f 	.word	0x0800db2f
 800da58:	0800db2f 	.word	0x0800db2f
 800da5c:	0800db2f 	.word	0x0800db2f
 800da60:	0800db2f 	.word	0x0800db2f
 800da64:	0800db2f 	.word	0x0800db2f
 800da68:	0800db2f 	.word	0x0800db2f
 800da6c:	0800db2f 	.word	0x0800db2f
 800da70:	0800dae3 	.word	0x0800dae3
 800da74:	0800db2f 	.word	0x0800db2f
 800da78:	0800db2f 	.word	0x0800db2f
 800da7c:	0800db2f 	.word	0x0800db2f
 800da80:	0800db2f 	.word	0x0800db2f
 800da84:	0800db2f 	.word	0x0800db2f
 800da88:	0800db2f 	.word	0x0800db2f
 800da8c:	0800db2f 	.word	0x0800db2f
 800da90:	0800db2f 	.word	0x0800db2f
 800da94:	0800db2f 	.word	0x0800db2f
 800da98:	0800db2f 	.word	0x0800db2f
 800da9c:	0800db2f 	.word	0x0800db2f
 800daa0:	0800db2f 	.word	0x0800db2f
 800daa4:	0800db2f 	.word	0x0800db2f
 800daa8:	0800db2f 	.word	0x0800db2f
 800daac:	0800db2f 	.word	0x0800db2f
 800dab0:	0800db21 	.word	0x0800db21
 800dab4:	2b40      	cmp	r3, #64	; 0x40
 800dab6:	d036      	beq.n	800db26 <UART_SetConfig+0x6b6>
 800dab8:	e039      	b.n	800db2e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800daba:	f7fc ff0b 	bl	800a8d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800dabe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dac0:	e03b      	b.n	800db3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dac2:	f107 0314 	add.w	r3, r7, #20
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fc ff1a 	bl	800a900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dad0:	e033      	b.n	800db3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dad2:	f107 0308 	add.w	r3, r7, #8
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fd f866 	bl	800aba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dae0:	e02b      	b.n	800db3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dae2:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <UART_SetConfig+0x69c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f003 0320 	and.w	r3, r3, #32
 800daea:	2b00      	cmp	r3, #0
 800daec:	d009      	beq.n	800db02 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800daee:	4b07      	ldr	r3, [pc, #28]	; (800db0c <UART_SetConfig+0x69c>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	08db      	lsrs	r3, r3, #3
 800daf4:	f003 0303 	and.w	r3, r3, #3
 800daf8:	4a08      	ldr	r2, [pc, #32]	; (800db1c <UART_SetConfig+0x6ac>)
 800dafa:	fa22 f303 	lsr.w	r3, r2, r3
 800dafe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db00:	e01b      	b.n	800db3a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800db02:	4b06      	ldr	r3, [pc, #24]	; (800db1c <UART_SetConfig+0x6ac>)
 800db04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db06:	e018      	b.n	800db3a <UART_SetConfig+0x6ca>
 800db08:	40011400 	.word	0x40011400
 800db0c:	58024400 	.word	0x58024400
 800db10:	40007800 	.word	0x40007800
 800db14:	40007c00 	.word	0x40007c00
 800db18:	58000c00 	.word	0x58000c00
 800db1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db20:	4bc4      	ldr	r3, [pc, #784]	; (800de34 <UART_SetConfig+0x9c4>)
 800db22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db24:	e009      	b.n	800db3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db2c:	e005      	b.n	800db3a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800db2e:	2300      	movs	r3, #0
 800db30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800db38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f000 81da 	beq.w	800def6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db46:	4abc      	ldr	r2, [pc, #752]	; (800de38 <UART_SetConfig+0x9c8>)
 800db48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db4c:	461a      	mov	r2, r3
 800db4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db50:	fbb3 f3f2 	udiv	r3, r3, r2
 800db54:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	4613      	mov	r3, r2
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	4413      	add	r3, r2
 800db60:	6a3a      	ldr	r2, [r7, #32]
 800db62:	429a      	cmp	r2, r3
 800db64:	d305      	bcc.n	800db72 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db6c:	6a3a      	ldr	r2, [r7, #32]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d903      	bls.n	800db7a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800db78:	e1bd      	b.n	800def6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7c:	4618      	mov	r0, r3
 800db7e:	f04f 0100 	mov.w	r1, #0
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db86:	4aac      	ldr	r2, [pc, #688]	; (800de38 <UART_SetConfig+0x9c8>)
 800db88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	f04f 0300 	mov.w	r3, #0
 800db92:	f7f2 fbfd 	bl	8000390 <__aeabi_uldivmod>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4610      	mov	r0, r2
 800db9c:	4619      	mov	r1, r3
 800db9e:	f04f 0200 	mov.w	r2, #0
 800dba2:	f04f 0300 	mov.w	r3, #0
 800dba6:	020b      	lsls	r3, r1, #8
 800dba8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dbac:	0202      	lsls	r2, r0, #8
 800dbae:	6879      	ldr	r1, [r7, #4]
 800dbb0:	6849      	ldr	r1, [r1, #4]
 800dbb2:	0849      	lsrs	r1, r1, #1
 800dbb4:	4608      	mov	r0, r1
 800dbb6:	f04f 0100 	mov.w	r1, #0
 800dbba:	1814      	adds	r4, r2, r0
 800dbbc:	eb43 0501 	adc.w	r5, r3, r1
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	f04f 0300 	mov.w	r3, #0
 800dbca:	4620      	mov	r0, r4
 800dbcc:	4629      	mov	r1, r5
 800dbce:	f7f2 fbdf 	bl	8000390 <__aeabi_uldivmod>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dbe0:	d308      	bcc.n	800dbf4 <UART_SetConfig+0x784>
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbe8:	d204      	bcs.n	800dbf4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf0:	60da      	str	r2, [r3, #12]
 800dbf2:	e180      	b.n	800def6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dbfa:	e17c      	b.n	800def6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69db      	ldr	r3, [r3, #28]
 800dc00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc04:	f040 80be 	bne.w	800dd84 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800dc08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc0c:	2b20      	cmp	r3, #32
 800dc0e:	dc49      	bgt.n	800dca4 <UART_SetConfig+0x834>
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	db7c      	blt.n	800dd0e <UART_SetConfig+0x89e>
 800dc14:	2b20      	cmp	r3, #32
 800dc16:	d87a      	bhi.n	800dd0e <UART_SetConfig+0x89e>
 800dc18:	a201      	add	r2, pc, #4	; (adr r2, 800dc20 <UART_SetConfig+0x7b0>)
 800dc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1e:	bf00      	nop
 800dc20:	0800dcab 	.word	0x0800dcab
 800dc24:	0800dcb3 	.word	0x0800dcb3
 800dc28:	0800dd0f 	.word	0x0800dd0f
 800dc2c:	0800dd0f 	.word	0x0800dd0f
 800dc30:	0800dcbb 	.word	0x0800dcbb
 800dc34:	0800dd0f 	.word	0x0800dd0f
 800dc38:	0800dd0f 	.word	0x0800dd0f
 800dc3c:	0800dd0f 	.word	0x0800dd0f
 800dc40:	0800dccb 	.word	0x0800dccb
 800dc44:	0800dd0f 	.word	0x0800dd0f
 800dc48:	0800dd0f 	.word	0x0800dd0f
 800dc4c:	0800dd0f 	.word	0x0800dd0f
 800dc50:	0800dd0f 	.word	0x0800dd0f
 800dc54:	0800dd0f 	.word	0x0800dd0f
 800dc58:	0800dd0f 	.word	0x0800dd0f
 800dc5c:	0800dd0f 	.word	0x0800dd0f
 800dc60:	0800dcdb 	.word	0x0800dcdb
 800dc64:	0800dd0f 	.word	0x0800dd0f
 800dc68:	0800dd0f 	.word	0x0800dd0f
 800dc6c:	0800dd0f 	.word	0x0800dd0f
 800dc70:	0800dd0f 	.word	0x0800dd0f
 800dc74:	0800dd0f 	.word	0x0800dd0f
 800dc78:	0800dd0f 	.word	0x0800dd0f
 800dc7c:	0800dd0f 	.word	0x0800dd0f
 800dc80:	0800dd0f 	.word	0x0800dd0f
 800dc84:	0800dd0f 	.word	0x0800dd0f
 800dc88:	0800dd0f 	.word	0x0800dd0f
 800dc8c:	0800dd0f 	.word	0x0800dd0f
 800dc90:	0800dd0f 	.word	0x0800dd0f
 800dc94:	0800dd0f 	.word	0x0800dd0f
 800dc98:	0800dd0f 	.word	0x0800dd0f
 800dc9c:	0800dd0f 	.word	0x0800dd0f
 800dca0:	0800dd01 	.word	0x0800dd01
 800dca4:	2b40      	cmp	r3, #64	; 0x40
 800dca6:	d02e      	beq.n	800dd06 <UART_SetConfig+0x896>
 800dca8:	e031      	b.n	800dd0e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcaa:	f7fb fea7 	bl	80099fc <HAL_RCC_GetPCLK1Freq>
 800dcae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dcb0:	e033      	b.n	800dd1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcb2:	f7fb feb9 	bl	8009a28 <HAL_RCC_GetPCLK2Freq>
 800dcb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dcb8:	e02f      	b.n	800dd1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcba:	f107 0314 	add.w	r3, r7, #20
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fc fe1e 	bl	800a900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dcc8:	e027      	b.n	800dd1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcca:	f107 0308 	add.w	r3, r7, #8
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fc ff6a 	bl	800aba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dcd8:	e01f      	b.n	800dd1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcda:	4b58      	ldr	r3, [pc, #352]	; (800de3c <UART_SetConfig+0x9cc>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f003 0320 	and.w	r3, r3, #32
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d009      	beq.n	800dcfa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dce6:	4b55      	ldr	r3, [pc, #340]	; (800de3c <UART_SetConfig+0x9cc>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	08db      	lsrs	r3, r3, #3
 800dcec:	f003 0303 	and.w	r3, r3, #3
 800dcf0:	4a53      	ldr	r2, [pc, #332]	; (800de40 <UART_SetConfig+0x9d0>)
 800dcf2:	fa22 f303 	lsr.w	r3, r2, r3
 800dcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dcf8:	e00f      	b.n	800dd1a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800dcfa:	4b51      	ldr	r3, [pc, #324]	; (800de40 <UART_SetConfig+0x9d0>)
 800dcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dcfe:	e00c      	b.n	800dd1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd00:	4b4c      	ldr	r3, [pc, #304]	; (800de34 <UART_SetConfig+0x9c4>)
 800dd02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd04:	e009      	b.n	800dd1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd0c:	e005      	b.n	800dd1a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dd18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f000 80ea 	beq.w	800def6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd26:	4a44      	ldr	r2, [pc, #272]	; (800de38 <UART_SetConfig+0x9c8>)
 800dd28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd30:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd34:	005a      	lsls	r2, r3, #1
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	085b      	lsrs	r3, r3, #1
 800dd3c:	441a      	add	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	2b0f      	cmp	r3, #15
 800dd4c:	d916      	bls.n	800dd7c <UART_SetConfig+0x90c>
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd54:	d212      	bcs.n	800dd7c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f023 030f 	bic.w	r3, r3, #15
 800dd5e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	085b      	lsrs	r3, r3, #1
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	f003 0307 	and.w	r3, r3, #7
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd78:	60da      	str	r2, [r3, #12]
 800dd7a:	e0bc      	b.n	800def6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dd82:	e0b8      	b.n	800def6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd88:	2b20      	cmp	r3, #32
 800dd8a:	dc4b      	bgt.n	800de24 <UART_SetConfig+0x9b4>
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f2c0 8087 	blt.w	800dea0 <UART_SetConfig+0xa30>
 800dd92:	2b20      	cmp	r3, #32
 800dd94:	f200 8084 	bhi.w	800dea0 <UART_SetConfig+0xa30>
 800dd98:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <UART_SetConfig+0x930>)
 800dd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9e:	bf00      	nop
 800dda0:	0800de2b 	.word	0x0800de2b
 800dda4:	0800de45 	.word	0x0800de45
 800dda8:	0800dea1 	.word	0x0800dea1
 800ddac:	0800dea1 	.word	0x0800dea1
 800ddb0:	0800de4d 	.word	0x0800de4d
 800ddb4:	0800dea1 	.word	0x0800dea1
 800ddb8:	0800dea1 	.word	0x0800dea1
 800ddbc:	0800dea1 	.word	0x0800dea1
 800ddc0:	0800de5d 	.word	0x0800de5d
 800ddc4:	0800dea1 	.word	0x0800dea1
 800ddc8:	0800dea1 	.word	0x0800dea1
 800ddcc:	0800dea1 	.word	0x0800dea1
 800ddd0:	0800dea1 	.word	0x0800dea1
 800ddd4:	0800dea1 	.word	0x0800dea1
 800ddd8:	0800dea1 	.word	0x0800dea1
 800dddc:	0800dea1 	.word	0x0800dea1
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800dea1 	.word	0x0800dea1
 800dde8:	0800dea1 	.word	0x0800dea1
 800ddec:	0800dea1 	.word	0x0800dea1
 800ddf0:	0800dea1 	.word	0x0800dea1
 800ddf4:	0800dea1 	.word	0x0800dea1
 800ddf8:	0800dea1 	.word	0x0800dea1
 800ddfc:	0800dea1 	.word	0x0800dea1
 800de00:	0800dea1 	.word	0x0800dea1
 800de04:	0800dea1 	.word	0x0800dea1
 800de08:	0800dea1 	.word	0x0800dea1
 800de0c:	0800dea1 	.word	0x0800dea1
 800de10:	0800dea1 	.word	0x0800dea1
 800de14:	0800dea1 	.word	0x0800dea1
 800de18:	0800dea1 	.word	0x0800dea1
 800de1c:	0800dea1 	.word	0x0800dea1
 800de20:	0800de93 	.word	0x0800de93
 800de24:	2b40      	cmp	r3, #64	; 0x40
 800de26:	d037      	beq.n	800de98 <UART_SetConfig+0xa28>
 800de28:	e03a      	b.n	800dea0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de2a:	f7fb fde7 	bl	80099fc <HAL_RCC_GetPCLK1Freq>
 800de2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800de30:	e03c      	b.n	800deac <UART_SetConfig+0xa3c>
 800de32:	bf00      	nop
 800de34:	003d0900 	.word	0x003d0900
 800de38:	08011bd0 	.word	0x08011bd0
 800de3c:	58024400 	.word	0x58024400
 800de40:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de44:	f7fb fdf0 	bl	8009a28 <HAL_RCC_GetPCLK2Freq>
 800de48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800de4a:	e02f      	b.n	800deac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de4c:	f107 0314 	add.w	r3, r7, #20
 800de50:	4618      	mov	r0, r3
 800de52:	f7fc fd55 	bl	800a900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de5a:	e027      	b.n	800deac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	4618      	mov	r0, r3
 800de62:	f7fc fea1 	bl	800aba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de6a:	e01f      	b.n	800deac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de6c:	4b2c      	ldr	r3, [pc, #176]	; (800df20 <UART_SetConfig+0xab0>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f003 0320 	and.w	r3, r3, #32
 800de74:	2b00      	cmp	r3, #0
 800de76:	d009      	beq.n	800de8c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de78:	4b29      	ldr	r3, [pc, #164]	; (800df20 <UART_SetConfig+0xab0>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	08db      	lsrs	r3, r3, #3
 800de7e:	f003 0303 	and.w	r3, r3, #3
 800de82:	4a28      	ldr	r2, [pc, #160]	; (800df24 <UART_SetConfig+0xab4>)
 800de84:	fa22 f303 	lsr.w	r3, r2, r3
 800de88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de8a:	e00f      	b.n	800deac <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800de8c:	4b25      	ldr	r3, [pc, #148]	; (800df24 <UART_SetConfig+0xab4>)
 800de8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de90:	e00c      	b.n	800deac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de92:	4b25      	ldr	r3, [pc, #148]	; (800df28 <UART_SetConfig+0xab8>)
 800de94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de96:	e009      	b.n	800deac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de9e:	e005      	b.n	800deac <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800dea0:	2300      	movs	r3, #0
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800deaa:	bf00      	nop
    }

    if (pclk != 0U)
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d021      	beq.n	800def6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb6:	4a1d      	ldr	r2, [pc, #116]	; (800df2c <UART_SetConfig+0xabc>)
 800deb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800debc:	461a      	mov	r2, r3
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	fbb3 f2f2 	udiv	r2, r3, r2
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	085b      	lsrs	r3, r3, #1
 800deca:	441a      	add	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	2b0f      	cmp	r3, #15
 800deda:	d909      	bls.n	800def0 <UART_SetConfig+0xa80>
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dee2:	d205      	bcs.n	800def0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60da      	str	r2, [r3, #12]
 800deee:	e002      	b.n	800def6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2201      	movs	r2, #1
 800defa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2201      	movs	r2, #1
 800df02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800df12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800df16:	4618      	mov	r0, r3
 800df18:	3738      	adds	r7, #56	; 0x38
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bdb0      	pop	{r4, r5, r7, pc}
 800df1e:	bf00      	nop
 800df20:	58024400 	.word	0x58024400
 800df24:	03d09000 	.word	0x03d09000
 800df28:	003d0900 	.word	0x003d0900
 800df2c:	08011bd0 	.word	0x08011bd0

0800df30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00a      	beq.n	800df5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	430a      	orrs	r2, r1
 800df58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5e:	f003 0302 	and.w	r3, r3, #2
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	430a      	orrs	r2, r1
 800df7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df80:	f003 0304 	and.w	r3, r3, #4
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00a      	beq.n	800df9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	430a      	orrs	r2, r1
 800df9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa2:	f003 0308 	and.w	r3, r3, #8
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	430a      	orrs	r2, r1
 800dfbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	f003 0310 	and.w	r3, r3, #16
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00a      	beq.n	800dfe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe6:	f003 0320 	and.w	r3, r3, #32
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00a      	beq.n	800e004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	430a      	orrs	r2, r1
 800e002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01a      	beq.n	800e046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	430a      	orrs	r2, r1
 800e024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e02e:	d10a      	bne.n	800e046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	430a      	orrs	r2, r1
 800e044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d00a      	beq.n	800e068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	430a      	orrs	r2, r1
 800e066:	605a      	str	r2, [r3, #4]
  }
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af02      	add	r7, sp, #8
 800e07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e084:	f7f7 f980 	bl	8005388 <HAL_GetTick>
 800e088:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f003 0308 	and.w	r3, r3, #8
 800e094:	2b08      	cmp	r3, #8
 800e096:	d10e      	bne.n	800e0b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f82f 	bl	800e10a <UART_WaitOnFlagUntilTimeout>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	e025      	b.n	800e102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 0304 	and.w	r3, r3, #4
 800e0c0:	2b04      	cmp	r3, #4
 800e0c2:	d10e      	bne.n	800e0e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f819 	bl	800e10a <UART_WaitOnFlagUntilTimeout>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	e00f      	b.n	800e102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2220      	movs	r2, #32
 800e0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3710      	adds	r7, #16
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b09c      	sub	sp, #112	; 0x70
 800e10e:	af00      	add	r7, sp, #0
 800e110:	60f8      	str	r0, [r7, #12]
 800e112:	60b9      	str	r1, [r7, #8]
 800e114:	603b      	str	r3, [r7, #0]
 800e116:	4613      	mov	r3, r2
 800e118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e11a:	e0a9      	b.n	800e270 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e11c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e122:	f000 80a5 	beq.w	800e270 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e126:	f7f7 f92f 	bl	8005388 <HAL_GetTick>
 800e12a:	4602      	mov	r2, r0
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e132:	429a      	cmp	r2, r3
 800e134:	d302      	bcc.n	800e13c <UART_WaitOnFlagUntilTimeout+0x32>
 800e136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d140      	bne.n	800e1be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e144:	e853 3f00 	ldrex	r3, [r3]
 800e148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e14c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e150:	667b      	str	r3, [r7, #100]	; 0x64
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	461a      	mov	r2, r3
 800e158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e15a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e15c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e162:	e841 2300 	strex	r3, r2, [r1]
 800e166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1e6      	bne.n	800e13c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3308      	adds	r3, #8
 800e174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e178:	e853 3f00 	ldrex	r3, [r3]
 800e17c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e180:	f023 0301 	bic.w	r3, r3, #1
 800e184:	663b      	str	r3, [r7, #96]	; 0x60
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3308      	adds	r3, #8
 800e18c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e18e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e196:	e841 2300 	strex	r3, r2, [r1]
 800e19a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e5      	bne.n	800e16e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2220      	movs	r2, #32
 800e1ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	e069      	b.n	800e292 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0304 	and.w	r3, r3, #4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d051      	beq.n	800e270 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	69db      	ldr	r3, [r3, #28]
 800e1d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1da:	d149      	bne.n	800e270 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	e853 3f00 	ldrex	r3, [r3]
 800e1f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e204:	637b      	str	r3, [r7, #52]	; 0x34
 800e206:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e20c:	e841 2300 	strex	r3, r2, [r1]
 800e210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1e6      	bne.n	800e1e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3308      	adds	r3, #8
 800e21e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	e853 3f00 	ldrex	r3, [r3]
 800e226:	613b      	str	r3, [r7, #16]
   return(result);
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	f023 0301 	bic.w	r3, r3, #1
 800e22e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3308      	adds	r3, #8
 800e236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e238:	623a      	str	r2, [r7, #32]
 800e23a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23c:	69f9      	ldr	r1, [r7, #28]
 800e23e:	6a3a      	ldr	r2, [r7, #32]
 800e240:	e841 2300 	strex	r3, r2, [r1]
 800e244:	61bb      	str	r3, [r7, #24]
   return(result);
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1e5      	bne.n	800e218 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2220      	movs	r2, #32
 800e250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2220      	movs	r2, #32
 800e258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2220      	movs	r2, #32
 800e260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e26c:	2303      	movs	r3, #3
 800e26e:	e010      	b.n	800e292 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	69da      	ldr	r2, [r3, #28]
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	4013      	ands	r3, r2
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	bf0c      	ite	eq
 800e280:	2301      	moveq	r3, #1
 800e282:	2300      	movne	r3, #0
 800e284:	b2db      	uxtb	r3, r3
 800e286:	461a      	mov	r2, r3
 800e288:	79fb      	ldrb	r3, [r7, #7]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	f43f af46 	beq.w	800e11c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3770      	adds	r7, #112	; 0x70
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
	...

0800e29c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b096      	sub	sp, #88	; 0x58
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	88fa      	ldrh	r2, [r7, #6]
 800e2b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2222      	movs	r2, #34	; 0x22
 800e2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d02c      	beq.n	800e32a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d4:	4a42      	ldr	r2, [pc, #264]	; (800e3e0 <UART_Start_Receive_DMA+0x144>)
 800e2d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2dc:	4a41      	ldr	r2, [pc, #260]	; (800e3e4 <UART_Start_Receive_DMA+0x148>)
 800e2de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2e4:	4a40      	ldr	r2, [pc, #256]	; (800e3e8 <UART_Start_Receive_DMA+0x14c>)
 800e2e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3324      	adds	r3, #36	; 0x24
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e300:	461a      	mov	r2, r3
 800e302:	88fb      	ldrh	r3, [r7, #6]
 800e304:	f7f7 fef2 	bl	80060ec <HAL_DMA_Start_IT>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00d      	beq.n	800e32a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2210      	movs	r2, #16
 800e312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2200      	movs	r2, #0
 800e31a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2220      	movs	r2, #32
 800e322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e055      	b.n	800e3d6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d018      	beq.n	800e36c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e342:	e853 3f00 	ldrex	r3, [r3]
 800e346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e34e:	657b      	str	r3, [r7, #84]	; 0x54
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	461a      	mov	r2, r3
 800e356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e358:	64bb      	str	r3, [r7, #72]	; 0x48
 800e35a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e35e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e360:	e841 2300 	strex	r3, r2, [r1]
 800e364:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1e6      	bne.n	800e33a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3308      	adds	r3, #8
 800e372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	e853 3f00 	ldrex	r3, [r3]
 800e37a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37e:	f043 0301 	orr.w	r3, r3, #1
 800e382:	653b      	str	r3, [r7, #80]	; 0x50
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3308      	adds	r3, #8
 800e38a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e38c:	637a      	str	r2, [r7, #52]	; 0x34
 800e38e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e394:	e841 2300 	strex	r3, r2, [r1]
 800e398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1e5      	bne.n	800e36c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3308      	adds	r3, #8
 800e3a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	e853 3f00 	ldrex	r3, [r3]
 800e3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3c0:	623a      	str	r2, [r7, #32]
 800e3c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c4:	69f9      	ldr	r1, [r7, #28]
 800e3c6:	6a3a      	ldr	r2, [r7, #32]
 800e3c8:	e841 2300 	strex	r3, r2, [r1]
 800e3cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1e5      	bne.n	800e3a0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e3d4:	2300      	movs	r3, #0
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3758      	adds	r7, #88	; 0x58
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	0800e5ef 	.word	0x0800e5ef
 800e3e4:	0800e711 	.word	0x0800e711
 800e3e8:	0800e749 	.word	0x0800e749

0800e3ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b08f      	sub	sp, #60	; 0x3c
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fa:	6a3b      	ldr	r3, [r7, #32]
 800e3fc:	e853 3f00 	ldrex	r3, [r3]
 800e400:	61fb      	str	r3, [r7, #28]
   return(result);
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e408:	637b      	str	r3, [r7, #52]	; 0x34
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e412:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e414:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1e6      	bne.n	800e3f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3308      	adds	r3, #8
 800e42c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	60bb      	str	r3, [r7, #8]
   return(result);
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e43c:	633b      	str	r3, [r7, #48]	; 0x30
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3308      	adds	r3, #8
 800e444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e446:	61ba      	str	r2, [r7, #24]
 800e448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	6979      	ldr	r1, [r7, #20]
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	613b      	str	r3, [r7, #16]
   return(result);
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1e5      	bne.n	800e426 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2220      	movs	r2, #32
 800e45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e462:	bf00      	nop
 800e464:	373c      	adds	r7, #60	; 0x3c
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
	...

0800e470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e470:	b480      	push	{r7}
 800e472:	b095      	sub	sp, #84	; 0x54
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e480:	e853 3f00 	ldrex	r3, [r3]
 800e484:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e48c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	461a      	mov	r2, r3
 800e494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e496:	643b      	str	r3, [r7, #64]	; 0x40
 800e498:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e49c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e49e:	e841 2300 	strex	r3, r2, [r1]
 800e4a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1e6      	bne.n	800e478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b2:	6a3b      	ldr	r3, [r7, #32]
 800e4b4:	e853 3f00 	ldrex	r3, [r3]
 800e4b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4ba:	69fa      	ldr	r2, [r7, #28]
 800e4bc:	4b1e      	ldr	r3, [pc, #120]	; (800e538 <UART_EndRxTransfer+0xc8>)
 800e4be:	4013      	ands	r3, r2
 800e4c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4d2:	e841 2300 	strex	r3, r2, [r1]
 800e4d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1e5      	bne.n	800e4aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d118      	bne.n	800e518 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	e853 3f00 	ldrex	r3, [r3]
 800e4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	f023 0310 	bic.w	r3, r3, #16
 800e4fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e504:	61bb      	str	r3, [r7, #24]
 800e506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e508:	6979      	ldr	r1, [r7, #20]
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	e841 2300 	strex	r3, r2, [r1]
 800e510:	613b      	str	r3, [r7, #16]
   return(result);
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1e6      	bne.n	800e4e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2220      	movs	r2, #32
 800e51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e52c:	bf00      	nop
 800e52e:	3754      	adds	r7, #84	; 0x54
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	effffffe 	.word	0xeffffffe

0800e53c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b090      	sub	sp, #64	; 0x40
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e548:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e552:	d037      	beq.n	800e5c4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e556:	2200      	movs	r2, #0
 800e558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3308      	adds	r3, #8
 800e562:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e566:	e853 3f00 	ldrex	r3, [r3]
 800e56a:	623b      	str	r3, [r7, #32]
   return(result);
 800e56c:	6a3b      	ldr	r3, [r7, #32]
 800e56e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e572:	63bb      	str	r3, [r7, #56]	; 0x38
 800e574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3308      	adds	r3, #8
 800e57a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e57c:	633a      	str	r2, [r7, #48]	; 0x30
 800e57e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e580:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e584:	e841 2300 	strex	r3, r2, [r1]
 800e588:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1e5      	bne.n	800e55c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	e853 3f00 	ldrex	r3, [r3]
 800e59c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b2:	69b9      	ldr	r1, [r7, #24]
 800e5b4:	69fa      	ldr	r2, [r7, #28]
 800e5b6:	e841 2300 	strex	r3, r2, [r1]
 800e5ba:	617b      	str	r3, [r7, #20]
   return(result);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1e6      	bne.n	800e590 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5c2:	e002      	b.n	800e5ca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e5c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5c6:	f7fe ff2b 	bl	800d420 <HAL_UART_TxCpltCallback>
}
 800e5ca:	bf00      	nop
 800e5cc:	3740      	adds	r7, #64	; 0x40
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b084      	sub	sp, #16
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7fe ff27 	bl	800d434 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5e6:	bf00      	nop
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b09c      	sub	sp, #112	; 0x70
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	69db      	ldr	r3, [r3, #28]
 800e600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e604:	d071      	beq.n	800e6ea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e608:	2200      	movs	r2, #0
 800e60a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e616:	e853 3f00 	ldrex	r3, [r3]
 800e61a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e61c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e61e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e622:	66bb      	str	r3, [r7, #104]	; 0x68
 800e624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	461a      	mov	r2, r3
 800e62a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e62c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e62e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e634:	e841 2300 	strex	r3, r2, [r1]
 800e638:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1e6      	bne.n	800e60e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3308      	adds	r3, #8
 800e646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64a:	e853 3f00 	ldrex	r3, [r3]
 800e64e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	f023 0301 	bic.w	r3, r3, #1
 800e656:	667b      	str	r3, [r7, #100]	; 0x64
 800e658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3308      	adds	r3, #8
 800e65e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e660:	647a      	str	r2, [r7, #68]	; 0x44
 800e662:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e668:	e841 2300 	strex	r3, r2, [r1]
 800e66c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e670:	2b00      	cmp	r3, #0
 800e672:	d1e5      	bne.n	800e640 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	3308      	adds	r3, #8
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	e853 3f00 	ldrex	r3, [r3]
 800e682:	623b      	str	r3, [r7, #32]
   return(result);
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e68a:	663b      	str	r3, [r7, #96]	; 0x60
 800e68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3308      	adds	r3, #8
 800e692:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e694:	633a      	str	r2, [r7, #48]	; 0x30
 800e696:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69c:	e841 2300 	strex	r3, r2, [r1]
 800e6a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1e5      	bne.n	800e674 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6aa:	2220      	movs	r2, #32
 800e6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d118      	bne.n	800e6ea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	e853 3f00 	ldrex	r3, [r3]
 800e6c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f023 0310 	bic.w	r3, r3, #16
 800e6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6da:	69b9      	ldr	r1, [r7, #24]
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	e841 2300 	strex	r3, r2, [r1]
 800e6e2:	617b      	str	r3, [r7, #20]
   return(result);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d1e6      	bne.n	800e6b8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d107      	bne.n	800e702 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e6fc:	f7f3 fe22 	bl	8002344 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e700:	e002      	b.n	800e708 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e702:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e704:	f7f5 f802 	bl	800370c <HAL_UART_RxCpltCallback>
}
 800e708:	bf00      	nop
 800e70a:	3770      	adds	r7, #112	; 0x70
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e722:	2b01      	cmp	r3, #1
 800e724:	d109      	bne.n	800e73a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e72c:	085b      	lsrs	r3, r3, #1
 800e72e:	b29b      	uxth	r3, r3
 800e730:	4619      	mov	r1, r3
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7f3 fe06 	bl	8002344 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e738:	e002      	b.n	800e740 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7fe fe84 	bl	800d448 <HAL_UART_RxHalfCpltCallback>
}
 800e740:	bf00      	nop
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e754:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e75c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e764:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e770:	2b80      	cmp	r3, #128	; 0x80
 800e772:	d109      	bne.n	800e788 <UART_DMAError+0x40>
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	2b21      	cmp	r3, #33	; 0x21
 800e778:	d106      	bne.n	800e788 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e782:	6978      	ldr	r0, [r7, #20]
 800e784:	f7ff fe32 	bl	800e3ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e792:	2b40      	cmp	r3, #64	; 0x40
 800e794:	d109      	bne.n	800e7aa <UART_DMAError+0x62>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2b22      	cmp	r3, #34	; 0x22
 800e79a:	d106      	bne.n	800e7aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e7a4:	6978      	ldr	r0, [r7, #20]
 800e7a6:	f7ff fe63 	bl	800e470 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7b0:	f043 0210 	orr.w	r2, r3, #16
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7ba:	6978      	ldr	r0, [r7, #20]
 800e7bc:	f7fe fe4e 	bl	800d45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7c0:	bf00      	nop
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f7fe fe38 	bl	800d45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7ec:	bf00      	nop
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	e853 3f00 	ldrex	r3, [r3]
 800e808:	60bb      	str	r3, [r7, #8]
   return(result);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e810:	61fb      	str	r3, [r7, #28]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	461a      	mov	r2, r3
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	61bb      	str	r3, [r7, #24]
 800e81c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	613b      	str	r3, [r7, #16]
   return(result);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e6      	bne.n	800e7fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2220      	movs	r2, #32
 800e832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7fe fdef 	bl	800d420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e842:	bf00      	nop
 800e844:	3720      	adds	r7, #32
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e84a:	b480      	push	{r7}
 800e84c:	b083      	sub	sp, #12
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e852:	bf00      	nop
 800e854:	370c      	adds	r7, #12
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e85e:	b480      	push	{r7}
 800e860:	b083      	sub	sp, #12
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e866:	bf00      	nop
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e87a:	bf00      	nop
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e894:	2b01      	cmp	r3, #1
 800e896:	d101      	bne.n	800e89c <HAL_UARTEx_EnableFifoMode+0x16>
 800e898:	2302      	movs	r3, #2
 800e89a:	e02b      	b.n	800e8f4 <HAL_UARTEx_EnableFifoMode+0x6e>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2224      	movs	r2, #36	; 0x24
 800e8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 0201 	bic.w	r2, r2, #1
 800e8c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e8ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800e8d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f91f 	bl	800eb20 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d101      	bne.n	800e912 <HAL_UARTEx_DisableFifoMode+0x16>
 800e90e:	2302      	movs	r3, #2
 800e910:	e027      	b.n	800e962 <HAL_UARTEx_DisableFifoMode+0x66>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2224      	movs	r2, #36	; 0x24
 800e91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f022 0201 	bic.w	r2, r2, #1
 800e938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2220      	movs	r2, #32
 800e954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr

0800e96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d101      	bne.n	800e986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e982:	2302      	movs	r3, #2
 800e984:	e02d      	b.n	800e9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2224      	movs	r2, #36	; 0x24
 800e992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f022 0201 	bic.w	r2, r2, #1
 800e9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	683a      	ldr	r2, [r7, #0]
 800e9be:	430a      	orrs	r2, r1
 800e9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f8ac 	bl	800eb20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2220      	movs	r2, #32
 800e9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b084      	sub	sp, #16
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d101      	bne.n	800ea02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e9fe:	2302      	movs	r3, #2
 800ea00:	e02d      	b.n	800ea5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2224      	movs	r2, #36	; 0x24
 800ea0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 0201 	bic.w	r2, r2, #1
 800ea28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	689b      	ldr	r3, [r3, #8]
 800ea30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	430a      	orrs	r2, r1
 800ea3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f86e 	bl	800eb20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2220      	movs	r2, #32
 800ea50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b08c      	sub	sp, #48	; 0x30
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	4613      	mov	r3, r2
 800ea72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea7a:	2b20      	cmp	r3, #32
 800ea7c:	d14a      	bne.n	800eb14 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d002      	beq.n	800ea8a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ea84:	88fb      	ldrh	r3, [r7, #6]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d101      	bne.n	800ea8e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e043      	b.n	800eb16 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d101      	bne.n	800ea9c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e03c      	b.n	800eb16 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800eaaa:	88fb      	ldrh	r3, [r7, #6]
 800eaac:	461a      	mov	r2, r3
 800eaae:	68b9      	ldr	r1, [r7, #8]
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f7ff fbf3 	bl	800e29c <UART_Start_Receive_DMA>
 800eab6:	4603      	mov	r3, r0
 800eab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800eabc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d124      	bne.n	800eb0e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d11d      	bne.n	800eb08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2210      	movs	r2, #16
 800ead2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	617b      	str	r3, [r7, #20]
   return(result);
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	f043 0310 	orr.w	r3, r3, #16
 800eae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24
 800eaf4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf6:	6a39      	ldr	r1, [r7, #32]
 800eaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eafa:	e841 2300 	strex	r3, r2, [r1]
 800eafe:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1e6      	bne.n	800ead4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800eb06:	e002      	b.n	800eb0e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800eb0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb12:	e000      	b.n	800eb16 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800eb14:	2302      	movs	r3, #2
  }
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3730      	adds	r7, #48	; 0x30
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d108      	bne.n	800eb42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb40:	e031      	b.n	800eba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb42:	2310      	movs	r3, #16
 800eb44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb46:	2310      	movs	r3, #16
 800eb48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	689b      	ldr	r3, [r3, #8]
 800eb50:	0e5b      	lsrs	r3, r3, #25
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	f003 0307 	and.w	r3, r3, #7
 800eb58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	0f5b      	lsrs	r3, r3, #29
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	f003 0307 	and.w	r3, r3, #7
 800eb68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb6a:	7bbb      	ldrb	r3, [r7, #14]
 800eb6c:	7b3a      	ldrb	r2, [r7, #12]
 800eb6e:	4911      	ldr	r1, [pc, #68]	; (800ebb4 <UARTEx_SetNbDataToProcess+0x94>)
 800eb70:	5c8a      	ldrb	r2, [r1, r2]
 800eb72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eb76:	7b3a      	ldrb	r2, [r7, #12]
 800eb78:	490f      	ldr	r1, [pc, #60]	; (800ebb8 <UARTEx_SetNbDataToProcess+0x98>)
 800eb7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
 800eb8a:	7b7a      	ldrb	r2, [r7, #13]
 800eb8c:	4909      	ldr	r1, [pc, #36]	; (800ebb4 <UARTEx_SetNbDataToProcess+0x94>)
 800eb8e:	5c8a      	ldrb	r2, [r1, r2]
 800eb90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eb94:	7b7a      	ldrb	r2, [r7, #13]
 800eb96:	4908      	ldr	r1, [pc, #32]	; (800ebb8 <UARTEx_SetNbDataToProcess+0x98>)
 800eb98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eba6:	bf00      	nop
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	08011be8 	.word	0x08011be8
 800ebb8:	08011bf0 	.word	0x08011bf0

0800ebbc <checkint>:
 800ebbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ebc0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebc8:	dd2b      	ble.n	800ec22 <checkint+0x66>
 800ebca:	f240 4333 	movw	r3, #1075	; 0x433
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	dc25      	bgt.n	800ec1e <checkint+0x62>
 800ebd2:	1a9b      	subs	r3, r3, r2
 800ebd4:	f1a3 0620 	sub.w	r6, r3, #32
 800ebd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebdc:	fa02 f606 	lsl.w	r6, r2, r6
 800ebe0:	fa02 f403 	lsl.w	r4, r2, r3
 800ebe4:	f1c3 0520 	rsb	r5, r3, #32
 800ebe8:	4334      	orrs	r4, r6
 800ebea:	fa22 f505 	lsr.w	r5, r2, r5
 800ebee:	432c      	orrs	r4, r5
 800ebf0:	409a      	lsls	r2, r3
 800ebf2:	ea20 0602 	bic.w	r6, r0, r2
 800ebf6:	ea21 0704 	bic.w	r7, r1, r4
 800ebfa:	ea56 0207 	orrs.w	r2, r6, r7
 800ebfe:	f1a3 0420 	sub.w	r4, r3, #32
 800ec02:	f1c3 0220 	rsb	r2, r3, #32
 800ec06:	d10c      	bne.n	800ec22 <checkint+0x66>
 800ec08:	40d8      	lsrs	r0, r3
 800ec0a:	fa01 f302 	lsl.w	r3, r1, r2
 800ec0e:	4318      	orrs	r0, r3
 800ec10:	40e1      	lsrs	r1, r4
 800ec12:	4308      	orrs	r0, r1
 800ec14:	f000 0301 	and.w	r3, r0, #1
 800ec18:	f1c3 0002 	rsb	r0, r3, #2
 800ec1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec1e:	2002      	movs	r0, #2
 800ec20:	e7fc      	b.n	800ec1c <checkint+0x60>
 800ec22:	2000      	movs	r0, #0
 800ec24:	e7fa      	b.n	800ec1c <checkint+0x60>
	...

0800ec28 <pow>:
 800ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec2c:	ed2d 8b0a 	vpush	{d8-d12}
 800ec30:	b09b      	sub	sp, #108	; 0x6c
 800ec32:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec36:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ec3a:	ed8d 1b00 	vstr	d1, [sp]
 800ec3e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800ec42:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ec46:	f109 30ff 	add.w	r0, r9, #4294967295
 800ec4a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800ec4e:	4288      	cmp	r0, r1
 800ec50:	46cc      	mov	ip, r9
 800ec52:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800ec56:	d806      	bhi.n	800ec66 <pow+0x3e>
 800ec58:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800ec5c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800ec60:	297f      	cmp	r1, #127	; 0x7f
 800ec62:	f240 81ab 	bls.w	800efbc <pow+0x394>
 800ec66:	19b1      	adds	r1, r6, r6
 800ec68:	9104      	str	r1, [sp, #16]
 800ec6a:	eb47 0107 	adc.w	r1, r7, r7
 800ec6e:	9105      	str	r1, [sp, #20]
 800ec70:	9904      	ldr	r1, [sp, #16]
 800ec72:	f111 31ff 	adds.w	r1, r1, #4294967295
 800ec76:	460a      	mov	r2, r1
 800ec78:	9905      	ldr	r1, [sp, #20]
 800ec7a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800ec7e:	460b      	mov	r3, r1
 800ec80:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800ec84:	f06f 0001 	mvn.w	r0, #1
 800ec88:	4299      	cmp	r1, r3
 800ec8a:	bf08      	it	eq
 800ec8c:	4290      	cmpeq	r0, r2
 800ec8e:	d260      	bcs.n	800ed52 <pow+0x12a>
 800ec90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec94:	4313      	orrs	r3, r2
 800ec96:	d11a      	bne.n	800ecce <pow+0xa6>
 800ec98:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800ec9c:	1923      	adds	r3, r4, r4
 800ec9e:	930c      	str	r3, [sp, #48]	; 0x30
 800eca0:	eb42 0302 	adc.w	r3, r2, r2
 800eca4:	930d      	str	r3, [sp, #52]	; 0x34
 800eca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecaa:	4bcf      	ldr	r3, [pc, #828]	; (800efe8 <pow+0x3c0>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	428b      	cmp	r3, r1
 800ecb0:	bf08      	it	eq
 800ecb2:	4282      	cmpeq	r2, r0
 800ecb4:	f080 8265 	bcs.w	800f182 <pow+0x55a>
 800ecb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecbc:	ed9d 6b00 	vldr	d6, [sp]
 800ecc0:	ee37 0b06 	vadd.f64	d0, d7, d6
 800ecc4:	b01b      	add	sp, #108	; 0x6c
 800ecc6:	ecbd 8b0a 	vpop	{d8-d12}
 800ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecce:	49c7      	ldr	r1, [pc, #796]	; (800efec <pow+0x3c4>)
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	428d      	cmp	r5, r1
 800ecd4:	bf08      	it	eq
 800ecd6:	4284      	cmpeq	r4, r0
 800ecd8:	d10b      	bne.n	800ecf2 <pow+0xca>
 800ecda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ecde:	19b3      	adds	r3, r6, r6
 800ece0:	930e      	str	r3, [sp, #56]	; 0x38
 800ece2:	eb42 0302 	adc.w	r3, r2, r2
 800ece6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ece8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ecec:	4bbe      	ldr	r3, [pc, #760]	; (800efe8 <pow+0x3c0>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	e7dd      	b.n	800ecae <pow+0x86>
 800ecf2:	1921      	adds	r1, r4, r4
 800ecf4:	9106      	str	r1, [sp, #24]
 800ecf6:	eb45 0105 	adc.w	r1, r5, r5
 800ecfa:	9107      	str	r1, [sp, #28]
 800ecfc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ed00:	49bb      	ldr	r1, [pc, #748]	; (800eff0 <pow+0x3c8>)
 800ed02:	2000      	movs	r0, #0
 800ed04:	42a1      	cmp	r1, r4
 800ed06:	bf08      	it	eq
 800ed08:	4298      	cmpeq	r0, r3
 800ed0a:	d3d5      	bcc.n	800ecb8 <pow+0x90>
 800ed0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ed10:	428c      	cmp	r4, r1
 800ed12:	bf08      	it	eq
 800ed14:	4283      	cmpeq	r3, r0
 800ed16:	d1cf      	bne.n	800ecb8 <pow+0x90>
 800ed18:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ed1c:	49b5      	ldr	r1, [pc, #724]	; (800eff4 <pow+0x3cc>)
 800ed1e:	2000      	movs	r0, #0
 800ed20:	428c      	cmp	r4, r1
 800ed22:	bf08      	it	eq
 800ed24:	4283      	cmpeq	r3, r0
 800ed26:	f000 822c 	beq.w	800f182 <pow+0x55a>
 800ed2a:	49b3      	ldr	r1, [pc, #716]	; (800eff8 <pow+0x3d0>)
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed30:	42a1      	cmp	r1, r4
 800ed32:	bf08      	it	eq
 800ed34:	4298      	cmpeq	r0, r3
 800ed36:	ea6f 0307 	mvn.w	r3, r7
 800ed3a:	bf34      	ite	cc
 800ed3c:	2201      	movcc	r2, #1
 800ed3e:	2200      	movcs	r2, #0
 800ed40:	0fdb      	lsrs	r3, r3, #31
 800ed42:	429a      	cmp	r2, r3
 800ed44:	f040 821a 	bne.w	800f17c <pow+0x554>
 800ed48:	ed9d 7b00 	vldr	d7, [sp]
 800ed4c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800ed50:	e7b8      	b.n	800ecc4 <pow+0x9c>
 800ed52:	1923      	adds	r3, r4, r4
 800ed54:	9308      	str	r3, [sp, #32]
 800ed56:	eb45 0305 	adc.w	r3, r5, r5
 800ed5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed5c:	9b08      	ldr	r3, [sp, #32]
 800ed5e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ed62:	9310      	str	r3, [sp, #64]	; 0x40
 800ed64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed66:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ed6a:	9311      	str	r3, [sp, #68]	; 0x44
 800ed6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed70:	4299      	cmp	r1, r3
 800ed72:	bf08      	it	eq
 800ed74:	4290      	cmpeq	r0, r2
 800ed76:	d22d      	bcs.n	800edd4 <pow+0x1ac>
 800ed78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed7c:	2c00      	cmp	r4, #0
 800ed7e:	f175 0300 	sbcs.w	r3, r5, #0
 800ed82:	ee27 0b07 	vmul.f64	d0, d7, d7
 800ed86:	da16      	bge.n	800edb6 <pow+0x18e>
 800ed88:	4630      	mov	r0, r6
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	f7ff ff16 	bl	800ebbc <checkint>
 800ed90:	2801      	cmp	r0, #1
 800ed92:	d110      	bne.n	800edb6 <pow+0x18e>
 800ed94:	eeb1 0b40 	vneg.f64	d0, d0
 800ed98:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800ed9c:	4323      	orrs	r3, r4
 800ed9e:	d10c      	bne.n	800edba <pow+0x192>
 800eda0:	2e00      	cmp	r6, #0
 800eda2:	f177 0300 	sbcs.w	r3, r7, #0
 800eda6:	da8d      	bge.n	800ecc4 <pow+0x9c>
 800eda8:	b01b      	add	sp, #108	; 0x6c
 800edaa:	ecbd 8b0a 	vpop	{d8-d12}
 800edae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb2:	f000 ba29 	b.w	800f208 <__math_divzero>
 800edb6:	2000      	movs	r0, #0
 800edb8:	e7ee      	b.n	800ed98 <pow+0x170>
 800edba:	2e00      	cmp	r6, #0
 800edbc:	f177 0300 	sbcs.w	r3, r7, #0
 800edc0:	da80      	bge.n	800ecc4 <pow+0x9c>
 800edc2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800edc6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800edca:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800edce:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800edd2:	e777      	b.n	800ecc4 <pow+0x9c>
 800edd4:	2c00      	cmp	r4, #0
 800edd6:	f175 0300 	sbcs.w	r3, r5, #0
 800edda:	da35      	bge.n	800ee48 <pow+0x220>
 800eddc:	4630      	mov	r0, r6
 800edde:	4639      	mov	r1, r7
 800ede0:	f7ff feec 	bl	800ebbc <checkint>
 800ede4:	b940      	cbnz	r0, 800edf8 <pow+0x1d0>
 800ede6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800edea:	b01b      	add	sp, #108	; 0x6c
 800edec:	ecbd 8b0a 	vpop	{d8-d12}
 800edf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf4:	f000 ba20 	b.w	800f238 <__math_invalid>
 800edf8:	2801      	cmp	r0, #1
 800edfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800edfe:	bf14      	ite	ne
 800ee00:	2000      	movne	r0, #0
 800ee02:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800ee06:	461d      	mov	r5, r3
 800ee08:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800ee0c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800ee10:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800ee14:	2a7f      	cmp	r2, #127	; 0x7f
 800ee16:	d933      	bls.n	800ee80 <pow+0x258>
 800ee18:	4974      	ldr	r1, [pc, #464]	; (800efec <pow+0x3c4>)
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	428d      	cmp	r5, r1
 800ee1e:	bf08      	it	eq
 800ee20:	4284      	cmpeq	r4, r0
 800ee22:	f000 81ae 	beq.w	800f182 <pow+0x55a>
 800ee26:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d80e      	bhi.n	800ee4c <pow+0x224>
 800ee2e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ee32:	ed9d 7b00 	vldr	d7, [sp]
 800ee36:	42a9      	cmp	r1, r5
 800ee38:	bf08      	it	eq
 800ee3a:	42a0      	cmpeq	r0, r4
 800ee3c:	bf34      	ite	cc
 800ee3e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800ee42:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800ee46:	e73d      	b.n	800ecc4 <pow+0x9c>
 800ee48:	2000      	movs	r0, #0
 800ee4a:	e7df      	b.n	800ee0c <pow+0x1e4>
 800ee4c:	42a9      	cmp	r1, r5
 800ee4e:	bf08      	it	eq
 800ee50:	42a0      	cmpeq	r0, r4
 800ee52:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ee56:	bf2c      	ite	cs
 800ee58:	2301      	movcs	r3, #1
 800ee5a:	2300      	movcc	r3, #0
 800ee5c:	4590      	cmp	r8, r2
 800ee5e:	bf8c      	ite	hi
 800ee60:	f04f 0800 	movhi.w	r8, #0
 800ee64:	f04f 0801 	movls.w	r8, #1
 800ee68:	4543      	cmp	r3, r8
 800ee6a:	f04f 0000 	mov.w	r0, #0
 800ee6e:	f000 80af 	beq.w	800efd0 <pow+0x3a8>
 800ee72:	b01b      	add	sp, #108	; 0x6c
 800ee74:	ecbd 8b0a 	vpop	{d8-d12}
 800ee78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	f000 b9bc 	b.w	800f1f8 <__math_oflow>
 800ee80:	f1bc 0f00 	cmp.w	ip, #0
 800ee84:	d10e      	bne.n	800eea4 <pow+0x27c>
 800ee86:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800efe0 <pow+0x3b8>
 800ee8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ee8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ee92:	ec57 6b17 	vmov	r6, r7, d7
 800ee96:	4b59      	ldr	r3, [pc, #356]	; (800effc <pow+0x3d4>)
 800ee98:	2100      	movs	r1, #0
 800ee9a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ee9e:	1874      	adds	r4, r6, r1
 800eea0:	eb42 0503 	adc.w	r5, r2, r3
 800eea4:	2300      	movs	r3, #0
 800eea6:	18e3      	adds	r3, r4, r3
 800eea8:	4b55      	ldr	r3, [pc, #340]	; (800f000 <pow+0x3d8>)
 800eeaa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800eeae:	eb45 0303 	adc.w	r3, r5, r3
 800eeb2:	1519      	asrs	r1, r3, #20
 800eeb4:	ee03 1a10 	vmov	s6, r1
 800eeb8:	0d1e      	lsrs	r6, r3, #20
 800eeba:	2100      	movs	r1, #0
 800eebc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800eec0:	0536      	lsls	r6, r6, #20
 800eec2:	1a63      	subs	r3, r4, r1
 800eec4:	9312      	str	r3, [sp, #72]	; 0x48
 800eec6:	eb65 0306 	sbc.w	r3, r5, r6
 800eeca:	9313      	str	r3, [sp, #76]	; 0x4c
 800eecc:	4b4d      	ldr	r3, [pc, #308]	; (800f004 <pow+0x3dc>)
 800eece:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800eed2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eed6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800eeda:	eea5 6b07 	vfma.f64	d6, d5, d7
 800eede:	ed93 7b00 	vldr	d7, [r3]
 800eee2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800eee6:	ed93 4b02 	vldr	d4, [r3, #8]
 800eeea:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800eeee:	eea3 5b07 	vfma.f64	d5, d3, d7
 800eef2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800eef6:	ee36 9b05 	vadd.f64	d9, d6, d5
 800eefa:	ee35 5b49 	vsub.f64	d5, d5, d9
 800eefe:	eea3 7b04 	vfma.f64	d7, d3, d4
 800ef02:	ed93 4b04 	vldr	d4, [r3, #16]
 800ef06:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ef0a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ef0e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800ef12:	ed93 3b08 	vldr	d3, [r3, #32]
 800ef16:	ee26 0b04 	vmul.f64	d0, d6, d4
 800ef1a:	eeb0 8b40 	vmov.f64	d8, d0
 800ef1e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800ef22:	ed93 4b06 	vldr	d4, [r3, #24]
 800ef26:	ee26 ab00 	vmul.f64	d10, d6, d0
 800ef2a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800ef2e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800ef32:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ef36:	ee39 9b41 	vsub.f64	d9, d9, d1
 800ef3a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800ef3e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800ef42:	ee39 9b00 	vadd.f64	d9, d9, d0
 800ef46:	eea6 3b02 	vfma.f64	d3, d6, d2
 800ef4a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800ef4e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800ef52:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800ef56:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800ef5a:	ed9d 6b00 	vldr	d6, [sp]
 800ef5e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800ef62:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ef66:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800ef6a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800ef6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ef72:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ef76:	eeb0 3b46 	vmov.f64	d3, d6
 800ef7a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800ef7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef82:	ee31 9b09 	vadd.f64	d9, d1, d9
 800ef86:	ed9d 6b00 	vldr	d6, [sp]
 800ef8a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800ef8e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800ef92:	193c      	adds	r4, r7, r4
 800ef94:	2c3e      	cmp	r4, #62	; 0x3e
 800ef96:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800ef9a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800ef9e:	d934      	bls.n	800f00a <pow+0x3e2>
 800efa0:	428c      	cmp	r4, r1
 800efa2:	da0d      	bge.n	800efc0 <pow+0x398>
 800efa4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800efa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efac:	ee37 0b00 	vadd.f64	d0, d7, d0
 800efb0:	2800      	cmp	r0, #0
 800efb2:	f43f ae87 	beq.w	800ecc4 <pow+0x9c>
 800efb6:	eeb1 0b40 	vneg.f64	d0, d0
 800efba:	e683      	b.n	800ecc4 <pow+0x9c>
 800efbc:	2000      	movs	r0, #0
 800efbe:	e771      	b.n	800eea4 <pow+0x27c>
 800efc0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800efc4:	d920      	bls.n	800f008 <pow+0x3e0>
 800efc6:	2a00      	cmp	r2, #0
 800efc8:	f173 0300 	sbcs.w	r3, r3, #0
 800efcc:	f6bf af51 	bge.w	800ee72 <pow+0x24a>
 800efd0:	b01b      	add	sp, #108	; 0x6c
 800efd2:	ecbd 8b0a 	vpop	{d8-d12}
 800efd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efda:	f000 b905 	b.w	800f1e8 <__math_uflow>
 800efde:	bf00      	nop
 800efe0:	00000000 	.word	0x00000000
 800efe4:	43300000 	.word	0x43300000
 800efe8:	fff00000 	.word	0xfff00000
 800efec:	3ff00000 	.word	0x3ff00000
 800eff0:	ffe00000 	.word	0xffe00000
 800eff4:	7fe00000 	.word	0x7fe00000
 800eff8:	7fdfffff 	.word	0x7fdfffff
 800effc:	fcc00000 	.word	0xfcc00000
 800f000:	c0196aab 	.word	0xc0196aab
 800f004:	08011bf8 	.word	0x08011bf8
 800f008:	460f      	mov	r7, r1
 800f00a:	4e65      	ldr	r6, [pc, #404]	; (800f1a0 <pow+0x578>)
 800f00c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f010:	ed96 6b02 	vldr	d6, [r6, #8]
 800f014:	ed96 7b00 	vldr	d7, [r6]
 800f018:	eeb0 5b46 	vmov.f64	d5, d6
 800f01c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f020:	ed8d 5b00 	vstr	d5, [sp]
 800f024:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f028:	eeb0 5b44 	vmov.f64	d5, d4
 800f02c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f030:	ed96 7b04 	vldr	d7, [r6, #16]
 800f034:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f038:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f03c:	eeb0 7b45 	vmov.f64	d7, d5
 800f040:	ed96 5b06 	vldr	d5, [r6, #24]
 800f044:	1849      	adds	r1, r1, r1
 800f046:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f04a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f04e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f052:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f056:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f05a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f05e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800f062:	ed96 5b08 	vldr	d5, [r6, #32]
 800f066:	ee33 7b07 	vadd.f64	d7, d3, d7
 800f06a:	1814      	adds	r4, r2, r0
 800f06c:	0365      	lsls	r5, r4, #13
 800f06e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800f072:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f076:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f07a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800f07e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f082:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800f086:	2000      	movs	r0, #0
 800f088:	eb10 0a04 	adds.w	sl, r0, r4
 800f08c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f090:	eb45 0b0c 	adc.w	fp, r5, ip
 800f094:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f098:	2f00      	cmp	r7, #0
 800f09a:	d16a      	bne.n	800f172 <pow+0x54a>
 800f09c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	ea50 0301 	orrs.w	r3, r0, r1
 800f0a6:	f04f 0300 	mov.w	r3, #0
 800f0aa:	d115      	bne.n	800f0d8 <pow+0x4b0>
 800f0ac:	eb1a 0303 	adds.w	r3, sl, r3
 800f0b0:	ee0b 3a10 	vmov	s22, r3
 800f0b4:	4b3b      	ldr	r3, [pc, #236]	; (800f1a4 <pow+0x57c>)
 800f0b6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800f188 <pow+0x560>
 800f0ba:	eb4b 0303 	adc.w	r3, fp, r3
 800f0be:	ee0b 3a90 	vmov	s23, r3
 800f0c2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800f0c6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800f0ca:	b01b      	add	sp, #108	; 0x6c
 800f0cc:	ecbd 8b0a 	vpop	{d8-d12}
 800f0d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	f000 b8c8 	b.w	800f268 <__math_check_oflow>
 800f0d8:	eb1a 0303 	adds.w	r3, sl, r3
 800f0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800f0de:	4b32      	ldr	r3, [pc, #200]	; (800f1a8 <pow+0x580>)
 800f0e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f0e4:	eb4b 0303 	adc.w	r3, fp, r3
 800f0e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0ea:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f0ee:	ee27 6b05 	vmul.f64	d6, d7, d5
 800f0f2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800f0f6:	eeb0 3bc7 	vabs.f64	d3, d7
 800f0fa:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800f0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f102:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800f190 <pow+0x568>
 800f106:	d52b      	bpl.n	800f160 <pow+0x538>
 800f108:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f10c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f114:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800f118:	ee35 6b06 	vadd.f64	d6, d5, d6
 800f11c:	bf48      	it	mi
 800f11e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800f122:	ee37 3b04 	vadd.f64	d3, d7, d4
 800f126:	ee34 5b43 	vsub.f64	d5, d4, d3
 800f12a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f12e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f132:	ee37 7b03 	vadd.f64	d7, d7, d3
 800f136:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f13a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f142:	d105      	bne.n	800f150 <pow+0x528>
 800f144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f146:	463a      	mov	r2, r7
 800f148:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f14c:	ec43 2b17 	vmov	d7, r2, r3
 800f150:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800f154:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800f158:	ee26 6b00 	vmul.f64	d6, d6, d0
 800f15c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800f160:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f164:	b01b      	add	sp, #108	; 0x6c
 800f166:	ecbd 8b0a 	vpop	{d8-d12}
 800f16a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16e:	f000 b872 	b.w	800f256 <__math_check_uflow>
 800f172:	ec4b ab10 	vmov	d0, sl, fp
 800f176:	eea7 0b00 	vfma.f64	d0, d7, d0
 800f17a:	e5a3      	b.n	800ecc4 <pow+0x9c>
 800f17c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800f198 <pow+0x570>
 800f180:	e5a0      	b.n	800ecc4 <pow+0x9c>
 800f182:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f186:	e59d      	b.n	800ecc4 <pow+0x9c>
 800f188:	00000000 	.word	0x00000000
 800f18c:	7f000000 	.word	0x7f000000
 800f190:	00000000 	.word	0x00000000
 800f194:	00100000 	.word	0x00100000
	...
 800f1a0:	08012c40 	.word	0x08012c40
 800f1a4:	c0f00000 	.word	0xc0f00000
 800f1a8:	3fe00000 	.word	0x3fe00000

0800f1ac <with_errno>:
 800f1ac:	b513      	push	{r0, r1, r4, lr}
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	ed8d 0b00 	vstr	d0, [sp]
 800f1b4:	f000 f86c 	bl	800f290 <__errno>
 800f1b8:	ed9d 0b00 	vldr	d0, [sp]
 800f1bc:	6004      	str	r4, [r0, #0]
 800f1be:	b002      	add	sp, #8
 800f1c0:	bd10      	pop	{r4, pc}

0800f1c2 <xflow>:
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	b158      	cbz	r0, 800f1de <xflow+0x1c>
 800f1c6:	eeb1 7b40 	vneg.f64	d7, d0
 800f1ca:	ed8d 7b00 	vstr	d7, [sp]
 800f1ce:	ed9d 7b00 	vldr	d7, [sp]
 800f1d2:	2022      	movs	r0, #34	; 0x22
 800f1d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f1d8:	b002      	add	sp, #8
 800f1da:	f7ff bfe7 	b.w	800f1ac <with_errno>
 800f1de:	eeb0 7b40 	vmov.f64	d7, d0
 800f1e2:	e7f2      	b.n	800f1ca <xflow+0x8>
 800f1e4:	0000      	movs	r0, r0
	...

0800f1e8 <__math_uflow>:
 800f1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f1f0 <__math_uflow+0x8>
 800f1ec:	f7ff bfe9 	b.w	800f1c2 <xflow>
 800f1f0:	00000000 	.word	0x00000000
 800f1f4:	10000000 	.word	0x10000000

0800f1f8 <__math_oflow>:
 800f1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f200 <__math_oflow+0x8>
 800f1fc:	f7ff bfe1 	b.w	800f1c2 <xflow>
 800f200:	00000000 	.word	0x00000000
 800f204:	70000000 	.word	0x70000000

0800f208 <__math_divzero>:
 800f208:	b082      	sub	sp, #8
 800f20a:	2800      	cmp	r0, #0
 800f20c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f210:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800f214:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800f218:	ed8d 7b00 	vstr	d7, [sp]
 800f21c:	ed9d 0b00 	vldr	d0, [sp]
 800f220:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800f230 <__math_divzero+0x28>
 800f224:	2022      	movs	r0, #34	; 0x22
 800f226:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800f22a:	b002      	add	sp, #8
 800f22c:	f7ff bfbe 	b.w	800f1ac <with_errno>
	...

0800f238 <__math_invalid>:
 800f238:	eeb0 7b40 	vmov.f64	d7, d0
 800f23c:	eeb4 7b47 	vcmp.f64	d7, d7
 800f240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f244:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f248:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f24c:	d602      	bvs.n	800f254 <__math_invalid+0x1c>
 800f24e:	2021      	movs	r0, #33	; 0x21
 800f250:	f7ff bfac 	b.w	800f1ac <with_errno>
 800f254:	4770      	bx	lr

0800f256 <__math_check_uflow>:
 800f256:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f25e:	d102      	bne.n	800f266 <__math_check_uflow+0x10>
 800f260:	2022      	movs	r0, #34	; 0x22
 800f262:	f7ff bfa3 	b.w	800f1ac <with_errno>
 800f266:	4770      	bx	lr

0800f268 <__math_check_oflow>:
 800f268:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f288 <__math_check_oflow+0x20>
 800f26c:	eeb0 7bc0 	vabs.f64	d7, d0
 800f270:	eeb4 7b46 	vcmp.f64	d7, d6
 800f274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f278:	dd02      	ble.n	800f280 <__math_check_oflow+0x18>
 800f27a:	2022      	movs	r0, #34	; 0x22
 800f27c:	f7ff bf96 	b.w	800f1ac <with_errno>
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	f3af 8000 	nop.w
 800f288:	ffffffff 	.word	0xffffffff
 800f28c:	7fefffff 	.word	0x7fefffff

0800f290 <__errno>:
 800f290:	4b01      	ldr	r3, [pc, #4]	; (800f298 <__errno+0x8>)
 800f292:	6818      	ldr	r0, [r3, #0]
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	24000024 	.word	0x24000024

0800f29c <__libc_init_array>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	4d0d      	ldr	r5, [pc, #52]	; (800f2d4 <__libc_init_array+0x38>)
 800f2a0:	4c0d      	ldr	r4, [pc, #52]	; (800f2d8 <__libc_init_array+0x3c>)
 800f2a2:	1b64      	subs	r4, r4, r5
 800f2a4:	10a4      	asrs	r4, r4, #2
 800f2a6:	2600      	movs	r6, #0
 800f2a8:	42a6      	cmp	r6, r4
 800f2aa:	d109      	bne.n	800f2c0 <__libc_init_array+0x24>
 800f2ac:	4d0b      	ldr	r5, [pc, #44]	; (800f2dc <__libc_init_array+0x40>)
 800f2ae:	4c0c      	ldr	r4, [pc, #48]	; (800f2e0 <__libc_init_array+0x44>)
 800f2b0:	f002 fc62 	bl	8011b78 <_init>
 800f2b4:	1b64      	subs	r4, r4, r5
 800f2b6:	10a4      	asrs	r4, r4, #2
 800f2b8:	2600      	movs	r6, #0
 800f2ba:	42a6      	cmp	r6, r4
 800f2bc:	d105      	bne.n	800f2ca <__libc_init_array+0x2e>
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2c4:	4798      	blx	r3
 800f2c6:	3601      	adds	r6, #1
 800f2c8:	e7ee      	b.n	800f2a8 <__libc_init_array+0xc>
 800f2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2ce:	4798      	blx	r3
 800f2d0:	3601      	adds	r6, #1
 800f2d2:	e7f2      	b.n	800f2ba <__libc_init_array+0x1e>
 800f2d4:	0801389c 	.word	0x0801389c
 800f2d8:	0801389c 	.word	0x0801389c
 800f2dc:	0801389c 	.word	0x0801389c
 800f2e0:	080138a4 	.word	0x080138a4

0800f2e4 <memset>:
 800f2e4:	4402      	add	r2, r0
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d100      	bne.n	800f2ee <memset+0xa>
 800f2ec:	4770      	bx	lr
 800f2ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f2f2:	e7f9      	b.n	800f2e8 <memset+0x4>

0800f2f4 <__cvt>:
 800f2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f6:	ed2d 8b02 	vpush	{d8}
 800f2fa:	eeb0 8b40 	vmov.f64	d8, d0
 800f2fe:	b085      	sub	sp, #20
 800f300:	4617      	mov	r7, r2
 800f302:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f304:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f306:	ee18 2a90 	vmov	r2, s17
 800f30a:	f025 0520 	bic.w	r5, r5, #32
 800f30e:	2a00      	cmp	r2, #0
 800f310:	bfb6      	itet	lt
 800f312:	222d      	movlt	r2, #45	; 0x2d
 800f314:	2200      	movge	r2, #0
 800f316:	eeb1 8b40 	vneglt.f64	d8, d0
 800f31a:	2d46      	cmp	r5, #70	; 0x46
 800f31c:	460c      	mov	r4, r1
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	d004      	beq.n	800f32c <__cvt+0x38>
 800f322:	2d45      	cmp	r5, #69	; 0x45
 800f324:	d100      	bne.n	800f328 <__cvt+0x34>
 800f326:	3401      	adds	r4, #1
 800f328:	2102      	movs	r1, #2
 800f32a:	e000      	b.n	800f32e <__cvt+0x3a>
 800f32c:	2103      	movs	r1, #3
 800f32e:	ab03      	add	r3, sp, #12
 800f330:	9301      	str	r3, [sp, #4]
 800f332:	ab02      	add	r3, sp, #8
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	4622      	mov	r2, r4
 800f338:	4633      	mov	r3, r6
 800f33a:	eeb0 0b48 	vmov.f64	d0, d8
 800f33e:	f000 fcab 	bl	800fc98 <_dtoa_r>
 800f342:	2d47      	cmp	r5, #71	; 0x47
 800f344:	d109      	bne.n	800f35a <__cvt+0x66>
 800f346:	07fb      	lsls	r3, r7, #31
 800f348:	d407      	bmi.n	800f35a <__cvt+0x66>
 800f34a:	9b03      	ldr	r3, [sp, #12]
 800f34c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f34e:	1a1b      	subs	r3, r3, r0
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	b005      	add	sp, #20
 800f354:	ecbd 8b02 	vpop	{d8}
 800f358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f35a:	2d46      	cmp	r5, #70	; 0x46
 800f35c:	eb00 0204 	add.w	r2, r0, r4
 800f360:	d10c      	bne.n	800f37c <__cvt+0x88>
 800f362:	7803      	ldrb	r3, [r0, #0]
 800f364:	2b30      	cmp	r3, #48	; 0x30
 800f366:	d107      	bne.n	800f378 <__cvt+0x84>
 800f368:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f370:	bf1c      	itt	ne
 800f372:	f1c4 0401 	rsbne	r4, r4, #1
 800f376:	6034      	strne	r4, [r6, #0]
 800f378:	6833      	ldr	r3, [r6, #0]
 800f37a:	441a      	add	r2, r3
 800f37c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f384:	bf08      	it	eq
 800f386:	9203      	streq	r2, [sp, #12]
 800f388:	2130      	movs	r1, #48	; 0x30
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d2dc      	bcs.n	800f34a <__cvt+0x56>
 800f390:	1c5c      	adds	r4, r3, #1
 800f392:	9403      	str	r4, [sp, #12]
 800f394:	7019      	strb	r1, [r3, #0]
 800f396:	e7f8      	b.n	800f38a <__cvt+0x96>

0800f398 <__exponent>:
 800f398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f39a:	4603      	mov	r3, r0
 800f39c:	2900      	cmp	r1, #0
 800f39e:	bfb8      	it	lt
 800f3a0:	4249      	neglt	r1, r1
 800f3a2:	f803 2b02 	strb.w	r2, [r3], #2
 800f3a6:	bfb4      	ite	lt
 800f3a8:	222d      	movlt	r2, #45	; 0x2d
 800f3aa:	222b      	movge	r2, #43	; 0x2b
 800f3ac:	2909      	cmp	r1, #9
 800f3ae:	7042      	strb	r2, [r0, #1]
 800f3b0:	dd2a      	ble.n	800f408 <__exponent+0x70>
 800f3b2:	f10d 0407 	add.w	r4, sp, #7
 800f3b6:	46a4      	mov	ip, r4
 800f3b8:	270a      	movs	r7, #10
 800f3ba:	46a6      	mov	lr, r4
 800f3bc:	460a      	mov	r2, r1
 800f3be:	fb91 f6f7 	sdiv	r6, r1, r7
 800f3c2:	fb07 1516 	mls	r5, r7, r6, r1
 800f3c6:	3530      	adds	r5, #48	; 0x30
 800f3c8:	2a63      	cmp	r2, #99	; 0x63
 800f3ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800f3ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f3d2:	4631      	mov	r1, r6
 800f3d4:	dcf1      	bgt.n	800f3ba <__exponent+0x22>
 800f3d6:	3130      	adds	r1, #48	; 0x30
 800f3d8:	f1ae 0502 	sub.w	r5, lr, #2
 800f3dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f3e0:	1c44      	adds	r4, r0, #1
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	4561      	cmp	r1, ip
 800f3e6:	d30a      	bcc.n	800f3fe <__exponent+0x66>
 800f3e8:	f10d 0209 	add.w	r2, sp, #9
 800f3ec:	eba2 020e 	sub.w	r2, r2, lr
 800f3f0:	4565      	cmp	r5, ip
 800f3f2:	bf88      	it	hi
 800f3f4:	2200      	movhi	r2, #0
 800f3f6:	4413      	add	r3, r2
 800f3f8:	1a18      	subs	r0, r3, r0
 800f3fa:	b003      	add	sp, #12
 800f3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f402:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f406:	e7ed      	b.n	800f3e4 <__exponent+0x4c>
 800f408:	2330      	movs	r3, #48	; 0x30
 800f40a:	3130      	adds	r1, #48	; 0x30
 800f40c:	7083      	strb	r3, [r0, #2]
 800f40e:	70c1      	strb	r1, [r0, #3]
 800f410:	1d03      	adds	r3, r0, #4
 800f412:	e7f1      	b.n	800f3f8 <__exponent+0x60>
 800f414:	0000      	movs	r0, r0
	...

0800f418 <_printf_float>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	b08b      	sub	sp, #44	; 0x2c
 800f41e:	460c      	mov	r4, r1
 800f420:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f424:	4616      	mov	r6, r2
 800f426:	461f      	mov	r7, r3
 800f428:	4605      	mov	r5, r0
 800f42a:	f001 f9b7 	bl	801079c <_localeconv_r>
 800f42e:	f8d0 b000 	ldr.w	fp, [r0]
 800f432:	4658      	mov	r0, fp
 800f434:	f7f0 ff54 	bl	80002e0 <strlen>
 800f438:	2300      	movs	r3, #0
 800f43a:	9308      	str	r3, [sp, #32]
 800f43c:	f8d8 3000 	ldr.w	r3, [r8]
 800f440:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f444:	6822      	ldr	r2, [r4, #0]
 800f446:	3307      	adds	r3, #7
 800f448:	f023 0307 	bic.w	r3, r3, #7
 800f44c:	f103 0108 	add.w	r1, r3, #8
 800f450:	f8c8 1000 	str.w	r1, [r8]
 800f454:	4682      	mov	sl, r0
 800f456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f45a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f45e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f6c0 <_printf_float+0x2a8>
 800f462:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f466:	eeb0 6bc0 	vabs.f64	d6, d0
 800f46a:	eeb4 6b47 	vcmp.f64	d6, d7
 800f46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f472:	dd24      	ble.n	800f4be <_printf_float+0xa6>
 800f474:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47c:	d502      	bpl.n	800f484 <_printf_float+0x6c>
 800f47e:	232d      	movs	r3, #45	; 0x2d
 800f480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f484:	4b90      	ldr	r3, [pc, #576]	; (800f6c8 <_printf_float+0x2b0>)
 800f486:	4891      	ldr	r0, [pc, #580]	; (800f6cc <_printf_float+0x2b4>)
 800f488:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f48c:	bf94      	ite	ls
 800f48e:	4698      	movls	r8, r3
 800f490:	4680      	movhi	r8, r0
 800f492:	2303      	movs	r3, #3
 800f494:	6123      	str	r3, [r4, #16]
 800f496:	f022 0204 	bic.w	r2, r2, #4
 800f49a:	2300      	movs	r3, #0
 800f49c:	6022      	str	r2, [r4, #0]
 800f49e:	9304      	str	r3, [sp, #16]
 800f4a0:	9700      	str	r7, [sp, #0]
 800f4a2:	4633      	mov	r3, r6
 800f4a4:	aa09      	add	r2, sp, #36	; 0x24
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	f000 f9d3 	bl	800f854 <_printf_common>
 800f4ae:	3001      	adds	r0, #1
 800f4b0:	f040 808a 	bne.w	800f5c8 <_printf_float+0x1b0>
 800f4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b8:	b00b      	add	sp, #44	; 0x2c
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4be:	eeb4 0b40 	vcmp.f64	d0, d0
 800f4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c6:	d709      	bvc.n	800f4dc <_printf_float+0xc4>
 800f4c8:	ee10 3a90 	vmov	r3, s1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	bfbc      	itt	lt
 800f4d0:	232d      	movlt	r3, #45	; 0x2d
 800f4d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f4d6:	487e      	ldr	r0, [pc, #504]	; (800f6d0 <_printf_float+0x2b8>)
 800f4d8:	4b7e      	ldr	r3, [pc, #504]	; (800f6d4 <_printf_float+0x2bc>)
 800f4da:	e7d5      	b.n	800f488 <_printf_float+0x70>
 800f4dc:	6863      	ldr	r3, [r4, #4]
 800f4de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f4e2:	9104      	str	r1, [sp, #16]
 800f4e4:	1c59      	adds	r1, r3, #1
 800f4e6:	d13c      	bne.n	800f562 <_printf_float+0x14a>
 800f4e8:	2306      	movs	r3, #6
 800f4ea:	6063      	str	r3, [r4, #4]
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9303      	str	r3, [sp, #12]
 800f4f0:	ab08      	add	r3, sp, #32
 800f4f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f4f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f4fa:	ab07      	add	r3, sp, #28
 800f4fc:	6861      	ldr	r1, [r4, #4]
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	6022      	str	r2, [r4, #0]
 800f502:	f10d 031b 	add.w	r3, sp, #27
 800f506:	4628      	mov	r0, r5
 800f508:	f7ff fef4 	bl	800f2f4 <__cvt>
 800f50c:	9b04      	ldr	r3, [sp, #16]
 800f50e:	9907      	ldr	r1, [sp, #28]
 800f510:	2b47      	cmp	r3, #71	; 0x47
 800f512:	4680      	mov	r8, r0
 800f514:	d108      	bne.n	800f528 <_printf_float+0x110>
 800f516:	1cc8      	adds	r0, r1, #3
 800f518:	db02      	blt.n	800f520 <_printf_float+0x108>
 800f51a:	6863      	ldr	r3, [r4, #4]
 800f51c:	4299      	cmp	r1, r3
 800f51e:	dd41      	ble.n	800f5a4 <_printf_float+0x18c>
 800f520:	f1a9 0902 	sub.w	r9, r9, #2
 800f524:	fa5f f989 	uxtb.w	r9, r9
 800f528:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f52c:	d820      	bhi.n	800f570 <_printf_float+0x158>
 800f52e:	3901      	subs	r1, #1
 800f530:	464a      	mov	r2, r9
 800f532:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f536:	9107      	str	r1, [sp, #28]
 800f538:	f7ff ff2e 	bl	800f398 <__exponent>
 800f53c:	9a08      	ldr	r2, [sp, #32]
 800f53e:	9004      	str	r0, [sp, #16]
 800f540:	1813      	adds	r3, r2, r0
 800f542:	2a01      	cmp	r2, #1
 800f544:	6123      	str	r3, [r4, #16]
 800f546:	dc02      	bgt.n	800f54e <_printf_float+0x136>
 800f548:	6822      	ldr	r2, [r4, #0]
 800f54a:	07d2      	lsls	r2, r2, #31
 800f54c:	d501      	bpl.n	800f552 <_printf_float+0x13a>
 800f54e:	3301      	adds	r3, #1
 800f550:	6123      	str	r3, [r4, #16]
 800f552:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0a2      	beq.n	800f4a0 <_printf_float+0x88>
 800f55a:	232d      	movs	r3, #45	; 0x2d
 800f55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f560:	e79e      	b.n	800f4a0 <_printf_float+0x88>
 800f562:	9904      	ldr	r1, [sp, #16]
 800f564:	2947      	cmp	r1, #71	; 0x47
 800f566:	d1c1      	bne.n	800f4ec <_printf_float+0xd4>
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1bf      	bne.n	800f4ec <_printf_float+0xd4>
 800f56c:	2301      	movs	r3, #1
 800f56e:	e7bc      	b.n	800f4ea <_printf_float+0xd2>
 800f570:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f574:	d118      	bne.n	800f5a8 <_printf_float+0x190>
 800f576:	2900      	cmp	r1, #0
 800f578:	6863      	ldr	r3, [r4, #4]
 800f57a:	dd0b      	ble.n	800f594 <_printf_float+0x17c>
 800f57c:	6121      	str	r1, [r4, #16]
 800f57e:	b913      	cbnz	r3, 800f586 <_printf_float+0x16e>
 800f580:	6822      	ldr	r2, [r4, #0]
 800f582:	07d0      	lsls	r0, r2, #31
 800f584:	d502      	bpl.n	800f58c <_printf_float+0x174>
 800f586:	3301      	adds	r3, #1
 800f588:	440b      	add	r3, r1
 800f58a:	6123      	str	r3, [r4, #16]
 800f58c:	2300      	movs	r3, #0
 800f58e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f590:	9304      	str	r3, [sp, #16]
 800f592:	e7de      	b.n	800f552 <_printf_float+0x13a>
 800f594:	b913      	cbnz	r3, 800f59c <_printf_float+0x184>
 800f596:	6822      	ldr	r2, [r4, #0]
 800f598:	07d2      	lsls	r2, r2, #31
 800f59a:	d501      	bpl.n	800f5a0 <_printf_float+0x188>
 800f59c:	3302      	adds	r3, #2
 800f59e:	e7f4      	b.n	800f58a <_printf_float+0x172>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e7f2      	b.n	800f58a <_printf_float+0x172>
 800f5a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f5a8:	9b08      	ldr	r3, [sp, #32]
 800f5aa:	4299      	cmp	r1, r3
 800f5ac:	db05      	blt.n	800f5ba <_printf_float+0x1a2>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	6121      	str	r1, [r4, #16]
 800f5b2:	07d8      	lsls	r0, r3, #31
 800f5b4:	d5ea      	bpl.n	800f58c <_printf_float+0x174>
 800f5b6:	1c4b      	adds	r3, r1, #1
 800f5b8:	e7e7      	b.n	800f58a <_printf_float+0x172>
 800f5ba:	2900      	cmp	r1, #0
 800f5bc:	bfd4      	ite	le
 800f5be:	f1c1 0202 	rsble	r2, r1, #2
 800f5c2:	2201      	movgt	r2, #1
 800f5c4:	4413      	add	r3, r2
 800f5c6:	e7e0      	b.n	800f58a <_printf_float+0x172>
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	055a      	lsls	r2, r3, #21
 800f5cc:	d407      	bmi.n	800f5de <_printf_float+0x1c6>
 800f5ce:	6923      	ldr	r3, [r4, #16]
 800f5d0:	4642      	mov	r2, r8
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b8      	blx	r7
 800f5d8:	3001      	adds	r0, #1
 800f5da:	d12a      	bne.n	800f632 <_printf_float+0x21a>
 800f5dc:	e76a      	b.n	800f4b4 <_printf_float+0x9c>
 800f5de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f5e2:	f240 80e2 	bls.w	800f7aa <_printf_float+0x392>
 800f5e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f5ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	d133      	bne.n	800f65c <_printf_float+0x244>
 800f5f4:	4a38      	ldr	r2, [pc, #224]	; (800f6d8 <_printf_float+0x2c0>)
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	47b8      	blx	r7
 800f5fe:	3001      	adds	r0, #1
 800f600:	f43f af58 	beq.w	800f4b4 <_printf_float+0x9c>
 800f604:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f608:	429a      	cmp	r2, r3
 800f60a:	db02      	blt.n	800f612 <_printf_float+0x1fa>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	07d8      	lsls	r0, r3, #31
 800f610:	d50f      	bpl.n	800f632 <_printf_float+0x21a>
 800f612:	4653      	mov	r3, sl
 800f614:	465a      	mov	r2, fp
 800f616:	4631      	mov	r1, r6
 800f618:	4628      	mov	r0, r5
 800f61a:	47b8      	blx	r7
 800f61c:	3001      	adds	r0, #1
 800f61e:	f43f af49 	beq.w	800f4b4 <_printf_float+0x9c>
 800f622:	f04f 0800 	mov.w	r8, #0
 800f626:	f104 091a 	add.w	r9, r4, #26
 800f62a:	9b08      	ldr	r3, [sp, #32]
 800f62c:	3b01      	subs	r3, #1
 800f62e:	4543      	cmp	r3, r8
 800f630:	dc09      	bgt.n	800f646 <_printf_float+0x22e>
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	079b      	lsls	r3, r3, #30
 800f636:	f100 8108 	bmi.w	800f84a <_printf_float+0x432>
 800f63a:	68e0      	ldr	r0, [r4, #12]
 800f63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f63e:	4298      	cmp	r0, r3
 800f640:	bfb8      	it	lt
 800f642:	4618      	movlt	r0, r3
 800f644:	e738      	b.n	800f4b8 <_printf_float+0xa0>
 800f646:	2301      	movs	r3, #1
 800f648:	464a      	mov	r2, r9
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	f43f af2f 	beq.w	800f4b4 <_printf_float+0x9c>
 800f656:	f108 0801 	add.w	r8, r8, #1
 800f65a:	e7e6      	b.n	800f62a <_printf_float+0x212>
 800f65c:	9b07      	ldr	r3, [sp, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	dc3c      	bgt.n	800f6dc <_printf_float+0x2c4>
 800f662:	4a1d      	ldr	r2, [pc, #116]	; (800f6d8 <_printf_float+0x2c0>)
 800f664:	2301      	movs	r3, #1
 800f666:	4631      	mov	r1, r6
 800f668:	4628      	mov	r0, r5
 800f66a:	47b8      	blx	r7
 800f66c:	3001      	adds	r0, #1
 800f66e:	f43f af21 	beq.w	800f4b4 <_printf_float+0x9c>
 800f672:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f676:	4313      	orrs	r3, r2
 800f678:	d102      	bne.n	800f680 <_printf_float+0x268>
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	07d9      	lsls	r1, r3, #31
 800f67e:	d5d8      	bpl.n	800f632 <_printf_float+0x21a>
 800f680:	4653      	mov	r3, sl
 800f682:	465a      	mov	r2, fp
 800f684:	4631      	mov	r1, r6
 800f686:	4628      	mov	r0, r5
 800f688:	47b8      	blx	r7
 800f68a:	3001      	adds	r0, #1
 800f68c:	f43f af12 	beq.w	800f4b4 <_printf_float+0x9c>
 800f690:	f04f 0900 	mov.w	r9, #0
 800f694:	f104 0a1a 	add.w	sl, r4, #26
 800f698:	9b07      	ldr	r3, [sp, #28]
 800f69a:	425b      	negs	r3, r3
 800f69c:	454b      	cmp	r3, r9
 800f69e:	dc01      	bgt.n	800f6a4 <_printf_float+0x28c>
 800f6a0:	9b08      	ldr	r3, [sp, #32]
 800f6a2:	e795      	b.n	800f5d0 <_printf_float+0x1b8>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	4652      	mov	r2, sl
 800f6a8:	4631      	mov	r1, r6
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	47b8      	blx	r7
 800f6ae:	3001      	adds	r0, #1
 800f6b0:	f43f af00 	beq.w	800f4b4 <_printf_float+0x9c>
 800f6b4:	f109 0901 	add.w	r9, r9, #1
 800f6b8:	e7ee      	b.n	800f698 <_printf_float+0x280>
 800f6ba:	bf00      	nop
 800f6bc:	f3af 8000 	nop.w
 800f6c0:	ffffffff 	.word	0xffffffff
 800f6c4:	7fefffff 	.word	0x7fefffff
 800f6c8:	080134b4 	.word	0x080134b4
 800f6cc:	080134b8 	.word	0x080134b8
 800f6d0:	080134c0 	.word	0x080134c0
 800f6d4:	080134bc 	.word	0x080134bc
 800f6d8:	080134c4 	.word	0x080134c4
 800f6dc:	9a08      	ldr	r2, [sp, #32]
 800f6de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	bfa8      	it	ge
 800f6e4:	461a      	movge	r2, r3
 800f6e6:	2a00      	cmp	r2, #0
 800f6e8:	4691      	mov	r9, r2
 800f6ea:	dc38      	bgt.n	800f75e <_printf_float+0x346>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	9305      	str	r3, [sp, #20]
 800f6f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6f4:	f104 021a 	add.w	r2, r4, #26
 800f6f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6fa:	9905      	ldr	r1, [sp, #20]
 800f6fc:	9304      	str	r3, [sp, #16]
 800f6fe:	eba3 0309 	sub.w	r3, r3, r9
 800f702:	428b      	cmp	r3, r1
 800f704:	dc33      	bgt.n	800f76e <_printf_float+0x356>
 800f706:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	db3c      	blt.n	800f788 <_printf_float+0x370>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	07da      	lsls	r2, r3, #31
 800f712:	d439      	bmi.n	800f788 <_printf_float+0x370>
 800f714:	9a08      	ldr	r2, [sp, #32]
 800f716:	9b04      	ldr	r3, [sp, #16]
 800f718:	9907      	ldr	r1, [sp, #28]
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	eba2 0901 	sub.w	r9, r2, r1
 800f720:	4599      	cmp	r9, r3
 800f722:	bfa8      	it	ge
 800f724:	4699      	movge	r9, r3
 800f726:	f1b9 0f00 	cmp.w	r9, #0
 800f72a:	dc35      	bgt.n	800f798 <_printf_float+0x380>
 800f72c:	f04f 0800 	mov.w	r8, #0
 800f730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f734:	f104 0a1a 	add.w	sl, r4, #26
 800f738:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f73c:	1a9b      	subs	r3, r3, r2
 800f73e:	eba3 0309 	sub.w	r3, r3, r9
 800f742:	4543      	cmp	r3, r8
 800f744:	f77f af75 	ble.w	800f632 <_printf_float+0x21a>
 800f748:	2301      	movs	r3, #1
 800f74a:	4652      	mov	r2, sl
 800f74c:	4631      	mov	r1, r6
 800f74e:	4628      	mov	r0, r5
 800f750:	47b8      	blx	r7
 800f752:	3001      	adds	r0, #1
 800f754:	f43f aeae 	beq.w	800f4b4 <_printf_float+0x9c>
 800f758:	f108 0801 	add.w	r8, r8, #1
 800f75c:	e7ec      	b.n	800f738 <_printf_float+0x320>
 800f75e:	4613      	mov	r3, r2
 800f760:	4631      	mov	r1, r6
 800f762:	4642      	mov	r2, r8
 800f764:	4628      	mov	r0, r5
 800f766:	47b8      	blx	r7
 800f768:	3001      	adds	r0, #1
 800f76a:	d1bf      	bne.n	800f6ec <_printf_float+0x2d4>
 800f76c:	e6a2      	b.n	800f4b4 <_printf_float+0x9c>
 800f76e:	2301      	movs	r3, #1
 800f770:	4631      	mov	r1, r6
 800f772:	4628      	mov	r0, r5
 800f774:	9204      	str	r2, [sp, #16]
 800f776:	47b8      	blx	r7
 800f778:	3001      	adds	r0, #1
 800f77a:	f43f ae9b 	beq.w	800f4b4 <_printf_float+0x9c>
 800f77e:	9b05      	ldr	r3, [sp, #20]
 800f780:	9a04      	ldr	r2, [sp, #16]
 800f782:	3301      	adds	r3, #1
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	e7b7      	b.n	800f6f8 <_printf_float+0x2e0>
 800f788:	4653      	mov	r3, sl
 800f78a:	465a      	mov	r2, fp
 800f78c:	4631      	mov	r1, r6
 800f78e:	4628      	mov	r0, r5
 800f790:	47b8      	blx	r7
 800f792:	3001      	adds	r0, #1
 800f794:	d1be      	bne.n	800f714 <_printf_float+0x2fc>
 800f796:	e68d      	b.n	800f4b4 <_printf_float+0x9c>
 800f798:	9a04      	ldr	r2, [sp, #16]
 800f79a:	464b      	mov	r3, r9
 800f79c:	4442      	add	r2, r8
 800f79e:	4631      	mov	r1, r6
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	47b8      	blx	r7
 800f7a4:	3001      	adds	r0, #1
 800f7a6:	d1c1      	bne.n	800f72c <_printf_float+0x314>
 800f7a8:	e684      	b.n	800f4b4 <_printf_float+0x9c>
 800f7aa:	9a08      	ldr	r2, [sp, #32]
 800f7ac:	2a01      	cmp	r2, #1
 800f7ae:	dc01      	bgt.n	800f7b4 <_printf_float+0x39c>
 800f7b0:	07db      	lsls	r3, r3, #31
 800f7b2:	d537      	bpl.n	800f824 <_printf_float+0x40c>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	4642      	mov	r2, r8
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	47b8      	blx	r7
 800f7be:	3001      	adds	r0, #1
 800f7c0:	f43f ae78 	beq.w	800f4b4 <_printf_float+0x9c>
 800f7c4:	4653      	mov	r3, sl
 800f7c6:	465a      	mov	r2, fp
 800f7c8:	4631      	mov	r1, r6
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	47b8      	blx	r7
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	f43f ae70 	beq.w	800f4b4 <_printf_float+0x9c>
 800f7d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f7d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e0:	d01b      	beq.n	800f81a <_printf_float+0x402>
 800f7e2:	9b08      	ldr	r3, [sp, #32]
 800f7e4:	f108 0201 	add.w	r2, r8, #1
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	4631      	mov	r1, r6
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	47b8      	blx	r7
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d10e      	bne.n	800f812 <_printf_float+0x3fa>
 800f7f4:	e65e      	b.n	800f4b4 <_printf_float+0x9c>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	464a      	mov	r2, r9
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b8      	blx	r7
 800f800:	3001      	adds	r0, #1
 800f802:	f43f ae57 	beq.w	800f4b4 <_printf_float+0x9c>
 800f806:	f108 0801 	add.w	r8, r8, #1
 800f80a:	9b08      	ldr	r3, [sp, #32]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	4543      	cmp	r3, r8
 800f810:	dcf1      	bgt.n	800f7f6 <_printf_float+0x3de>
 800f812:	9b04      	ldr	r3, [sp, #16]
 800f814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f818:	e6db      	b.n	800f5d2 <_printf_float+0x1ba>
 800f81a:	f04f 0800 	mov.w	r8, #0
 800f81e:	f104 091a 	add.w	r9, r4, #26
 800f822:	e7f2      	b.n	800f80a <_printf_float+0x3f2>
 800f824:	2301      	movs	r3, #1
 800f826:	4642      	mov	r2, r8
 800f828:	e7df      	b.n	800f7ea <_printf_float+0x3d2>
 800f82a:	2301      	movs	r3, #1
 800f82c:	464a      	mov	r2, r9
 800f82e:	4631      	mov	r1, r6
 800f830:	4628      	mov	r0, r5
 800f832:	47b8      	blx	r7
 800f834:	3001      	adds	r0, #1
 800f836:	f43f ae3d 	beq.w	800f4b4 <_printf_float+0x9c>
 800f83a:	f108 0801 	add.w	r8, r8, #1
 800f83e:	68e3      	ldr	r3, [r4, #12]
 800f840:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f842:	1a5b      	subs	r3, r3, r1
 800f844:	4543      	cmp	r3, r8
 800f846:	dcf0      	bgt.n	800f82a <_printf_float+0x412>
 800f848:	e6f7      	b.n	800f63a <_printf_float+0x222>
 800f84a:	f04f 0800 	mov.w	r8, #0
 800f84e:	f104 0919 	add.w	r9, r4, #25
 800f852:	e7f4      	b.n	800f83e <_printf_float+0x426>

0800f854 <_printf_common>:
 800f854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f858:	4616      	mov	r6, r2
 800f85a:	4699      	mov	r9, r3
 800f85c:	688a      	ldr	r2, [r1, #8]
 800f85e:	690b      	ldr	r3, [r1, #16]
 800f860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f864:	4293      	cmp	r3, r2
 800f866:	bfb8      	it	lt
 800f868:	4613      	movlt	r3, r2
 800f86a:	6033      	str	r3, [r6, #0]
 800f86c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f870:	4607      	mov	r7, r0
 800f872:	460c      	mov	r4, r1
 800f874:	b10a      	cbz	r2, 800f87a <_printf_common+0x26>
 800f876:	3301      	adds	r3, #1
 800f878:	6033      	str	r3, [r6, #0]
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	0699      	lsls	r1, r3, #26
 800f87e:	bf42      	ittt	mi
 800f880:	6833      	ldrmi	r3, [r6, #0]
 800f882:	3302      	addmi	r3, #2
 800f884:	6033      	strmi	r3, [r6, #0]
 800f886:	6825      	ldr	r5, [r4, #0]
 800f888:	f015 0506 	ands.w	r5, r5, #6
 800f88c:	d106      	bne.n	800f89c <_printf_common+0x48>
 800f88e:	f104 0a19 	add.w	sl, r4, #25
 800f892:	68e3      	ldr	r3, [r4, #12]
 800f894:	6832      	ldr	r2, [r6, #0]
 800f896:	1a9b      	subs	r3, r3, r2
 800f898:	42ab      	cmp	r3, r5
 800f89a:	dc26      	bgt.n	800f8ea <_printf_common+0x96>
 800f89c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8a0:	1e13      	subs	r3, r2, #0
 800f8a2:	6822      	ldr	r2, [r4, #0]
 800f8a4:	bf18      	it	ne
 800f8a6:	2301      	movne	r3, #1
 800f8a8:	0692      	lsls	r2, r2, #26
 800f8aa:	d42b      	bmi.n	800f904 <_printf_common+0xb0>
 800f8ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8b0:	4649      	mov	r1, r9
 800f8b2:	4638      	mov	r0, r7
 800f8b4:	47c0      	blx	r8
 800f8b6:	3001      	adds	r0, #1
 800f8b8:	d01e      	beq.n	800f8f8 <_printf_common+0xa4>
 800f8ba:	6823      	ldr	r3, [r4, #0]
 800f8bc:	68e5      	ldr	r5, [r4, #12]
 800f8be:	6832      	ldr	r2, [r6, #0]
 800f8c0:	f003 0306 	and.w	r3, r3, #6
 800f8c4:	2b04      	cmp	r3, #4
 800f8c6:	bf08      	it	eq
 800f8c8:	1aad      	subeq	r5, r5, r2
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	6922      	ldr	r2, [r4, #16]
 800f8ce:	bf0c      	ite	eq
 800f8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8d4:	2500      	movne	r5, #0
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	bfc4      	itt	gt
 800f8da:	1a9b      	subgt	r3, r3, r2
 800f8dc:	18ed      	addgt	r5, r5, r3
 800f8de:	2600      	movs	r6, #0
 800f8e0:	341a      	adds	r4, #26
 800f8e2:	42b5      	cmp	r5, r6
 800f8e4:	d11a      	bne.n	800f91c <_printf_common+0xc8>
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	e008      	b.n	800f8fc <_printf_common+0xa8>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	4652      	mov	r2, sl
 800f8ee:	4649      	mov	r1, r9
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	47c0      	blx	r8
 800f8f4:	3001      	adds	r0, #1
 800f8f6:	d103      	bne.n	800f900 <_printf_common+0xac>
 800f8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f900:	3501      	adds	r5, #1
 800f902:	e7c6      	b.n	800f892 <_printf_common+0x3e>
 800f904:	18e1      	adds	r1, r4, r3
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	2030      	movs	r0, #48	; 0x30
 800f90a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f90e:	4422      	add	r2, r4
 800f910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f918:	3302      	adds	r3, #2
 800f91a:	e7c7      	b.n	800f8ac <_printf_common+0x58>
 800f91c:	2301      	movs	r3, #1
 800f91e:	4622      	mov	r2, r4
 800f920:	4649      	mov	r1, r9
 800f922:	4638      	mov	r0, r7
 800f924:	47c0      	blx	r8
 800f926:	3001      	adds	r0, #1
 800f928:	d0e6      	beq.n	800f8f8 <_printf_common+0xa4>
 800f92a:	3601      	adds	r6, #1
 800f92c:	e7d9      	b.n	800f8e2 <_printf_common+0x8e>
	...

0800f930 <_printf_i>:
 800f930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f934:	460c      	mov	r4, r1
 800f936:	4691      	mov	r9, r2
 800f938:	7e27      	ldrb	r7, [r4, #24]
 800f93a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f93c:	2f78      	cmp	r7, #120	; 0x78
 800f93e:	4680      	mov	r8, r0
 800f940:	469a      	mov	sl, r3
 800f942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f946:	d807      	bhi.n	800f958 <_printf_i+0x28>
 800f948:	2f62      	cmp	r7, #98	; 0x62
 800f94a:	d80a      	bhi.n	800f962 <_printf_i+0x32>
 800f94c:	2f00      	cmp	r7, #0
 800f94e:	f000 80d8 	beq.w	800fb02 <_printf_i+0x1d2>
 800f952:	2f58      	cmp	r7, #88	; 0x58
 800f954:	f000 80a3 	beq.w	800fa9e <_printf_i+0x16e>
 800f958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f95c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f960:	e03a      	b.n	800f9d8 <_printf_i+0xa8>
 800f962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f966:	2b15      	cmp	r3, #21
 800f968:	d8f6      	bhi.n	800f958 <_printf_i+0x28>
 800f96a:	a001      	add	r0, pc, #4	; (adr r0, 800f970 <_printf_i+0x40>)
 800f96c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f970:	0800f9c9 	.word	0x0800f9c9
 800f974:	0800f9dd 	.word	0x0800f9dd
 800f978:	0800f959 	.word	0x0800f959
 800f97c:	0800f959 	.word	0x0800f959
 800f980:	0800f959 	.word	0x0800f959
 800f984:	0800f959 	.word	0x0800f959
 800f988:	0800f9dd 	.word	0x0800f9dd
 800f98c:	0800f959 	.word	0x0800f959
 800f990:	0800f959 	.word	0x0800f959
 800f994:	0800f959 	.word	0x0800f959
 800f998:	0800f959 	.word	0x0800f959
 800f99c:	0800fae9 	.word	0x0800fae9
 800f9a0:	0800fa0d 	.word	0x0800fa0d
 800f9a4:	0800facb 	.word	0x0800facb
 800f9a8:	0800f959 	.word	0x0800f959
 800f9ac:	0800f959 	.word	0x0800f959
 800f9b0:	0800fb0b 	.word	0x0800fb0b
 800f9b4:	0800f959 	.word	0x0800f959
 800f9b8:	0800fa0d 	.word	0x0800fa0d
 800f9bc:	0800f959 	.word	0x0800f959
 800f9c0:	0800f959 	.word	0x0800f959
 800f9c4:	0800fad3 	.word	0x0800fad3
 800f9c8:	680b      	ldr	r3, [r1, #0]
 800f9ca:	1d1a      	adds	r2, r3, #4
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	600a      	str	r2, [r1, #0]
 800f9d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e0a3      	b.n	800fb24 <_printf_i+0x1f4>
 800f9dc:	6825      	ldr	r5, [r4, #0]
 800f9de:	6808      	ldr	r0, [r1, #0]
 800f9e0:	062e      	lsls	r6, r5, #24
 800f9e2:	f100 0304 	add.w	r3, r0, #4
 800f9e6:	d50a      	bpl.n	800f9fe <_printf_i+0xce>
 800f9e8:	6805      	ldr	r5, [r0, #0]
 800f9ea:	600b      	str	r3, [r1, #0]
 800f9ec:	2d00      	cmp	r5, #0
 800f9ee:	da03      	bge.n	800f9f8 <_printf_i+0xc8>
 800f9f0:	232d      	movs	r3, #45	; 0x2d
 800f9f2:	426d      	negs	r5, r5
 800f9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9f8:	485e      	ldr	r0, [pc, #376]	; (800fb74 <_printf_i+0x244>)
 800f9fa:	230a      	movs	r3, #10
 800f9fc:	e019      	b.n	800fa32 <_printf_i+0x102>
 800f9fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fa02:	6805      	ldr	r5, [r0, #0]
 800fa04:	600b      	str	r3, [r1, #0]
 800fa06:	bf18      	it	ne
 800fa08:	b22d      	sxthne	r5, r5
 800fa0a:	e7ef      	b.n	800f9ec <_printf_i+0xbc>
 800fa0c:	680b      	ldr	r3, [r1, #0]
 800fa0e:	6825      	ldr	r5, [r4, #0]
 800fa10:	1d18      	adds	r0, r3, #4
 800fa12:	6008      	str	r0, [r1, #0]
 800fa14:	0628      	lsls	r0, r5, #24
 800fa16:	d501      	bpl.n	800fa1c <_printf_i+0xec>
 800fa18:	681d      	ldr	r5, [r3, #0]
 800fa1a:	e002      	b.n	800fa22 <_printf_i+0xf2>
 800fa1c:	0669      	lsls	r1, r5, #25
 800fa1e:	d5fb      	bpl.n	800fa18 <_printf_i+0xe8>
 800fa20:	881d      	ldrh	r5, [r3, #0]
 800fa22:	4854      	ldr	r0, [pc, #336]	; (800fb74 <_printf_i+0x244>)
 800fa24:	2f6f      	cmp	r7, #111	; 0x6f
 800fa26:	bf0c      	ite	eq
 800fa28:	2308      	moveq	r3, #8
 800fa2a:	230a      	movne	r3, #10
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa32:	6866      	ldr	r6, [r4, #4]
 800fa34:	60a6      	str	r6, [r4, #8]
 800fa36:	2e00      	cmp	r6, #0
 800fa38:	bfa2      	ittt	ge
 800fa3a:	6821      	ldrge	r1, [r4, #0]
 800fa3c:	f021 0104 	bicge.w	r1, r1, #4
 800fa40:	6021      	strge	r1, [r4, #0]
 800fa42:	b90d      	cbnz	r5, 800fa48 <_printf_i+0x118>
 800fa44:	2e00      	cmp	r6, #0
 800fa46:	d04d      	beq.n	800fae4 <_printf_i+0x1b4>
 800fa48:	4616      	mov	r6, r2
 800fa4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa4e:	fb03 5711 	mls	r7, r3, r1, r5
 800fa52:	5dc7      	ldrb	r7, [r0, r7]
 800fa54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa58:	462f      	mov	r7, r5
 800fa5a:	42bb      	cmp	r3, r7
 800fa5c:	460d      	mov	r5, r1
 800fa5e:	d9f4      	bls.n	800fa4a <_printf_i+0x11a>
 800fa60:	2b08      	cmp	r3, #8
 800fa62:	d10b      	bne.n	800fa7c <_printf_i+0x14c>
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	07df      	lsls	r7, r3, #31
 800fa68:	d508      	bpl.n	800fa7c <_printf_i+0x14c>
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	6861      	ldr	r1, [r4, #4]
 800fa6e:	4299      	cmp	r1, r3
 800fa70:	bfde      	ittt	le
 800fa72:	2330      	movle	r3, #48	; 0x30
 800fa74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa7c:	1b92      	subs	r2, r2, r6
 800fa7e:	6122      	str	r2, [r4, #16]
 800fa80:	f8cd a000 	str.w	sl, [sp]
 800fa84:	464b      	mov	r3, r9
 800fa86:	aa03      	add	r2, sp, #12
 800fa88:	4621      	mov	r1, r4
 800fa8a:	4640      	mov	r0, r8
 800fa8c:	f7ff fee2 	bl	800f854 <_printf_common>
 800fa90:	3001      	adds	r0, #1
 800fa92:	d14c      	bne.n	800fb2e <_printf_i+0x1fe>
 800fa94:	f04f 30ff 	mov.w	r0, #4294967295
 800fa98:	b004      	add	sp, #16
 800fa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa9e:	4835      	ldr	r0, [pc, #212]	; (800fb74 <_printf_i+0x244>)
 800faa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	680e      	ldr	r6, [r1, #0]
 800faa8:	061f      	lsls	r7, r3, #24
 800faaa:	f856 5b04 	ldr.w	r5, [r6], #4
 800faae:	600e      	str	r6, [r1, #0]
 800fab0:	d514      	bpl.n	800fadc <_printf_i+0x1ac>
 800fab2:	07d9      	lsls	r1, r3, #31
 800fab4:	bf44      	itt	mi
 800fab6:	f043 0320 	orrmi.w	r3, r3, #32
 800faba:	6023      	strmi	r3, [r4, #0]
 800fabc:	b91d      	cbnz	r5, 800fac6 <_printf_i+0x196>
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	f023 0320 	bic.w	r3, r3, #32
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	2310      	movs	r3, #16
 800fac8:	e7b0      	b.n	800fa2c <_printf_i+0xfc>
 800faca:	6823      	ldr	r3, [r4, #0]
 800facc:	f043 0320 	orr.w	r3, r3, #32
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	2378      	movs	r3, #120	; 0x78
 800fad4:	4828      	ldr	r0, [pc, #160]	; (800fb78 <_printf_i+0x248>)
 800fad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fada:	e7e3      	b.n	800faa4 <_printf_i+0x174>
 800fadc:	065e      	lsls	r6, r3, #25
 800fade:	bf48      	it	mi
 800fae0:	b2ad      	uxthmi	r5, r5
 800fae2:	e7e6      	b.n	800fab2 <_printf_i+0x182>
 800fae4:	4616      	mov	r6, r2
 800fae6:	e7bb      	b.n	800fa60 <_printf_i+0x130>
 800fae8:	680b      	ldr	r3, [r1, #0]
 800faea:	6826      	ldr	r6, [r4, #0]
 800faec:	6960      	ldr	r0, [r4, #20]
 800faee:	1d1d      	adds	r5, r3, #4
 800faf0:	600d      	str	r5, [r1, #0]
 800faf2:	0635      	lsls	r5, r6, #24
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	d501      	bpl.n	800fafc <_printf_i+0x1cc>
 800faf8:	6018      	str	r0, [r3, #0]
 800fafa:	e002      	b.n	800fb02 <_printf_i+0x1d2>
 800fafc:	0671      	lsls	r1, r6, #25
 800fafe:	d5fb      	bpl.n	800faf8 <_printf_i+0x1c8>
 800fb00:	8018      	strh	r0, [r3, #0]
 800fb02:	2300      	movs	r3, #0
 800fb04:	6123      	str	r3, [r4, #16]
 800fb06:	4616      	mov	r6, r2
 800fb08:	e7ba      	b.n	800fa80 <_printf_i+0x150>
 800fb0a:	680b      	ldr	r3, [r1, #0]
 800fb0c:	1d1a      	adds	r2, r3, #4
 800fb0e:	600a      	str	r2, [r1, #0]
 800fb10:	681e      	ldr	r6, [r3, #0]
 800fb12:	6862      	ldr	r2, [r4, #4]
 800fb14:	2100      	movs	r1, #0
 800fb16:	4630      	mov	r0, r6
 800fb18:	f7f0 fbea 	bl	80002f0 <memchr>
 800fb1c:	b108      	cbz	r0, 800fb22 <_printf_i+0x1f2>
 800fb1e:	1b80      	subs	r0, r0, r6
 800fb20:	6060      	str	r0, [r4, #4]
 800fb22:	6863      	ldr	r3, [r4, #4]
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	2300      	movs	r3, #0
 800fb28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb2c:	e7a8      	b.n	800fa80 <_printf_i+0x150>
 800fb2e:	6923      	ldr	r3, [r4, #16]
 800fb30:	4632      	mov	r2, r6
 800fb32:	4649      	mov	r1, r9
 800fb34:	4640      	mov	r0, r8
 800fb36:	47d0      	blx	sl
 800fb38:	3001      	adds	r0, #1
 800fb3a:	d0ab      	beq.n	800fa94 <_printf_i+0x164>
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	079b      	lsls	r3, r3, #30
 800fb40:	d413      	bmi.n	800fb6a <_printf_i+0x23a>
 800fb42:	68e0      	ldr	r0, [r4, #12]
 800fb44:	9b03      	ldr	r3, [sp, #12]
 800fb46:	4298      	cmp	r0, r3
 800fb48:	bfb8      	it	lt
 800fb4a:	4618      	movlt	r0, r3
 800fb4c:	e7a4      	b.n	800fa98 <_printf_i+0x168>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	4632      	mov	r2, r6
 800fb52:	4649      	mov	r1, r9
 800fb54:	4640      	mov	r0, r8
 800fb56:	47d0      	blx	sl
 800fb58:	3001      	adds	r0, #1
 800fb5a:	d09b      	beq.n	800fa94 <_printf_i+0x164>
 800fb5c:	3501      	adds	r5, #1
 800fb5e:	68e3      	ldr	r3, [r4, #12]
 800fb60:	9903      	ldr	r1, [sp, #12]
 800fb62:	1a5b      	subs	r3, r3, r1
 800fb64:	42ab      	cmp	r3, r5
 800fb66:	dcf2      	bgt.n	800fb4e <_printf_i+0x21e>
 800fb68:	e7eb      	b.n	800fb42 <_printf_i+0x212>
 800fb6a:	2500      	movs	r5, #0
 800fb6c:	f104 0619 	add.w	r6, r4, #25
 800fb70:	e7f5      	b.n	800fb5e <_printf_i+0x22e>
 800fb72:	bf00      	nop
 800fb74:	080134c6 	.word	0x080134c6
 800fb78:	080134d7 	.word	0x080134d7

0800fb7c <quorem>:
 800fb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	6903      	ldr	r3, [r0, #16]
 800fb82:	690c      	ldr	r4, [r1, #16]
 800fb84:	42a3      	cmp	r3, r4
 800fb86:	4607      	mov	r7, r0
 800fb88:	f2c0 8081 	blt.w	800fc8e <quorem+0x112>
 800fb8c:	3c01      	subs	r4, #1
 800fb8e:	f101 0814 	add.w	r8, r1, #20
 800fb92:	f100 0514 	add.w	r5, r0, #20
 800fb96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb9a:	9301      	str	r3, [sp, #4]
 800fb9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fba4:	3301      	adds	r3, #1
 800fba6:	429a      	cmp	r2, r3
 800fba8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fbac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbb4:	d331      	bcc.n	800fc1a <quorem+0x9e>
 800fbb6:	f04f 0e00 	mov.w	lr, #0
 800fbba:	4640      	mov	r0, r8
 800fbbc:	46ac      	mov	ip, r5
 800fbbe:	46f2      	mov	sl, lr
 800fbc0:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbc4:	b293      	uxth	r3, r2
 800fbc6:	fb06 e303 	mla	r3, r6, r3, lr
 800fbca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	ebaa 0303 	sub.w	r3, sl, r3
 800fbd4:	0c12      	lsrs	r2, r2, #16
 800fbd6:	f8dc a000 	ldr.w	sl, [ip]
 800fbda:	fb06 e202 	mla	r2, r6, r2, lr
 800fbde:	fa13 f38a 	uxtah	r3, r3, sl
 800fbe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbe6:	fa1f fa82 	uxth.w	sl, r2
 800fbea:	f8dc 2000 	ldr.w	r2, [ip]
 800fbee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fbf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbfc:	4581      	cmp	r9, r0
 800fbfe:	f84c 3b04 	str.w	r3, [ip], #4
 800fc02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc06:	d2db      	bcs.n	800fbc0 <quorem+0x44>
 800fc08:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc0c:	b92b      	cbnz	r3, 800fc1a <quorem+0x9e>
 800fc0e:	9b01      	ldr	r3, [sp, #4]
 800fc10:	3b04      	subs	r3, #4
 800fc12:	429d      	cmp	r5, r3
 800fc14:	461a      	mov	r2, r3
 800fc16:	d32e      	bcc.n	800fc76 <quorem+0xfa>
 800fc18:	613c      	str	r4, [r7, #16]
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	f001 f856 	bl	8010ccc <__mcmp>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	db24      	blt.n	800fc6e <quorem+0xf2>
 800fc24:	3601      	adds	r6, #1
 800fc26:	4628      	mov	r0, r5
 800fc28:	f04f 0c00 	mov.w	ip, #0
 800fc2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc30:	f8d0 e000 	ldr.w	lr, [r0]
 800fc34:	b293      	uxth	r3, r2
 800fc36:	ebac 0303 	sub.w	r3, ip, r3
 800fc3a:	0c12      	lsrs	r2, r2, #16
 800fc3c:	fa13 f38e 	uxtah	r3, r3, lr
 800fc40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc4e:	45c1      	cmp	r9, r8
 800fc50:	f840 3b04 	str.w	r3, [r0], #4
 800fc54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc58:	d2e8      	bcs.n	800fc2c <quorem+0xb0>
 800fc5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc62:	b922      	cbnz	r2, 800fc6e <quorem+0xf2>
 800fc64:	3b04      	subs	r3, #4
 800fc66:	429d      	cmp	r5, r3
 800fc68:	461a      	mov	r2, r3
 800fc6a:	d30a      	bcc.n	800fc82 <quorem+0x106>
 800fc6c:	613c      	str	r4, [r7, #16]
 800fc6e:	4630      	mov	r0, r6
 800fc70:	b003      	add	sp, #12
 800fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc76:	6812      	ldr	r2, [r2, #0]
 800fc78:	3b04      	subs	r3, #4
 800fc7a:	2a00      	cmp	r2, #0
 800fc7c:	d1cc      	bne.n	800fc18 <quorem+0x9c>
 800fc7e:	3c01      	subs	r4, #1
 800fc80:	e7c7      	b.n	800fc12 <quorem+0x96>
 800fc82:	6812      	ldr	r2, [r2, #0]
 800fc84:	3b04      	subs	r3, #4
 800fc86:	2a00      	cmp	r2, #0
 800fc88:	d1f0      	bne.n	800fc6c <quorem+0xf0>
 800fc8a:	3c01      	subs	r4, #1
 800fc8c:	e7eb      	b.n	800fc66 <quorem+0xea>
 800fc8e:	2000      	movs	r0, #0
 800fc90:	e7ee      	b.n	800fc70 <quorem+0xf4>
 800fc92:	0000      	movs	r0, r0
 800fc94:	0000      	movs	r0, r0
	...

0800fc98 <_dtoa_r>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	ec59 8b10 	vmov	r8, r9, d0
 800fca0:	b095      	sub	sp, #84	; 0x54
 800fca2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fca4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800fca6:	9107      	str	r1, [sp, #28]
 800fca8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fcac:	4606      	mov	r6, r0
 800fcae:	9209      	str	r2, [sp, #36]	; 0x24
 800fcb0:	9310      	str	r3, [sp, #64]	; 0x40
 800fcb2:	b975      	cbnz	r5, 800fcd2 <_dtoa_r+0x3a>
 800fcb4:	2010      	movs	r0, #16
 800fcb6:	f000 fd75 	bl	80107a4 <malloc>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	6270      	str	r0, [r6, #36]	; 0x24
 800fcbe:	b920      	cbnz	r0, 800fcca <_dtoa_r+0x32>
 800fcc0:	4bab      	ldr	r3, [pc, #684]	; (800ff70 <_dtoa_r+0x2d8>)
 800fcc2:	21ea      	movs	r1, #234	; 0xea
 800fcc4:	48ab      	ldr	r0, [pc, #684]	; (800ff74 <_dtoa_r+0x2dc>)
 800fcc6:	f001 f9cb 	bl	8011060 <__assert_func>
 800fcca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcce:	6005      	str	r5, [r0, #0]
 800fcd0:	60c5      	str	r5, [r0, #12]
 800fcd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fcd4:	6819      	ldr	r1, [r3, #0]
 800fcd6:	b151      	cbz	r1, 800fcee <_dtoa_r+0x56>
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	604a      	str	r2, [r1, #4]
 800fcdc:	2301      	movs	r3, #1
 800fcde:	4093      	lsls	r3, r2
 800fce0:	608b      	str	r3, [r1, #8]
 800fce2:	4630      	mov	r0, r6
 800fce4:	f000 fdb4 	bl	8010850 <_Bfree>
 800fce8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fcea:	2200      	movs	r2, #0
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	f1b9 0300 	subs.w	r3, r9, #0
 800fcf2:	bfbb      	ittet	lt
 800fcf4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fcf8:	9303      	strlt	r3, [sp, #12]
 800fcfa:	2300      	movge	r3, #0
 800fcfc:	2201      	movlt	r2, #1
 800fcfe:	bfac      	ite	ge
 800fd00:	6023      	strge	r3, [r4, #0]
 800fd02:	6022      	strlt	r2, [r4, #0]
 800fd04:	4b9c      	ldr	r3, [pc, #624]	; (800ff78 <_dtoa_r+0x2e0>)
 800fd06:	9c03      	ldr	r4, [sp, #12]
 800fd08:	43a3      	bics	r3, r4
 800fd0a:	d11a      	bne.n	800fd42 <_dtoa_r+0xaa>
 800fd0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd0e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd12:	6013      	str	r3, [r2, #0]
 800fd14:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800fd18:	ea53 0308 	orrs.w	r3, r3, r8
 800fd1c:	f000 8512 	beq.w	8010744 <_dtoa_r+0xaac>
 800fd20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fd22:	b953      	cbnz	r3, 800fd3a <_dtoa_r+0xa2>
 800fd24:	4b95      	ldr	r3, [pc, #596]	; (800ff7c <_dtoa_r+0x2e4>)
 800fd26:	e01f      	b.n	800fd68 <_dtoa_r+0xd0>
 800fd28:	4b95      	ldr	r3, [pc, #596]	; (800ff80 <_dtoa_r+0x2e8>)
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fd30:	6013      	str	r3, [r2, #0]
 800fd32:	9800      	ldr	r0, [sp, #0]
 800fd34:	b015      	add	sp, #84	; 0x54
 800fd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3a:	4b90      	ldr	r3, [pc, #576]	; (800ff7c <_dtoa_r+0x2e4>)
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	3303      	adds	r3, #3
 800fd40:	e7f5      	b.n	800fd2e <_dtoa_r+0x96>
 800fd42:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fd52:	d10b      	bne.n	800fd6c <_dtoa_r+0xd4>
 800fd54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd56:	2301      	movs	r3, #1
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 84ee 	beq.w	801073e <_dtoa_r+0xaa6>
 800fd62:	4888      	ldr	r0, [pc, #544]	; (800ff84 <_dtoa_r+0x2ec>)
 800fd64:	6018      	str	r0, [r3, #0]
 800fd66:	1e43      	subs	r3, r0, #1
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	e7e2      	b.n	800fd32 <_dtoa_r+0x9a>
 800fd6c:	a913      	add	r1, sp, #76	; 0x4c
 800fd6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fd72:	aa12      	add	r2, sp, #72	; 0x48
 800fd74:	4630      	mov	r0, r6
 800fd76:	f001 f84d 	bl	8010e14 <__d2b>
 800fd7a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800fd7e:	4605      	mov	r5, r0
 800fd80:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fd82:	2900      	cmp	r1, #0
 800fd84:	d047      	beq.n	800fe16 <_dtoa_r+0x17e>
 800fd86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fd88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fd8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fd90:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800fd94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd98:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800fd9c:	2400      	movs	r4, #0
 800fd9e:	ec43 2b16 	vmov	d6, r2, r3
 800fda2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800fda6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ff58 <_dtoa_r+0x2c0>
 800fdaa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fdae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800ff60 <_dtoa_r+0x2c8>
 800fdb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fdb6:	eeb0 7b46 	vmov.f64	d7, d6
 800fdba:	ee06 1a90 	vmov	s13, r1
 800fdbe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800fdc2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ff68 <_dtoa_r+0x2d0>
 800fdc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fdca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fdce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd6:	ee16 ba90 	vmov	fp, s13
 800fdda:	9411      	str	r4, [sp, #68]	; 0x44
 800fddc:	d508      	bpl.n	800fdf0 <_dtoa_r+0x158>
 800fdde:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fde2:	eeb4 6b47 	vcmp.f64	d6, d7
 800fde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdea:	bf18      	it	ne
 800fdec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800fdf0:	f1bb 0f16 	cmp.w	fp, #22
 800fdf4:	d832      	bhi.n	800fe5c <_dtoa_r+0x1c4>
 800fdf6:	4b64      	ldr	r3, [pc, #400]	; (800ff88 <_dtoa_r+0x2f0>)
 800fdf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fdfc:	ed93 7b00 	vldr	d7, [r3]
 800fe00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800fe04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0c:	d501      	bpl.n	800fe12 <_dtoa_r+0x17a>
 800fe0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe12:	2300      	movs	r3, #0
 800fe14:	e023      	b.n	800fe5e <_dtoa_r+0x1c6>
 800fe16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe18:	4401      	add	r1, r0
 800fe1a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800fe1e:	2b20      	cmp	r3, #32
 800fe20:	bfc3      	ittte	gt
 800fe22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe26:	fa04 f303 	lslgt.w	r3, r4, r3
 800fe2a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800fe2e:	f1c3 0320 	rsble	r3, r3, #32
 800fe32:	bfc6      	itte	gt
 800fe34:	fa28 f804 	lsrgt.w	r8, r8, r4
 800fe38:	ea43 0308 	orrgt.w	r3, r3, r8
 800fe3c:	fa08 f303 	lslle.w	r3, r8, r3
 800fe40:	ee07 3a90 	vmov	s15, r3
 800fe44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fe48:	3901      	subs	r1, #1
 800fe4a:	ed8d 7b00 	vstr	d7, [sp]
 800fe4e:	9c01      	ldr	r4, [sp, #4]
 800fe50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe54:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800fe58:	2401      	movs	r4, #1
 800fe5a:	e7a0      	b.n	800fd9e <_dtoa_r+0x106>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe60:	1a43      	subs	r3, r0, r1
 800fe62:	1e5a      	subs	r2, r3, #1
 800fe64:	bf45      	ittet	mi
 800fe66:	f1c3 0301 	rsbmi	r3, r3, #1
 800fe6a:	9305      	strmi	r3, [sp, #20]
 800fe6c:	2300      	movpl	r3, #0
 800fe6e:	2300      	movmi	r3, #0
 800fe70:	9206      	str	r2, [sp, #24]
 800fe72:	bf54      	ite	pl
 800fe74:	9305      	strpl	r3, [sp, #20]
 800fe76:	9306      	strmi	r3, [sp, #24]
 800fe78:	f1bb 0f00 	cmp.w	fp, #0
 800fe7c:	db18      	blt.n	800feb0 <_dtoa_r+0x218>
 800fe7e:	9b06      	ldr	r3, [sp, #24]
 800fe80:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800fe84:	445b      	add	r3, fp
 800fe86:	9306      	str	r3, [sp, #24]
 800fe88:	2300      	movs	r3, #0
 800fe8a:	9a07      	ldr	r2, [sp, #28]
 800fe8c:	2a09      	cmp	r2, #9
 800fe8e:	d849      	bhi.n	800ff24 <_dtoa_r+0x28c>
 800fe90:	2a05      	cmp	r2, #5
 800fe92:	bfc4      	itt	gt
 800fe94:	3a04      	subgt	r2, #4
 800fe96:	9207      	strgt	r2, [sp, #28]
 800fe98:	9a07      	ldr	r2, [sp, #28]
 800fe9a:	f1a2 0202 	sub.w	r2, r2, #2
 800fe9e:	bfcc      	ite	gt
 800fea0:	2400      	movgt	r4, #0
 800fea2:	2401      	movle	r4, #1
 800fea4:	2a03      	cmp	r2, #3
 800fea6:	d848      	bhi.n	800ff3a <_dtoa_r+0x2a2>
 800fea8:	e8df f002 	tbb	[pc, r2]
 800feac:	3a2c2e0b 	.word	0x3a2c2e0b
 800feb0:	9b05      	ldr	r3, [sp, #20]
 800feb2:	2200      	movs	r2, #0
 800feb4:	eba3 030b 	sub.w	r3, r3, fp
 800feb8:	9305      	str	r3, [sp, #20]
 800feba:	920e      	str	r2, [sp, #56]	; 0x38
 800febc:	f1cb 0300 	rsb	r3, fp, #0
 800fec0:	e7e3      	b.n	800fe8a <_dtoa_r+0x1f2>
 800fec2:	2200      	movs	r2, #0
 800fec4:	9208      	str	r2, [sp, #32]
 800fec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fec8:	2a00      	cmp	r2, #0
 800feca:	dc39      	bgt.n	800ff40 <_dtoa_r+0x2a8>
 800fecc:	f04f 0a01 	mov.w	sl, #1
 800fed0:	46d1      	mov	r9, sl
 800fed2:	4652      	mov	r2, sl
 800fed4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fed8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800feda:	2100      	movs	r1, #0
 800fedc:	6079      	str	r1, [r7, #4]
 800fede:	2004      	movs	r0, #4
 800fee0:	f100 0c14 	add.w	ip, r0, #20
 800fee4:	4594      	cmp	ip, r2
 800fee6:	6879      	ldr	r1, [r7, #4]
 800fee8:	d92f      	bls.n	800ff4a <_dtoa_r+0x2b2>
 800feea:	4630      	mov	r0, r6
 800feec:	930c      	str	r3, [sp, #48]	; 0x30
 800feee:	f000 fc6f 	bl	80107d0 <_Balloc>
 800fef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fef4:	9000      	str	r0, [sp, #0]
 800fef6:	4602      	mov	r2, r0
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d149      	bne.n	800ff90 <_dtoa_r+0x2f8>
 800fefc:	4b23      	ldr	r3, [pc, #140]	; (800ff8c <_dtoa_r+0x2f4>)
 800fefe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff02:	e6df      	b.n	800fcc4 <_dtoa_r+0x2c>
 800ff04:	2201      	movs	r2, #1
 800ff06:	e7dd      	b.n	800fec4 <_dtoa_r+0x22c>
 800ff08:	2200      	movs	r2, #0
 800ff0a:	9208      	str	r2, [sp, #32]
 800ff0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff0e:	eb0b 0a02 	add.w	sl, fp, r2
 800ff12:	f10a 0901 	add.w	r9, sl, #1
 800ff16:	464a      	mov	r2, r9
 800ff18:	2a01      	cmp	r2, #1
 800ff1a:	bfb8      	it	lt
 800ff1c:	2201      	movlt	r2, #1
 800ff1e:	e7db      	b.n	800fed8 <_dtoa_r+0x240>
 800ff20:	2201      	movs	r2, #1
 800ff22:	e7f2      	b.n	800ff0a <_dtoa_r+0x272>
 800ff24:	2401      	movs	r4, #1
 800ff26:	2200      	movs	r2, #0
 800ff28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ff2c:	f04f 3aff 	mov.w	sl, #4294967295
 800ff30:	2100      	movs	r1, #0
 800ff32:	46d1      	mov	r9, sl
 800ff34:	2212      	movs	r2, #18
 800ff36:	9109      	str	r1, [sp, #36]	; 0x24
 800ff38:	e7ce      	b.n	800fed8 <_dtoa_r+0x240>
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	9208      	str	r2, [sp, #32]
 800ff3e:	e7f5      	b.n	800ff2c <_dtoa_r+0x294>
 800ff40:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ff44:	46d1      	mov	r9, sl
 800ff46:	4652      	mov	r2, sl
 800ff48:	e7c6      	b.n	800fed8 <_dtoa_r+0x240>
 800ff4a:	3101      	adds	r1, #1
 800ff4c:	6079      	str	r1, [r7, #4]
 800ff4e:	0040      	lsls	r0, r0, #1
 800ff50:	e7c6      	b.n	800fee0 <_dtoa_r+0x248>
 800ff52:	bf00      	nop
 800ff54:	f3af 8000 	nop.w
 800ff58:	636f4361 	.word	0x636f4361
 800ff5c:	3fd287a7 	.word	0x3fd287a7
 800ff60:	8b60c8b3 	.word	0x8b60c8b3
 800ff64:	3fc68a28 	.word	0x3fc68a28
 800ff68:	509f79fb 	.word	0x509f79fb
 800ff6c:	3fd34413 	.word	0x3fd34413
 800ff70:	080134f5 	.word	0x080134f5
 800ff74:	0801350c 	.word	0x0801350c
 800ff78:	7ff00000 	.word	0x7ff00000
 800ff7c:	080134f1 	.word	0x080134f1
 800ff80:	080134e8 	.word	0x080134e8
 800ff84:	080134c5 	.word	0x080134c5
 800ff88:	08013608 	.word	0x08013608
 800ff8c:	0801356b 	.word	0x0801356b
 800ff90:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ff92:	9900      	ldr	r1, [sp, #0]
 800ff94:	6011      	str	r1, [r2, #0]
 800ff96:	f1b9 0f0e 	cmp.w	r9, #14
 800ff9a:	d872      	bhi.n	8010082 <_dtoa_r+0x3ea>
 800ff9c:	2c00      	cmp	r4, #0
 800ff9e:	d070      	beq.n	8010082 <_dtoa_r+0x3ea>
 800ffa0:	f1bb 0f00 	cmp.w	fp, #0
 800ffa4:	f340 80a6 	ble.w	80100f4 <_dtoa_r+0x45c>
 800ffa8:	49ca      	ldr	r1, [pc, #808]	; (80102d4 <_dtoa_r+0x63c>)
 800ffaa:	f00b 020f 	and.w	r2, fp, #15
 800ffae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ffb2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ffb6:	ed92 7b00 	vldr	d7, [r2]
 800ffba:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ffbe:	f000 808d 	beq.w	80100dc <_dtoa_r+0x444>
 800ffc2:	4ac5      	ldr	r2, [pc, #788]	; (80102d8 <_dtoa_r+0x640>)
 800ffc4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ffc8:	ed92 6b08 	vldr	d6, [r2, #32]
 800ffcc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ffd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ffd4:	f001 010f 	and.w	r1, r1, #15
 800ffd8:	2203      	movs	r2, #3
 800ffda:	48bf      	ldr	r0, [pc, #764]	; (80102d8 <_dtoa_r+0x640>)
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	d17f      	bne.n	80100e0 <_dtoa_r+0x448>
 800ffe0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ffe4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ffe8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ffee:	2900      	cmp	r1, #0
 800fff0:	f000 80b2 	beq.w	8010158 <_dtoa_r+0x4c0>
 800fff4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fffc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010004:	f140 80a8 	bpl.w	8010158 <_dtoa_r+0x4c0>
 8010008:	f1b9 0f00 	cmp.w	r9, #0
 801000c:	f000 80a4 	beq.w	8010158 <_dtoa_r+0x4c0>
 8010010:	f1ba 0f00 	cmp.w	sl, #0
 8010014:	dd31      	ble.n	801007a <_dtoa_r+0x3e2>
 8010016:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801001a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801001e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010022:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010026:	3201      	adds	r2, #1
 8010028:	4650      	mov	r0, sl
 801002a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801002e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010032:	ee07 2a90 	vmov	s15, r2
 8010036:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801003a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801003e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010042:	9c03      	ldr	r4, [sp, #12]
 8010044:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010048:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801004c:	2800      	cmp	r0, #0
 801004e:	f040 8086 	bne.w	801015e <_dtoa_r+0x4c6>
 8010052:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010056:	ee36 6b47 	vsub.f64	d6, d6, d7
 801005a:	ec42 1b17 	vmov	d7, r1, r2
 801005e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010066:	f300 8272 	bgt.w	801054e <_dtoa_r+0x8b6>
 801006a:	eeb1 7b47 	vneg.f64	d7, d7
 801006e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010076:	f100 8267 	bmi.w	8010548 <_dtoa_r+0x8b0>
 801007a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801007e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010082:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010084:	2a00      	cmp	r2, #0
 8010086:	f2c0 8129 	blt.w	80102dc <_dtoa_r+0x644>
 801008a:	f1bb 0f0e 	cmp.w	fp, #14
 801008e:	f300 8125 	bgt.w	80102dc <_dtoa_r+0x644>
 8010092:	4b90      	ldr	r3, [pc, #576]	; (80102d4 <_dtoa_r+0x63c>)
 8010094:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010098:	ed93 6b00 	vldr	d6, [r3]
 801009c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f280 80c3 	bge.w	801022a <_dtoa_r+0x592>
 80100a4:	f1b9 0f00 	cmp.w	r9, #0
 80100a8:	f300 80bf 	bgt.w	801022a <_dtoa_r+0x592>
 80100ac:	f040 824c 	bne.w	8010548 <_dtoa_r+0x8b0>
 80100b0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80100b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80100b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c4:	464c      	mov	r4, r9
 80100c6:	464f      	mov	r7, r9
 80100c8:	f280 8222 	bge.w	8010510 <_dtoa_r+0x878>
 80100cc:	f8dd 8000 	ldr.w	r8, [sp]
 80100d0:	2331      	movs	r3, #49	; 0x31
 80100d2:	f808 3b01 	strb.w	r3, [r8], #1
 80100d6:	f10b 0b01 	add.w	fp, fp, #1
 80100da:	e21e      	b.n	801051a <_dtoa_r+0x882>
 80100dc:	2202      	movs	r2, #2
 80100de:	e77c      	b.n	800ffda <_dtoa_r+0x342>
 80100e0:	07cc      	lsls	r4, r1, #31
 80100e2:	d504      	bpl.n	80100ee <_dtoa_r+0x456>
 80100e4:	ed90 6b00 	vldr	d6, [r0]
 80100e8:	3201      	adds	r2, #1
 80100ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100ee:	1049      	asrs	r1, r1, #1
 80100f0:	3008      	adds	r0, #8
 80100f2:	e773      	b.n	800ffdc <_dtoa_r+0x344>
 80100f4:	d02e      	beq.n	8010154 <_dtoa_r+0x4bc>
 80100f6:	f1cb 0100 	rsb	r1, fp, #0
 80100fa:	4a76      	ldr	r2, [pc, #472]	; (80102d4 <_dtoa_r+0x63c>)
 80100fc:	f001 000f 	and.w	r0, r1, #15
 8010100:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010104:	ed92 7b00 	vldr	d7, [r2]
 8010108:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801010c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010110:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010114:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010118:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801011c:	486e      	ldr	r0, [pc, #440]	; (80102d8 <_dtoa_r+0x640>)
 801011e:	1109      	asrs	r1, r1, #4
 8010120:	2400      	movs	r4, #0
 8010122:	2202      	movs	r2, #2
 8010124:	b939      	cbnz	r1, 8010136 <_dtoa_r+0x49e>
 8010126:	2c00      	cmp	r4, #0
 8010128:	f43f af60 	beq.w	800ffec <_dtoa_r+0x354>
 801012c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010134:	e75a      	b.n	800ffec <_dtoa_r+0x354>
 8010136:	07cf      	lsls	r7, r1, #31
 8010138:	d509      	bpl.n	801014e <_dtoa_r+0x4b6>
 801013a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801013e:	ed90 7b00 	vldr	d7, [r0]
 8010142:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010146:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801014a:	3201      	adds	r2, #1
 801014c:	2401      	movs	r4, #1
 801014e:	1049      	asrs	r1, r1, #1
 8010150:	3008      	adds	r0, #8
 8010152:	e7e7      	b.n	8010124 <_dtoa_r+0x48c>
 8010154:	2202      	movs	r2, #2
 8010156:	e749      	b.n	800ffec <_dtoa_r+0x354>
 8010158:	465f      	mov	r7, fp
 801015a:	4648      	mov	r0, r9
 801015c:	e765      	b.n	801002a <_dtoa_r+0x392>
 801015e:	ec42 1b17 	vmov	d7, r1, r2
 8010162:	4a5c      	ldr	r2, [pc, #368]	; (80102d4 <_dtoa_r+0x63c>)
 8010164:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010168:	ed12 4b02 	vldr	d4, [r2, #-8]
 801016c:	9a00      	ldr	r2, [sp, #0]
 801016e:	1814      	adds	r4, r2, r0
 8010170:	9a08      	ldr	r2, [sp, #32]
 8010172:	b352      	cbz	r2, 80101ca <_dtoa_r+0x532>
 8010174:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010178:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801017c:	f8dd 8000 	ldr.w	r8, [sp]
 8010180:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010184:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010188:	ee35 7b47 	vsub.f64	d7, d5, d7
 801018c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010190:	ee14 2a90 	vmov	r2, s9
 8010194:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010198:	3230      	adds	r2, #48	; 0x30
 801019a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801019e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	f808 2b01 	strb.w	r2, [r8], #1
 80101aa:	d439      	bmi.n	8010220 <_dtoa_r+0x588>
 80101ac:	ee32 5b46 	vsub.f64	d5, d2, d6
 80101b0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80101b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b8:	d472      	bmi.n	80102a0 <_dtoa_r+0x608>
 80101ba:	45a0      	cmp	r8, r4
 80101bc:	f43f af5d 	beq.w	801007a <_dtoa_r+0x3e2>
 80101c0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80101c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80101c8:	e7e0      	b.n	801018c <_dtoa_r+0x4f4>
 80101ca:	f8dd 8000 	ldr.w	r8, [sp]
 80101ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80101d2:	4621      	mov	r1, r4
 80101d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80101d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80101dc:	ee14 2a90 	vmov	r2, s9
 80101e0:	3230      	adds	r2, #48	; 0x30
 80101e2:	f808 2b01 	strb.w	r2, [r8], #1
 80101e6:	45a0      	cmp	r8, r4
 80101e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80101ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80101f0:	d118      	bne.n	8010224 <_dtoa_r+0x58c>
 80101f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80101f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80101fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80101fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010202:	dc4d      	bgt.n	80102a0 <_dtoa_r+0x608>
 8010204:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010208:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801020c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010210:	f57f af33 	bpl.w	801007a <_dtoa_r+0x3e2>
 8010214:	4688      	mov	r8, r1
 8010216:	3901      	subs	r1, #1
 8010218:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801021c:	2b30      	cmp	r3, #48	; 0x30
 801021e:	d0f9      	beq.n	8010214 <_dtoa_r+0x57c>
 8010220:	46bb      	mov	fp, r7
 8010222:	e02a      	b.n	801027a <_dtoa_r+0x5e2>
 8010224:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010228:	e7d6      	b.n	80101d8 <_dtoa_r+0x540>
 801022a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801022e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010232:	f8dd 8000 	ldr.w	r8, [sp]
 8010236:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801023a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801023e:	ee15 3a10 	vmov	r3, s10
 8010242:	3330      	adds	r3, #48	; 0x30
 8010244:	f808 3b01 	strb.w	r3, [r8], #1
 8010248:	9b00      	ldr	r3, [sp, #0]
 801024a:	eba8 0303 	sub.w	r3, r8, r3
 801024e:	4599      	cmp	r9, r3
 8010250:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010254:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010258:	d133      	bne.n	80102c2 <_dtoa_r+0x62a>
 801025a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801025e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010266:	dc1a      	bgt.n	801029e <_dtoa_r+0x606>
 8010268:	eeb4 7b46 	vcmp.f64	d7, d6
 801026c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010270:	d103      	bne.n	801027a <_dtoa_r+0x5e2>
 8010272:	ee15 3a10 	vmov	r3, s10
 8010276:	07d9      	lsls	r1, r3, #31
 8010278:	d411      	bmi.n	801029e <_dtoa_r+0x606>
 801027a:	4629      	mov	r1, r5
 801027c:	4630      	mov	r0, r6
 801027e:	f000 fae7 	bl	8010850 <_Bfree>
 8010282:	2300      	movs	r3, #0
 8010284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010286:	f888 3000 	strb.w	r3, [r8]
 801028a:	f10b 0301 	add.w	r3, fp, #1
 801028e:	6013      	str	r3, [r2, #0]
 8010290:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010292:	2b00      	cmp	r3, #0
 8010294:	f43f ad4d 	beq.w	800fd32 <_dtoa_r+0x9a>
 8010298:	f8c3 8000 	str.w	r8, [r3]
 801029c:	e549      	b.n	800fd32 <_dtoa_r+0x9a>
 801029e:	465f      	mov	r7, fp
 80102a0:	4643      	mov	r3, r8
 80102a2:	4698      	mov	r8, r3
 80102a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102a8:	2a39      	cmp	r2, #57	; 0x39
 80102aa:	d106      	bne.n	80102ba <_dtoa_r+0x622>
 80102ac:	9a00      	ldr	r2, [sp, #0]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d1f7      	bne.n	80102a2 <_dtoa_r+0x60a>
 80102b2:	9900      	ldr	r1, [sp, #0]
 80102b4:	2230      	movs	r2, #48	; 0x30
 80102b6:	3701      	adds	r7, #1
 80102b8:	700a      	strb	r2, [r1, #0]
 80102ba:	781a      	ldrb	r2, [r3, #0]
 80102bc:	3201      	adds	r2, #1
 80102be:	701a      	strb	r2, [r3, #0]
 80102c0:	e7ae      	b.n	8010220 <_dtoa_r+0x588>
 80102c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80102c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ce:	d1b2      	bne.n	8010236 <_dtoa_r+0x59e>
 80102d0:	e7d3      	b.n	801027a <_dtoa_r+0x5e2>
 80102d2:	bf00      	nop
 80102d4:	08013608 	.word	0x08013608
 80102d8:	080135e0 	.word	0x080135e0
 80102dc:	9908      	ldr	r1, [sp, #32]
 80102de:	2900      	cmp	r1, #0
 80102e0:	f000 80d1 	beq.w	8010486 <_dtoa_r+0x7ee>
 80102e4:	9907      	ldr	r1, [sp, #28]
 80102e6:	2901      	cmp	r1, #1
 80102e8:	f300 80b4 	bgt.w	8010454 <_dtoa_r+0x7bc>
 80102ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80102ee:	2900      	cmp	r1, #0
 80102f0:	f000 80ac 	beq.w	801044c <_dtoa_r+0x7b4>
 80102f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80102f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80102fc:	461c      	mov	r4, r3
 80102fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010300:	9b05      	ldr	r3, [sp, #20]
 8010302:	4413      	add	r3, r2
 8010304:	9305      	str	r3, [sp, #20]
 8010306:	9b06      	ldr	r3, [sp, #24]
 8010308:	2101      	movs	r1, #1
 801030a:	4413      	add	r3, r2
 801030c:	4630      	mov	r0, r6
 801030e:	9306      	str	r3, [sp, #24]
 8010310:	f000 fb5a 	bl	80109c8 <__i2b>
 8010314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010316:	4607      	mov	r7, r0
 8010318:	f1b8 0f00 	cmp.w	r8, #0
 801031c:	dd0d      	ble.n	801033a <_dtoa_r+0x6a2>
 801031e:	9a06      	ldr	r2, [sp, #24]
 8010320:	2a00      	cmp	r2, #0
 8010322:	dd0a      	ble.n	801033a <_dtoa_r+0x6a2>
 8010324:	4542      	cmp	r2, r8
 8010326:	9905      	ldr	r1, [sp, #20]
 8010328:	bfa8      	it	ge
 801032a:	4642      	movge	r2, r8
 801032c:	1a89      	subs	r1, r1, r2
 801032e:	9105      	str	r1, [sp, #20]
 8010330:	9906      	ldr	r1, [sp, #24]
 8010332:	eba8 0802 	sub.w	r8, r8, r2
 8010336:	1a8a      	subs	r2, r1, r2
 8010338:	9206      	str	r2, [sp, #24]
 801033a:	b303      	cbz	r3, 801037e <_dtoa_r+0x6e6>
 801033c:	9a08      	ldr	r2, [sp, #32]
 801033e:	2a00      	cmp	r2, #0
 8010340:	f000 80a6 	beq.w	8010490 <_dtoa_r+0x7f8>
 8010344:	2c00      	cmp	r4, #0
 8010346:	dd13      	ble.n	8010370 <_dtoa_r+0x6d8>
 8010348:	4639      	mov	r1, r7
 801034a:	4622      	mov	r2, r4
 801034c:	4630      	mov	r0, r6
 801034e:	930c      	str	r3, [sp, #48]	; 0x30
 8010350:	f000 fbf6 	bl	8010b40 <__pow5mult>
 8010354:	462a      	mov	r2, r5
 8010356:	4601      	mov	r1, r0
 8010358:	4607      	mov	r7, r0
 801035a:	4630      	mov	r0, r6
 801035c:	f000 fb4a 	bl	80109f4 <__multiply>
 8010360:	4629      	mov	r1, r5
 8010362:	900a      	str	r0, [sp, #40]	; 0x28
 8010364:	4630      	mov	r0, r6
 8010366:	f000 fa73 	bl	8010850 <_Bfree>
 801036a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801036c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801036e:	4615      	mov	r5, r2
 8010370:	1b1a      	subs	r2, r3, r4
 8010372:	d004      	beq.n	801037e <_dtoa_r+0x6e6>
 8010374:	4629      	mov	r1, r5
 8010376:	4630      	mov	r0, r6
 8010378:	f000 fbe2 	bl	8010b40 <__pow5mult>
 801037c:	4605      	mov	r5, r0
 801037e:	2101      	movs	r1, #1
 8010380:	4630      	mov	r0, r6
 8010382:	f000 fb21 	bl	80109c8 <__i2b>
 8010386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010388:	2b00      	cmp	r3, #0
 801038a:	4604      	mov	r4, r0
 801038c:	f340 8082 	ble.w	8010494 <_dtoa_r+0x7fc>
 8010390:	461a      	mov	r2, r3
 8010392:	4601      	mov	r1, r0
 8010394:	4630      	mov	r0, r6
 8010396:	f000 fbd3 	bl	8010b40 <__pow5mult>
 801039a:	9b07      	ldr	r3, [sp, #28]
 801039c:	2b01      	cmp	r3, #1
 801039e:	4604      	mov	r4, r0
 80103a0:	dd7b      	ble.n	801049a <_dtoa_r+0x802>
 80103a2:	2300      	movs	r3, #0
 80103a4:	930a      	str	r3, [sp, #40]	; 0x28
 80103a6:	6922      	ldr	r2, [r4, #16]
 80103a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80103ac:	6910      	ldr	r0, [r2, #16]
 80103ae:	f000 fabb 	bl	8010928 <__hi0bits>
 80103b2:	f1c0 0020 	rsb	r0, r0, #32
 80103b6:	9b06      	ldr	r3, [sp, #24]
 80103b8:	4418      	add	r0, r3
 80103ba:	f010 001f 	ands.w	r0, r0, #31
 80103be:	f000 808d 	beq.w	80104dc <_dtoa_r+0x844>
 80103c2:	f1c0 0220 	rsb	r2, r0, #32
 80103c6:	2a04      	cmp	r2, #4
 80103c8:	f340 8086 	ble.w	80104d8 <_dtoa_r+0x840>
 80103cc:	f1c0 001c 	rsb	r0, r0, #28
 80103d0:	9b05      	ldr	r3, [sp, #20]
 80103d2:	4403      	add	r3, r0
 80103d4:	9305      	str	r3, [sp, #20]
 80103d6:	9b06      	ldr	r3, [sp, #24]
 80103d8:	4403      	add	r3, r0
 80103da:	4480      	add	r8, r0
 80103dc:	9306      	str	r3, [sp, #24]
 80103de:	9b05      	ldr	r3, [sp, #20]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	dd05      	ble.n	80103f0 <_dtoa_r+0x758>
 80103e4:	4629      	mov	r1, r5
 80103e6:	461a      	mov	r2, r3
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 fc03 	bl	8010bf4 <__lshift>
 80103ee:	4605      	mov	r5, r0
 80103f0:	9b06      	ldr	r3, [sp, #24]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dd05      	ble.n	8010402 <_dtoa_r+0x76a>
 80103f6:	4621      	mov	r1, r4
 80103f8:	461a      	mov	r2, r3
 80103fa:	4630      	mov	r0, r6
 80103fc:	f000 fbfa 	bl	8010bf4 <__lshift>
 8010400:	4604      	mov	r4, r0
 8010402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010404:	2b00      	cmp	r3, #0
 8010406:	d06b      	beq.n	80104e0 <_dtoa_r+0x848>
 8010408:	4621      	mov	r1, r4
 801040a:	4628      	mov	r0, r5
 801040c:	f000 fc5e 	bl	8010ccc <__mcmp>
 8010410:	2800      	cmp	r0, #0
 8010412:	da65      	bge.n	80104e0 <_dtoa_r+0x848>
 8010414:	2300      	movs	r3, #0
 8010416:	4629      	mov	r1, r5
 8010418:	220a      	movs	r2, #10
 801041a:	4630      	mov	r0, r6
 801041c:	f000 fa3a 	bl	8010894 <__multadd>
 8010420:	9b08      	ldr	r3, [sp, #32]
 8010422:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010426:	4605      	mov	r5, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 8192 	beq.w	8010752 <_dtoa_r+0xaba>
 801042e:	4639      	mov	r1, r7
 8010430:	2300      	movs	r3, #0
 8010432:	220a      	movs	r2, #10
 8010434:	4630      	mov	r0, r6
 8010436:	f000 fa2d 	bl	8010894 <__multadd>
 801043a:	f1ba 0f00 	cmp.w	sl, #0
 801043e:	4607      	mov	r7, r0
 8010440:	f300 808e 	bgt.w	8010560 <_dtoa_r+0x8c8>
 8010444:	9b07      	ldr	r3, [sp, #28]
 8010446:	2b02      	cmp	r3, #2
 8010448:	dc51      	bgt.n	80104ee <_dtoa_r+0x856>
 801044a:	e089      	b.n	8010560 <_dtoa_r+0x8c8>
 801044c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801044e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010452:	e751      	b.n	80102f8 <_dtoa_r+0x660>
 8010454:	f109 34ff 	add.w	r4, r9, #4294967295
 8010458:	42a3      	cmp	r3, r4
 801045a:	bfbf      	itttt	lt
 801045c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801045e:	1ae3      	sublt	r3, r4, r3
 8010460:	18d2      	addlt	r2, r2, r3
 8010462:	4613      	movlt	r3, r2
 8010464:	bfb7      	itett	lt
 8010466:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010468:	1b1c      	subge	r4, r3, r4
 801046a:	4623      	movlt	r3, r4
 801046c:	2400      	movlt	r4, #0
 801046e:	f1b9 0f00 	cmp.w	r9, #0
 8010472:	bfb5      	itete	lt
 8010474:	9a05      	ldrlt	r2, [sp, #20]
 8010476:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801047a:	eba2 0809 	sublt.w	r8, r2, r9
 801047e:	464a      	movge	r2, r9
 8010480:	bfb8      	it	lt
 8010482:	2200      	movlt	r2, #0
 8010484:	e73b      	b.n	80102fe <_dtoa_r+0x666>
 8010486:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801048a:	9f08      	ldr	r7, [sp, #32]
 801048c:	461c      	mov	r4, r3
 801048e:	e743      	b.n	8010318 <_dtoa_r+0x680>
 8010490:	461a      	mov	r2, r3
 8010492:	e76f      	b.n	8010374 <_dtoa_r+0x6dc>
 8010494:	9b07      	ldr	r3, [sp, #28]
 8010496:	2b01      	cmp	r3, #1
 8010498:	dc18      	bgt.n	80104cc <_dtoa_r+0x834>
 801049a:	9b02      	ldr	r3, [sp, #8]
 801049c:	b9b3      	cbnz	r3, 80104cc <_dtoa_r+0x834>
 801049e:	9b03      	ldr	r3, [sp, #12]
 80104a0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80104a4:	b9a2      	cbnz	r2, 80104d0 <_dtoa_r+0x838>
 80104a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80104aa:	0d12      	lsrs	r2, r2, #20
 80104ac:	0512      	lsls	r2, r2, #20
 80104ae:	b18a      	cbz	r2, 80104d4 <_dtoa_r+0x83c>
 80104b0:	9b05      	ldr	r3, [sp, #20]
 80104b2:	3301      	adds	r3, #1
 80104b4:	9305      	str	r3, [sp, #20]
 80104b6:	9b06      	ldr	r3, [sp, #24]
 80104b8:	3301      	adds	r3, #1
 80104ba:	9306      	str	r3, [sp, #24]
 80104bc:	2301      	movs	r3, #1
 80104be:	930a      	str	r3, [sp, #40]	; 0x28
 80104c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f47f af6f 	bne.w	80103a6 <_dtoa_r+0x70e>
 80104c8:	2001      	movs	r0, #1
 80104ca:	e774      	b.n	80103b6 <_dtoa_r+0x71e>
 80104cc:	2300      	movs	r3, #0
 80104ce:	e7f6      	b.n	80104be <_dtoa_r+0x826>
 80104d0:	9b02      	ldr	r3, [sp, #8]
 80104d2:	e7f4      	b.n	80104be <_dtoa_r+0x826>
 80104d4:	920a      	str	r2, [sp, #40]	; 0x28
 80104d6:	e7f3      	b.n	80104c0 <_dtoa_r+0x828>
 80104d8:	d081      	beq.n	80103de <_dtoa_r+0x746>
 80104da:	4610      	mov	r0, r2
 80104dc:	301c      	adds	r0, #28
 80104de:	e777      	b.n	80103d0 <_dtoa_r+0x738>
 80104e0:	f1b9 0f00 	cmp.w	r9, #0
 80104e4:	dc37      	bgt.n	8010556 <_dtoa_r+0x8be>
 80104e6:	9b07      	ldr	r3, [sp, #28]
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	dd34      	ble.n	8010556 <_dtoa_r+0x8be>
 80104ec:	46ca      	mov	sl, r9
 80104ee:	f1ba 0f00 	cmp.w	sl, #0
 80104f2:	d10d      	bne.n	8010510 <_dtoa_r+0x878>
 80104f4:	4621      	mov	r1, r4
 80104f6:	4653      	mov	r3, sl
 80104f8:	2205      	movs	r2, #5
 80104fa:	4630      	mov	r0, r6
 80104fc:	f000 f9ca 	bl	8010894 <__multadd>
 8010500:	4601      	mov	r1, r0
 8010502:	4604      	mov	r4, r0
 8010504:	4628      	mov	r0, r5
 8010506:	f000 fbe1 	bl	8010ccc <__mcmp>
 801050a:	2800      	cmp	r0, #0
 801050c:	f73f adde 	bgt.w	80100cc <_dtoa_r+0x434>
 8010510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010512:	f8dd 8000 	ldr.w	r8, [sp]
 8010516:	ea6f 0b03 	mvn.w	fp, r3
 801051a:	f04f 0900 	mov.w	r9, #0
 801051e:	4621      	mov	r1, r4
 8010520:	4630      	mov	r0, r6
 8010522:	f000 f995 	bl	8010850 <_Bfree>
 8010526:	2f00      	cmp	r7, #0
 8010528:	f43f aea7 	beq.w	801027a <_dtoa_r+0x5e2>
 801052c:	f1b9 0f00 	cmp.w	r9, #0
 8010530:	d005      	beq.n	801053e <_dtoa_r+0x8a6>
 8010532:	45b9      	cmp	r9, r7
 8010534:	d003      	beq.n	801053e <_dtoa_r+0x8a6>
 8010536:	4649      	mov	r1, r9
 8010538:	4630      	mov	r0, r6
 801053a:	f000 f989 	bl	8010850 <_Bfree>
 801053e:	4639      	mov	r1, r7
 8010540:	4630      	mov	r0, r6
 8010542:	f000 f985 	bl	8010850 <_Bfree>
 8010546:	e698      	b.n	801027a <_dtoa_r+0x5e2>
 8010548:	2400      	movs	r4, #0
 801054a:	4627      	mov	r7, r4
 801054c:	e7e0      	b.n	8010510 <_dtoa_r+0x878>
 801054e:	46bb      	mov	fp, r7
 8010550:	4604      	mov	r4, r0
 8010552:	4607      	mov	r7, r0
 8010554:	e5ba      	b.n	80100cc <_dtoa_r+0x434>
 8010556:	9b08      	ldr	r3, [sp, #32]
 8010558:	46ca      	mov	sl, r9
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 8100 	beq.w	8010760 <_dtoa_r+0xac8>
 8010560:	f1b8 0f00 	cmp.w	r8, #0
 8010564:	dd05      	ble.n	8010572 <_dtoa_r+0x8da>
 8010566:	4639      	mov	r1, r7
 8010568:	4642      	mov	r2, r8
 801056a:	4630      	mov	r0, r6
 801056c:	f000 fb42 	bl	8010bf4 <__lshift>
 8010570:	4607      	mov	r7, r0
 8010572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010574:	2b00      	cmp	r3, #0
 8010576:	d05d      	beq.n	8010634 <_dtoa_r+0x99c>
 8010578:	6879      	ldr	r1, [r7, #4]
 801057a:	4630      	mov	r0, r6
 801057c:	f000 f928 	bl	80107d0 <_Balloc>
 8010580:	4680      	mov	r8, r0
 8010582:	b928      	cbnz	r0, 8010590 <_dtoa_r+0x8f8>
 8010584:	4b82      	ldr	r3, [pc, #520]	; (8010790 <_dtoa_r+0xaf8>)
 8010586:	4602      	mov	r2, r0
 8010588:	f240 21ea 	movw	r1, #746	; 0x2ea
 801058c:	f7ff bb9a 	b.w	800fcc4 <_dtoa_r+0x2c>
 8010590:	693a      	ldr	r2, [r7, #16]
 8010592:	3202      	adds	r2, #2
 8010594:	0092      	lsls	r2, r2, #2
 8010596:	f107 010c 	add.w	r1, r7, #12
 801059a:	300c      	adds	r0, #12
 801059c:	f000 f90a 	bl	80107b4 <memcpy>
 80105a0:	2201      	movs	r2, #1
 80105a2:	4641      	mov	r1, r8
 80105a4:	4630      	mov	r0, r6
 80105a6:	f000 fb25 	bl	8010bf4 <__lshift>
 80105aa:	9b00      	ldr	r3, [sp, #0]
 80105ac:	3301      	adds	r3, #1
 80105ae:	9305      	str	r3, [sp, #20]
 80105b0:	9b00      	ldr	r3, [sp, #0]
 80105b2:	4453      	add	r3, sl
 80105b4:	9309      	str	r3, [sp, #36]	; 0x24
 80105b6:	9b02      	ldr	r3, [sp, #8]
 80105b8:	f003 0301 	and.w	r3, r3, #1
 80105bc:	46b9      	mov	r9, r7
 80105be:	9308      	str	r3, [sp, #32]
 80105c0:	4607      	mov	r7, r0
 80105c2:	9b05      	ldr	r3, [sp, #20]
 80105c4:	4621      	mov	r1, r4
 80105c6:	3b01      	subs	r3, #1
 80105c8:	4628      	mov	r0, r5
 80105ca:	9302      	str	r3, [sp, #8]
 80105cc:	f7ff fad6 	bl	800fb7c <quorem>
 80105d0:	4603      	mov	r3, r0
 80105d2:	3330      	adds	r3, #48	; 0x30
 80105d4:	9006      	str	r0, [sp, #24]
 80105d6:	4649      	mov	r1, r9
 80105d8:	4628      	mov	r0, r5
 80105da:	930a      	str	r3, [sp, #40]	; 0x28
 80105dc:	f000 fb76 	bl	8010ccc <__mcmp>
 80105e0:	463a      	mov	r2, r7
 80105e2:	4682      	mov	sl, r0
 80105e4:	4621      	mov	r1, r4
 80105e6:	4630      	mov	r0, r6
 80105e8:	f000 fb8c 	bl	8010d04 <__mdiff>
 80105ec:	68c2      	ldr	r2, [r0, #12]
 80105ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105f0:	4680      	mov	r8, r0
 80105f2:	bb0a      	cbnz	r2, 8010638 <_dtoa_r+0x9a0>
 80105f4:	4601      	mov	r1, r0
 80105f6:	4628      	mov	r0, r5
 80105f8:	f000 fb68 	bl	8010ccc <__mcmp>
 80105fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105fe:	4602      	mov	r2, r0
 8010600:	4641      	mov	r1, r8
 8010602:	4630      	mov	r0, r6
 8010604:	920e      	str	r2, [sp, #56]	; 0x38
 8010606:	930a      	str	r3, [sp, #40]	; 0x28
 8010608:	f000 f922 	bl	8010850 <_Bfree>
 801060c:	9b07      	ldr	r3, [sp, #28]
 801060e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010610:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010614:	ea43 0102 	orr.w	r1, r3, r2
 8010618:	9b08      	ldr	r3, [sp, #32]
 801061a:	430b      	orrs	r3, r1
 801061c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801061e:	d10d      	bne.n	801063c <_dtoa_r+0x9a4>
 8010620:	2b39      	cmp	r3, #57	; 0x39
 8010622:	d029      	beq.n	8010678 <_dtoa_r+0x9e0>
 8010624:	f1ba 0f00 	cmp.w	sl, #0
 8010628:	dd01      	ble.n	801062e <_dtoa_r+0x996>
 801062a:	9b06      	ldr	r3, [sp, #24]
 801062c:	3331      	adds	r3, #49	; 0x31
 801062e:	9a02      	ldr	r2, [sp, #8]
 8010630:	7013      	strb	r3, [r2, #0]
 8010632:	e774      	b.n	801051e <_dtoa_r+0x886>
 8010634:	4638      	mov	r0, r7
 8010636:	e7b8      	b.n	80105aa <_dtoa_r+0x912>
 8010638:	2201      	movs	r2, #1
 801063a:	e7e1      	b.n	8010600 <_dtoa_r+0x968>
 801063c:	f1ba 0f00 	cmp.w	sl, #0
 8010640:	db06      	blt.n	8010650 <_dtoa_r+0x9b8>
 8010642:	9907      	ldr	r1, [sp, #28]
 8010644:	ea41 0a0a 	orr.w	sl, r1, sl
 8010648:	9908      	ldr	r1, [sp, #32]
 801064a:	ea5a 0101 	orrs.w	r1, sl, r1
 801064e:	d120      	bne.n	8010692 <_dtoa_r+0x9fa>
 8010650:	2a00      	cmp	r2, #0
 8010652:	ddec      	ble.n	801062e <_dtoa_r+0x996>
 8010654:	4629      	mov	r1, r5
 8010656:	2201      	movs	r2, #1
 8010658:	4630      	mov	r0, r6
 801065a:	9305      	str	r3, [sp, #20]
 801065c:	f000 faca 	bl	8010bf4 <__lshift>
 8010660:	4621      	mov	r1, r4
 8010662:	4605      	mov	r5, r0
 8010664:	f000 fb32 	bl	8010ccc <__mcmp>
 8010668:	2800      	cmp	r0, #0
 801066a:	9b05      	ldr	r3, [sp, #20]
 801066c:	dc02      	bgt.n	8010674 <_dtoa_r+0x9dc>
 801066e:	d1de      	bne.n	801062e <_dtoa_r+0x996>
 8010670:	07da      	lsls	r2, r3, #31
 8010672:	d5dc      	bpl.n	801062e <_dtoa_r+0x996>
 8010674:	2b39      	cmp	r3, #57	; 0x39
 8010676:	d1d8      	bne.n	801062a <_dtoa_r+0x992>
 8010678:	9a02      	ldr	r2, [sp, #8]
 801067a:	2339      	movs	r3, #57	; 0x39
 801067c:	7013      	strb	r3, [r2, #0]
 801067e:	4643      	mov	r3, r8
 8010680:	4698      	mov	r8, r3
 8010682:	3b01      	subs	r3, #1
 8010684:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010688:	2a39      	cmp	r2, #57	; 0x39
 801068a:	d051      	beq.n	8010730 <_dtoa_r+0xa98>
 801068c:	3201      	adds	r2, #1
 801068e:	701a      	strb	r2, [r3, #0]
 8010690:	e745      	b.n	801051e <_dtoa_r+0x886>
 8010692:	2a00      	cmp	r2, #0
 8010694:	dd03      	ble.n	801069e <_dtoa_r+0xa06>
 8010696:	2b39      	cmp	r3, #57	; 0x39
 8010698:	d0ee      	beq.n	8010678 <_dtoa_r+0x9e0>
 801069a:	3301      	adds	r3, #1
 801069c:	e7c7      	b.n	801062e <_dtoa_r+0x996>
 801069e:	9a05      	ldr	r2, [sp, #20]
 80106a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80106a6:	428a      	cmp	r2, r1
 80106a8:	d02b      	beq.n	8010702 <_dtoa_r+0xa6a>
 80106aa:	4629      	mov	r1, r5
 80106ac:	2300      	movs	r3, #0
 80106ae:	220a      	movs	r2, #10
 80106b0:	4630      	mov	r0, r6
 80106b2:	f000 f8ef 	bl	8010894 <__multadd>
 80106b6:	45b9      	cmp	r9, r7
 80106b8:	4605      	mov	r5, r0
 80106ba:	f04f 0300 	mov.w	r3, #0
 80106be:	f04f 020a 	mov.w	r2, #10
 80106c2:	4649      	mov	r1, r9
 80106c4:	4630      	mov	r0, r6
 80106c6:	d107      	bne.n	80106d8 <_dtoa_r+0xa40>
 80106c8:	f000 f8e4 	bl	8010894 <__multadd>
 80106cc:	4681      	mov	r9, r0
 80106ce:	4607      	mov	r7, r0
 80106d0:	9b05      	ldr	r3, [sp, #20]
 80106d2:	3301      	adds	r3, #1
 80106d4:	9305      	str	r3, [sp, #20]
 80106d6:	e774      	b.n	80105c2 <_dtoa_r+0x92a>
 80106d8:	f000 f8dc 	bl	8010894 <__multadd>
 80106dc:	4639      	mov	r1, r7
 80106de:	4681      	mov	r9, r0
 80106e0:	2300      	movs	r3, #0
 80106e2:	220a      	movs	r2, #10
 80106e4:	4630      	mov	r0, r6
 80106e6:	f000 f8d5 	bl	8010894 <__multadd>
 80106ea:	4607      	mov	r7, r0
 80106ec:	e7f0      	b.n	80106d0 <_dtoa_r+0xa38>
 80106ee:	f1ba 0f00 	cmp.w	sl, #0
 80106f2:	9a00      	ldr	r2, [sp, #0]
 80106f4:	bfcc      	ite	gt
 80106f6:	46d0      	movgt	r8, sl
 80106f8:	f04f 0801 	movle.w	r8, #1
 80106fc:	4490      	add	r8, r2
 80106fe:	f04f 0900 	mov.w	r9, #0
 8010702:	4629      	mov	r1, r5
 8010704:	2201      	movs	r2, #1
 8010706:	4630      	mov	r0, r6
 8010708:	9302      	str	r3, [sp, #8]
 801070a:	f000 fa73 	bl	8010bf4 <__lshift>
 801070e:	4621      	mov	r1, r4
 8010710:	4605      	mov	r5, r0
 8010712:	f000 fadb 	bl	8010ccc <__mcmp>
 8010716:	2800      	cmp	r0, #0
 8010718:	dcb1      	bgt.n	801067e <_dtoa_r+0x9e6>
 801071a:	d102      	bne.n	8010722 <_dtoa_r+0xa8a>
 801071c:	9b02      	ldr	r3, [sp, #8]
 801071e:	07db      	lsls	r3, r3, #31
 8010720:	d4ad      	bmi.n	801067e <_dtoa_r+0x9e6>
 8010722:	4643      	mov	r3, r8
 8010724:	4698      	mov	r8, r3
 8010726:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801072a:	2a30      	cmp	r2, #48	; 0x30
 801072c:	d0fa      	beq.n	8010724 <_dtoa_r+0xa8c>
 801072e:	e6f6      	b.n	801051e <_dtoa_r+0x886>
 8010730:	9a00      	ldr	r2, [sp, #0]
 8010732:	429a      	cmp	r2, r3
 8010734:	d1a4      	bne.n	8010680 <_dtoa_r+0x9e8>
 8010736:	f10b 0b01 	add.w	fp, fp, #1
 801073a:	2331      	movs	r3, #49	; 0x31
 801073c:	e778      	b.n	8010630 <_dtoa_r+0x998>
 801073e:	4b15      	ldr	r3, [pc, #84]	; (8010794 <_dtoa_r+0xafc>)
 8010740:	f7ff bb12 	b.w	800fd68 <_dtoa_r+0xd0>
 8010744:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010746:	2b00      	cmp	r3, #0
 8010748:	f47f aaee 	bne.w	800fd28 <_dtoa_r+0x90>
 801074c:	4b12      	ldr	r3, [pc, #72]	; (8010798 <_dtoa_r+0xb00>)
 801074e:	f7ff bb0b 	b.w	800fd68 <_dtoa_r+0xd0>
 8010752:	f1ba 0f00 	cmp.w	sl, #0
 8010756:	dc03      	bgt.n	8010760 <_dtoa_r+0xac8>
 8010758:	9b07      	ldr	r3, [sp, #28]
 801075a:	2b02      	cmp	r3, #2
 801075c:	f73f aec7 	bgt.w	80104ee <_dtoa_r+0x856>
 8010760:	f8dd 8000 	ldr.w	r8, [sp]
 8010764:	4621      	mov	r1, r4
 8010766:	4628      	mov	r0, r5
 8010768:	f7ff fa08 	bl	800fb7c <quorem>
 801076c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010770:	f808 3b01 	strb.w	r3, [r8], #1
 8010774:	9a00      	ldr	r2, [sp, #0]
 8010776:	eba8 0202 	sub.w	r2, r8, r2
 801077a:	4592      	cmp	sl, r2
 801077c:	ddb7      	ble.n	80106ee <_dtoa_r+0xa56>
 801077e:	4629      	mov	r1, r5
 8010780:	2300      	movs	r3, #0
 8010782:	220a      	movs	r2, #10
 8010784:	4630      	mov	r0, r6
 8010786:	f000 f885 	bl	8010894 <__multadd>
 801078a:	4605      	mov	r5, r0
 801078c:	e7ea      	b.n	8010764 <_dtoa_r+0xacc>
 801078e:	bf00      	nop
 8010790:	0801356b 	.word	0x0801356b
 8010794:	080134c4 	.word	0x080134c4
 8010798:	080134e8 	.word	0x080134e8

0801079c <_localeconv_r>:
 801079c:	4800      	ldr	r0, [pc, #0]	; (80107a0 <_localeconv_r+0x4>)
 801079e:	4770      	bx	lr
 80107a0:	24000178 	.word	0x24000178

080107a4 <malloc>:
 80107a4:	4b02      	ldr	r3, [pc, #8]	; (80107b0 <malloc+0xc>)
 80107a6:	4601      	mov	r1, r0
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	f000 bbef 	b.w	8010f8c <_malloc_r>
 80107ae:	bf00      	nop
 80107b0:	24000024 	.word	0x24000024

080107b4 <memcpy>:
 80107b4:	440a      	add	r2, r1
 80107b6:	4291      	cmp	r1, r2
 80107b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80107bc:	d100      	bne.n	80107c0 <memcpy+0xc>
 80107be:	4770      	bx	lr
 80107c0:	b510      	push	{r4, lr}
 80107c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107ca:	4291      	cmp	r1, r2
 80107cc:	d1f9      	bne.n	80107c2 <memcpy+0xe>
 80107ce:	bd10      	pop	{r4, pc}

080107d0 <_Balloc>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80107d4:	4604      	mov	r4, r0
 80107d6:	460d      	mov	r5, r1
 80107d8:	b976      	cbnz	r6, 80107f8 <_Balloc+0x28>
 80107da:	2010      	movs	r0, #16
 80107dc:	f7ff ffe2 	bl	80107a4 <malloc>
 80107e0:	4602      	mov	r2, r0
 80107e2:	6260      	str	r0, [r4, #36]	; 0x24
 80107e4:	b920      	cbnz	r0, 80107f0 <_Balloc+0x20>
 80107e6:	4b18      	ldr	r3, [pc, #96]	; (8010848 <_Balloc+0x78>)
 80107e8:	4818      	ldr	r0, [pc, #96]	; (801084c <_Balloc+0x7c>)
 80107ea:	2166      	movs	r1, #102	; 0x66
 80107ec:	f000 fc38 	bl	8011060 <__assert_func>
 80107f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107f4:	6006      	str	r6, [r0, #0]
 80107f6:	60c6      	str	r6, [r0, #12]
 80107f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80107fa:	68f3      	ldr	r3, [r6, #12]
 80107fc:	b183      	cbz	r3, 8010820 <_Balloc+0x50>
 80107fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010806:	b9b8      	cbnz	r0, 8010838 <_Balloc+0x68>
 8010808:	2101      	movs	r1, #1
 801080a:	fa01 f605 	lsl.w	r6, r1, r5
 801080e:	1d72      	adds	r2, r6, #5
 8010810:	0092      	lsls	r2, r2, #2
 8010812:	4620      	mov	r0, r4
 8010814:	f000 fb5a 	bl	8010ecc <_calloc_r>
 8010818:	b160      	cbz	r0, 8010834 <_Balloc+0x64>
 801081a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801081e:	e00e      	b.n	801083e <_Balloc+0x6e>
 8010820:	2221      	movs	r2, #33	; 0x21
 8010822:	2104      	movs	r1, #4
 8010824:	4620      	mov	r0, r4
 8010826:	f000 fb51 	bl	8010ecc <_calloc_r>
 801082a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801082c:	60f0      	str	r0, [r6, #12]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1e4      	bne.n	80107fe <_Balloc+0x2e>
 8010834:	2000      	movs	r0, #0
 8010836:	bd70      	pop	{r4, r5, r6, pc}
 8010838:	6802      	ldr	r2, [r0, #0]
 801083a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801083e:	2300      	movs	r3, #0
 8010840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010844:	e7f7      	b.n	8010836 <_Balloc+0x66>
 8010846:	bf00      	nop
 8010848:	080134f5 	.word	0x080134f5
 801084c:	0801357c 	.word	0x0801357c

08010850 <_Bfree>:
 8010850:	b570      	push	{r4, r5, r6, lr}
 8010852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010854:	4605      	mov	r5, r0
 8010856:	460c      	mov	r4, r1
 8010858:	b976      	cbnz	r6, 8010878 <_Bfree+0x28>
 801085a:	2010      	movs	r0, #16
 801085c:	f7ff ffa2 	bl	80107a4 <malloc>
 8010860:	4602      	mov	r2, r0
 8010862:	6268      	str	r0, [r5, #36]	; 0x24
 8010864:	b920      	cbnz	r0, 8010870 <_Bfree+0x20>
 8010866:	4b09      	ldr	r3, [pc, #36]	; (801088c <_Bfree+0x3c>)
 8010868:	4809      	ldr	r0, [pc, #36]	; (8010890 <_Bfree+0x40>)
 801086a:	218a      	movs	r1, #138	; 0x8a
 801086c:	f000 fbf8 	bl	8011060 <__assert_func>
 8010870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010874:	6006      	str	r6, [r0, #0]
 8010876:	60c6      	str	r6, [r0, #12]
 8010878:	b13c      	cbz	r4, 801088a <_Bfree+0x3a>
 801087a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801087c:	6862      	ldr	r2, [r4, #4]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010884:	6021      	str	r1, [r4, #0]
 8010886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801088a:	bd70      	pop	{r4, r5, r6, pc}
 801088c:	080134f5 	.word	0x080134f5
 8010890:	0801357c 	.word	0x0801357c

08010894 <__multadd>:
 8010894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010898:	690e      	ldr	r6, [r1, #16]
 801089a:	4607      	mov	r7, r0
 801089c:	4698      	mov	r8, r3
 801089e:	460c      	mov	r4, r1
 80108a0:	f101 0014 	add.w	r0, r1, #20
 80108a4:	2300      	movs	r3, #0
 80108a6:	6805      	ldr	r5, [r0, #0]
 80108a8:	b2a9      	uxth	r1, r5
 80108aa:	fb02 8101 	mla	r1, r2, r1, r8
 80108ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80108b2:	0c2d      	lsrs	r5, r5, #16
 80108b4:	fb02 c505 	mla	r5, r2, r5, ip
 80108b8:	b289      	uxth	r1, r1
 80108ba:	3301      	adds	r3, #1
 80108bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80108c0:	429e      	cmp	r6, r3
 80108c2:	f840 1b04 	str.w	r1, [r0], #4
 80108c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80108ca:	dcec      	bgt.n	80108a6 <__multadd+0x12>
 80108cc:	f1b8 0f00 	cmp.w	r8, #0
 80108d0:	d022      	beq.n	8010918 <__multadd+0x84>
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	42b3      	cmp	r3, r6
 80108d6:	dc19      	bgt.n	801090c <__multadd+0x78>
 80108d8:	6861      	ldr	r1, [r4, #4]
 80108da:	4638      	mov	r0, r7
 80108dc:	3101      	adds	r1, #1
 80108de:	f7ff ff77 	bl	80107d0 <_Balloc>
 80108e2:	4605      	mov	r5, r0
 80108e4:	b928      	cbnz	r0, 80108f2 <__multadd+0x5e>
 80108e6:	4602      	mov	r2, r0
 80108e8:	4b0d      	ldr	r3, [pc, #52]	; (8010920 <__multadd+0x8c>)
 80108ea:	480e      	ldr	r0, [pc, #56]	; (8010924 <__multadd+0x90>)
 80108ec:	21b5      	movs	r1, #181	; 0xb5
 80108ee:	f000 fbb7 	bl	8011060 <__assert_func>
 80108f2:	6922      	ldr	r2, [r4, #16]
 80108f4:	3202      	adds	r2, #2
 80108f6:	f104 010c 	add.w	r1, r4, #12
 80108fa:	0092      	lsls	r2, r2, #2
 80108fc:	300c      	adds	r0, #12
 80108fe:	f7ff ff59 	bl	80107b4 <memcpy>
 8010902:	4621      	mov	r1, r4
 8010904:	4638      	mov	r0, r7
 8010906:	f7ff ffa3 	bl	8010850 <_Bfree>
 801090a:	462c      	mov	r4, r5
 801090c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010910:	3601      	adds	r6, #1
 8010912:	f8c3 8014 	str.w	r8, [r3, #20]
 8010916:	6126      	str	r6, [r4, #16]
 8010918:	4620      	mov	r0, r4
 801091a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091e:	bf00      	nop
 8010920:	0801356b 	.word	0x0801356b
 8010924:	0801357c 	.word	0x0801357c

08010928 <__hi0bits>:
 8010928:	0c03      	lsrs	r3, r0, #16
 801092a:	041b      	lsls	r3, r3, #16
 801092c:	b9d3      	cbnz	r3, 8010964 <__hi0bits+0x3c>
 801092e:	0400      	lsls	r0, r0, #16
 8010930:	2310      	movs	r3, #16
 8010932:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010936:	bf04      	itt	eq
 8010938:	0200      	lsleq	r0, r0, #8
 801093a:	3308      	addeq	r3, #8
 801093c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010940:	bf04      	itt	eq
 8010942:	0100      	lsleq	r0, r0, #4
 8010944:	3304      	addeq	r3, #4
 8010946:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801094a:	bf04      	itt	eq
 801094c:	0080      	lsleq	r0, r0, #2
 801094e:	3302      	addeq	r3, #2
 8010950:	2800      	cmp	r0, #0
 8010952:	db05      	blt.n	8010960 <__hi0bits+0x38>
 8010954:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010958:	f103 0301 	add.w	r3, r3, #1
 801095c:	bf08      	it	eq
 801095e:	2320      	moveq	r3, #32
 8010960:	4618      	mov	r0, r3
 8010962:	4770      	bx	lr
 8010964:	2300      	movs	r3, #0
 8010966:	e7e4      	b.n	8010932 <__hi0bits+0xa>

08010968 <__lo0bits>:
 8010968:	6803      	ldr	r3, [r0, #0]
 801096a:	f013 0207 	ands.w	r2, r3, #7
 801096e:	4601      	mov	r1, r0
 8010970:	d00b      	beq.n	801098a <__lo0bits+0x22>
 8010972:	07da      	lsls	r2, r3, #31
 8010974:	d424      	bmi.n	80109c0 <__lo0bits+0x58>
 8010976:	0798      	lsls	r0, r3, #30
 8010978:	bf49      	itett	mi
 801097a:	085b      	lsrmi	r3, r3, #1
 801097c:	089b      	lsrpl	r3, r3, #2
 801097e:	2001      	movmi	r0, #1
 8010980:	600b      	strmi	r3, [r1, #0]
 8010982:	bf5c      	itt	pl
 8010984:	600b      	strpl	r3, [r1, #0]
 8010986:	2002      	movpl	r0, #2
 8010988:	4770      	bx	lr
 801098a:	b298      	uxth	r0, r3
 801098c:	b9b0      	cbnz	r0, 80109bc <__lo0bits+0x54>
 801098e:	0c1b      	lsrs	r3, r3, #16
 8010990:	2010      	movs	r0, #16
 8010992:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010996:	bf04      	itt	eq
 8010998:	0a1b      	lsreq	r3, r3, #8
 801099a:	3008      	addeq	r0, #8
 801099c:	071a      	lsls	r2, r3, #28
 801099e:	bf04      	itt	eq
 80109a0:	091b      	lsreq	r3, r3, #4
 80109a2:	3004      	addeq	r0, #4
 80109a4:	079a      	lsls	r2, r3, #30
 80109a6:	bf04      	itt	eq
 80109a8:	089b      	lsreq	r3, r3, #2
 80109aa:	3002      	addeq	r0, #2
 80109ac:	07da      	lsls	r2, r3, #31
 80109ae:	d403      	bmi.n	80109b8 <__lo0bits+0x50>
 80109b0:	085b      	lsrs	r3, r3, #1
 80109b2:	f100 0001 	add.w	r0, r0, #1
 80109b6:	d005      	beq.n	80109c4 <__lo0bits+0x5c>
 80109b8:	600b      	str	r3, [r1, #0]
 80109ba:	4770      	bx	lr
 80109bc:	4610      	mov	r0, r2
 80109be:	e7e8      	b.n	8010992 <__lo0bits+0x2a>
 80109c0:	2000      	movs	r0, #0
 80109c2:	4770      	bx	lr
 80109c4:	2020      	movs	r0, #32
 80109c6:	4770      	bx	lr

080109c8 <__i2b>:
 80109c8:	b510      	push	{r4, lr}
 80109ca:	460c      	mov	r4, r1
 80109cc:	2101      	movs	r1, #1
 80109ce:	f7ff feff 	bl	80107d0 <_Balloc>
 80109d2:	4602      	mov	r2, r0
 80109d4:	b928      	cbnz	r0, 80109e2 <__i2b+0x1a>
 80109d6:	4b05      	ldr	r3, [pc, #20]	; (80109ec <__i2b+0x24>)
 80109d8:	4805      	ldr	r0, [pc, #20]	; (80109f0 <__i2b+0x28>)
 80109da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80109de:	f000 fb3f 	bl	8011060 <__assert_func>
 80109e2:	2301      	movs	r3, #1
 80109e4:	6144      	str	r4, [r0, #20]
 80109e6:	6103      	str	r3, [r0, #16]
 80109e8:	bd10      	pop	{r4, pc}
 80109ea:	bf00      	nop
 80109ec:	0801356b 	.word	0x0801356b
 80109f0:	0801357c 	.word	0x0801357c

080109f4 <__multiply>:
 80109f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f8:	4614      	mov	r4, r2
 80109fa:	690a      	ldr	r2, [r1, #16]
 80109fc:	6923      	ldr	r3, [r4, #16]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	bfb8      	it	lt
 8010a02:	460b      	movlt	r3, r1
 8010a04:	460d      	mov	r5, r1
 8010a06:	bfbc      	itt	lt
 8010a08:	4625      	movlt	r5, r4
 8010a0a:	461c      	movlt	r4, r3
 8010a0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010a10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010a14:	68ab      	ldr	r3, [r5, #8]
 8010a16:	6869      	ldr	r1, [r5, #4]
 8010a18:	eb0a 0709 	add.w	r7, sl, r9
 8010a1c:	42bb      	cmp	r3, r7
 8010a1e:	b085      	sub	sp, #20
 8010a20:	bfb8      	it	lt
 8010a22:	3101      	addlt	r1, #1
 8010a24:	f7ff fed4 	bl	80107d0 <_Balloc>
 8010a28:	b930      	cbnz	r0, 8010a38 <__multiply+0x44>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	4b42      	ldr	r3, [pc, #264]	; (8010b38 <__multiply+0x144>)
 8010a2e:	4843      	ldr	r0, [pc, #268]	; (8010b3c <__multiply+0x148>)
 8010a30:	f240 115d 	movw	r1, #349	; 0x15d
 8010a34:	f000 fb14 	bl	8011060 <__assert_func>
 8010a38:	f100 0614 	add.w	r6, r0, #20
 8010a3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010a40:	4633      	mov	r3, r6
 8010a42:	2200      	movs	r2, #0
 8010a44:	4543      	cmp	r3, r8
 8010a46:	d31e      	bcc.n	8010a86 <__multiply+0x92>
 8010a48:	f105 0c14 	add.w	ip, r5, #20
 8010a4c:	f104 0314 	add.w	r3, r4, #20
 8010a50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010a54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010a58:	9202      	str	r2, [sp, #8]
 8010a5a:	ebac 0205 	sub.w	r2, ip, r5
 8010a5e:	3a15      	subs	r2, #21
 8010a60:	f022 0203 	bic.w	r2, r2, #3
 8010a64:	3204      	adds	r2, #4
 8010a66:	f105 0115 	add.w	r1, r5, #21
 8010a6a:	458c      	cmp	ip, r1
 8010a6c:	bf38      	it	cc
 8010a6e:	2204      	movcc	r2, #4
 8010a70:	9201      	str	r2, [sp, #4]
 8010a72:	9a02      	ldr	r2, [sp, #8]
 8010a74:	9303      	str	r3, [sp, #12]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d808      	bhi.n	8010a8c <__multiply+0x98>
 8010a7a:	2f00      	cmp	r7, #0
 8010a7c:	dc55      	bgt.n	8010b2a <__multiply+0x136>
 8010a7e:	6107      	str	r7, [r0, #16]
 8010a80:	b005      	add	sp, #20
 8010a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a86:	f843 2b04 	str.w	r2, [r3], #4
 8010a8a:	e7db      	b.n	8010a44 <__multiply+0x50>
 8010a8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010a90:	f1ba 0f00 	cmp.w	sl, #0
 8010a94:	d020      	beq.n	8010ad8 <__multiply+0xe4>
 8010a96:	f105 0e14 	add.w	lr, r5, #20
 8010a9a:	46b1      	mov	r9, r6
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010aa2:	f8d9 b000 	ldr.w	fp, [r9]
 8010aa6:	b2a1      	uxth	r1, r4
 8010aa8:	fa1f fb8b 	uxth.w	fp, fp
 8010aac:	fb0a b101 	mla	r1, sl, r1, fp
 8010ab0:	4411      	add	r1, r2
 8010ab2:	f8d9 2000 	ldr.w	r2, [r9]
 8010ab6:	0c24      	lsrs	r4, r4, #16
 8010ab8:	0c12      	lsrs	r2, r2, #16
 8010aba:	fb0a 2404 	mla	r4, sl, r4, r2
 8010abe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010ac2:	b289      	uxth	r1, r1
 8010ac4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010ac8:	45f4      	cmp	ip, lr
 8010aca:	f849 1b04 	str.w	r1, [r9], #4
 8010ace:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010ad2:	d8e4      	bhi.n	8010a9e <__multiply+0xaa>
 8010ad4:	9901      	ldr	r1, [sp, #4]
 8010ad6:	5072      	str	r2, [r6, r1]
 8010ad8:	9a03      	ldr	r2, [sp, #12]
 8010ada:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010ade:	3304      	adds	r3, #4
 8010ae0:	f1b9 0f00 	cmp.w	r9, #0
 8010ae4:	d01f      	beq.n	8010b26 <__multiply+0x132>
 8010ae6:	6834      	ldr	r4, [r6, #0]
 8010ae8:	f105 0114 	add.w	r1, r5, #20
 8010aec:	46b6      	mov	lr, r6
 8010aee:	f04f 0a00 	mov.w	sl, #0
 8010af2:	880a      	ldrh	r2, [r1, #0]
 8010af4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010af8:	fb09 b202 	mla	r2, r9, r2, fp
 8010afc:	4492      	add	sl, r2
 8010afe:	b2a4      	uxth	r4, r4
 8010b00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010b04:	f84e 4b04 	str.w	r4, [lr], #4
 8010b08:	f851 4b04 	ldr.w	r4, [r1], #4
 8010b0c:	f8be 2000 	ldrh.w	r2, [lr]
 8010b10:	0c24      	lsrs	r4, r4, #16
 8010b12:	fb09 2404 	mla	r4, r9, r4, r2
 8010b16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010b1a:	458c      	cmp	ip, r1
 8010b1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b20:	d8e7      	bhi.n	8010af2 <__multiply+0xfe>
 8010b22:	9a01      	ldr	r2, [sp, #4]
 8010b24:	50b4      	str	r4, [r6, r2]
 8010b26:	3604      	adds	r6, #4
 8010b28:	e7a3      	b.n	8010a72 <__multiply+0x7e>
 8010b2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1a5      	bne.n	8010a7e <__multiply+0x8a>
 8010b32:	3f01      	subs	r7, #1
 8010b34:	e7a1      	b.n	8010a7a <__multiply+0x86>
 8010b36:	bf00      	nop
 8010b38:	0801356b 	.word	0x0801356b
 8010b3c:	0801357c 	.word	0x0801357c

08010b40 <__pow5mult>:
 8010b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b44:	4615      	mov	r5, r2
 8010b46:	f012 0203 	ands.w	r2, r2, #3
 8010b4a:	4606      	mov	r6, r0
 8010b4c:	460f      	mov	r7, r1
 8010b4e:	d007      	beq.n	8010b60 <__pow5mult+0x20>
 8010b50:	4c25      	ldr	r4, [pc, #148]	; (8010be8 <__pow5mult+0xa8>)
 8010b52:	3a01      	subs	r2, #1
 8010b54:	2300      	movs	r3, #0
 8010b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b5a:	f7ff fe9b 	bl	8010894 <__multadd>
 8010b5e:	4607      	mov	r7, r0
 8010b60:	10ad      	asrs	r5, r5, #2
 8010b62:	d03d      	beq.n	8010be0 <__pow5mult+0xa0>
 8010b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010b66:	b97c      	cbnz	r4, 8010b88 <__pow5mult+0x48>
 8010b68:	2010      	movs	r0, #16
 8010b6a:	f7ff fe1b 	bl	80107a4 <malloc>
 8010b6e:	4602      	mov	r2, r0
 8010b70:	6270      	str	r0, [r6, #36]	; 0x24
 8010b72:	b928      	cbnz	r0, 8010b80 <__pow5mult+0x40>
 8010b74:	4b1d      	ldr	r3, [pc, #116]	; (8010bec <__pow5mult+0xac>)
 8010b76:	481e      	ldr	r0, [pc, #120]	; (8010bf0 <__pow5mult+0xb0>)
 8010b78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010b7c:	f000 fa70 	bl	8011060 <__assert_func>
 8010b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b84:	6004      	str	r4, [r0, #0]
 8010b86:	60c4      	str	r4, [r0, #12]
 8010b88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b90:	b94c      	cbnz	r4, 8010ba6 <__pow5mult+0x66>
 8010b92:	f240 2171 	movw	r1, #625	; 0x271
 8010b96:	4630      	mov	r0, r6
 8010b98:	f7ff ff16 	bl	80109c8 <__i2b>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	6003      	str	r3, [r0, #0]
 8010ba6:	f04f 0900 	mov.w	r9, #0
 8010baa:	07eb      	lsls	r3, r5, #31
 8010bac:	d50a      	bpl.n	8010bc4 <__pow5mult+0x84>
 8010bae:	4639      	mov	r1, r7
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f7ff ff1e 	bl	80109f4 <__multiply>
 8010bb8:	4639      	mov	r1, r7
 8010bba:	4680      	mov	r8, r0
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	f7ff fe47 	bl	8010850 <_Bfree>
 8010bc2:	4647      	mov	r7, r8
 8010bc4:	106d      	asrs	r5, r5, #1
 8010bc6:	d00b      	beq.n	8010be0 <__pow5mult+0xa0>
 8010bc8:	6820      	ldr	r0, [r4, #0]
 8010bca:	b938      	cbnz	r0, 8010bdc <__pow5mult+0x9c>
 8010bcc:	4622      	mov	r2, r4
 8010bce:	4621      	mov	r1, r4
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f7ff ff0f 	bl	80109f4 <__multiply>
 8010bd6:	6020      	str	r0, [r4, #0]
 8010bd8:	f8c0 9000 	str.w	r9, [r0]
 8010bdc:	4604      	mov	r4, r0
 8010bde:	e7e4      	b.n	8010baa <__pow5mult+0x6a>
 8010be0:	4638      	mov	r0, r7
 8010be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010be6:	bf00      	nop
 8010be8:	080136d0 	.word	0x080136d0
 8010bec:	080134f5 	.word	0x080134f5
 8010bf0:	0801357c 	.word	0x0801357c

08010bf4 <__lshift>:
 8010bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	6849      	ldr	r1, [r1, #4]
 8010bfc:	6923      	ldr	r3, [r4, #16]
 8010bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c02:	68a3      	ldr	r3, [r4, #8]
 8010c04:	4607      	mov	r7, r0
 8010c06:	4691      	mov	r9, r2
 8010c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c0c:	f108 0601 	add.w	r6, r8, #1
 8010c10:	42b3      	cmp	r3, r6
 8010c12:	db0b      	blt.n	8010c2c <__lshift+0x38>
 8010c14:	4638      	mov	r0, r7
 8010c16:	f7ff fddb 	bl	80107d0 <_Balloc>
 8010c1a:	4605      	mov	r5, r0
 8010c1c:	b948      	cbnz	r0, 8010c32 <__lshift+0x3e>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	4b28      	ldr	r3, [pc, #160]	; (8010cc4 <__lshift+0xd0>)
 8010c22:	4829      	ldr	r0, [pc, #164]	; (8010cc8 <__lshift+0xd4>)
 8010c24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010c28:	f000 fa1a 	bl	8011060 <__assert_func>
 8010c2c:	3101      	adds	r1, #1
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	e7ee      	b.n	8010c10 <__lshift+0x1c>
 8010c32:	2300      	movs	r3, #0
 8010c34:	f100 0114 	add.w	r1, r0, #20
 8010c38:	f100 0210 	add.w	r2, r0, #16
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	4553      	cmp	r3, sl
 8010c40:	db33      	blt.n	8010caa <__lshift+0xb6>
 8010c42:	6920      	ldr	r0, [r4, #16]
 8010c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c48:	f104 0314 	add.w	r3, r4, #20
 8010c4c:	f019 091f 	ands.w	r9, r9, #31
 8010c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c58:	d02b      	beq.n	8010cb2 <__lshift+0xbe>
 8010c5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010c5e:	468a      	mov	sl, r1
 8010c60:	2200      	movs	r2, #0
 8010c62:	6818      	ldr	r0, [r3, #0]
 8010c64:	fa00 f009 	lsl.w	r0, r0, r9
 8010c68:	4302      	orrs	r2, r0
 8010c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8010c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c72:	459c      	cmp	ip, r3
 8010c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c78:	d8f3      	bhi.n	8010c62 <__lshift+0x6e>
 8010c7a:	ebac 0304 	sub.w	r3, ip, r4
 8010c7e:	3b15      	subs	r3, #21
 8010c80:	f023 0303 	bic.w	r3, r3, #3
 8010c84:	3304      	adds	r3, #4
 8010c86:	f104 0015 	add.w	r0, r4, #21
 8010c8a:	4584      	cmp	ip, r0
 8010c8c:	bf38      	it	cc
 8010c8e:	2304      	movcc	r3, #4
 8010c90:	50ca      	str	r2, [r1, r3]
 8010c92:	b10a      	cbz	r2, 8010c98 <__lshift+0xa4>
 8010c94:	f108 0602 	add.w	r6, r8, #2
 8010c98:	3e01      	subs	r6, #1
 8010c9a:	4638      	mov	r0, r7
 8010c9c:	612e      	str	r6, [r5, #16]
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	f7ff fdd6 	bl	8010850 <_Bfree>
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cae:	3301      	adds	r3, #1
 8010cb0:	e7c5      	b.n	8010c3e <__lshift+0x4a>
 8010cb2:	3904      	subs	r1, #4
 8010cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010cbc:	459c      	cmp	ip, r3
 8010cbe:	d8f9      	bhi.n	8010cb4 <__lshift+0xc0>
 8010cc0:	e7ea      	b.n	8010c98 <__lshift+0xa4>
 8010cc2:	bf00      	nop
 8010cc4:	0801356b 	.word	0x0801356b
 8010cc8:	0801357c 	.word	0x0801357c

08010ccc <__mcmp>:
 8010ccc:	b530      	push	{r4, r5, lr}
 8010cce:	6902      	ldr	r2, [r0, #16]
 8010cd0:	690c      	ldr	r4, [r1, #16]
 8010cd2:	1b12      	subs	r2, r2, r4
 8010cd4:	d10e      	bne.n	8010cf4 <__mcmp+0x28>
 8010cd6:	f100 0314 	add.w	r3, r0, #20
 8010cda:	3114      	adds	r1, #20
 8010cdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010ce0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ce4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ce8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010cec:	42a5      	cmp	r5, r4
 8010cee:	d003      	beq.n	8010cf8 <__mcmp+0x2c>
 8010cf0:	d305      	bcc.n	8010cfe <__mcmp+0x32>
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	bd30      	pop	{r4, r5, pc}
 8010cf8:	4283      	cmp	r3, r0
 8010cfa:	d3f3      	bcc.n	8010ce4 <__mcmp+0x18>
 8010cfc:	e7fa      	b.n	8010cf4 <__mcmp+0x28>
 8010cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8010d02:	e7f7      	b.n	8010cf4 <__mcmp+0x28>

08010d04 <__mdiff>:
 8010d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	460c      	mov	r4, r1
 8010d0a:	4606      	mov	r6, r0
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	4620      	mov	r0, r4
 8010d10:	4617      	mov	r7, r2
 8010d12:	f7ff ffdb 	bl	8010ccc <__mcmp>
 8010d16:	1e05      	subs	r5, r0, #0
 8010d18:	d110      	bne.n	8010d3c <__mdiff+0x38>
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	f7ff fd57 	bl	80107d0 <_Balloc>
 8010d22:	b930      	cbnz	r0, 8010d32 <__mdiff+0x2e>
 8010d24:	4b39      	ldr	r3, [pc, #228]	; (8010e0c <__mdiff+0x108>)
 8010d26:	4602      	mov	r2, r0
 8010d28:	f240 2132 	movw	r1, #562	; 0x232
 8010d2c:	4838      	ldr	r0, [pc, #224]	; (8010e10 <__mdiff+0x10c>)
 8010d2e:	f000 f997 	bl	8011060 <__assert_func>
 8010d32:	2301      	movs	r3, #1
 8010d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3c:	bfa4      	itt	ge
 8010d3e:	463b      	movge	r3, r7
 8010d40:	4627      	movge	r7, r4
 8010d42:	4630      	mov	r0, r6
 8010d44:	6879      	ldr	r1, [r7, #4]
 8010d46:	bfa6      	itte	ge
 8010d48:	461c      	movge	r4, r3
 8010d4a:	2500      	movge	r5, #0
 8010d4c:	2501      	movlt	r5, #1
 8010d4e:	f7ff fd3f 	bl	80107d0 <_Balloc>
 8010d52:	b920      	cbnz	r0, 8010d5e <__mdiff+0x5a>
 8010d54:	4b2d      	ldr	r3, [pc, #180]	; (8010e0c <__mdiff+0x108>)
 8010d56:	4602      	mov	r2, r0
 8010d58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010d5c:	e7e6      	b.n	8010d2c <__mdiff+0x28>
 8010d5e:	693e      	ldr	r6, [r7, #16]
 8010d60:	60c5      	str	r5, [r0, #12]
 8010d62:	6925      	ldr	r5, [r4, #16]
 8010d64:	f107 0114 	add.w	r1, r7, #20
 8010d68:	f104 0914 	add.w	r9, r4, #20
 8010d6c:	f100 0e14 	add.w	lr, r0, #20
 8010d70:	f107 0210 	add.w	r2, r7, #16
 8010d74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010d78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010d7c:	46f2      	mov	sl, lr
 8010d7e:	2700      	movs	r7, #0
 8010d80:	f859 3b04 	ldr.w	r3, [r9], #4
 8010d84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010d88:	fa1f f883 	uxth.w	r8, r3
 8010d8c:	fa17 f78b 	uxtah	r7, r7, fp
 8010d90:	0c1b      	lsrs	r3, r3, #16
 8010d92:	eba7 0808 	sub.w	r8, r7, r8
 8010d96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010d9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010d9e:	fa1f f888 	uxth.w	r8, r8
 8010da2:	141f      	asrs	r7, r3, #16
 8010da4:	454d      	cmp	r5, r9
 8010da6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010daa:	f84a 3b04 	str.w	r3, [sl], #4
 8010dae:	d8e7      	bhi.n	8010d80 <__mdiff+0x7c>
 8010db0:	1b2b      	subs	r3, r5, r4
 8010db2:	3b15      	subs	r3, #21
 8010db4:	f023 0303 	bic.w	r3, r3, #3
 8010db8:	3304      	adds	r3, #4
 8010dba:	3415      	adds	r4, #21
 8010dbc:	42a5      	cmp	r5, r4
 8010dbe:	bf38      	it	cc
 8010dc0:	2304      	movcc	r3, #4
 8010dc2:	4419      	add	r1, r3
 8010dc4:	4473      	add	r3, lr
 8010dc6:	469e      	mov	lr, r3
 8010dc8:	460d      	mov	r5, r1
 8010dca:	4565      	cmp	r5, ip
 8010dcc:	d30e      	bcc.n	8010dec <__mdiff+0xe8>
 8010dce:	f10c 0203 	add.w	r2, ip, #3
 8010dd2:	1a52      	subs	r2, r2, r1
 8010dd4:	f022 0203 	bic.w	r2, r2, #3
 8010dd8:	3903      	subs	r1, #3
 8010dda:	458c      	cmp	ip, r1
 8010ddc:	bf38      	it	cc
 8010dde:	2200      	movcc	r2, #0
 8010de0:	441a      	add	r2, r3
 8010de2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010de6:	b17b      	cbz	r3, 8010e08 <__mdiff+0x104>
 8010de8:	6106      	str	r6, [r0, #16]
 8010dea:	e7a5      	b.n	8010d38 <__mdiff+0x34>
 8010dec:	f855 8b04 	ldr.w	r8, [r5], #4
 8010df0:	fa17 f488 	uxtah	r4, r7, r8
 8010df4:	1422      	asrs	r2, r4, #16
 8010df6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010dfa:	b2a4      	uxth	r4, r4
 8010dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010e00:	f84e 4b04 	str.w	r4, [lr], #4
 8010e04:	1417      	asrs	r7, r2, #16
 8010e06:	e7e0      	b.n	8010dca <__mdiff+0xc6>
 8010e08:	3e01      	subs	r6, #1
 8010e0a:	e7ea      	b.n	8010de2 <__mdiff+0xde>
 8010e0c:	0801356b 	.word	0x0801356b
 8010e10:	0801357c 	.word	0x0801357c

08010e14 <__d2b>:
 8010e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e18:	4689      	mov	r9, r1
 8010e1a:	2101      	movs	r1, #1
 8010e1c:	ec57 6b10 	vmov	r6, r7, d0
 8010e20:	4690      	mov	r8, r2
 8010e22:	f7ff fcd5 	bl	80107d0 <_Balloc>
 8010e26:	4604      	mov	r4, r0
 8010e28:	b930      	cbnz	r0, 8010e38 <__d2b+0x24>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	4b25      	ldr	r3, [pc, #148]	; (8010ec4 <__d2b+0xb0>)
 8010e2e:	4826      	ldr	r0, [pc, #152]	; (8010ec8 <__d2b+0xb4>)
 8010e30:	f240 310a 	movw	r1, #778	; 0x30a
 8010e34:	f000 f914 	bl	8011060 <__assert_func>
 8010e38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010e3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e40:	bb35      	cbnz	r5, 8010e90 <__d2b+0x7c>
 8010e42:	2e00      	cmp	r6, #0
 8010e44:	9301      	str	r3, [sp, #4]
 8010e46:	d028      	beq.n	8010e9a <__d2b+0x86>
 8010e48:	4668      	mov	r0, sp
 8010e4a:	9600      	str	r6, [sp, #0]
 8010e4c:	f7ff fd8c 	bl	8010968 <__lo0bits>
 8010e50:	9900      	ldr	r1, [sp, #0]
 8010e52:	b300      	cbz	r0, 8010e96 <__d2b+0x82>
 8010e54:	9a01      	ldr	r2, [sp, #4]
 8010e56:	f1c0 0320 	rsb	r3, r0, #32
 8010e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e5e:	430b      	orrs	r3, r1
 8010e60:	40c2      	lsrs	r2, r0
 8010e62:	6163      	str	r3, [r4, #20]
 8010e64:	9201      	str	r2, [sp, #4]
 8010e66:	9b01      	ldr	r3, [sp, #4]
 8010e68:	61a3      	str	r3, [r4, #24]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	bf14      	ite	ne
 8010e6e:	2202      	movne	r2, #2
 8010e70:	2201      	moveq	r2, #1
 8010e72:	6122      	str	r2, [r4, #16]
 8010e74:	b1d5      	cbz	r5, 8010eac <__d2b+0x98>
 8010e76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010e7a:	4405      	add	r5, r0
 8010e7c:	f8c9 5000 	str.w	r5, [r9]
 8010e80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e84:	f8c8 0000 	str.w	r0, [r8]
 8010e88:	4620      	mov	r0, r4
 8010e8a:	b003      	add	sp, #12
 8010e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e94:	e7d5      	b.n	8010e42 <__d2b+0x2e>
 8010e96:	6161      	str	r1, [r4, #20]
 8010e98:	e7e5      	b.n	8010e66 <__d2b+0x52>
 8010e9a:	a801      	add	r0, sp, #4
 8010e9c:	f7ff fd64 	bl	8010968 <__lo0bits>
 8010ea0:	9b01      	ldr	r3, [sp, #4]
 8010ea2:	6163      	str	r3, [r4, #20]
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	6122      	str	r2, [r4, #16]
 8010ea8:	3020      	adds	r0, #32
 8010eaa:	e7e3      	b.n	8010e74 <__d2b+0x60>
 8010eac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010eb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010eb4:	f8c9 0000 	str.w	r0, [r9]
 8010eb8:	6918      	ldr	r0, [r3, #16]
 8010eba:	f7ff fd35 	bl	8010928 <__hi0bits>
 8010ebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010ec2:	e7df      	b.n	8010e84 <__d2b+0x70>
 8010ec4:	0801356b 	.word	0x0801356b
 8010ec8:	0801357c 	.word	0x0801357c

08010ecc <_calloc_r>:
 8010ecc:	b513      	push	{r0, r1, r4, lr}
 8010ece:	434a      	muls	r2, r1
 8010ed0:	4611      	mov	r1, r2
 8010ed2:	9201      	str	r2, [sp, #4]
 8010ed4:	f000 f85a 	bl	8010f8c <_malloc_r>
 8010ed8:	4604      	mov	r4, r0
 8010eda:	b118      	cbz	r0, 8010ee4 <_calloc_r+0x18>
 8010edc:	9a01      	ldr	r2, [sp, #4]
 8010ede:	2100      	movs	r1, #0
 8010ee0:	f7fe fa00 	bl	800f2e4 <memset>
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	b002      	add	sp, #8
 8010ee8:	bd10      	pop	{r4, pc}
	...

08010eec <_free_r>:
 8010eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eee:	2900      	cmp	r1, #0
 8010ef0:	d048      	beq.n	8010f84 <_free_r+0x98>
 8010ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ef6:	9001      	str	r0, [sp, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f1a1 0404 	sub.w	r4, r1, #4
 8010efe:	bfb8      	it	lt
 8010f00:	18e4      	addlt	r4, r4, r3
 8010f02:	f000 f8ef 	bl	80110e4 <__malloc_lock>
 8010f06:	4a20      	ldr	r2, [pc, #128]	; (8010f88 <_free_r+0x9c>)
 8010f08:	9801      	ldr	r0, [sp, #4]
 8010f0a:	6813      	ldr	r3, [r2, #0]
 8010f0c:	4615      	mov	r5, r2
 8010f0e:	b933      	cbnz	r3, 8010f1e <_free_r+0x32>
 8010f10:	6063      	str	r3, [r4, #4]
 8010f12:	6014      	str	r4, [r2, #0]
 8010f14:	b003      	add	sp, #12
 8010f16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f1a:	f000 b8e9 	b.w	80110f0 <__malloc_unlock>
 8010f1e:	42a3      	cmp	r3, r4
 8010f20:	d90b      	bls.n	8010f3a <_free_r+0x4e>
 8010f22:	6821      	ldr	r1, [r4, #0]
 8010f24:	1862      	adds	r2, r4, r1
 8010f26:	4293      	cmp	r3, r2
 8010f28:	bf04      	itt	eq
 8010f2a:	681a      	ldreq	r2, [r3, #0]
 8010f2c:	685b      	ldreq	r3, [r3, #4]
 8010f2e:	6063      	str	r3, [r4, #4]
 8010f30:	bf04      	itt	eq
 8010f32:	1852      	addeq	r2, r2, r1
 8010f34:	6022      	streq	r2, [r4, #0]
 8010f36:	602c      	str	r4, [r5, #0]
 8010f38:	e7ec      	b.n	8010f14 <_free_r+0x28>
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	b10b      	cbz	r3, 8010f44 <_free_r+0x58>
 8010f40:	42a3      	cmp	r3, r4
 8010f42:	d9fa      	bls.n	8010f3a <_free_r+0x4e>
 8010f44:	6811      	ldr	r1, [r2, #0]
 8010f46:	1855      	adds	r5, r2, r1
 8010f48:	42a5      	cmp	r5, r4
 8010f4a:	d10b      	bne.n	8010f64 <_free_r+0x78>
 8010f4c:	6824      	ldr	r4, [r4, #0]
 8010f4e:	4421      	add	r1, r4
 8010f50:	1854      	adds	r4, r2, r1
 8010f52:	42a3      	cmp	r3, r4
 8010f54:	6011      	str	r1, [r2, #0]
 8010f56:	d1dd      	bne.n	8010f14 <_free_r+0x28>
 8010f58:	681c      	ldr	r4, [r3, #0]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	6053      	str	r3, [r2, #4]
 8010f5e:	4421      	add	r1, r4
 8010f60:	6011      	str	r1, [r2, #0]
 8010f62:	e7d7      	b.n	8010f14 <_free_r+0x28>
 8010f64:	d902      	bls.n	8010f6c <_free_r+0x80>
 8010f66:	230c      	movs	r3, #12
 8010f68:	6003      	str	r3, [r0, #0]
 8010f6a:	e7d3      	b.n	8010f14 <_free_r+0x28>
 8010f6c:	6825      	ldr	r5, [r4, #0]
 8010f6e:	1961      	adds	r1, r4, r5
 8010f70:	428b      	cmp	r3, r1
 8010f72:	bf04      	itt	eq
 8010f74:	6819      	ldreq	r1, [r3, #0]
 8010f76:	685b      	ldreq	r3, [r3, #4]
 8010f78:	6063      	str	r3, [r4, #4]
 8010f7a:	bf04      	itt	eq
 8010f7c:	1949      	addeq	r1, r1, r5
 8010f7e:	6021      	streq	r1, [r4, #0]
 8010f80:	6054      	str	r4, [r2, #4]
 8010f82:	e7c7      	b.n	8010f14 <_free_r+0x28>
 8010f84:	b003      	add	sp, #12
 8010f86:	bd30      	pop	{r4, r5, pc}
 8010f88:	24000918 	.word	0x24000918

08010f8c <_malloc_r>:
 8010f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8e:	1ccd      	adds	r5, r1, #3
 8010f90:	f025 0503 	bic.w	r5, r5, #3
 8010f94:	3508      	adds	r5, #8
 8010f96:	2d0c      	cmp	r5, #12
 8010f98:	bf38      	it	cc
 8010f9a:	250c      	movcc	r5, #12
 8010f9c:	2d00      	cmp	r5, #0
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	db01      	blt.n	8010fa6 <_malloc_r+0x1a>
 8010fa2:	42a9      	cmp	r1, r5
 8010fa4:	d903      	bls.n	8010fae <_malloc_r+0x22>
 8010fa6:	230c      	movs	r3, #12
 8010fa8:	6033      	str	r3, [r6, #0]
 8010faa:	2000      	movs	r0, #0
 8010fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fae:	f000 f899 	bl	80110e4 <__malloc_lock>
 8010fb2:	4921      	ldr	r1, [pc, #132]	; (8011038 <_malloc_r+0xac>)
 8010fb4:	680a      	ldr	r2, [r1, #0]
 8010fb6:	4614      	mov	r4, r2
 8010fb8:	b99c      	cbnz	r4, 8010fe2 <_malloc_r+0x56>
 8010fba:	4f20      	ldr	r7, [pc, #128]	; (801103c <_malloc_r+0xb0>)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	b923      	cbnz	r3, 8010fca <_malloc_r+0x3e>
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	f000 f83c 	bl	8011040 <_sbrk_r>
 8010fc8:	6038      	str	r0, [r7, #0]
 8010fca:	4629      	mov	r1, r5
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f000 f837 	bl	8011040 <_sbrk_r>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	d123      	bne.n	801101e <_malloc_r+0x92>
 8010fd6:	230c      	movs	r3, #12
 8010fd8:	6033      	str	r3, [r6, #0]
 8010fda:	4630      	mov	r0, r6
 8010fdc:	f000 f888 	bl	80110f0 <__malloc_unlock>
 8010fe0:	e7e3      	b.n	8010faa <_malloc_r+0x1e>
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	1b5b      	subs	r3, r3, r5
 8010fe6:	d417      	bmi.n	8011018 <_malloc_r+0x8c>
 8010fe8:	2b0b      	cmp	r3, #11
 8010fea:	d903      	bls.n	8010ff4 <_malloc_r+0x68>
 8010fec:	6023      	str	r3, [r4, #0]
 8010fee:	441c      	add	r4, r3
 8010ff0:	6025      	str	r5, [r4, #0]
 8010ff2:	e004      	b.n	8010ffe <_malloc_r+0x72>
 8010ff4:	6863      	ldr	r3, [r4, #4]
 8010ff6:	42a2      	cmp	r2, r4
 8010ff8:	bf0c      	ite	eq
 8010ffa:	600b      	streq	r3, [r1, #0]
 8010ffc:	6053      	strne	r3, [r2, #4]
 8010ffe:	4630      	mov	r0, r6
 8011000:	f000 f876 	bl	80110f0 <__malloc_unlock>
 8011004:	f104 000b 	add.w	r0, r4, #11
 8011008:	1d23      	adds	r3, r4, #4
 801100a:	f020 0007 	bic.w	r0, r0, #7
 801100e:	1ac2      	subs	r2, r0, r3
 8011010:	d0cc      	beq.n	8010fac <_malloc_r+0x20>
 8011012:	1a1b      	subs	r3, r3, r0
 8011014:	50a3      	str	r3, [r4, r2]
 8011016:	e7c9      	b.n	8010fac <_malloc_r+0x20>
 8011018:	4622      	mov	r2, r4
 801101a:	6864      	ldr	r4, [r4, #4]
 801101c:	e7cc      	b.n	8010fb8 <_malloc_r+0x2c>
 801101e:	1cc4      	adds	r4, r0, #3
 8011020:	f024 0403 	bic.w	r4, r4, #3
 8011024:	42a0      	cmp	r0, r4
 8011026:	d0e3      	beq.n	8010ff0 <_malloc_r+0x64>
 8011028:	1a21      	subs	r1, r4, r0
 801102a:	4630      	mov	r0, r6
 801102c:	f000 f808 	bl	8011040 <_sbrk_r>
 8011030:	3001      	adds	r0, #1
 8011032:	d1dd      	bne.n	8010ff0 <_malloc_r+0x64>
 8011034:	e7cf      	b.n	8010fd6 <_malloc_r+0x4a>
 8011036:	bf00      	nop
 8011038:	24000918 	.word	0x24000918
 801103c:	2400091c 	.word	0x2400091c

08011040 <_sbrk_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	4d06      	ldr	r5, [pc, #24]	; (801105c <_sbrk_r+0x1c>)
 8011044:	2300      	movs	r3, #0
 8011046:	4604      	mov	r4, r0
 8011048:	4608      	mov	r0, r1
 801104a:	602b      	str	r3, [r5, #0]
 801104c:	f7f2 ff00 	bl	8003e50 <_sbrk>
 8011050:	1c43      	adds	r3, r0, #1
 8011052:	d102      	bne.n	801105a <_sbrk_r+0x1a>
 8011054:	682b      	ldr	r3, [r5, #0]
 8011056:	b103      	cbz	r3, 801105a <_sbrk_r+0x1a>
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	bd38      	pop	{r3, r4, r5, pc}
 801105c:	2400111c 	.word	0x2400111c

08011060 <__assert_func>:
 8011060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011062:	4614      	mov	r4, r2
 8011064:	461a      	mov	r2, r3
 8011066:	4b09      	ldr	r3, [pc, #36]	; (801108c <__assert_func+0x2c>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	4605      	mov	r5, r0
 801106c:	68d8      	ldr	r0, [r3, #12]
 801106e:	b14c      	cbz	r4, 8011084 <__assert_func+0x24>
 8011070:	4b07      	ldr	r3, [pc, #28]	; (8011090 <__assert_func+0x30>)
 8011072:	9100      	str	r1, [sp, #0]
 8011074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011078:	4906      	ldr	r1, [pc, #24]	; (8011094 <__assert_func+0x34>)
 801107a:	462b      	mov	r3, r5
 801107c:	f000 f80e 	bl	801109c <fiprintf>
 8011080:	f000 fa64 	bl	801154c <abort>
 8011084:	4b04      	ldr	r3, [pc, #16]	; (8011098 <__assert_func+0x38>)
 8011086:	461c      	mov	r4, r3
 8011088:	e7f3      	b.n	8011072 <__assert_func+0x12>
 801108a:	bf00      	nop
 801108c:	24000024 	.word	0x24000024
 8011090:	080136dc 	.word	0x080136dc
 8011094:	080136e9 	.word	0x080136e9
 8011098:	08013717 	.word	0x08013717

0801109c <fiprintf>:
 801109c:	b40e      	push	{r1, r2, r3}
 801109e:	b503      	push	{r0, r1, lr}
 80110a0:	4601      	mov	r1, r0
 80110a2:	ab03      	add	r3, sp, #12
 80110a4:	4805      	ldr	r0, [pc, #20]	; (80110bc <fiprintf+0x20>)
 80110a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110aa:	6800      	ldr	r0, [r0, #0]
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	f000 f84f 	bl	8011150 <_vfiprintf_r>
 80110b2:	b002      	add	sp, #8
 80110b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80110b8:	b003      	add	sp, #12
 80110ba:	4770      	bx	lr
 80110bc:	24000024 	.word	0x24000024

080110c0 <__ascii_mbtowc>:
 80110c0:	b082      	sub	sp, #8
 80110c2:	b901      	cbnz	r1, 80110c6 <__ascii_mbtowc+0x6>
 80110c4:	a901      	add	r1, sp, #4
 80110c6:	b142      	cbz	r2, 80110da <__ascii_mbtowc+0x1a>
 80110c8:	b14b      	cbz	r3, 80110de <__ascii_mbtowc+0x1e>
 80110ca:	7813      	ldrb	r3, [r2, #0]
 80110cc:	600b      	str	r3, [r1, #0]
 80110ce:	7812      	ldrb	r2, [r2, #0]
 80110d0:	1e10      	subs	r0, r2, #0
 80110d2:	bf18      	it	ne
 80110d4:	2001      	movne	r0, #1
 80110d6:	b002      	add	sp, #8
 80110d8:	4770      	bx	lr
 80110da:	4610      	mov	r0, r2
 80110dc:	e7fb      	b.n	80110d6 <__ascii_mbtowc+0x16>
 80110de:	f06f 0001 	mvn.w	r0, #1
 80110e2:	e7f8      	b.n	80110d6 <__ascii_mbtowc+0x16>

080110e4 <__malloc_lock>:
 80110e4:	4801      	ldr	r0, [pc, #4]	; (80110ec <__malloc_lock+0x8>)
 80110e6:	f000 bbf1 	b.w	80118cc <__retarget_lock_acquire_recursive>
 80110ea:	bf00      	nop
 80110ec:	24001124 	.word	0x24001124

080110f0 <__malloc_unlock>:
 80110f0:	4801      	ldr	r0, [pc, #4]	; (80110f8 <__malloc_unlock+0x8>)
 80110f2:	f000 bbec 	b.w	80118ce <__retarget_lock_release_recursive>
 80110f6:	bf00      	nop
 80110f8:	24001124 	.word	0x24001124

080110fc <__sfputc_r>:
 80110fc:	6893      	ldr	r3, [r2, #8]
 80110fe:	3b01      	subs	r3, #1
 8011100:	2b00      	cmp	r3, #0
 8011102:	b410      	push	{r4}
 8011104:	6093      	str	r3, [r2, #8]
 8011106:	da08      	bge.n	801111a <__sfputc_r+0x1e>
 8011108:	6994      	ldr	r4, [r2, #24]
 801110a:	42a3      	cmp	r3, r4
 801110c:	db01      	blt.n	8011112 <__sfputc_r+0x16>
 801110e:	290a      	cmp	r1, #10
 8011110:	d103      	bne.n	801111a <__sfputc_r+0x1e>
 8011112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011116:	f000 b94b 	b.w	80113b0 <__swbuf_r>
 801111a:	6813      	ldr	r3, [r2, #0]
 801111c:	1c58      	adds	r0, r3, #1
 801111e:	6010      	str	r0, [r2, #0]
 8011120:	7019      	strb	r1, [r3, #0]
 8011122:	4608      	mov	r0, r1
 8011124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011128:	4770      	bx	lr

0801112a <__sfputs_r>:
 801112a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112c:	4606      	mov	r6, r0
 801112e:	460f      	mov	r7, r1
 8011130:	4614      	mov	r4, r2
 8011132:	18d5      	adds	r5, r2, r3
 8011134:	42ac      	cmp	r4, r5
 8011136:	d101      	bne.n	801113c <__sfputs_r+0x12>
 8011138:	2000      	movs	r0, #0
 801113a:	e007      	b.n	801114c <__sfputs_r+0x22>
 801113c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011140:	463a      	mov	r2, r7
 8011142:	4630      	mov	r0, r6
 8011144:	f7ff ffda 	bl	80110fc <__sfputc_r>
 8011148:	1c43      	adds	r3, r0, #1
 801114a:	d1f3      	bne.n	8011134 <__sfputs_r+0xa>
 801114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011150 <_vfiprintf_r>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	460d      	mov	r5, r1
 8011156:	b09d      	sub	sp, #116	; 0x74
 8011158:	4614      	mov	r4, r2
 801115a:	4698      	mov	r8, r3
 801115c:	4606      	mov	r6, r0
 801115e:	b118      	cbz	r0, 8011168 <_vfiprintf_r+0x18>
 8011160:	6983      	ldr	r3, [r0, #24]
 8011162:	b90b      	cbnz	r3, 8011168 <_vfiprintf_r+0x18>
 8011164:	f000 fb14 	bl	8011790 <__sinit>
 8011168:	4b89      	ldr	r3, [pc, #548]	; (8011390 <_vfiprintf_r+0x240>)
 801116a:	429d      	cmp	r5, r3
 801116c:	d11b      	bne.n	80111a6 <_vfiprintf_r+0x56>
 801116e:	6875      	ldr	r5, [r6, #4]
 8011170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011172:	07d9      	lsls	r1, r3, #31
 8011174:	d405      	bmi.n	8011182 <_vfiprintf_r+0x32>
 8011176:	89ab      	ldrh	r3, [r5, #12]
 8011178:	059a      	lsls	r2, r3, #22
 801117a:	d402      	bmi.n	8011182 <_vfiprintf_r+0x32>
 801117c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801117e:	f000 fba5 	bl	80118cc <__retarget_lock_acquire_recursive>
 8011182:	89ab      	ldrh	r3, [r5, #12]
 8011184:	071b      	lsls	r3, r3, #28
 8011186:	d501      	bpl.n	801118c <_vfiprintf_r+0x3c>
 8011188:	692b      	ldr	r3, [r5, #16]
 801118a:	b9eb      	cbnz	r3, 80111c8 <_vfiprintf_r+0x78>
 801118c:	4629      	mov	r1, r5
 801118e:	4630      	mov	r0, r6
 8011190:	f000 f96e 	bl	8011470 <__swsetup_r>
 8011194:	b1c0      	cbz	r0, 80111c8 <_vfiprintf_r+0x78>
 8011196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011198:	07dc      	lsls	r4, r3, #31
 801119a:	d50e      	bpl.n	80111ba <_vfiprintf_r+0x6a>
 801119c:	f04f 30ff 	mov.w	r0, #4294967295
 80111a0:	b01d      	add	sp, #116	; 0x74
 80111a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	4b7b      	ldr	r3, [pc, #492]	; (8011394 <_vfiprintf_r+0x244>)
 80111a8:	429d      	cmp	r5, r3
 80111aa:	d101      	bne.n	80111b0 <_vfiprintf_r+0x60>
 80111ac:	68b5      	ldr	r5, [r6, #8]
 80111ae:	e7df      	b.n	8011170 <_vfiprintf_r+0x20>
 80111b0:	4b79      	ldr	r3, [pc, #484]	; (8011398 <_vfiprintf_r+0x248>)
 80111b2:	429d      	cmp	r5, r3
 80111b4:	bf08      	it	eq
 80111b6:	68f5      	ldreq	r5, [r6, #12]
 80111b8:	e7da      	b.n	8011170 <_vfiprintf_r+0x20>
 80111ba:	89ab      	ldrh	r3, [r5, #12]
 80111bc:	0598      	lsls	r0, r3, #22
 80111be:	d4ed      	bmi.n	801119c <_vfiprintf_r+0x4c>
 80111c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111c2:	f000 fb84 	bl	80118ce <__retarget_lock_release_recursive>
 80111c6:	e7e9      	b.n	801119c <_vfiprintf_r+0x4c>
 80111c8:	2300      	movs	r3, #0
 80111ca:	9309      	str	r3, [sp, #36]	; 0x24
 80111cc:	2320      	movs	r3, #32
 80111ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80111d6:	2330      	movs	r3, #48	; 0x30
 80111d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801139c <_vfiprintf_r+0x24c>
 80111dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111e0:	f04f 0901 	mov.w	r9, #1
 80111e4:	4623      	mov	r3, r4
 80111e6:	469a      	mov	sl, r3
 80111e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ec:	b10a      	cbz	r2, 80111f2 <_vfiprintf_r+0xa2>
 80111ee:	2a25      	cmp	r2, #37	; 0x25
 80111f0:	d1f9      	bne.n	80111e6 <_vfiprintf_r+0x96>
 80111f2:	ebba 0b04 	subs.w	fp, sl, r4
 80111f6:	d00b      	beq.n	8011210 <_vfiprintf_r+0xc0>
 80111f8:	465b      	mov	r3, fp
 80111fa:	4622      	mov	r2, r4
 80111fc:	4629      	mov	r1, r5
 80111fe:	4630      	mov	r0, r6
 8011200:	f7ff ff93 	bl	801112a <__sfputs_r>
 8011204:	3001      	adds	r0, #1
 8011206:	f000 80aa 	beq.w	801135e <_vfiprintf_r+0x20e>
 801120a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801120c:	445a      	add	r2, fp
 801120e:	9209      	str	r2, [sp, #36]	; 0x24
 8011210:	f89a 3000 	ldrb.w	r3, [sl]
 8011214:	2b00      	cmp	r3, #0
 8011216:	f000 80a2 	beq.w	801135e <_vfiprintf_r+0x20e>
 801121a:	2300      	movs	r3, #0
 801121c:	f04f 32ff 	mov.w	r2, #4294967295
 8011220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011224:	f10a 0a01 	add.w	sl, sl, #1
 8011228:	9304      	str	r3, [sp, #16]
 801122a:	9307      	str	r3, [sp, #28]
 801122c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011230:	931a      	str	r3, [sp, #104]	; 0x68
 8011232:	4654      	mov	r4, sl
 8011234:	2205      	movs	r2, #5
 8011236:	f814 1b01 	ldrb.w	r1, [r4], #1
 801123a:	4858      	ldr	r0, [pc, #352]	; (801139c <_vfiprintf_r+0x24c>)
 801123c:	f7ef f858 	bl	80002f0 <memchr>
 8011240:	9a04      	ldr	r2, [sp, #16]
 8011242:	b9d8      	cbnz	r0, 801127c <_vfiprintf_r+0x12c>
 8011244:	06d1      	lsls	r1, r2, #27
 8011246:	bf44      	itt	mi
 8011248:	2320      	movmi	r3, #32
 801124a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801124e:	0713      	lsls	r3, r2, #28
 8011250:	bf44      	itt	mi
 8011252:	232b      	movmi	r3, #43	; 0x2b
 8011254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011258:	f89a 3000 	ldrb.w	r3, [sl]
 801125c:	2b2a      	cmp	r3, #42	; 0x2a
 801125e:	d015      	beq.n	801128c <_vfiprintf_r+0x13c>
 8011260:	9a07      	ldr	r2, [sp, #28]
 8011262:	4654      	mov	r4, sl
 8011264:	2000      	movs	r0, #0
 8011266:	f04f 0c0a 	mov.w	ip, #10
 801126a:	4621      	mov	r1, r4
 801126c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011270:	3b30      	subs	r3, #48	; 0x30
 8011272:	2b09      	cmp	r3, #9
 8011274:	d94e      	bls.n	8011314 <_vfiprintf_r+0x1c4>
 8011276:	b1b0      	cbz	r0, 80112a6 <_vfiprintf_r+0x156>
 8011278:	9207      	str	r2, [sp, #28]
 801127a:	e014      	b.n	80112a6 <_vfiprintf_r+0x156>
 801127c:	eba0 0308 	sub.w	r3, r0, r8
 8011280:	fa09 f303 	lsl.w	r3, r9, r3
 8011284:	4313      	orrs	r3, r2
 8011286:	9304      	str	r3, [sp, #16]
 8011288:	46a2      	mov	sl, r4
 801128a:	e7d2      	b.n	8011232 <_vfiprintf_r+0xe2>
 801128c:	9b03      	ldr	r3, [sp, #12]
 801128e:	1d19      	adds	r1, r3, #4
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	9103      	str	r1, [sp, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	bfbb      	ittet	lt
 8011298:	425b      	neglt	r3, r3
 801129a:	f042 0202 	orrlt.w	r2, r2, #2
 801129e:	9307      	strge	r3, [sp, #28]
 80112a0:	9307      	strlt	r3, [sp, #28]
 80112a2:	bfb8      	it	lt
 80112a4:	9204      	strlt	r2, [sp, #16]
 80112a6:	7823      	ldrb	r3, [r4, #0]
 80112a8:	2b2e      	cmp	r3, #46	; 0x2e
 80112aa:	d10c      	bne.n	80112c6 <_vfiprintf_r+0x176>
 80112ac:	7863      	ldrb	r3, [r4, #1]
 80112ae:	2b2a      	cmp	r3, #42	; 0x2a
 80112b0:	d135      	bne.n	801131e <_vfiprintf_r+0x1ce>
 80112b2:	9b03      	ldr	r3, [sp, #12]
 80112b4:	1d1a      	adds	r2, r3, #4
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	9203      	str	r2, [sp, #12]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	bfb8      	it	lt
 80112be:	f04f 33ff 	movlt.w	r3, #4294967295
 80112c2:	3402      	adds	r4, #2
 80112c4:	9305      	str	r3, [sp, #20]
 80112c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113ac <_vfiprintf_r+0x25c>
 80112ca:	7821      	ldrb	r1, [r4, #0]
 80112cc:	2203      	movs	r2, #3
 80112ce:	4650      	mov	r0, sl
 80112d0:	f7ef f80e 	bl	80002f0 <memchr>
 80112d4:	b140      	cbz	r0, 80112e8 <_vfiprintf_r+0x198>
 80112d6:	2340      	movs	r3, #64	; 0x40
 80112d8:	eba0 000a 	sub.w	r0, r0, sl
 80112dc:	fa03 f000 	lsl.w	r0, r3, r0
 80112e0:	9b04      	ldr	r3, [sp, #16]
 80112e2:	4303      	orrs	r3, r0
 80112e4:	3401      	adds	r4, #1
 80112e6:	9304      	str	r3, [sp, #16]
 80112e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ec:	482c      	ldr	r0, [pc, #176]	; (80113a0 <_vfiprintf_r+0x250>)
 80112ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112f2:	2206      	movs	r2, #6
 80112f4:	f7ee fffc 	bl	80002f0 <memchr>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d03f      	beq.n	801137c <_vfiprintf_r+0x22c>
 80112fc:	4b29      	ldr	r3, [pc, #164]	; (80113a4 <_vfiprintf_r+0x254>)
 80112fe:	bb1b      	cbnz	r3, 8011348 <_vfiprintf_r+0x1f8>
 8011300:	9b03      	ldr	r3, [sp, #12]
 8011302:	3307      	adds	r3, #7
 8011304:	f023 0307 	bic.w	r3, r3, #7
 8011308:	3308      	adds	r3, #8
 801130a:	9303      	str	r3, [sp, #12]
 801130c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801130e:	443b      	add	r3, r7
 8011310:	9309      	str	r3, [sp, #36]	; 0x24
 8011312:	e767      	b.n	80111e4 <_vfiprintf_r+0x94>
 8011314:	fb0c 3202 	mla	r2, ip, r2, r3
 8011318:	460c      	mov	r4, r1
 801131a:	2001      	movs	r0, #1
 801131c:	e7a5      	b.n	801126a <_vfiprintf_r+0x11a>
 801131e:	2300      	movs	r3, #0
 8011320:	3401      	adds	r4, #1
 8011322:	9305      	str	r3, [sp, #20]
 8011324:	4619      	mov	r1, r3
 8011326:	f04f 0c0a 	mov.w	ip, #10
 801132a:	4620      	mov	r0, r4
 801132c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011330:	3a30      	subs	r2, #48	; 0x30
 8011332:	2a09      	cmp	r2, #9
 8011334:	d903      	bls.n	801133e <_vfiprintf_r+0x1ee>
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0c5      	beq.n	80112c6 <_vfiprintf_r+0x176>
 801133a:	9105      	str	r1, [sp, #20]
 801133c:	e7c3      	b.n	80112c6 <_vfiprintf_r+0x176>
 801133e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011342:	4604      	mov	r4, r0
 8011344:	2301      	movs	r3, #1
 8011346:	e7f0      	b.n	801132a <_vfiprintf_r+0x1da>
 8011348:	ab03      	add	r3, sp, #12
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	462a      	mov	r2, r5
 801134e:	4b16      	ldr	r3, [pc, #88]	; (80113a8 <_vfiprintf_r+0x258>)
 8011350:	a904      	add	r1, sp, #16
 8011352:	4630      	mov	r0, r6
 8011354:	f7fe f860 	bl	800f418 <_printf_float>
 8011358:	4607      	mov	r7, r0
 801135a:	1c78      	adds	r0, r7, #1
 801135c:	d1d6      	bne.n	801130c <_vfiprintf_r+0x1bc>
 801135e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011360:	07d9      	lsls	r1, r3, #31
 8011362:	d405      	bmi.n	8011370 <_vfiprintf_r+0x220>
 8011364:	89ab      	ldrh	r3, [r5, #12]
 8011366:	059a      	lsls	r2, r3, #22
 8011368:	d402      	bmi.n	8011370 <_vfiprintf_r+0x220>
 801136a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801136c:	f000 faaf 	bl	80118ce <__retarget_lock_release_recursive>
 8011370:	89ab      	ldrh	r3, [r5, #12]
 8011372:	065b      	lsls	r3, r3, #25
 8011374:	f53f af12 	bmi.w	801119c <_vfiprintf_r+0x4c>
 8011378:	9809      	ldr	r0, [sp, #36]	; 0x24
 801137a:	e711      	b.n	80111a0 <_vfiprintf_r+0x50>
 801137c:	ab03      	add	r3, sp, #12
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	462a      	mov	r2, r5
 8011382:	4b09      	ldr	r3, [pc, #36]	; (80113a8 <_vfiprintf_r+0x258>)
 8011384:	a904      	add	r1, sp, #16
 8011386:	4630      	mov	r0, r6
 8011388:	f7fe fad2 	bl	800f930 <_printf_i>
 801138c:	e7e4      	b.n	8011358 <_vfiprintf_r+0x208>
 801138e:	bf00      	nop
 8011390:	08013854 	.word	0x08013854
 8011394:	08013874 	.word	0x08013874
 8011398:	08013834 	.word	0x08013834
 801139c:	08013722 	.word	0x08013722
 80113a0:	0801372c 	.word	0x0801372c
 80113a4:	0800f419 	.word	0x0800f419
 80113a8:	0801112b 	.word	0x0801112b
 80113ac:	08013728 	.word	0x08013728

080113b0 <__swbuf_r>:
 80113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b2:	460e      	mov	r6, r1
 80113b4:	4614      	mov	r4, r2
 80113b6:	4605      	mov	r5, r0
 80113b8:	b118      	cbz	r0, 80113c2 <__swbuf_r+0x12>
 80113ba:	6983      	ldr	r3, [r0, #24]
 80113bc:	b90b      	cbnz	r3, 80113c2 <__swbuf_r+0x12>
 80113be:	f000 f9e7 	bl	8011790 <__sinit>
 80113c2:	4b21      	ldr	r3, [pc, #132]	; (8011448 <__swbuf_r+0x98>)
 80113c4:	429c      	cmp	r4, r3
 80113c6:	d12b      	bne.n	8011420 <__swbuf_r+0x70>
 80113c8:	686c      	ldr	r4, [r5, #4]
 80113ca:	69a3      	ldr	r3, [r4, #24]
 80113cc:	60a3      	str	r3, [r4, #8]
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	071a      	lsls	r2, r3, #28
 80113d2:	d52f      	bpl.n	8011434 <__swbuf_r+0x84>
 80113d4:	6923      	ldr	r3, [r4, #16]
 80113d6:	b36b      	cbz	r3, 8011434 <__swbuf_r+0x84>
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	6820      	ldr	r0, [r4, #0]
 80113dc:	1ac0      	subs	r0, r0, r3
 80113de:	6963      	ldr	r3, [r4, #20]
 80113e0:	b2f6      	uxtb	r6, r6
 80113e2:	4283      	cmp	r3, r0
 80113e4:	4637      	mov	r7, r6
 80113e6:	dc04      	bgt.n	80113f2 <__swbuf_r+0x42>
 80113e8:	4621      	mov	r1, r4
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 f93c 	bl	8011668 <_fflush_r>
 80113f0:	bb30      	cbnz	r0, 8011440 <__swbuf_r+0x90>
 80113f2:	68a3      	ldr	r3, [r4, #8]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	60a3      	str	r3, [r4, #8]
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	6022      	str	r2, [r4, #0]
 80113fe:	701e      	strb	r6, [r3, #0]
 8011400:	6963      	ldr	r3, [r4, #20]
 8011402:	3001      	adds	r0, #1
 8011404:	4283      	cmp	r3, r0
 8011406:	d004      	beq.n	8011412 <__swbuf_r+0x62>
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	07db      	lsls	r3, r3, #31
 801140c:	d506      	bpl.n	801141c <__swbuf_r+0x6c>
 801140e:	2e0a      	cmp	r6, #10
 8011410:	d104      	bne.n	801141c <__swbuf_r+0x6c>
 8011412:	4621      	mov	r1, r4
 8011414:	4628      	mov	r0, r5
 8011416:	f000 f927 	bl	8011668 <_fflush_r>
 801141a:	b988      	cbnz	r0, 8011440 <__swbuf_r+0x90>
 801141c:	4638      	mov	r0, r7
 801141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011420:	4b0a      	ldr	r3, [pc, #40]	; (801144c <__swbuf_r+0x9c>)
 8011422:	429c      	cmp	r4, r3
 8011424:	d101      	bne.n	801142a <__swbuf_r+0x7a>
 8011426:	68ac      	ldr	r4, [r5, #8]
 8011428:	e7cf      	b.n	80113ca <__swbuf_r+0x1a>
 801142a:	4b09      	ldr	r3, [pc, #36]	; (8011450 <__swbuf_r+0xa0>)
 801142c:	429c      	cmp	r4, r3
 801142e:	bf08      	it	eq
 8011430:	68ec      	ldreq	r4, [r5, #12]
 8011432:	e7ca      	b.n	80113ca <__swbuf_r+0x1a>
 8011434:	4621      	mov	r1, r4
 8011436:	4628      	mov	r0, r5
 8011438:	f000 f81a 	bl	8011470 <__swsetup_r>
 801143c:	2800      	cmp	r0, #0
 801143e:	d0cb      	beq.n	80113d8 <__swbuf_r+0x28>
 8011440:	f04f 37ff 	mov.w	r7, #4294967295
 8011444:	e7ea      	b.n	801141c <__swbuf_r+0x6c>
 8011446:	bf00      	nop
 8011448:	08013854 	.word	0x08013854
 801144c:	08013874 	.word	0x08013874
 8011450:	08013834 	.word	0x08013834

08011454 <__ascii_wctomb>:
 8011454:	b149      	cbz	r1, 801146a <__ascii_wctomb+0x16>
 8011456:	2aff      	cmp	r2, #255	; 0xff
 8011458:	bf85      	ittet	hi
 801145a:	238a      	movhi	r3, #138	; 0x8a
 801145c:	6003      	strhi	r3, [r0, #0]
 801145e:	700a      	strbls	r2, [r1, #0]
 8011460:	f04f 30ff 	movhi.w	r0, #4294967295
 8011464:	bf98      	it	ls
 8011466:	2001      	movls	r0, #1
 8011468:	4770      	bx	lr
 801146a:	4608      	mov	r0, r1
 801146c:	4770      	bx	lr
	...

08011470 <__swsetup_r>:
 8011470:	4b32      	ldr	r3, [pc, #200]	; (801153c <__swsetup_r+0xcc>)
 8011472:	b570      	push	{r4, r5, r6, lr}
 8011474:	681d      	ldr	r5, [r3, #0]
 8011476:	4606      	mov	r6, r0
 8011478:	460c      	mov	r4, r1
 801147a:	b125      	cbz	r5, 8011486 <__swsetup_r+0x16>
 801147c:	69ab      	ldr	r3, [r5, #24]
 801147e:	b913      	cbnz	r3, 8011486 <__swsetup_r+0x16>
 8011480:	4628      	mov	r0, r5
 8011482:	f000 f985 	bl	8011790 <__sinit>
 8011486:	4b2e      	ldr	r3, [pc, #184]	; (8011540 <__swsetup_r+0xd0>)
 8011488:	429c      	cmp	r4, r3
 801148a:	d10f      	bne.n	80114ac <__swsetup_r+0x3c>
 801148c:	686c      	ldr	r4, [r5, #4]
 801148e:	89a3      	ldrh	r3, [r4, #12]
 8011490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011494:	0719      	lsls	r1, r3, #28
 8011496:	d42c      	bmi.n	80114f2 <__swsetup_r+0x82>
 8011498:	06dd      	lsls	r5, r3, #27
 801149a:	d411      	bmi.n	80114c0 <__swsetup_r+0x50>
 801149c:	2309      	movs	r3, #9
 801149e:	6033      	str	r3, [r6, #0]
 80114a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80114a4:	81a3      	strh	r3, [r4, #12]
 80114a6:	f04f 30ff 	mov.w	r0, #4294967295
 80114aa:	e03e      	b.n	801152a <__swsetup_r+0xba>
 80114ac:	4b25      	ldr	r3, [pc, #148]	; (8011544 <__swsetup_r+0xd4>)
 80114ae:	429c      	cmp	r4, r3
 80114b0:	d101      	bne.n	80114b6 <__swsetup_r+0x46>
 80114b2:	68ac      	ldr	r4, [r5, #8]
 80114b4:	e7eb      	b.n	801148e <__swsetup_r+0x1e>
 80114b6:	4b24      	ldr	r3, [pc, #144]	; (8011548 <__swsetup_r+0xd8>)
 80114b8:	429c      	cmp	r4, r3
 80114ba:	bf08      	it	eq
 80114bc:	68ec      	ldreq	r4, [r5, #12]
 80114be:	e7e6      	b.n	801148e <__swsetup_r+0x1e>
 80114c0:	0758      	lsls	r0, r3, #29
 80114c2:	d512      	bpl.n	80114ea <__swsetup_r+0x7a>
 80114c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114c6:	b141      	cbz	r1, 80114da <__swsetup_r+0x6a>
 80114c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114cc:	4299      	cmp	r1, r3
 80114ce:	d002      	beq.n	80114d6 <__swsetup_r+0x66>
 80114d0:	4630      	mov	r0, r6
 80114d2:	f7ff fd0b 	bl	8010eec <_free_r>
 80114d6:	2300      	movs	r3, #0
 80114d8:	6363      	str	r3, [r4, #52]	; 0x34
 80114da:	89a3      	ldrh	r3, [r4, #12]
 80114dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114e0:	81a3      	strh	r3, [r4, #12]
 80114e2:	2300      	movs	r3, #0
 80114e4:	6063      	str	r3, [r4, #4]
 80114e6:	6923      	ldr	r3, [r4, #16]
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	89a3      	ldrh	r3, [r4, #12]
 80114ec:	f043 0308 	orr.w	r3, r3, #8
 80114f0:	81a3      	strh	r3, [r4, #12]
 80114f2:	6923      	ldr	r3, [r4, #16]
 80114f4:	b94b      	cbnz	r3, 801150a <__swsetup_r+0x9a>
 80114f6:	89a3      	ldrh	r3, [r4, #12]
 80114f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80114fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011500:	d003      	beq.n	801150a <__swsetup_r+0x9a>
 8011502:	4621      	mov	r1, r4
 8011504:	4630      	mov	r0, r6
 8011506:	f000 fa07 	bl	8011918 <__smakebuf_r>
 801150a:	89a0      	ldrh	r0, [r4, #12]
 801150c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011510:	f010 0301 	ands.w	r3, r0, #1
 8011514:	d00a      	beq.n	801152c <__swsetup_r+0xbc>
 8011516:	2300      	movs	r3, #0
 8011518:	60a3      	str	r3, [r4, #8]
 801151a:	6963      	ldr	r3, [r4, #20]
 801151c:	425b      	negs	r3, r3
 801151e:	61a3      	str	r3, [r4, #24]
 8011520:	6923      	ldr	r3, [r4, #16]
 8011522:	b943      	cbnz	r3, 8011536 <__swsetup_r+0xc6>
 8011524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011528:	d1ba      	bne.n	80114a0 <__swsetup_r+0x30>
 801152a:	bd70      	pop	{r4, r5, r6, pc}
 801152c:	0781      	lsls	r1, r0, #30
 801152e:	bf58      	it	pl
 8011530:	6963      	ldrpl	r3, [r4, #20]
 8011532:	60a3      	str	r3, [r4, #8]
 8011534:	e7f4      	b.n	8011520 <__swsetup_r+0xb0>
 8011536:	2000      	movs	r0, #0
 8011538:	e7f7      	b.n	801152a <__swsetup_r+0xba>
 801153a:	bf00      	nop
 801153c:	24000024 	.word	0x24000024
 8011540:	08013854 	.word	0x08013854
 8011544:	08013874 	.word	0x08013874
 8011548:	08013834 	.word	0x08013834

0801154c <abort>:
 801154c:	b508      	push	{r3, lr}
 801154e:	2006      	movs	r0, #6
 8011550:	f000 fa4a 	bl	80119e8 <raise>
 8011554:	2001      	movs	r0, #1
 8011556:	f7f2 fc03 	bl	8003d60 <_exit>
	...

0801155c <__sflush_r>:
 801155c:	898a      	ldrh	r2, [r1, #12]
 801155e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011562:	4605      	mov	r5, r0
 8011564:	0710      	lsls	r0, r2, #28
 8011566:	460c      	mov	r4, r1
 8011568:	d458      	bmi.n	801161c <__sflush_r+0xc0>
 801156a:	684b      	ldr	r3, [r1, #4]
 801156c:	2b00      	cmp	r3, #0
 801156e:	dc05      	bgt.n	801157c <__sflush_r+0x20>
 8011570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011572:	2b00      	cmp	r3, #0
 8011574:	dc02      	bgt.n	801157c <__sflush_r+0x20>
 8011576:	2000      	movs	r0, #0
 8011578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801157c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801157e:	2e00      	cmp	r6, #0
 8011580:	d0f9      	beq.n	8011576 <__sflush_r+0x1a>
 8011582:	2300      	movs	r3, #0
 8011584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011588:	682f      	ldr	r7, [r5, #0]
 801158a:	602b      	str	r3, [r5, #0]
 801158c:	d032      	beq.n	80115f4 <__sflush_r+0x98>
 801158e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011590:	89a3      	ldrh	r3, [r4, #12]
 8011592:	075a      	lsls	r2, r3, #29
 8011594:	d505      	bpl.n	80115a2 <__sflush_r+0x46>
 8011596:	6863      	ldr	r3, [r4, #4]
 8011598:	1ac0      	subs	r0, r0, r3
 801159a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801159c:	b10b      	cbz	r3, 80115a2 <__sflush_r+0x46>
 801159e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115a0:	1ac0      	subs	r0, r0, r3
 80115a2:	2300      	movs	r3, #0
 80115a4:	4602      	mov	r2, r0
 80115a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115a8:	6a21      	ldr	r1, [r4, #32]
 80115aa:	4628      	mov	r0, r5
 80115ac:	47b0      	blx	r6
 80115ae:	1c43      	adds	r3, r0, #1
 80115b0:	89a3      	ldrh	r3, [r4, #12]
 80115b2:	d106      	bne.n	80115c2 <__sflush_r+0x66>
 80115b4:	6829      	ldr	r1, [r5, #0]
 80115b6:	291d      	cmp	r1, #29
 80115b8:	d82c      	bhi.n	8011614 <__sflush_r+0xb8>
 80115ba:	4a2a      	ldr	r2, [pc, #168]	; (8011664 <__sflush_r+0x108>)
 80115bc:	40ca      	lsrs	r2, r1
 80115be:	07d6      	lsls	r6, r2, #31
 80115c0:	d528      	bpl.n	8011614 <__sflush_r+0xb8>
 80115c2:	2200      	movs	r2, #0
 80115c4:	6062      	str	r2, [r4, #4]
 80115c6:	04d9      	lsls	r1, r3, #19
 80115c8:	6922      	ldr	r2, [r4, #16]
 80115ca:	6022      	str	r2, [r4, #0]
 80115cc:	d504      	bpl.n	80115d8 <__sflush_r+0x7c>
 80115ce:	1c42      	adds	r2, r0, #1
 80115d0:	d101      	bne.n	80115d6 <__sflush_r+0x7a>
 80115d2:	682b      	ldr	r3, [r5, #0]
 80115d4:	b903      	cbnz	r3, 80115d8 <__sflush_r+0x7c>
 80115d6:	6560      	str	r0, [r4, #84]	; 0x54
 80115d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115da:	602f      	str	r7, [r5, #0]
 80115dc:	2900      	cmp	r1, #0
 80115de:	d0ca      	beq.n	8011576 <__sflush_r+0x1a>
 80115e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115e4:	4299      	cmp	r1, r3
 80115e6:	d002      	beq.n	80115ee <__sflush_r+0x92>
 80115e8:	4628      	mov	r0, r5
 80115ea:	f7ff fc7f 	bl	8010eec <_free_r>
 80115ee:	2000      	movs	r0, #0
 80115f0:	6360      	str	r0, [r4, #52]	; 0x34
 80115f2:	e7c1      	b.n	8011578 <__sflush_r+0x1c>
 80115f4:	6a21      	ldr	r1, [r4, #32]
 80115f6:	2301      	movs	r3, #1
 80115f8:	4628      	mov	r0, r5
 80115fa:	47b0      	blx	r6
 80115fc:	1c41      	adds	r1, r0, #1
 80115fe:	d1c7      	bne.n	8011590 <__sflush_r+0x34>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d0c4      	beq.n	8011590 <__sflush_r+0x34>
 8011606:	2b1d      	cmp	r3, #29
 8011608:	d001      	beq.n	801160e <__sflush_r+0xb2>
 801160a:	2b16      	cmp	r3, #22
 801160c:	d101      	bne.n	8011612 <__sflush_r+0xb6>
 801160e:	602f      	str	r7, [r5, #0]
 8011610:	e7b1      	b.n	8011576 <__sflush_r+0x1a>
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011618:	81a3      	strh	r3, [r4, #12]
 801161a:	e7ad      	b.n	8011578 <__sflush_r+0x1c>
 801161c:	690f      	ldr	r7, [r1, #16]
 801161e:	2f00      	cmp	r7, #0
 8011620:	d0a9      	beq.n	8011576 <__sflush_r+0x1a>
 8011622:	0793      	lsls	r3, r2, #30
 8011624:	680e      	ldr	r6, [r1, #0]
 8011626:	bf08      	it	eq
 8011628:	694b      	ldreq	r3, [r1, #20]
 801162a:	600f      	str	r7, [r1, #0]
 801162c:	bf18      	it	ne
 801162e:	2300      	movne	r3, #0
 8011630:	eba6 0807 	sub.w	r8, r6, r7
 8011634:	608b      	str	r3, [r1, #8]
 8011636:	f1b8 0f00 	cmp.w	r8, #0
 801163a:	dd9c      	ble.n	8011576 <__sflush_r+0x1a>
 801163c:	6a21      	ldr	r1, [r4, #32]
 801163e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011640:	4643      	mov	r3, r8
 8011642:	463a      	mov	r2, r7
 8011644:	4628      	mov	r0, r5
 8011646:	47b0      	blx	r6
 8011648:	2800      	cmp	r0, #0
 801164a:	dc06      	bgt.n	801165a <__sflush_r+0xfe>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011652:	81a3      	strh	r3, [r4, #12]
 8011654:	f04f 30ff 	mov.w	r0, #4294967295
 8011658:	e78e      	b.n	8011578 <__sflush_r+0x1c>
 801165a:	4407      	add	r7, r0
 801165c:	eba8 0800 	sub.w	r8, r8, r0
 8011660:	e7e9      	b.n	8011636 <__sflush_r+0xda>
 8011662:	bf00      	nop
 8011664:	20400001 	.word	0x20400001

08011668 <_fflush_r>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	690b      	ldr	r3, [r1, #16]
 801166c:	4605      	mov	r5, r0
 801166e:	460c      	mov	r4, r1
 8011670:	b913      	cbnz	r3, 8011678 <_fflush_r+0x10>
 8011672:	2500      	movs	r5, #0
 8011674:	4628      	mov	r0, r5
 8011676:	bd38      	pop	{r3, r4, r5, pc}
 8011678:	b118      	cbz	r0, 8011682 <_fflush_r+0x1a>
 801167a:	6983      	ldr	r3, [r0, #24]
 801167c:	b90b      	cbnz	r3, 8011682 <_fflush_r+0x1a>
 801167e:	f000 f887 	bl	8011790 <__sinit>
 8011682:	4b14      	ldr	r3, [pc, #80]	; (80116d4 <_fflush_r+0x6c>)
 8011684:	429c      	cmp	r4, r3
 8011686:	d11b      	bne.n	80116c0 <_fflush_r+0x58>
 8011688:	686c      	ldr	r4, [r5, #4]
 801168a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d0ef      	beq.n	8011672 <_fflush_r+0xa>
 8011692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011694:	07d0      	lsls	r0, r2, #31
 8011696:	d404      	bmi.n	80116a2 <_fflush_r+0x3a>
 8011698:	0599      	lsls	r1, r3, #22
 801169a:	d402      	bmi.n	80116a2 <_fflush_r+0x3a>
 801169c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801169e:	f000 f915 	bl	80118cc <__retarget_lock_acquire_recursive>
 80116a2:	4628      	mov	r0, r5
 80116a4:	4621      	mov	r1, r4
 80116a6:	f7ff ff59 	bl	801155c <__sflush_r>
 80116aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116ac:	07da      	lsls	r2, r3, #31
 80116ae:	4605      	mov	r5, r0
 80116b0:	d4e0      	bmi.n	8011674 <_fflush_r+0xc>
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	059b      	lsls	r3, r3, #22
 80116b6:	d4dd      	bmi.n	8011674 <_fflush_r+0xc>
 80116b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ba:	f000 f908 	bl	80118ce <__retarget_lock_release_recursive>
 80116be:	e7d9      	b.n	8011674 <_fflush_r+0xc>
 80116c0:	4b05      	ldr	r3, [pc, #20]	; (80116d8 <_fflush_r+0x70>)
 80116c2:	429c      	cmp	r4, r3
 80116c4:	d101      	bne.n	80116ca <_fflush_r+0x62>
 80116c6:	68ac      	ldr	r4, [r5, #8]
 80116c8:	e7df      	b.n	801168a <_fflush_r+0x22>
 80116ca:	4b04      	ldr	r3, [pc, #16]	; (80116dc <_fflush_r+0x74>)
 80116cc:	429c      	cmp	r4, r3
 80116ce:	bf08      	it	eq
 80116d0:	68ec      	ldreq	r4, [r5, #12]
 80116d2:	e7da      	b.n	801168a <_fflush_r+0x22>
 80116d4:	08013854 	.word	0x08013854
 80116d8:	08013874 	.word	0x08013874
 80116dc:	08013834 	.word	0x08013834

080116e0 <std>:
 80116e0:	2300      	movs	r3, #0
 80116e2:	b510      	push	{r4, lr}
 80116e4:	4604      	mov	r4, r0
 80116e6:	e9c0 3300 	strd	r3, r3, [r0]
 80116ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116ee:	6083      	str	r3, [r0, #8]
 80116f0:	8181      	strh	r1, [r0, #12]
 80116f2:	6643      	str	r3, [r0, #100]	; 0x64
 80116f4:	81c2      	strh	r2, [r0, #14]
 80116f6:	6183      	str	r3, [r0, #24]
 80116f8:	4619      	mov	r1, r3
 80116fa:	2208      	movs	r2, #8
 80116fc:	305c      	adds	r0, #92	; 0x5c
 80116fe:	f7fd fdf1 	bl	800f2e4 <memset>
 8011702:	4b05      	ldr	r3, [pc, #20]	; (8011718 <std+0x38>)
 8011704:	6263      	str	r3, [r4, #36]	; 0x24
 8011706:	4b05      	ldr	r3, [pc, #20]	; (801171c <std+0x3c>)
 8011708:	62a3      	str	r3, [r4, #40]	; 0x28
 801170a:	4b05      	ldr	r3, [pc, #20]	; (8011720 <std+0x40>)
 801170c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801170e:	4b05      	ldr	r3, [pc, #20]	; (8011724 <std+0x44>)
 8011710:	6224      	str	r4, [r4, #32]
 8011712:	6323      	str	r3, [r4, #48]	; 0x30
 8011714:	bd10      	pop	{r4, pc}
 8011716:	bf00      	nop
 8011718:	08011a21 	.word	0x08011a21
 801171c:	08011a43 	.word	0x08011a43
 8011720:	08011a7b 	.word	0x08011a7b
 8011724:	08011a9f 	.word	0x08011a9f

08011728 <_cleanup_r>:
 8011728:	4901      	ldr	r1, [pc, #4]	; (8011730 <_cleanup_r+0x8>)
 801172a:	f000 b8af 	b.w	801188c <_fwalk_reent>
 801172e:	bf00      	nop
 8011730:	08011669 	.word	0x08011669

08011734 <__sfmoreglue>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	1e4a      	subs	r2, r1, #1
 8011738:	2568      	movs	r5, #104	; 0x68
 801173a:	4355      	muls	r5, r2
 801173c:	460e      	mov	r6, r1
 801173e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011742:	f7ff fc23 	bl	8010f8c <_malloc_r>
 8011746:	4604      	mov	r4, r0
 8011748:	b140      	cbz	r0, 801175c <__sfmoreglue+0x28>
 801174a:	2100      	movs	r1, #0
 801174c:	e9c0 1600 	strd	r1, r6, [r0]
 8011750:	300c      	adds	r0, #12
 8011752:	60a0      	str	r0, [r4, #8]
 8011754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011758:	f7fd fdc4 	bl	800f2e4 <memset>
 801175c:	4620      	mov	r0, r4
 801175e:	bd70      	pop	{r4, r5, r6, pc}

08011760 <__sfp_lock_acquire>:
 8011760:	4801      	ldr	r0, [pc, #4]	; (8011768 <__sfp_lock_acquire+0x8>)
 8011762:	f000 b8b3 	b.w	80118cc <__retarget_lock_acquire_recursive>
 8011766:	bf00      	nop
 8011768:	24001128 	.word	0x24001128

0801176c <__sfp_lock_release>:
 801176c:	4801      	ldr	r0, [pc, #4]	; (8011774 <__sfp_lock_release+0x8>)
 801176e:	f000 b8ae 	b.w	80118ce <__retarget_lock_release_recursive>
 8011772:	bf00      	nop
 8011774:	24001128 	.word	0x24001128

08011778 <__sinit_lock_acquire>:
 8011778:	4801      	ldr	r0, [pc, #4]	; (8011780 <__sinit_lock_acquire+0x8>)
 801177a:	f000 b8a7 	b.w	80118cc <__retarget_lock_acquire_recursive>
 801177e:	bf00      	nop
 8011780:	24001123 	.word	0x24001123

08011784 <__sinit_lock_release>:
 8011784:	4801      	ldr	r0, [pc, #4]	; (801178c <__sinit_lock_release+0x8>)
 8011786:	f000 b8a2 	b.w	80118ce <__retarget_lock_release_recursive>
 801178a:	bf00      	nop
 801178c:	24001123 	.word	0x24001123

08011790 <__sinit>:
 8011790:	b510      	push	{r4, lr}
 8011792:	4604      	mov	r4, r0
 8011794:	f7ff fff0 	bl	8011778 <__sinit_lock_acquire>
 8011798:	69a3      	ldr	r3, [r4, #24]
 801179a:	b11b      	cbz	r3, 80117a4 <__sinit+0x14>
 801179c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a0:	f7ff bff0 	b.w	8011784 <__sinit_lock_release>
 80117a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117a8:	6523      	str	r3, [r4, #80]	; 0x50
 80117aa:	4b13      	ldr	r3, [pc, #76]	; (80117f8 <__sinit+0x68>)
 80117ac:	4a13      	ldr	r2, [pc, #76]	; (80117fc <__sinit+0x6c>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80117b2:	42a3      	cmp	r3, r4
 80117b4:	bf04      	itt	eq
 80117b6:	2301      	moveq	r3, #1
 80117b8:	61a3      	streq	r3, [r4, #24]
 80117ba:	4620      	mov	r0, r4
 80117bc:	f000 f820 	bl	8011800 <__sfp>
 80117c0:	6060      	str	r0, [r4, #4]
 80117c2:	4620      	mov	r0, r4
 80117c4:	f000 f81c 	bl	8011800 <__sfp>
 80117c8:	60a0      	str	r0, [r4, #8]
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 f818 	bl	8011800 <__sfp>
 80117d0:	2200      	movs	r2, #0
 80117d2:	60e0      	str	r0, [r4, #12]
 80117d4:	2104      	movs	r1, #4
 80117d6:	6860      	ldr	r0, [r4, #4]
 80117d8:	f7ff ff82 	bl	80116e0 <std>
 80117dc:	68a0      	ldr	r0, [r4, #8]
 80117de:	2201      	movs	r2, #1
 80117e0:	2109      	movs	r1, #9
 80117e2:	f7ff ff7d 	bl	80116e0 <std>
 80117e6:	68e0      	ldr	r0, [r4, #12]
 80117e8:	2202      	movs	r2, #2
 80117ea:	2112      	movs	r1, #18
 80117ec:	f7ff ff78 	bl	80116e0 <std>
 80117f0:	2301      	movs	r3, #1
 80117f2:	61a3      	str	r3, [r4, #24]
 80117f4:	e7d2      	b.n	801179c <__sinit+0xc>
 80117f6:	bf00      	nop
 80117f8:	080134b0 	.word	0x080134b0
 80117fc:	08011729 	.word	0x08011729

08011800 <__sfp>:
 8011800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011802:	4607      	mov	r7, r0
 8011804:	f7ff ffac 	bl	8011760 <__sfp_lock_acquire>
 8011808:	4b1e      	ldr	r3, [pc, #120]	; (8011884 <__sfp+0x84>)
 801180a:	681e      	ldr	r6, [r3, #0]
 801180c:	69b3      	ldr	r3, [r6, #24]
 801180e:	b913      	cbnz	r3, 8011816 <__sfp+0x16>
 8011810:	4630      	mov	r0, r6
 8011812:	f7ff ffbd 	bl	8011790 <__sinit>
 8011816:	3648      	adds	r6, #72	; 0x48
 8011818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801181c:	3b01      	subs	r3, #1
 801181e:	d503      	bpl.n	8011828 <__sfp+0x28>
 8011820:	6833      	ldr	r3, [r6, #0]
 8011822:	b30b      	cbz	r3, 8011868 <__sfp+0x68>
 8011824:	6836      	ldr	r6, [r6, #0]
 8011826:	e7f7      	b.n	8011818 <__sfp+0x18>
 8011828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801182c:	b9d5      	cbnz	r5, 8011864 <__sfp+0x64>
 801182e:	4b16      	ldr	r3, [pc, #88]	; (8011888 <__sfp+0x88>)
 8011830:	60e3      	str	r3, [r4, #12]
 8011832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011836:	6665      	str	r5, [r4, #100]	; 0x64
 8011838:	f000 f847 	bl	80118ca <__retarget_lock_init_recursive>
 801183c:	f7ff ff96 	bl	801176c <__sfp_lock_release>
 8011840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011848:	6025      	str	r5, [r4, #0]
 801184a:	61a5      	str	r5, [r4, #24]
 801184c:	2208      	movs	r2, #8
 801184e:	4629      	mov	r1, r5
 8011850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011854:	f7fd fd46 	bl	800f2e4 <memset>
 8011858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801185c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011860:	4620      	mov	r0, r4
 8011862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011864:	3468      	adds	r4, #104	; 0x68
 8011866:	e7d9      	b.n	801181c <__sfp+0x1c>
 8011868:	2104      	movs	r1, #4
 801186a:	4638      	mov	r0, r7
 801186c:	f7ff ff62 	bl	8011734 <__sfmoreglue>
 8011870:	4604      	mov	r4, r0
 8011872:	6030      	str	r0, [r6, #0]
 8011874:	2800      	cmp	r0, #0
 8011876:	d1d5      	bne.n	8011824 <__sfp+0x24>
 8011878:	f7ff ff78 	bl	801176c <__sfp_lock_release>
 801187c:	230c      	movs	r3, #12
 801187e:	603b      	str	r3, [r7, #0]
 8011880:	e7ee      	b.n	8011860 <__sfp+0x60>
 8011882:	bf00      	nop
 8011884:	080134b0 	.word	0x080134b0
 8011888:	ffff0001 	.word	0xffff0001

0801188c <_fwalk_reent>:
 801188c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011890:	4606      	mov	r6, r0
 8011892:	4688      	mov	r8, r1
 8011894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011898:	2700      	movs	r7, #0
 801189a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801189e:	f1b9 0901 	subs.w	r9, r9, #1
 80118a2:	d505      	bpl.n	80118b0 <_fwalk_reent+0x24>
 80118a4:	6824      	ldr	r4, [r4, #0]
 80118a6:	2c00      	cmp	r4, #0
 80118a8:	d1f7      	bne.n	801189a <_fwalk_reent+0xe>
 80118aa:	4638      	mov	r0, r7
 80118ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b0:	89ab      	ldrh	r3, [r5, #12]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d907      	bls.n	80118c6 <_fwalk_reent+0x3a>
 80118b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118ba:	3301      	adds	r3, #1
 80118bc:	d003      	beq.n	80118c6 <_fwalk_reent+0x3a>
 80118be:	4629      	mov	r1, r5
 80118c0:	4630      	mov	r0, r6
 80118c2:	47c0      	blx	r8
 80118c4:	4307      	orrs	r7, r0
 80118c6:	3568      	adds	r5, #104	; 0x68
 80118c8:	e7e9      	b.n	801189e <_fwalk_reent+0x12>

080118ca <__retarget_lock_init_recursive>:
 80118ca:	4770      	bx	lr

080118cc <__retarget_lock_acquire_recursive>:
 80118cc:	4770      	bx	lr

080118ce <__retarget_lock_release_recursive>:
 80118ce:	4770      	bx	lr

080118d0 <__swhatbuf_r>:
 80118d0:	b570      	push	{r4, r5, r6, lr}
 80118d2:	460e      	mov	r6, r1
 80118d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d8:	2900      	cmp	r1, #0
 80118da:	b096      	sub	sp, #88	; 0x58
 80118dc:	4614      	mov	r4, r2
 80118de:	461d      	mov	r5, r3
 80118e0:	da07      	bge.n	80118f2 <__swhatbuf_r+0x22>
 80118e2:	2300      	movs	r3, #0
 80118e4:	602b      	str	r3, [r5, #0]
 80118e6:	89b3      	ldrh	r3, [r6, #12]
 80118e8:	061a      	lsls	r2, r3, #24
 80118ea:	d410      	bmi.n	801190e <__swhatbuf_r+0x3e>
 80118ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118f0:	e00e      	b.n	8011910 <__swhatbuf_r+0x40>
 80118f2:	466a      	mov	r2, sp
 80118f4:	f000 f8fa 	bl	8011aec <_fstat_r>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	dbf2      	blt.n	80118e2 <__swhatbuf_r+0x12>
 80118fc:	9a01      	ldr	r2, [sp, #4]
 80118fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011906:	425a      	negs	r2, r3
 8011908:	415a      	adcs	r2, r3
 801190a:	602a      	str	r2, [r5, #0]
 801190c:	e7ee      	b.n	80118ec <__swhatbuf_r+0x1c>
 801190e:	2340      	movs	r3, #64	; 0x40
 8011910:	2000      	movs	r0, #0
 8011912:	6023      	str	r3, [r4, #0]
 8011914:	b016      	add	sp, #88	; 0x58
 8011916:	bd70      	pop	{r4, r5, r6, pc}

08011918 <__smakebuf_r>:
 8011918:	898b      	ldrh	r3, [r1, #12]
 801191a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801191c:	079d      	lsls	r5, r3, #30
 801191e:	4606      	mov	r6, r0
 8011920:	460c      	mov	r4, r1
 8011922:	d507      	bpl.n	8011934 <__smakebuf_r+0x1c>
 8011924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	6123      	str	r3, [r4, #16]
 801192c:	2301      	movs	r3, #1
 801192e:	6163      	str	r3, [r4, #20]
 8011930:	b002      	add	sp, #8
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	ab01      	add	r3, sp, #4
 8011936:	466a      	mov	r2, sp
 8011938:	f7ff ffca 	bl	80118d0 <__swhatbuf_r>
 801193c:	9900      	ldr	r1, [sp, #0]
 801193e:	4605      	mov	r5, r0
 8011940:	4630      	mov	r0, r6
 8011942:	f7ff fb23 	bl	8010f8c <_malloc_r>
 8011946:	b948      	cbnz	r0, 801195c <__smakebuf_r+0x44>
 8011948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194c:	059a      	lsls	r2, r3, #22
 801194e:	d4ef      	bmi.n	8011930 <__smakebuf_r+0x18>
 8011950:	f023 0303 	bic.w	r3, r3, #3
 8011954:	f043 0302 	orr.w	r3, r3, #2
 8011958:	81a3      	strh	r3, [r4, #12]
 801195a:	e7e3      	b.n	8011924 <__smakebuf_r+0xc>
 801195c:	4b0d      	ldr	r3, [pc, #52]	; (8011994 <__smakebuf_r+0x7c>)
 801195e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011960:	89a3      	ldrh	r3, [r4, #12]
 8011962:	6020      	str	r0, [r4, #0]
 8011964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011968:	81a3      	strh	r3, [r4, #12]
 801196a:	9b00      	ldr	r3, [sp, #0]
 801196c:	6163      	str	r3, [r4, #20]
 801196e:	9b01      	ldr	r3, [sp, #4]
 8011970:	6120      	str	r0, [r4, #16]
 8011972:	b15b      	cbz	r3, 801198c <__smakebuf_r+0x74>
 8011974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011978:	4630      	mov	r0, r6
 801197a:	f000 f8c9 	bl	8011b10 <_isatty_r>
 801197e:	b128      	cbz	r0, 801198c <__smakebuf_r+0x74>
 8011980:	89a3      	ldrh	r3, [r4, #12]
 8011982:	f023 0303 	bic.w	r3, r3, #3
 8011986:	f043 0301 	orr.w	r3, r3, #1
 801198a:	81a3      	strh	r3, [r4, #12]
 801198c:	89a0      	ldrh	r0, [r4, #12]
 801198e:	4305      	orrs	r5, r0
 8011990:	81a5      	strh	r5, [r4, #12]
 8011992:	e7cd      	b.n	8011930 <__smakebuf_r+0x18>
 8011994:	08011729 	.word	0x08011729

08011998 <_raise_r>:
 8011998:	291f      	cmp	r1, #31
 801199a:	b538      	push	{r3, r4, r5, lr}
 801199c:	4604      	mov	r4, r0
 801199e:	460d      	mov	r5, r1
 80119a0:	d904      	bls.n	80119ac <_raise_r+0x14>
 80119a2:	2316      	movs	r3, #22
 80119a4:	6003      	str	r3, [r0, #0]
 80119a6:	f04f 30ff 	mov.w	r0, #4294967295
 80119aa:	bd38      	pop	{r3, r4, r5, pc}
 80119ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119ae:	b112      	cbz	r2, 80119b6 <_raise_r+0x1e>
 80119b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119b4:	b94b      	cbnz	r3, 80119ca <_raise_r+0x32>
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 f830 	bl	8011a1c <_getpid_r>
 80119bc:	462a      	mov	r2, r5
 80119be:	4601      	mov	r1, r0
 80119c0:	4620      	mov	r0, r4
 80119c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119c6:	f000 b817 	b.w	80119f8 <_kill_r>
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d00a      	beq.n	80119e4 <_raise_r+0x4c>
 80119ce:	1c59      	adds	r1, r3, #1
 80119d0:	d103      	bne.n	80119da <_raise_r+0x42>
 80119d2:	2316      	movs	r3, #22
 80119d4:	6003      	str	r3, [r0, #0]
 80119d6:	2001      	movs	r0, #1
 80119d8:	e7e7      	b.n	80119aa <_raise_r+0x12>
 80119da:	2400      	movs	r4, #0
 80119dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119e0:	4628      	mov	r0, r5
 80119e2:	4798      	blx	r3
 80119e4:	2000      	movs	r0, #0
 80119e6:	e7e0      	b.n	80119aa <_raise_r+0x12>

080119e8 <raise>:
 80119e8:	4b02      	ldr	r3, [pc, #8]	; (80119f4 <raise+0xc>)
 80119ea:	4601      	mov	r1, r0
 80119ec:	6818      	ldr	r0, [r3, #0]
 80119ee:	f7ff bfd3 	b.w	8011998 <_raise_r>
 80119f2:	bf00      	nop
 80119f4:	24000024 	.word	0x24000024

080119f8 <_kill_r>:
 80119f8:	b538      	push	{r3, r4, r5, lr}
 80119fa:	4d07      	ldr	r5, [pc, #28]	; (8011a18 <_kill_r+0x20>)
 80119fc:	2300      	movs	r3, #0
 80119fe:	4604      	mov	r4, r0
 8011a00:	4608      	mov	r0, r1
 8011a02:	4611      	mov	r1, r2
 8011a04:	602b      	str	r3, [r5, #0]
 8011a06:	f7f2 f99b 	bl	8003d40 <_kill>
 8011a0a:	1c43      	adds	r3, r0, #1
 8011a0c:	d102      	bne.n	8011a14 <_kill_r+0x1c>
 8011a0e:	682b      	ldr	r3, [r5, #0]
 8011a10:	b103      	cbz	r3, 8011a14 <_kill_r+0x1c>
 8011a12:	6023      	str	r3, [r4, #0]
 8011a14:	bd38      	pop	{r3, r4, r5, pc}
 8011a16:	bf00      	nop
 8011a18:	2400111c 	.word	0x2400111c

08011a1c <_getpid_r>:
 8011a1c:	f7f2 b988 	b.w	8003d30 <_getpid>

08011a20 <__sread>:
 8011a20:	b510      	push	{r4, lr}
 8011a22:	460c      	mov	r4, r1
 8011a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a28:	f000 f894 	bl	8011b54 <_read_r>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	bfab      	itete	ge
 8011a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a32:	89a3      	ldrhlt	r3, [r4, #12]
 8011a34:	181b      	addge	r3, r3, r0
 8011a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a3a:	bfac      	ite	ge
 8011a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a3e:	81a3      	strhlt	r3, [r4, #12]
 8011a40:	bd10      	pop	{r4, pc}

08011a42 <__swrite>:
 8011a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a46:	461f      	mov	r7, r3
 8011a48:	898b      	ldrh	r3, [r1, #12]
 8011a4a:	05db      	lsls	r3, r3, #23
 8011a4c:	4605      	mov	r5, r0
 8011a4e:	460c      	mov	r4, r1
 8011a50:	4616      	mov	r6, r2
 8011a52:	d505      	bpl.n	8011a60 <__swrite+0x1e>
 8011a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a58:	2302      	movs	r3, #2
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f000 f868 	bl	8011b30 <_lseek_r>
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a6a:	81a3      	strh	r3, [r4, #12]
 8011a6c:	4632      	mov	r2, r6
 8011a6e:	463b      	mov	r3, r7
 8011a70:	4628      	mov	r0, r5
 8011a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a76:	f000 b817 	b.w	8011aa8 <_write_r>

08011a7a <__sseek>:
 8011a7a:	b510      	push	{r4, lr}
 8011a7c:	460c      	mov	r4, r1
 8011a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a82:	f000 f855 	bl	8011b30 <_lseek_r>
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	bf15      	itete	ne
 8011a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a96:	81a3      	strheq	r3, [r4, #12]
 8011a98:	bf18      	it	ne
 8011a9a:	81a3      	strhne	r3, [r4, #12]
 8011a9c:	bd10      	pop	{r4, pc}

08011a9e <__sclose>:
 8011a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa2:	f000 b813 	b.w	8011acc <_close_r>
	...

08011aa8 <_write_r>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4d07      	ldr	r5, [pc, #28]	; (8011ac8 <_write_r+0x20>)
 8011aac:	4604      	mov	r4, r0
 8011aae:	4608      	mov	r0, r1
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	602a      	str	r2, [r5, #0]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	f7f2 f979 	bl	8003dae <_write>
 8011abc:	1c43      	adds	r3, r0, #1
 8011abe:	d102      	bne.n	8011ac6 <_write_r+0x1e>
 8011ac0:	682b      	ldr	r3, [r5, #0]
 8011ac2:	b103      	cbz	r3, 8011ac6 <_write_r+0x1e>
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	bd38      	pop	{r3, r4, r5, pc}
 8011ac8:	2400111c 	.word	0x2400111c

08011acc <_close_r>:
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	4d06      	ldr	r5, [pc, #24]	; (8011ae8 <_close_r+0x1c>)
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	4608      	mov	r0, r1
 8011ad6:	602b      	str	r3, [r5, #0]
 8011ad8:	f7f2 f985 	bl	8003de6 <_close>
 8011adc:	1c43      	adds	r3, r0, #1
 8011ade:	d102      	bne.n	8011ae6 <_close_r+0x1a>
 8011ae0:	682b      	ldr	r3, [r5, #0]
 8011ae2:	b103      	cbz	r3, 8011ae6 <_close_r+0x1a>
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	2400111c 	.word	0x2400111c

08011aec <_fstat_r>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	4d07      	ldr	r5, [pc, #28]	; (8011b0c <_fstat_r+0x20>)
 8011af0:	2300      	movs	r3, #0
 8011af2:	4604      	mov	r4, r0
 8011af4:	4608      	mov	r0, r1
 8011af6:	4611      	mov	r1, r2
 8011af8:	602b      	str	r3, [r5, #0]
 8011afa:	f7f2 f980 	bl	8003dfe <_fstat>
 8011afe:	1c43      	adds	r3, r0, #1
 8011b00:	d102      	bne.n	8011b08 <_fstat_r+0x1c>
 8011b02:	682b      	ldr	r3, [r5, #0]
 8011b04:	b103      	cbz	r3, 8011b08 <_fstat_r+0x1c>
 8011b06:	6023      	str	r3, [r4, #0]
 8011b08:	bd38      	pop	{r3, r4, r5, pc}
 8011b0a:	bf00      	nop
 8011b0c:	2400111c 	.word	0x2400111c

08011b10 <_isatty_r>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	4d06      	ldr	r5, [pc, #24]	; (8011b2c <_isatty_r+0x1c>)
 8011b14:	2300      	movs	r3, #0
 8011b16:	4604      	mov	r4, r0
 8011b18:	4608      	mov	r0, r1
 8011b1a:	602b      	str	r3, [r5, #0]
 8011b1c:	f7f2 f97f 	bl	8003e1e <_isatty>
 8011b20:	1c43      	adds	r3, r0, #1
 8011b22:	d102      	bne.n	8011b2a <_isatty_r+0x1a>
 8011b24:	682b      	ldr	r3, [r5, #0]
 8011b26:	b103      	cbz	r3, 8011b2a <_isatty_r+0x1a>
 8011b28:	6023      	str	r3, [r4, #0]
 8011b2a:	bd38      	pop	{r3, r4, r5, pc}
 8011b2c:	2400111c 	.word	0x2400111c

08011b30 <_lseek_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4d07      	ldr	r5, [pc, #28]	; (8011b50 <_lseek_r+0x20>)
 8011b34:	4604      	mov	r4, r0
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	602a      	str	r2, [r5, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	f7f2 f978 	bl	8003e34 <_lseek>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_lseek_r+0x1e>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_lseek_r+0x1e>
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	2400111c 	.word	0x2400111c

08011b54 <_read_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	4d07      	ldr	r5, [pc, #28]	; (8011b74 <_read_r+0x20>)
 8011b58:	4604      	mov	r4, r0
 8011b5a:	4608      	mov	r0, r1
 8011b5c:	4611      	mov	r1, r2
 8011b5e:	2200      	movs	r2, #0
 8011b60:	602a      	str	r2, [r5, #0]
 8011b62:	461a      	mov	r2, r3
 8011b64:	f7f2 f906 	bl	8003d74 <_read>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d102      	bne.n	8011b72 <_read_r+0x1e>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	b103      	cbz	r3, 8011b72 <_read_r+0x1e>
 8011b70:	6023      	str	r3, [r4, #0]
 8011b72:	bd38      	pop	{r3, r4, r5, pc}
 8011b74:	2400111c 	.word	0x2400111c

08011b78 <_init>:
 8011b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7a:	bf00      	nop
 8011b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b7e:	bc08      	pop	{r3}
 8011b80:	469e      	mov	lr, r3
 8011b82:	4770      	bx	lr

08011b84 <_fini>:
 8011b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b86:	bf00      	nop
 8011b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b8a:	bc08      	pop	{r3}
 8011b8c:	469e      	mov	lr, r3
 8011b8e:	4770      	bx	lr
