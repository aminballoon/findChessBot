
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013eac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  08014150  08014150  00024150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801608c  0801608c  0002608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016094  08016094  00026094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801609c  0801609c  0002609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000408  24000000  080160a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011fc  24000408  080164ac  00030408  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001604  080164ac  00031604  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 10 .debug_info   000295d5  00000000  00000000  00030436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046a6  00000000  00000000  00059a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  0005e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001590  00000000  00000000  0005f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1cd  00000000  00000000  00060d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023f5e  00000000  00000000  0009ef5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016da26  00000000  00000000  000c2ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002308e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073a0  00000000  00000000  00230934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000408 	.word	0x24000408
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014134 	.word	0x08014134

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400040c 	.word	0x2400040c
 80002dc:	08014134 	.word	0x08014134

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00d fbbc 	bl	800de64 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00d fc49 	bl	800df90 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000920:	edc7 0a00 	vstr	s1, [r7]
 8000924:	edd7 0a00 	vldr	s1, [r7]
 8000928:	ed97 0a01 	vldr	s0, [r7, #4]
 800092c:	f00f ff34 	bl	8010798 <atan2f>
 8000930:	eef0 7a40 	vmov.f32	s15, s0
 8000934:	eeb0 0a67 	vmov.f32	s0, s15
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	ed87 0a01 	vstr	s0, [r7, #4]
 8000948:	ed97 0a01 	vldr	s0, [r7, #4]
 800094c:	f00f ff26 	bl	801079c <sqrtf>
 8000950:	eef0 7a40 	vmov.f32	s15, s0
 8000954:	eeb0 0a67 	vmov.f32	s0, s15
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <_ZN10RobotJointC1Ev+0xd4>)
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	2002      	movs	r0, #2
 8000976:	eeb0 0a67 	vmov.f32	s0, s15
 800097a:	f000 fecd 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800097e:	eeb0 7b40 	vmov.f64	d7, d0
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	edc3 7a01 	vstr	s15, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a00 	vldr	s15, [r3]
 8000992:	2003      	movs	r0, #3
 8000994:	eeb0 0a67 	vmov.f32	s0, s15
 8000998:	f000 febe 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800099c:	eeb0 7b40 	vmov.f64	d7, d0
 80009a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	edc3 7a02 	vstr	s15, [r3, #8]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	2004      	movs	r0, #4
 80009b2:	eeb0 0a67 	vmov.f32	s0, s15
 80009b6:	f000 feaf 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80009ba:	eeb0 7b40 	vmov.f64	d7, d0
 80009be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	edc3 7a03 	vstr	s15, [r3, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f04f 0200 	mov.w	r2, #0
 80009d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f04f 0200 	mov.w	r2, #0
 80009ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f04f 0200 	mov.w	r2, #0
 8000a0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <_ZN10RobotJointC1Ev+0xd8>)
 8000a1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <_ZN10RobotJointC1Ev+0xdc>)
 8000a24:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	3b03126f 	.word	0x3b03126f
 8000a38:	3dcccccd 	.word	0x3dcccccd
 8000a3c:	3a83126f 	.word	0x3a83126f

08000a40 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

}
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	; 0x40
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8000a60:	ed87 0a08 	vstr	s0, [r7, #32]
 8000a64:	edc7 0a07 	vstr	s1, [r7, #28]
 8000a68:	ed87 1a06 	vstr	s2, [r7, #24]
 8000a6c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000a70:	ed87 2a04 	vstr	s4, [r7, #16]
 8000a74:	edc7 2a03 	vstr	s5, [r7, #12]
 8000a78:	ed87 3a02 	vstr	s6, [r7, #8]
 8000a7c:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000a80:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a90:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000a94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a98:	eeb0 0b46 	vmov.f64	d0, d6
 8000a9c:	f00f fe30 	bl	8010700 <sin>
 8000aa0:	eeb0 7b40 	vmov.f64	d7, d0
 8000aa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000aac:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ab0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000abc:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ac0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ac4:	eeb0 0b46 	vmov.f64	d0, d6
 8000ac8:	f00f fdce 	bl	8010668 <cos>
 8000acc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae0:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ae4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ae8:	eeb0 0b46 	vmov.f64	d0, d6
 8000aec:	f00f fe08 	bl	8010700 <sin>
 8000af0:	eeb0 7b40 	vmov.f64	d7, d0
 8000af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000af8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000afc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b04:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b08:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b0c:	eeb0 0b46 	vmov.f64	d0, d6
 8000b10:	f00f fdf6 	bl	8010700 <sin>
 8000b14:	eeb0 7b40 	vmov.f64	d7, d0
 8000b18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b1c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000b20:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b28:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b2c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b30:	eeb0 0b46 	vmov.f64	d0, d6
 8000b34:	f00f fd98 	bl	8010668 <cos>
 8000b38:	eeb0 7b40 	vmov.f64	d7, d0
 8000b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000b44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b48:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b50:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b6c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b74:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000c9c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000b78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b80:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b92:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000ba0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ba4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000ca4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bc0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000ca8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000bd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bdc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000c9c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000be8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bec:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000bf0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000bf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000bf8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000ca4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c08:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000ca8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000c0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c18:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c20:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c9c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c24:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c28:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c34:	ee67 7a87 	vmul.f32	s15, s15, s14
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000c3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c5e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000c88:	bf00      	nop
 8000c8a:	3740      	adds	r7, #64	; 0x40
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	00000000 	.word	0x00000000
 8000c94:	408f4000 	.word	0x408f4000
 8000c98:	439d8000 	.word	0x439d8000
 8000c9c:	43bfa000 	.word	0x43bfa000
 8000ca0:	447a0000 	.word	0x447a0000
 8000ca4:	41540000 	.word	0x41540000
 8000ca8:	43b90000 	.word	0x43b90000

08000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000cac:	b480      	push	{r7}
 8000cae:	b091      	sub	sp, #68	; 0x44
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	61f8      	str	r0, [r7, #28]
 8000cb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000cb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000cbc:	ed87 1a04 	vstr	s2, [r7, #16]
 8000cc0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000cc4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000cc8:	edc7 2a01 	vstr	s5, [r7, #4]
 8000ccc:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000ce0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ce4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000cf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d02:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000d06:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d1a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000d1e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d22:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000d32:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d42:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000d46:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000d52:	ed97 7a00 	vldr	s14, [r7]
 8000d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000d62:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d6a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d76:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000d82:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d86:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d92:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000da2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000da6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000dc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000dce:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000dd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dda:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dde:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000de2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dea:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000dee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000df2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000df6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dfa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000dfe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e02:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e0e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e12:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000e24:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2c:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000e30:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e3c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e48:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000e4c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e54:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e58:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e60:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000e64:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e68:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000e6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000e7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000e8a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e96:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ea6:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000eaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000eae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000eb2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000eba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ebe:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ec2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ec6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eca:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ece:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000ee8:	bf00      	nop
 8000eea:	3744      	adds	r7, #68	; 0x44
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	ed2d 8b08 	vpush	{d8-d11}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f12:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f1a:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f22:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f2a:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f32:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f3a:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000f42:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000f5e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f62:	edd7 7a00 	vldr	s15, [r7]
 8000f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edd3 6a00 	vldr	s13, [r3]
 8000f70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f96:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f9e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	2004      	movs	r0, #4
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	f000 fbb3 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fb6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000fba:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edd3 5a00 	vldr	s11, [r3]
 8000fd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fde:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fea:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fee:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ff2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 6a00 	vldr	s13, [r3]
 8001004:	edd7 7a05 	vldr	s15, [r7, #20]
 8001008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001010:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001014:	edd7 7a03 	vldr	s15, [r7, #12]
 8001018:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	2004      	movs	r0, #4
 8001024:	eeb0 0a67 	vmov.f32	s0, s15
 8001028:	f000 fb76 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800102c:	eeb0 7b40 	vmov.f64	d7, d0
 8001030:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001034:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001038:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800103c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	edd3 5a00 	vldr	s11, [r3]
 800104c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001050:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001054:	edd7 7a06 	vldr	s15, [r7, #24]
 8001058:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001064:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001068:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 800106c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001070:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 800107a:	edd7 7a08 	vldr	s15, [r7, #32]
 800107e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	2003      	movs	r0, #3
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	f000 fb3f 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800109a:	eeb0 7b40 	vmov.f64	d7, d0
 800109e:	ee29 7b07 	vmul.f64	d7, d9, d7
 80010a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80010a6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c8:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80010cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d0:	edd7 7a00 	vldr	s15, [r7]
 80010d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edd3 5a00 	vldr	s11, [r3]
 80010de:	edd7 7a08 	vldr	s15, [r7, #32]
 80010e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 6a00 	vldr	s13, [r3]
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001114:	edd7 7a03 	vldr	s15, [r7, #12]
 8001118:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	2004      	movs	r0, #4
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	f000 faf6 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800112c:	eeb0 7b40 	vmov.f64	d7, d0
 8001130:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001134:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001138:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800113c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edd3 5a00 	vldr	s11, [r3]
 800114c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001150:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001154:	edd7 7a06 	vldr	s15, [r7, #24]
 8001158:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001164:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001168:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800116c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001170:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	edd7 7a05 	vldr	s15, [r7, #20]
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	edd7 7a07 	vldr	s15, [r7, #28]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001194:	edd7 7a03 	vldr	s15, [r7, #12]
 8001198:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	2004      	movs	r0, #4
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f000 fab6 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011ac:	eeb0 7b40 	vmov.f64	d7, d0
 80011b0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011b4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011bc:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 5a00 	vldr	s11, [r3]
 80011cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	2004      	movs	r0, #4
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	f000 fa7b 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001222:	eeb0 7b40 	vmov.f64	d7, d0
 8001226:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800122a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800122e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001232:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edd3 5a00 	vldr	s11, [r3]
 8001242:	edd7 7a04 	vldr	s15, [r7, #16]
 8001246:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800124a:	edd7 7a06 	vldr	s15, [r7, #24]
 800124e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800125a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001262:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001266:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800126a:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	edd7 7a05 	vldr	s15, [r7, #20]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001288:	edd7 7a03 	vldr	s15, [r7, #12]
 800128c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	2004      	movs	r0, #4
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	f000 fa3c 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012a0:	eeb0 7b40 	vmov.f64	d7, d0
 80012a4:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80012a8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012b0:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	ed93 7a00 	vldr	s14, [r3]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	edd3 5a00 	vldr	s11, [r3]
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d8:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001304:	edd7 7a03 	vldr	s15, [r7, #12]
 8001308:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	2004      	movs	r0, #4
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	f000 f9fe 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800131c:	eeb0 7b40 	vmov.f64	d7, d0
 8001320:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001324:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001328:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800132c:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ed93 7a00 	vldr	s14, [r3]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 5a00 	vldr	s11, [r3]
 800133c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001340:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001344:	edd7 7a06 	vldr	s15, [r7, #24]
 8001348:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001354:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001358:	ed97 7a07 	vldr	s14, [r7, #28]
 800135c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edd3 6a00 	vldr	s13, [r3]
 800136a:	edd7 7a05 	vldr	s15, [r7, #20]
 800136e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800137a:	edd7 7a03 	vldr	s15, [r7, #12]
 800137e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	2004      	movs	r0, #4
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	f000 f9c3 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001392:	eeb0 7b40 	vmov.f64	d7, d0
 8001396:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800139a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800139e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013a2:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 5a00 	vldr	s11, [r3]
 80013b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80013be:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ca:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ce:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013d6:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013da:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80013de:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	2003      	movs	r0, #3
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	f000 f991 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013f6:	eeb0 7b40 	vmov.f64	d7, d0
 80013fa:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001402:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001418:	ee36 6b07 	vadd.f64	d6, d6, d7
 800141c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001420:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001424:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001428:	ee28 7b07 	vmul.f64	d7, d8, d7
 800142c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001444:	edd7 7a05 	vldr	s15, [r7, #20]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	2003      	movs	r0, #3
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f000 f958 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001468:	eeb0 7b40 	vmov.f64	d7, d0
 800146c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001470:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001474:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001478:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001480:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	2003      	movs	r0, #3
 800148c:	eeb0 0a67 	vmov.f32	s0, s15
 8001490:	f000 f942 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001494:	eeb0 7b40 	vmov.f64	d7, d0
 8001498:	ee29 7b07 	vmul.f64	d7, d9, d7
 800149c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014a0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c2:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80014e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	2004      	movs	r0, #4
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	f000 f910 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014f8:	eeb0 7b40 	vmov.f64	d7, d0
 80014fc:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001500:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001504:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001508:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 5a00 	vldr	s11, [r3]
 8001518:	edd7 7a04 	vldr	s15, [r7, #16]
 800151c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001520:	edd7 7a06 	vldr	s15, [r7, #24]
 8001524:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001530:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001534:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001538:	ed97 7a07 	vldr	s14, [r7, #28]
 800153c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edd3 6a00 	vldr	s13, [r3]
 800154a:	edd7 7a05 	vldr	s15, [r7, #20]
 800154e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001556:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800155a:	edd7 7a03 	vldr	s15, [r7, #12]
 800155e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	2004      	movs	r0, #4
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f000 f8d3 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001572:	eeb0 7b40 	vmov.f64	d7, d0
 8001576:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800157a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800157e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001582:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edd3 5a00 	vldr	s11, [r3]
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800159a:	edd7 7a06 	vldr	s15, [r7, #24]
 800159e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015aa:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015ae:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80015b2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	2002      	movs	r0, #2
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	f000 f89c 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015e0:	eeb0 7b40 	vmov.f64	d7, d0
 80015e4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015e8:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	2003      	movs	r0, #3
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	f000 f88a 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001604:	eeb0 7b40 	vmov.f64	d7, d0
 8001608:	ee29 7b07 	vmul.f64	d7, d9, d7
 800160c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001610:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	edd7 7a04 	vldr	s15, [r7, #16]
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001626:	ee36 6b07 	vadd.f64	d6, d6, d7
 800162a:	edd7 7a06 	vldr	s15, [r7, #24]
 800162e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001632:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001636:	edd7 7a03 	vldr	s15, [r7, #12]
 800163a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	2003      	movs	r0, #3
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f000 f865 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800164e:	eeb0 7b40 	vmov.f64	d7, d0
 8001652:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001656:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800165a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001670:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001674:	edd7 7a05 	vldr	s15, [r7, #20]
 8001678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800167c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001680:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001684:	ed97 7a07 	vldr	s14, [r7, #28]
 8001688:	edd7 7a02 	vldr	s15, [r7, #8]
 800168c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edd3 6a00 	vldr	s13, [r3]
 8001696:	edd7 7a05 	vldr	s15, [r7, #20]
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	2004      	movs	r0, #4
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	f000 f82d 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016be:	eeb0 7b40 	vmov.f64	d7, d0
 80016c2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016c6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ce:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 5a00 	vldr	s11, [r3]
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016fa:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80016fe:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001702:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	ecbd 8b08 	vpop	{d8-d11}
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001722:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001724:	edd7 7a01 	vldr	s15, [r7, #4]
 8001728:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	ee06 3a90 	vmov	s13, r3
 8001732:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001736:	eeb0 1b46 	vmov.f64	d1, d6
 800173a:	eeb0 0b47 	vmov.f64	d0, d7
 800173e:	f00e fd3f 	bl	80101c0 <pow>
 8001742:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001746:	eeb0 0b47 	vmov.f64	d0, d7
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
 800175a:	edd7 7a01 	vldr	s15, [r7, #4]
 800175e:	fefb 7a67 	vrintm.f32	s15, s15
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
 800177a:	edd7 7a01 	vldr	s15, [r7, #4]
 800177e:	fef8 7a67 	vrinta.f32	s15, s15
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	22b4      	movs	r2, #180	; 0xb4
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	761a      	strb	r2, [r3, #24]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	22ef      	movs	r2, #239	; 0xef
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f00b f913 	bl	800ca44 <HAL_TIM_PWM_Start>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af02      	add	r7, sp, #8
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13f      	bne.n	80018ba <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691c      	ldr	r4, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	3301      	adds	r3, #1
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001854:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	f7ff ff86 	bl	8001770 <_ZSt5roundf>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	3301      	adds	r3, #1
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001882:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	f7ff ff5f 	bl	8001750 <_ZSt5floorf>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 3a90 	vmov	r3, s15
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	9600      	str	r6, [sp, #0]
 80018a2:	462b      	mov	r3, r5
 80018a4:	4622      	mov	r2, r4
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f9cf 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 80018ae:	4602      	mov	r2, r0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80018b8:	e176      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d13f      	bne.n	8001942 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691c      	ldr	r4, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	3301      	adds	r3, #1
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018dc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff ff42 	bl	8001770 <_ZSt5roundf>
 80018ec:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	3301      	adds	r3, #1
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	f7ff ff1b 	bl	8001750 <_ZSt5floorf>
 800191a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	9600      	str	r6, [sp, #0]
 800192a:	462b      	mov	r3, r5
 800192c:	4622      	mov	r2, r4
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f98b 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001940:	e132      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d13f      	bne.n	80019ca <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691c      	ldr	r4, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	3301      	adds	r3, #1
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001964:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	f7ff fefe 	bl	8001770 <_ZSt5roundf>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	3301      	adds	r3, #1
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001992:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	f7ff fed7 	bl	8001750 <_ZSt5floorf>
 80019a2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80019a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	9600      	str	r6, [sp, #0]
 80019b2:	462b      	mov	r3, r5
 80019b4:	4622      	mov	r2, r4
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f947 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 80019be:	4602      	mov	r2, r0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019c8:	e0ee      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d13f      	bne.n	8001a52 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691c      	ldr	r4, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	3301      	adds	r3, #1
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	eeb0 0a67 	vmov.f32	s0, s15
 80019f8:	f7ff feba 	bl	8001770 <_ZSt5roundf>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	3301      	adds	r3, #1
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	f7ff fe93 	bl	8001750 <_ZSt5floorf>
 8001a2a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a32:	ee17 3a90 	vmov	r3, s15
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9600      	str	r6, [sp, #0]
 8001a3a:	462b      	mov	r3, r5
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f903 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a50:	e0aa      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d144      	bne.n	8001ae4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691c      	ldr	r4, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a74:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	f7ff fe76 	bl	8001770 <_ZSt5roundf>
 8001a84:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	3301      	adds	r3, #1
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	f7ff fe4f 	bl	8001750 <_ZSt5floorf>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aba:	ee17 3a90 	vmov	r3, s15
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	9600      	str	r6, [sp, #0]
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8bf 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ad8:	e066      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001ada:	bf00      	nop
 8001adc:	3d4ccccd 	.word	0x3d4ccccd
 8001ae0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b14      	cmp	r3, #20
 8001aea:	d13f      	bne.n	8001b6c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691c      	ldr	r4, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	3301      	adds	r3, #1
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b06:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	f7ff fe2d 	bl	8001770 <_ZSt5roundf>
 8001b16:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	f7ff fe06 	bl	8001750 <_ZSt5floorf>
 8001b44:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4c:	ee17 3a90 	vmov	r3, s15
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	9600      	str	r6, [sp, #0]
 8001b54:	462b      	mov	r3, r5
 8001b56:	4622      	mov	r2, r4
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f876 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b6a:	e01d      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb0 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	761a      	strb	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	765a      	strb	r2, [r3, #25]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e5b      	ldrb	r3, [r3, #25]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fe09 	bl	8001828 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c16:	e000      	b.n	8001c1a <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001c18:	bf00      	nop
}
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fdf3 	bl	8001828 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c42:	e000      	b.n	8001c46 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001c44:	bf00      	nop
}
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	69f9      	ldr	r1, [r7, #28]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	1a8a      	subs	r2, r1, r2
 8001c66:	fb03 f202 	mul.w	r2, r3, r2
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1acb      	subs	r3, r1, r3
 8001c70:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4413      	add	r3, r2
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c92:	eef0 7ae7 	vabs.f32	s15, s15
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cbc:	619a      	str	r2, [r3, #24]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc4:	61da      	str	r2, [r3, #28]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001cca:	621a      	str	r2, [r3, #32]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	22c7      	movs	r2, #199	; 0xc7
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cf0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cf6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001cf8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d24 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f82f 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	60da      	str	r2, [r3, #12]
}
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	41a00000 	.word	0x41a00000
 8001d1c:	469c4000 	.word	0x469c4000
 8001d20:	43480000 	.word	0x43480000
 8001d24:	00000000 	.word	0x00000000

08001d28 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
}
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f00a fe77 	bl	800ca44 <HAL_TIM_PWM_Start>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	ed2d 8b02 	vpush	{d8}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d80:	f7ff ff80 	bl	8001c84 <_ZSt4fabsf>
 8001d84:	eeb0 7a40 	vmov.f32	s14, s0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e01b      	b.n	8001de2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	edd3 7a04 	vldr	s15, [r3, #16]
 8001db0:	eeb0 0a67 	vmov.f32	s0, s15
 8001db4:	f7ff ff66 	bl	8001c84 <_ZSt4fabsf>
 8001db8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	bfac      	ite	ge
 8001dcc:	2301      	movge	r3, #1
 8001dce:	2300      	movlt	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e001      	b.n	8001de2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002084 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	f2c0 80db 	blt.w	8001fae <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2201      	movs	r2, #1
 8001e04:	4619      	mov	r1, r3
 8001e06:	f008 f80d 	bl	8009e24 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	3301      	adds	r3, #1
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	f7ff fc9a 	bl	8001770 <_ZSt5roundf>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4a:	ee17 2a90 	vmov	r2, s15
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d113      	bne.n	8001e80 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fa5b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e78:	ee17 2a90 	vmov	r2, s15
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001e7e:	e1e0      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d113      	bne.n	8001eb0 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fa43 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ea8:	ee17 2a90 	vmov	r2, s15
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eae:	e1c8      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d113      	bne.n	8001ee0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa2b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eca:	eeb0 7b40 	vmov.f64	d7, d0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ede:	e1b0      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d113      	bne.n	8001f10 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa13 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001efa:	eeb0 7b40 	vmov.f64	d7, d0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f08:	ee17 2a90 	vmov	r2, s15
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f0e:	e198      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d113      	bne.n	8001f40 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f9fb 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f38:	ee17 2a90 	vmov	r2, s15
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f3e:	e180      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b14      	cmp	r3, #20
 8001f46:	d113      	bne.n	8001f70 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f9e3 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f68:	ee17 2a90 	vmov	r2, s15
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f6e:	e168      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001fac:	e149      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fb4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800208c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	f200 80e5 	bhi.w	800218e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6898      	ldr	r0, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f007 ff27 	bl	8009e24 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	3301      	adds	r3, #1
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fe8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fec:	f7ff fe4a 	bl	8001c84 <_ZSt4fabsf>
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ff8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f7ff fbb0 	bl	8001770 <_ZSt5roundf>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	ee17 2a90 	vmov	r2, s15
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d113      	bne.n	8002054 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f971 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800203e:	eeb0 7b40 	vmov.f64	d7, d0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800204c:	ee17 2a90 	vmov	r2, s15
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002052:	e0f6      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d119      	bne.n	8002090 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f959 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800206e:	eeb0 7b40 	vmov.f64	d7, d0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800207c:	ee17 2a90 	vmov	r2, s15
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002082:	e0de      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8002084:	3a83126f 	.word	0x3a83126f
 8002088:	4d64e1c0 	.word	0x4d64e1c0
 800208c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d113      	bne.n	80020c0 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f93b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020aa:	eeb0 7b40 	vmov.f64	d7, d0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020b8:	ee17 2a90 	vmov	r2, s15
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020be:	e0c0      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d113      	bne.n	80020f0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f923 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020da:	eeb0 7b40 	vmov.f64	d7, d0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020e8:	ee17 2a90 	vmov	r2, s15
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020ee:	e0a8      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d113      	bne.n	8002120 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f90b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800210a:	eeb0 7b40 	vmov.f64	d7, d0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002118:	ee17 2a90 	vmov	r2, s15
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800211e:	e090      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b14      	cmp	r3, #20
 8002126:	d113      	bne.n	8002150 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f8f3 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800213a:	eeb0 7b40 	vmov.f64	d7, d0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002148:	ee17 2a90 	vmov	r2, s15
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800214e:	e078      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800218c:	e059      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021a0:	e04f      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d105      	bne.n	80021b6 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021b4:	e045      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d105      	bne.n	80021ca <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021c8:	e03b      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d105      	bne.n	80021de <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021dc:	e031      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d105      	bne.n	80021f2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021f0:	e027      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b14      	cmp	r3, #20
 80021f8:	d105      	bne.n	8002206 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002204:	e01d      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	ecbd 8b02 	vpop	{d8}
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800225c:	ed97 0a00 	vldr	s0, [r7]
 8002260:	f7ff fd10 	bl	8001c84 <_ZSt4fabsf>
 8002264:	eef0 7a40 	vmov.f32	s15, s0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800228a:	eeb0 0b47 	vmov.f64	d0, d7
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ffe5 	bl	8002276 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80022ac:	eeb0 7b40 	vmov.f64	d7, d0
 80022b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	0000      	movs	r0, r0
 80022c4:	0000      	movs	r0, r0
	...

080022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80022da:	edd7 7a00 	vldr	s15, [r7]
 80022de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80022fa:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002318 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80022fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8002302:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fd28 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	704a95d1 	.word	0x704a95d1
 800231c:	40b88b2f 	.word	0x40b88b2f

08002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002332:	eeb0 0b47 	vmov.f64	d0, d7
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <MX_CRC_Init+0x54>)
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <MX_CRC_Init+0x58>)
 8002348:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_CRC_Init+0x54>)
 800234c:	2201      	movs	r2, #1
 800234e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_CRC_Init+0x54>)
 8002352:	2201      	movs	r2, #1
 8002354:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_CRC_Init+0x54>)
 8002358:	f248 0205 	movw	r2, #32773	; 0x8005
 800235c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <MX_CRC_Init+0x54>)
 8002360:	2208      	movs	r2, #8
 8002362:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_CRC_Init+0x54>)
 8002366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_CRC_Init+0x54>)
 800236e:	2220      	movs	r2, #32
 8002370:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_CRC_Init+0x54>)
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_CRC_Init+0x54>)
 800237a:	2201      	movs	r2, #1
 800237c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_CRC_Init+0x54>)
 8002380:	f004 fb66 	bl	8006a50 <HAL_CRC_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800238a:	f002 fa83 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	24000424 	.word	0x24000424
 8002398:	58024c00 	.word	0x58024c00

0800239c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_CRC_MspInit+0x3c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10e      	bne.n	80023cc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_CRC_MspInit+0x40>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_CRC_MspInit+0x40>)
 80023b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_CRC_MspInit+0x40>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	58024c00 	.word	0x58024c00
 80023dc:	58024400 	.word	0x58024400

080023e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <MX_DMA_Init+0x9c>)
 80023e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <MX_DMA_Init+0x9c>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <MX_DMA_Init+0x9c>)
 80023f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	200b      	movs	r0, #11
 800240a:	f004 fae0 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800240e:	200b      	movs	r0, #11
 8002410:	f004 faf7 	bl	8006a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	200c      	movs	r0, #12
 800241a:	f004 fad8 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800241e:	200c      	movs	r0, #12
 8002420:	f004 faef 	bl	8006a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	200d      	movs	r0, #13
 800242a:	f004 fad0 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800242e:	200d      	movs	r0, #13
 8002430:	f004 fae7 	bl	8006a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	200e      	movs	r0, #14
 800243a:	f004 fac8 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800243e:	200e      	movs	r0, #14
 8002440:	f004 fadf 	bl	8006a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	200f      	movs	r0, #15
 800244a:	f004 fac0 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800244e:	200f      	movs	r0, #15
 8002450:	f004 fad7 	bl	8006a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	2010      	movs	r0, #16
 800245a:	f004 fab8 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800245e:	2010      	movs	r0, #16
 8002460:	f004 facf 	bl	8006a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2011      	movs	r0, #17
 800246a:	f004 fab0 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800246e:	2011      	movs	r0, #17
 8002470:	f004 fac7 	bl	8006a02 <HAL_NVIC_EnableIRQ>

}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400

08002480 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	4b87      	ldr	r3, [pc, #540]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	4a85      	ldr	r2, [pc, #532]	; (80026b4 <MX_GPIO_Init+0x234>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a6:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b4:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c4:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d2:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e2:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	4a6f      	ldr	r2, [pc, #444]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002514:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <MX_GPIO_Init+0x234>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253c:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <MX_GPIO_Init+0x234>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800254a:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <MX_GPIO_Init+0x234>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <MX_GPIO_Init+0x234>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002568:	2200      	movs	r2, #0
 800256a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800256e:	4852      	ldr	r0, [pc, #328]	; (80026b8 <MX_GPIO_Init+0x238>)
 8002570:	f007 fc58 	bl	8009e24 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	f24c 0102 	movw	r1, #49154	; 0xc002
 800257a:	4850      	ldr	r0, [pc, #320]	; (80026bc <MX_GPIO_Init+0x23c>)
 800257c:	f007 fc52 	bl	8009e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002586:	484e      	ldr	r0, [pc, #312]	; (80026c0 <MX_GPIO_Init+0x240>)
 8002588:	f007 fc4c 	bl	8009e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002592:	484c      	ldr	r0, [pc, #304]	; (80026c4 <MX_GPIO_Init+0x244>)
 8002594:	f007 fc46 	bl	8009e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259e:	484a      	ldr	r0, [pc, #296]	; (80026c8 <MX_GPIO_Init+0x248>)
 80025a0:	f007 fc40 	bl	8009e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80025a4:	f644 2321 	movw	r3, #18977	; 0x4a21
 80025a8:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	483e      	ldr	r0, [pc, #248]	; (80026b8 <MX_GPIO_Init+0x238>)
 80025be:	f007 fa81 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80025c2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	4838      	ldr	r0, [pc, #224]	; (80026bc <MX_GPIO_Init+0x23c>)
 80025da:	f007 fa73 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80025de:	f24c 0302 	movw	r3, #49154	; 0xc002
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	4831      	ldr	r0, [pc, #196]	; (80026bc <MX_GPIO_Init+0x23c>)
 80025f8:	f007 fa64 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80025fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	482a      	ldr	r0, [pc, #168]	; (80026c0 <MX_GPIO_Init+0x240>)
 8002616:	f007 fa55 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800261a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4824      	ldr	r0, [pc, #144]	; (80026c4 <MX_GPIO_Init+0x244>)
 8002634:	f007 fa46 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	481d      	ldr	r0, [pc, #116]	; (80026c8 <MX_GPIO_Init+0x248>)
 8002652:	f007 fa37 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800265a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800265c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4817      	ldr	r0, [pc, #92]	; (80026cc <MX_GPIO_Init+0x24c>)
 800266e:	f007 fa29 	bl	8009ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8002672:	23c0      	movs	r3, #192	; 0xc0
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800267a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <MX_GPIO_Init+0x238>)
 8002688:	f007 fa1c 	bl	8009ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2017      	movs	r0, #23
 8002692:	f004 f99c 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002696:	2017      	movs	r0, #23
 8002698:	f004 f9b3 	bl	8006a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2028      	movs	r0, #40	; 0x28
 80026a2:	f004 f994 	bl	80069ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026a6:	2028      	movs	r0, #40	; 0x28
 80026a8:	f004 f9ab 	bl	8006a02 <HAL_NVIC_EnableIRQ>

}
 80026ac:	bf00      	nop
 80026ae:	3730      	adds	r7, #48	; 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	58020400 	.word	0x58020400
 80026bc:	58021000 	.word	0x58021000
 80026c0:	58020c00 	.word	0x58020c00
 80026c4:	58020800 	.word	0x58020800
 80026c8:	58020000 	.word	0x58020000
 80026cc:	58021800 	.word	0x58021800

080026d0 <_Z12Insert_queueii>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    if (bot == LIMIT - 1)
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <_Z12Insert_queueii+0x6c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b13      	cmp	r3, #19
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <_Z12Insert_queueii+0x20>
    {
        return false;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e01e      	b.n	800272e <_Z12Insert_queueii+0x5e>
    }
    else
    {
        if (first == - 1)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_Z12Insert_queueii+0x70>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <_Z12Insert_queueii+0x3a>
        {
            first = 0;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <_Z12Insert_queueii+0x70>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
        }
		bot++;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <_Z12Insert_queueii+0x6c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <_Z12Insert_queueii+0x6c>)
 8002712:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <_Z12Insert_queueii+0x6c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	490a      	ldr	r1, [pc, #40]	; (8002744 <_Z12Insert_queueii+0x74>)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <_Z12Insert_queueii+0x6c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4908      	ldr	r1, [pc, #32]	; (8002748 <_Z12Insert_queueii+0x78>)
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800272c:	2301      	movs	r3, #1
    }
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	24000004 	.word	0x24000004
 8002740:	24000000 	.word	0x24000000
 8002744:	24000b28 	.word	0x24000b28
 8002748:	24000b78 	.word	0x24000b78

0800274c <_Z10Call_queuev>:

int Call_queue()
    {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <_Z10Call_queuev+0x94>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275a:	d005      	beq.n	8002768 <_Z10Call_queuev+0x1c>
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <_Z10Call_queuev+0x94>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <_Z10Call_queuev+0x98>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	dd01      	ble.n	800276c <_Z10Call_queuev+0x20>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <_Z10Call_queuev+0x22>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d026      	beq.n	80027c0 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 8002772:	481d      	ldr	r0, [pc, #116]	; (80027e8 <_Z10Call_queuev+0x9c>)
 8002774:	f00f fcac 	bl	80120d0 <puts>
        for (int num = 0; num <= bot+1; num++)
 8002778:	2300      	movs	r3, #0
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <_Z10Call_queuev+0x98>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	bfd4      	ite	le
 8002788:	2301      	movle	r3, #1
 800278a:	2300      	movgt	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <_Z10Call_queuev+0xa0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	e7eb      	b.n	800277c <_Z10Call_queuev+0x30>
        }
        first = -1;
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027aa:	601a      	str	r2, [r3, #0]
        bot = -1;
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <_Z10Call_queuev+0x98>)
 80027ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b2:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 80027b4:	480e      	ldr	r0, [pc, #56]	; (80027f0 <_Z10Call_queuev+0xa4>)
 80027b6:	f00f fc8b 	bl	80120d0 <puts>
        output = 255;
 80027ba:	23ff      	movs	r3, #255	; 0xff
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e00a      	b.n	80027d6 <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <_Z10Call_queuev+0xa0>)
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	607b      	str	r3, [r7, #4]
        first++;
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027d4:	6013      	str	r3, [r2, #0]
    }
    return output;
 80027d6:	687b      	ldr	r3, [r7, #4]

}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24000000 	.word	0x24000000
 80027e4:	24000004 	.word	0x24000004
 80027e8:	08014150 	.word	0x08014150
 80027ec:	24000b28 	.word	0x24000b28
 80027f0:	0801416c 	.word	0x0801416c

080027f4 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b092      	sub	sp, #72	; 0x48
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80027fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8002802:	ed87 1a01 	vstr	s2, [r7, #4]
 8002806:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x/1000.0;
 800280a:	ed97 7a03 	vldr	s14, [r7, #12]
 800280e:	eddf 6a78 	vldr	s13, [pc, #480]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002816:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y/1000.0;
 800281a:	ed97 7a02 	vldr	s14, [r7, #8]
 800281e:	eddf 6a74 	vldr	s13, [pc, #464]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z/1000.0;
 800282a:	ed97 7a01 	vldr	s14, [r7, #4]
 800282e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002836:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw/1000.0;
 800283a:	ed97 7a00 	vldr	s14, [r7]
 800283e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002846:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x*x)+(y*y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 800284a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800284e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002852:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002856:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800285a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002860:	edd3 6a00 	vldr	s13, [r3]
 8002864:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 8002874:	edd3 6a00 	vldr	s13, [r3]
 8002878:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002882:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1-(C3*C3));
 80028a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b2:	eeb0 0a67 	vmov.f32	s0, s15
 80028b6:	f7fe f842 	bl	800093e <_ZSt4sqrtf>
 80028ba:	eef0 7a40 	vmov.f32	s15, s0
 80028be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c2:	eeb1 7b47 	vneg.f64	d7, d7
 80028c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3,C3);
 80028ce:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80028d2:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80028d6:	f7fe f81e 	bl	8000916 <_ZSt5atan2ff>
 80028da:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3*S3;
 80028de:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3*C3);
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3*x) + (L123C3*y);
 800290c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002910:	eeb1 7a67 	vneg.f32	s14, s15
 8002914:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002920:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3*y) + (L123C3*x);
 8002930:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002934:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002940:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1,C1);
 8002950:	edd7 0a07 	vldr	s1, [r7, #28]
 8002954:	ed97 0a08 	vldr	s0, [r7, #32]
 8002958:	f7fd ffdd 	bl	8000916 <_ZSt5atan2ff>
 800295c:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002960:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002964:	edd7 7a06 	vldr	s15, [r7, #24]
 8002968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <_Z6fcb_IKffff+0x208>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <_Z6fcb_IKffff+0x20c>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <_Z6fcb_IKffff+0x210>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299a:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1*1000.0;
 800299e:	edd7 7a06 	vldr	s15, [r7, #24]
 80029a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <_Z6fcb_IKffff+0x214>)
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2*1000.0;
 80029b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <_Z6fcb_IKffff+0x218>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3*1000.0;
 80029c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_Z6fcb_IKffff+0x21c>)
 80029d0:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4*1000.0;
 80029d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <_Z6fcb_IKffff+0x220>)
 80029e2:	edc3 7a00 	vstr	s15, [r3]

}
 80029e6:	bf00      	nop
 80029e8:	3748      	adds	r7, #72	; 0x48
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	447a0000 	.word	0x447a0000
 80029f4:	24000210 	.word	0x24000210
 80029f8:	2400020c 	.word	0x2400020c
 80029fc:	2400021c 	.word	0x2400021c
 8002a00:	24000218 	.word	0x24000218
 8002a04:	24000214 	.word	0x24000214
 8002a08:	24000bdc 	.word	0x24000bdc
 8002a0c:	24000be0 	.word	0x24000be0
 8002a10:	24000be4 	.word	0x24000be4
 8002a14:	24000be8 	.word	0x24000be8

08002a18 <_Z20Update_State_Machinev>:
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x,pos_y;
void Update_State_Machine()
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	ed2d 8b02 	vpush	{d8}
 8002a1e:	af00      	add	r7, sp, #0

    switch (control_state)
 8002a20:	4bcd      	ldr	r3, [pc, #820]	; (8002d58 <_Z20Update_State_Machinev+0x340>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3b29      	subs	r3, #41	; 0x29
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	f200 82f3 	bhi.w	8003014 <_Z20Update_State_Machinev+0x5fc>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <_Z20Update_State_Machinev+0x1c>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002c9b 	.word	0x08002c9b
 8002a3c:	08002ceb 	.word	0x08002ceb
 8002a40:	08003015 	.word	0x08003015
 8002a44:	08003015 	.word	0x08003015
 8002a48:	08003015 	.word	0x08003015
 8002a4c:	08003015 	.word	0x08003015
 8002a50:	08003015 	.word	0x08003015
 8002a54:	08003015 	.word	0x08003015
 8002a58:	08003015 	.word	0x08003015
 8002a5c:	08003023 	.word	0x08003023
 8002a60:	08002dc9 	.word	0x08002dc9
 8002a64:	08003023 	.word	0x08003023
 8002a68:	08002eeb 	.word	0x08002eeb
 8002a6c:	08003023 	.word	0x08003023
 8002a70:	08002fa1 	.word	0x08002fa1
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a74:	f7ff fe6a 	bl	800274c <_Z10Call_queuev>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4ab8      	ldr	r2, [pc, #736]	; (8002d5c <_Z20Update_State_Machinev+0x344>)
 8002a7c:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002a7e:	4bb7      	ldr	r3, [pc, #732]	; (8002d5c <_Z20Update_State_Machinev+0x344>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	f000 8105 	beq.w	8002c92 <_Z20Update_State_Machinev+0x27a>
			{
				test_value_r = radias[indexy];
 8002a88:	4bb4      	ldr	r3, [pc, #720]	; (8002d5c <_Z20Update_State_Machinev+0x344>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4ab4      	ldr	r2, [pc, #720]	; (8002d60 <_Z20Update_State_Machinev+0x348>)
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9a:	ee17 2a90 	vmov	r2, s15
 8002a9e:	4bb1      	ldr	r3, [pc, #708]	; (8002d64 <_Z20Update_State_Machinev+0x34c>)
 8002aa0:	601a      	str	r2, [r3, #0]
				test_value_theta = theta[indexy];
 8002aa2:	4bae      	ldr	r3, [pc, #696]	; (8002d5c <_Z20Update_State_Machinev+0x344>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4ab0      	ldr	r2, [pc, #704]	; (8002d68 <_Z20Update_State_Machinev+0x350>)
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab4:	ee17 2a90 	vmov	r2, s15
 8002ab8:	4bac      	ldr	r3, [pc, #688]	; (8002d6c <_Z20Update_State_Machinev+0x354>)
 8002aba:	601a      	str	r2, [r3, #0]
				offset_x_new = ((0.16075 * (test_value_r*cos(test_value_theta/1000.0))) + 0.02289)/10.0 ;
 8002abc:	4ba9      	ldr	r3, [pc, #676]	; (8002d64 <_Z20Update_State_Machinev+0x34c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ac8:	4ba8      	ldr	r3, [pc, #672]	; (8002d6c <_Z20Update_State_Machinev+0x354>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ad4:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8002d40 <_Z20Update_State_Machinev+0x328>
 8002ad8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002adc:	eeb0 0b46 	vmov.f64	d0, d6
 8002ae0:	f00d fdc2 	bl	8010668 <cos>
 8002ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ae8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002aec:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002d48 <_Z20Update_State_Machinev+0x330>
 8002af0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002af4:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002af8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002afc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002b00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b08:	4b99      	ldr	r3, [pc, #612]	; (8002d70 <_Z20Update_State_Machinev+0x358>)
 8002b0a:	edc3 7a00 	vstr	s15, [r3]
//				offset_y_new = ((0.29560 * (test_value_r*sin(test_value_theta/1000.0))) + 1.05911)/10.0 ;
				pos_x = (test_value_r*cos(test_value_theta/1000.0)) + offset_x + offset_x_new;
 8002b0e:	4b95      	ldr	r3, [pc, #596]	; (8002d64 <_Z20Update_State_Machinev+0x34c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b1a:	4b94      	ldr	r3, [pc, #592]	; (8002d6c <_Z20Update_State_Machinev+0x354>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b26:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8002d40 <_Z20Update_State_Machinev+0x328>
 8002b2a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b2e:	eeb0 0b46 	vmov.f64	d0, d6
 8002b32:	f00d fd99 	bl	8010668 <cos>
 8002b36:	eeb0 7b40 	vmov.f64	d7, d0
 8002b3a:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b3e:	4b8d      	ldr	r3, [pc, #564]	; (8002d74 <_Z20Update_State_Machinev+0x35c>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b4c:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <_Z20Update_State_Machinev+0x358>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b5e:	4b86      	ldr	r3, [pc, #536]	; (8002d78 <_Z20Update_State_Machinev+0x360>)
 8002b60:	edc3 7a00 	vstr	s15, [r3]
				pos_y = (test_value_r*sin(test_value_theta/1000.0)) + offset_y + offset_y_new;
 8002b64:	4b7f      	ldr	r3, [pc, #508]	; (8002d64 <_Z20Update_State_Machinev+0x34c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b70:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <_Z20Update_State_Machinev+0x354>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b7c:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8002d40 <_Z20Update_State_Machinev+0x328>
 8002b80:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b84:	eeb0 0b46 	vmov.f64	d0, d6
 8002b88:	f00d fdba 	bl	8010700 <sin>
 8002b8c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b90:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b94:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <_Z20Update_State_Machinev+0x364>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b9e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ba2:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <_Z20Update_State_Machinev+0x368>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bb4:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <_Z20Update_State_Machinev+0x36c>)
 8002bb6:	edc3 7a00 	vstr	s15, [r3]
				fcb_IK(pos_x, pos_y, 0, 0);
 8002bba:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <_Z20Update_State_Machinev+0x360>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <_Z20Update_State_Machinev+0x36c>)
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	eddf 1a70 	vldr	s3, [pc, #448]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002bca:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002bce:	eef0 0a47 	vmov.f32	s1, s14
 8002bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd6:	f7ff fe0d 	bl	80027f4 <_Z6fcb_IKffff>
				Max_Time = 5;
 8002bda:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002bdc:	4a6c      	ldr	r2, [pc, #432]	; (8002d90 <_Z20Update_State_Machinev+0x378>)
 8002bde:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002be0:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	4b6b      	ldr	r3, [pc, #428]	; (8002d94 <_Z20Update_State_Machinev+0x37c>)
 8002be8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <_Z20Update_State_Machinev+0x380>)
 8002bee:	edd3 6a00 	vldr	s13, [r3]
 8002bf2:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002bf6:	eddf 2a64 	vldr	s5, [pc, #400]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002bfa:	ed9f 2a63 	vldr	s4, [pc, #396]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002bfe:	eddf 1a62 	vldr	s3, [pc, #392]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c02:	eeb0 1a66 	vmov.f32	s2, s13
 8002c06:	eef0 0a47 	vmov.f32	s1, s14
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	4861      	ldr	r0, [pc, #388]	; (8002d94 <_Z20Update_State_Machinev+0x37c>)
 8002c10:	f7fe f84c 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002c14:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	4b60      	ldr	r3, [pc, #384]	; (8002d9c <_Z20Update_State_Machinev+0x384>)
 8002c1c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c20:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <_Z20Update_State_Machinev+0x388>)
 8002c22:	edd3 6a00 	vldr	s13, [r3]
 8002c26:	ed9f 3a58 	vldr	s6, [pc, #352]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c2a:	eddf 2a57 	vldr	s5, [pc, #348]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c2e:	ed9f 2a56 	vldr	s4, [pc, #344]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c32:	eddf 1a55 	vldr	s3, [pc, #340]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c36:	eeb0 1a66 	vmov.f32	s2, s13
 8002c3a:	eef0 0a47 	vmov.f32	s1, s14
 8002c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c42:	4856      	ldr	r0, [pc, #344]	; (8002d9c <_Z20Update_State_Machinev+0x384>)
 8002c44:	f7fe f832 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <_Z20Update_State_Machinev+0x38c>)
 8002c50:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c54:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <_Z20Update_State_Machinev+0x390>)
 8002c56:	edd3 6a00 	vldr	s13, [r3]
 8002c5a:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c5e:	eddf 2a4a 	vldr	s5, [pc, #296]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c62:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c66:	eddf 1a48 	vldr	s3, [pc, #288]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002c6a:	eeb0 1a66 	vmov.f32	s2, s13
 8002c6e:	eef0 0a47 	vmov.f32	s1, s14
 8002c72:	eeb0 0a67 	vmov.f32	s0, s15
 8002c76:	484b      	ldr	r0, [pc, #300]	; (8002da4 <_Z20Update_State_Machinev+0x38c>)
 8002c78:	f7fe f818 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <_Z20Update_State_Machinev+0x394>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002c84:	484a      	ldr	r0, [pc, #296]	; (8002db0 <_Z20Update_State_Machinev+0x398>)
 8002c86:	f009 fdd5 	bl	800c834 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <_Z20Update_State_Machinev+0x340>)
 8002c8c:	2234      	movs	r2, #52	; 0x34
 8002c8e:	701a      	strb	r2, [r3, #0]
			}

//		Planning_q1
//		Planning_q3

		break;
 8002c90:	e1c8      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>
				control_state = 0;
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <_Z20Update_State_Machinev+0x340>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
		break;
 8002c98:	e1c4      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>

	case 42:
		Max_Time = 6;
 8002c9a:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002c9c:	4a45      	ldr	r2, [pc, #276]	; (8002db4 <_Z20Update_State_Machinev+0x39c>)
 8002c9e:	601a      	str	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, -10200.0, 0.0, 0.0, 0.0, 0.0);
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <_Z20Update_State_Machinev+0x3a0>)
 8002ca8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002cac:	ed9f 3a36 	vldr	s6, [pc, #216]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002cb0:	eddf 2a35 	vldr	s5, [pc, #212]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002cb4:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002cb8:	eddf 1a33 	vldr	s3, [pc, #204]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002cbc:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8002dbc <_Z20Update_State_Machinev+0x3a4>
 8002cc0:	eef0 0a47 	vmov.f32	s1, s14
 8002cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc8:	483b      	ldr	r0, [pc, #236]	; (8002db8 <_Z20Update_State_Machinev+0x3a0>)
 8002cca:	f7fd ffef 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <_Z20Update_State_Machinev+0x394>)
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002cd6:	4836      	ldr	r0, [pc, #216]	; (8002db0 <_Z20Update_State_Machinev+0x398>)
 8002cd8:	f009 fdac 	bl	800c834 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <_Z20Update_State_Machinev+0x340>)
 8002cde:	2236      	movs	r2, #54	; 0x36
 8002ce0:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <_Z20Update_State_Machinev+0x3a8>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
		break;
 8002ce8:	e19c      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>

	case 43:
		Max_Time = 6;
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002cec:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <_Z20Update_State_Machinev+0x39c>)
 8002cee:	601a      	str	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, -200.0, 0.0, 0.0, 0.0, 0.0);
 8002cf0:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <_Z20Update_State_Machinev+0x374>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <_Z20Update_State_Machinev+0x3a0>)
 8002cf8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002cfc:	ed9f 3a22 	vldr	s6, [pc, #136]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002d00:	eddf 2a21 	vldr	s5, [pc, #132]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002d04:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002d08:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8002d88 <_Z20Update_State_Machinev+0x370>
 8002d0c:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002dc4 <_Z20Update_State_Machinev+0x3ac>
 8002d10:	eef0 0a47 	vmov.f32	s1, s14
 8002d14:	eeb0 0a67 	vmov.f32	s0, s15
 8002d18:	4827      	ldr	r0, [pc, #156]	; (8002db8 <_Z20Update_State_Machinev+0x3a0>)
 8002d1a:	f7fd ffc7 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <_Z20Update_State_Machinev+0x394>)
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002d26:	4822      	ldr	r0, [pc, #136]	; (8002db0 <_Z20Update_State_Machinev+0x398>)
 8002d28:	f009 fd84 	bl	800c834 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <_Z20Update_State_Machinev+0x340>)
 8002d2e:	2238      	movs	r2, #56	; 0x38
 8002d30:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <_Z20Update_State_Machinev+0x3a8>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
		break;
 8002d38:	e174      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>
 8002d3a:	bf00      	nop
 8002d3c:	f3af 8000 	nop.w
 8002d40:	00000000 	.word	0x00000000
 8002d44:	408f4000 	.word	0x408f4000
 8002d48:	bc6a7efa 	.word	0xbc6a7efa
 8002d4c:	3fc49374 	.word	0x3fc49374
 8002d50:	e59f2baa 	.word	0xe59f2baa
 8002d54:	3f977079 	.word	0x3f977079
 8002d58:	24000bd0 	.word	0x24000bd0
 8002d5c:	24000bf4 	.word	0x24000bf4
 8002d60:	24000108 	.word	0x24000108
 8002d64:	24000bc8 	.word	0x24000bc8
 8002d68:	24000008 	.word	0x24000008
 8002d6c:	24000bcc 	.word	0x24000bcc
 8002d70:	24000bec 	.word	0x24000bec
 8002d74:	24000220 	.word	0x24000220
 8002d78:	24000bf8 	.word	0x24000bf8
 8002d7c:	24000224 	.word	0x24000224
 8002d80:	24000bf0 	.word	0x24000bf0
 8002d84:	24000bfc 	.word	0x24000bfc
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	24000ad4 	.word	0x24000ad4
 8002d90:	40a00000 	.word	0x40a00000
 8002d94:	24000558 	.word	0x24000558
 8002d98:	24000bdc 	.word	0x24000bdc
 8002d9c:	24000720 	.word	0x24000720
 8002da0:	24000be4 	.word	0x24000be4
 8002da4:	24000804 	.word	0x24000804
 8002da8:	24000be8 	.word	0x24000be8
 8002dac:	24000bd8 	.word	0x24000bd8
 8002db0:	24000f38 	.word	0x24000f38
 8002db4:	40c00000 	.word	0x40c00000
 8002db8:	2400063c 	.word	0x2400063c
 8002dbc:	c61f6000 	.word	0xc61f6000
 8002dc0:	24000ad0 	.word	0x24000ad0
 8002dc4:	c3480000 	.word	0xc3480000

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002dc8:	4899      	ldr	r0, [pc, #612]	; (8003030 <_Z20Update_State_Machinev+0x618>)
 8002dca:	f009 fdab 	bl	800c924 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8002dce:	4b99      	ldr	r3, [pc, #612]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002dd6:	4b98      	ldr	r3, [pc, #608]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002dde:	4b97      	ldr	r3, [pc, #604]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002de6:	4b93      	ldr	r3, [pc, #588]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002dfa:	4b8f      	ldr	r3, [pc, #572]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002e04:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8003040 <_Z20Update_State_Machinev+0x628>
 8002e08:	488e      	ldr	r0, [pc, #568]	; (8003044 <_Z20Update_State_Machinev+0x62c>)
 8002e0a:	f7ff fa5d 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002e0e:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8003040 <_Z20Update_State_Machinev+0x628>
 8002e12:	488d      	ldr	r0, [pc, #564]	; (8003048 <_Z20Update_State_Machinev+0x630>)
 8002e14:	f7ff fa58 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002e18:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8003040 <_Z20Update_State_Machinev+0x628>
 8002e1c:	488b      	ldr	r0, [pc, #556]	; (800304c <_Z20Update_State_Machinev+0x634>)
 8002e1e:	f7ff fa53 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.kalman_pos;
 8002e22:	4b84      	ldr	r3, [pc, #528]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e28:	4a82      	ldr	r2, [pc, #520]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e2a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.kalman_pos;
 8002e2e:	4b82      	ldr	r3, [pc, #520]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002e30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e34:	4a80      	ldr	r2, [pc, #512]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002e36:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.kalman_pos;
 8002e3a:	4b80      	ldr	r3, [pc, #512]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002e3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e40:	4a7e      	ldr	r2, [pc, #504]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002e42:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.C1 = 0;
 8002e46:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002e50:	4b7a      	ldr	r3, [pc, #488]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002e64:	4b75      	ldr	r3, [pc, #468]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002e6e:	4b71      	ldr	r3, [pc, #452]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002e78:	4b70      	ldr	r3, [pc, #448]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002e82:	4b6c      	ldr	r3, [pc, #432]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <_Z20Update_State_Machinev+0x61c>)
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <_Z20Update_State_Machinev+0x624>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8002eb4:	4b60      	ldr	r3, [pc, #384]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8002ebe:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8002ec8:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <_Z20Update_State_Machinev+0x620>)
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8002edc:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <_Z20Update_State_Machinev+0x638>)
 8002ede:	222a      	movs	r2, #42	; 0x2a
 8002ee0:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <_Z20Update_State_Machinev+0x63c>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
		break;
 8002ee8:	e09c      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>

//		State_FIN = true;
		break;

	case 54:
		fcb_joint2.Goal_Velocity = 0;
 8002eea:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002ef2:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003040 <_Z20Update_State_Machinev+0x628>
 8002ef6:	4859      	ldr	r0, [pc, #356]	; (800305c <_Z20Update_State_Machinev+0x644>)
 8002ef8:	f7ff f9e6 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002efc:	4b56      	ldr	r3, [pc, #344]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	4a55      	ldr	r2, [pc, #340]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f02:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f06:	484a      	ldr	r0, [pc, #296]	; (8003030 <_Z20Update_State_Machinev+0x618>)
 8002f08:	f009 fd0c 	bl	800c924 <HAL_TIM_Base_Stop_IT>
		if (Gripper_State[first-1] == 1)
 8002f0c:	4b54      	ldr	r3, [pc, #336]	; (8003060 <_Z20Update_State_Machinev+0x648>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	4a54      	ldr	r2, [pc, #336]	; (8003064 <_Z20Update_State_Machinev+0x64c>)
 8002f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <_Z20Update_State_Machinev+0x516>
		{
			gripper.GripperClose();
 8002f26:	4850      	ldr	r0, [pc, #320]	; (8003068 <_Z20Update_State_Machinev+0x650>)
 8002f28:	f7fe fe64 	bl	8001bf4 <_ZN10ServoMotor12GripperCloseEv>
 8002f2c:	e00f      	b.n	8002f4e <_Z20Update_State_Machinev+0x536>
		}
		else if (Gripper_State[first-1] == 2)
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <_Z20Update_State_Machinev+0x648>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <_Z20Update_State_Machinev+0x64c>)
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <_Z20Update_State_Machinev+0x536>
		{
			gripper.GripperOpen();
 8002f48:	4847      	ldr	r0, [pc, #284]	; (8003068 <_Z20Update_State_Machinev+0x650>)
 8002f4a:	f7fe fe69 	bl	8001c20 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8002f4e:	4b42      	ldr	r3, [pc, #264]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8002f58:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8002f6c:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8002f80:	4b35      	ldr	r3, [pc, #212]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <_Z20Update_State_Machinev+0x638>)
 8002f94:	222b      	movs	r2, #43	; 0x2b
 8002f96:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <_Z20Update_State_Machinev+0x63c>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
		break;
 8002f9e:	e041      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002fa8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003040 <_Z20Update_State_Machinev+0x628>
 8002fac:	482b      	ldr	r0, [pc, #172]	; (800305c <_Z20Update_State_Machinev+0x644>)
 8002fae:	f7ff f98b 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a28      	ldr	r2, [pc, #160]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fb8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		HAL_TIM_Base_Stop_IT(&htim14);
 8002fbc:	481c      	ldr	r0, [pc, #112]	; (8003030 <_Z20Update_State_Machinev+0x618>)
 8002fbe:	f009 fcb1 	bl	800c924 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C0 = 0;
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <_Z20Update_State_Machinev+0x638>)
 8003008:	2229      	movs	r2, #41	; 0x29
 800300a:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <_Z20Update_State_Machinev+0x63c>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
		break;
 8003012:	e007      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>

	default:
		control_state = 0;
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <_Z20Update_State_Machinev+0x638>)
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <_Z20Update_State_Machinev+0x63c>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
		break;
 8003020:	e000      	b.n	8003024 <_Z20Update_State_Machinev+0x60c>
		break;
 8003022:	bf00      	nop
    }
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	ecbd 8b02 	vpop	{d8}
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	24000f38 	.word	0x24000f38
 8003034:	24000558 	.word	0x24000558
 8003038:	24000804 	.word	0x24000804
 800303c:	24000720 	.word	0x24000720
 8003040:	00000000 	.word	0x00000000
 8003044:	240004b8 	.word	0x240004b8
 8003048:	24000530 	.word	0x24000530
 800304c:	24000508 	.word	0x24000508
 8003050:	24000bd0 	.word	0x24000bd0
 8003054:	24000ad0 	.word	0x24000ad0
 8003058:	2400063c 	.word	0x2400063c
 800305c:	240004e0 	.word	0x240004e0
 8003060:	24000000 	.word	0x24000000
 8003064:	24000b78 	.word	0x24000b78
 8003068:	24000ab0 	.word	0x24000ab0

0800306c <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a8f      	ldr	r2, [pc, #572]	; (80032b8 <HAL_UARTEx_RxEventCallback+0x24c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f040 8188 	bne.w	8003392 <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8003082:	4a8e      	ldr	r2, [pc, #568]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003084:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <HAL_UARTEx_RxEventCallback+0x254>)
 8003086:	4614      	mov	r4, r2
 8003088:	461d      	mov	r5, r3
 800308a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308e:	682b      	ldr	r3, [r5, #0]
 8003090:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8003092:	2214      	movs	r2, #20
 8003094:	2100      	movs	r1, #0
 8003096:	488a      	ldr	r0, [pc, #552]	; (80032c0 <HAL_UARTEx_RxEventCallback+0x254>)
 8003098:	f00e fb62 	bl	8011760 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	f240 8166 	bls.w	8003370 <HAL_UARTEx_RxEventCallback+0x304>
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	2b14      	cmp	r3, #20
 80030a8:	f200 8162 	bhi.w	8003370 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	3b02      	subs	r3, #2
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80030b4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80030b6:	4b83      	ldr	r3, [pc, #524]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	497f      	ldr	r1, [pc, #508]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80030c0:	4881      	ldr	r0, [pc, #516]	; (80032c8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80030c2:	f003 fd29 	bl	8006b18 <HAL_CRC_Calculate>
 80030c6:	4603      	mov	r3, r0
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b80      	ldr	r3, [pc, #512]	; (80032cc <HAL_UARTEx_RxEventCallback+0x260>)
 80030cc:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80030ce:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b79      	ldr	r3, [pc, #484]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 80030dc:	b21a      	sxth	r2, r3
 80030de:	4b79      	ldr	r3, [pc, #484]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	4975      	ldr	r1, [pc, #468]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80030f2:	4b77      	ldr	r3, [pc, #476]	; (80032d0 <HAL_UARTEx_RxEventCallback+0x264>)
 80030f4:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80030f6:	4b75      	ldr	r3, [pc, #468]	; (80032cc <HAL_UARTEx_RxEventCallback+0x260>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <HAL_UARTEx_RxEventCallback+0x264>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	429a      	cmp	r2, r3
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8151 	beq.w	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003112:	2201      	movs	r2, #1
 8003114:	2102      	movs	r1, #2
 8003116:	486f      	ldr	r0, [pc, #444]	; (80032d4 <HAL_UARTEx_RxEventCallback+0x268>)
 8003118:	f006 fe84 	bl	8009e24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003122:	486d      	ldr	r0, [pc, #436]	; (80032d8 <HAL_UARTEx_RxEventCallback+0x26c>)
 8003124:	f006 fe7e 	bl	8009e24 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003128:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b61      	cmp	r3, #97	; 0x61
 800312e:	d106      	bne.n	800313e <HAL_UARTEx_RxEventCallback+0xd2>
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b05      	cmp	r3, #5
 8003138:	d101      	bne.n	800313e <HAL_UARTEx_RxEventCallback+0xd2>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_UARTEx_RxEventCallback+0xd4>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d014      	beq.n	800316e <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003144:	4b5d      	ldr	r3, [pc, #372]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	b25a      	sxtb	r2, r3
 800314a:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_UARTEx_RxEventCallback+0x270>)
 800314c:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800314e:	4b5b      	ldr	r3, [pc, #364]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003150:	789b      	ldrb	r3, [r3, #2]
 8003152:	b25a      	sxtb	r2, r3
 8003154:	4b62      	ldr	r3, [pc, #392]	; (80032e0 <HAL_UARTEx_RxEventCallback+0x274>)
 8003156:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003158:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	b25a      	sxtb	r2, r3
 800315e:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <HAL_UARTEx_RxEventCallback+0x278>)
 8003160:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003164:	791b      	ldrb	r3, [r3, #4]
 8003166:	b25a      	sxtb	r2, r3
 8003168:	4b5f      	ldr	r3, [pc, #380]	; (80032e8 <HAL_UARTEx_RxEventCallback+0x27c>)
 800316a:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 800316c:	e122      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 800316e:	4b53      	ldr	r3, [pc, #332]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b71      	cmp	r3, #113	; 0x71
 8003174:	d106      	bne.n	8003184 <HAL_UARTEx_RxEventCallback+0x118>
 8003176:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b05      	cmp	r3, #5
 800317e:	d101      	bne.n	8003184 <HAL_UARTEx_RxEventCallback+0x118>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_UARTEx_RxEventCallback+0x11a>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d014      	beq.n	80031b4 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 800318a:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	b25a      	sxtb	r2, r3
 8003190:	4b56      	ldr	r3, [pc, #344]	; (80032ec <HAL_UARTEx_RxEventCallback+0x280>)
 8003192:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8003194:	4b49      	ldr	r3, [pc, #292]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	b25a      	sxtb	r2, r3
 800319a:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <HAL_UARTEx_RxEventCallback+0x284>)
 800319c:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80031a0:	78db      	ldrb	r3, [r3, #3]
 80031a2:	b25a      	sxtb	r2, r3
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_UARTEx_RxEventCallback+0x288>)
 80031a6:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80031a8:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	b25a      	sxtb	r2, r3
 80031ae:	4b52      	ldr	r3, [pc, #328]	; (80032f8 <HAL_UARTEx_RxEventCallback+0x28c>)
 80031b0:	701a      	strb	r2, [r3, #0]
			}
 80031b2:	e0ff      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 80031b4:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b85      	cmp	r3, #133	; 0x85
 80031ba:	d106      	bne.n	80031ca <HAL_UARTEx_RxEventCallback+0x15e>
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d101      	bne.n	80031ca <HAL_UARTEx_RxEventCallback+0x15e>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_UARTEx_RxEventCallback+0x160>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80031d0:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_UARTEx_RxEventCallback+0x290>)
 80031d2:	2233      	movs	r2, #51	; 0x33
 80031d4:	701a      	strb	r2, [r3, #0]
			}
 80031d6:	e0ed      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 80031d8:	4b38      	ldr	r3, [pc, #224]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b86      	cmp	r3, #134	; 0x86
 80031de:	d106      	bne.n	80031ee <HAL_UARTEx_RxEventCallback+0x182>
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d101      	bne.n	80031ee <HAL_UARTEx_RxEventCallback+0x182>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_UARTEx_RxEventCallback+0x184>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80031fc:	789b      	ldrb	r3, [r3, #2]
 80031fe:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	6938      	ldr	r0, [r7, #16]
 8003204:	f7ff fa64 	bl	80026d0 <_Z12Insert_queueii>
			}
 8003208:	e0d4      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 800320a:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b87      	cmp	r3, #135	; 0x87
 8003210:	d106      	bne.n	8003220 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d101      	bne.n	8003220 <HAL_UARTEx_RxEventCallback+0x1b4>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_UARTEx_RxEventCallback+0x1b6>
 8003220:	2300      	movs	r3, #0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 800322c:	4a33      	ldr	r2, [pc, #204]	; (80032fc <HAL_UARTEx_RxEventCallback+0x290>)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 8003232:	f7ff fbf1 	bl	8002a18 <_Z20Update_State_Machinev>
			}
 8003236:	e0bd      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2)
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b89      	cmp	r3, #137	; 0x89
 800323e:	d106      	bne.n	800324e <HAL_UARTEx_RxEventCallback+0x1e2>
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d101      	bne.n	800324e <HAL_UARTEx_RxEventCallback+0x1e2>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_UARTEx_RxEventCallback+0x1e4>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003254:	f7ff fbe0 	bl	8002a18 <_Z20Update_State_Machinev>
			}
 8003258:	e0ac      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b81      	cmp	r3, #129	; 0x81
 8003260:	d106      	bne.n	8003270 <HAL_UARTEx_RxEventCallback+0x204>
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d101      	bne.n	8003270 <HAL_UARTEx_RxEventCallback+0x204>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_UARTEx_RxEventCallback+0x206>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	461a      	mov	r2, r3
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_UARTEx_RxEventCallback+0x294>)
 800327e:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 8003280:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <HAL_UARTEx_RxEventCallback+0x294>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 8003292:	481c      	ldr	r0, [pc, #112]	; (8003304 <HAL_UARTEx_RxEventCallback+0x298>)
 8003294:	f7fe fcc4 	bl	8001c20 <_ZN10ServoMotor11GripperOpenEv>
			}
 8003298:	e08c      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 800329a:	481a      	ldr	r0, [pc, #104]	; (8003304 <HAL_UARTEx_RxEventCallback+0x298>)
 800329c:	f7fe fcaa 	bl	8001bf4 <_ZN10ServoMotor12GripperCloseEv>
			}
 80032a0:	e088      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_UARTEx_RxEventCallback+0x250>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b91      	cmp	r3, #145	; 0x91
 80032a8:	d12e      	bne.n	8003308 <HAL_UARTEx_RxEventCallback+0x29c>
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x258>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d129      	bne.n	8003308 <HAL_UARTEx_RxEventCallback+0x29c>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e028      	b.n	800330a <HAL_UARTEx_RxEventCallback+0x29e>
 80032b8:	24001218 	.word	0x24001218
 80032bc:	24000af8 	.word	0x24000af8
 80032c0:	24000b0c 	.word	0x24000b0c
 80032c4:	24000b20 	.word	0x24000b20
 80032c8:	24000424 	.word	0x24000424
 80032cc:	24000af0 	.word	0x24000af0
 80032d0:	24000af2 	.word	0x24000af2
 80032d4:	58021000 	.word	0x58021000
 80032d8:	58020400 	.word	0x58020400
 80032dc:	24000ad8 	.word	0x24000ad8
 80032e0:	24000ad9 	.word	0x24000ad9
 80032e4:	24000ada 	.word	0x24000ada
 80032e8:	24000adb 	.word	0x24000adb
 80032ec:	24000adc 	.word	0x24000adc
 80032f0:	24000add 	.word	0x24000add
 80032f4:	24000ade 	.word	0x24000ade
 80032f8:	24000adf 	.word	0x24000adf
 80032fc:	24000bd0 	.word	0x24000bd0
 8003300:	24000af4 	.word	0x24000af4
 8003304:	24000ab0 	.word	0x24000ab0
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d052      	beq.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	4a5d      	ldr	r2, [pc, #372]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 8003316:	7892      	ldrb	r2, [r2, #2]
 8003318:	4313      	orrs	r3, r2
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003322:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <HAL_UARTEx_RxEventCallback+0x424>)
 8003324:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8003328:	4b58      	ldr	r3, [pc, #352]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 800332a:	78db      	ldrb	r3, [r3, #3]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4a57      	ldr	r2, [pc, #348]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 8003330:	7912      	ldrb	r2, [r2, #4]
 8003332:	4313      	orrs	r3, r2
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800333c:	4b55      	ldr	r3, [pc, #340]	; (8003494 <HAL_UARTEx_RxEventCallback+0x428>)
 800333e:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8003342:	4b52      	ldr	r3, [pc, #328]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 8003344:	795b      	ldrb	r3, [r3, #5]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	4a50      	ldr	r2, [pc, #320]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 800334a:	7992      	ldrb	r2, [r2, #6]
 800334c:	4313      	orrs	r3, r2
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003356:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_UARTEx_RxEventCallback+0x42c>)
 8003358:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_UARTEx_RxEventCallback+0x420>)
 800335e:	79db      	ldrb	r3, [r3, #7]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_UARTEx_RxEventCallback+0x430>)
 800336a:	edc3 7a00 	vstr	s15, [r3]
			}
 800336e:	e021      	b.n	80033b4 <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003370:	2200      	movs	r2, #0
 8003372:	2102      	movs	r1, #2
 8003374:	484a      	ldr	r0, [pc, #296]	; (80034a0 <HAL_UARTEx_RxEventCallback+0x434>)
 8003376:	f006 fd55 	bl	8009e24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800337a:	2201      	movs	r2, #1
 800337c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003380:	4848      	ldr	r0, [pc, #288]	; (80034a4 <HAL_UARTEx_RxEventCallback+0x438>)
 8003382:	f006 fd4f 	bl	8009e24 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8003386:	220c      	movs	r2, #12
 8003388:	4947      	ldr	r1, [pc, #284]	; (80034a8 <HAL_UARTEx_RxEventCallback+0x43c>)
 800338a:	4848      	ldr	r0, [pc, #288]	; (80034ac <HAL_UARTEx_RxEventCallback+0x440>)
 800338c:	f00a fed4 	bl	800e138 <HAL_UART_Transmit_DMA>
 8003390:	e011      	b.n	80033b6 <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003392:	2200      	movs	r2, #0
 8003394:	2102      	movs	r1, #2
 8003396:	4842      	ldr	r0, [pc, #264]	; (80034a0 <HAL_UARTEx_RxEventCallback+0x434>)
 8003398:	f006 fd44 	bl	8009e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800339c:	2201      	movs	r2, #1
 800339e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033a2:	4840      	ldr	r0, [pc, #256]	; (80034a4 <HAL_UARTEx_RxEventCallback+0x438>)
 80033a4:	f006 fd3e 	bl	8009e24 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80033a8:	2215      	movs	r2, #21
 80033aa:	4941      	ldr	r1, [pc, #260]	; (80034b0 <HAL_UARTEx_RxEventCallback+0x444>)
 80033ac:	483f      	ldr	r0, [pc, #252]	; (80034ac <HAL_UARTEx_RxEventCallback+0x440>)
 80033ae:	f00a fec3 	bl	800e138 <HAL_UART_Transmit_DMA>
 80033b2:	e000      	b.n	80033b6 <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80033b4:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80033b6:	2214      	movs	r2, #20
 80033b8:	493e      	ldr	r1, [pc, #248]	; (80034b4 <HAL_UARTEx_RxEventCallback+0x448>)
 80033ba:	483c      	ldr	r0, [pc, #240]	; (80034ac <HAL_UARTEx_RxEventCallback+0x440>)
 80033bc:	f00c fe21 	bl	8010002 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80033c0:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <HAL_UARTEx_RxEventCallback+0x450>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04a      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033ca:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3c      	ldr	r2, [pc, #240]	; (80034c0 <HAL_UARTEx_RxEventCallback+0x454>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d045      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033d4:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_UARTEx_RxEventCallback+0x458>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033de:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <HAL_UARTEx_RxEventCallback+0x45c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033e8:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a37      	ldr	r2, [pc, #220]	; (80034cc <HAL_UARTEx_RxEventCallback+0x460>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d036      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a36      	ldr	r2, [pc, #216]	; (80034d0 <HAL_UARTEx_RxEventCallback+0x464>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d031      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <HAL_UARTEx_RxEventCallback+0x468>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a33      	ldr	r2, [pc, #204]	; (80034d8 <HAL_UARTEx_RxEventCallback+0x46c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d027      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a31      	ldr	r2, [pc, #196]	; (80034dc <HAL_UARTEx_RxEventCallback+0x470>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 800341a:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x474>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01d      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2e      	ldr	r2, [pc, #184]	; (80034e4 <HAL_UARTEx_RxEventCallback+0x478>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x47c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003438:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_UARTEx_RxEventCallback+0x480>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003442:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <HAL_UARTEx_RxEventCallback+0x484>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x488>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_UARTEx_RxEventCallback+0x48c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <HAL_UARTEx_RxEventCallback+0x406>
 8003460:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0208 	bic.w	r2, r2, #8
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e008      	b.n	8003484 <HAL_UARTEx_RxEventCallback+0x418>
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0204 	bic.w	r2, r2, #4
 8003480:	601a      	str	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bdb0      	pop	{r4, r5, r7, pc}
 800348c:	24000af8 	.word	0x24000af8
 8003490:	24000ae0 	.word	0x24000ae0
 8003494:	24000ae4 	.word	0x24000ae4
 8003498:	24000ae8 	.word	0x24000ae8
 800349c:	24000aec 	.word	0x24000aec
 80034a0:	58021000 	.word	0x58021000
 80034a4:	58020400 	.word	0x58020400
 80034a8:	0801417c 	.word	0x0801417c
 80034ac:	24001218 	.word	0x24001218
 80034b0:	0801418c 	.word	0x0801418c
 80034b4:	24000b0c 	.word	0x24000b0c
 80034b8:	24001500 	.word	0x24001500
 80034bc:	40020010 	.word	0x40020010
 80034c0:	40020028 	.word	0x40020028
 80034c4:	40020040 	.word	0x40020040
 80034c8:	40020058 	.word	0x40020058
 80034cc:	40020070 	.word	0x40020070
 80034d0:	40020088 	.word	0x40020088
 80034d4:	400200a0 	.word	0x400200a0
 80034d8:	400200b8 	.word	0x400200b8
 80034dc:	40020410 	.word	0x40020410
 80034e0:	40020428 	.word	0x40020428
 80034e4:	40020440 	.word	0x40020440
 80034e8:	40020458 	.word	0x40020458
 80034ec:	40020470 	.word	0x40020470
 80034f0:	40020488 	.word	0x40020488
 80034f4:	400204a0 	.word	0x400204a0
 80034f8:	400204b8 	.word	0x400204b8
 80034fc:	00000000 	.word	0x00000000

08003500 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4ac5      	ldr	r2, [pc, #788]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800350c:	4293      	cmp	r3, r2
 800350e:	f040 80bc 	bne.w	800368a <HAL_TIM_PeriodElapsedCallback+0x18a>
		encoderJ1.AMT21_Read();
 8003512:	48c4      	ldr	r0, [pc, #784]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003514:	f7fd f8dd 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003518:	48c2      	ldr	r0, [pc, #776]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800351a:	f7fd f909 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	4bc1      	ldr	r3, [pc, #772]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003524:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003526:	4bc0      	ldr	r3, [pc, #768]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d110      	bne.n	8003550 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 800352e:	48bd      	ldr	r0, [pc, #756]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003530:	f7fd f964 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003534:	4603      	mov	r3, r0
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800353e:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003546:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800354a:	4bb8      	ldr	r3, [pc, #736]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800354c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003550:	48b7      	ldr	r0, [pc, #732]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003552:	f7fd f8be 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003556:	48b6      	ldr	r0, [pc, #728]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003558:	f7fd f8ea 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	4bb4      	ldr	r3, [pc, #720]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003562:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 8003564:	4bb3      	ldr	r3, [pc, #716]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d112      	bne.n	8003592 <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 800356c:	48b0      	ldr	r0, [pc, #704]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800356e:	f7fd f967 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 8003572:	48af      	ldr	r0, [pc, #700]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003574:	f7fd f9c3 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003578:	ee07 0a90 	vmov	s15, r0
 800357c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003580:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003584:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003588:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800358c:	4baa      	ldr	r3, [pc, #680]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800358e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 8003592:	48aa      	ldr	r0, [pc, #680]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003594:	f7fd f89d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003598:	48a8      	ldr	r0, [pc, #672]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800359a:	f7fd f8c9 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4ba7      	ldr	r3, [pc, #668]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80035a4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80035a6:	4ba6      	ldr	r3, [pc, #664]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d110      	bne.n	80035d0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80035ae:	48a3      	ldr	r0, [pc, #652]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80035b0:	f7fd f924 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80035b4:	4603      	mov	r3, r0
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035be:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 80035c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035ca:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80035cc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80035d0:	489d      	ldr	r0, [pc, #628]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80035d2:	f7fd f87e 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80035d6:	489c      	ldr	r0, [pc, #624]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80035d8:	f7fd f8aa 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	4b9a      	ldr	r3, [pc, #616]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80035e2:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80035e4:	4b99      	ldr	r3, [pc, #612]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d110      	bne.n	800360e <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 80035ec:	4896      	ldr	r0, [pc, #600]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80035ee:	f7fd f905 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80035f2:	4603      	mov	r3, r0
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035fc:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003600:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003604:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003608:	4b91      	ldr	r3, [pc, #580]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800360a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx, dy, dz, 0.0);
 800360e:	4b87      	ldr	r3, [pc, #540]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003610:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003614:	4b8b      	ldr	r3, [pc, #556]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003616:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800361a:	4b8e      	ldr	r3, [pc, #568]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b25b      	sxtb	r3, r3
 8003620:	ee06 3a90 	vmov	s13, r3
 8003624:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003628:	4b8b      	ldr	r3, [pc, #556]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b25b      	sxtb	r3, r3
 800362e:	ee06 3a10 	vmov	s12, r3
 8003632:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003636:	4b89      	ldr	r3, [pc, #548]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b25b      	sxtb	r3, r3
 800363c:	ee05 3a90 	vmov	s11, r3
 8003640:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003644:	eddf 3a86 	vldr	s7, [pc, #536]	; 8003860 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003648:	eeb0 3a65 	vmov.f32	s6, s11
 800364c:	eef0 2a46 	vmov.f32	s5, s12
 8003650:	eeb0 2a66 	vmov.f32	s4, s13
 8003654:	eddf 1a82 	vldr	s3, [pc, #520]	; 8003860 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003658:	eeb0 1a47 	vmov.f32	s2, s14
 800365c:	eddf 0a80 	vldr	s1, [pc, #512]	; 8003860 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003660:	eeb0 0a67 	vmov.f32	s0, s15
 8003664:	487f      	ldr	r0, [pc, #508]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003666:	f7fd f9f7 	bl	8000a58 <_ZN10RobotJoint9UpdateIVKEffffffff>

			stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 800366a:	4b7e      	ldr	r3, [pc, #504]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800366c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003670:	eeb0 0a67 	vmov.f32	s0, s15
 8003674:	487c      	ldr	r0, [pc, #496]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003676:	f7fe fe27 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
			stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 800367a:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800367c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003680:	eeb0 0a67 	vmov.f32	s0, s15
 8003684:	4879      	ldr	r0, [pc, #484]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003686:	f7fe fe1f 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a78      	ldr	r2, [pc, #480]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f040 808f 	bne.w	80037b2 <HAL_TIM_PeriodElapsedCallback+0x2b2>
	{
		encoderJ1.AMT21_Read();
 8003694:	4863      	ldr	r0, [pc, #396]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003696:	f7fd f81c 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800369a:	4862      	ldr	r0, [pc, #392]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800369c:	f7fd f848 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b60      	ldr	r3, [pc, #384]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80036a6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80036a8:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d110      	bne.n	80036d2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 80036b0:	485c      	ldr	r0, [pc, #368]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80036b2:	f7fd f8a3 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80036b6:	4603      	mov	r3, r0
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036c0:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 80036c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036cc:	4b57      	ldr	r3, [pc, #348]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80036ce:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 80036d2:	4857      	ldr	r0, [pc, #348]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036d4:	f7fc fffd 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80036d8:	4855      	ldr	r0, [pc, #340]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036da:	f7fd f829 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b54      	ldr	r3, [pc, #336]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80036e4:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 80036e6:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d112      	bne.n	8003714 <HAL_TIM_PeriodElapsedCallback+0x214>
			encoderJ2.unwarp();
 80036ee:	4850      	ldr	r0, [pc, #320]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036f0:	f7fd f8a6 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 80036f4:	484e      	ldr	r0, [pc, #312]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036f6:	f7fd f902 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 80036fa:	ee07 0a90 	vmov	s15, r0
 80036fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003702:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003706:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800370a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800370e:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003710:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 8003714:	4849      	ldr	r0, [pc, #292]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003716:	f7fc ffdc 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800371a:	4848      	ldr	r0, [pc, #288]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800371c:	f7fd f808 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003726:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d110      	bne.n	8003752 <HAL_TIM_PeriodElapsedCallback+0x252>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 8003730:	4842      	ldr	r0, [pc, #264]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003732:	f7fd f863 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003736:	4603      	mov	r3, r0
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003740:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003744:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003748:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800374e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003752:	483d      	ldr	r0, [pc, #244]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003754:	f7fc ffbd 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003758:	483b      	ldr	r0, [pc, #236]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800375a:	f7fc ffe9 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003764:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003766:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d110      	bne.n	8003790 <HAL_TIM_PeriodElapsedCallback+0x290>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 800376e:	4836      	ldr	r0, [pc, #216]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003770:	f7fd f844 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003774:	4603      	mov	r3, r0
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800377e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8003818 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003782:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800378c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		if (State_FIN)
 8003790:	4b38      	ldr	r3, [pc, #224]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_TIM_PeriodElapsedCallback+0x2b2>
		 {
			Balloon++;
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	4a35      	ldr	r2, [pc, #212]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80037a2:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 80037a4:	f7ff f938 	bl	8002a18 <_Z20Update_State_Machinev>
			Update_State_Machine();
 80037a8:	f7ff f936 	bl	8002a18 <_Z20Update_State_Machinev>
			State_FIN = false;
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
		 }

	}

	if (htim == &htim14) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a31      	ldr	r2, [pc, #196]	; (800387c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f040 8486 	bne.w	80040c8 <HAL_TIM_PeriodElapsedCallback+0xbc8>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 80037bc:	4b30      	ldr	r3, [pc, #192]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 80037d0:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037d2:	ed93 7a00 	vldr	s14, [r3]
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037f0:	ed93 7a00 	vldr	s14, [r3]
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003800:	edd3 7a00 	vldr	s15, [r3]
 8003804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	e037      	b.n	8003884 <HAL_TIM_PeriodElapsedCallback+0x384>
 8003814:	f3af 8000 	nop.w
 8003818:	645a1cac 	.word	0x645a1cac
 800381c:	4004df3b 	.word	0x4004df3b
 8003820:	24000dbc 	.word	0x24000dbc
 8003824:	24000448 	.word	0x24000448
 8003828:	24000acc 	.word	0x24000acc
 800382c:	24000558 	.word	0x24000558
 8003830:	24000464 	.word	0x24000464
 8003834:	24000acd 	.word	0x24000acd
 8003838:	2400063c 	.word	0x2400063c
 800383c:	24000480 	.word	0x24000480
 8003840:	24000ace 	.word	0x24000ace
 8003844:	24000720 	.word	0x24000720
 8003848:	2400049c 	.word	0x2400049c
 800384c:	24000acf 	.word	0x24000acf
 8003850:	24000804 	.word	0x24000804
 8003854:	24000adc 	.word	0x24000adc
 8003858:	24000add 	.word	0x24000add
 800385c:	24000ade 	.word	0x24000ade
 8003860:	00000000 	.word	0x00000000
 8003864:	240009cc 	.word	0x240009cc
 8003868:	240004b8 	.word	0x240004b8
 800386c:	24000508 	.word	0x24000508
 8003870:	24000fd0 	.word	0x24000fd0
 8003874:	24000ad0 	.word	0x24000ad0
 8003878:	24000bd4 	.word	0x24000bd4
 800387c:	24000f38 	.word	0x24000f38
 8003880:	24000bd8 	.word	0x24000bd8
 8003884:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003888:	4be1      	ldr	r3, [pc, #900]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	4be0      	ldr	r3, [pc, #896]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003898:	4bdd      	ldr	r3, [pc, #884]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038a2:	4bdb      	ldr	r3, [pc, #876]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ac:	4bd8      	ldr	r3, [pc, #864]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a06 	vstr	s15, [r7, #24]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 80038ba:	4bd6      	ldr	r3, [pc, #856]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 80038bc:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80038c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038c4:	4bd3      	ldr	r3, [pc, #844]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 80038c6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80038ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ce:	ee37 5b07 	vadd.f64	d5, d7, d7
 80038d2:	4bcf      	ldr	r3, [pc, #828]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80038e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038e4:	4bcb      	ldr	r3, [pc, #812]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 80038e6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80038ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ee:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80038f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80038f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003902:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003906:	4bc3      	ldr	r3, [pc, #780]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003908:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800390c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003910:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003914:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003918:	edd7 7a08 	vldr	s15, [r7, #32]
 800391c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003920:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003924:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003928:	4bba      	ldr	r3, [pc, #744]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800392a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800392e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003932:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003936:	ee27 5b05 	vmul.f64	d5, d7, d5
 800393a:	edd7 7a07 	vldr	s15, [r7, #28]
 800393e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003942:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003946:	ee36 7b07 	vadd.f64	d7, d6, d7
 800394a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800394e:	4bb1      	ldr	r3, [pc, #708]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003950:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 8003954:	4baf      	ldr	r3, [pc, #700]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003956:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 800395a:	4bae      	ldr	r3, [pc, #696]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800395c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003960:	4bab      	ldr	r3, [pc, #684]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800396e:	4ba9      	ldr	r3, [pc, #676]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003970:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003974:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003980:	4ba4      	ldr	r3, [pc, #656]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003982:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003986:	edd7 7a08 	vldr	s15, [r7, #32]
 800398a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800398e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003992:	4ba0      	ldr	r3, [pc, #640]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003994:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003998:	edd7 7a07 	vldr	s15, [r7, #28]
 800399c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a4:	4b9b      	ldr	r3, [pc, #620]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 80039a6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80039aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80039ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b6:	4b97      	ldr	r3, [pc, #604]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x714>)
 80039b8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0*fcb_joint2.C2*t) + (3.0*fcb_joint2.C3*t2) + (4.0*fcb_joint2.C4*t3) + (5.0*fcb_joint2.C5*t4);
 80039bc:	4b96      	ldr	r3, [pc, #600]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 80039be:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80039c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039c6:	4b94      	ldr	r3, [pc, #592]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 80039c8:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80039cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039d0:	ee37 5b07 	vadd.f64	d5, d7, d7
 80039d4:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039e6:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 80039e8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80039ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039f0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80039f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a08:	4b83      	ldr	r3, [pc, #524]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a0a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003a0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a12:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003a16:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a26:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a2a:	4b7b      	ldr	r3, [pc, #492]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a2c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a34:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003a38:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a50:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a52:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1*t) + (fcb_joint2.C2*t2) + (fcb_joint2.C3*t3) + (fcb_joint2.C4*t4) + (fcb_joint2.C5*t5));
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a58:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003a5c:	4b6e      	ldr	r3, [pc, #440]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a5e:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003a62:	4b6b      	ldr	r3, [pc, #428]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a64:	edd3 7a00 	vldr	s15, [r3]
 8003a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a72:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003a76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a82:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a84:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003a88:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a94:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a96:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003a9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003aa8:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003aac:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab8:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003aba:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003ac0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003ac4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ac8:	4b54      	ldr	r3, [pc, #336]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003aca:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003ad6:	4b4e      	ldr	r3, [pc, #312]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ae4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ae8:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003aea:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003af2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003af6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003afa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003afe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b0a:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b0c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b14:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003b18:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b2e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b36:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003b3a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b46:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b54:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8003b58:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b5a:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b60:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003b64:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b74:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b86:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003b8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b98:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003b9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003baa:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003bae:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003bbc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0*fcb_joint4.C2*t) + (3.0*fcb_joint4.C3*t2) + (4.0*fcb_joint4.C4*t3) + (5.0*fcb_joint4.C5*t4);
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003bc2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003bc6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003bcc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bd4:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003be2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003be6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003bec:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003bf8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c0c:	e00a      	b.n	8003c24 <HAL_TIM_PeriodElapsedCallback+0x724>
 8003c0e:	bf00      	nop
 8003c10:	24000bd8 	.word	0x24000bd8
 8003c14:	24000558 	.word	0x24000558
 8003c18:	2400063c 	.word	0x2400063c
 8003c1c:	24000720 	.word	0x24000720
 8003c20:	24000804 	.word	0x24000804
 8003c24:	4bc9      	ldr	r3, [pc, #804]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003c26:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c2e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003c32:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c36:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c42:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c46:	4bc1      	ldr	r3, [pc, #772]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003c48:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c50:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003c54:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c58:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c60:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c6c:	4bb7      	ldr	r3, [pc, #732]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003c6e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1*t) + (fcb_joint4.C2*t2) + (fcb_joint4.C3*t3) + (fcb_joint4.C4*t4) + (fcb_joint4.C5*t5));
 8003c72:	4bb6      	ldr	r3, [pc, #728]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003c74:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003c78:	4bb4      	ldr	r3, [pc, #720]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003c7a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003c7e:	4bb4      	ldr	r3, [pc, #720]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c8c:	4baf      	ldr	r3, [pc, #700]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003c8e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9e:	4bab      	ldr	r3, [pc, #684]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ca0:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cb0:	4ba6      	ldr	r3, [pc, #664]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003cb2:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003cb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc2:	4ba2      	ldr	r3, [pc, #648]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003cc4:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd4:	4b9d      	ldr	r3, [pc, #628]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003cd6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003cda:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cdc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce4:	489b      	ldr	r0, [pc, #620]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ce6:	f7fd f905 	bl	8000ef4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003cea:	4b9a      	ldr	r3, [pc, #616]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cf0:	4a98      	ldr	r2, [pc, #608]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cf2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003cf6:	4b97      	ldr	r3, [pc, #604]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cfc:	4a95      	ldr	r2, [pc, #596]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cfe:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003d02:	4b95      	ldr	r3, [pc, #596]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d04:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003d08:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0c:	4892      	ldr	r0, [pc, #584]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d0e:	f7fd f8f1 	bl	8000ef4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003d12:	4b91      	ldr	r3, [pc, #580]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d18:	4a8f      	ldr	r2, [pc, #572]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d1a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003d1e:	4b8e      	ldr	r3, [pc, #568]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d24:	4a8c      	ldr	r2, [pc, #560]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d26:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
//		fcb_joint1.Kd_p = 0.003;
//		fcb_joint3.Kp_p = 0.05;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.01;

		fcb_joint1.Kp_p = 0.0;
 8003d2a:	4b8a      	ldr	r3, [pc, #552]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003d32:	4b88      	ldr	r3, [pc, #544]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003d3a:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 0.0;
 8003d42:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003d4a:	4b83      	ldr	r3, [pc, #524]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003d52:	4b81      	ldr	r3, [pc, #516]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint1.Kp_v = 3.0;
 8003d5a:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d5c:	4a7f      	ldr	r2, [pc, #508]	; (8003f5c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003d5e:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003d60:	4b7c      	ldr	r3, [pc, #496]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003d68:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 3.0;
 8003d70:	4b79      	ldr	r3, [pc, #484]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d72:	4a7a      	ldr	r2, [pc, #488]	; (8003f5c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003d74:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003d76:	4b78      	ldr	r3, [pc, #480]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003d86:	4b73      	ldr	r3, [pc, #460]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d88:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d8c:	4b71      	ldr	r3, [pc, #452]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d8e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d96:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d98:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8003d9c:	4b6e      	ldr	r3, [pc, #440]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003d9e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003da2:	4b6d      	ldr	r3, [pc, #436]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003da4:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dac:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003dae:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8003db2:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003db4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003db8:	4b66      	ldr	r3, [pc, #408]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003dba:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc2:	4b64      	ldr	r3, [pc, #400]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003dc4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003dc8:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003dca:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003dce:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003dd0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd8:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003dda:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003dde:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003de0:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003de4:	4b5b      	ldr	r3, [pc, #364]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003de6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dee:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003df0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003df4:	4b58      	ldr	r3, [pc, #352]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003df6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003dfa:	4b57      	ldr	r3, [pc, #348]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003dfc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e04:	4b54      	ldr	r3, [pc, #336]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003e06:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003e0a:	4b52      	ldr	r3, [pc, #328]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e0c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e12:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1a:	4b4e      	ldr	r3, [pc, #312]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e1c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003e20:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003e22:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003e26:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003e28:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e30:	4b49      	ldr	r3, [pc, #292]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003e32:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e38:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8003e3c:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e3e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003e42:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e44:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8003e50:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e52:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e58:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8003e60:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003e64:	4b3b      	ldr	r3, [pc, #236]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e66:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003e6a:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e6c:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003e70:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e72:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003e76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8003e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e84:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e8a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003e92:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8003e96:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e98:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e9e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8003ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 8003eaa:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003eac:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003eb0:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003eb2:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003eb8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003ebc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8003ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003eca:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ed0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ed6:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003eda:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003edc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003eea:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ef0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003efe:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f04:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f0a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003f16:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f1c:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003f20:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f22:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f30:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f36:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f44:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003f48:	e00a      	b.n	8003f60 <HAL_TIM_PeriodElapsedCallback+0xa60>
 8003f4a:	bf00      	nop
 8003f4c:	24000804 	.word	0x24000804
 8003f50:	24000bd8 	.word	0x24000bd8
 8003f54:	24000558 	.word	0x24000558
 8003f58:	24000720 	.word	0x24000720
 8003f5c:	40400000 	.word	0x40400000
 8003f60:	4ba0      	ldr	r3, [pc, #640]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f62:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003f66:	4b9f      	ldr	r3, [pc, #636]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f68:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003f6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8003f74:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003f78:	4b9a      	ldr	r3, [pc, #616]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f7a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8003f7e:	4b9a      	ldr	r3, [pc, #616]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003f80:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f84:	eeb0 0a67 	vmov.f32	s0, s15
 8003f88:	4898      	ldr	r0, [pc, #608]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8003f8a:	f7fe f99d 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Output_Joint_W);
		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 8003f8e:	4b95      	ldr	r3, [pc, #596]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f90:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f94:	eeb0 0a67 	vmov.f32	s0, s15
 8003f98:	4895      	ldr	r0, [pc, #596]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8003f9a:	f7fe f995 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Goal_Velocity);
//		stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
//
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8003f9e:	4b95      	ldr	r3, [pc, #596]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8003fa0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa8:	4893      	ldr	r0, [pc, #588]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8003faa:	f7fe f98d 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ3.StepperOpenLoopSpeedM(0);
		stepperJ4.StepperOpenLoopSpeedM(0);
 8003fae:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80041fc <HAL_TIM_PeriodElapsedCallback+0xcfc>
 8003fb2:	4893      	ldr	r0, [pc, #588]	; (8004200 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 8003fb4:	f7fe f988 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003fb8:	4b8b      	ldr	r3, [pc, #556]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbc:	4a8a      	ldr	r2, [pc, #552]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003fbe:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003fc0:	4b88      	ldr	r3, [pc, #544]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc4:	4a87      	ldr	r2, [pc, #540]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fc6:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8003fc8:	4b87      	ldr	r3, [pc, #540]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fce:	4a86      	ldr	r2, [pc, #536]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8003fd4:	4b83      	ldr	r3, [pc, #524]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	4a82      	ldr	r2, [pc, #520]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 8003fe0:	4b81      	ldr	r3, [pc, #516]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003fe2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fe6:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 8003fec:	4b7d      	ldr	r3, [pc, #500]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ff2:	4a7c      	ldr	r2, [pc, #496]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8003ff8:	4b7b      	ldr	r3, [pc, #492]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003ffa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ffe:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8004004:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004006:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800400a:	4a76      	ldr	r2, [pc, #472]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800400c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94


		t = t + sample_time_500;
 8004010:	4b7c      	ldr	r3, [pc, #496]	; (8004204 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8004012:	ed93 7a00 	vldr	s14, [r3]
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	4b78      	ldr	r3, [pc, #480]	; (8004204 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8004022:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time )
 8004026:	4b77      	ldr	r3, [pc, #476]	; (8004204 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8004028:	ed93 7a00 	vldr	s14, [r3]
 800402c:	4b77      	ldr	r3, [pc, #476]	; (800420c <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 800402e:	edd3 7a00 	vldr	s15, [r3]
 8004032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	bfac      	ite	ge
 800403c:	2301      	movge	r3, #1
 800403e:	2300      	movlt	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d040      	beq.n	80040c8 <HAL_TIM_PeriodElapsedCallback+0xbc8>
			{
			t = (int)0;
 8004046:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 800404e:	4b66      	ldr	r3, [pc, #408]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004058:	4b62      	ldr	r3, [pc, #392]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 8004062:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 800406c:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 800407e:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8004086:	4b58      	ldr	r3, [pc, #352]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8004090:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 800409a:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 80040ae:	4b4e      	ldr	r3, [pc, #312]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 80040b8:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
			}


	}
	if(htim == &htim17){
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	f040 8085 	bne.w	80041dc <HAL_TIM_PeriodElapsedCallback+0xcdc>
		uint8_t encoder_state[12] = {
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 16) & 0xFF),
 80040d2:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80040d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040dc:	ee17 3a90 	vmov	r3, s15
 80040e0:	b21b      	sxth	r3, r3
 80040e2:	141b      	asrs	r3, r3, #16
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
		};
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	733b      	strb	r3, [r7, #12]
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 8) & 0xFF),
 80040e8:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80040ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040f2:	ee17 3a90 	vmov	r3, s15
 80040f6:	b21b      	sxth	r3, r3
 80040f8:	121b      	asrs	r3, r3, #8
 80040fa:	b21b      	sxth	r3, r3
		};
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	737b      	strb	r3, [r7, #13]
				(uint8_t)(((int16_t)fcb_joint1.Encoder) & 0xFF),
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8004102:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800410a:	ee17 3a90 	vmov	r3, s15
 800410e:	b21b      	sxth	r3, r3
		};
 8004110:	b2db      	uxtb	r3, r3
 8004112:	73bb      	strb	r3, [r7, #14]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 16) & 0xFF),
 8004114:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8004116:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800411a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800411e:	ee17 3a90 	vmov	r3, s15
 8004122:	141b      	asrs	r3, r3, #16
		};
 8004124:	b2db      	uxtb	r3, r3
 8004126:	73fb      	strb	r3, [r7, #15]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 8) & 0xFF),
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 800412a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800412e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004132:	ee17 3a90 	vmov	r3, s15
 8004136:	121b      	asrs	r3, r3, #8
		};
 8004138:	b2db      	uxtb	r3, r3
 800413a:	743b      	strb	r3, [r7, #16]
				(uint8_t)(((int32_t)fcb_joint2.Encoder) & 0xFF),
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 800413e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004146:	edc7 7a00 	vstr	s15, [r7]
		};
 800414a:	783b      	ldrb	r3, [r7, #0]
 800414c:	747b      	strb	r3, [r7, #17]
				(uint8_t)(((int32_t)fcb_joint3.Encoder >> 16) & 0xFF),
 800414e:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004150:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004158:	ee17 3a90 	vmov	r3, s15
 800415c:	141b      	asrs	r3, r3, #16
		};
 800415e:	b2db      	uxtb	r3, r3
 8004160:	74bb      	strb	r3, [r7, #18]
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004164:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800416c:	ee17 3a90 	vmov	r3, s15
 8004170:	b21b      	sxth	r3, r3
 8004172:	121b      	asrs	r3, r3, #8
 8004174:	b21b      	sxth	r3, r3
		};
 8004176:	b2db      	uxtb	r3, r3
 8004178:	74fb      	strb	r3, [r7, #19]
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800417c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004184:	ee17 3a90 	vmov	r3, s15
 8004188:	b21b      	sxth	r3, r3
		};
 800418a:	b2db      	uxtb	r3, r3
 800418c:	753b      	strb	r3, [r7, #20]
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8004190:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004198:	ee17 3a90 	vmov	r3, s15
 800419c:	141b      	asrs	r3, r3, #16
		};
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	757b      	strb	r3, [r7, #21]
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 80041a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ac:	ee17 3a90 	vmov	r3, s15
 80041b0:	b21b      	sxth	r3, r3
 80041b2:	121b      	asrs	r3, r3, #8
 80041b4:	b21b      	sxth	r3, r3
		};
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	75bb      	strb	r3, [r7, #22]
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 80041bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041c4:	ee17 3a90 	vmov	r3, s15
 80041c8:	b21b      	sxth	r3, r3
		};
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&encoder_state, 12);
 80041ce:	f107 030c 	add.w	r3, r7, #12
 80041d2:	220c      	movs	r2, #12
 80041d4:	4619      	mov	r1, r3
 80041d6:	4811      	ldr	r0, [pc, #68]	; (800421c <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 80041d8:	f009 ffae 	bl	800e138 <HAL_UART_Transmit_DMA>
	}
}
 80041dc:	bf00      	nop
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	24000720 	.word	0x24000720
 80041e8:	24000558 	.word	0x24000558
 80041ec:	240004b8 	.word	0x240004b8
 80041f0:	24000508 	.word	0x24000508
 80041f4:	2400063c 	.word	0x2400063c
 80041f8:	240004e0 	.word	0x240004e0
 80041fc:	00000000 	.word	0x00000000
 8004200:	24000530 	.word	0x24000530
 8004204:	24000bd8 	.word	0x24000bd8
 8004208:	24000208 	.word	0x24000208
 800420c:	24000ad4 	.word	0x24000ad4
 8004210:	24000ad0 	.word	0x24000ad0
 8004214:	2400101c 	.word	0x2400101c
 8004218:	24000804 	.word	0x24000804
 800421c:	24001188 	.word	0x24001188

08004220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004224:	f002 fa36 	bl	8006694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004228:	f000 fa7c 	bl	8004724 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800422c:	f7fe f928 	bl	8002480 <MX_GPIO_Init>
  MX_DMA_Init();
 8004230:	f7fe f8d6 	bl	80023e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004234:	f001 fec8 	bl	8005fc8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004238:	f000 fff6 	bl	8005228 <MX_TIM2_Init>
  MX_UART4_Init();
 800423c:	f001 fdd6 	bl	8005dec <MX_UART4_Init>
  MX_TIM4_Init();
 8004240:	f001 f8e2 	bl	8005408 <MX_TIM4_Init>
  MX_SPI3_Init();
 8004244:	f000 fc12 	bl	8004a6c <MX_SPI3_Init>
  MX_TIM1_Init();
 8004248:	f000 ff40 	bl	80050cc <MX_TIM1_Init>
  MX_TIM3_Init();
 800424c:	f001 f864 	bl	8005318 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004250:	f001 f952 	bl	80054f8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8004254:	f001 fa8c 	bl	8005770 <MX_TIM15_Init>
  MX_CRC_Init();
 8004258:	f7fe f872 	bl	8002340 <MX_CRC_Init>
  MX_UART7_Init();
 800425c:	f001 fe1a 	bl	8005e94 <MX_UART7_Init>
  MX_TIM6_Init();
 8004260:	f001 f998 	bl	8005594 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004264:	f001 f9cc 	bl	8005600 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004268:	f001 fa00 	bl	800566c <MX_TIM12_Init>
  MX_TIM13_Init();
 800426c:	f001 fa38 	bl	80056e0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004270:	f001 fa5a 	bl	8005728 <MX_TIM14_Init>
  MX_TIM16_Init();
 8004274:	f001 fb20 	bl	80058b8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004278:	f001 fe5a 	bl	8005f30 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800427c:	f001 fb42 	bl	8005904 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8004280:	2214      	movs	r2, #20
 8004282:	496a      	ldr	r1, [pc, #424]	; (800442c <main+0x20c>)
 8004284:	486a      	ldr	r0, [pc, #424]	; (8004430 <main+0x210>)
 8004286:	f00b febc 	bl	8010002 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800428a:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <main+0x214>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6a      	ldr	r2, [pc, #424]	; (8004438 <main+0x218>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04a      	beq.n	800432a <main+0x10a>
 8004294:	4b67      	ldr	r3, [pc, #412]	; (8004434 <main+0x214>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a68      	ldr	r2, [pc, #416]	; (800443c <main+0x21c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d045      	beq.n	800432a <main+0x10a>
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <main+0x214>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a67      	ldr	r2, [pc, #412]	; (8004440 <main+0x220>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d040      	beq.n	800432a <main+0x10a>
 80042a8:	4b62      	ldr	r3, [pc, #392]	; (8004434 <main+0x214>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a65      	ldr	r2, [pc, #404]	; (8004444 <main+0x224>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03b      	beq.n	800432a <main+0x10a>
 80042b2:	4b60      	ldr	r3, [pc, #384]	; (8004434 <main+0x214>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a64      	ldr	r2, [pc, #400]	; (8004448 <main+0x228>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d036      	beq.n	800432a <main+0x10a>
 80042bc:	4b5d      	ldr	r3, [pc, #372]	; (8004434 <main+0x214>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a62      	ldr	r2, [pc, #392]	; (800444c <main+0x22c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <main+0x10a>
 80042c6:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <main+0x214>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a61      	ldr	r2, [pc, #388]	; (8004450 <main+0x230>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <main+0x10a>
 80042d0:	4b58      	ldr	r3, [pc, #352]	; (8004434 <main+0x214>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a5f      	ldr	r2, [pc, #380]	; (8004454 <main+0x234>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d027      	beq.n	800432a <main+0x10a>
 80042da:	4b56      	ldr	r3, [pc, #344]	; (8004434 <main+0x214>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5e      	ldr	r2, [pc, #376]	; (8004458 <main+0x238>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <main+0x10a>
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <main+0x214>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a5c      	ldr	r2, [pc, #368]	; (800445c <main+0x23c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <main+0x10a>
 80042ee:	4b51      	ldr	r3, [pc, #324]	; (8004434 <main+0x214>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5b      	ldr	r2, [pc, #364]	; (8004460 <main+0x240>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <main+0x10a>
 80042f8:	4b4e      	ldr	r3, [pc, #312]	; (8004434 <main+0x214>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a59      	ldr	r2, [pc, #356]	; (8004464 <main+0x244>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <main+0x10a>
 8004302:	4b4c      	ldr	r3, [pc, #304]	; (8004434 <main+0x214>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a58      	ldr	r2, [pc, #352]	; (8004468 <main+0x248>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <main+0x10a>
 800430c:	4b49      	ldr	r3, [pc, #292]	; (8004434 <main+0x214>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a56      	ldr	r2, [pc, #344]	; (800446c <main+0x24c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <main+0x10a>
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <main+0x214>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a55      	ldr	r2, [pc, #340]	; (8004470 <main+0x250>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <main+0x10a>
 8004320:	4b44      	ldr	r3, [pc, #272]	; (8004434 <main+0x214>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a53      	ldr	r2, [pc, #332]	; (8004474 <main+0x254>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <main+0x11c>
 800432a:	4b42      	ldr	r3, [pc, #264]	; (8004434 <main+0x214>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b40      	ldr	r3, [pc, #256]	; (8004434 <main+0x214>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0208 	bic.w	r2, r2, #8
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e007      	b.n	800434c <main+0x12c>
 800433c:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <main+0x214>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <main+0x214>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0204 	bic.w	r2, r2, #4
 800434a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800434c:	2201      	movs	r2, #1
 800434e:	2101      	movs	r1, #1
 8004350:	4849      	ldr	r0, [pc, #292]	; (8004478 <main+0x258>)
 8004352:	f005 fd67 	bl	8009e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8004356:	2201      	movs	r2, #1
 8004358:	2102      	movs	r1, #2
 800435a:	4848      	ldr	r0, [pc, #288]	; (800447c <main+0x25c>)
 800435c:	f005 fd62 	bl	8009e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004360:	2200      	movs	r2, #0
 8004362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004366:	4844      	ldr	r0, [pc, #272]	; (8004478 <main+0x258>)
 8004368:	f005 fd5c 	bl	8009e24 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 800436c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80044a0 <main+0x280>
 8004370:	4843      	ldr	r0, [pc, #268]	; (8004480 <main+0x260>)
 8004372:	f7fd fcf5 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 8004376:	2108      	movs	r1, #8
 8004378:	4841      	ldr	r0, [pc, #260]	; (8004480 <main+0x260>)
 800437a:	f7fd ff8d 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 800437e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004484 <main+0x264>
 8004382:	483f      	ldr	r0, [pc, #252]	; (8004480 <main+0x260>)
 8004384:	f7fd ff64 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8004388:	483d      	ldr	r0, [pc, #244]	; (8004480 <main+0x260>)
 800438a:	f7fd fcd8 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 800438e:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80044a0 <main+0x280>
 8004392:	483d      	ldr	r0, [pc, #244]	; (8004488 <main+0x268>)
 8004394:	f7fd fce4 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 8004398:	2110      	movs	r1, #16
 800439a:	483b      	ldr	r0, [pc, #236]	; (8004488 <main+0x268>)
 800439c:	f7fd ff7c 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80043a0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80043a4:	4838      	ldr	r0, [pc, #224]	; (8004488 <main+0x268>)
 80043a6:	f7fd ff53 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80043aa:	4837      	ldr	r0, [pc, #220]	; (8004488 <main+0x268>)
 80043ac:	f7fd fcc7 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80043b0:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80044a0 <main+0x280>
 80043b4:	4835      	ldr	r0, [pc, #212]	; (800448c <main+0x26c>)
 80043b6:	f7fd fcd3 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80043ba:	2110      	movs	r1, #16
 80043bc:	4833      	ldr	r0, [pc, #204]	; (800448c <main+0x26c>)
 80043be:	f7fd ff6b 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80043c2:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80043c6:	4831      	ldr	r0, [pc, #196]	; (800448c <main+0x26c>)
 80043c8:	f7fd ff42 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80043cc:	482f      	ldr	r0, [pc, #188]	; (800448c <main+0x26c>)
 80043ce:	f7fd fcb6 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80043d2:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80044a0 <main+0x280>
 80043d6:	482e      	ldr	r0, [pc, #184]	; (8004490 <main+0x270>)
 80043d8:	f7fd fcc2 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 80043dc:	2101      	movs	r1, #1
 80043de:	482c      	ldr	r0, [pc, #176]	; (8004490 <main+0x270>)
 80043e0:	f7fd ff5a 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 80043e4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80043e8:	4829      	ldr	r0, [pc, #164]	; (8004490 <main+0x270>)
 80043ea:	f7fd ff31 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 80043ee:	4828      	ldr	r0, [pc, #160]	; (8004490 <main+0x270>)
 80043f0:	f7fd fca5 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 80043f4:	2191      	movs	r1, #145	; 0x91
 80043f6:	4827      	ldr	r0, [pc, #156]	; (8004494 <main+0x274>)
 80043f8:	f7fd fbeb 	bl	8001bd2 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 80043fc:	2139      	movs	r1, #57	; 0x39
 80043fe:	4825      	ldr	r0, [pc, #148]	; (8004494 <main+0x274>)
 8004400:	f7fd fbd6 	bl	8001bb0 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004404:	4823      	ldr	r0, [pc, #140]	; (8004494 <main+0x274>)
 8004406:	f7fd f9fe 	bl	8001806 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 800440a:	4822      	ldr	r0, [pc, #136]	; (8004494 <main+0x274>)
 800440c:	f7fd fbf2 	bl	8001bf4 <_ZN10ServoMotor12GripperCloseEv>
	while(!Limit_sw_Z_Top)
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <main+0x278>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f083 0301 	eor.w	r3, r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d041      	beq.n	80044a4 <main+0x284>
	{
		stepperJ2.StepperSetFrequency(1200.0f);
 8004420:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800449c <main+0x27c>
 8004424:	4818      	ldr	r0, [pc, #96]	; (8004488 <main+0x268>)
 8004426:	f7fd fc9b 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	while(!Limit_sw_Z_Top)
 800442a:	e7f1      	b.n	8004410 <main+0x1f0>
 800442c:	24000b0c 	.word	0x24000b0c
 8004430:	24001218 	.word	0x24001218
 8004434:	24001500 	.word	0x24001500
 8004438:	40020010 	.word	0x40020010
 800443c:	40020028 	.word	0x40020028
 8004440:	40020040 	.word	0x40020040
 8004444:	40020058 	.word	0x40020058
 8004448:	40020070 	.word	0x40020070
 800444c:	40020088 	.word	0x40020088
 8004450:	400200a0 	.word	0x400200a0
 8004454:	400200b8 	.word	0x400200b8
 8004458:	40020410 	.word	0x40020410
 800445c:	40020428 	.word	0x40020428
 8004460:	40020440 	.word	0x40020440
 8004464:	40020458 	.word	0x40020458
 8004468:	40020470 	.word	0x40020470
 800446c:	40020488 	.word	0x40020488
 8004470:	400204a0 	.word	0x400204a0
 8004474:	400204b8 	.word	0x400204b8
 8004478:	58020400 	.word	0x58020400
 800447c:	58021000 	.word	0x58021000
 8004480:	240004b8 	.word	0x240004b8
 8004484:	42280000 	.word	0x42280000
 8004488:	240004e0 	.word	0x240004e0
 800448c:	24000508 	.word	0x24000508
 8004490:	24000530 	.word	0x24000530
 8004494:	24000ab0 	.word	0x24000ab0
 8004498:	24000b23 	.word	0x24000b23
 800449c:	44960000 	.word	0x44960000
 80044a0:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 80044a4:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80044a0 <main+0x280>
 80044a8:	4885      	ldr	r0, [pc, #532]	; (80046c0 <main+0x4a0>)
 80044aa:	f7fd fc59 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 80044ae:	20c8      	movs	r0, #200	; 0xc8
 80044b0:	f002 f982 	bl	80067b8 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 80044b4:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80046c4 <main+0x4a4>
 80044b8:	4881      	ldr	r0, [pc, #516]	; (80046c0 <main+0x4a0>)
 80044ba:	f7fd fc51 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 80044be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80044c2:	f002 f979 	bl	80067b8 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 80044c6:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80046c8 <main+0x4a8>
 80044ca:	487d      	ldr	r0, [pc, #500]	; (80046c0 <main+0x4a0>)
 80044cc:	f7fd fc48 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 80044d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044d4:	f002 f970 	bl	80067b8 <HAL_Delay>
	gripper.GripperOpen();
 80044d8:	487c      	ldr	r0, [pc, #496]	; (80046cc <main+0x4ac>)
 80044da:	f7fd fba1 	bl	8001c20 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 80044de:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <main+0x4b0>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]



	encoderJ1.AMT21_Read();
 80044e4:	487b      	ldr	r0, [pc, #492]	; (80046d4 <main+0x4b4>)
 80044e6:	f7fc f8f4 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80044ea:	487a      	ldr	r0, [pc, #488]	; (80046d4 <main+0x4b4>)
 80044ec:	f7fc f920 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b78      	ldr	r3, [pc, #480]	; (80046d8 <main+0x4b8>)
 80044f6:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 80044f8:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <main+0x4b8>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d110      	bne.n	8004522 <main+0x302>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 8004500:	4874      	ldr	r0, [pc, #464]	; (80046d4 <main+0x4b4>)
 8004502:	f7fc f97b 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004506:	4603      	mov	r3, r0
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004510:	ed9f 5b69 	vldr	d5, [pc, #420]	; 80046b8 <main+0x498>
 8004514:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004518:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800451c:	4b6f      	ldr	r3, [pc, #444]	; (80046dc <main+0x4bc>)
 800451e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ2.AMT21_Read();
 8004522:	486f      	ldr	r0, [pc, #444]	; (80046e0 <main+0x4c0>)
 8004524:	f7fc f8d5 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004528:	486d      	ldr	r0, [pc, #436]	; (80046e0 <main+0x4c0>)
 800452a:	f7fc f901 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	4b6c      	ldr	r3, [pc, #432]	; (80046e4 <main+0x4c4>)
 8004534:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004536:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <main+0x4c4>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d115      	bne.n	800456a <main+0x34a>
		encoderJ2.unwarp();
 800453e:	4868      	ldr	r0, [pc, #416]	; (80046e0 <main+0x4c0>)
 8004540:	f7fc f97e 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004544:	4866      	ldr	r0, [pc, #408]	; (80046e0 <main+0x4c0>)
 8004546:	f7fc f9cd 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;}
 800454a:	4865      	ldr	r0, [pc, #404]	; (80046e0 <main+0x4c0>)
 800454c:	f7fc f9d7 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8004550:	ee07 0a90 	vmov	s15, r0
 8004554:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004558:	ed9f 5b57 	vldr	d5, [pc, #348]	; 80046b8 <main+0x498>
 800455c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004560:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004564:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <main+0x4c8>)
 8004566:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ3.AMT21_Read();
 800456a:	4860      	ldr	r0, [pc, #384]	; (80046ec <main+0x4cc>)
 800456c:	f7fc f8b1 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004570:	485e      	ldr	r0, [pc, #376]	; (80046ec <main+0x4cc>)
 8004572:	f7fc f8dd 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	4b5d      	ldr	r3, [pc, #372]	; (80046f0 <main+0x4d0>)
 800457c:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 800457e:	4b5c      	ldr	r3, [pc, #368]	; (80046f0 <main+0x4d0>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d110      	bne.n	80045a8 <main+0x388>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 8004586:	4859      	ldr	r0, [pc, #356]	; (80046ec <main+0x4cc>)
 8004588:	f7fc f938 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800458c:	4603      	mov	r3, r0
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004596:	ed9f 5b48 	vldr	d5, [pc, #288]	; 80046b8 <main+0x498>
 800459a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800459e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045a2:	4b54      	ldr	r3, [pc, #336]	; (80046f4 <main+0x4d4>)
 80045a4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ4.AMT21_Read();
 80045a8:	4853      	ldr	r0, [pc, #332]	; (80046f8 <main+0x4d8>)
 80045aa:	f7fc f892 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80045ae:	4852      	ldr	r0, [pc, #328]	; (80046f8 <main+0x4d8>)
 80045b0:	f7fc f8be 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <main+0x4dc>)
 80045ba:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 80045bc:	4b4f      	ldr	r3, [pc, #316]	; (80046fc <main+0x4dc>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d110      	bne.n	80045e6 <main+0x3c6>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 80045c4:	484c      	ldr	r0, [pc, #304]	; (80046f8 <main+0x4d8>)
 80045c6:	f7fc f919 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80045ca:	4603      	mov	r3, r0
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80045d4:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80046b8 <main+0x498>
 80045d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80045dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045e0:	4b47      	ldr	r3, [pc, #284]	; (8004700 <main+0x4e0>)
 80045e2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	fcb_joint1.p11 = 3.60381982 / 100000000.0 ;
 80045e6:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <main+0x4bc>)
 80045e8:	4a46      	ldr	r2, [pc, #280]	; (8004704 <main+0x4e4>)
 80045ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 80045ee:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <main+0x4bc>)
 80045f0:	4a45      	ldr	r2, [pc, #276]	; (8004708 <main+0x4e8>)
 80045f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <main+0x4bc>)
 80045f8:	4a44      	ldr	r2, [pc, #272]	; (800470c <main+0x4ec>)
 80045fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <main+0x4bc>)
 8004600:	4a43      	ldr	r2, [pc, #268]	; (8004710 <main+0x4f0>)
 8004602:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004606:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <main+0x4d4>)
 8004608:	4a3e      	ldr	r2, [pc, #248]	; (8004704 <main+0x4e4>)
 800460a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 800460e:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <main+0x4d4>)
 8004610:	4a3d      	ldr	r2, [pc, #244]	; (8004708 <main+0x4e8>)
 8004612:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <main+0x4d4>)
 8004618:	4a3c      	ldr	r2, [pc, #240]	; (800470c <main+0x4ec>)
 800461a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 800461e:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <main+0x4d4>)
 8004620:	4a3b      	ldr	r2, [pc, #236]	; (8004710 <main+0x4f0>)
 8004622:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4


	fcb_joint1.Q = 0.001;
 8004626:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <main+0x4bc>)
 8004628:	4a3a      	ldr	r2, [pc, #232]	; (8004714 <main+0x4f4>)
 800462a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000003;
 800462e:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <main+0x4bc>)
 8004630:	4a39      	ldr	r2, [pc, #228]	; (8004718 <main+0x4f8>)
 8004632:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <main+0x4d4>)
 8004638:	4a36      	ldr	r2, [pc, #216]	; (8004714 <main+0x4f4>)
 800463a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000003;
 800463e:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <main+0x4d4>)
 8004640:	4a35      	ldr	r2, [pc, #212]	; (8004718 <main+0x4f8>)
 8004642:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004646:	4b25      	ldr	r3, [pc, #148]	; (80046dc <main+0x4bc>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4a24      	ldr	r2, [pc, #144]	; (80046dc <main+0x4bc>)
 800464c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004650:	4b22      	ldr	r3, [pc, #136]	; (80046dc <main+0x4bc>)
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <main+0x4bc>)
 800465c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004660:	4a1e      	ldr	r2, [pc, #120]	; (80046dc <main+0x4bc>)
 8004662:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <main+0x4bc>)
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <main+0x4bc>)
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <main+0x4bc>)
 8004676:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <main+0x4d4>)
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <main+0x4d4>)
 800467e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <main+0x4d4>)
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <main+0x4d4>)
 800468e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <main+0x4d4>)
 8004694:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004698:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <main+0x4d4>)
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <main+0x4d4>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <main+0x4d4>)
 80046a8:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 80046aa:	481c      	ldr	r0, [pc, #112]	; (800471c <main+0x4fc>)
 80046ac:	f008 f8c2 	bl	800c834 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 80046b0:	481b      	ldr	r0, [pc, #108]	; (8004720 <main+0x500>)
 80046b2:	f008 f8bf 	bl	800c834 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 80046b6:	e7fe      	b.n	80046b6 <main+0x496>
 80046b8:	645a1cac 	.word	0x645a1cac
 80046bc:	4004df3b 	.word	0x4004df3b
 80046c0:	240004e0 	.word	0x240004e0
 80046c4:	c4480000 	.word	0xc4480000
 80046c8:	00000000 	.word	0x00000000
 80046cc:	24000ab0 	.word	0x24000ab0
 80046d0:	24000b23 	.word	0x24000b23
 80046d4:	24000448 	.word	0x24000448
 80046d8:	24000acc 	.word	0x24000acc
 80046dc:	24000558 	.word	0x24000558
 80046e0:	24000464 	.word	0x24000464
 80046e4:	24000acd 	.word	0x24000acd
 80046e8:	2400063c 	.word	0x2400063c
 80046ec:	24000480 	.word	0x24000480
 80046f0:	24000ace 	.word	0x24000ace
 80046f4:	24000720 	.word	0x24000720
 80046f8:	2400049c 	.word	0x2400049c
 80046fc:	24000acf 	.word	0x24000acf
 8004700:	24000804 	.word	0x24000804
 8004704:	331ac86b 	.word	0x331ac86b
 8004708:	33e9d3b8 	.word	0x33e9d3b8
 800470c:	33e9d3bd 	.word	0x33e9d3bd
 8004710:	3531278c 	.word	0x3531278c
 8004714:	3a83126f 	.word	0x3a83126f
 8004718:	3649539c 	.word	0x3649539c
 800471c:	24000fd0 	.word	0x24000fd0
 8004720:	2400101c 	.word	0x2400101c

08004724 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b09c      	sub	sp, #112	; 0x70
 8004728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800472a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472e:	224c      	movs	r2, #76	; 0x4c
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f00d f814 	bl	8011760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004738:	1d3b      	adds	r3, r7, #4
 800473a:	2220      	movs	r2, #32
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f00d f80e 	bl	8011760 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004744:	2002      	movs	r0, #2
 8004746:	f005 fba1 	bl	8009e8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800474a:	2300      	movs	r3, #0
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <_Z18SystemClock_Configv+0x10c>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	4a37      	ldr	r2, [pc, #220]	; (8004830 <_Z18SystemClock_Configv+0x10c>)
 8004754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004758:	6193      	str	r3, [r2, #24]
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <_Z18SystemClock_Configv+0x10c>)
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	4b33      	ldr	r3, [pc, #204]	; (8004834 <_Z18SystemClock_Configv+0x110>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a32      	ldr	r2, [pc, #200]	; (8004834 <_Z18SystemClock_Configv+0x110>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <_Z18SystemClock_Configv+0x110>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800477c:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <_Z18SystemClock_Configv+0x10c>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d000      	beq.n	8004796 <_Z18SystemClock_Configv+0x72>
 8004794:	e7f2      	b.n	800477c <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004796:	2302      	movs	r3, #2
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800479a:	2301      	movs	r3, #1
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800479e:	2340      	movs	r3, #64	; 0x40
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047a2:	2302      	movs	r3, #2
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047a6:	2300      	movs	r3, #0
 80047a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80047aa:	2304      	movs	r3, #4
 80047ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80047ae:	233c      	movs	r3, #60	; 0x3c
 80047b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80047b2:	2302      	movs	r3, #2
 80047b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80047b6:	2306      	movs	r3, #6
 80047b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80047ba:	2302      	movs	r3, #2
 80047bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80047be:	230c      	movs	r3, #12
 80047c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 fb96 	bl	8009f00 <HAL_RCC_OscConfig>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80047e4:	f000 f856 	bl	8004894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047e8:	233f      	movs	r3, #63	; 0x3f
 80047ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047ec:	2303      	movs	r3, #3
 80047ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80047f4:	2308      	movs	r3, #8
 80047f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80047f8:	2340      	movs	r3, #64	; 0x40
 80047fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80047fc:	2340      	movs	r3, #64	; 0x40
 80047fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004804:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	2104      	movs	r1, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f005 ffa4 	bl	800a75c <HAL_RCC_ClockConfig>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004824:	f000 f836 	bl	8004894 <Error_Handler>
  }
}
 8004828:	bf00      	nop
 800482a:	3770      	adds	r7, #112	; 0x70
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024800 	.word	0x58024800
 8004834:	58000400 	.word	0x58000400

08004838 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM_Z_BOTTOM_Pin){	// Limit Switch Bottom Z-axis
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004848:	d102      	bne.n	8004850 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_GPIO_EXTI_Callback+0x4c>)
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_Z_TOP_Pin){	// Limit Switch Top Z-axis
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004856:	d102      	bne.n	800485e <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_GPIO_EXTI_Callback+0x50>)
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_SERVO_Pin){	// Limit Switch Servo
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d102      	bne.n	800486a <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_GPIO_EXTI_Callback+0x54>)
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_LED_Pin){	// Limit Switch LED on Cabinet
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d102      	bne.n	8004876 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <HAL_GPIO_EXTI_Callback+0x58>)
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
	}


}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	24000b22 	.word	0x24000b22
 8004888:	24000b23 	.word	0x24000b23
 800488c:	24000b24 	.word	0x24000b24
 8004890:	24000b25 	.word	0x24000b25

08004894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004898:	2200      	movs	r2, #0
 800489a:	2101      	movs	r1, #1
 800489c:	4808      	ldr	r0, [pc, #32]	; (80048c0 <Error_Handler+0x2c>)
 800489e:	f005 fac1 	bl	8009e24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2102      	movs	r1, #2
 80048a6:	4807      	ldr	r0, [pc, #28]	; (80048c4 <Error_Handler+0x30>)
 80048a8:	f005 fabc 	bl	8009e24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80048ac:	2201      	movs	r2, #1
 80048ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b2:	4803      	ldr	r0, [pc, #12]	; (80048c0 <Error_Handler+0x2c>)
 80048b4:	f005 fab6 	bl	8009e24 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048b8:	b672      	cpsid	i
}
 80048ba:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80048bc:	e7fe      	b.n	80048bc <Error_Handler+0x28>
 80048be:	bf00      	nop
 80048c0:	58020400 	.word	0x58020400
 80048c4:	58021000 	.word	0x58021000

080048c8 <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d152      	bne.n	800497e <_Z41__static_initialization_and_destruction_0ii+0xb6>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048de:	4293      	cmp	r3, r2
 80048e0:	d14d      	bne.n	800497e <_Z41__static_initialization_and_destruction_0ii+0xb6>
AMT21 encoderJ1(&huart4, 0xD4);
 80048e2:	22d4      	movs	r2, #212	; 0xd4
 80048e4:	4942      	ldr	r1, [pc, #264]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80048e6:	4843      	ldr	r0, [pc, #268]	; (80049f4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80048e8:	f7fb fed4 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 80048ec:	22b4      	movs	r2, #180	; 0xb4
 80048ee:	4940      	ldr	r1, [pc, #256]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80048f0:	4841      	ldr	r0, [pc, #260]	; (80049f8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80048f2:	f7fb fecf 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 80048f6:	22c4      	movs	r2, #196	; 0xc4
 80048f8:	493d      	ldr	r1, [pc, #244]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80048fa:	4840      	ldr	r0, [pc, #256]	; (80049fc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80048fc:	f7fb feca 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004900:	22a4      	movs	r2, #164	; 0xa4
 8004902:	493b      	ldr	r1, [pc, #236]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004904:	483e      	ldr	r0, [pc, #248]	; (8004a00 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004906:	f7fb fec5 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 800490a:	2320      	movs	r3, #32
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	4b3d      	ldr	r3, [pc, #244]	; (8004a04 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004910:	2200      	movs	r2, #0
 8004912:	493d      	ldr	r1, [pc, #244]	; (8004a08 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004914:	483d      	ldr	r0, [pc, #244]	; (8004a0c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004916:	f7fd f9c5 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 800491a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004922:	2204      	movs	r2, #4
 8004924:	493b      	ldr	r1, [pc, #236]	; (8004a14 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004926:	483c      	ldr	r0, [pc, #240]	; (8004a18 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004928:	f7fd f9bc 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800492c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4b37      	ldr	r3, [pc, #220]	; (8004a10 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004934:	2204      	movs	r2, #4
 8004936:	4939      	ldr	r1, [pc, #228]	; (8004a1c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004938:	4839      	ldr	r0, [pc, #228]	; (8004a20 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800493a:	f7fd f9b3 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 800493e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004946:	2208      	movs	r2, #8
 8004948:	4936      	ldr	r1, [pc, #216]	; (8004a24 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800494a:	4837      	ldr	r0, [pc, #220]	; (8004a28 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800494c:	f7fd f9aa 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004950:	4836      	ldr	r0, [pc, #216]	; (8004a2c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004952:	f7fc f805 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004956:	4836      	ldr	r0, [pc, #216]	; (8004a30 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004958:	f7fc f802 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 800495c:	4835      	ldr	r0, [pc, #212]	; (8004a34 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800495e:	f7fb ffff 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004962:	4835      	ldr	r0, [pc, #212]	; (8004a38 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004964:	f7fb fffc 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004968:	4834      	ldr	r0, [pc, #208]	; (8004a3c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800496a:	f7fb fff9 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 800496e:	4834      	ldr	r0, [pc, #208]	; (8004a40 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004970:	f7fb fff6 	bl	8000960 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004974:	2208      	movs	r2, #8
 8004976:	4933      	ldr	r1, [pc, #204]	; (8004a44 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004978:	4833      	ldr	r0, [pc, #204]	; (8004a48 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800497a:	f7fc ff09 	bl	8001790 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d131      	bne.n	80049e8 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800498a:	4293      	cmp	r3, r2
 800498c:	d12c      	bne.n	80049e8 <_Z41__static_initialization_and_destruction_0ii+0x120>
 800498e:	482e      	ldr	r0, [pc, #184]	; (8004a48 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004990:	f7fc ff2e 	bl	80017f0 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004994:	482a      	ldr	r0, [pc, #168]	; (8004a40 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004996:	f7fc f853 	bl	8000a40 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 800499a:	4828      	ldr	r0, [pc, #160]	; (8004a3c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800499c:	f7fc f850 	bl	8000a40 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 80049a0:	4825      	ldr	r0, [pc, #148]	; (8004a38 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80049a2:	f7fc f84d 	bl	8000a40 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 80049a6:	4823      	ldr	r0, [pc, #140]	; (8004a34 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80049a8:	f7fc f84a 	bl	8000a40 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 80049ac:	4820      	ldr	r0, [pc, #128]	; (8004a30 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80049ae:	f7fc f847 	bl	8000a40 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 80049b2:	481e      	ldr	r0, [pc, #120]	; (8004a2c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80049b4:	f7fc f844 	bl	8000a40 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 80049b8:	481b      	ldr	r0, [pc, #108]	; (8004a28 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80049ba:	f7fd f9b5 	bl	8001d28 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80049be:	4818      	ldr	r0, [pc, #96]	; (8004a20 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80049c0:	f7fd f9b2 	bl	8001d28 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80049c4:	4814      	ldr	r0, [pc, #80]	; (8004a18 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80049c6:	f7fd f9af 	bl	8001d28 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80049ca:	4810      	ldr	r0, [pc, #64]	; (8004a0c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80049cc:	f7fd f9ac 	bl	8001d28 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 80049d0:	480b      	ldr	r0, [pc, #44]	; (8004a00 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80049d2:	f7fb fe73 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 80049d6:	4809      	ldr	r0, [pc, #36]	; (80049fc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80049d8:	f7fb fe70 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 80049dc:	4806      	ldr	r0, [pc, #24]	; (80049f8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80049de:	f7fb fe6d 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 80049e2:	4804      	ldr	r0, [pc, #16]	; (80049f4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80049e4:	f7fb fe6a 	bl	80006bc <_ZN5AMT21D1Ev>
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	24001068 	.word	0x24001068
 80049f4:	24000448 	.word	0x24000448
 80049f8:	24000464 	.word	0x24000464
 80049fc:	24000480 	.word	0x24000480
 8004a00:	2400049c 	.word	0x2400049c
 8004a04:	58020400 	.word	0x58020400
 8004a08:	24000d24 	.word	0x24000d24
 8004a0c:	240004b8 	.word	0x240004b8
 8004a10:	58021000 	.word	0x58021000
 8004a14:	24000c8c 	.word	0x24000c8c
 8004a18:	240004e0 	.word	0x240004e0
 8004a1c:	24000f84 	.word	0x24000f84
 8004a20:	24000508 	.word	0x24000508
 8004a24:	24000cd8 	.word	0x24000cd8
 8004a28:	24000530 	.word	0x24000530
 8004a2c:	24000558 	.word	0x24000558
 8004a30:	2400063c 	.word	0x2400063c
 8004a34:	24000720 	.word	0x24000720
 8004a38:	24000804 	.word	0x24000804
 8004a3c:	240008e8 	.word	0x240008e8
 8004a40:	240009cc 	.word	0x240009cc
 8004a44:	24000d70 	.word	0x24000d70
 8004a48:	24000ab0 	.word	0x24000ab0

08004a4c <_GLOBAL__sub_I_TIM_MS>:
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a54:	2001      	movs	r0, #1
 8004a56:	f7ff ff37 	bl	80048c8 <_Z41__static_initialization_and_destruction_0ii>
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_GLOBAL__sub_D_TIM_MS>:
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7ff ff2f 	bl	80048c8 <_Z41__static_initialization_and_destruction_0ii>
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a72:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <MX_SPI3_Init+0xa8>)
 8004a74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004a7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a86:	2203      	movs	r2, #3
 8004a88:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a90:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004a98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a9c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004aaa:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004ab6:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ac2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004afa:	4805      	ldr	r0, [pc, #20]	; (8004b10 <MX_SPI3_Init+0xa4>)
 8004afc:	f007 fd22 	bl	800c544 <HAL_SPI_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8004b06:	f7ff fec5 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	24000c00 	.word	0x24000c00
 8004b14:	40003c00 	.word	0x40003c00

08004b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b0b8      	sub	sp, #224	; 0xe0
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b30:	f107 0310 	add.w	r3, r7, #16
 8004b34:	22bc      	movs	r2, #188	; 0xbc
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f00c fe11 	bl	8011760 <memset>
  if(spiHandle->Instance==SPI3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <HAL_SPI_MspInit+0xc0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d142      	bne.n	8004bce <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b52:	f107 0310 	add.w	r3, r7, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f006 f98c 	bl	800ae74 <HAL_RCCEx_PeriphCLKConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004b62:	f7ff fe97 	bl	8004894 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_SPI_MspInit+0xc4>)
 8004b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_SPI_MspInit+0xc4>)
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b76:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_SPI_MspInit+0xc4>)
 8004b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b84:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_SPI_MspInit+0xc4>)
 8004b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <HAL_SPI_MspInit+0xc4>)
 8004b8c:	f043 0304 	orr.w	r3, r3, #4
 8004b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b94:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <HAL_SPI_MspInit+0xc4>)
 8004b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004ba2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4805      	ldr	r0, [pc, #20]	; (8004be0 <HAL_SPI_MspInit+0xc8>)
 8004bca:	f004 ff7b 	bl	8009ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004bce:	bf00      	nop
 8004bd0:	37e0      	adds	r7, #224	; 0xe0
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40003c00 	.word	0x40003c00
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	58020800 	.word	0x58020800

08004be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_MspInit+0x30>)
 8004bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bf0:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <HAL_MspInit+0x30>)
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_MspInit+0x30>)
 8004bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	58024400 	.word	0x58024400

08004c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c1c:	e7fe      	b.n	8004c1c <NMI_Handler+0x4>

08004c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c22:	e7fe      	b.n	8004c22 <HardFault_Handler+0x4>

08004c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c28:	e7fe      	b.n	8004c28 <MemManage_Handler+0x4>

08004c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c2e:	e7fe      	b.n	8004c2e <BusFault_Handler+0x4>

08004c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c34:	e7fe      	b.n	8004c34 <UsageFault_Handler+0x4>

08004c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c64:	f001 fd88 	bl	8006778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004c68:	f001 fee5 	bl	8006a36 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004c74:	4802      	ldr	r0, [pc, #8]	; (8004c80 <DMA1_Stream0_IRQHandler+0x10>)
 8004c76:	f003 fc13 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	24001398 	.word	0x24001398

08004c84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <DMA1_Stream1_IRQHandler+0x10>)
 8004c8a:	f003 fc09 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	24001500 	.word	0x24001500

08004c98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <DMA1_Stream2_IRQHandler+0x10>)
 8004c9e:	f003 fbff 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	24001578 	.word	0x24001578

08004cac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004cb0:	4802      	ldr	r0, [pc, #8]	; (8004cbc <DMA1_Stream3_IRQHandler+0x10>)
 8004cb2:	f003 fbf5 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	240012a8 	.word	0x240012a8

08004cc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <DMA1_Stream4_IRQHandler+0x10>)
 8004cc6:	f003 fbeb 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	24001320 	.word	0x24001320

08004cd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004cd8:	4802      	ldr	r0, [pc, #8]	; (8004ce4 <DMA1_Stream5_IRQHandler+0x10>)
 8004cda:	f003 fbe1 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	24001410 	.word	0x24001410

08004ce8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004cec:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <DMA1_Stream6_IRQHandler+0x10>)
 8004cee:	f003 fbd7 	bl	80084a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	24001488 	.word	0x24001488

08004cfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004d00:	2040      	movs	r0, #64	; 0x40
 8004d02:	f005 f8a8 	bl	8009e56 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8004d06:	2080      	movs	r0, #128	; 0x80
 8004d08:	f005 f8a5 	bl	8009e56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d14:	4802      	ldr	r0, [pc, #8]	; (8004d20 <USART2_IRQHandler+0x10>)
 8004d16:	f009 faa1 	bl	800e25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	24001188 	.word	0x24001188

08004d24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004d28:	4802      	ldr	r0, [pc, #8]	; (8004d34 <USART3_IRQHandler+0x10>)
 8004d2a:	f009 fa97 	bl	800e25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	24001218 	.word	0x24001218

08004d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004d3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004d40:	f005 f889 	bl	8009e56 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004d44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d48:	f005 f885 	bl	8009e56 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8004d4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d50:	f005 f881 	bl	8009e56 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004d54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d58:	f005 f87d 	bl	8009e56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d5c:	bf00      	nop
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004d64:	4802      	ldr	r0, [pc, #8]	; (8004d70 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004d66:	f007 ff7b 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	24000ea0 	.word	0x24000ea0

08004d74 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004d78:	4802      	ldr	r0, [pc, #8]	; (8004d84 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004d7a:	f007 ff71 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	24000eec 	.word	0x24000eec

08004d88 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004d8c:	4802      	ldr	r0, [pc, #8]	; (8004d98 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004d8e:	f007 ff67 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	24000f38 	.word	0x24000f38

08004d9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004da0:	4802      	ldr	r0, [pc, #8]	; (8004dac <TIM5_IRQHandler+0x10>)
 8004da2:	f007 ff5d 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	24000dbc 	.word	0x24000dbc

08004db0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004db4:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <UART4_IRQHandler+0x10>)
 8004db6:	f009 fa51 	bl	800e25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	24001068 	.word	0x24001068

08004dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004dc8:	4802      	ldr	r0, [pc, #8]	; (8004dd4 <TIM6_DAC_IRQHandler+0x10>)
 8004dca:	f007 ff49 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	24000e08 	.word	0x24000e08

08004dd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ddc:	4802      	ldr	r0, [pc, #8]	; (8004de8 <TIM7_IRQHandler+0x10>)
 8004dde:	f007 ff3f 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	24000e54 	.word	0x24000e54

08004dec <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <UART7_IRQHandler+0x10>)
 8004df2:	f009 fa33 	bl	800e25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	240010f8 	.word	0x240010f8

08004e00 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <TIM16_IRQHandler+0x10>)
 8004e06:	f007 ff2b 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	24000fd0 	.word	0x24000fd0

08004e14 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004e18:	4802      	ldr	r0, [pc, #8]	; (8004e24 <TIM17_IRQHandler+0x10>)
 8004e1a:	f007 ff21 	bl	800cc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	2400101c 	.word	0x2400101c

08004e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	return 1;
 8004e2c:	2301      	movs	r3, #1
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <_kill>:

int _kill(int pid, int sig)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e42:	f00c fc63 	bl	801170c <__errno>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2216      	movs	r2, #22
 8004e4a:	601a      	str	r2, [r3, #0]
	return -1;
 8004e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_exit>:

void _exit (int status)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ffe7 	bl	8004e38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e6a:	e7fe      	b.n	8004e6a <_exit+0x12>

08004e6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e00a      	b.n	8004e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e7e:	f3af 8000 	nop.w
 8004e82:	4601      	mov	r1, r0
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	60ba      	str	r2, [r7, #8]
 8004e8a:	b2ca      	uxtb	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3301      	adds	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	dbf0      	blt.n	8004e7e <_read+0x12>
	}

return len;
 8004e9c:	687b      	ldr	r3, [r7, #4]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e009      	b.n	8004ecc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	60ba      	str	r2, [r7, #8]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	dbf1      	blt.n	8004eb8 <_write+0x12>
	}
	return len;
 8004ed4:	687b      	ldr	r3, [r7, #4]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <_close>:

int _close(int file)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f06:	605a      	str	r2, [r3, #4]
	return 0;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <_isatty>:

int _isatty(int file)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8004f1e:	2301      	movs	r3, #1
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
	return 0;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <_sbrk+0x5c>)
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <_sbrk+0x60>)
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <_sbrk+0x64>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <_sbrk+0x64>)
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <_sbrk+0x68>)
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <_sbrk+0x64>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d207      	bcs.n	8004f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f78:	f00c fbc8 	bl	801170c <__errno>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	220c      	movs	r2, #12
 8004f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f86:	e009      	b.n	8004f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f88:	4b08      	ldr	r3, [pc, #32]	; (8004fac <_sbrk+0x64>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <_sbrk+0x64>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4413      	add	r3, r2
 8004f96:	4a05      	ldr	r2, [pc, #20]	; (8004fac <_sbrk+0x64>)
 8004f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	24001c08 	.word	0x24001c08
 8004fa8:	00000400 	.word	0x00000400
 8004fac:	24000c88 	.word	0x24000c88
 8004fb0:	24001608 	.word	0x24001608

08004fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004fb8:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <SystemInit+0xec>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	4a38      	ldr	r2, [pc, #224]	; (80050a0 <SystemInit+0xec>)
 8004fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <SystemInit+0xf0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	2b06      	cmp	r3, #6
 8004fd2:	d807      	bhi.n	8004fe4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004fd4:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <SystemInit+0xf0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f023 030f 	bic.w	r3, r3, #15
 8004fdc:	4a31      	ldr	r2, [pc, #196]	; (80050a4 <SystemInit+0xf0>)
 8004fde:	f043 0307 	orr.w	r3, r3, #7
 8004fe2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004fe4:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <SystemInit+0xf4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <SystemInit+0xf4>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <SystemInit+0xf4>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <SystemInit+0xf4>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	492b      	ldr	r1, [pc, #172]	; (80050a8 <SystemInit+0xf4>)
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <SystemInit+0xf8>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005002:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <SystemInit+0xf0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800500e:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <SystemInit+0xf0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 030f 	bic.w	r3, r3, #15
 8005016:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <SystemInit+0xf0>)
 8005018:	f043 0307 	orr.w	r3, r3, #7
 800501c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <SystemInit+0xf4>)
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <SystemInit+0xf4>)
 8005026:	2200      	movs	r2, #0
 8005028:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <SystemInit+0xf4>)
 800502c:	2200      	movs	r2, #0
 800502e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <SystemInit+0xf4>)
 8005032:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <SystemInit+0xfc>)
 8005034:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005036:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <SystemInit+0xf4>)
 8005038:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <SystemInit+0x100>)
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800503c:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <SystemInit+0xf4>)
 800503e:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <SystemInit+0x104>)
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005042:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <SystemInit+0xf4>)
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <SystemInit+0xf4>)
 800504a:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <SystemInit+0x104>)
 800504c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800504e:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <SystemInit+0xf4>)
 8005050:	2200      	movs	r2, #0
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <SystemInit+0xf4>)
 8005056:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <SystemInit+0x104>)
 8005058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <SystemInit+0xf4>)
 800505c:	2200      	movs	r2, #0
 800505e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <SystemInit+0xf4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <SystemInit+0xf4>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <SystemInit+0xf4>)
 800506e:	2200      	movs	r2, #0
 8005070:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <SystemInit+0x108>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <SystemInit+0x10c>)
 8005078:	4013      	ands	r3, r2
 800507a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507e:	d202      	bcs.n	8005086 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005080:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <SystemInit+0x110>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <SystemInit+0x114>)
 8005088:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800508c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <SystemInit+0xec>)
 8005090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005094:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005096:	bf00      	nop
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000ed00 	.word	0xe000ed00
 80050a4:	52002000 	.word	0x52002000
 80050a8:	58024400 	.word	0x58024400
 80050ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80050b0:	02020200 	.word	0x02020200
 80050b4:	01ff0000 	.word	0x01ff0000
 80050b8:	01010280 	.word	0x01010280
 80050bc:	5c001000 	.word	0x5c001000
 80050c0:	ffff0000 	.word	0xffff0000
 80050c4:	51008108 	.word	0x51008108
 80050c8:	52004000 	.word	0x52004000

080050cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b09a      	sub	sp, #104	; 0x68
 80050d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	609a      	str	r2, [r3, #8]
 80050de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	611a      	str	r2, [r3, #16]
 80050fc:	615a      	str	r2, [r3, #20]
 80050fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	222c      	movs	r2, #44	; 0x2c
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f00c fb2a 	bl	8011760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800510c:	4b44      	ldr	r3, [pc, #272]	; (8005220 <MX_TIM1_Init+0x154>)
 800510e:	4a45      	ldr	r2, [pc, #276]	; (8005224 <MX_TIM1_Init+0x158>)
 8005110:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005112:	4b43      	ldr	r3, [pc, #268]	; (8005220 <MX_TIM1_Init+0x154>)
 8005114:	22c7      	movs	r2, #199	; 0xc7
 8005116:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005118:	4b41      	ldr	r3, [pc, #260]	; (8005220 <MX_TIM1_Init+0x154>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800511e:	4b40      	ldr	r3, [pc, #256]	; (8005220 <MX_TIM1_Init+0x154>)
 8005120:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <MX_TIM1_Init+0x154>)
 8005128:	2200      	movs	r2, #0
 800512a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800512c:	4b3c      	ldr	r3, [pc, #240]	; (8005220 <MX_TIM1_Init+0x154>)
 800512e:	2200      	movs	r2, #0
 8005130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005132:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <MX_TIM1_Init+0x154>)
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005138:	4839      	ldr	r0, [pc, #228]	; (8005220 <MX_TIM1_Init+0x154>)
 800513a:	f007 fb24 	bl	800c786 <HAL_TIM_Base_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005144:	f7ff fba6 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800514c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800514e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005152:	4619      	mov	r1, r3
 8005154:	4832      	ldr	r0, [pc, #200]	; (8005220 <MX_TIM1_Init+0x154>)
 8005156:	f007 ffb7 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005160:	f7ff fb98 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005164:	482e      	ldr	r0, [pc, #184]	; (8005220 <MX_TIM1_Init+0x154>)
 8005166:	f007 fc0c 	bl	800c982 <HAL_TIM_PWM_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005170:	f7ff fb90 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005174:	2300      	movs	r3, #0
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005178:	2300      	movs	r3, #0
 800517a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800517c:	2300      	movs	r3, #0
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005180:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005184:	4619      	mov	r1, r3
 8005186:	4826      	ldr	r0, [pc, #152]	; (8005220 <MX_TIM1_Init+0x154>)
 8005188:	f008 fcf2 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005192:	f7ff fb7f 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005196:	2360      	movs	r3, #96	; 0x60
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800519a:	f240 1339 	movw	r3, #313	; 0x139
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051a0:	2300      	movs	r3, #0
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051ac:	2300      	movs	r3, #0
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051b0:	2300      	movs	r3, #0
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051b8:	2204      	movs	r2, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4818      	ldr	r0, [pc, #96]	; (8005220 <MX_TIM1_Init+0x154>)
 80051be:	f007 fe6f 	bl	800cea0 <HAL_TIM_PWM_ConfigChannel>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80051c8:	f7ff fb64 	bl	8004894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80051ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4807      	ldr	r0, [pc, #28]	; (8005220 <MX_TIM1_Init+0x154>)
 8005202:	f008 fd43 	bl	800dc8c <HAL_TIMEx_ConfigBreakDeadTime>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800520c:	f7ff fb42 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005210:	4803      	ldr	r0, [pc, #12]	; (8005220 <MX_TIM1_Init+0x154>)
 8005212:	f000 fd0f 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 8005216:	bf00      	nop
 8005218:	3768      	adds	r7, #104	; 0x68
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	24000c8c 	.word	0x24000c8c
 8005224:	40010000 	.word	0x40010000

08005228 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08e      	sub	sp, #56	; 0x38
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800522e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800523c:	f107 031c 	add.w	r3, r7, #28
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005248:	463b      	mov	r3, r7
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	605a      	str	r2, [r3, #4]
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	60da      	str	r2, [r3, #12]
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	615a      	str	r2, [r3, #20]
 8005258:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800525a:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <MX_TIM2_Init+0xec>)
 800525c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005260:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005262:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <MX_TIM2_Init+0xec>)
 8005264:	22c7      	movs	r2, #199	; 0xc7
 8005266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005268:	4b2a      	ldr	r3, [pc, #168]	; (8005314 <MX_TIM2_Init+0xec>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800526e:	4b29      	ldr	r3, [pc, #164]	; (8005314 <MX_TIM2_Init+0xec>)
 8005270:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005276:	4b27      	ldr	r3, [pc, #156]	; (8005314 <MX_TIM2_Init+0xec>)
 8005278:	2200      	movs	r2, #0
 800527a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <MX_TIM2_Init+0xec>)
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005282:	4824      	ldr	r0, [pc, #144]	; (8005314 <MX_TIM2_Init+0xec>)
 8005284:	f007 fa7f 	bl	800c786 <HAL_TIM_Base_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800528e:	f7ff fb01 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529c:	4619      	mov	r1, r3
 800529e:	481d      	ldr	r0, [pc, #116]	; (8005314 <MX_TIM2_Init+0xec>)
 80052a0:	f007 ff12 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80052aa:	f7ff faf3 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052ae:	4819      	ldr	r0, [pc, #100]	; (8005314 <MX_TIM2_Init+0xec>)
 80052b0:	f007 fb67 	bl	800c982 <HAL_TIM_PWM_Init>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80052ba:	f7ff faeb 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052c6:	f107 031c 	add.w	r3, r7, #28
 80052ca:	4619      	mov	r1, r3
 80052cc:	4811      	ldr	r0, [pc, #68]	; (8005314 <MX_TIM2_Init+0xec>)
 80052ce:	f008 fc4f 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80052d8:	f7ff fadc 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052dc:	2360      	movs	r3, #96	; 0x60
 80052de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80052e0:	f240 1339 	movw	r3, #313	; 0x139
 80052e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052ee:	463b      	mov	r3, r7
 80052f0:	2208      	movs	r2, #8
 80052f2:	4619      	mov	r1, r3
 80052f4:	4807      	ldr	r0, [pc, #28]	; (8005314 <MX_TIM2_Init+0xec>)
 80052f6:	f007 fdd3 	bl	800cea0 <HAL_TIM_PWM_ConfigChannel>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005300:	f7ff fac8 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <MX_TIM2_Init+0xec>)
 8005306:	f000 fc95 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 800530a:	bf00      	nop
 800530c:	3738      	adds	r7, #56	; 0x38
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	24000cd8 	.word	0x24000cd8

08005318 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	; 0x38
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800531e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800532c:	f107 031c 	add.w	r3, r7, #28
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005338:	463b      	mov	r3, r7
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	611a      	str	r2, [r3, #16]
 8005346:	615a      	str	r2, [r3, #20]
 8005348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800534a:	4b2d      	ldr	r3, [pc, #180]	; (8005400 <MX_TIM3_Init+0xe8>)
 800534c:	4a2d      	ldr	r2, [pc, #180]	; (8005404 <MX_TIM3_Init+0xec>)
 800534e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <MX_TIM3_Init+0xe8>)
 8005352:	22c7      	movs	r2, #199	; 0xc7
 8005354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <MX_TIM3_Init+0xe8>)
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <MX_TIM3_Init+0xe8>)
 800535e:	f640 125f 	movw	r2, #2399	; 0x95f
 8005362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <MX_TIM3_Init+0xe8>)
 8005366:	2200      	movs	r2, #0
 8005368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <MX_TIM3_Init+0xe8>)
 800536c:	2280      	movs	r2, #128	; 0x80
 800536e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005370:	4823      	ldr	r0, [pc, #140]	; (8005400 <MX_TIM3_Init+0xe8>)
 8005372:	f007 fa08 	bl	800c786 <HAL_TIM_Base_Init>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800537c:	f7ff fa8a 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800538a:	4619      	mov	r1, r3
 800538c:	481c      	ldr	r0, [pc, #112]	; (8005400 <MX_TIM3_Init+0xe8>)
 800538e:	f007 fe9b 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005398:	f7ff fa7c 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800539c:	4818      	ldr	r0, [pc, #96]	; (8005400 <MX_TIM3_Init+0xe8>)
 800539e:	f007 faf0 	bl	800c982 <HAL_TIM_PWM_Init>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80053a8:	f7ff fa74 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053b4:	f107 031c 	add.w	r3, r7, #28
 80053b8:	4619      	mov	r1, r3
 80053ba:	4811      	ldr	r0, [pc, #68]	; (8005400 <MX_TIM3_Init+0xe8>)
 80053bc:	f008 fbd8 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80053c6:	f7ff fa65 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053ca:	2360      	movs	r3, #96	; 0x60
 80053cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053da:	463b      	mov	r3, r7
 80053dc:	2200      	movs	r2, #0
 80053de:	4619      	mov	r1, r3
 80053e0:	4807      	ldr	r0, [pc, #28]	; (8005400 <MX_TIM3_Init+0xe8>)
 80053e2:	f007 fd5d 	bl	800cea0 <HAL_TIM_PWM_ConfigChannel>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80053ec:	f7ff fa52 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80053f0:	4803      	ldr	r0, [pc, #12]	; (8005400 <MX_TIM3_Init+0xe8>)
 80053f2:	f000 fc1f 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 80053f6:	bf00      	nop
 80053f8:	3738      	adds	r7, #56	; 0x38
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	24000d24 	.word	0x24000d24
 8005404:	40000400 	.word	0x40000400

08005408 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	; 0x38
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800540e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005428:	463b      	mov	r3, r7
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	611a      	str	r2, [r3, #16]
 8005436:	615a      	str	r2, [r3, #20]
 8005438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800543a:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <MX_TIM4_Init+0xe8>)
 800543c:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <MX_TIM4_Init+0xec>)
 800543e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005440:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <MX_TIM4_Init+0xe8>)
 8005442:	22ef      	movs	r2, #239	; 0xef
 8005444:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <MX_TIM4_Init+0xe8>)
 8005448:	2200      	movs	r2, #0
 800544a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800544c:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <MX_TIM4_Init+0xe8>)
 800544e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005452:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005454:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <MX_TIM4_Init+0xe8>)
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800545a:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <MX_TIM4_Init+0xe8>)
 800545c:	2280      	movs	r2, #128	; 0x80
 800545e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005460:	4823      	ldr	r0, [pc, #140]	; (80054f0 <MX_TIM4_Init+0xe8>)
 8005462:	f007 f990 	bl	800c786 <HAL_TIM_Base_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800546c:	f7ff fa12 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800547a:	4619      	mov	r1, r3
 800547c:	481c      	ldr	r0, [pc, #112]	; (80054f0 <MX_TIM4_Init+0xe8>)
 800547e:	f007 fe23 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005488:	f7ff fa04 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800548c:	4818      	ldr	r0, [pc, #96]	; (80054f0 <MX_TIM4_Init+0xe8>)
 800548e:	f007 fa78 	bl	800c982 <HAL_TIM_PWM_Init>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005498:	f7ff f9fc 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054a4:	f107 031c 	add.w	r3, r7, #28
 80054a8:	4619      	mov	r1, r3
 80054aa:	4811      	ldr	r0, [pc, #68]	; (80054f0 <MX_TIM4_Init+0xe8>)
 80054ac:	f008 fb60 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80054b6:	f7ff f9ed 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054ba:	2360      	movs	r3, #96	; 0x60
 80054bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054ca:	463b      	mov	r3, r7
 80054cc:	2208      	movs	r2, #8
 80054ce:	4619      	mov	r1, r3
 80054d0:	4807      	ldr	r0, [pc, #28]	; (80054f0 <MX_TIM4_Init+0xe8>)
 80054d2:	f007 fce5 	bl	800cea0 <HAL_TIM_PWM_ConfigChannel>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80054dc:	f7ff f9da 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80054e0:	4803      	ldr	r0, [pc, #12]	; (80054f0 <MX_TIM4_Init+0xe8>)
 80054e2:	f000 fba7 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 80054e6:	bf00      	nop
 80054e8:	3738      	adds	r7, #56	; 0x38
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	24000d70 	.word	0x24000d70
 80054f4:	40000800 	.word	0x40000800

080054f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054fe:	f107 0310 	add.w	r3, r7, #16
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	605a      	str	r2, [r3, #4]
 8005514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005516:	4b1d      	ldr	r3, [pc, #116]	; (800558c <MX_TIM5_Init+0x94>)
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <MX_TIM5_Init+0x98>)
 800551a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <MX_TIM5_Init+0x94>)
 800551e:	22c7      	movs	r2, #199	; 0xc7
 8005520:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <MX_TIM5_Init+0x94>)
 8005524:	2200      	movs	r2, #0
 8005526:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005528:	4b18      	ldr	r3, [pc, #96]	; (800558c <MX_TIM5_Init+0x94>)
 800552a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800552e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005530:	4b16      	ldr	r3, [pc, #88]	; (800558c <MX_TIM5_Init+0x94>)
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <MX_TIM5_Init+0x94>)
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800553c:	4813      	ldr	r0, [pc, #76]	; (800558c <MX_TIM5_Init+0x94>)
 800553e:	f007 f922 	bl	800c786 <HAL_TIM_Base_Init>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005548:	f7ff f9a4 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800554c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005550:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005552:	f107 0310 	add.w	r3, r7, #16
 8005556:	4619      	mov	r1, r3
 8005558:	480c      	ldr	r0, [pc, #48]	; (800558c <MX_TIM5_Init+0x94>)
 800555a:	f007 fdb5 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005564:	f7ff f996 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005570:	1d3b      	adds	r3, r7, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4805      	ldr	r0, [pc, #20]	; (800558c <MX_TIM5_Init+0x94>)
 8005576:	f008 fafb 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005580:	f7ff f988 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005584:	bf00      	nop
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	24000dbc 	.word	0x24000dbc
 8005590:	40000c00 	.word	0x40000c00

08005594 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <MX_TIM6_Init+0x68>)
 80055a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055ac:	22c7      	movs	r2, #199	; 0xc7
 80055ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055b0:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055b8:	f241 726f 	movw	r2, #5999	; 0x176f
 80055bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80055c4:	480c      	ldr	r0, [pc, #48]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055c6:	f007 f8de 	bl	800c786 <HAL_TIM_Base_Init>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80055d0:	f7ff f960 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055d4:	2300      	movs	r3, #0
 80055d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4805      	ldr	r0, [pc, #20]	; (80055f8 <MX_TIM6_Init+0x64>)
 80055e2:	f008 fac5 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80055ec:	f7ff f952 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	24000e08 	.word	0x24000e08
 80055fc:	40001000 	.word	0x40001000

08005600 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005610:	4b14      	ldr	r3, [pc, #80]	; (8005664 <MX_TIM7_Init+0x64>)
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <MX_TIM7_Init+0x68>)
 8005614:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <MX_TIM7_Init+0x64>)
 8005618:	22c7      	movs	r2, #199	; 0xc7
 800561a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <MX_TIM7_Init+0x64>)
 800561e:	2200      	movs	r2, #0
 8005620:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <MX_TIM7_Init+0x64>)
 8005624:	f240 42af 	movw	r2, #1199	; 0x4af
 8005628:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800562a:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <MX_TIM7_Init+0x64>)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005630:	480c      	ldr	r0, [pc, #48]	; (8005664 <MX_TIM7_Init+0x64>)
 8005632:	f007 f8a8 	bl	800c786 <HAL_TIM_Base_Init>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800563c:	f7ff f92a 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005640:	2300      	movs	r3, #0
 8005642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	4619      	mov	r1, r3
 800564c:	4805      	ldr	r0, [pc, #20]	; (8005664 <MX_TIM7_Init+0x64>)
 800564e:	f008 fa8f 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005658:	f7ff f91c 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	24000e54 	.word	0x24000e54
 8005668:	40001400 	.word	0x40001400

0800566c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005672:	463b      	mov	r3, r7
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <MX_TIM12_Init+0x6c>)
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <MX_TIM12_Init+0x70>)
 8005682:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005684:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <MX_TIM12_Init+0x6c>)
 8005686:	22c7      	movs	r2, #199	; 0xc7
 8005688:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <MX_TIM12_Init+0x6c>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <MX_TIM12_Init+0x6c>)
 8005692:	f240 2257 	movw	r2, #599	; 0x257
 8005696:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <MX_TIM12_Init+0x6c>)
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <MX_TIM12_Init+0x6c>)
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80056a4:	480c      	ldr	r0, [pc, #48]	; (80056d8 <MX_TIM12_Init+0x6c>)
 80056a6:	f007 f86e 	bl	800c786 <HAL_TIM_Base_Init>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80056b0:	f7ff f8f0 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80056ba:	463b      	mov	r3, r7
 80056bc:	4619      	mov	r1, r3
 80056be:	4806      	ldr	r0, [pc, #24]	; (80056d8 <MX_TIM12_Init+0x6c>)
 80056c0:	f007 fd02 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80056ca:	f7ff f8e3 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	24000ea0 	.word	0x24000ea0
 80056dc:	40001800 	.word	0x40001800

080056e0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <MX_TIM13_Init+0x40>)
 80056e6:	4a0f      	ldr	r2, [pc, #60]	; (8005724 <MX_TIM13_Init+0x44>)
 80056e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <MX_TIM13_Init+0x40>)
 80056ec:	22c7      	movs	r2, #199	; 0xc7
 80056ee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <MX_TIM13_Init+0x40>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <MX_TIM13_Init+0x40>)
 80056f8:	f240 2257 	movw	r2, #599	; 0x257
 80056fc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <MX_TIM13_Init+0x40>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <MX_TIM13_Init+0x40>)
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800570a:	4805      	ldr	r0, [pc, #20]	; (8005720 <MX_TIM13_Init+0x40>)
 800570c:	f007 f83b 	bl	800c786 <HAL_TIM_Base_Init>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005716:	f7ff f8bd 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	24000eec 	.word	0x24000eec
 8005724:	40001c00 	.word	0x40001c00

08005728 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <MX_TIM14_Init+0x40>)
 800572e:	4a0f      	ldr	r2, [pc, #60]	; (800576c <MX_TIM14_Init+0x44>)
 8005730:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <MX_TIM14_Init+0x40>)
 8005734:	22c7      	movs	r2, #199	; 0xc7
 8005736:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <MX_TIM14_Init+0x40>)
 800573a:	2200      	movs	r2, #0
 800573c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <MX_TIM14_Init+0x40>)
 8005740:	f640 125f 	movw	r2, #2399	; 0x95f
 8005744:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <MX_TIM14_Init+0x40>)
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <MX_TIM14_Init+0x40>)
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005752:	4805      	ldr	r0, [pc, #20]	; (8005768 <MX_TIM14_Init+0x40>)
 8005754:	f007 f817 	bl	800c786 <HAL_TIM_Base_Init>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800575e:	f7ff f899 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	24000f38 	.word	0x24000f38
 800576c:	40002000 	.word	0x40002000

08005770 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b09a      	sub	sp, #104	; 0x68
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	605a      	str	r2, [r3, #4]
 8005780:	609a      	str	r2, [r3, #8]
 8005782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
 80057a0:	615a      	str	r2, [r3, #20]
 80057a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	222c      	movs	r2, #44	; 0x2c
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f00b ffd8 	bl	8011760 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80057b0:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057b2:	4a40      	ldr	r2, [pc, #256]	; (80058b4 <MX_TIM15_Init+0x144>)
 80057b4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057b8:	22ef      	movs	r2, #239	; 0xef
 80057ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057bc:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057c4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80057c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ca:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80057d0:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057d6:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80057dc:	4834      	ldr	r0, [pc, #208]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057de:	f006 ffd2 	bl	800c786 <HAL_TIM_Base_Init>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80057e8:	f7ff f854 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80057f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057f6:	4619      	mov	r1, r3
 80057f8:	482d      	ldr	r0, [pc, #180]	; (80058b0 <MX_TIM15_Init+0x140>)
 80057fa:	f007 fc65 	bl	800d0c8 <HAL_TIM_ConfigClockSource>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005804:	f7ff f846 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005808:	4829      	ldr	r0, [pc, #164]	; (80058b0 <MX_TIM15_Init+0x140>)
 800580a:	f007 f8ba 	bl	800c982 <HAL_TIM_PWM_Init>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005814:	f7ff f83e 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005818:	2300      	movs	r3, #0
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800581c:	2300      	movs	r3, #0
 800581e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005820:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005824:	4619      	mov	r1, r3
 8005826:	4822      	ldr	r0, [pc, #136]	; (80058b0 <MX_TIM15_Init+0x140>)
 8005828:	f008 f9a2 	bl	800db70 <HAL_TIMEx_MasterConfigSynchronization>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005832:	f7ff f82f 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005836:	2360      	movs	r3, #96	; 0x60
 8005838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800583a:	f240 1339 	movw	r3, #313	; 0x139
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005840:	2300      	movs	r3, #0
 8005842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005844:	2300      	movs	r3, #0
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800584c:	2300      	movs	r3, #0
 800584e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005850:	2300      	movs	r3, #0
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005858:	2204      	movs	r2, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4814      	ldr	r0, [pc, #80]	; (80058b0 <MX_TIM15_Init+0x140>)
 800585e:	f007 fb1f 	bl	800cea0 <HAL_TIM_PWM_ConfigChannel>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005868:	f7ff f814 	bl	8004894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800586c:	2300      	movs	r3, #0
 800586e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005870:	2300      	movs	r3, #0
 8005872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800588a:	2300      	movs	r3, #0
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4807      	ldr	r0, [pc, #28]	; (80058b0 <MX_TIM15_Init+0x140>)
 8005894:	f008 f9fa 	bl	800dc8c <HAL_TIMEx_ConfigBreakDeadTime>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800589e:	f7fe fff9 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80058a2:	4803      	ldr	r0, [pc, #12]	; (80058b0 <MX_TIM15_Init+0x140>)
 80058a4:	f000 f9c6 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 80058a8:	bf00      	nop
 80058aa:	3768      	adds	r7, #104	; 0x68
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	24000f84 	.word	0x24000f84
 80058b4:	40014000 	.word	0x40014000

080058b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <MX_TIM16_Init+0x44>)
 80058be:	4a10      	ldr	r2, [pc, #64]	; (8005900 <MX_TIM16_Init+0x48>)
 80058c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80058c2:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <MX_TIM16_Init+0x44>)
 80058c4:	22ef      	movs	r2, #239	; 0xef
 80058c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <MX_TIM16_Init+0x44>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <MX_TIM16_Init+0x44>)
 80058d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <MX_TIM16_Init+0x44>)
 80058d8:	2200      	movs	r2, #0
 80058da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <MX_TIM16_Init+0x44>)
 80058de:	2200      	movs	r2, #0
 80058e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <MX_TIM16_Init+0x44>)
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80058e8:	4804      	ldr	r0, [pc, #16]	; (80058fc <MX_TIM16_Init+0x44>)
 80058ea:	f006 ff4c 	bl	800c786 <HAL_TIM_Base_Init>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80058f4:	f7fe ffce 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80058f8:	bf00      	nop
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	24000fd0 	.word	0x24000fd0
 8005900:	40014400 	.word	0x40014400

08005904 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <MX_TIM17_Init+0x44>)
 800590a:	4a10      	ldr	r2, [pc, #64]	; (800594c <MX_TIM17_Init+0x48>)
 800590c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 800590e:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <MX_TIM17_Init+0x44>)
 8005910:	22ef      	movs	r2, #239	; 0xef
 8005912:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <MX_TIM17_Init+0x44>)
 8005916:	2200      	movs	r2, #0
 8005918:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <MX_TIM17_Init+0x44>)
 800591c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005920:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <MX_TIM17_Init+0x44>)
 8005924:	2200      	movs	r2, #0
 8005926:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <MX_TIM17_Init+0x44>)
 800592a:	2200      	movs	r2, #0
 800592c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <MX_TIM17_Init+0x44>)
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005934:	4804      	ldr	r0, [pc, #16]	; (8005948 <MX_TIM17_Init+0x44>)
 8005936:	f006 ff26 	bl	800c786 <HAL_TIM_Base_Init>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005940:	f7fe ffa8 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005944:	bf00      	nop
 8005946:	bd80      	pop	{r7, pc}
 8005948:	2400101c 	.word	0x2400101c
 800594c:	40014800 	.word	0x40014800

08005950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b090      	sub	sp, #64	; 0x40
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4aa8      	ldr	r2, [pc, #672]	; (8005c00 <HAL_TIM_Base_MspInit+0x2b0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10f      	bne.n	8005982 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005962:	4ba8      	ldr	r3, [pc, #672]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005968:	4aa6      	ldr	r2, [pc, #664]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005972:	4ba4      	ldr	r3, [pc, #656]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005980:	e13a      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598a:	d10f      	bne.n	80059ac <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800598c:	4b9d      	ldr	r3, [pc, #628]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 800598e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005992:	4a9c      	ldr	r2, [pc, #624]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800599c:	4b99      	ldr	r3, [pc, #612]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 800599e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80059aa:	e125      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a95      	ldr	r2, [pc, #596]	; (8005c08 <HAL_TIM_Base_MspInit+0x2b8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10f      	bne.n	80059d6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059b6:	4b93      	ldr	r3, [pc, #588]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 80059b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059bc:	4a91      	ldr	r2, [pc, #580]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 80059be:	f043 0302 	orr.w	r3, r3, #2
 80059c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059c6:	4b8f      	ldr	r3, [pc, #572]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 80059c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059d4:	e110      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a8c      	ldr	r2, [pc, #560]	; (8005c0c <HAL_TIM_Base_MspInit+0x2bc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10f      	bne.n	8005a00 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059e0:	4b88      	ldr	r3, [pc, #544]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 80059e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059e6:	4a87      	ldr	r2, [pc, #540]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059f0:	4b84      	ldr	r3, [pc, #528]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 80059f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80059fe:	e0fb      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a82      	ldr	r2, [pc, #520]	; (8005c10 <HAL_TIM_Base_MspInit+0x2c0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d117      	bne.n	8005a3a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005a0a:	4b7e      	ldr	r3, [pc, #504]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a10:	4a7c      	ldr	r2, [pc, #496]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a12:	f043 0308 	orr.w	r3, r3, #8
 8005a16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a1a:	4b7a      	ldr	r3, [pc, #488]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	2032      	movs	r0, #50	; 0x32
 8005a2e:	f000 ffce 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005a32:	2032      	movs	r0, #50	; 0x32
 8005a34:	f000 ffe5 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005a38:	e0de      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a75      	ldr	r2, [pc, #468]	; (8005c14 <HAL_TIM_Base_MspInit+0x2c4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d117      	bne.n	8005a74 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005a44:	4b6f      	ldr	r3, [pc, #444]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a4a:	4a6e      	ldr	r2, [pc, #440]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a4c:	f043 0310 	orr.w	r3, r3, #16
 8005a50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a54:	4b6b      	ldr	r3, [pc, #428]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2100      	movs	r1, #0
 8005a66:	2036      	movs	r0, #54	; 0x36
 8005a68:	f000 ffb1 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a6c:	2036      	movs	r0, #54	; 0x36
 8005a6e:	f000 ffc8 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005a72:	e0c1      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a67      	ldr	r2, [pc, #412]	; (8005c18 <HAL_TIM_Base_MspInit+0x2c8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d117      	bne.n	8005aae <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a7e:	4b61      	ldr	r3, [pc, #388]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a84:	4a5f      	ldr	r2, [pc, #380]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a8e:	4b5d      	ldr	r3, [pc, #372]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	2037      	movs	r0, #55	; 0x37
 8005aa2:	f000 ff94 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005aa6:	2037      	movs	r0, #55	; 0x37
 8005aa8:	f000 ffab 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005aac:	e0a4      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a5a      	ldr	r2, [pc, #360]	; (8005c1c <HAL_TIM_Base_MspInit+0x2cc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d117      	bne.n	8005ae8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005ab8:	4b52      	ldr	r3, [pc, #328]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005abe:	4a51      	ldr	r2, [pc, #324]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ac8:	4b4e      	ldr	r3, [pc, #312]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	202b      	movs	r0, #43	; 0x2b
 8005adc:	f000 ff77 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005ae0:	202b      	movs	r0, #43	; 0x2b
 8005ae2:	f000 ff8e 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005ae6:	e087      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a4c      	ldr	r2, [pc, #304]	; (8005c20 <HAL_TIM_Base_MspInit+0x2d0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d117      	bne.n	8005b22 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005af2:	4b44      	ldr	r3, [pc, #272]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af8:	4a42      	ldr	r2, [pc, #264]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b02:	4b40      	ldr	r3, [pc, #256]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005b10:	2200      	movs	r2, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	202c      	movs	r0, #44	; 0x2c
 8005b16:	f000 ff5a 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005b1a:	202c      	movs	r0, #44	; 0x2c
 8005b1c:	f000 ff71 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005b20:	e06a      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <HAL_TIM_Base_MspInit+0x2d4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d117      	bne.n	8005b5c <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005b2c:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b32:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b3c:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	202d      	movs	r0, #45	; 0x2d
 8005b50:	f000 ff3d 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005b54:	202d      	movs	r0, #45	; 0x2d
 8005b56:	f000 ff54 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005b5a:	e04d      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a31      	ldr	r2, [pc, #196]	; (8005c28 <HAL_TIM_Base_MspInit+0x2d8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d10f      	bne.n	8005b86 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005b66:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b76:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	697b      	ldr	r3, [r7, #20]
}
 8005b84:	e038      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a28      	ldr	r2, [pc, #160]	; (8005c2c <HAL_TIM_Base_MspInit+0x2dc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d117      	bne.n	8005bc0 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005b90:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b96:	4a1b      	ldr	r2, [pc, #108]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ba0:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	2075      	movs	r0, #117	; 0x75
 8005bb4:	f000 ff0b 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005bb8:	2075      	movs	r0, #117	; 0x75
 8005bba:	f000 ff22 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005bbe:	e01b      	b.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <HAL_TIM_Base_MspInit+0x2e0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d116      	bne.n	8005bf8 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005bca:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bd0:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005bda:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <HAL_TIM_Base_MspInit+0x2b4>)
 8005bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005be8:	2200      	movs	r2, #0
 8005bea:	2100      	movs	r1, #0
 8005bec:	2076      	movs	r0, #118	; 0x76
 8005bee:	f000 feee 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005bf2:	2076      	movs	r0, #118	; 0x76
 8005bf4:	f000 ff05 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8005bf8:	bf00      	nop
 8005bfa:	3740      	adds	r7, #64	; 0x40
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40010000 	.word	0x40010000
 8005c04:	58024400 	.word	0x58024400
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40001000 	.word	0x40001000
 8005c18:	40001400 	.word	0x40001400
 8005c1c:	40001800 	.word	0x40001800
 8005c20:	40001c00 	.word	0x40001c00
 8005c24:	40002000 	.word	0x40002000
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800

08005c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	; 0x30
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c3c:	f107 031c 	add.w	r3, r7, #28
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5e      	ldr	r2, [pc, #376]	; (8005dcc <HAL_TIM_MspPostInit+0x198>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d120      	bne.n	8005c98 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c56:	4b5e      	ldr	r3, [pc, #376]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5c:	4a5c      	ldr	r2, [pc, #368]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005c5e:	f043 0310 	orr.w	r3, r3, #16
 8005c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c66:	4b5a      	ldr	r3, [pc, #360]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8005c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c82:	2300      	movs	r3, #0
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c86:	2301      	movs	r3, #1
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8005c8a:	f107 031c 	add.w	r3, r7, #28
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4850      	ldr	r0, [pc, #320]	; (8005dd4 <HAL_TIM_MspPostInit+0x1a0>)
 8005c92:	f003 ff17 	bl	8009ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005c96:	e094      	b.n	8005dc2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d120      	bne.n	8005ce4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ca2:	4b4b      	ldr	r3, [pc, #300]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca8:	4a49      	ldr	r2, [pc, #292]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005cb2:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8005cd6:	f107 031c 	add.w	r3, r7, #28
 8005cda:	4619      	mov	r1, r3
 8005cdc:	483e      	ldr	r0, [pc, #248]	; (8005dd8 <HAL_TIM_MspPostInit+0x1a4>)
 8005cde:	f003 fef1 	bl	8009ac4 <HAL_GPIO_Init>
}
 8005ce2:	e06e      	b.n	8005dc2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3c      	ldr	r2, [pc, #240]	; (8005ddc <HAL_TIM_MspPostInit+0x1a8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d11f      	bne.n	8005d2e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cee:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cf4:	4a36      	ldr	r2, [pc, #216]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005cfe:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005d0c:	2340      	movs	r3, #64	; 0x40
 8005d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d10:	2302      	movs	r3, #2
 8005d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	4619      	mov	r1, r3
 8005d26:	482e      	ldr	r0, [pc, #184]	; (8005de0 <HAL_TIM_MspPostInit+0x1ac>)
 8005d28:	f003 fecc 	bl	8009ac4 <HAL_GPIO_Init>
}
 8005d2c:	e049      	b.n	8005dc2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <HAL_TIM_MspPostInit+0x1b0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d120      	bne.n	8005d7a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d3e:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d40:	f043 0302 	orr.w	r3, r3, #2
 8005d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8005d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d64:	2300      	movs	r3, #0
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8005d6c:	f107 031c 	add.w	r3, r7, #28
 8005d70:	4619      	mov	r1, r3
 8005d72:	4819      	ldr	r0, [pc, #100]	; (8005dd8 <HAL_TIM_MspPostInit+0x1a4>)
 8005d74:	f003 fea6 	bl	8009ac4 <HAL_GPIO_Init>
}
 8005d78:	e023      	b.n	8005dc2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_TIM_MspPostInit+0x1b4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d11e      	bne.n	8005dc2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d84:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d8a:	4a11      	ldr	r2, [pc, #68]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d8c:	f043 0310 	orr.w	r3, r3, #16
 8005d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <HAL_TIM_MspPostInit+0x19c>)
 8005d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8005da2:	2340      	movs	r3, #64	; 0x40
 8005da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da6:	2302      	movs	r3, #2
 8005da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dae:	2300      	movs	r3, #0
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005db2:	2304      	movs	r3, #4
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8005db6:	f107 031c 	add.w	r3, r7, #28
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4805      	ldr	r0, [pc, #20]	; (8005dd4 <HAL_TIM_MspPostInit+0x1a0>)
 8005dbe:	f003 fe81 	bl	8009ac4 <HAL_GPIO_Init>
}
 8005dc2:	bf00      	nop
 8005dc4:	3730      	adds	r7, #48	; 0x30
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	58021000 	.word	0x58021000
 8005dd8:	58020400 	.word	0x58020400
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	58020000 	.word	0x58020000
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40014000 	.word	0x40014000

08005dec <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005df2:	4a26      	ldr	r2, [pc, #152]	; (8005e8c <MX_UART4_Init+0xa0>)
 8005df4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005df8:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <MX_UART4_Init+0xa4>)
 8005dfa:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005e02:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e10:	220c      	movs	r2, #12
 8005e12:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e14:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e1a:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e20:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e26:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005e2c:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e2e:	2208      	movs	r2, #8
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005e3a:	4813      	ldr	r0, [pc, #76]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e3c:	f007 ffc2 	bl	800ddc4 <HAL_UART_Init>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8005e46:	f7fe fd25 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005e4a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005e4e:	480e      	ldr	r0, [pc, #56]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e50:	f00a f85b 	bl	800ff0a <HAL_UARTEx_SetTxFifoThreshold>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8005e5a:	f7fe fd1b 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005e5e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005e62:	4809      	ldr	r0, [pc, #36]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e64:	f00a f88f 	bl	800ff86 <HAL_UARTEx_SetRxFifoThreshold>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8005e6e:	f7fe fd11 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8005e72:	4805      	ldr	r0, [pc, #20]	; (8005e88 <MX_UART4_Init+0x9c>)
 8005e74:	f009 ffd5 	bl	800fe22 <HAL_UARTEx_EnableFifoMode>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8005e7e:	f7fe fd09 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	24001068 	.word	0x24001068
 8005e8c:	40004c00 	.word	0x40004c00
 8005e90:	001e8480 	.word	0x001e8480

08005e94 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005e98:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <MX_UART7_Init+0x94>)
 8005e9a:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <MX_UART7_Init+0x98>)
 8005e9c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005e9e:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ea4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <MX_UART7_Init+0x94>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <MX_UART7_Init+0x94>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <MX_UART7_Init+0x94>)
 8005eba:	220c      	movs	r2, #12
 8005ebc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec4:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005edc:	4812      	ldr	r0, [pc, #72]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ede:	f007 ff71 	bl	800ddc4 <HAL_UART_Init>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005ee8:	f7fe fcd4 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005eec:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005ef0:	480d      	ldr	r0, [pc, #52]	; (8005f28 <MX_UART7_Init+0x94>)
 8005ef2:	f00a f80a 	bl	800ff0a <HAL_UARTEx_SetTxFifoThreshold>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005efc:	f7fe fcca 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005f00:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005f04:	4808      	ldr	r0, [pc, #32]	; (8005f28 <MX_UART7_Init+0x94>)
 8005f06:	f00a f83e 	bl	800ff86 <HAL_UARTEx_SetRxFifoThreshold>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005f10:	f7fe fcc0 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005f14:	4804      	ldr	r0, [pc, #16]	; (8005f28 <MX_UART7_Init+0x94>)
 8005f16:	f009 ff84 	bl	800fe22 <HAL_UARTEx_EnableFifoMode>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005f20:	f7fe fcb8 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005f24:	bf00      	nop
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	240010f8 	.word	0x240010f8
 8005f2c:	40007800 	.word	0x40007800

08005f30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f34:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f36:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <MX_USART2_UART_Init+0x94>)
 8005f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f3a:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f42:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f48:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f4e:	4b1c      	ldr	r3, [pc, #112]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f54:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f56:	220c      	movs	r2, #12
 8005f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f5a:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f66:	4b16      	ldr	r3, [pc, #88]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f78:	4811      	ldr	r0, [pc, #68]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f7a:	f007 ff23 	bl	800ddc4 <HAL_UART_Init>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005f84:	f7fe fc86 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f88:	2100      	movs	r1, #0
 8005f8a:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f8c:	f009 ffbd 	bl	800ff0a <HAL_UARTEx_SetTxFifoThreshold>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005f96:	f7fe fc7d 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4808      	ldr	r0, [pc, #32]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005f9e:	f009 fff2 	bl	800ff86 <HAL_UARTEx_SetRxFifoThreshold>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005fa8:	f7fe fc74 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005fac:	4804      	ldr	r0, [pc, #16]	; (8005fc0 <MX_USART2_UART_Init+0x90>)
 8005fae:	f009 ff73 	bl	800fe98 <HAL_UARTEx_DisableFifoMode>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005fb8:	f7fe fc6c 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	24001188 	.word	0x24001188
 8005fc4:	40004400 	.word	0x40004400

08005fc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005fcc:	4b22      	ldr	r3, [pc, #136]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005fce:	4a23      	ldr	r2, [pc, #140]	; (800605c <MX_USART3_UART_Init+0x94>)
 8005fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005fd2:	4b21      	ldr	r3, [pc, #132]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fda:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fec:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005fee:	220c      	movs	r2, #12
 8005ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ff2:	4b19      	ldr	r3, [pc, #100]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ffe:	4b16      	ldr	r3, [pc, #88]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8006000:	2200      	movs	r2, #0
 8006002:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006004:	4b14      	ldr	r3, [pc, #80]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8006006:	2200      	movs	r2, #0
 8006008:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <MX_USART3_UART_Init+0x90>)
 800600c:	2200      	movs	r2, #0
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006010:	4811      	ldr	r0, [pc, #68]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8006012:	f007 fed7 	bl	800ddc4 <HAL_UART_Init>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800601c:	f7fe fc3a 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006020:	2100      	movs	r1, #0
 8006022:	480d      	ldr	r0, [pc, #52]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8006024:	f009 ff71 	bl	800ff0a <HAL_UARTEx_SetTxFifoThreshold>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800602e:	f7fe fc31 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006032:	2100      	movs	r1, #0
 8006034:	4808      	ldr	r0, [pc, #32]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8006036:	f009 ffa6 	bl	800ff86 <HAL_UARTEx_SetRxFifoThreshold>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006040:	f7fe fc28 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006044:	4804      	ldr	r0, [pc, #16]	; (8006058 <MX_USART3_UART_Init+0x90>)
 8006046:	f009 ff27 	bl	800fe98 <HAL_UARTEx_DisableFifoMode>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006050:	f7fe fc20 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	24001218 	.word	0x24001218
 800605c:	40004800 	.word	0x40004800

08006060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b0be      	sub	sp, #248	; 0xf8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006068:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	605a      	str	r2, [r3, #4]
 8006072:	609a      	str	r2, [r3, #8]
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800607c:	22bc      	movs	r2, #188	; 0xbc
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f00b fb6d 	bl	8011760 <memset>
  if(uartHandle->Instance==UART4)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4aa1      	ldr	r2, [pc, #644]	; (8006310 <HAL_UART_MspInit+0x2b0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	f040 80b7 	bne.w	8006200 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006092:	2302      	movs	r3, #2
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006096:	2300      	movs	r3, #0
 8006098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800609c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060a0:	4618      	mov	r0, r3
 80060a2:	f004 fee7 	bl	800ae74 <HAL_RCCEx_PeriphCLKConfig>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80060ac:	f7fe fbf2 	bl	8004894 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80060b0:	4b98      	ldr	r3, [pc, #608]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 80060b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060b6:	4a97      	ldr	r2, [pc, #604]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 80060b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060c0:	4b94      	ldr	r3, [pc, #592]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 80060c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060ce:	4b91      	ldr	r3, [pc, #580]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 80060d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060d4:	4a8f      	ldr	r2, [pc, #572]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 80060d6:	f043 0308 	orr.w	r3, r3, #8
 80060da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060de:	4b8d      	ldr	r3, [pc, #564]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 80060e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060ec:	2303      	movs	r3, #3
 80060ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f2:	2302      	movs	r3, #2
 80060f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060fe:	2300      	movs	r3, #0
 8006100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006104:	2308      	movs	r3, #8
 8006106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800610a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800610e:	4619      	mov	r1, r3
 8006110:	4881      	ldr	r0, [pc, #516]	; (8006318 <HAL_UART_MspInit+0x2b8>)
 8006112:	f003 fcd7 	bl	8009ac4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006118:	4a81      	ldr	r2, [pc, #516]	; (8006320 <HAL_UART_MspInit+0x2c0>)
 800611a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800611c:	4b7f      	ldr	r3, [pc, #508]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800611e:	223f      	movs	r2, #63	; 0x3f
 8006120:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006122:	4b7e      	ldr	r3, [pc, #504]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006124:	2200      	movs	r2, #0
 8006126:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006128:	4b7c      	ldr	r3, [pc, #496]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800612a:	2200      	movs	r2, #0
 800612c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800612e:	4b7b      	ldr	r3, [pc, #492]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006134:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006136:	4b79      	ldr	r3, [pc, #484]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800613c:	4b77      	ldr	r3, [pc, #476]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800613e:	2200      	movs	r2, #0
 8006140:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006142:	4b76      	ldr	r3, [pc, #472]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006144:	2200      	movs	r2, #0
 8006146:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006148:	4b74      	ldr	r3, [pc, #464]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800614a:	2200      	movs	r2, #0
 800614c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800614e:	4b73      	ldr	r3, [pc, #460]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006150:	2204      	movs	r2, #4
 8006152:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006154:	4b71      	ldr	r3, [pc, #452]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006156:	2203      	movs	r2, #3
 8006158:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800615a:	4b70      	ldr	r3, [pc, #448]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800615c:	2200      	movs	r2, #0
 800615e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006160:	4b6e      	ldr	r3, [pc, #440]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006162:	2200      	movs	r2, #0
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006166:	486d      	ldr	r0, [pc, #436]	; (800631c <HAL_UART_MspInit+0x2bc>)
 8006168:	f000 fe70 	bl	8006e4c <HAL_DMA_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8006172:	f7fe fb8f 	bl	8004894 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a68      	ldr	r2, [pc, #416]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800617a:	67da      	str	r2, [r3, #124]	; 0x7c
 800617c:	4a67      	ldr	r2, [pc, #412]	; (800631c <HAL_UART_MspInit+0x2bc>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006182:	4b68      	ldr	r3, [pc, #416]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 8006184:	4a68      	ldr	r2, [pc, #416]	; (8006328 <HAL_UART_MspInit+0x2c8>)
 8006186:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006188:	4b66      	ldr	r3, [pc, #408]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800618e:	4b65      	ldr	r3, [pc, #404]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 8006190:	2240      	movs	r2, #64	; 0x40
 8006192:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006194:	4b63      	ldr	r3, [pc, #396]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 8006196:	2200      	movs	r2, #0
 8006198:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800619a:	4b62      	ldr	r3, [pc, #392]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 800619c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061a0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061a2:	4b60      	ldr	r3, [pc, #384]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061a8:	4b5e      	ldr	r3, [pc, #376]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80061ae:	4b5d      	ldr	r3, [pc, #372]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061b4:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061ba:	4b5a      	ldr	r3, [pc, #360]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061bc:	2204      	movs	r2, #4
 80061be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061c0:	4b58      	ldr	r3, [pc, #352]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061c2:	2203      	movs	r2, #3
 80061c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80061c6:	4b57      	ldr	r3, [pc, #348]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80061cc:	4b55      	ldr	r3, [pc, #340]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80061d2:	4854      	ldr	r0, [pc, #336]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061d4:	f000 fe3a 	bl	8006e4c <HAL_DMA_Init>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80061de:	f7fe fb59 	bl	8004894 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a4f      	ldr	r2, [pc, #316]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061e6:	679a      	str	r2, [r3, #120]	; 0x78
 80061e8:	4a4e      	ldr	r2, [pc, #312]	; (8006324 <HAL_UART_MspInit+0x2c4>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2100      	movs	r1, #0
 80061f2:	2034      	movs	r0, #52	; 0x34
 80061f4:	f000 fbeb 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80061f8:	2034      	movs	r0, #52	; 0x34
 80061fa:	f000 fc02 	bl	8006a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80061fe:	e20d      	b.n	800661c <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a49      	ldr	r2, [pc, #292]	; (800632c <HAL_UART_MspInit+0x2cc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f040 8098 	bne.w	800633c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800620c:	2302      	movs	r3, #2
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800621a:	4618      	mov	r0, r3
 800621c:	f004 fe2a 	bl	800ae74 <HAL_RCCEx_PeriphCLKConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006226:	f7fe fb35 	bl	8004894 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800622a:	4b3a      	ldr	r3, [pc, #232]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 800622c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006230:	4a38      	ldr	r2, [pc, #224]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 8006232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800623a:	4b36      	ldr	r3, [pc, #216]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 800623c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006240:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006248:	4b32      	ldr	r3, [pc, #200]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 800624a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800624e:	4a31      	ldr	r2, [pc, #196]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 8006250:	f043 0310 	orr.w	r3, r3, #16
 8006254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006258:	4b2e      	ldr	r3, [pc, #184]	; (8006314 <HAL_UART_MspInit+0x2b4>)
 800625a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006266:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800626a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626e:	2302      	movs	r3, #2
 8006270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006280:	2307      	movs	r3, #7
 8006282:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006286:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800628a:	4619      	mov	r1, r3
 800628c:	4828      	ldr	r0, [pc, #160]	; (8006330 <HAL_UART_MspInit+0x2d0>)
 800628e:	f003 fc19 	bl	8009ac4 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006292:	4b28      	ldr	r3, [pc, #160]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 8006294:	4a28      	ldr	r2, [pc, #160]	; (8006338 <HAL_UART_MspInit+0x2d8>)
 8006296:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006298:	4b26      	ldr	r3, [pc, #152]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 800629a:	2250      	movs	r2, #80	; 0x50
 800629c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800629e:	4b25      	ldr	r3, [pc, #148]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062a4:	4b23      	ldr	r3, [pc, #140]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062aa:	4b22      	ldr	r3, [pc, #136]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062b0:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80062be:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80062c4:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062cc:	2204      	movs	r2, #4
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80062d0:	4b18      	ldr	r3, [pc, #96]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062d2:	2203      	movs	r2, #3
 80062d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80062dc:	4b15      	ldr	r3, [pc, #84]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80062e2:	4814      	ldr	r0, [pc, #80]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062e4:	f000 fdb2 	bl	8006e4c <HAL_DMA_Init>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 80062ee:	f7fe fad1 	bl	8004894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a0f      	ldr	r2, [pc, #60]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062f6:	679a      	str	r2, [r3, #120]	; 0x78
 80062f8:	4a0e      	ldr	r2, [pc, #56]	; (8006334 <HAL_UART_MspInit+0x2d4>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	2052      	movs	r0, #82	; 0x52
 8006304:	f000 fb63 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006308:	2052      	movs	r0, #82	; 0x52
 800630a:	f000 fb7a 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 800630e:	e185      	b.n	800661c <HAL_UART_MspInit+0x5bc>
 8006310:	40004c00 	.word	0x40004c00
 8006314:	58024400 	.word	0x58024400
 8006318:	58020c00 	.word	0x58020c00
 800631c:	240012a8 	.word	0x240012a8
 8006320:	40020058 	.word	0x40020058
 8006324:	24001320 	.word	0x24001320
 8006328:	40020070 	.word	0x40020070
 800632c:	40007800 	.word	0x40007800
 8006330:	58021000 	.word	0x58021000
 8006334:	24001398 	.word	0x24001398
 8006338:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a54      	ldr	r2, [pc, #336]	; (8006494 <HAL_UART_MspInit+0x434>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f040 80b4 	bne.w	80064b0 <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006348:	2302      	movs	r3, #2
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800634c:	2300      	movs	r3, #0
 800634e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006356:	4618      	mov	r0, r3
 8006358:	f004 fd8c 	bl	800ae74 <HAL_RCCEx_PeriphCLKConfig>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006362:	f7fe fa97 	bl	8004894 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <HAL_UART_MspInit+0x438>)
 8006368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800636c:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <HAL_UART_MspInit+0x438>)
 800636e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006376:	4b48      	ldr	r3, [pc, #288]	; (8006498 <HAL_UART_MspInit+0x438>)
 8006378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006384:	4b44      	ldr	r3, [pc, #272]	; (8006498 <HAL_UART_MspInit+0x438>)
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800638a:	4a43      	ldr	r2, [pc, #268]	; (8006498 <HAL_UART_MspInit+0x438>)
 800638c:	f043 0308 	orr.w	r3, r3, #8
 8006390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006394:	4b40      	ldr	r3, [pc, #256]	; (8006498 <HAL_UART_MspInit+0x438>)
 8006396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80063a2:	2360      	movs	r3, #96	; 0x60
 80063a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063ba:	2307      	movs	r3, #7
 80063bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4835      	ldr	r0, [pc, #212]	; (800649c <HAL_UART_MspInit+0x43c>)
 80063c8:	f003 fb7c 	bl	8009ac4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80063cc:	4b34      	ldr	r3, [pc, #208]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063ce:	4a35      	ldr	r2, [pc, #212]	; (80064a4 <HAL_UART_MspInit+0x444>)
 80063d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80063d2:	4b33      	ldr	r3, [pc, #204]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063d4:	222b      	movs	r2, #43	; 0x2b
 80063d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063d8:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063da:	2200      	movs	r2, #0
 80063dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063de:	4b30      	ldr	r3, [pc, #192]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063e4:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063ec:	4b2c      	ldr	r3, [pc, #176]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063f2:	4b2b      	ldr	r3, [pc, #172]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80063f8:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <HAL_UART_MspInit+0x440>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063fe:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <HAL_UART_MspInit+0x440>)
 8006400:	2200      	movs	r2, #0
 8006402:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <HAL_UART_MspInit+0x440>)
 8006406:	2200      	movs	r2, #0
 8006408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800640a:	4825      	ldr	r0, [pc, #148]	; (80064a0 <HAL_UART_MspInit+0x440>)
 800640c:	f000 fd1e 	bl	8006e4c <HAL_DMA_Init>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006416:	f7fe fa3d 	bl	8004894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a20      	ldr	r2, [pc, #128]	; (80064a0 <HAL_UART_MspInit+0x440>)
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006420:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <HAL_UART_MspInit+0x440>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006426:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <HAL_UART_MspInit+0x44c>)
 800642a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <HAL_UART_MspInit+0x448>)
 800642e:	222c      	movs	r2, #44	; 0x2c
 8006430:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006432:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006434:	2240      	movs	r2, #64	; 0x40
 8006436:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <HAL_UART_MspInit+0x448>)
 800643a:	2200      	movs	r2, #0
 800643c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006444:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006446:	4b18      	ldr	r3, [pc, #96]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006448:	2200      	movs	r2, #0
 800644a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <HAL_UART_MspInit+0x448>)
 800644e:	2200      	movs	r2, #0
 8006450:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006454:	2200      	movs	r2, #0
 8006456:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006458:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <HAL_UART_MspInit+0x448>)
 800645a:	2200      	movs	r2, #0
 800645c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006460:	2200      	movs	r2, #0
 8006462:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006464:	4810      	ldr	r0, [pc, #64]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006466:	f000 fcf1 	bl	8006e4c <HAL_DMA_Init>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006470:	f7fe fa10 	bl	8004894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <HAL_UART_MspInit+0x448>)
 8006478:	679a      	str	r2, [r3, #120]	; 0x78
 800647a:	4a0b      	ldr	r2, [pc, #44]	; (80064a8 <HAL_UART_MspInit+0x448>)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	2026      	movs	r0, #38	; 0x26
 8006486:	f000 faa2 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800648a:	2026      	movs	r0, #38	; 0x26
 800648c:	f000 fab9 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 8006490:	e0c4      	b.n	800661c <HAL_UART_MspInit+0x5bc>
 8006492:	bf00      	nop
 8006494:	40004400 	.word	0x40004400
 8006498:	58024400 	.word	0x58024400
 800649c:	58020c00 	.word	0x58020c00
 80064a0:	24001410 	.word	0x24001410
 80064a4:	40020088 	.word	0x40020088
 80064a8:	24001488 	.word	0x24001488
 80064ac:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a5b      	ldr	r2, [pc, #364]	; (8006624 <HAL_UART_MspInit+0x5c4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	f040 80b0 	bne.w	800661c <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80064bc:	2302      	movs	r3, #2
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064ca:	4618      	mov	r0, r3
 80064cc:	f004 fcd2 	bl	800ae74 <HAL_RCCEx_PeriphCLKConfig>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_UART_MspInit+0x47a>
      Error_Handler();
 80064d6:	f7fe f9dd 	bl	8004894 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064da:	4b53      	ldr	r3, [pc, #332]	; (8006628 <HAL_UART_MspInit+0x5c8>)
 80064dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064e0:	4a51      	ldr	r2, [pc, #324]	; (8006628 <HAL_UART_MspInit+0x5c8>)
 80064e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064ea:	4b4f      	ldr	r3, [pc, #316]	; (8006628 <HAL_UART_MspInit+0x5c8>)
 80064ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064f8:	4b4b      	ldr	r3, [pc, #300]	; (8006628 <HAL_UART_MspInit+0x5c8>)
 80064fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064fe:	4a4a      	ldr	r2, [pc, #296]	; (8006628 <HAL_UART_MspInit+0x5c8>)
 8006500:	f043 0308 	orr.w	r3, r3, #8
 8006504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006508:	4b47      	ldr	r3, [pc, #284]	; (8006628 <HAL_UART_MspInit+0x5c8>)
 800650a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	60bb      	str	r3, [r7, #8]
 8006514:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800651a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651e:	2302      	movs	r3, #2
 8006520:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006524:	2300      	movs	r3, #0
 8006526:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006530:	2307      	movs	r3, #7
 8006532:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006536:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800653a:	4619      	mov	r1, r3
 800653c:	483b      	ldr	r0, [pc, #236]	; (800662c <HAL_UART_MspInit+0x5cc>)
 800653e:	f003 fac1 	bl	8009ac4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006542:	4b3b      	ldr	r3, [pc, #236]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006544:	4a3b      	ldr	r2, [pc, #236]	; (8006634 <HAL_UART_MspInit+0x5d4>)
 8006546:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006548:	4b39      	ldr	r3, [pc, #228]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 800654a:	222d      	movs	r2, #45	; 0x2d
 800654c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800654e:	4b38      	ldr	r3, [pc, #224]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006550:	2200      	movs	r2, #0
 8006552:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006554:	4b36      	ldr	r3, [pc, #216]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006556:	2200      	movs	r2, #0
 8006558:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800655a:	4b35      	ldr	r3, [pc, #212]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 800655c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006560:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006562:	4b33      	ldr	r3, [pc, #204]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006564:	2200      	movs	r2, #0
 8006566:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006568:	4b31      	ldr	r3, [pc, #196]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 800656a:	2200      	movs	r2, #0
 800656c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800656e:	4b30      	ldr	r3, [pc, #192]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006570:	2200      	movs	r2, #0
 8006572:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006574:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006576:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800657a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 800657e:	2200      	movs	r2, #0
 8006580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006582:	482b      	ldr	r0, [pc, #172]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006584:	f000 fc62 	bl	8006e4c <HAL_DMA_Init>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_UART_MspInit+0x532>
      Error_Handler();
 800658e:	f7fe f981 	bl	8004894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a26      	ldr	r2, [pc, #152]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 8006596:	67da      	str	r2, [r3, #124]	; 0x7c
 8006598:	4a25      	ldr	r2, [pc, #148]	; (8006630 <HAL_UART_MspInit+0x5d0>)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065a0:	4a26      	ldr	r2, [pc, #152]	; (800663c <HAL_UART_MspInit+0x5dc>)
 80065a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80065a4:	4b24      	ldr	r3, [pc, #144]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065a6:	222e      	movs	r2, #46	; 0x2e
 80065a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065ac:	2240      	movs	r2, #64	; 0x40
 80065ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065b6:	4b20      	ldr	r3, [pc, #128]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065be:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065c4:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80065ca:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065d8:	4b17      	ldr	r3, [pc, #92]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065da:	2204      	movs	r2, #4
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80065de:	4b16      	ldr	r3, [pc, #88]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065e0:	2203      	movs	r2, #3
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80065e4:	4b14      	ldr	r3, [pc, #80]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80065f0:	4811      	ldr	r0, [pc, #68]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 80065f2:	f000 fc2b 	bl	8006e4c <HAL_DMA_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 80065fc:	f7fe f94a 	bl	8004894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a0d      	ldr	r2, [pc, #52]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 8006604:	679a      	str	r2, [r3, #120]	; 0x78
 8006606:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <HAL_UART_MspInit+0x5d8>)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800660c:	2200      	movs	r2, #0
 800660e:	2100      	movs	r1, #0
 8006610:	2027      	movs	r0, #39	; 0x27
 8006612:	f000 f9dc 	bl	80069ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006616:	2027      	movs	r0, #39	; 0x27
 8006618:	f000 f9f3 	bl	8006a02 <HAL_NVIC_EnableIRQ>
}
 800661c:	bf00      	nop
 800661e:	37f8      	adds	r7, #248	; 0xf8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40004800 	.word	0x40004800
 8006628:	58024400 	.word	0x58024400
 800662c:	58020c00 	.word	0x58020c00
 8006630:	24001500 	.word	0x24001500
 8006634:	40020028 	.word	0x40020028
 8006638:	24001578 	.word	0x24001578
 800663c:	40020040 	.word	0x40020040

08006640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006644:	f7fe fcb6 	bl	8004fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006648:	480c      	ldr	r0, [pc, #48]	; (800667c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800664a:	490d      	ldr	r1, [pc, #52]	; (8006680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800664c:	4a0d      	ldr	r2, [pc, #52]	; (8006684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800664e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006650:	e002      	b.n	8006658 <LoopCopyDataInit>

08006652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006656:	3304      	adds	r3, #4

08006658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800665a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800665c:	d3f9      	bcc.n	8006652 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800665e:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006660:	4c0a      	ldr	r4, [pc, #40]	; (800668c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006664:	e001      	b.n	800666a <LoopFillZerobss>

08006666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006668:	3204      	adds	r2, #4

0800666a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800666a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800666c:	d3fb      	bcc.n	8006666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800666e:	f00b f853 	bl	8011718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006672:	f7fd fdd5 	bl	8004220 <main>
  bx  lr
 8006676:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006678:	24001c08 	.word	0x24001c08
  ldr r0, =_sdata
 800667c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006680:	24000408 	.word	0x24000408
  ldr r2, =_sidata
 8006684:	080160a4 	.word	0x080160a4
  ldr r2, =_sbss
 8006688:	24000408 	.word	0x24000408
  ldr r4, =_ebss
 800668c:	24001604 	.word	0x24001604

08006690 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006690:	e7fe      	b.n	8006690 <ADC3_IRQHandler>
	...

08006694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800669a:	2003      	movs	r0, #3
 800669c:	f000 f98c 	bl	80069b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066a0:	f004 fa12 	bl	800aac8 <HAL_RCC_GetSysClockFreq>
 80066a4:	4602      	mov	r2, r0
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <HAL_Init+0x68>)
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	4913      	ldr	r1, [pc, #76]	; (8006700 <HAL_Init+0x6c>)
 80066b2:	5ccb      	ldrb	r3, [r1, r3]
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
 80066bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <HAL_Init+0x68>)
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <HAL_Init+0x6c>)
 80066c8:	5cd3      	ldrb	r3, [r2, r3]
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <HAL_Init+0x70>)
 80066d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066d8:	4a0b      	ldr	r2, [pc, #44]	; (8006708 <HAL_Init+0x74>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80066de:	2000      	movs	r0, #0
 80066e0:	f000 f814 	bl	800670c <HAL_InitTick>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e002      	b.n	80066f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80066ee:	f7fe fa79 	bl	8004be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	58024400 	.word	0x58024400
 8006700:	080141a4 	.word	0x080141a4
 8006704:	2400022c 	.word	0x2400022c
 8006708:	24000228 	.word	0x24000228

0800670c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006714:	4b15      	ldr	r3, [pc, #84]	; (800676c <HAL_InitTick+0x60>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e021      	b.n	8006764 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <HAL_InitTick+0x64>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <HAL_InitTick+0x60>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800672e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f971 	bl	8006a1e <HAL_SYSTICK_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e00e      	b.n	8006764 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b0f      	cmp	r3, #15
 800674a:	d80a      	bhi.n	8006762 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800674c:	2200      	movs	r2, #0
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006754:	f000 f93b 	bl	80069ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006758:	4a06      	ldr	r2, [pc, #24]	; (8006774 <HAL_InitTick+0x68>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	24000234 	.word	0x24000234
 8006770:	24000228 	.word	0x24000228
 8006774:	24000230 	.word	0x24000230

08006778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <HAL_IncTick+0x20>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <HAL_IncTick+0x24>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4413      	add	r3, r2
 8006788:	4a04      	ldr	r2, [pc, #16]	; (800679c <HAL_IncTick+0x24>)
 800678a:	6013      	str	r3, [r2, #0]
}
 800678c:	bf00      	nop
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	24000234 	.word	0x24000234
 800679c:	240015f0 	.word	0x240015f0

080067a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return uwTick;
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <HAL_GetTick+0x14>)
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	240015f0 	.word	0x240015f0

080067b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067c0:	f7ff ffee 	bl	80067a0 <HAL_GetTick>
 80067c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d0:	d005      	beq.n	80067de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <HAL_Delay+0x44>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067de:	bf00      	nop
 80067e0:	f7ff ffde 	bl	80067a0 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d8f7      	bhi.n	80067e0 <HAL_Delay+0x28>
  {
  }
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	24000234 	.word	0x24000234

08006800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <HAL_GetREVID+0x14>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	0c1b      	lsrs	r3, r3, #16
}
 800680a:	4618      	mov	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	5c001000 	.word	0x5c001000

08006818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <__NVIC_SetPriorityGrouping+0x40>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006834:	4013      	ands	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <__NVIC_SetPriorityGrouping+0x44>)
 8006842:	4313      	orrs	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006846:	4a04      	ldr	r2, [pc, #16]	; (8006858 <__NVIC_SetPriorityGrouping+0x40>)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	60d3      	str	r3, [r2, #12]
}
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000ed00 	.word	0xe000ed00
 800685c:	05fa0000 	.word	0x05fa0000

08006860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <__NVIC_GetPriorityGrouping+0x18>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	f003 0307 	and.w	r3, r3, #7
}
 800686e:	4618      	mov	r0, r3
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	e000ed00 	.word	0xe000ed00

0800687c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800688a:	2b00      	cmp	r3, #0
 800688c:	db0b      	blt.n	80068a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	f003 021f 	and.w	r2, r3, #31
 8006894:	4907      	ldr	r1, [pc, #28]	; (80068b4 <__NVIC_EnableIRQ+0x38>)
 8006896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	2001      	movs	r0, #1
 800689e:	fa00 f202 	lsl.w	r2, r0, r2
 80068a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	e000e100 	.word	0xe000e100

080068b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	6039      	str	r1, [r7, #0]
 80068c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	db0a      	blt.n	80068e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	490c      	ldr	r1, [pc, #48]	; (8006904 <__NVIC_SetPriority+0x4c>)
 80068d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068d6:	0112      	lsls	r2, r2, #4
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	440b      	add	r3, r1
 80068dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068e0:	e00a      	b.n	80068f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	4908      	ldr	r1, [pc, #32]	; (8006908 <__NVIC_SetPriority+0x50>)
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	3b04      	subs	r3, #4
 80068f0:	0112      	lsls	r2, r2, #4
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	440b      	add	r3, r1
 80068f6:	761a      	strb	r2, [r3, #24]
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	e000e100 	.word	0xe000e100
 8006908:	e000ed00 	.word	0xe000ed00

0800690c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	; 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f1c3 0307 	rsb	r3, r3, #7
 8006926:	2b04      	cmp	r3, #4
 8006928:	bf28      	it	cs
 800692a:	2304      	movcs	r3, #4
 800692c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3304      	adds	r3, #4
 8006932:	2b06      	cmp	r3, #6
 8006934:	d902      	bls.n	800693c <NVIC_EncodePriority+0x30>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	3b03      	subs	r3, #3
 800693a:	e000      	b.n	800693e <NVIC_EncodePriority+0x32>
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43da      	mvns	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	401a      	ands	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	fa01 f303 	lsl.w	r3, r1, r3
 800695e:	43d9      	mvns	r1, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006964:	4313      	orrs	r3, r2
         );
}
 8006966:	4618      	mov	r0, r3
 8006968:	3724      	adds	r7, #36	; 0x24
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3b01      	subs	r3, #1
 8006980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006984:	d301      	bcc.n	800698a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006986:	2301      	movs	r3, #1
 8006988:	e00f      	b.n	80069aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800698a:	4a0a      	ldr	r2, [pc, #40]	; (80069b4 <SysTick_Config+0x40>)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3b01      	subs	r3, #1
 8006990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006992:	210f      	movs	r1, #15
 8006994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006998:	f7ff ff8e 	bl	80068b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <SysTick_Config+0x40>)
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069a2:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <SysTick_Config+0x40>)
 80069a4:	2207      	movs	r2, #7
 80069a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	e000e010 	.word	0xe000e010

080069b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff29 	bl	8006818 <__NVIC_SetPriorityGrouping>
}
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	4603      	mov	r3, r0
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069dc:	f7ff ff40 	bl	8006860 <__NVIC_GetPriorityGrouping>
 80069e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	6978      	ldr	r0, [r7, #20]
 80069e8:	f7ff ff90 	bl	800690c <NVIC_EncodePriority>
 80069ec:	4602      	mov	r2, r0
 80069ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069f2:	4611      	mov	r1, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff ff5f 	bl	80068b8 <__NVIC_SetPriority>
}
 80069fa:	bf00      	nop
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	4603      	mov	r3, r0
 8006a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff33 	bl	800687c <__NVIC_EnableIRQ>
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff ffa4 	bl	8006974 <SysTick_Config>
 8006a2c:	4603      	mov	r3, r0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006a3a:	f000 f802 	bl	8006a42 <HAL_SYSTICK_Callback>
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006a42:	b480      	push	{r7}
 8006a44:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e054      	b.n	8006b0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7f5b      	ldrb	r3, [r3, #29]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fb fc92 	bl	800239c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	791b      	ldrb	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10c      	bne.n	8006aa0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <HAL_CRC_Init+0xc4>)
 8006a8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0218 	bic.w	r2, r2, #24
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	e00c      	b.n	8006aba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6899      	ldr	r1, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f948 	bl	8006d40 <HAL_CRCEx_Polynomial_Set>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e028      	b.n	8006b0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	795b      	ldrb	r3, [r3, #5]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aca:	611a      	str	r2, [r3, #16]
 8006acc:	e004      	b.n	8006ad8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6912      	ldr	r2, [r2, #16]
 8006ad6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	04c11db7 	.word	0x04c11db7

08006b18 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006b24:	2300      	movs	r3, #0
 8006b26:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d006      	beq.n	8006b54 <HAL_CRC_Calculate+0x3c>
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d829      	bhi.n	8006b9e <HAL_CRC_Calculate+0x86>
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d019      	beq.n	8006b82 <HAL_CRC_Calculate+0x6a>
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d01e      	beq.n	8006b90 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006b52:	e024      	b.n	8006b9e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e00a      	b.n	8006b70 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d3f0      	bcc.n	8006b5a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	613b      	str	r3, [r7, #16]
      break;
 8006b80:	e00e      	b.n	8006ba0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f812 	bl	8006bb0 <CRC_Handle_8>
 8006b8c:	6138      	str	r0, [r7, #16]
      break;
 8006b8e:	e007      	b.n	8006ba0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f899 	bl	8006ccc <CRC_Handle_16>
 8006b9a:	6138      	str	r0, [r7, #16]
      break;
 8006b9c:	e000      	b.n	8006ba0 <HAL_CRC_Calculate+0x88>
      break;
 8006b9e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006ba6:	693b      	ldr	r3, [r7, #16]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	; 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	e023      	b.n	8006c0a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	4413      	add	r3, r2
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	440b      	add	r3, r1
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006bdc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	3302      	adds	r3, #2
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	440b      	add	r3, r1
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006bec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	3303      	adds	r3, #3
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	440b      	add	r3, r1
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006c00:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d3d6      	bcc.n	8006bc2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d04d      	beq.n	8006cba <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d107      	bne.n	8006c38 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4413      	add	r3, r2
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d116      	bne.n	8006c70 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	b21a      	sxth	r2, r3
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	3301      	adds	r3, #1
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	440b      	add	r3, r1
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b21b      	sxth	r3, r3
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b21b      	sxth	r3, r3
 8006c62:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	8b7a      	ldrh	r2, [r7, #26]
 8006c6e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d11f      	bne.n	8006cba <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4413      	add	r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b21a      	sxth	r2, r3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	440b      	add	r3, r1
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b21b      	sxth	r3, r3
 8006c9a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	8b7a      	ldrh	r2, [r7, #26]
 8006ca6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	3302      	adds	r3, #2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3724      	adds	r7, #36	; 0x24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e013      	b.n	8006d06 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	041a      	lsls	r2, r3, #16
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	3302      	adds	r3, #2
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	440b      	add	r3, r1
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3301      	adds	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d3e6      	bcc.n	8006cde <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4413      	add	r3, r2
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006d50:	231f      	movs	r3, #31
 8006d52:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006d54:	bf00      	nop
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	613a      	str	r2, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HAL_CRCEx_Polynomial_Set+0x34>
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b18      	cmp	r3, #24
 8006d78:	d846      	bhi.n	8006e08 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006e0f 	.word	0x08006e0f
 8006d84:	08006e09 	.word	0x08006e09
 8006d88:	08006e09 	.word	0x08006e09
 8006d8c:	08006e09 	.word	0x08006e09
 8006d90:	08006e09 	.word	0x08006e09
 8006d94:	08006e09 	.word	0x08006e09
 8006d98:	08006e09 	.word	0x08006e09
 8006d9c:	08006e09 	.word	0x08006e09
 8006da0:	08006dfd 	.word	0x08006dfd
 8006da4:	08006e09 	.word	0x08006e09
 8006da8:	08006e09 	.word	0x08006e09
 8006dac:	08006e09 	.word	0x08006e09
 8006db0:	08006e09 	.word	0x08006e09
 8006db4:	08006e09 	.word	0x08006e09
 8006db8:	08006e09 	.word	0x08006e09
 8006dbc:	08006e09 	.word	0x08006e09
 8006dc0:	08006df1 	.word	0x08006df1
 8006dc4:	08006e09 	.word	0x08006e09
 8006dc8:	08006e09 	.word	0x08006e09
 8006dcc:	08006e09 	.word	0x08006e09
 8006dd0:	08006e09 	.word	0x08006e09
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e09 	.word	0x08006e09
 8006ddc:	08006e09 	.word	0x08006e09
 8006de0:	08006de5 	.word	0x08006de5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d913      	bls.n	8006e12 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006dee:	e010      	b.n	8006e12 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	d90f      	bls.n	8006e16 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006dfa:	e00c      	b.n	8006e16 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b0f      	cmp	r3, #15
 8006e00:	d90b      	bls.n	8006e1a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e06:	e008      	b.n	8006e1a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0c:	e006      	b.n	8006e1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e004      	b.n	8006e1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006e12:	bf00      	nop
 8006e14:	e002      	b.n	8006e1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006e1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f023 0118 	bic.w	r1, r3, #24
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006e54:	f7ff fca4 	bl	80067a0 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e316      	b.n	8007492 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a66      	ldr	r2, [pc, #408]	; (8007004 <HAL_DMA_Init+0x1b8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d04a      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a65      	ldr	r2, [pc, #404]	; (8007008 <HAL_DMA_Init+0x1bc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d045      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a63      	ldr	r2, [pc, #396]	; (800700c <HAL_DMA_Init+0x1c0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d040      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a62      	ldr	r2, [pc, #392]	; (8007010 <HAL_DMA_Init+0x1c4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d03b      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a60      	ldr	r2, [pc, #384]	; (8007014 <HAL_DMA_Init+0x1c8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d036      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a5f      	ldr	r2, [pc, #380]	; (8007018 <HAL_DMA_Init+0x1cc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d031      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a5d      	ldr	r2, [pc, #372]	; (800701c <HAL_DMA_Init+0x1d0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d02c      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a5c      	ldr	r2, [pc, #368]	; (8007020 <HAL_DMA_Init+0x1d4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d027      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a5a      	ldr	r2, [pc, #360]	; (8007024 <HAL_DMA_Init+0x1d8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d022      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a59      	ldr	r2, [pc, #356]	; (8007028 <HAL_DMA_Init+0x1dc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d01d      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a57      	ldr	r2, [pc, #348]	; (800702c <HAL_DMA_Init+0x1e0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d018      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a56      	ldr	r2, [pc, #344]	; (8007030 <HAL_DMA_Init+0x1e4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a54      	ldr	r2, [pc, #336]	; (8007034 <HAL_DMA_Init+0x1e8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a53      	ldr	r2, [pc, #332]	; (8007038 <HAL_DMA_Init+0x1ec>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a51      	ldr	r2, [pc, #324]	; (800703c <HAL_DMA_Init+0x1f0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <HAL_DMA_Init+0xb8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a50      	ldr	r2, [pc, #320]	; (8007040 <HAL_DMA_Init+0x1f4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d101      	bne.n	8006f08 <HAL_DMA_Init+0xbc>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <HAL_DMA_Init+0xbe>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 813b 	beq.w	8007186 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a37      	ldr	r2, [pc, #220]	; (8007004 <HAL_DMA_Init+0x1b8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04a      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a36      	ldr	r2, [pc, #216]	; (8007008 <HAL_DMA_Init+0x1bc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d045      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a34      	ldr	r2, [pc, #208]	; (800700c <HAL_DMA_Init+0x1c0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d040      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a33      	ldr	r2, [pc, #204]	; (8007010 <HAL_DMA_Init+0x1c4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d03b      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a31      	ldr	r2, [pc, #196]	; (8007014 <HAL_DMA_Init+0x1c8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d036      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a30      	ldr	r2, [pc, #192]	; (8007018 <HAL_DMA_Init+0x1cc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d031      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a2e      	ldr	r2, [pc, #184]	; (800701c <HAL_DMA_Init+0x1d0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02c      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <HAL_DMA_Init+0x1d4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d027      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a2b      	ldr	r2, [pc, #172]	; (8007024 <HAL_DMA_Init+0x1d8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d022      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <HAL_DMA_Init+0x1dc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d01d      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a28      	ldr	r2, [pc, #160]	; (800702c <HAL_DMA_Init+0x1e0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a27      	ldr	r2, [pc, #156]	; (8007030 <HAL_DMA_Init+0x1e4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a25      	ldr	r2, [pc, #148]	; (8007034 <HAL_DMA_Init+0x1e8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a24      	ldr	r2, [pc, #144]	; (8007038 <HAL_DMA_Init+0x1ec>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a22      	ldr	r2, [pc, #136]	; (800703c <HAL_DMA_Init+0x1f0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_DMA_Init+0x174>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_DMA_Init+0x1f4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <HAL_DMA_Init+0x186>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e007      	b.n	8006fe2 <HAL_DMA_Init+0x196>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fe2:	e02f      	b.n	8007044 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fe4:	f7ff fbdc 	bl	80067a0 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d928      	bls.n	8007044 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e246      	b.n	8007492 <HAL_DMA_Init+0x646>
 8007004:	40020010 	.word	0x40020010
 8007008:	40020028 	.word	0x40020028
 800700c:	40020040 	.word	0x40020040
 8007010:	40020058 	.word	0x40020058
 8007014:	40020070 	.word	0x40020070
 8007018:	40020088 	.word	0x40020088
 800701c:	400200a0 	.word	0x400200a0
 8007020:	400200b8 	.word	0x400200b8
 8007024:	40020410 	.word	0x40020410
 8007028:	40020428 	.word	0x40020428
 800702c:	40020440 	.word	0x40020440
 8007030:	40020458 	.word	0x40020458
 8007034:	40020470 	.word	0x40020470
 8007038:	40020488 	.word	0x40020488
 800703c:	400204a0 	.word	0x400204a0
 8007040:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1c8      	bne.n	8006fe4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4b83      	ldr	r3, [pc, #524]	; (800726c <HAL_DMA_Init+0x420>)
 800705e:	4013      	ands	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800706a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007076:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007082:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	2b04      	cmp	r3, #4
 8007096:	d107      	bne.n	80070a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	4313      	orrs	r3, r2
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80070a8:	4b71      	ldr	r3, [pc, #452]	; (8007270 <HAL_DMA_Init+0x424>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4b71      	ldr	r3, [pc, #452]	; (8007274 <HAL_DMA_Init+0x428>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b4:	d328      	bcc.n	8007108 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b28      	cmp	r3, #40	; 0x28
 80070bc:	d903      	bls.n	80070c6 <HAL_DMA_Init+0x27a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b2e      	cmp	r3, #46	; 0x2e
 80070c4:	d917      	bls.n	80070f6 <HAL_DMA_Init+0x2aa>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b3e      	cmp	r3, #62	; 0x3e
 80070cc:	d903      	bls.n	80070d6 <HAL_DMA_Init+0x28a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b42      	cmp	r3, #66	; 0x42
 80070d4:	d90f      	bls.n	80070f6 <HAL_DMA_Init+0x2aa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b46      	cmp	r3, #70	; 0x46
 80070dc:	d903      	bls.n	80070e6 <HAL_DMA_Init+0x29a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b48      	cmp	r3, #72	; 0x48
 80070e4:	d907      	bls.n	80070f6 <HAL_DMA_Init+0x2aa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b4e      	cmp	r3, #78	; 0x4e
 80070ec:	d905      	bls.n	80070fa <HAL_DMA_Init+0x2ae>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b52      	cmp	r3, #82	; 0x52
 80070f4:	d801      	bhi.n	80070fa <HAL_DMA_Init+0x2ae>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <HAL_DMA_Init+0x2b0>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007106:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b04      	cmp	r3, #4
 8007130:	d117      	bne.n	8007162 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00e      	beq.n	8007162 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f002 fb33 	bl	80097b0 <DMA_CheckFifoParam>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e197      	b.n	8007492 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 fa6e 	bl	800964c <DMA_CalcBaseAndBitshift>
 8007170:	4603      	mov	r3, r0
 8007172:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	223f      	movs	r2, #63	; 0x3f
 800717e:	409a      	lsls	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	e0cd      	b.n	8007322 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3b      	ldr	r2, [pc, #236]	; (8007278 <HAL_DMA_Init+0x42c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d022      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a39      	ldr	r2, [pc, #228]	; (800727c <HAL_DMA_Init+0x430>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01d      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a38      	ldr	r2, [pc, #224]	; (8007280 <HAL_DMA_Init+0x434>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d018      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a36      	ldr	r2, [pc, #216]	; (8007284 <HAL_DMA_Init+0x438>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a35      	ldr	r2, [pc, #212]	; (8007288 <HAL_DMA_Init+0x43c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a33      	ldr	r2, [pc, #204]	; (800728c <HAL_DMA_Init+0x440>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a32      	ldr	r2, [pc, #200]	; (8007290 <HAL_DMA_Init+0x444>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_DMA_Init+0x38a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a30      	ldr	r2, [pc, #192]	; (8007294 <HAL_DMA_Init+0x448>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d101      	bne.n	80071da <HAL_DMA_Init+0x38e>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_DMA_Init+0x390>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8097 	beq.w	8007310 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a24      	ldr	r2, [pc, #144]	; (8007278 <HAL_DMA_Init+0x42c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d021      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a22      	ldr	r2, [pc, #136]	; (800727c <HAL_DMA_Init+0x430>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01c      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a21      	ldr	r2, [pc, #132]	; (8007280 <HAL_DMA_Init+0x434>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d017      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <HAL_DMA_Init+0x438>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d012      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1e      	ldr	r2, [pc, #120]	; (8007288 <HAL_DMA_Init+0x43c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00d      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1c      	ldr	r2, [pc, #112]	; (800728c <HAL_DMA_Init+0x440>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d008      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1b      	ldr	r2, [pc, #108]	; (8007290 <HAL_DMA_Init+0x444>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <HAL_DMA_Init+0x3e4>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a19      	ldr	r2, [pc, #100]	; (8007294 <HAL_DMA_Init+0x448>)
 800722e:	4293      	cmp	r3, r2
 8007230:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4b12      	ldr	r3, [pc, #72]	; (8007298 <HAL_DMA_Init+0x44c>)
 800724e:	4013      	ands	r3, r2
 8007250:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d020      	beq.n	800729c <HAL_DMA_Init+0x450>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d102      	bne.n	8007268 <HAL_DMA_Init+0x41c>
 8007262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007266:	e01a      	b.n	800729e <HAL_DMA_Init+0x452>
 8007268:	2300      	movs	r3, #0
 800726a:	e018      	b.n	800729e <HAL_DMA_Init+0x452>
 800726c:	fe10803f 	.word	0xfe10803f
 8007270:	5c001000 	.word	0x5c001000
 8007274:	ffff0000 	.word	0xffff0000
 8007278:	58025408 	.word	0x58025408
 800727c:	5802541c 	.word	0x5802541c
 8007280:	58025430 	.word	0x58025430
 8007284:	58025444 	.word	0x58025444
 8007288:	58025458 	.word	0x58025458
 800728c:	5802546c 	.word	0x5802546c
 8007290:	58025480 	.word	0x58025480
 8007294:	58025494 	.word	0x58025494
 8007298:	fffe000f 	.word	0xfffe000f
 800729c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68d2      	ldr	r2, [r2, #12]
 80072a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80072ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80072b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80072bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80072c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80072cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	4b6e      	ldr	r3, [pc, #440]	; (800749c <HAL_DMA_Init+0x650>)
 80072e4:	4413      	add	r3, r2
 80072e6:	4a6e      	ldr	r2, [pc, #440]	; (80074a0 <HAL_DMA_Init+0x654>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	009a      	lsls	r2, r3, #2
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f002 f9a9 	bl	800964c <DMA_CalcBaseAndBitshift>
 80072fa:	4603      	mov	r3, r0
 80072fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2201      	movs	r2, #1
 8007308:	409a      	lsls	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	e008      	b.n	8007322 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2240      	movs	r2, #64	; 0x40
 8007314:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2203      	movs	r2, #3
 800731a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e0b7      	b.n	8007492 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5f      	ldr	r2, [pc, #380]	; (80074a4 <HAL_DMA_Init+0x658>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d072      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a5d      	ldr	r2, [pc, #372]	; (80074a8 <HAL_DMA_Init+0x65c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d06d      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a5c      	ldr	r2, [pc, #368]	; (80074ac <HAL_DMA_Init+0x660>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d068      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a5a      	ldr	r2, [pc, #360]	; (80074b0 <HAL_DMA_Init+0x664>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d063      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a59      	ldr	r2, [pc, #356]	; (80074b4 <HAL_DMA_Init+0x668>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d05e      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a57      	ldr	r2, [pc, #348]	; (80074b8 <HAL_DMA_Init+0x66c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d059      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a56      	ldr	r2, [pc, #344]	; (80074bc <HAL_DMA_Init+0x670>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d054      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a54      	ldr	r2, [pc, #336]	; (80074c0 <HAL_DMA_Init+0x674>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d04f      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a53      	ldr	r2, [pc, #332]	; (80074c4 <HAL_DMA_Init+0x678>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d04a      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a51      	ldr	r2, [pc, #324]	; (80074c8 <HAL_DMA_Init+0x67c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d045      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a50      	ldr	r2, [pc, #320]	; (80074cc <HAL_DMA_Init+0x680>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d040      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a4e      	ldr	r2, [pc, #312]	; (80074d0 <HAL_DMA_Init+0x684>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d03b      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a4d      	ldr	r2, [pc, #308]	; (80074d4 <HAL_DMA_Init+0x688>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d036      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a4b      	ldr	r2, [pc, #300]	; (80074d8 <HAL_DMA_Init+0x68c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d031      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a4a      	ldr	r2, [pc, #296]	; (80074dc <HAL_DMA_Init+0x690>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d02c      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a48      	ldr	r2, [pc, #288]	; (80074e0 <HAL_DMA_Init+0x694>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d027      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a47      	ldr	r2, [pc, #284]	; (80074e4 <HAL_DMA_Init+0x698>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a45      	ldr	r2, [pc, #276]	; (80074e8 <HAL_DMA_Init+0x69c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a44      	ldr	r2, [pc, #272]	; (80074ec <HAL_DMA_Init+0x6a0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a42      	ldr	r2, [pc, #264]	; (80074f0 <HAL_DMA_Init+0x6a4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a41      	ldr	r2, [pc, #260]	; (80074f4 <HAL_DMA_Init+0x6a8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <HAL_DMA_Init+0x6ac>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <HAL_DMA_Init+0x6b0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_DMA_Init+0x5c6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a3c      	ldr	r2, [pc, #240]	; (8007500 <HAL_DMA_Init+0x6b4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d101      	bne.n	8007416 <HAL_DMA_Init+0x5ca>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <HAL_DMA_Init+0x5cc>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d032      	beq.n	8007482 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 fa43 	bl	80098a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d102      	bne.n	8007430 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007444:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d010      	beq.n	8007470 <HAL_DMA_Init+0x624>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b08      	cmp	r3, #8
 8007454:	d80c      	bhi.n	8007470 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f002 fac0 	bl	80099dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	e008      	b.n	8007482 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	a7fdabf8 	.word	0xa7fdabf8
 80074a0:	cccccccd 	.word	0xcccccccd
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
 80074e4:	58025408 	.word	0x58025408
 80074e8:	5802541c 	.word	0x5802541c
 80074ec:	58025430 	.word	0x58025430
 80074f0:	58025444 	.word	0x58025444
 80074f4:	58025458 	.word	0x58025458
 80074f8:	5802546c 	.word	0x5802546c
 80074fc:	58025480 	.word	0x58025480
 8007500:	58025494 	.word	0x58025494

08007504 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e226      	b.n	800796e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_DMA_Start_IT+0x2a>
 800752a:	2302      	movs	r3, #2
 800752c:	e21f      	b.n	800796e <HAL_DMA_Start_IT+0x46a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	f040 820a 	bne.w	8007958 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a68      	ldr	r2, [pc, #416]	; (80076f8 <HAL_DMA_Start_IT+0x1f4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d04a      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a66      	ldr	r2, [pc, #408]	; (80076fc <HAL_DMA_Start_IT+0x1f8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d045      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a65      	ldr	r2, [pc, #404]	; (8007700 <HAL_DMA_Start_IT+0x1fc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d040      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a63      	ldr	r2, [pc, #396]	; (8007704 <HAL_DMA_Start_IT+0x200>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d03b      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a62      	ldr	r2, [pc, #392]	; (8007708 <HAL_DMA_Start_IT+0x204>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d036      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a60      	ldr	r2, [pc, #384]	; (800770c <HAL_DMA_Start_IT+0x208>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d031      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5f      	ldr	r2, [pc, #380]	; (8007710 <HAL_DMA_Start_IT+0x20c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d02c      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5d      	ldr	r2, [pc, #372]	; (8007714 <HAL_DMA_Start_IT+0x210>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d027      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5c      	ldr	r2, [pc, #368]	; (8007718 <HAL_DMA_Start_IT+0x214>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d022      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a5a      	ldr	r2, [pc, #360]	; (800771c <HAL_DMA_Start_IT+0x218>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01d      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a59      	ldr	r2, [pc, #356]	; (8007720 <HAL_DMA_Start_IT+0x21c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a57      	ldr	r2, [pc, #348]	; (8007724 <HAL_DMA_Start_IT+0x220>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a56      	ldr	r2, [pc, #344]	; (8007728 <HAL_DMA_Start_IT+0x224>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a54      	ldr	r2, [pc, #336]	; (800772c <HAL_DMA_Start_IT+0x228>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a53      	ldr	r2, [pc, #332]	; (8007730 <HAL_DMA_Start_IT+0x22c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <HAL_DMA_Start_IT+0xee>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a51      	ldr	r2, [pc, #324]	; (8007734 <HAL_DMA_Start_IT+0x230>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d108      	bne.n	8007604 <HAL_DMA_Start_IT+0x100>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e007      	b.n	8007614 <HAL_DMA_Start_IT+0x110>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f001 fe6a 	bl	80092f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a34      	ldr	r2, [pc, #208]	; (80076f8 <HAL_DMA_Start_IT+0x1f4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04a      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a33      	ldr	r2, [pc, #204]	; (80076fc <HAL_DMA_Start_IT+0x1f8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d045      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a31      	ldr	r2, [pc, #196]	; (8007700 <HAL_DMA_Start_IT+0x1fc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d040      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a30      	ldr	r2, [pc, #192]	; (8007704 <HAL_DMA_Start_IT+0x200>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d03b      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2e      	ldr	r2, [pc, #184]	; (8007708 <HAL_DMA_Start_IT+0x204>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d036      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a2d      	ldr	r2, [pc, #180]	; (800770c <HAL_DMA_Start_IT+0x208>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d031      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2b      	ldr	r2, [pc, #172]	; (8007710 <HAL_DMA_Start_IT+0x20c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d02c      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2a      	ldr	r2, [pc, #168]	; (8007714 <HAL_DMA_Start_IT+0x210>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d027      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a28      	ldr	r2, [pc, #160]	; (8007718 <HAL_DMA_Start_IT+0x214>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a27      	ldr	r2, [pc, #156]	; (800771c <HAL_DMA_Start_IT+0x218>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d01d      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a25      	ldr	r2, [pc, #148]	; (8007720 <HAL_DMA_Start_IT+0x21c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a24      	ldr	r2, [pc, #144]	; (8007724 <HAL_DMA_Start_IT+0x220>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a22      	ldr	r2, [pc, #136]	; (8007728 <HAL_DMA_Start_IT+0x224>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a21      	ldr	r2, [pc, #132]	; (800772c <HAL_DMA_Start_IT+0x228>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <HAL_DMA_Start_IT+0x22c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_DMA_Start_IT+0x1bc>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <HAL_DMA_Start_IT+0x230>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d101      	bne.n	80076c4 <HAL_DMA_Start_IT+0x1c0>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_DMA_Start_IT+0x1c2>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d036      	beq.n	8007738 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f023 021e 	bic.w	r2, r3, #30
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0216 	orr.w	r2, r2, #22
 80076dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d03e      	beq.n	8007764 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0208 	orr.w	r2, r2, #8
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e035      	b.n	8007764 <HAL_DMA_Start_IT+0x260>
 80076f8:	40020010 	.word	0x40020010
 80076fc:	40020028 	.word	0x40020028
 8007700:	40020040 	.word	0x40020040
 8007704:	40020058 	.word	0x40020058
 8007708:	40020070 	.word	0x40020070
 800770c:	40020088 	.word	0x40020088
 8007710:	400200a0 	.word	0x400200a0
 8007714:	400200b8 	.word	0x400200b8
 8007718:	40020410 	.word	0x40020410
 800771c:	40020428 	.word	0x40020428
 8007720:	40020440 	.word	0x40020440
 8007724:	40020458 	.word	0x40020458
 8007728:	40020470 	.word	0x40020470
 800772c:	40020488 	.word	0x40020488
 8007730:	400204a0 	.word	0x400204a0
 8007734:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f023 020e 	bic.w	r2, r3, #14
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 020a 	orr.w	r2, r2, #10
 800774a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0204 	orr.w	r2, r2, #4
 8007762:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a83      	ldr	r2, [pc, #524]	; (8007978 <HAL_DMA_Start_IT+0x474>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d072      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a82      	ldr	r2, [pc, #520]	; (800797c <HAL_DMA_Start_IT+0x478>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d06d      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a80      	ldr	r2, [pc, #512]	; (8007980 <HAL_DMA_Start_IT+0x47c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d068      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7f      	ldr	r2, [pc, #508]	; (8007984 <HAL_DMA_Start_IT+0x480>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d063      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a7d      	ldr	r2, [pc, #500]	; (8007988 <HAL_DMA_Start_IT+0x484>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d05e      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a7c      	ldr	r2, [pc, #496]	; (800798c <HAL_DMA_Start_IT+0x488>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d059      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a7a      	ldr	r2, [pc, #488]	; (8007990 <HAL_DMA_Start_IT+0x48c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d054      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a79      	ldr	r2, [pc, #484]	; (8007994 <HAL_DMA_Start_IT+0x490>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d04f      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a77      	ldr	r2, [pc, #476]	; (8007998 <HAL_DMA_Start_IT+0x494>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d04a      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a76      	ldr	r2, [pc, #472]	; (800799c <HAL_DMA_Start_IT+0x498>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d045      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a74      	ldr	r2, [pc, #464]	; (80079a0 <HAL_DMA_Start_IT+0x49c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d040      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a73      	ldr	r2, [pc, #460]	; (80079a4 <HAL_DMA_Start_IT+0x4a0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d03b      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a71      	ldr	r2, [pc, #452]	; (80079a8 <HAL_DMA_Start_IT+0x4a4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d036      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a70      	ldr	r2, [pc, #448]	; (80079ac <HAL_DMA_Start_IT+0x4a8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d031      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a6e      	ldr	r2, [pc, #440]	; (80079b0 <HAL_DMA_Start_IT+0x4ac>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d02c      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a6d      	ldr	r2, [pc, #436]	; (80079b4 <HAL_DMA_Start_IT+0x4b0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d027      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6b      	ldr	r2, [pc, #428]	; (80079b8 <HAL_DMA_Start_IT+0x4b4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d022      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6a      	ldr	r2, [pc, #424]	; (80079bc <HAL_DMA_Start_IT+0x4b8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d01d      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a68      	ldr	r2, [pc, #416]	; (80079c0 <HAL_DMA_Start_IT+0x4bc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d018      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a67      	ldr	r2, [pc, #412]	; (80079c4 <HAL_DMA_Start_IT+0x4c0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d013      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a65      	ldr	r2, [pc, #404]	; (80079c8 <HAL_DMA_Start_IT+0x4c4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00e      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a64      	ldr	r2, [pc, #400]	; (80079cc <HAL_DMA_Start_IT+0x4c8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a62      	ldr	r2, [pc, #392]	; (80079d0 <HAL_DMA_Start_IT+0x4cc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_DMA_Start_IT+0x350>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a61      	ldr	r2, [pc, #388]	; (80079d4 <HAL_DMA_Start_IT+0x4d0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d101      	bne.n	8007858 <HAL_DMA_Start_IT+0x354>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <HAL_DMA_Start_IT+0x356>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01a      	beq.n	8007894 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800787a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800788e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007892:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a37      	ldr	r2, [pc, #220]	; (8007978 <HAL_DMA_Start_IT+0x474>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d04a      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a36      	ldr	r2, [pc, #216]	; (800797c <HAL_DMA_Start_IT+0x478>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d045      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a34      	ldr	r2, [pc, #208]	; (8007980 <HAL_DMA_Start_IT+0x47c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d040      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a33      	ldr	r2, [pc, #204]	; (8007984 <HAL_DMA_Start_IT+0x480>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d03b      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a31      	ldr	r2, [pc, #196]	; (8007988 <HAL_DMA_Start_IT+0x484>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d036      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a30      	ldr	r2, [pc, #192]	; (800798c <HAL_DMA_Start_IT+0x488>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d031      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <HAL_DMA_Start_IT+0x48c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d02c      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <HAL_DMA_Start_IT+0x490>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d027      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a2b      	ldr	r2, [pc, #172]	; (8007998 <HAL_DMA_Start_IT+0x494>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d022      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a2a      	ldr	r2, [pc, #168]	; (800799c <HAL_DMA_Start_IT+0x498>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d01d      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a28      	ldr	r2, [pc, #160]	; (80079a0 <HAL_DMA_Start_IT+0x49c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d018      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a27      	ldr	r2, [pc, #156]	; (80079a4 <HAL_DMA_Start_IT+0x4a0>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d013      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a25      	ldr	r2, [pc, #148]	; (80079a8 <HAL_DMA_Start_IT+0x4a4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a24      	ldr	r2, [pc, #144]	; (80079ac <HAL_DMA_Start_IT+0x4a8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <HAL_DMA_Start_IT+0x4ac>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <HAL_DMA_Start_IT+0x430>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <HAL_DMA_Start_IT+0x4b0>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d108      	bne.n	8007946 <HAL_DMA_Start_IT+0x442>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e012      	b.n	800796c <HAL_DMA_Start_IT+0x468>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0201 	orr.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e009      	b.n	800796c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800795e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40020010 	.word	0x40020010
 800797c:	40020028 	.word	0x40020028
 8007980:	40020040 	.word	0x40020040
 8007984:	40020058 	.word	0x40020058
 8007988:	40020070 	.word	0x40020070
 800798c:	40020088 	.word	0x40020088
 8007990:	400200a0 	.word	0x400200a0
 8007994:	400200b8 	.word	0x400200b8
 8007998:	40020410 	.word	0x40020410
 800799c:	40020428 	.word	0x40020428
 80079a0:	40020440 	.word	0x40020440
 80079a4:	40020458 	.word	0x40020458
 80079a8:	40020470 	.word	0x40020470
 80079ac:	40020488 	.word	0x40020488
 80079b0:	400204a0 	.word	0x400204a0
 80079b4:	400204b8 	.word	0x400204b8
 80079b8:	58025408 	.word	0x58025408
 80079bc:	5802541c 	.word	0x5802541c
 80079c0:	58025430 	.word	0x58025430
 80079c4:	58025444 	.word	0x58025444
 80079c8:	58025458 	.word	0x58025458
 80079cc:	5802546c 	.word	0x5802546c
 80079d0:	58025480 	.word	0x58025480
 80079d4:	58025494 	.word	0x58025494

080079d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80079e0:	f7fe fede 	bl	80067a0 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e2dc      	b.n	8007faa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d008      	beq.n	8007a0e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2280      	movs	r2, #128	; 0x80
 8007a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e2cd      	b.n	8007faa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a76      	ldr	r2, [pc, #472]	; (8007bec <HAL_DMA_Abort+0x214>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d04a      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a74      	ldr	r2, [pc, #464]	; (8007bf0 <HAL_DMA_Abort+0x218>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d045      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a73      	ldr	r2, [pc, #460]	; (8007bf4 <HAL_DMA_Abort+0x21c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d040      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a71      	ldr	r2, [pc, #452]	; (8007bf8 <HAL_DMA_Abort+0x220>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d03b      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a70      	ldr	r2, [pc, #448]	; (8007bfc <HAL_DMA_Abort+0x224>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d036      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a6e      	ldr	r2, [pc, #440]	; (8007c00 <HAL_DMA_Abort+0x228>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d031      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a6d      	ldr	r2, [pc, #436]	; (8007c04 <HAL_DMA_Abort+0x22c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d02c      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a6b      	ldr	r2, [pc, #428]	; (8007c08 <HAL_DMA_Abort+0x230>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d027      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a6a      	ldr	r2, [pc, #424]	; (8007c0c <HAL_DMA_Abort+0x234>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d022      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a68      	ldr	r2, [pc, #416]	; (8007c10 <HAL_DMA_Abort+0x238>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d01d      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a67      	ldr	r2, [pc, #412]	; (8007c14 <HAL_DMA_Abort+0x23c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d018      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a65      	ldr	r2, [pc, #404]	; (8007c18 <HAL_DMA_Abort+0x240>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a64      	ldr	r2, [pc, #400]	; (8007c1c <HAL_DMA_Abort+0x244>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00e      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a62      	ldr	r2, [pc, #392]	; (8007c20 <HAL_DMA_Abort+0x248>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a61      	ldr	r2, [pc, #388]	; (8007c24 <HAL_DMA_Abort+0x24c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_DMA_Abort+0xd6>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a5f      	ldr	r2, [pc, #380]	; (8007c28 <HAL_DMA_Abort+0x250>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d101      	bne.n	8007ab2 <HAL_DMA_Abort+0xda>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <HAL_DMA_Abort+0xdc>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d013      	beq.n	8007ae0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 021e 	bic.w	r2, r2, #30
 8007ac6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e00a      	b.n	8007af6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 020e 	bic.w	r2, r2, #14
 8007aee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a3c      	ldr	r2, [pc, #240]	; (8007bec <HAL_DMA_Abort+0x214>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d072      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a3a      	ldr	r2, [pc, #232]	; (8007bf0 <HAL_DMA_Abort+0x218>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d06d      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a39      	ldr	r2, [pc, #228]	; (8007bf4 <HAL_DMA_Abort+0x21c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d068      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a37      	ldr	r2, [pc, #220]	; (8007bf8 <HAL_DMA_Abort+0x220>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d063      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a36      	ldr	r2, [pc, #216]	; (8007bfc <HAL_DMA_Abort+0x224>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d05e      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a34      	ldr	r2, [pc, #208]	; (8007c00 <HAL_DMA_Abort+0x228>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d059      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a33      	ldr	r2, [pc, #204]	; (8007c04 <HAL_DMA_Abort+0x22c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d054      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a31      	ldr	r2, [pc, #196]	; (8007c08 <HAL_DMA_Abort+0x230>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d04f      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a30      	ldr	r2, [pc, #192]	; (8007c0c <HAL_DMA_Abort+0x234>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d04a      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a2e      	ldr	r2, [pc, #184]	; (8007c10 <HAL_DMA_Abort+0x238>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d045      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a2d      	ldr	r2, [pc, #180]	; (8007c14 <HAL_DMA_Abort+0x23c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d040      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a2b      	ldr	r2, [pc, #172]	; (8007c18 <HAL_DMA_Abort+0x240>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d03b      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2a      	ldr	r2, [pc, #168]	; (8007c1c <HAL_DMA_Abort+0x244>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d036      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a28      	ldr	r2, [pc, #160]	; (8007c20 <HAL_DMA_Abort+0x248>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d031      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <HAL_DMA_Abort+0x24c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d02c      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <HAL_DMA_Abort+0x250>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d027      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a24      	ldr	r2, [pc, #144]	; (8007c2c <HAL_DMA_Abort+0x254>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d022      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <HAL_DMA_Abort+0x258>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d01d      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a21      	ldr	r2, [pc, #132]	; (8007c34 <HAL_DMA_Abort+0x25c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d018      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1f      	ldr	r2, [pc, #124]	; (8007c38 <HAL_DMA_Abort+0x260>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1e      	ldr	r2, [pc, #120]	; (8007c3c <HAL_DMA_Abort+0x264>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00e      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a1c      	ldr	r2, [pc, #112]	; (8007c40 <HAL_DMA_Abort+0x268>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d009      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <HAL_DMA_Abort+0x26c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d004      	beq.n	8007be6 <HAL_DMA_Abort+0x20e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a19      	ldr	r2, [pc, #100]	; (8007c48 <HAL_DMA_Abort+0x270>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d132      	bne.n	8007c4c <HAL_DMA_Abort+0x274>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e031      	b.n	8007c4e <HAL_DMA_Abort+0x276>
 8007bea:	bf00      	nop
 8007bec:	40020010 	.word	0x40020010
 8007bf0:	40020028 	.word	0x40020028
 8007bf4:	40020040 	.word	0x40020040
 8007bf8:	40020058 	.word	0x40020058
 8007bfc:	40020070 	.word	0x40020070
 8007c00:	40020088 	.word	0x40020088
 8007c04:	400200a0 	.word	0x400200a0
 8007c08:	400200b8 	.word	0x400200b8
 8007c0c:	40020410 	.word	0x40020410
 8007c10:	40020428 	.word	0x40020428
 8007c14:	40020440 	.word	0x40020440
 8007c18:	40020458 	.word	0x40020458
 8007c1c:	40020470 	.word	0x40020470
 8007c20:	40020488 	.word	0x40020488
 8007c24:	400204a0 	.word	0x400204a0
 8007c28:	400204b8 	.word	0x400204b8
 8007c2c:	58025408 	.word	0x58025408
 8007c30:	5802541c 	.word	0x5802541c
 8007c34:	58025430 	.word	0x58025430
 8007c38:	58025444 	.word	0x58025444
 8007c3c:	58025458 	.word	0x58025458
 8007c40:	5802546c 	.word	0x5802546c
 8007c44:	58025480 	.word	0x58025480
 8007c48:	58025494 	.word	0x58025494
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a6d      	ldr	r2, [pc, #436]	; (8007e1c <HAL_DMA_Abort+0x444>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d04a      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a6b      	ldr	r2, [pc, #428]	; (8007e20 <HAL_DMA_Abort+0x448>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d045      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a6a      	ldr	r2, [pc, #424]	; (8007e24 <HAL_DMA_Abort+0x44c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d040      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a68      	ldr	r2, [pc, #416]	; (8007e28 <HAL_DMA_Abort+0x450>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d03b      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a67      	ldr	r2, [pc, #412]	; (8007e2c <HAL_DMA_Abort+0x454>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d036      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a65      	ldr	r2, [pc, #404]	; (8007e30 <HAL_DMA_Abort+0x458>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d031      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a64      	ldr	r2, [pc, #400]	; (8007e34 <HAL_DMA_Abort+0x45c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d02c      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a62      	ldr	r2, [pc, #392]	; (8007e38 <HAL_DMA_Abort+0x460>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d027      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a61      	ldr	r2, [pc, #388]	; (8007e3c <HAL_DMA_Abort+0x464>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a5f      	ldr	r2, [pc, #380]	; (8007e40 <HAL_DMA_Abort+0x468>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01d      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a5e      	ldr	r2, [pc, #376]	; (8007e44 <HAL_DMA_Abort+0x46c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a5c      	ldr	r2, [pc, #368]	; (8007e48 <HAL_DMA_Abort+0x470>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a5b      	ldr	r2, [pc, #364]	; (8007e4c <HAL_DMA_Abort+0x474>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a59      	ldr	r2, [pc, #356]	; (8007e50 <HAL_DMA_Abort+0x478>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a58      	ldr	r2, [pc, #352]	; (8007e54 <HAL_DMA_Abort+0x47c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_DMA_Abort+0x32a>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a56      	ldr	r2, [pc, #344]	; (8007e58 <HAL_DMA_Abort+0x480>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d108      	bne.n	8007d14 <HAL_DMA_Abort+0x33c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0201 	bic.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	e007      	b.n	8007d24 <HAL_DMA_Abort+0x34c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d24:	e013      	b.n	8007d4e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d26:	f7fe fd3b 	bl	80067a0 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d90c      	bls.n	8007d4e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e12d      	b.n	8007faa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a2f      	ldr	r2, [pc, #188]	; (8007e1c <HAL_DMA_Abort+0x444>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d04a      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a2d      	ldr	r2, [pc, #180]	; (8007e20 <HAL_DMA_Abort+0x448>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d045      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a2c      	ldr	r2, [pc, #176]	; (8007e24 <HAL_DMA_Abort+0x44c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d040      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a2a      	ldr	r2, [pc, #168]	; (8007e28 <HAL_DMA_Abort+0x450>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d03b      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <HAL_DMA_Abort+0x454>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d036      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a27      	ldr	r2, [pc, #156]	; (8007e30 <HAL_DMA_Abort+0x458>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d031      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a26      	ldr	r2, [pc, #152]	; (8007e34 <HAL_DMA_Abort+0x45c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d02c      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <HAL_DMA_Abort+0x460>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d027      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <HAL_DMA_Abort+0x464>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d022      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <HAL_DMA_Abort+0x468>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01d      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a20      	ldr	r2, [pc, #128]	; (8007e44 <HAL_DMA_Abort+0x46c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d018      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <HAL_DMA_Abort+0x470>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <HAL_DMA_Abort+0x474>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00e      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <HAL_DMA_Abort+0x478>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d009      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1a      	ldr	r2, [pc, #104]	; (8007e54 <HAL_DMA_Abort+0x47c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d004      	beq.n	8007dfa <HAL_DMA_Abort+0x422>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <HAL_DMA_Abort+0x480>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d101      	bne.n	8007dfe <HAL_DMA_Abort+0x426>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <HAL_DMA_Abort+0x428>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d02b      	beq.n	8007e5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	223f      	movs	r2, #63	; 0x3f
 8007e14:	409a      	lsls	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	609a      	str	r2, [r3, #8]
 8007e1a:	e02a      	b.n	8007e72 <HAL_DMA_Abort+0x49a>
 8007e1c:	40020010 	.word	0x40020010
 8007e20:	40020028 	.word	0x40020028
 8007e24:	40020040 	.word	0x40020040
 8007e28:	40020058 	.word	0x40020058
 8007e2c:	40020070 	.word	0x40020070
 8007e30:	40020088 	.word	0x40020088
 8007e34:	400200a0 	.word	0x400200a0
 8007e38:	400200b8 	.word	0x400200b8
 8007e3c:	40020410 	.word	0x40020410
 8007e40:	40020428 	.word	0x40020428
 8007e44:	40020440 	.word	0x40020440
 8007e48:	40020458 	.word	0x40020458
 8007e4c:	40020470 	.word	0x40020470
 8007e50:	40020488 	.word	0x40020488
 8007e54:	400204a0 	.word	0x400204a0
 8007e58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	409a      	lsls	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a4f      	ldr	r2, [pc, #316]	; (8007fb4 <HAL_DMA_Abort+0x5dc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d072      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a4d      	ldr	r2, [pc, #308]	; (8007fb8 <HAL_DMA_Abort+0x5e0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d06d      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a4c      	ldr	r2, [pc, #304]	; (8007fbc <HAL_DMA_Abort+0x5e4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d068      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a4a      	ldr	r2, [pc, #296]	; (8007fc0 <HAL_DMA_Abort+0x5e8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d063      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a49      	ldr	r2, [pc, #292]	; (8007fc4 <HAL_DMA_Abort+0x5ec>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d05e      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a47      	ldr	r2, [pc, #284]	; (8007fc8 <HAL_DMA_Abort+0x5f0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d059      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a46      	ldr	r2, [pc, #280]	; (8007fcc <HAL_DMA_Abort+0x5f4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d054      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a44      	ldr	r2, [pc, #272]	; (8007fd0 <HAL_DMA_Abort+0x5f8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d04f      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a43      	ldr	r2, [pc, #268]	; (8007fd4 <HAL_DMA_Abort+0x5fc>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d04a      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a41      	ldr	r2, [pc, #260]	; (8007fd8 <HAL_DMA_Abort+0x600>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d045      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a40      	ldr	r2, [pc, #256]	; (8007fdc <HAL_DMA_Abort+0x604>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d040      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a3e      	ldr	r2, [pc, #248]	; (8007fe0 <HAL_DMA_Abort+0x608>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d03b      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a3d      	ldr	r2, [pc, #244]	; (8007fe4 <HAL_DMA_Abort+0x60c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d036      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a3b      	ldr	r2, [pc, #236]	; (8007fe8 <HAL_DMA_Abort+0x610>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d031      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a3a      	ldr	r2, [pc, #232]	; (8007fec <HAL_DMA_Abort+0x614>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d02c      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a38      	ldr	r2, [pc, #224]	; (8007ff0 <HAL_DMA_Abort+0x618>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d027      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a37      	ldr	r2, [pc, #220]	; (8007ff4 <HAL_DMA_Abort+0x61c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d022      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a35      	ldr	r2, [pc, #212]	; (8007ff8 <HAL_DMA_Abort+0x620>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01d      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a34      	ldr	r2, [pc, #208]	; (8007ffc <HAL_DMA_Abort+0x624>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d018      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a32      	ldr	r2, [pc, #200]	; (8008000 <HAL_DMA_Abort+0x628>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a31      	ldr	r2, [pc, #196]	; (8008004 <HAL_DMA_Abort+0x62c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00e      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2f      	ldr	r2, [pc, #188]	; (8008008 <HAL_DMA_Abort+0x630>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d009      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2e      	ldr	r2, [pc, #184]	; (800800c <HAL_DMA_Abort+0x634>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d004      	beq.n	8007f62 <HAL_DMA_Abort+0x58a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a2c      	ldr	r2, [pc, #176]	; (8008010 <HAL_DMA_Abort+0x638>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d101      	bne.n	8007f66 <HAL_DMA_Abort+0x58e>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <HAL_DMA_Abort+0x590>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d015      	beq.n	8007f98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40020010 	.word	0x40020010
 8007fb8:	40020028 	.word	0x40020028
 8007fbc:	40020040 	.word	0x40020040
 8007fc0:	40020058 	.word	0x40020058
 8007fc4:	40020070 	.word	0x40020070
 8007fc8:	40020088 	.word	0x40020088
 8007fcc:	400200a0 	.word	0x400200a0
 8007fd0:	400200b8 	.word	0x400200b8
 8007fd4:	40020410 	.word	0x40020410
 8007fd8:	40020428 	.word	0x40020428
 8007fdc:	40020440 	.word	0x40020440
 8007fe0:	40020458 	.word	0x40020458
 8007fe4:	40020470 	.word	0x40020470
 8007fe8:	40020488 	.word	0x40020488
 8007fec:	400204a0 	.word	0x400204a0
 8007ff0:	400204b8 	.word	0x400204b8
 8007ff4:	58025408 	.word	0x58025408
 8007ff8:	5802541c 	.word	0x5802541c
 8007ffc:	58025430 	.word	0x58025430
 8008000:	58025444 	.word	0x58025444
 8008004:	58025458 	.word	0x58025458
 8008008:	5802546c 	.word	0x5802546c
 800800c:	58025480 	.word	0x58025480
 8008010:	58025494 	.word	0x58025494

08008014 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e237      	b.n	8008496 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d004      	beq.n	800803c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e22c      	b.n	8008496 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a5c      	ldr	r2, [pc, #368]	; (80081b4 <HAL_DMA_Abort_IT+0x1a0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d04a      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a5b      	ldr	r2, [pc, #364]	; (80081b8 <HAL_DMA_Abort_IT+0x1a4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d045      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a59      	ldr	r2, [pc, #356]	; (80081bc <HAL_DMA_Abort_IT+0x1a8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d040      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a58      	ldr	r2, [pc, #352]	; (80081c0 <HAL_DMA_Abort_IT+0x1ac>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d03b      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a56      	ldr	r2, [pc, #344]	; (80081c4 <HAL_DMA_Abort_IT+0x1b0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d036      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a55      	ldr	r2, [pc, #340]	; (80081c8 <HAL_DMA_Abort_IT+0x1b4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d031      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a53      	ldr	r2, [pc, #332]	; (80081cc <HAL_DMA_Abort_IT+0x1b8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d02c      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a52      	ldr	r2, [pc, #328]	; (80081d0 <HAL_DMA_Abort_IT+0x1bc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d027      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a50      	ldr	r2, [pc, #320]	; (80081d4 <HAL_DMA_Abort_IT+0x1c0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d022      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a4f      	ldr	r2, [pc, #316]	; (80081d8 <HAL_DMA_Abort_IT+0x1c4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d01d      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a4d      	ldr	r2, [pc, #308]	; (80081dc <HAL_DMA_Abort_IT+0x1c8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d018      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a4c      	ldr	r2, [pc, #304]	; (80081e0 <HAL_DMA_Abort_IT+0x1cc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d013      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a4a      	ldr	r2, [pc, #296]	; (80081e4 <HAL_DMA_Abort_IT+0x1d0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a49      	ldr	r2, [pc, #292]	; (80081e8 <HAL_DMA_Abort_IT+0x1d4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a47      	ldr	r2, [pc, #284]	; (80081ec <HAL_DMA_Abort_IT+0x1d8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_DMA_Abort_IT+0xc8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a46      	ldr	r2, [pc, #280]	; (80081f0 <HAL_DMA_Abort_IT+0x1dc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d101      	bne.n	80080e0 <HAL_DMA_Abort_IT+0xcc>
 80080dc:	2301      	movs	r3, #1
 80080de:	e000      	b.n	80080e2 <HAL_DMA_Abort_IT+0xce>
 80080e0:	2300      	movs	r3, #0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8086 	beq.w	80081f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2204      	movs	r2, #4
 80080ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <HAL_DMA_Abort_IT+0x1a0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d04a      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a2e      	ldr	r2, [pc, #184]	; (80081b8 <HAL_DMA_Abort_IT+0x1a4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d045      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2c      	ldr	r2, [pc, #176]	; (80081bc <HAL_DMA_Abort_IT+0x1a8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d040      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2b      	ldr	r2, [pc, #172]	; (80081c0 <HAL_DMA_Abort_IT+0x1ac>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d03b      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <HAL_DMA_Abort_IT+0x1b0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d036      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <HAL_DMA_Abort_IT+0x1b4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d031      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a26      	ldr	r2, [pc, #152]	; (80081cc <HAL_DMA_Abort_IT+0x1b8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d02c      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a25      	ldr	r2, [pc, #148]	; (80081d0 <HAL_DMA_Abort_IT+0x1bc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d027      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a23      	ldr	r2, [pc, #140]	; (80081d4 <HAL_DMA_Abort_IT+0x1c0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d022      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a22      	ldr	r2, [pc, #136]	; (80081d8 <HAL_DMA_Abort_IT+0x1c4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d01d      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a20      	ldr	r2, [pc, #128]	; (80081dc <HAL_DMA_Abort_IT+0x1c8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d018      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <HAL_DMA_Abort_IT+0x1cc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d013      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <HAL_DMA_Abort_IT+0x1d0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00e      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1c      	ldr	r2, [pc, #112]	; (80081e8 <HAL_DMA_Abort_IT+0x1d4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d009      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1a      	ldr	r2, [pc, #104]	; (80081ec <HAL_DMA_Abort_IT+0x1d8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d004      	beq.n	8008190 <HAL_DMA_Abort_IT+0x17c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <HAL_DMA_Abort_IT+0x1dc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d108      	bne.n	80081a2 <HAL_DMA_Abort_IT+0x18e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e178      	b.n	8008494 <HAL_DMA_Abort_IT+0x480>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e16f      	b.n	8008494 <HAL_DMA_Abort_IT+0x480>
 80081b4:	40020010 	.word	0x40020010
 80081b8:	40020028 	.word	0x40020028
 80081bc:	40020040 	.word	0x40020040
 80081c0:	40020058 	.word	0x40020058
 80081c4:	40020070 	.word	0x40020070
 80081c8:	40020088 	.word	0x40020088
 80081cc:	400200a0 	.word	0x400200a0
 80081d0:	400200b8 	.word	0x400200b8
 80081d4:	40020410 	.word	0x40020410
 80081d8:	40020428 	.word	0x40020428
 80081dc:	40020440 	.word	0x40020440
 80081e0:	40020458 	.word	0x40020458
 80081e4:	40020470 	.word	0x40020470
 80081e8:	40020488 	.word	0x40020488
 80081ec:	400204a0 	.word	0x400204a0
 80081f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 020e 	bic.w	r2, r2, #14
 8008202:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a6c      	ldr	r2, [pc, #432]	; (80083bc <HAL_DMA_Abort_IT+0x3a8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d04a      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a6b      	ldr	r2, [pc, #428]	; (80083c0 <HAL_DMA_Abort_IT+0x3ac>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d045      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a69      	ldr	r2, [pc, #420]	; (80083c4 <HAL_DMA_Abort_IT+0x3b0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d040      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a68      	ldr	r2, [pc, #416]	; (80083c8 <HAL_DMA_Abort_IT+0x3b4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d03b      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a66      	ldr	r2, [pc, #408]	; (80083cc <HAL_DMA_Abort_IT+0x3b8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d036      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a65      	ldr	r2, [pc, #404]	; (80083d0 <HAL_DMA_Abort_IT+0x3bc>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d031      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a63      	ldr	r2, [pc, #396]	; (80083d4 <HAL_DMA_Abort_IT+0x3c0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d02c      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a62      	ldr	r2, [pc, #392]	; (80083d8 <HAL_DMA_Abort_IT+0x3c4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d027      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a60      	ldr	r2, [pc, #384]	; (80083dc <HAL_DMA_Abort_IT+0x3c8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d022      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a5f      	ldr	r2, [pc, #380]	; (80083e0 <HAL_DMA_Abort_IT+0x3cc>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d01d      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a5d      	ldr	r2, [pc, #372]	; (80083e4 <HAL_DMA_Abort_IT+0x3d0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d018      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a5c      	ldr	r2, [pc, #368]	; (80083e8 <HAL_DMA_Abort_IT+0x3d4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d013      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a5a      	ldr	r2, [pc, #360]	; (80083ec <HAL_DMA_Abort_IT+0x3d8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00e      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a59      	ldr	r2, [pc, #356]	; (80083f0 <HAL_DMA_Abort_IT+0x3dc>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d009      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a57      	ldr	r2, [pc, #348]	; (80083f4 <HAL_DMA_Abort_IT+0x3e0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x290>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a56      	ldr	r2, [pc, #344]	; (80083f8 <HAL_DMA_Abort_IT+0x3e4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d108      	bne.n	80082b6 <HAL_DMA_Abort_IT+0x2a2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0201 	bic.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	e007      	b.n	80082c6 <HAL_DMA_Abort_IT+0x2b2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a3c      	ldr	r2, [pc, #240]	; (80083bc <HAL_DMA_Abort_IT+0x3a8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d072      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a3a      	ldr	r2, [pc, #232]	; (80083c0 <HAL_DMA_Abort_IT+0x3ac>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d06d      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a39      	ldr	r2, [pc, #228]	; (80083c4 <HAL_DMA_Abort_IT+0x3b0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d068      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a37      	ldr	r2, [pc, #220]	; (80083c8 <HAL_DMA_Abort_IT+0x3b4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d063      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a36      	ldr	r2, [pc, #216]	; (80083cc <HAL_DMA_Abort_IT+0x3b8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d05e      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a34      	ldr	r2, [pc, #208]	; (80083d0 <HAL_DMA_Abort_IT+0x3bc>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d059      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a33      	ldr	r2, [pc, #204]	; (80083d4 <HAL_DMA_Abort_IT+0x3c0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d054      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a31      	ldr	r2, [pc, #196]	; (80083d8 <HAL_DMA_Abort_IT+0x3c4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d04f      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a30      	ldr	r2, [pc, #192]	; (80083dc <HAL_DMA_Abort_IT+0x3c8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d04a      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a2e      	ldr	r2, [pc, #184]	; (80083e0 <HAL_DMA_Abort_IT+0x3cc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d045      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a2d      	ldr	r2, [pc, #180]	; (80083e4 <HAL_DMA_Abort_IT+0x3d0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d040      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a2b      	ldr	r2, [pc, #172]	; (80083e8 <HAL_DMA_Abort_IT+0x3d4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d03b      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a2a      	ldr	r2, [pc, #168]	; (80083ec <HAL_DMA_Abort_IT+0x3d8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d036      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a28      	ldr	r2, [pc, #160]	; (80083f0 <HAL_DMA_Abort_IT+0x3dc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d031      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <HAL_DMA_Abort_IT+0x3e0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d02c      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a25      	ldr	r2, [pc, #148]	; (80083f8 <HAL_DMA_Abort_IT+0x3e4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d027      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a24      	ldr	r2, [pc, #144]	; (80083fc <HAL_DMA_Abort_IT+0x3e8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d022      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a22      	ldr	r2, [pc, #136]	; (8008400 <HAL_DMA_Abort_IT+0x3ec>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d01d      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a21      	ldr	r2, [pc, #132]	; (8008404 <HAL_DMA_Abort_IT+0x3f0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d018      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1f      	ldr	r2, [pc, #124]	; (8008408 <HAL_DMA_Abort_IT+0x3f4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1e      	ldr	r2, [pc, #120]	; (800840c <HAL_DMA_Abort_IT+0x3f8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00e      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1c      	ldr	r2, [pc, #112]	; (8008410 <HAL_DMA_Abort_IT+0x3fc>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d009      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1b      	ldr	r2, [pc, #108]	; (8008414 <HAL_DMA_Abort_IT+0x400>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d004      	beq.n	80083b6 <HAL_DMA_Abort_IT+0x3a2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a19      	ldr	r2, [pc, #100]	; (8008418 <HAL_DMA_Abort_IT+0x404>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d132      	bne.n	800841c <HAL_DMA_Abort_IT+0x408>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e031      	b.n	800841e <HAL_DMA_Abort_IT+0x40a>
 80083ba:	bf00      	nop
 80083bc:	40020010 	.word	0x40020010
 80083c0:	40020028 	.word	0x40020028
 80083c4:	40020040 	.word	0x40020040
 80083c8:	40020058 	.word	0x40020058
 80083cc:	40020070 	.word	0x40020070
 80083d0:	40020088 	.word	0x40020088
 80083d4:	400200a0 	.word	0x400200a0
 80083d8:	400200b8 	.word	0x400200b8
 80083dc:	40020410 	.word	0x40020410
 80083e0:	40020428 	.word	0x40020428
 80083e4:	40020440 	.word	0x40020440
 80083e8:	40020458 	.word	0x40020458
 80083ec:	40020470 	.word	0x40020470
 80083f0:	40020488 	.word	0x40020488
 80083f4:	400204a0 	.word	0x400204a0
 80083f8:	400204b8 	.word	0x400204b8
 80083fc:	58025408 	.word	0x58025408
 8008400:	5802541c 	.word	0x5802541c
 8008404:	58025430 	.word	0x58025430
 8008408:	58025444 	.word	0x58025444
 800840c:	58025458 	.word	0x58025458
 8008410:	5802546c 	.word	0x5802546c
 8008414:	58025480 	.word	0x58025480
 8008418:	58025494 	.word	0x58025494
 800841c:	2300      	movs	r3, #0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d028      	beq.n	8008474 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008430:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008436:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	2201      	movs	r2, #1
 8008442:	409a      	lsls	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008450:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00c      	beq.n	8008474 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008468:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008472:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop

080084a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	; 0x28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80084ac:	4b67      	ldr	r3, [pc, #412]	; (800864c <HAL_DMA_IRQHandler+0x1ac>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a67      	ldr	r2, [pc, #412]	; (8008650 <HAL_DMA_IRQHandler+0x1b0>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	0a9b      	lsrs	r3, r3, #10
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a5f      	ldr	r2, [pc, #380]	; (8008654 <HAL_DMA_IRQHandler+0x1b4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d04a      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5d      	ldr	r2, [pc, #372]	; (8008658 <HAL_DMA_IRQHandler+0x1b8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d045      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a5c      	ldr	r2, [pc, #368]	; (800865c <HAL_DMA_IRQHandler+0x1bc>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d040      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a5a      	ldr	r2, [pc, #360]	; (8008660 <HAL_DMA_IRQHandler+0x1c0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d03b      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a59      	ldr	r2, [pc, #356]	; (8008664 <HAL_DMA_IRQHandler+0x1c4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d036      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a57      	ldr	r2, [pc, #348]	; (8008668 <HAL_DMA_IRQHandler+0x1c8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d031      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a56      	ldr	r2, [pc, #344]	; (800866c <HAL_DMA_IRQHandler+0x1cc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d02c      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a54      	ldr	r2, [pc, #336]	; (8008670 <HAL_DMA_IRQHandler+0x1d0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d027      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a53      	ldr	r2, [pc, #332]	; (8008674 <HAL_DMA_IRQHandler+0x1d4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d022      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a51      	ldr	r2, [pc, #324]	; (8008678 <HAL_DMA_IRQHandler+0x1d8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01d      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a50      	ldr	r2, [pc, #320]	; (800867c <HAL_DMA_IRQHandler+0x1dc>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d018      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a4e      	ldr	r2, [pc, #312]	; (8008680 <HAL_DMA_IRQHandler+0x1e0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d013      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a4d      	ldr	r2, [pc, #308]	; (8008684 <HAL_DMA_IRQHandler+0x1e4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00e      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a4b      	ldr	r2, [pc, #300]	; (8008688 <HAL_DMA_IRQHandler+0x1e8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d009      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a4a      	ldr	r2, [pc, #296]	; (800868c <HAL_DMA_IRQHandler+0x1ec>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d004      	beq.n	8008572 <HAL_DMA_IRQHandler+0xd2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a48      	ldr	r2, [pc, #288]	; (8008690 <HAL_DMA_IRQHandler+0x1f0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d101      	bne.n	8008576 <HAL_DMA_IRQHandler+0xd6>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <HAL_DMA_IRQHandler+0xd8>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 842b 	beq.w	8008dd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	f003 031f 	and.w	r3, r3, #31
 8008586:	2208      	movs	r2, #8
 8008588:	409a      	lsls	r2, r3
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	4013      	ands	r3, r2
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 80a2 	beq.w	80086d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a2e      	ldr	r2, [pc, #184]	; (8008654 <HAL_DMA_IRQHandler+0x1b4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d04a      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a2d      	ldr	r2, [pc, #180]	; (8008658 <HAL_DMA_IRQHandler+0x1b8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d045      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a2b      	ldr	r2, [pc, #172]	; (800865c <HAL_DMA_IRQHandler+0x1bc>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d040      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a2a      	ldr	r2, [pc, #168]	; (8008660 <HAL_DMA_IRQHandler+0x1c0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d03b      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a28      	ldr	r2, [pc, #160]	; (8008664 <HAL_DMA_IRQHandler+0x1c4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d036      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a27      	ldr	r2, [pc, #156]	; (8008668 <HAL_DMA_IRQHandler+0x1c8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d031      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a25      	ldr	r2, [pc, #148]	; (800866c <HAL_DMA_IRQHandler+0x1cc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d02c      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a24      	ldr	r2, [pc, #144]	; (8008670 <HAL_DMA_IRQHandler+0x1d0>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d027      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a22      	ldr	r2, [pc, #136]	; (8008674 <HAL_DMA_IRQHandler+0x1d4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d022      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a21      	ldr	r2, [pc, #132]	; (8008678 <HAL_DMA_IRQHandler+0x1d8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d01d      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1f      	ldr	r2, [pc, #124]	; (800867c <HAL_DMA_IRQHandler+0x1dc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d018      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <HAL_DMA_IRQHandler+0x1e0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d013      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a1c      	ldr	r2, [pc, #112]	; (8008684 <HAL_DMA_IRQHandler+0x1e4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00e      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a1b      	ldr	r2, [pc, #108]	; (8008688 <HAL_DMA_IRQHandler+0x1e8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d009      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a19      	ldr	r2, [pc, #100]	; (800868c <HAL_DMA_IRQHandler+0x1ec>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d004      	beq.n	8008634 <HAL_DMA_IRQHandler+0x194>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a18      	ldr	r2, [pc, #96]	; (8008690 <HAL_DMA_IRQHandler+0x1f0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d12f      	bne.n	8008694 <HAL_DMA_IRQHandler+0x1f4>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	bf14      	ite	ne
 8008642:	2301      	movne	r3, #1
 8008644:	2300      	moveq	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	e02e      	b.n	80086a8 <HAL_DMA_IRQHandler+0x208>
 800864a:	bf00      	nop
 800864c:	24000228 	.word	0x24000228
 8008650:	1b4e81b5 	.word	0x1b4e81b5
 8008654:	40020010 	.word	0x40020010
 8008658:	40020028 	.word	0x40020028
 800865c:	40020040 	.word	0x40020040
 8008660:	40020058 	.word	0x40020058
 8008664:	40020070 	.word	0x40020070
 8008668:	40020088 	.word	0x40020088
 800866c:	400200a0 	.word	0x400200a0
 8008670:	400200b8 	.word	0x400200b8
 8008674:	40020410 	.word	0x40020410
 8008678:	40020428 	.word	0x40020428
 800867c:	40020440 	.word	0x40020440
 8008680:	40020458 	.word	0x40020458
 8008684:	40020470 	.word	0x40020470
 8008688:	40020488 	.word	0x40020488
 800868c:	400204a0 	.word	0x400204a0
 8008690:	400204b8 	.word	0x400204b8
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d015      	beq.n	80086d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0204 	bic.w	r2, r2, #4
 80086ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c0:	f003 031f 	and.w	r3, r3, #31
 80086c4:	2208      	movs	r2, #8
 80086c6:	409a      	lsls	r2, r3
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d0:	f043 0201 	orr.w	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	fa22 f303 	lsr.w	r3, r2, r3
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d06e      	beq.n	80087cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a69      	ldr	r2, [pc, #420]	; (8008898 <HAL_DMA_IRQHandler+0x3f8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d04a      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a67      	ldr	r2, [pc, #412]	; (800889c <HAL_DMA_IRQHandler+0x3fc>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d045      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a66      	ldr	r2, [pc, #408]	; (80088a0 <HAL_DMA_IRQHandler+0x400>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d040      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a64      	ldr	r2, [pc, #400]	; (80088a4 <HAL_DMA_IRQHandler+0x404>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d03b      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a63      	ldr	r2, [pc, #396]	; (80088a8 <HAL_DMA_IRQHandler+0x408>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d036      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a61      	ldr	r2, [pc, #388]	; (80088ac <HAL_DMA_IRQHandler+0x40c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d031      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a60      	ldr	r2, [pc, #384]	; (80088b0 <HAL_DMA_IRQHandler+0x410>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d02c      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a5e      	ldr	r2, [pc, #376]	; (80088b4 <HAL_DMA_IRQHandler+0x414>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d027      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a5d      	ldr	r2, [pc, #372]	; (80088b8 <HAL_DMA_IRQHandler+0x418>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d022      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a5b      	ldr	r2, [pc, #364]	; (80088bc <HAL_DMA_IRQHandler+0x41c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01d      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a5a      	ldr	r2, [pc, #360]	; (80088c0 <HAL_DMA_IRQHandler+0x420>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d018      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a58      	ldr	r2, [pc, #352]	; (80088c4 <HAL_DMA_IRQHandler+0x424>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d013      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a57      	ldr	r2, [pc, #348]	; (80088c8 <HAL_DMA_IRQHandler+0x428>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00e      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a55      	ldr	r2, [pc, #340]	; (80088cc <HAL_DMA_IRQHandler+0x42c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d009      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a54      	ldr	r2, [pc, #336]	; (80088d0 <HAL_DMA_IRQHandler+0x430>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d004      	beq.n	800878e <HAL_DMA_IRQHandler+0x2ee>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a52      	ldr	r2, [pc, #328]	; (80088d4 <HAL_DMA_IRQHandler+0x434>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d10a      	bne.n	80087a4 <HAL_DMA_IRQHandler+0x304>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008798:	2b00      	cmp	r3, #0
 800879a:	bf14      	ite	ne
 800879c:	2301      	movne	r3, #1
 800879e:	2300      	moveq	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	e003      	b.n	80087ac <HAL_DMA_IRQHandler+0x30c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2300      	movs	r3, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00d      	beq.n	80087cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b4:	f003 031f 	and.w	r3, r3, #31
 80087b8:	2201      	movs	r2, #1
 80087ba:	409a      	lsls	r2, r3
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c4:	f043 0202 	orr.w	r2, r3, #2
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d0:	f003 031f 	and.w	r3, r3, #31
 80087d4:	2204      	movs	r2, #4
 80087d6:	409a      	lsls	r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 808f 	beq.w	8008900 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a2c      	ldr	r2, [pc, #176]	; (8008898 <HAL_DMA_IRQHandler+0x3f8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d04a      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a2a      	ldr	r2, [pc, #168]	; (800889c <HAL_DMA_IRQHandler+0x3fc>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d045      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <HAL_DMA_IRQHandler+0x400>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d040      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a27      	ldr	r2, [pc, #156]	; (80088a4 <HAL_DMA_IRQHandler+0x404>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d03b      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <HAL_DMA_IRQHandler+0x408>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d036      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a24      	ldr	r2, [pc, #144]	; (80088ac <HAL_DMA_IRQHandler+0x40c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d031      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a23      	ldr	r2, [pc, #140]	; (80088b0 <HAL_DMA_IRQHandler+0x410>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d02c      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a21      	ldr	r2, [pc, #132]	; (80088b4 <HAL_DMA_IRQHandler+0x414>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d027      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a20      	ldr	r2, [pc, #128]	; (80088b8 <HAL_DMA_IRQHandler+0x418>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d022      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1e      	ldr	r2, [pc, #120]	; (80088bc <HAL_DMA_IRQHandler+0x41c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d01d      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1d      	ldr	r2, [pc, #116]	; (80088c0 <HAL_DMA_IRQHandler+0x420>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d018      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1b      	ldr	r2, [pc, #108]	; (80088c4 <HAL_DMA_IRQHandler+0x424>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d013      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <HAL_DMA_IRQHandler+0x428>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00e      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a18      	ldr	r2, [pc, #96]	; (80088cc <HAL_DMA_IRQHandler+0x42c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d009      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <HAL_DMA_IRQHandler+0x430>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d004      	beq.n	8008882 <HAL_DMA_IRQHandler+0x3e2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <HAL_DMA_IRQHandler+0x434>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d12a      	bne.n	80088d8 <HAL_DMA_IRQHandler+0x438>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	e023      	b.n	80088e0 <HAL_DMA_IRQHandler+0x440>
 8008898:	40020010 	.word	0x40020010
 800889c:	40020028 	.word	0x40020028
 80088a0:	40020040 	.word	0x40020040
 80088a4:	40020058 	.word	0x40020058
 80088a8:	40020070 	.word	0x40020070
 80088ac:	40020088 	.word	0x40020088
 80088b0:	400200a0 	.word	0x400200a0
 80088b4:	400200b8 	.word	0x400200b8
 80088b8:	40020410 	.word	0x40020410
 80088bc:	40020428 	.word	0x40020428
 80088c0:	40020440 	.word	0x40020440
 80088c4:	40020458 	.word	0x40020458
 80088c8:	40020470 	.word	0x40020470
 80088cc:	40020488 	.word	0x40020488
 80088d0:	400204a0 	.word	0x400204a0
 80088d4:	400204b8 	.word	0x400204b8
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00d      	beq.n	8008900 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	2204      	movs	r2, #4
 80088ee:	409a      	lsls	r2, r3
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f8:	f043 0204 	orr.w	r2, r3, #4
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008904:	f003 031f 	and.w	r3, r3, #31
 8008908:	2210      	movs	r2, #16
 800890a:	409a      	lsls	r2, r3
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	4013      	ands	r3, r2
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80a6 	beq.w	8008a62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a85      	ldr	r2, [pc, #532]	; (8008b30 <HAL_DMA_IRQHandler+0x690>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d04a      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a83      	ldr	r2, [pc, #524]	; (8008b34 <HAL_DMA_IRQHandler+0x694>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d045      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a82      	ldr	r2, [pc, #520]	; (8008b38 <HAL_DMA_IRQHandler+0x698>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d040      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a80      	ldr	r2, [pc, #512]	; (8008b3c <HAL_DMA_IRQHandler+0x69c>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d03b      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a7f      	ldr	r2, [pc, #508]	; (8008b40 <HAL_DMA_IRQHandler+0x6a0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d036      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a7d      	ldr	r2, [pc, #500]	; (8008b44 <HAL_DMA_IRQHandler+0x6a4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d031      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a7c      	ldr	r2, [pc, #496]	; (8008b48 <HAL_DMA_IRQHandler+0x6a8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d02c      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a7a      	ldr	r2, [pc, #488]	; (8008b4c <HAL_DMA_IRQHandler+0x6ac>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d027      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a79      	ldr	r2, [pc, #484]	; (8008b50 <HAL_DMA_IRQHandler+0x6b0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d022      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a77      	ldr	r2, [pc, #476]	; (8008b54 <HAL_DMA_IRQHandler+0x6b4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01d      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a76      	ldr	r2, [pc, #472]	; (8008b58 <HAL_DMA_IRQHandler+0x6b8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d018      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a74      	ldr	r2, [pc, #464]	; (8008b5c <HAL_DMA_IRQHandler+0x6bc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a73      	ldr	r2, [pc, #460]	; (8008b60 <HAL_DMA_IRQHandler+0x6c0>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00e      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a71      	ldr	r2, [pc, #452]	; (8008b64 <HAL_DMA_IRQHandler+0x6c4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d009      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a70      	ldr	r2, [pc, #448]	; (8008b68 <HAL_DMA_IRQHandler+0x6c8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d004      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x516>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a6e      	ldr	r2, [pc, #440]	; (8008b6c <HAL_DMA_IRQHandler+0x6cc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d10a      	bne.n	80089cc <HAL_DMA_IRQHandler+0x52c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0308 	and.w	r3, r3, #8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	e009      	b.n	80089e0 <HAL_DMA_IRQHandler+0x540>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	bf14      	ite	ne
 80089da:	2301      	movne	r3, #1
 80089dc:	2300      	moveq	r3, #0
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d03e      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	2210      	movs	r2, #16
 80089ee:	409a      	lsls	r2, r3
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d018      	beq.n	8008a34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d108      	bne.n	8008a22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d024      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	e01f      	b.n	8008a62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01b      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
 8008a32:	e016      	b.n	8008a62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d107      	bne.n	8008a52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0208 	bic.w	r2, r2, #8
 8008a50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	409a      	lsls	r2, r3
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 8110 	beq.w	8008c98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a2c      	ldr	r2, [pc, #176]	; (8008b30 <HAL_DMA_IRQHandler+0x690>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d04a      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a2b      	ldr	r2, [pc, #172]	; (8008b34 <HAL_DMA_IRQHandler+0x694>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d045      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a29      	ldr	r2, [pc, #164]	; (8008b38 <HAL_DMA_IRQHandler+0x698>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d040      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a28      	ldr	r2, [pc, #160]	; (8008b3c <HAL_DMA_IRQHandler+0x69c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d03b      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a26      	ldr	r2, [pc, #152]	; (8008b40 <HAL_DMA_IRQHandler+0x6a0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d036      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a25      	ldr	r2, [pc, #148]	; (8008b44 <HAL_DMA_IRQHandler+0x6a4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d031      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a23      	ldr	r2, [pc, #140]	; (8008b48 <HAL_DMA_IRQHandler+0x6a8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d02c      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a22      	ldr	r2, [pc, #136]	; (8008b4c <HAL_DMA_IRQHandler+0x6ac>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d027      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <HAL_DMA_IRQHandler+0x6b0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d022      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1f      	ldr	r2, [pc, #124]	; (8008b54 <HAL_DMA_IRQHandler+0x6b4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d01d      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <HAL_DMA_IRQHandler+0x6b8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d018      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a1c      	ldr	r2, [pc, #112]	; (8008b5c <HAL_DMA_IRQHandler+0x6bc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d013      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a1a      	ldr	r2, [pc, #104]	; (8008b60 <HAL_DMA_IRQHandler+0x6c0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00e      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a19      	ldr	r2, [pc, #100]	; (8008b64 <HAL_DMA_IRQHandler+0x6c4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <HAL_DMA_IRQHandler+0x6c8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <HAL_DMA_IRQHandler+0x678>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <HAL_DMA_IRQHandler+0x6cc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d12b      	bne.n	8008b70 <HAL_DMA_IRQHandler+0x6d0>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0310 	and.w	r3, r3, #16
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bf14      	ite	ne
 8008b26:	2301      	movne	r3, #1
 8008b28:	2300      	moveq	r3, #0
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	e02a      	b.n	8008b84 <HAL_DMA_IRQHandler+0x6e4>
 8008b2e:	bf00      	nop
 8008b30:	40020010 	.word	0x40020010
 8008b34:	40020028 	.word	0x40020028
 8008b38:	40020040 	.word	0x40020040
 8008b3c:	40020058 	.word	0x40020058
 8008b40:	40020070 	.word	0x40020070
 8008b44:	40020088 	.word	0x40020088
 8008b48:	400200a0 	.word	0x400200a0
 8008b4c:	400200b8 	.word	0x400200b8
 8008b50:	40020410 	.word	0x40020410
 8008b54:	40020428 	.word	0x40020428
 8008b58:	40020440 	.word	0x40020440
 8008b5c:	40020458 	.word	0x40020458
 8008b60:	40020470 	.word	0x40020470
 8008b64:	40020488 	.word	0x40020488
 8008b68:	400204a0 	.word	0x400204a0
 8008b6c:	400204b8 	.word	0x400204b8
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	2300      	moveq	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8087 	beq.w	8008c98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8e:	f003 031f 	and.w	r3, r3, #31
 8008b92:	2220      	movs	r2, #32
 8008b94:	409a      	lsls	r2, r3
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d139      	bne.n	8008c1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0216 	bic.w	r2, r2, #22
 8008bb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695a      	ldr	r2, [r3, #20]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bc4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <HAL_DMA_IRQHandler+0x736>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d007      	beq.n	8008be6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0208 	bic.w	r2, r2, #8
 8008be4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bea:	f003 031f 	and.w	r3, r3, #31
 8008bee:	223f      	movs	r2, #63	; 0x3f
 8008bf0:	409a      	lsls	r2, r3
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 834a 	beq.w	80092a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	4798      	blx	r3
          }
          return;
 8008c18:	e344      	b.n	80092a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d018      	beq.n	8008c5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d108      	bne.n	8008c48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d02c      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
 8008c46:	e027      	b.n	8008c98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d023      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	4798      	blx	r3
 8008c58:	e01e      	b.n	8008c98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10f      	bne.n	8008c88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0210 	bic.w	r2, r2, #16
 8008c76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8306 	beq.w	80092ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8088 	beq.w	8008dc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a7a      	ldr	r2, [pc, #488]	; (8008ea8 <HAL_DMA_IRQHandler+0xa08>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d04a      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a79      	ldr	r2, [pc, #484]	; (8008eac <HAL_DMA_IRQHandler+0xa0c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d045      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a77      	ldr	r2, [pc, #476]	; (8008eb0 <HAL_DMA_IRQHandler+0xa10>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d040      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a76      	ldr	r2, [pc, #472]	; (8008eb4 <HAL_DMA_IRQHandler+0xa14>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d03b      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a74      	ldr	r2, [pc, #464]	; (8008eb8 <HAL_DMA_IRQHandler+0xa18>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d036      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a73      	ldr	r2, [pc, #460]	; (8008ebc <HAL_DMA_IRQHandler+0xa1c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d031      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a71      	ldr	r2, [pc, #452]	; (8008ec0 <HAL_DMA_IRQHandler+0xa20>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d02c      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a70      	ldr	r2, [pc, #448]	; (8008ec4 <HAL_DMA_IRQHandler+0xa24>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d027      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a6e      	ldr	r2, [pc, #440]	; (8008ec8 <HAL_DMA_IRQHandler+0xa28>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d022      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a6d      	ldr	r2, [pc, #436]	; (8008ecc <HAL_DMA_IRQHandler+0xa2c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d01d      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a6b      	ldr	r2, [pc, #428]	; (8008ed0 <HAL_DMA_IRQHandler+0xa30>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d018      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a6a      	ldr	r2, [pc, #424]	; (8008ed4 <HAL_DMA_IRQHandler+0xa34>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d013      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a68      	ldr	r2, [pc, #416]	; (8008ed8 <HAL_DMA_IRQHandler+0xa38>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00e      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a67      	ldr	r2, [pc, #412]	; (8008edc <HAL_DMA_IRQHandler+0xa3c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d009      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a65      	ldr	r2, [pc, #404]	; (8008ee0 <HAL_DMA_IRQHandler+0xa40>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d004      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x8b8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a64      	ldr	r2, [pc, #400]	; (8008ee4 <HAL_DMA_IRQHandler+0xa44>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d108      	bne.n	8008d6a <HAL_DMA_IRQHandler+0x8ca>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0201 	bic.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	e007      	b.n	8008d7a <HAL_DMA_IRQHandler+0x8da>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 0201 	bic.w	r2, r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d307      	bcc.n	8008d96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1f2      	bne.n	8008d7a <HAL_DMA_IRQHandler+0x8da>
 8008d94:	e000      	b.n	8008d98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008d96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2203      	movs	r2, #3
 8008daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008dae:	e003      	b.n	8008db8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8272 	beq.w	80092ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
 8008dd2:	e26c      	b.n	80092ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a43      	ldr	r2, [pc, #268]	; (8008ee8 <HAL_DMA_IRQHandler+0xa48>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d022      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a42      	ldr	r2, [pc, #264]	; (8008eec <HAL_DMA_IRQHandler+0xa4c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d01d      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a40      	ldr	r2, [pc, #256]	; (8008ef0 <HAL_DMA_IRQHandler+0xa50>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d018      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a3f      	ldr	r2, [pc, #252]	; (8008ef4 <HAL_DMA_IRQHandler+0xa54>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d013      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a3d      	ldr	r2, [pc, #244]	; (8008ef8 <HAL_DMA_IRQHandler+0xa58>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00e      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a3c      	ldr	r2, [pc, #240]	; (8008efc <HAL_DMA_IRQHandler+0xa5c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d009      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a3a      	ldr	r2, [pc, #232]	; (8008f00 <HAL_DMA_IRQHandler+0xa60>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d004      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x984>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a39      	ldr	r2, [pc, #228]	; (8008f04 <HAL_DMA_IRQHandler+0xa64>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d101      	bne.n	8008e28 <HAL_DMA_IRQHandler+0x988>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e000      	b.n	8008e2a <HAL_DMA_IRQHandler+0x98a>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 823f 	beq.w	80092ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	2204      	movs	r2, #4
 8008e42:	409a      	lsls	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 80cd 	beq.w	8008fe8 <HAL_DMA_IRQHandler+0xb48>
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80c7 	beq.w	8008fe8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2204      	movs	r2, #4
 8008e64:	409a      	lsls	r2, r3
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d049      	beq.n	8008f08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d109      	bne.n	8008e92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8210 	beq.w	80092a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e90:	e20a      	b.n	80092a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8206 	beq.w	80092a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ea4:	e200      	b.n	80092a8 <HAL_DMA_IRQHandler+0xe08>
 8008ea6:	bf00      	nop
 8008ea8:	40020010 	.word	0x40020010
 8008eac:	40020028 	.word	0x40020028
 8008eb0:	40020040 	.word	0x40020040
 8008eb4:	40020058 	.word	0x40020058
 8008eb8:	40020070 	.word	0x40020070
 8008ebc:	40020088 	.word	0x40020088
 8008ec0:	400200a0 	.word	0x400200a0
 8008ec4:	400200b8 	.word	0x400200b8
 8008ec8:	40020410 	.word	0x40020410
 8008ecc:	40020428 	.word	0x40020428
 8008ed0:	40020440 	.word	0x40020440
 8008ed4:	40020458 	.word	0x40020458
 8008ed8:	40020470 	.word	0x40020470
 8008edc:	40020488 	.word	0x40020488
 8008ee0:	400204a0 	.word	0x400204a0
 8008ee4:	400204b8 	.word	0x400204b8
 8008ee8:	58025408 	.word	0x58025408
 8008eec:	5802541c 	.word	0x5802541c
 8008ef0:	58025430 	.word	0x58025430
 8008ef4:	58025444 	.word	0x58025444
 8008ef8:	58025458 	.word	0x58025458
 8008efc:	5802546c 	.word	0x5802546c
 8008f00:	58025480 	.word	0x58025480
 8008f04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d160      	bne.n	8008fd4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a7f      	ldr	r2, [pc, #508]	; (8009114 <HAL_DMA_IRQHandler+0xc74>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d04a      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a7d      	ldr	r2, [pc, #500]	; (8009118 <HAL_DMA_IRQHandler+0xc78>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d045      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a7c      	ldr	r2, [pc, #496]	; (800911c <HAL_DMA_IRQHandler+0xc7c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d040      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a7a      	ldr	r2, [pc, #488]	; (8009120 <HAL_DMA_IRQHandler+0xc80>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d03b      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a79      	ldr	r2, [pc, #484]	; (8009124 <HAL_DMA_IRQHandler+0xc84>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d036      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a77      	ldr	r2, [pc, #476]	; (8009128 <HAL_DMA_IRQHandler+0xc88>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d031      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a76      	ldr	r2, [pc, #472]	; (800912c <HAL_DMA_IRQHandler+0xc8c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d02c      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a74      	ldr	r2, [pc, #464]	; (8009130 <HAL_DMA_IRQHandler+0xc90>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d027      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a73      	ldr	r2, [pc, #460]	; (8009134 <HAL_DMA_IRQHandler+0xc94>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d022      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a71      	ldr	r2, [pc, #452]	; (8009138 <HAL_DMA_IRQHandler+0xc98>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d01d      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a70      	ldr	r2, [pc, #448]	; (800913c <HAL_DMA_IRQHandler+0xc9c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d018      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a6e      	ldr	r2, [pc, #440]	; (8009140 <HAL_DMA_IRQHandler+0xca0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d013      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a6d      	ldr	r2, [pc, #436]	; (8009144 <HAL_DMA_IRQHandler+0xca4>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00e      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a6b      	ldr	r2, [pc, #428]	; (8009148 <HAL_DMA_IRQHandler+0xca8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d009      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a6a      	ldr	r2, [pc, #424]	; (800914c <HAL_DMA_IRQHandler+0xcac>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d004      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0xb12>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a68      	ldr	r2, [pc, #416]	; (8009150 <HAL_DMA_IRQHandler+0xcb0>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d108      	bne.n	8008fc4 <HAL_DMA_IRQHandler+0xb24>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0208 	bic.w	r2, r2, #8
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	e007      	b.n	8008fd4 <HAL_DMA_IRQHandler+0xb34>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0204 	bic.w	r2, r2, #4
 8008fd2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 8165 	beq.w	80092a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fe6:	e15f      	b.n	80092a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fec:	f003 031f 	and.w	r3, r3, #31
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	409a      	lsls	r2, r3
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80c5 	beq.w	8009188 <HAL_DMA_IRQHandler+0xce8>
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 80bf 	beq.w	8009188 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800900e:	f003 031f 	and.w	r3, r3, #31
 8009012:	2202      	movs	r2, #2
 8009014:	409a      	lsls	r2, r3
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d018      	beq.n	8009056 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 813a 	beq.w	80092ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009040:	e134      	b.n	80092ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8130 	beq.w	80092ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009054:	e12a      	b.n	80092ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	2b00      	cmp	r3, #0
 800905e:	f040 8089 	bne.w	8009174 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a2b      	ldr	r2, [pc, #172]	; (8009114 <HAL_DMA_IRQHandler+0xc74>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d04a      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a29      	ldr	r2, [pc, #164]	; (8009118 <HAL_DMA_IRQHandler+0xc78>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d045      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a28      	ldr	r2, [pc, #160]	; (800911c <HAL_DMA_IRQHandler+0xc7c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d040      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a26      	ldr	r2, [pc, #152]	; (8009120 <HAL_DMA_IRQHandler+0xc80>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d03b      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a25      	ldr	r2, [pc, #148]	; (8009124 <HAL_DMA_IRQHandler+0xc84>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d036      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a23      	ldr	r2, [pc, #140]	; (8009128 <HAL_DMA_IRQHandler+0xc88>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d031      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a22      	ldr	r2, [pc, #136]	; (800912c <HAL_DMA_IRQHandler+0xc8c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d02c      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a20      	ldr	r2, [pc, #128]	; (8009130 <HAL_DMA_IRQHandler+0xc90>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d027      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a1f      	ldr	r2, [pc, #124]	; (8009134 <HAL_DMA_IRQHandler+0xc94>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d022      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <HAL_DMA_IRQHandler+0xc98>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d01d      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1c      	ldr	r2, [pc, #112]	; (800913c <HAL_DMA_IRQHandler+0xc9c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d018      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1a      	ldr	r2, [pc, #104]	; (8009140 <HAL_DMA_IRQHandler+0xca0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a19      	ldr	r2, [pc, #100]	; (8009144 <HAL_DMA_IRQHandler+0xca4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00e      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a17      	ldr	r2, [pc, #92]	; (8009148 <HAL_DMA_IRQHandler+0xca8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d009      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a16      	ldr	r2, [pc, #88]	; (800914c <HAL_DMA_IRQHandler+0xcac>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d004      	beq.n	8009102 <HAL_DMA_IRQHandler+0xc62>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a14      	ldr	r2, [pc, #80]	; (8009150 <HAL_DMA_IRQHandler+0xcb0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d128      	bne.n	8009154 <HAL_DMA_IRQHandler+0xcb4>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0214 	bic.w	r2, r2, #20
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	e027      	b.n	8009164 <HAL_DMA_IRQHandler+0xcc4>
 8009114:	40020010 	.word	0x40020010
 8009118:	40020028 	.word	0x40020028
 800911c:	40020040 	.word	0x40020040
 8009120:	40020058 	.word	0x40020058
 8009124:	40020070 	.word	0x40020070
 8009128:	40020088 	.word	0x40020088
 800912c:	400200a0 	.word	0x400200a0
 8009130:	400200b8 	.word	0x400200b8
 8009134:	40020410 	.word	0x40020410
 8009138:	40020428 	.word	0x40020428
 800913c:	40020440 	.word	0x40020440
 8009140:	40020458 	.word	0x40020458
 8009144:	40020470 	.word	0x40020470
 8009148:	40020488 	.word	0x40020488
 800914c:	400204a0 	.word	0x400204a0
 8009150:	400204b8 	.word	0x400204b8
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 020a 	bic.w	r2, r2, #10
 8009162:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8097 	beq.w	80092ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009186:	e091      	b.n	80092ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	2208      	movs	r2, #8
 8009192:	409a      	lsls	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	4013      	ands	r3, r2
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8088 	beq.w	80092ae <HAL_DMA_IRQHandler+0xe0e>
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8082 	beq.w	80092ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a41      	ldr	r2, [pc, #260]	; (80092b4 <HAL_DMA_IRQHandler+0xe14>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d04a      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a3f      	ldr	r2, [pc, #252]	; (80092b8 <HAL_DMA_IRQHandler+0xe18>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d045      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a3e      	ldr	r2, [pc, #248]	; (80092bc <HAL_DMA_IRQHandler+0xe1c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d040      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a3c      	ldr	r2, [pc, #240]	; (80092c0 <HAL_DMA_IRQHandler+0xe20>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d03b      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a3b      	ldr	r2, [pc, #236]	; (80092c4 <HAL_DMA_IRQHandler+0xe24>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d036      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a39      	ldr	r2, [pc, #228]	; (80092c8 <HAL_DMA_IRQHandler+0xe28>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d031      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a38      	ldr	r2, [pc, #224]	; (80092cc <HAL_DMA_IRQHandler+0xe2c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d02c      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a36      	ldr	r2, [pc, #216]	; (80092d0 <HAL_DMA_IRQHandler+0xe30>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d027      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a35      	ldr	r2, [pc, #212]	; (80092d4 <HAL_DMA_IRQHandler+0xe34>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d022      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a33      	ldr	r2, [pc, #204]	; (80092d8 <HAL_DMA_IRQHandler+0xe38>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01d      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a32      	ldr	r2, [pc, #200]	; (80092dc <HAL_DMA_IRQHandler+0xe3c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d018      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a30      	ldr	r2, [pc, #192]	; (80092e0 <HAL_DMA_IRQHandler+0xe40>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d013      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a2f      	ldr	r2, [pc, #188]	; (80092e4 <HAL_DMA_IRQHandler+0xe44>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00e      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a2d      	ldr	r2, [pc, #180]	; (80092e8 <HAL_DMA_IRQHandler+0xe48>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a2c      	ldr	r2, [pc, #176]	; (80092ec <HAL_DMA_IRQHandler+0xe4c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_DMA_IRQHandler+0xdaa>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a2a      	ldr	r2, [pc, #168]	; (80092f0 <HAL_DMA_IRQHandler+0xe50>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d108      	bne.n	800925c <HAL_DMA_IRQHandler+0xdbc>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 021c 	bic.w	r2, r2, #28
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e007      	b.n	800926c <HAL_DMA_IRQHandler+0xdcc>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 020e 	bic.w	r2, r2, #14
 800926a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	2201      	movs	r2, #1
 8009276:	409a      	lsls	r2, r3
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
 80092a2:	e004      	b.n	80092ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80092a4:	bf00      	nop
 80092a6:	e002      	b.n	80092ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092a8:	bf00      	nop
 80092aa:	e000      	b.n	80092ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80092ae:	3728      	adds	r7, #40	; 0x28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40020010 	.word	0x40020010
 80092b8:	40020028 	.word	0x40020028
 80092bc:	40020040 	.word	0x40020040
 80092c0:	40020058 	.word	0x40020058
 80092c4:	40020070 	.word	0x40020070
 80092c8:	40020088 	.word	0x40020088
 80092cc:	400200a0 	.word	0x400200a0
 80092d0:	400200b8 	.word	0x400200b8
 80092d4:	40020410 	.word	0x40020410
 80092d8:	40020428 	.word	0x40020428
 80092dc:	40020440 	.word	0x40020440
 80092e0:	40020458 	.word	0x40020458
 80092e4:	40020470 	.word	0x40020470
 80092e8:	40020488 	.word	0x40020488
 80092ec:	400204a0 	.word	0x400204a0
 80092f0:	400204b8 	.word	0x400204b8

080092f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009306:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800930c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a7f      	ldr	r2, [pc, #508]	; (8009510 <DMA_SetConfig+0x21c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d072      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a7d      	ldr	r2, [pc, #500]	; (8009514 <DMA_SetConfig+0x220>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d06d      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a7c      	ldr	r2, [pc, #496]	; (8009518 <DMA_SetConfig+0x224>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d068      	beq.n	80093fe <DMA_SetConfig+0x10a>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a7a      	ldr	r2, [pc, #488]	; (800951c <DMA_SetConfig+0x228>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d063      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a79      	ldr	r2, [pc, #484]	; (8009520 <DMA_SetConfig+0x22c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d05e      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a77      	ldr	r2, [pc, #476]	; (8009524 <DMA_SetConfig+0x230>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d059      	beq.n	80093fe <DMA_SetConfig+0x10a>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a76      	ldr	r2, [pc, #472]	; (8009528 <DMA_SetConfig+0x234>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d054      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a74      	ldr	r2, [pc, #464]	; (800952c <DMA_SetConfig+0x238>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d04f      	beq.n	80093fe <DMA_SetConfig+0x10a>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a73      	ldr	r2, [pc, #460]	; (8009530 <DMA_SetConfig+0x23c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d04a      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a71      	ldr	r2, [pc, #452]	; (8009534 <DMA_SetConfig+0x240>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d045      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a70      	ldr	r2, [pc, #448]	; (8009538 <DMA_SetConfig+0x244>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d040      	beq.n	80093fe <DMA_SetConfig+0x10a>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a6e      	ldr	r2, [pc, #440]	; (800953c <DMA_SetConfig+0x248>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d03b      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a6d      	ldr	r2, [pc, #436]	; (8009540 <DMA_SetConfig+0x24c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d036      	beq.n	80093fe <DMA_SetConfig+0x10a>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a6b      	ldr	r2, [pc, #428]	; (8009544 <DMA_SetConfig+0x250>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d031      	beq.n	80093fe <DMA_SetConfig+0x10a>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a6a      	ldr	r2, [pc, #424]	; (8009548 <DMA_SetConfig+0x254>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d02c      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a68      	ldr	r2, [pc, #416]	; (800954c <DMA_SetConfig+0x258>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d027      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a67      	ldr	r2, [pc, #412]	; (8009550 <DMA_SetConfig+0x25c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d022      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a65      	ldr	r2, [pc, #404]	; (8009554 <DMA_SetConfig+0x260>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d01d      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a64      	ldr	r2, [pc, #400]	; (8009558 <DMA_SetConfig+0x264>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d018      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a62      	ldr	r2, [pc, #392]	; (800955c <DMA_SetConfig+0x268>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a61      	ldr	r2, [pc, #388]	; (8009560 <DMA_SetConfig+0x26c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d00e      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a5f      	ldr	r2, [pc, #380]	; (8009564 <DMA_SetConfig+0x270>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d009      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a5e      	ldr	r2, [pc, #376]	; (8009568 <DMA_SetConfig+0x274>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d004      	beq.n	80093fe <DMA_SetConfig+0x10a>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a5c      	ldr	r2, [pc, #368]	; (800956c <DMA_SetConfig+0x278>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d101      	bne.n	8009402 <DMA_SetConfig+0x10e>
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <DMA_SetConfig+0x110>
 8009402:	2300      	movs	r3, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009410:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009422:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a39      	ldr	r2, [pc, #228]	; (8009510 <DMA_SetConfig+0x21c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d04a      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a38      	ldr	r2, [pc, #224]	; (8009514 <DMA_SetConfig+0x220>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d045      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a36      	ldr	r2, [pc, #216]	; (8009518 <DMA_SetConfig+0x224>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d040      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a35      	ldr	r2, [pc, #212]	; (800951c <DMA_SetConfig+0x228>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d03b      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a33      	ldr	r2, [pc, #204]	; (8009520 <DMA_SetConfig+0x22c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d036      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a32      	ldr	r2, [pc, #200]	; (8009524 <DMA_SetConfig+0x230>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d031      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a30      	ldr	r2, [pc, #192]	; (8009528 <DMA_SetConfig+0x234>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d02c      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a2f      	ldr	r2, [pc, #188]	; (800952c <DMA_SetConfig+0x238>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d027      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a2d      	ldr	r2, [pc, #180]	; (8009530 <DMA_SetConfig+0x23c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d022      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a2c      	ldr	r2, [pc, #176]	; (8009534 <DMA_SetConfig+0x240>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d01d      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a2a      	ldr	r2, [pc, #168]	; (8009538 <DMA_SetConfig+0x244>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d018      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a29      	ldr	r2, [pc, #164]	; (800953c <DMA_SetConfig+0x248>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d013      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a27      	ldr	r2, [pc, #156]	; (8009540 <DMA_SetConfig+0x24c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00e      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a26      	ldr	r2, [pc, #152]	; (8009544 <DMA_SetConfig+0x250>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d009      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a24      	ldr	r2, [pc, #144]	; (8009548 <DMA_SetConfig+0x254>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <DMA_SetConfig+0x1d0>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a23      	ldr	r2, [pc, #140]	; (800954c <DMA_SetConfig+0x258>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d101      	bne.n	80094c8 <DMA_SetConfig+0x1d4>
 80094c4:	2301      	movs	r3, #1
 80094c6:	e000      	b.n	80094ca <DMA_SetConfig+0x1d6>
 80094c8:	2300      	movs	r3, #0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d059      	beq.n	8009582 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d2:	f003 031f 	and.w	r3, r3, #31
 80094d6:	223f      	movs	r2, #63	; 0x3f
 80094d8:	409a      	lsls	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	2b40      	cmp	r3, #64	; 0x40
 80094fc:	d138      	bne.n	8009570 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800950e:	e086      	b.n	800961e <DMA_SetConfig+0x32a>
 8009510:	40020010 	.word	0x40020010
 8009514:	40020028 	.word	0x40020028
 8009518:	40020040 	.word	0x40020040
 800951c:	40020058 	.word	0x40020058
 8009520:	40020070 	.word	0x40020070
 8009524:	40020088 	.word	0x40020088
 8009528:	400200a0 	.word	0x400200a0
 800952c:	400200b8 	.word	0x400200b8
 8009530:	40020410 	.word	0x40020410
 8009534:	40020428 	.word	0x40020428
 8009538:	40020440 	.word	0x40020440
 800953c:	40020458 	.word	0x40020458
 8009540:	40020470 	.word	0x40020470
 8009544:	40020488 	.word	0x40020488
 8009548:	400204a0 	.word	0x400204a0
 800954c:	400204b8 	.word	0x400204b8
 8009550:	58025408 	.word	0x58025408
 8009554:	5802541c 	.word	0x5802541c
 8009558:	58025430 	.word	0x58025430
 800955c:	58025444 	.word	0x58025444
 8009560:	58025458 	.word	0x58025458
 8009564:	5802546c 	.word	0x5802546c
 8009568:	58025480 	.word	0x58025480
 800956c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]
}
 8009580:	e04d      	b.n	800961e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a29      	ldr	r2, [pc, #164]	; (800962c <DMA_SetConfig+0x338>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d022      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a27      	ldr	r2, [pc, #156]	; (8009630 <DMA_SetConfig+0x33c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d01d      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a26      	ldr	r2, [pc, #152]	; (8009634 <DMA_SetConfig+0x340>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d018      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a24      	ldr	r2, [pc, #144]	; (8009638 <DMA_SetConfig+0x344>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a23      	ldr	r2, [pc, #140]	; (800963c <DMA_SetConfig+0x348>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00e      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a21      	ldr	r2, [pc, #132]	; (8009640 <DMA_SetConfig+0x34c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d009      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a20      	ldr	r2, [pc, #128]	; (8009644 <DMA_SetConfig+0x350>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d004      	beq.n	80095d2 <DMA_SetConfig+0x2de>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <DMA_SetConfig+0x354>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d101      	bne.n	80095d6 <DMA_SetConfig+0x2e2>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <DMA_SetConfig+0x2e4>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d020      	beq.n	800961e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	2201      	movs	r2, #1
 80095e6:	409a      	lsls	r2, r3
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d108      	bne.n	800960e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	60da      	str	r2, [r3, #12]
}
 800960c:	e007      	b.n	800961e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	60da      	str	r2, [r3, #12]
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	58025408 	.word	0x58025408
 8009630:	5802541c 	.word	0x5802541c
 8009634:	58025430 	.word	0x58025430
 8009638:	58025444 	.word	0x58025444
 800963c:	58025458 	.word	0x58025458
 8009640:	5802546c 	.word	0x5802546c
 8009644:	58025480 	.word	0x58025480
 8009648:	58025494 	.word	0x58025494

0800964c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a42      	ldr	r2, [pc, #264]	; (8009764 <DMA_CalcBaseAndBitshift+0x118>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d04a      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a41      	ldr	r2, [pc, #260]	; (8009768 <DMA_CalcBaseAndBitshift+0x11c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d045      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a3f      	ldr	r2, [pc, #252]	; (800976c <DMA_CalcBaseAndBitshift+0x120>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d040      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a3e      	ldr	r2, [pc, #248]	; (8009770 <DMA_CalcBaseAndBitshift+0x124>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d03b      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a3c      	ldr	r2, [pc, #240]	; (8009774 <DMA_CalcBaseAndBitshift+0x128>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d036      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a3b      	ldr	r2, [pc, #236]	; (8009778 <DMA_CalcBaseAndBitshift+0x12c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d031      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a39      	ldr	r2, [pc, #228]	; (800977c <DMA_CalcBaseAndBitshift+0x130>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d02c      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a38      	ldr	r2, [pc, #224]	; (8009780 <DMA_CalcBaseAndBitshift+0x134>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d027      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a36      	ldr	r2, [pc, #216]	; (8009784 <DMA_CalcBaseAndBitshift+0x138>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d022      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a35      	ldr	r2, [pc, #212]	; (8009788 <DMA_CalcBaseAndBitshift+0x13c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d01d      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a33      	ldr	r2, [pc, #204]	; (800978c <DMA_CalcBaseAndBitshift+0x140>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d018      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a32      	ldr	r2, [pc, #200]	; (8009790 <DMA_CalcBaseAndBitshift+0x144>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d013      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a30      	ldr	r2, [pc, #192]	; (8009794 <DMA_CalcBaseAndBitshift+0x148>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00e      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2f      	ldr	r2, [pc, #188]	; (8009798 <DMA_CalcBaseAndBitshift+0x14c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d009      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a2d      	ldr	r2, [pc, #180]	; (800979c <DMA_CalcBaseAndBitshift+0x150>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d004      	beq.n	80096f4 <DMA_CalcBaseAndBitshift+0xa8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a2c      	ldr	r2, [pc, #176]	; (80097a0 <DMA_CalcBaseAndBitshift+0x154>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d101      	bne.n	80096f8 <DMA_CalcBaseAndBitshift+0xac>
 80096f4:	2301      	movs	r3, #1
 80096f6:	e000      	b.n	80096fa <DMA_CalcBaseAndBitshift+0xae>
 80096f8:	2300      	movs	r3, #0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d024      	beq.n	8009748 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	3b10      	subs	r3, #16
 8009706:	4a27      	ldr	r2, [pc, #156]	; (80097a4 <DMA_CalcBaseAndBitshift+0x158>)
 8009708:	fba2 2303 	umull	r2, r3, r2, r3
 800970c:	091b      	lsrs	r3, r3, #4
 800970e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	4a24      	ldr	r2, [pc, #144]	; (80097a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8009718:	5cd3      	ldrb	r3, [r2, r3]
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b03      	cmp	r3, #3
 8009724:	d908      	bls.n	8009738 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	4b1f      	ldr	r3, [pc, #124]	; (80097ac <DMA_CalcBaseAndBitshift+0x160>)
 800972e:	4013      	ands	r3, r2
 8009730:	1d1a      	adds	r2, r3, #4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	659a      	str	r2, [r3, #88]	; 0x58
 8009736:	e00d      	b.n	8009754 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <DMA_CalcBaseAndBitshift+0x160>)
 8009740:	4013      	ands	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6593      	str	r3, [r2, #88]	; 0x58
 8009746:	e005      	b.n	8009754 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	40020010 	.word	0x40020010
 8009768:	40020028 	.word	0x40020028
 800976c:	40020040 	.word	0x40020040
 8009770:	40020058 	.word	0x40020058
 8009774:	40020070 	.word	0x40020070
 8009778:	40020088 	.word	0x40020088
 800977c:	400200a0 	.word	0x400200a0
 8009780:	400200b8 	.word	0x400200b8
 8009784:	40020410 	.word	0x40020410
 8009788:	40020428 	.word	0x40020428
 800978c:	40020440 	.word	0x40020440
 8009790:	40020458 	.word	0x40020458
 8009794:	40020470 	.word	0x40020470
 8009798:	40020488 	.word	0x40020488
 800979c:	400204a0 	.word	0x400204a0
 80097a0:	400204b8 	.word	0x400204b8
 80097a4:	aaaaaaab 	.word	0xaaaaaaab
 80097a8:	080141b4 	.word	0x080141b4
 80097ac:	fffffc00 	.word	0xfffffc00

080097b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d120      	bne.n	8009806 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d858      	bhi.n	800987e <DMA_CheckFifoParam+0xce>
 80097cc:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <DMA_CheckFifoParam+0x24>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	080097e5 	.word	0x080097e5
 80097d8:	080097f7 	.word	0x080097f7
 80097dc:	080097e5 	.word	0x080097e5
 80097e0:	0800987f 	.word	0x0800987f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d048      	beq.n	8009882 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097f4:	e045      	b.n	8009882 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097fe:	d142      	bne.n	8009886 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009804:	e03f      	b.n	8009886 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800980e:	d123      	bne.n	8009858 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009814:	2b03      	cmp	r3, #3
 8009816:	d838      	bhi.n	800988a <DMA_CheckFifoParam+0xda>
 8009818:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <DMA_CheckFifoParam+0x70>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	08009831 	.word	0x08009831
 8009824:	08009837 	.word	0x08009837
 8009828:	08009831 	.word	0x08009831
 800982c:	08009849 	.word	0x08009849
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	73fb      	strb	r3, [r7, #15]
        break;
 8009834:	e030      	b.n	8009898 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d025      	beq.n	800988e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009846:	e022      	b.n	800988e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009850:	d11f      	bne.n	8009892 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009856:	e01c      	b.n	8009892 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985c:	2b02      	cmp	r3, #2
 800985e:	d902      	bls.n	8009866 <DMA_CheckFifoParam+0xb6>
 8009860:	2b03      	cmp	r3, #3
 8009862:	d003      	beq.n	800986c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009864:	e018      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	73fb      	strb	r3, [r7, #15]
        break;
 800986a:	e015      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00e      	beq.n	8009896 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	73fb      	strb	r3, [r7, #15]
    break;
 800987c:	e00b      	b.n	8009896 <DMA_CheckFifoParam+0xe6>
        break;
 800987e:	bf00      	nop
 8009880:	e00a      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        break;
 8009882:	bf00      	nop
 8009884:	e008      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        break;
 8009886:	bf00      	nop
 8009888:	e006      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        break;
 800988a:	bf00      	nop
 800988c:	e004      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        break;
 800988e:	bf00      	nop
 8009890:	e002      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
        break;
 8009892:	bf00      	nop
 8009894:	e000      	b.n	8009898 <DMA_CheckFifoParam+0xe8>
    break;
 8009896:	bf00      	nop
    }
  }

  return status;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop

080098a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a38      	ldr	r2, [pc, #224]	; (800999c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d022      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a36      	ldr	r2, [pc, #216]	; (80099a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d01d      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a35      	ldr	r2, [pc, #212]	; (80099a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d018      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a33      	ldr	r2, [pc, #204]	; (80099a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d013      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a32      	ldr	r2, [pc, #200]	; (80099ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d00e      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a30      	ldr	r2, [pc, #192]	; (80099b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d009      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a2f      	ldr	r2, [pc, #188]	; (80099b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d004      	beq.n	8009906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a2d      	ldr	r2, [pc, #180]	; (80099b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d101      	bne.n	800990a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800990a:	2300      	movs	r3, #0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d01a      	beq.n	8009946 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	3b08      	subs	r3, #8
 8009918:	4a28      	ldr	r2, [pc, #160]	; (80099bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800991a:	fba2 2303 	umull	r2, r3, r2, r3
 800991e:	091b      	lsrs	r3, r3, #4
 8009920:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4b26      	ldr	r3, [pc, #152]	; (80099c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009926:	4413      	add	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	461a      	mov	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a24      	ldr	r2, [pc, #144]	; (80099c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009934:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 031f 	and.w	r3, r3, #31
 800993c:	2201      	movs	r2, #1
 800993e:	409a      	lsls	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009944:	e024      	b.n	8009990 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	3b10      	subs	r3, #16
 800994e:	4a1e      	ldr	r2, [pc, #120]	; (80099c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009950:	fba2 2303 	umull	r2, r3, r2, r3
 8009954:	091b      	lsrs	r3, r3, #4
 8009956:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4a1c      	ldr	r2, [pc, #112]	; (80099cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d806      	bhi.n	800996e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d902      	bls.n	800996e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3308      	adds	r3, #8
 800996c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	461a      	mov	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a16      	ldr	r2, [pc, #88]	; (80099d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009980:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f003 031f 	and.w	r3, r3, #31
 8009988:	2201      	movs	r2, #1
 800998a:	409a      	lsls	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009990:	bf00      	nop
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	58025408 	.word	0x58025408
 80099a0:	5802541c 	.word	0x5802541c
 80099a4:	58025430 	.word	0x58025430
 80099a8:	58025444 	.word	0x58025444
 80099ac:	58025458 	.word	0x58025458
 80099b0:	5802546c 	.word	0x5802546c
 80099b4:	58025480 	.word	0x58025480
 80099b8:	58025494 	.word	0x58025494
 80099bc:	cccccccd 	.word	0xcccccccd
 80099c0:	16009600 	.word	0x16009600
 80099c4:	58025880 	.word	0x58025880
 80099c8:	aaaaaaab 	.word	0xaaaaaaab
 80099cc:	400204b8 	.word	0x400204b8
 80099d0:	4002040f 	.word	0x4002040f
 80099d4:	10008200 	.word	0x10008200
 80099d8:	40020880 	.word	0x40020880

080099dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d04a      	beq.n	8009a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d847      	bhi.n	8009a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a25      	ldr	r2, [pc, #148]	; (8009a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d022      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a24      	ldr	r2, [pc, #144]	; (8009a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d01d      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a22      	ldr	r2, [pc, #136]	; (8009a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d018      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a21      	ldr	r2, [pc, #132]	; (8009aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d013      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a1f      	ldr	r2, [pc, #124]	; (8009aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00e      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a1e      	ldr	r2, [pc, #120]	; (8009aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d009      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a1c      	ldr	r2, [pc, #112]	; (8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d004      	beq.n	8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d101      	bne.n	8009a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e000      	b.n	8009a4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4b17      	ldr	r3, [pc, #92]	; (8009ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a15      	ldr	r2, [pc, #84]	; (8009ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009a64:	671a      	str	r2, [r3, #112]	; 0x70
 8009a66:	e009      	b.n	8009a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4b14      	ldr	r3, [pc, #80]	; (8009abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	461a      	mov	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a11      	ldr	r2, [pc, #68]	; (8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009a7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	2201      	movs	r2, #1
 8009a82:	409a      	lsls	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009a88:	bf00      	nop
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	58025408 	.word	0x58025408
 8009a98:	5802541c 	.word	0x5802541c
 8009a9c:	58025430 	.word	0x58025430
 8009aa0:	58025444 	.word	0x58025444
 8009aa4:	58025458 	.word	0x58025458
 8009aa8:	5802546c 	.word	0x5802546c
 8009aac:	58025480 	.word	0x58025480
 8009ab0:	58025494 	.word	0x58025494
 8009ab4:	1600963f 	.word	0x1600963f
 8009ab8:	58025940 	.word	0x58025940
 8009abc:	1000823f 	.word	0x1000823f
 8009ac0:	40020940 	.word	0x40020940

08009ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b089      	sub	sp, #36	; 0x24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009ad2:	4b89      	ldr	r3, [pc, #548]	; (8009cf8 <HAL_GPIO_Init+0x234>)
 8009ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009ad6:	e194      	b.n	8009e02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	2101      	movs	r1, #1
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 8186 	beq.w	8009dfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d005      	beq.n	8009b08 <HAL_GPIO_Init+0x44>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f003 0303 	and.w	r3, r3, #3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d130      	bne.n	8009b6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	2203      	movs	r2, #3
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	43db      	mvns	r3, r3
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	005b      	lsls	r3, r3, #1
 8009b28:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b3e:	2201      	movs	r2, #1
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	fa02 f303 	lsl.w	r3, r2, r3
 8009b46:	43db      	mvns	r3, r3
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	091b      	lsrs	r3, r3, #4
 8009b54:	f003 0201 	and.w	r2, r3, #1
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d017      	beq.n	8009ba6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	2203      	movs	r2, #3
 8009b82:	fa02 f303 	lsl.w	r3, r2, r3
 8009b86:	43db      	mvns	r3, r3
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d123      	bne.n	8009bfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	08da      	lsrs	r2, r3, #3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3208      	adds	r2, #8
 8009bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	f003 0307 	and.w	r3, r3, #7
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	220f      	movs	r2, #15
 8009bca:	fa02 f303 	lsl.w	r3, r2, r3
 8009bce:	43db      	mvns	r3, r3
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	691a      	ldr	r2, [r3, #16]
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	fa02 f303 	lsl.w	r3, r2, r3
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	08da      	lsrs	r2, r3, #3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3208      	adds	r2, #8
 8009bf4:	69b9      	ldr	r1, [r7, #24]
 8009bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	2203      	movs	r2, #3
 8009c06:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0a:	43db      	mvns	r3, r3
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f003 0203 	and.w	r2, r3, #3
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 80e0 	beq.w	8009dfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c3c:	4b2f      	ldr	r3, [pc, #188]	; (8009cfc <HAL_GPIO_Init+0x238>)
 8009c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c42:	4a2e      	ldr	r2, [pc, #184]	; (8009cfc <HAL_GPIO_Init+0x238>)
 8009c44:	f043 0302 	orr.w	r3, r3, #2
 8009c48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009c4c:	4b2b      	ldr	r3, [pc, #172]	; (8009cfc <HAL_GPIO_Init+0x238>)
 8009c4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c5a:	4a29      	ldr	r2, [pc, #164]	; (8009d00 <HAL_GPIO_Init+0x23c>)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	089b      	lsrs	r3, r3, #2
 8009c60:	3302      	adds	r3, #2
 8009c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	220f      	movs	r2, #15
 8009c72:	fa02 f303 	lsl.w	r3, r2, r3
 8009c76:	43db      	mvns	r3, r3
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a20      	ldr	r2, [pc, #128]	; (8009d04 <HAL_GPIO_Init+0x240>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d052      	beq.n	8009d2c <HAL_GPIO_Init+0x268>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <HAL_GPIO_Init+0x244>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d031      	beq.n	8009cf2 <HAL_GPIO_Init+0x22e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <HAL_GPIO_Init+0x248>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d02b      	beq.n	8009cee <HAL_GPIO_Init+0x22a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a1d      	ldr	r2, [pc, #116]	; (8009d10 <HAL_GPIO_Init+0x24c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d025      	beq.n	8009cea <HAL_GPIO_Init+0x226>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1c      	ldr	r2, [pc, #112]	; (8009d14 <HAL_GPIO_Init+0x250>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d01f      	beq.n	8009ce6 <HAL_GPIO_Init+0x222>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a1b      	ldr	r2, [pc, #108]	; (8009d18 <HAL_GPIO_Init+0x254>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d019      	beq.n	8009ce2 <HAL_GPIO_Init+0x21e>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a1a      	ldr	r2, [pc, #104]	; (8009d1c <HAL_GPIO_Init+0x258>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d013      	beq.n	8009cde <HAL_GPIO_Init+0x21a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a19      	ldr	r2, [pc, #100]	; (8009d20 <HAL_GPIO_Init+0x25c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00d      	beq.n	8009cda <HAL_GPIO_Init+0x216>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a18      	ldr	r2, [pc, #96]	; (8009d24 <HAL_GPIO_Init+0x260>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d007      	beq.n	8009cd6 <HAL_GPIO_Init+0x212>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <HAL_GPIO_Init+0x264>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d101      	bne.n	8009cd2 <HAL_GPIO_Init+0x20e>
 8009cce:	2309      	movs	r3, #9
 8009cd0:	e02d      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cd2:	230a      	movs	r3, #10
 8009cd4:	e02b      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	e029      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cda:	2307      	movs	r3, #7
 8009cdc:	e027      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cde:	2306      	movs	r3, #6
 8009ce0:	e025      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009ce2:	2305      	movs	r3, #5
 8009ce4:	e023      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009ce6:	2304      	movs	r3, #4
 8009ce8:	e021      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cea:	2303      	movs	r3, #3
 8009cec:	e01f      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	e01d      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e01b      	b.n	8009d2e <HAL_GPIO_Init+0x26a>
 8009cf6:	bf00      	nop
 8009cf8:	58000080 	.word	0x58000080
 8009cfc:	58024400 	.word	0x58024400
 8009d00:	58000400 	.word	0x58000400
 8009d04:	58020000 	.word	0x58020000
 8009d08:	58020400 	.word	0x58020400
 8009d0c:	58020800 	.word	0x58020800
 8009d10:	58020c00 	.word	0x58020c00
 8009d14:	58021000 	.word	0x58021000
 8009d18:	58021400 	.word	0x58021400
 8009d1c:	58021800 	.word	0x58021800
 8009d20:	58021c00 	.word	0x58021c00
 8009d24:	58022000 	.word	0x58022000
 8009d28:	58022400 	.word	0x58022400
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	f002 0203 	and.w	r2, r2, #3
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	4093      	lsls	r3, r2
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d3e:	4938      	ldr	r1, [pc, #224]	; (8009e20 <HAL_GPIO_Init+0x35c>)
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	089b      	lsrs	r3, r3, #2
 8009d44:	3302      	adds	r3, #2
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	43db      	mvns	r3, r3
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	43db      	mvns	r3, r3
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	43db      	mvns	r3, r3
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	4013      	ands	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	43db      	mvns	r3, r3
 8009ddc:	69ba      	ldr	r2, [r7, #24]
 8009dde:	4013      	ands	r3, r2
 8009de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f47f ae63 	bne.w	8009ad8 <HAL_GPIO_Init+0x14>
  }
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	3724      	adds	r7, #36	; 0x24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	58000400 	.word	0x58000400

08009e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	807b      	strh	r3, [r7, #2]
 8009e30:	4613      	mov	r3, r2
 8009e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e34:	787b      	ldrb	r3, [r7, #1]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e3a:	887a      	ldrh	r2, [r7, #2]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e40:	e003      	b.n	8009e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e42:	887b      	ldrh	r3, [r7, #2]
 8009e44:	041a      	lsls	r2, r3, #16
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	619a      	str	r2, [r3, #24]
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e74:	88fb      	ldrh	r3, [r7, #6]
 8009e76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e7a:	88fb      	ldrh	r3, [r7, #6]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fa fcdb 	bl	8004838 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e94:	4b19      	ldr	r3, [pc, #100]	; (8009efc <HAL_PWREx_ConfigSupply+0x70>)
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0304 	and.w	r3, r3, #4
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d00a      	beq.n	8009eb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ea0:	4b16      	ldr	r3, [pc, #88]	; (8009efc <HAL_PWREx_ConfigSupply+0x70>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f003 0307 	and.w	r3, r3, #7
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d001      	beq.n	8009eb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e01f      	b.n	8009ef2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e01d      	b.n	8009ef2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <HAL_PWREx_ConfigSupply+0x70>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f023 0207 	bic.w	r2, r3, #7
 8009ebe:	490f      	ldr	r1, [pc, #60]	; (8009efc <HAL_PWREx_ConfigSupply+0x70>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ec6:	f7fc fc6b 	bl	80067a0 <HAL_GetTick>
 8009eca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ecc:	e009      	b.n	8009ee2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ece:	f7fc fc67 	bl	80067a0 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009edc:	d901      	bls.n	8009ee2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e007      	b.n	8009ef2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ee2:	4b06      	ldr	r3, [pc, #24]	; (8009efc <HAL_PWREx_ConfigSupply+0x70>)
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eee:	d1ee      	bne.n	8009ece <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	58024800 	.word	0x58024800

08009f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08c      	sub	sp, #48	; 0x30
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f000 bc1d 	b.w	800a74e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8087 	beq.w	800a030 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f22:	4b99      	ldr	r3, [pc, #612]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f2c:	4b96      	ldr	r3, [pc, #600]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d007      	beq.n	8009f48 <HAL_RCC_OscConfig+0x48>
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	2b18      	cmp	r3, #24
 8009f3c:	d110      	bne.n	8009f60 <HAL_RCC_OscConfig+0x60>
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	f003 0303 	and.w	r3, r3, #3
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d10b      	bne.n	8009f60 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f48:	4b8f      	ldr	r3, [pc, #572]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d06c      	beq.n	800a02e <HAL_RCC_OscConfig+0x12e>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d168      	bne.n	800a02e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e3f6      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f68:	d106      	bne.n	8009f78 <HAL_RCC_OscConfig+0x78>
 8009f6a:	4b87      	ldr	r3, [pc, #540]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a86      	ldr	r2, [pc, #536]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	e02e      	b.n	8009fd6 <HAL_RCC_OscConfig+0xd6>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10c      	bne.n	8009f9a <HAL_RCC_OscConfig+0x9a>
 8009f80:	4b81      	ldr	r3, [pc, #516]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a80      	ldr	r2, [pc, #512]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	4b7e      	ldr	r3, [pc, #504]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a7d      	ldr	r2, [pc, #500]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	e01d      	b.n	8009fd6 <HAL_RCC_OscConfig+0xd6>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fa2:	d10c      	bne.n	8009fbe <HAL_RCC_OscConfig+0xbe>
 8009fa4:	4b78      	ldr	r3, [pc, #480]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a77      	ldr	r2, [pc, #476]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009faa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	4b75      	ldr	r3, [pc, #468]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a74      	ldr	r2, [pc, #464]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	e00b      	b.n	8009fd6 <HAL_RCC_OscConfig+0xd6>
 8009fbe:	4b72      	ldr	r3, [pc, #456]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a71      	ldr	r2, [pc, #452]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4b6f      	ldr	r3, [pc, #444]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a6e      	ldr	r2, [pc, #440]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fd4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d013      	beq.n	800a006 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fde:	f7fc fbdf 	bl	80067a0 <HAL_GetTick>
 8009fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fe4:	e008      	b.n	8009ff8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fe6:	f7fc fbdb 	bl	80067a0 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b64      	cmp	r3, #100	; 0x64
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e3aa      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ff8:	4b63      	ldr	r3, [pc, #396]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0f0      	beq.n	8009fe6 <HAL_RCC_OscConfig+0xe6>
 800a004:	e014      	b.n	800a030 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a006:	f7fc fbcb 	bl	80067a0 <HAL_GetTick>
 800a00a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a00c:	e008      	b.n	800a020 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a00e:	f7fc fbc7 	bl	80067a0 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b64      	cmp	r3, #100	; 0x64
 800a01a:	d901      	bls.n	800a020 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e396      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a020:	4b59      	ldr	r3, [pc, #356]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1f0      	bne.n	800a00e <HAL_RCC_OscConfig+0x10e>
 800a02c:	e000      	b.n	800a030 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a02e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 80cb 	beq.w	800a1d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a03e:	4b52      	ldr	r3, [pc, #328]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a046:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a048:	4b4f      	ldr	r3, [pc, #316]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d007      	beq.n	800a064 <HAL_RCC_OscConfig+0x164>
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	2b18      	cmp	r3, #24
 800a058:	d156      	bne.n	800a108 <HAL_RCC_OscConfig+0x208>
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d151      	bne.n	800a108 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a064:	4b48      	ldr	r3, [pc, #288]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <HAL_RCC_OscConfig+0x17c>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e368      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a07c:	4b42      	ldr	r3, [pc, #264]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f023 0219 	bic.w	r2, r3, #25
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	493f      	ldr	r1, [pc, #252]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a08e:	f7fc fb87 	bl	80067a0 <HAL_GetTick>
 800a092:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a094:	e008      	b.n	800a0a8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a096:	f7fc fb83 	bl	80067a0 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d901      	bls.n	800a0a8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e352      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0a8:	4b37      	ldr	r3, [pc, #220]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d0f0      	beq.n	800a096 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b4:	f7fc fba4 	bl	8006800 <HAL_GetREVID>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d817      	bhi.n	800a0f2 <HAL_RCC_OscConfig+0x1f2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b40      	cmp	r3, #64	; 0x40
 800a0c8:	d108      	bne.n	800a0dc <HAL_RCC_OscConfig+0x1dc>
 800a0ca:	4b2f      	ldr	r3, [pc, #188]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0d2:	4a2d      	ldr	r2, [pc, #180]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a0d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0da:	e07b      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0dc:	4b2a      	ldr	r3, [pc, #168]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	031b      	lsls	r3, r3, #12
 800a0ea:	4927      	ldr	r1, [pc, #156]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0f0:	e070      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0f2:	4b25      	ldr	r3, [pc, #148]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	061b      	lsls	r3, r3, #24
 800a100:	4921      	ldr	r1, [pc, #132]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a102:	4313      	orrs	r3, r2
 800a104:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a106:	e065      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d048      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a110:	4b1d      	ldr	r3, [pc, #116]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f023 0219 	bic.w	r2, r3, #25
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	491a      	ldr	r1, [pc, #104]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a122:	f7fc fb3d 	bl	80067a0 <HAL_GetTick>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a128:	e008      	b.n	800a13c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a12a:	f7fc fb39 	bl	80067a0 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	2b02      	cmp	r3, #2
 800a136:	d901      	bls.n	800a13c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e308      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a13c:	4b12      	ldr	r3, [pc, #72]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0304 	and.w	r3, r3, #4
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0f0      	beq.n	800a12a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a148:	f7fc fb5a 	bl	8006800 <HAL_GetREVID>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a152:	4293      	cmp	r3, r2
 800a154:	d81a      	bhi.n	800a18c <HAL_RCC_OscConfig+0x28c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b40      	cmp	r3, #64	; 0x40
 800a15c:	d108      	bne.n	800a170 <HAL_RCC_OscConfig+0x270>
 800a15e:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a166:	4a08      	ldr	r2, [pc, #32]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a16c:	6053      	str	r3, [r2, #4]
 800a16e:	e031      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2d4>
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	031b      	lsls	r3, r3, #12
 800a17e:	4902      	ldr	r1, [pc, #8]	; (800a188 <HAL_RCC_OscConfig+0x288>)
 800a180:	4313      	orrs	r3, r2
 800a182:	604b      	str	r3, [r1, #4]
 800a184:	e026      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2d4>
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400
 800a18c:	4b9a      	ldr	r3, [pc, #616]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	061b      	lsls	r3, r3, #24
 800a19a:	4997      	ldr	r1, [pc, #604]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	604b      	str	r3, [r1, #4]
 800a1a0:	e018      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1a2:	4b95      	ldr	r3, [pc, #596]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a94      	ldr	r2, [pc, #592]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ae:	f7fc faf7 	bl	80067a0 <HAL_GetTick>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1b6:	f7fc faf3 	bl	80067a0 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e2c2      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1c8:	4b8b      	ldr	r3, [pc, #556]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1f0      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 80a9 	beq.w	800a334 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1e2:	4b85      	ldr	r3, [pc, #532]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1ec:	4b82      	ldr	r3, [pc, #520]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d007      	beq.n	800a208 <HAL_RCC_OscConfig+0x308>
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2b18      	cmp	r3, #24
 800a1fc:	d13a      	bne.n	800a274 <HAL_RCC_OscConfig+0x374>
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	2b01      	cmp	r3, #1
 800a206:	d135      	bne.n	800a274 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a208:	4b7b      	ldr	r3, [pc, #492]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <HAL_RCC_OscConfig+0x320>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	2b80      	cmp	r3, #128	; 0x80
 800a21a:	d001      	beq.n	800a220 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e296      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a220:	f7fc faee 	bl	8006800 <HAL_GetREVID>
 800a224:	4603      	mov	r3, r0
 800a226:	f241 0203 	movw	r2, #4099	; 0x1003
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d817      	bhi.n	800a25e <HAL_RCC_OscConfig+0x35e>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	2b20      	cmp	r3, #32
 800a234:	d108      	bne.n	800a248 <HAL_RCC_OscConfig+0x348>
 800a236:	4b70      	ldr	r3, [pc, #448]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a23e:	4a6e      	ldr	r2, [pc, #440]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a244:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a246:	e075      	b.n	800a334 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a248:	4b6b      	ldr	r3, [pc, #428]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a1b      	ldr	r3, [r3, #32]
 800a254:	069b      	lsls	r3, r3, #26
 800a256:	4968      	ldr	r1, [pc, #416]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a25c:	e06a      	b.n	800a334 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a25e:	4b66      	ldr	r3, [pc, #408]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	061b      	lsls	r3, r3, #24
 800a26c:	4962      	ldr	r1, [pc, #392]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a272:	e05f      	b.n	800a334 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d042      	beq.n	800a302 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a27c:	4b5e      	ldr	r3, [pc, #376]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a5d      	ldr	r2, [pc, #372]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a288:	f7fc fa8a 	bl	80067a0 <HAL_GetTick>
 800a28c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a28e:	e008      	b.n	800a2a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a290:	f7fc fa86 	bl	80067a0 <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d901      	bls.n	800a2a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e255      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2a2:	4b55      	ldr	r3, [pc, #340]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0f0      	beq.n	800a290 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2ae:	f7fc faa7 	bl	8006800 <HAL_GetREVID>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d817      	bhi.n	800a2ec <HAL_RCC_OscConfig+0x3ec>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	2b20      	cmp	r3, #32
 800a2c2:	d108      	bne.n	800a2d6 <HAL_RCC_OscConfig+0x3d6>
 800a2c4:	4b4c      	ldr	r3, [pc, #304]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2cc:	4a4a      	ldr	r2, [pc, #296]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2d2:	6053      	str	r3, [r2, #4]
 800a2d4:	e02e      	b.n	800a334 <HAL_RCC_OscConfig+0x434>
 800a2d6:	4b48      	ldr	r3, [pc, #288]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	069b      	lsls	r3, r3, #26
 800a2e4:	4944      	ldr	r1, [pc, #272]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	604b      	str	r3, [r1, #4]
 800a2ea:	e023      	b.n	800a334 <HAL_RCC_OscConfig+0x434>
 800a2ec:	4b42      	ldr	r3, [pc, #264]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	061b      	lsls	r3, r3, #24
 800a2fa:	493f      	ldr	r1, [pc, #252]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	60cb      	str	r3, [r1, #12]
 800a300:	e018      	b.n	800a334 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a302:	4b3d      	ldr	r3, [pc, #244]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a3c      	ldr	r2, [pc, #240]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a30c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a30e:	f7fc fa47 	bl	80067a0 <HAL_GetTick>
 800a312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a314:	e008      	b.n	800a328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a316:	f7fc fa43 	bl	80067a0 <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	2b02      	cmp	r3, #2
 800a322:	d901      	bls.n	800a328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e212      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a328:	4b33      	ldr	r3, [pc, #204]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1f0      	bne.n	800a316 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0308 	and.w	r3, r3, #8
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d036      	beq.n	800a3ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d019      	beq.n	800a37c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a348:	4b2b      	ldr	r3, [pc, #172]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a34c:	4a2a      	ldr	r2, [pc, #168]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a354:	f7fc fa24 	bl	80067a0 <HAL_GetTick>
 800a358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a35c:	f7fc fa20 	bl	80067a0 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e1ef      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f0      	beq.n	800a35c <HAL_RCC_OscConfig+0x45c>
 800a37a:	e018      	b.n	800a3ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a37c:	4b1e      	ldr	r3, [pc, #120]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a380:	4a1d      	ldr	r2, [pc, #116]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a388:	f7fc fa0a 	bl	80067a0 <HAL_GetTick>
 800a38c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a38e:	e008      	b.n	800a3a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a390:	f7fc fa06 	bl	80067a0 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e1d5      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3a2:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f0      	bne.n	800a390 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d039      	beq.n	800a42e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01c      	beq.n	800a3fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3c2:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a0c      	ldr	r2, [pc, #48]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a3c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3ce:	f7fc f9e7 	bl	80067a0 <HAL_GetTick>
 800a3d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3d4:	e008      	b.n	800a3e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3d6:	f7fc f9e3 	bl	80067a0 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d901      	bls.n	800a3e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e1b2      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3e8:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <HAL_RCC_OscConfig+0x4f8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0f0      	beq.n	800a3d6 <HAL_RCC_OscConfig+0x4d6>
 800a3f4:	e01b      	b.n	800a42e <HAL_RCC_OscConfig+0x52e>
 800a3f6:	bf00      	nop
 800a3f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3fc:	4b9b      	ldr	r3, [pc, #620]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a9a      	ldr	r2, [pc, #616]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a406:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a408:	f7fc f9ca 	bl	80067a0 <HAL_GetTick>
 800a40c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a40e:	e008      	b.n	800a422 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a410:	f7fc f9c6 	bl	80067a0 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e195      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a422:	4b92      	ldr	r3, [pc, #584]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f0      	bne.n	800a410 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	2b00      	cmp	r3, #0
 800a438:	f000 8081 	beq.w	800a53e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a43c:	4b8c      	ldr	r3, [pc, #560]	; (800a670 <HAL_RCC_OscConfig+0x770>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a8b      	ldr	r2, [pc, #556]	; (800a670 <HAL_RCC_OscConfig+0x770>)
 800a442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a446:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a448:	f7fc f9aa 	bl	80067a0 <HAL_GetTick>
 800a44c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a44e:	e008      	b.n	800a462 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a450:	f7fc f9a6 	bl	80067a0 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b64      	cmp	r3, #100	; 0x64
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e175      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a462:	4b83      	ldr	r3, [pc, #524]	; (800a670 <HAL_RCC_OscConfig+0x770>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0f0      	beq.n	800a450 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d106      	bne.n	800a484 <HAL_RCC_OscConfig+0x584>
 800a476:	4b7d      	ldr	r3, [pc, #500]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	4a7c      	ldr	r2, [pc, #496]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a47c:	f043 0301 	orr.w	r3, r3, #1
 800a480:	6713      	str	r3, [r2, #112]	; 0x70
 800a482:	e02d      	b.n	800a4e0 <HAL_RCC_OscConfig+0x5e0>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10c      	bne.n	800a4a6 <HAL_RCC_OscConfig+0x5a6>
 800a48c:	4b77      	ldr	r3, [pc, #476]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a490:	4a76      	ldr	r2, [pc, #472]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	6713      	str	r3, [r2, #112]	; 0x70
 800a498:	4b74      	ldr	r3, [pc, #464]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49c:	4a73      	ldr	r2, [pc, #460]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a49e:	f023 0304 	bic.w	r3, r3, #4
 800a4a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a4:	e01c      	b.n	800a4e0 <HAL_RCC_OscConfig+0x5e0>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	d10c      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x5c8>
 800a4ae:	4b6f      	ldr	r3, [pc, #444]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b2:	4a6e      	ldr	r2, [pc, #440]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4b4:	f043 0304 	orr.w	r3, r3, #4
 800a4b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4ba:	4b6c      	ldr	r3, [pc, #432]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4be:	4a6b      	ldr	r2, [pc, #428]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4c0:	f043 0301 	orr.w	r3, r3, #1
 800a4c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c6:	e00b      	b.n	800a4e0 <HAL_RCC_OscConfig+0x5e0>
 800a4c8:	4b68      	ldr	r3, [pc, #416]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4cc:	4a67      	ldr	r2, [pc, #412]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4ce:	f023 0301 	bic.w	r3, r3, #1
 800a4d2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4d4:	4b65      	ldr	r3, [pc, #404]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d8:	4a64      	ldr	r2, [pc, #400]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a4da:	f023 0304 	bic.w	r3, r3, #4
 800a4de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d015      	beq.n	800a514 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4e8:	f7fc f95a 	bl	80067a0 <HAL_GetTick>
 800a4ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4ee:	e00a      	b.n	800a506 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4f0:	f7fc f956 	bl	80067a0 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e123      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a506:	4b59      	ldr	r3, [pc, #356]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0ee      	beq.n	800a4f0 <HAL_RCC_OscConfig+0x5f0>
 800a512:	e014      	b.n	800a53e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a514:	f7fc f944 	bl	80067a0 <HAL_GetTick>
 800a518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a51a:	e00a      	b.n	800a532 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a51c:	f7fc f940 	bl	80067a0 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	f241 3288 	movw	r2, #5000	; 0x1388
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e10d      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a532:	4b4e      	ldr	r3, [pc, #312]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1ee      	bne.n	800a51c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 8102 	beq.w	800a74c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a548:	4b48      	ldr	r3, [pc, #288]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a550:	2b18      	cmp	r3, #24
 800a552:	f000 80bd 	beq.w	800a6d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	f040 809e 	bne.w	800a69c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a560:	4b42      	ldr	r3, [pc, #264]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a41      	ldr	r2, [pc, #260]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a56a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a56c:	f7fc f918 	bl	80067a0 <HAL_GetTick>
 800a570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a572:	e008      	b.n	800a586 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a574:	f7fc f914 	bl	80067a0 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d901      	bls.n	800a586 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e0e3      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a586:	4b39      	ldr	r3, [pc, #228]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1f0      	bne.n	800a574 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a592:	4b36      	ldr	r3, [pc, #216]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a596:	4b37      	ldr	r3, [pc, #220]	; (800a674 <HAL_RCC_OscConfig+0x774>)
 800a598:	4013      	ands	r3, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5a2:	0112      	lsls	r2, r2, #4
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	4931      	ldr	r1, [pc, #196]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	025b      	lsls	r3, r3, #9
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	041b      	lsls	r3, r3, #16
 800a5ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	061b      	lsls	r3, r3, #24
 800a5d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5dc:	4923      	ldr	r1, [pc, #140]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a5e2:	4b22      	ldr	r3, [pc, #136]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	4a21      	ldr	r2, [pc, #132]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5ee:	4b1f      	ldr	r3, [pc, #124]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a5f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5f2:	4b21      	ldr	r3, [pc, #132]	; (800a678 <HAL_RCC_OscConfig+0x778>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5fa:	00d2      	lsls	r2, r2, #3
 800a5fc:	491b      	ldr	r1, [pc, #108]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a602:	4b1a      	ldr	r3, [pc, #104]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	f023 020c 	bic.w	r2, r3, #12
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	4917      	ldr	r1, [pc, #92]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a610:	4313      	orrs	r3, r2
 800a612:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a614:	4b15      	ldr	r3, [pc, #84]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	f023 0202 	bic.w	r2, r3, #2
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a620:	4912      	ldr	r1, [pc, #72]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a622:	4313      	orrs	r3, r2
 800a624:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a626:	4b11      	ldr	r3, [pc, #68]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62a:	4a10      	ldr	r2, [pc, #64]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a62c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a632:	4b0e      	ldr	r3, [pc, #56]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a636:	4a0d      	ldr	r2, [pc, #52]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a63c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a63e:	4b0b      	ldr	r3, [pc, #44]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a642:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a64a:	4b08      	ldr	r3, [pc, #32]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	4a07      	ldr	r2, [pc, #28]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a650:	f043 0301 	orr.w	r3, r3, #1
 800a654:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a656:	4b05      	ldr	r3, [pc, #20]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a04      	ldr	r2, [pc, #16]	; (800a66c <HAL_RCC_OscConfig+0x76c>)
 800a65c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a662:	f7fc f89d 	bl	80067a0 <HAL_GetTick>
 800a666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a668:	e011      	b.n	800a68e <HAL_RCC_OscConfig+0x78e>
 800a66a:	bf00      	nop
 800a66c:	58024400 	.word	0x58024400
 800a670:	58024800 	.word	0x58024800
 800a674:	fffffc0c 	.word	0xfffffc0c
 800a678:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a67c:	f7fc f890 	bl	80067a0 <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b02      	cmp	r3, #2
 800a688:	d901      	bls.n	800a68e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e05f      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a68e:	4b32      	ldr	r3, [pc, #200]	; (800a758 <HAL_RCC_OscConfig+0x858>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0f0      	beq.n	800a67c <HAL_RCC_OscConfig+0x77c>
 800a69a:	e057      	b.n	800a74c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a69c:	4b2e      	ldr	r3, [pc, #184]	; (800a758 <HAL_RCC_OscConfig+0x858>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a2d      	ldr	r2, [pc, #180]	; (800a758 <HAL_RCC_OscConfig+0x858>)
 800a6a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a8:	f7fc f87a 	bl	80067a0 <HAL_GetTick>
 800a6ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6b0:	f7fc f876 	bl	80067a0 <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e045      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6c2:	4b25      	ldr	r3, [pc, #148]	; (800a758 <HAL_RCC_OscConfig+0x858>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1f0      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x7b0>
 800a6ce:	e03d      	b.n	800a74c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6d0:	4b21      	ldr	r3, [pc, #132]	; (800a758 <HAL_RCC_OscConfig+0x858>)
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6d6:	4b20      	ldr	r3, [pc, #128]	; (800a758 <HAL_RCC_OscConfig+0x858>)
 800a6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d031      	beq.n	800a748 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f003 0203 	and.w	r2, r3, #3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d12a      	bne.n	800a748 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	091b      	lsrs	r3, r3, #4
 800a6f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d122      	bne.n	800a748 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a70e:	429a      	cmp	r2, r3
 800a710:	d11a      	bne.n	800a748 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	0a5b      	lsrs	r3, r3, #9
 800a716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a720:	429a      	cmp	r2, r3
 800a722:	d111      	bne.n	800a748 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	0c1b      	lsrs	r3, r3, #16
 800a728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a730:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a732:	429a      	cmp	r2, r3
 800a734:	d108      	bne.n	800a748 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	0e1b      	lsrs	r3, r3, #24
 800a73a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a742:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a744:	429a      	cmp	r2, r3
 800a746:	d001      	beq.n	800a74c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e000      	b.n	800a74e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3730      	adds	r7, #48	; 0x30
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	58024400 	.word	0x58024400

0800a75c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e19c      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a770:	4b8a      	ldr	r3, [pc, #552]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 030f 	and.w	r3, r3, #15
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d910      	bls.n	800a7a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a77e:	4b87      	ldr	r3, [pc, #540]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f023 020f 	bic.w	r2, r3, #15
 800a786:	4985      	ldr	r1, [pc, #532]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a78e:	4b83      	ldr	r3, [pc, #524]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d001      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e184      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d010      	beq.n	800a7ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691a      	ldr	r2, [r3, #16]
 800a7b0:	4b7b      	ldr	r3, [pc, #492]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d908      	bls.n	800a7ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7bc:	4b78      	ldr	r3, [pc, #480]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	4975      	ldr	r1, [pc, #468]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0308 	and.w	r3, r3, #8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d010      	beq.n	800a7fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	695a      	ldr	r2, [r3, #20]
 800a7de:	4b70      	ldr	r3, [pc, #448]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d908      	bls.n	800a7fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7ea:	4b6d      	ldr	r3, [pc, #436]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	496a      	ldr	r1, [pc, #424]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0310 	and.w	r3, r3, #16
 800a804:	2b00      	cmp	r3, #0
 800a806:	d010      	beq.n	800a82a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	699a      	ldr	r2, [r3, #24]
 800a80c:	4b64      	ldr	r3, [pc, #400]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a814:	429a      	cmp	r2, r3
 800a816:	d908      	bls.n	800a82a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a818:	4b61      	ldr	r3, [pc, #388]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	495e      	ldr	r1, [pc, #376]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a826:	4313      	orrs	r3, r2
 800a828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0320 	and.w	r3, r3, #32
 800a832:	2b00      	cmp	r3, #0
 800a834:	d010      	beq.n	800a858 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	69da      	ldr	r2, [r3, #28]
 800a83a:	4b59      	ldr	r3, [pc, #356]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a842:	429a      	cmp	r2, r3
 800a844:	d908      	bls.n	800a858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a846:	4b56      	ldr	r3, [pc, #344]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	4953      	ldr	r1, [pc, #332]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a854:	4313      	orrs	r3, r2
 800a856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d010      	beq.n	800a886 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68da      	ldr	r2, [r3, #12]
 800a868:	4b4d      	ldr	r3, [pc, #308]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	429a      	cmp	r2, r3
 800a872:	d908      	bls.n	800a886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a874:	4b4a      	ldr	r3, [pc, #296]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	f023 020f 	bic.w	r2, r3, #15
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	4947      	ldr	r1, [pc, #284]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a882:	4313      	orrs	r3, r2
 800a884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d055      	beq.n	800a93e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a892:	4b43      	ldr	r3, [pc, #268]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	4940      	ldr	r1, [pc, #256]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d107      	bne.n	800a8bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8ac:	4b3c      	ldr	r3, [pc, #240]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d121      	bne.n	800a8fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e0f6      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d107      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8c4:	4b36      	ldr	r3, [pc, #216]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d115      	bne.n	800a8fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e0ea      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d107      	bne.n	800a8ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8dc:	4b30      	ldr	r3, [pc, #192]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d109      	bne.n	800a8fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e0de      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8ec:	4b2c      	ldr	r3, [pc, #176]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e0d6      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8fc:	4b28      	ldr	r3, [pc, #160]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f023 0207 	bic.w	r2, r3, #7
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	4925      	ldr	r1, [pc, #148]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a90e:	f7fb ff47 	bl	80067a0 <HAL_GetTick>
 800a912:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a914:	e00a      	b.n	800a92c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a916:	f7fb ff43 	bl	80067a0 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	f241 3288 	movw	r2, #5000	; 0x1388
 800a924:	4293      	cmp	r3, r2
 800a926:	d901      	bls.n	800a92c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e0be      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a92c:	4b1c      	ldr	r3, [pc, #112]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d1eb      	bne.n	800a916 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d010      	beq.n	800a96c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	429a      	cmp	r2, r3
 800a958:	d208      	bcs.n	800a96c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a95a:	4b11      	ldr	r3, [pc, #68]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f023 020f 	bic.w	r2, r3, #15
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	490e      	ldr	r1, [pc, #56]	; (800a9a0 <HAL_RCC_ClockConfig+0x244>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a96c:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 030f 	and.w	r3, r3, #15
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d214      	bcs.n	800a9a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a97a:	4b08      	ldr	r3, [pc, #32]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f023 020f 	bic.w	r2, r3, #15
 800a982:	4906      	ldr	r1, [pc, #24]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	4313      	orrs	r3, r2
 800a988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a98a:	4b04      	ldr	r3, [pc, #16]	; (800a99c <HAL_RCC_ClockConfig+0x240>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 030f 	and.w	r3, r3, #15
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	429a      	cmp	r2, r3
 800a996:	d005      	beq.n	800a9a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e086      	b.n	800aaaa <HAL_RCC_ClockConfig+0x34e>
 800a99c:	52002000 	.word	0x52002000
 800a9a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d010      	beq.n	800a9d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	4b3f      	ldr	r3, [pc, #252]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d208      	bcs.n	800a9d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9c0:	4b3c      	ldr	r3, [pc, #240]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	4939      	ldr	r1, [pc, #228]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d010      	beq.n	800aa00 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695a      	ldr	r2, [r3, #20]
 800a9e2:	4b34      	ldr	r3, [pc, #208]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d208      	bcs.n	800aa00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9ee:	4b31      	ldr	r3, [pc, #196]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	492e      	ldr	r1, [pc, #184]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0310 	and.w	r3, r3, #16
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d010      	beq.n	800aa2e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699a      	ldr	r2, [r3, #24]
 800aa10:	4b28      	ldr	r3, [pc, #160]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d208      	bcs.n	800aa2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa1c:	4b25      	ldr	r3, [pc, #148]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	4922      	ldr	r1, [pc, #136]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d010      	beq.n	800aa5c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	69da      	ldr	r2, [r3, #28]
 800aa3e:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d208      	bcs.n	800aa5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aa4a:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	4917      	ldr	r1, [pc, #92]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa5c:	f000 f834 	bl	800aac8 <HAL_RCC_GetSysClockFreq>
 800aa60:	4602      	mov	r2, r0
 800aa62:	4b14      	ldr	r3, [pc, #80]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	0a1b      	lsrs	r3, r3, #8
 800aa68:	f003 030f 	and.w	r3, r3, #15
 800aa6c:	4912      	ldr	r1, [pc, #72]	; (800aab8 <HAL_RCC_ClockConfig+0x35c>)
 800aa6e:	5ccb      	ldrb	r3, [r1, r3]
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa7a:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <HAL_RCC_ClockConfig+0x358>)
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	f003 030f 	and.w	r3, r3, #15
 800aa82:	4a0d      	ldr	r2, [pc, #52]	; (800aab8 <HAL_RCC_ClockConfig+0x35c>)
 800aa84:	5cd3      	ldrb	r3, [r2, r3]
 800aa86:	f003 031f 	and.w	r3, r3, #31
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa90:	4a0a      	ldr	r2, [pc, #40]	; (800aabc <HAL_RCC_ClockConfig+0x360>)
 800aa92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa94:	4a0a      	ldr	r2, [pc, #40]	; (800aac0 <HAL_RCC_ClockConfig+0x364>)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <HAL_RCC_ClockConfig+0x368>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fb fe34 	bl	800670c <HAL_InitTick>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	58024400 	.word	0x58024400
 800aab8:	080141a4 	.word	0x080141a4
 800aabc:	2400022c 	.word	0x2400022c
 800aac0:	24000228 	.word	0x24000228
 800aac4:	24000230 	.word	0x24000230

0800aac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b089      	sub	sp, #36	; 0x24
 800aacc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aace:	4bb3      	ldr	r3, [pc, #716]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aad6:	2b18      	cmp	r3, #24
 800aad8:	f200 8155 	bhi.w	800ad86 <HAL_RCC_GetSysClockFreq+0x2be>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab49 	.word	0x0800ab49
 800aae8:	0800ad87 	.word	0x0800ad87
 800aaec:	0800ad87 	.word	0x0800ad87
 800aaf0:	0800ad87 	.word	0x0800ad87
 800aaf4:	0800ad87 	.word	0x0800ad87
 800aaf8:	0800ad87 	.word	0x0800ad87
 800aafc:	0800ad87 	.word	0x0800ad87
 800ab00:	0800ad87 	.word	0x0800ad87
 800ab04:	0800ab6f 	.word	0x0800ab6f
 800ab08:	0800ad87 	.word	0x0800ad87
 800ab0c:	0800ad87 	.word	0x0800ad87
 800ab10:	0800ad87 	.word	0x0800ad87
 800ab14:	0800ad87 	.word	0x0800ad87
 800ab18:	0800ad87 	.word	0x0800ad87
 800ab1c:	0800ad87 	.word	0x0800ad87
 800ab20:	0800ad87 	.word	0x0800ad87
 800ab24:	0800ab75 	.word	0x0800ab75
 800ab28:	0800ad87 	.word	0x0800ad87
 800ab2c:	0800ad87 	.word	0x0800ad87
 800ab30:	0800ad87 	.word	0x0800ad87
 800ab34:	0800ad87 	.word	0x0800ad87
 800ab38:	0800ad87 	.word	0x0800ad87
 800ab3c:	0800ad87 	.word	0x0800ad87
 800ab40:	0800ad87 	.word	0x0800ad87
 800ab44:	0800ab7b 	.word	0x0800ab7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab48:	4b94      	ldr	r3, [pc, #592]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d009      	beq.n	800ab68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab54:	4b91      	ldr	r3, [pc, #580]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	08db      	lsrs	r3, r3, #3
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	4a90      	ldr	r2, [pc, #576]	; (800ada0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ab66:	e111      	b.n	800ad8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab68:	4b8d      	ldr	r3, [pc, #564]	; (800ada0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab6a:	61bb      	str	r3, [r7, #24]
    break;
 800ab6c:	e10e      	b.n	800ad8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ab6e:	4b8d      	ldr	r3, [pc, #564]	; (800ada4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab70:	61bb      	str	r3, [r7, #24]
    break;
 800ab72:	e10b      	b.n	800ad8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ab74:	4b8c      	ldr	r3, [pc, #560]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ab76:	61bb      	str	r3, [r7, #24]
    break;
 800ab78:	e108      	b.n	800ad8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab7a:	4b88      	ldr	r3, [pc, #544]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	f003 0303 	and.w	r3, r3, #3
 800ab82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ab84:	4b85      	ldr	r3, [pc, #532]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	091b      	lsrs	r3, r3, #4
 800ab8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ab90:	4b82      	ldr	r3, [pc, #520]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ab9a:	4b80      	ldr	r3, [pc, #512]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9e:	08db      	lsrs	r3, r3, #3
 800aba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 80e1 	beq.w	800ad80 <HAL_RCC_GetSysClockFreq+0x2b8>
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	f000 8083 	beq.w	800accc <HAL_RCC_GetSysClockFreq+0x204>
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	f200 80a1 	bhi.w	800ad10 <HAL_RCC_GetSysClockFreq+0x248>
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <HAL_RCC_GetSysClockFreq+0x114>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d056      	beq.n	800ac88 <HAL_RCC_GetSysClockFreq+0x1c0>
 800abda:	e099      	b.n	800ad10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abdc:	4b6f      	ldr	r3, [pc, #444]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d02d      	beq.n	800ac44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abe8:	4b6c      	ldr	r3, [pc, #432]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	08db      	lsrs	r3, r3, #3
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	4a6b      	ldr	r2, [pc, #428]	; (800ada0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abf4:	fa22 f303 	lsr.w	r3, r2, r3
 800abf8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	ee07 3a90 	vmov	s15, r3
 800ac00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac12:	4b62      	ldr	r3, [pc, #392]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac26:	eddf 5a61 	vldr	s11, [pc, #388]	; 800adac <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ac42:	e087      	b.n	800ad54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800adb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac56:	4b51      	ldr	r3, [pc, #324]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800adac <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac86:	e065      	b.n	800ad54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac92:	eddf 6a48 	vldr	s13, [pc, #288]	; 800adb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9a:	4b40      	ldr	r3, [pc, #256]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800acae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800adac <HAL_RCC_GetSysClockFreq+0x2e4>
 800acb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acca:	e043      	b.n	800ad54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800adb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800acda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acde:	4b2f      	ldr	r3, [pc, #188]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ace0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acee:	ed97 6a02 	vldr	s12, [r7, #8]
 800acf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800adac <HAL_RCC_GetSysClockFreq+0x2e4>
 800acf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad0e:	e021      	b.n	800ad54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800adb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad22:	4b1e      	ldr	r3, [pc, #120]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad32:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800adac <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ad54:	4b11      	ldr	r3, [pc, #68]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	0a5b      	lsrs	r3, r3, #9
 800ad5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5e:	3301      	adds	r3, #1
 800ad60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	ee07 3a90 	vmov	s15, r3
 800ad68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad78:	ee17 3a90 	vmov	r3, s15
 800ad7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ad7e:	e005      	b.n	800ad8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ad80:	2300      	movs	r3, #0
 800ad82:	61bb      	str	r3, [r7, #24]
    break;
 800ad84:	e002      	b.n	800ad8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ad86:	4b07      	ldr	r3, [pc, #28]	; (800ada4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad88:	61bb      	str	r3, [r7, #24]
    break;
 800ad8a:	bf00      	nop
  }

  return sysclockfreq;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3724      	adds	r7, #36	; 0x24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	58024400 	.word	0x58024400
 800ada0:	03d09000 	.word	0x03d09000
 800ada4:	003d0900 	.word	0x003d0900
 800ada8:	02dc6c00 	.word	0x02dc6c00
 800adac:	46000000 	.word	0x46000000
 800adb0:	4c742400 	.word	0x4c742400
 800adb4:	4a742400 	.word	0x4a742400
 800adb8:	4c371b00 	.word	0x4c371b00

0800adbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800adc2:	f7ff fe81 	bl	800aac8 <HAL_RCC_GetSysClockFreq>
 800adc6:	4602      	mov	r2, r0
 800adc8:	4b10      	ldr	r3, [pc, #64]	; (800ae0c <HAL_RCC_GetHCLKFreq+0x50>)
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	f003 030f 	and.w	r3, r3, #15
 800add2:	490f      	ldr	r1, [pc, #60]	; (800ae10 <HAL_RCC_GetHCLKFreq+0x54>)
 800add4:	5ccb      	ldrb	r3, [r1, r3]
 800add6:	f003 031f 	and.w	r3, r3, #31
 800adda:	fa22 f303 	lsr.w	r3, r2, r3
 800adde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ade0:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <HAL_RCC_GetHCLKFreq+0x50>)
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <HAL_RCC_GetHCLKFreq+0x54>)
 800adea:	5cd3      	ldrb	r3, [r2, r3]
 800adec:	f003 031f 	and.w	r3, r3, #31
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	fa22 f303 	lsr.w	r3, r2, r3
 800adf6:	4a07      	ldr	r2, [pc, #28]	; (800ae14 <HAL_RCC_GetHCLKFreq+0x58>)
 800adf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800adfa:	4a07      	ldr	r2, [pc, #28]	; (800ae18 <HAL_RCC_GetHCLKFreq+0x5c>)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae00:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae02:	681b      	ldr	r3, [r3, #0]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	58024400 	.word	0x58024400
 800ae10:	080141a4 	.word	0x080141a4
 800ae14:	2400022c 	.word	0x2400022c
 800ae18:	24000228 	.word	0x24000228

0800ae1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae20:	f7ff ffcc 	bl	800adbc <HAL_RCC_GetHCLKFreq>
 800ae24:	4602      	mov	r2, r0
 800ae26:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	091b      	lsrs	r3, r3, #4
 800ae2c:	f003 0307 	and.w	r3, r3, #7
 800ae30:	4904      	ldr	r1, [pc, #16]	; (800ae44 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae32:	5ccb      	ldrb	r3, [r1, r3]
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	58024400 	.word	0x58024400
 800ae44:	080141a4 	.word	0x080141a4

0800ae48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae4c:	f7ff ffb6 	bl	800adbc <HAL_RCC_GetHCLKFreq>
 800ae50:	4602      	mov	r2, r0
 800ae52:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	0a1b      	lsrs	r3, r3, #8
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	4904      	ldr	r1, [pc, #16]	; (800ae70 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae5e:	5ccb      	ldrb	r3, [r1, r3]
 800ae60:	f003 031f 	and.w	r3, r3, #31
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	58024400 	.word	0x58024400
 800ae70:	080141a4 	.word	0x080141a4

0800ae74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae80:	2300      	movs	r3, #0
 800ae82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d03f      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae98:	d02a      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ae9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae9e:	d824      	bhi.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aea4:	d018      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aeaa:	d81e      	bhi.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d003      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800aeb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeb4:	d007      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800aeb6:	e018      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb8:	4ba3      	ldr	r3, [pc, #652]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	4aa2      	ldr	r2, [pc, #648]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aec4:	e015      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3304      	adds	r3, #4
 800aeca:	2102      	movs	r1, #2
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 f9d5 	bl	800c27c <RCCEx_PLL2_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aed6:	e00c      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3324      	adds	r3, #36	; 0x24
 800aedc:	2102      	movs	r1, #2
 800aede:	4618      	mov	r0, r3
 800aee0:	f001 fa7e 	bl	800c3e0 <RCCEx_PLL3_Config>
 800aee4:	4603      	mov	r3, r0
 800aee6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aee8:	e003      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]
      break;
 800aeee:	e000      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aef8:	4b93      	ldr	r3, [pc, #588]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aefa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aefc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af04:	4990      	ldr	r1, [pc, #576]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af06:	4313      	orrs	r3, r2
 800af08:	650b      	str	r3, [r1, #80]	; 0x50
 800af0a:	e001      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d03d      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af20:	2b04      	cmp	r3, #4
 800af22:	d826      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800af24:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800af26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2a:	bf00      	nop
 800af2c:	0800af41 	.word	0x0800af41
 800af30:	0800af4f 	.word	0x0800af4f
 800af34:	0800af61 	.word	0x0800af61
 800af38:	0800af79 	.word	0x0800af79
 800af3c:	0800af79 	.word	0x0800af79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af40:	4b81      	ldr	r3, [pc, #516]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	4a80      	ldr	r2, [pc, #512]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af4c:	e015      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3304      	adds	r3, #4
 800af52:	2100      	movs	r1, #0
 800af54:	4618      	mov	r0, r3
 800af56:	f001 f991 	bl	800c27c <RCCEx_PLL2_Config>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af5e:	e00c      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3324      	adds	r3, #36	; 0x24
 800af64:	2100      	movs	r1, #0
 800af66:	4618      	mov	r0, r3
 800af68:	f001 fa3a 	bl	800c3e0 <RCCEx_PLL3_Config>
 800af6c:	4603      	mov	r3, r0
 800af6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af70:	e003      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	75fb      	strb	r3, [r7, #23]
      break;
 800af76:	e000      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800af78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d109      	bne.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af80:	4b71      	ldr	r3, [pc, #452]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af84:	f023 0207 	bic.w	r2, r3, #7
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8c:	496e      	ldr	r1, [pc, #440]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	650b      	str	r3, [r1, #80]	; 0x50
 800af92:	e001      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d042      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afac:	d02b      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800afae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afb2:	d825      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800afb4:	2bc0      	cmp	r3, #192	; 0xc0
 800afb6:	d028      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800afb8:	2bc0      	cmp	r3, #192	; 0xc0
 800afba:	d821      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800afbc:	2b80      	cmp	r3, #128	; 0x80
 800afbe:	d016      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800afc0:	2b80      	cmp	r3, #128	; 0x80
 800afc2:	d81d      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800afc8:	2b40      	cmp	r3, #64	; 0x40
 800afca:	d007      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800afcc:	e018      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afce:	4b5e      	ldr	r3, [pc, #376]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	4a5d      	ldr	r2, [pc, #372]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800afda:	e017      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3304      	adds	r3, #4
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 f94a 	bl	800c27c <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800afec:	e00e      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3324      	adds	r3, #36	; 0x24
 800aff2:	2100      	movs	r1, #0
 800aff4:	4618      	mov	r0, r3
 800aff6:	f001 f9f3 	bl	800c3e0 <RCCEx_PLL3_Config>
 800affa:	4603      	mov	r3, r0
 800affc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800affe:	e005      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	75fb      	strb	r3, [r7, #23]
      break;
 800b004:	e002      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b00a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d109      	bne.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b012:	4b4d      	ldr	r3, [pc, #308]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b016:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b01e:	494a      	ldr	r1, [pc, #296]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b020:	4313      	orrs	r3, r2
 800b022:	650b      	str	r3, [r1, #80]	; 0x50
 800b024:	e001      	b.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b032:	2b00      	cmp	r3, #0
 800b034:	d049      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b03c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b040:	d030      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b046:	d82a      	bhi.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b048:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b04c:	d02c      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b04e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b052:	d824      	bhi.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b058:	d018      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b05a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b05e:	d81e      	bhi.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d003      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b068:	d007      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b06a:	e018      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b06c:	4b36      	ldr	r3, [pc, #216]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	4a35      	ldr	r2, [pc, #212]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b078:	e017      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3304      	adds	r3, #4
 800b07e:	2100      	movs	r1, #0
 800b080:	4618      	mov	r0, r3
 800b082:	f001 f8fb 	bl	800c27c <RCCEx_PLL2_Config>
 800b086:	4603      	mov	r3, r0
 800b088:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b08a:	e00e      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3324      	adds	r3, #36	; 0x24
 800b090:	2100      	movs	r1, #0
 800b092:	4618      	mov	r0, r3
 800b094:	f001 f9a4 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b09c:	e005      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b0a2:	e002      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b0a4:	bf00      	nop
 800b0a6:	e000      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b0a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0b0:	4b25      	ldr	r3, [pc, #148]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b0be:	4922      	ldr	r1, [pc, #136]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	658b      	str	r3, [r1, #88]	; 0x58
 800b0c4:	e001      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d04b      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0e0:	d030      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b0e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0e6:	d82a      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b0e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0ec:	d02e      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b0ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0f2:	d824      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b0f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0f8:	d018      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b0fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0fe:	d81e      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b100:	2b00      	cmp	r3, #0
 800b102:	d003      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b108:	d007      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b10a:	e018      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b10c:	4b0e      	ldr	r3, [pc, #56]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	4a0d      	ldr	r2, [pc, #52]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b118:	e019      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f001 f8ab 	bl	800c27c <RCCEx_PLL2_Config>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b12a:	e010      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f001 f954 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b138:	4603      	mov	r3, r0
 800b13a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b13c:	e007      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	75fb      	strb	r3, [r7, #23]
      break;
 800b142:	e004      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b144:	bf00      	nop
 800b146:	e002      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b148:	58024400 	.word	0x58024400
      break;
 800b14c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b154:	4b99      	ldr	r3, [pc, #612]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b158:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b162:	4996      	ldr	r1, [pc, #600]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b164:	4313      	orrs	r3, r2
 800b166:	658b      	str	r3, [r1, #88]	; 0x58
 800b168:	e001      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d032      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b17e:	2b30      	cmp	r3, #48	; 0x30
 800b180:	d01c      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b182:	2b30      	cmp	r3, #48	; 0x30
 800b184:	d817      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b186:	2b20      	cmp	r3, #32
 800b188:	d00c      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d813      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d016      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b192:	2b10      	cmp	r3, #16
 800b194:	d10f      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b196:	4b89      	ldr	r3, [pc, #548]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	4a88      	ldr	r2, [pc, #544]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b19c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b1a2:	e00e      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	2102      	movs	r1, #2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f866 	bl	800c27c <RCCEx_PLL2_Config>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b1b4:	e005      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b1ba:	e002      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b1bc:	bf00      	nop
 800b1be:	e000      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b1c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d109      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b1c8:	4b7c      	ldr	r3, [pc, #496]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b1ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1d4:	4979      	ldr	r1, [pc, #484]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b1da:	e001      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d047      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1f4:	d030      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b1f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1fa:	d82a      	bhi.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b1fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b200:	d02c      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b206:	d824      	bhi.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b20c:	d018      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b20e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b212:	d81e      	bhi.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b21c:	d007      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b21e:	e018      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b220:	4b66      	ldr	r3, [pc, #408]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	4a65      	ldr	r2, [pc, #404]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b22a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b22c:	e017      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3304      	adds	r3, #4
 800b232:	2100      	movs	r1, #0
 800b234:	4618      	mov	r0, r3
 800b236:	f001 f821 	bl	800c27c <RCCEx_PLL2_Config>
 800b23a:	4603      	mov	r3, r0
 800b23c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b23e:	e00e      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3324      	adds	r3, #36	; 0x24
 800b244:	2100      	movs	r1, #0
 800b246:	4618      	mov	r0, r3
 800b248:	f001 f8ca 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b250:	e005      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	75fb      	strb	r3, [r7, #23]
      break;
 800b256:	e002      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b258:	bf00      	nop
 800b25a:	e000      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b25c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d109      	bne.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b264:	4b55      	ldr	r3, [pc, #340]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b268:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b270:	4952      	ldr	r1, [pc, #328]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b272:	4313      	orrs	r3, r2
 800b274:	650b      	str	r3, [r1, #80]	; 0x50
 800b276:	e001      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d049      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b28c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b290:	d02e      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b296:	d828      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b298:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b29c:	d02a      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b29e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2a2:	d822      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b2a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2a8:	d026      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b2aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2ae:	d81c      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b2b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2b4:	d010      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b2b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2ba:	d816      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01d      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c4:	d111      	bne.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 ffd5 	bl	800c27c <RCCEx_PLL2_Config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b2d6:	e012      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3324      	adds	r3, #36	; 0x24
 800b2dc:	2101      	movs	r1, #1
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f001 f87e 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b2e8:	e009      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ee:	e006      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b2f0:	bf00      	nop
 800b2f2:	e004      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b2f4:	bf00      	nop
 800b2f6:	e002      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b2f8:	bf00      	nop
 800b2fa:	e000      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b2fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d109      	bne.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b304:	4b2d      	ldr	r3, [pc, #180]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b308:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b310:	492a      	ldr	r1, [pc, #168]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b312:	4313      	orrs	r3, r2
 800b314:	650b      	str	r3, [r1, #80]	; 0x50
 800b316:	e001      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d04d      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b32e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b332:	d02e      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b338:	d828      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b33a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33e:	d02a      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b344:	d822      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b34a:	d026      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b34c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b350:	d81c      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b356:	d010      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b35c:	d816      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d01d      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b366:	d111      	bne.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3304      	adds	r3, #4
 800b36c:	2101      	movs	r1, #1
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 ff84 	bl	800c27c <RCCEx_PLL2_Config>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b378:	e012      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3324      	adds	r3, #36	; 0x24
 800b37e:	2101      	movs	r1, #1
 800b380:	4618      	mov	r0, r3
 800b382:	f001 f82d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b386:	4603      	mov	r3, r0
 800b388:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b38a:	e009      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	75fb      	strb	r3, [r7, #23]
      break;
 800b390:	e006      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b392:	bf00      	nop
 800b394:	e004      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b396:	bf00      	nop
 800b398:	e002      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b39a:	bf00      	nop
 800b39c:	e000      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b39e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10c      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3b4:	4901      	ldr	r1, [pc, #4]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	658b      	str	r3, [r1, #88]	; 0x58
 800b3ba:	e003      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b3bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d02f      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3d8:	d00e      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b3da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3de:	d814      	bhi.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d015      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b3e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e8:	d10f      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3ea:	4baf      	ldr	r3, [pc, #700]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	4aae      	ldr	r2, [pc, #696]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b3f6:	e00c      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 ff3c 	bl	800c27c <RCCEx_PLL2_Config>
 800b404:	4603      	mov	r3, r0
 800b406:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b408:	e003      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	75fb      	strb	r3, [r7, #23]
      break;
 800b40e:	e000      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b410:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d109      	bne.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b418:	4ba3      	ldr	r3, [pc, #652]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b424:	49a0      	ldr	r1, [pc, #640]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b426:	4313      	orrs	r3, r2
 800b428:	650b      	str	r3, [r1, #80]	; 0x50
 800b42a:	e001      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d032      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b440:	2b03      	cmp	r3, #3
 800b442:	d81b      	bhi.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b444:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44a:	bf00      	nop
 800b44c:	0800b483 	.word	0x0800b483
 800b450:	0800b45d 	.word	0x0800b45d
 800b454:	0800b46b 	.word	0x0800b46b
 800b458:	0800b483 	.word	0x0800b483
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b45c:	4b92      	ldr	r3, [pc, #584]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	4a91      	ldr	r2, [pc, #580]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b468:	e00c      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3304      	adds	r3, #4
 800b46e:	2102      	movs	r1, #2
 800b470:	4618      	mov	r0, r3
 800b472:	f000 ff03 	bl	800c27c <RCCEx_PLL2_Config>
 800b476:	4603      	mov	r3, r0
 800b478:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b47a:	e003      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	75fb      	strb	r3, [r7, #23]
      break;
 800b480:	e000      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b482:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b48a:	4b87      	ldr	r3, [pc, #540]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48e:	f023 0203 	bic.w	r2, r3, #3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	4984      	ldr	r1, [pc, #528]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b49c:	e001      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 8086 	beq.w	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4b0:	4b7e      	ldr	r3, [pc, #504]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a7d      	ldr	r2, [pc, #500]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b4b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4bc:	f7fb f970 	bl	80067a0 <HAL_GetTick>
 800b4c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4c2:	e009      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4c4:	f7fb f96c 	bl	80067a0 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b64      	cmp	r3, #100	; 0x64
 800b4d0:	d902      	bls.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	75fb      	strb	r3, [r7, #23]
        break;
 800b4d6:	e005      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4d8:	4b74      	ldr	r3, [pc, #464]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d0ef      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d166      	bne.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b4ea:	4b6f      	ldr	r3, [pc, #444]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b4ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4f4:	4053      	eors	r3, r2
 800b4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d013      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4fe:	4b6a      	ldr	r3, [pc, #424]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b506:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b508:	4b67      	ldr	r3, [pc, #412]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50c:	4a66      	ldr	r2, [pc, #408]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b50e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b512:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b514:	4b64      	ldr	r3, [pc, #400]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b518:	4a63      	ldr	r2, [pc, #396]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b51a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b51e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b520:	4a61      	ldr	r2, [pc, #388]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b530:	d115      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b532:	f7fb f935 	bl	80067a0 <HAL_GetTick>
 800b536:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b538:	e00b      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b53a:	f7fb f931 	bl	80067a0 <HAL_GetTick>
 800b53e:	4602      	mov	r2, r0
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	f241 3288 	movw	r2, #5000	; 0x1388
 800b548:	4293      	cmp	r3, r2
 800b54a:	d902      	bls.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	75fb      	strb	r3, [r7, #23]
            break;
 800b550:	e005      	b.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b552:	4b55      	ldr	r3, [pc, #340]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d0ed      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d126      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b56a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b56e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b572:	d10d      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b574:	4b4c      	ldr	r3, [pc, #304]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b582:	0919      	lsrs	r1, r3, #4
 800b584:	4b4a      	ldr	r3, [pc, #296]	; (800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b586:	400b      	ands	r3, r1
 800b588:	4947      	ldr	r1, [pc, #284]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	610b      	str	r3, [r1, #16]
 800b58e:	e005      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b590:	4b45      	ldr	r3, [pc, #276]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	4a44      	ldr	r2, [pc, #272]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b596:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b59a:	6113      	str	r3, [r2, #16]
 800b59c:	4b42      	ldr	r3, [pc, #264]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b59e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5aa:	493f      	ldr	r1, [pc, #252]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	670b      	str	r3, [r1, #112]	; 0x70
 800b5b0:	e004      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	75bb      	strb	r3, [r7, #22]
 800b5b6:	e001      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0301 	and.w	r3, r3, #1
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8085 	beq.w	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ce:	2b28      	cmp	r3, #40	; 0x28
 800b5d0:	d866      	bhi.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b5d2:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b6b5 	.word	0x0800b6b5
 800b5dc:	0800b6a1 	.word	0x0800b6a1
 800b5e0:	0800b6a1 	.word	0x0800b6a1
 800b5e4:	0800b6a1 	.word	0x0800b6a1
 800b5e8:	0800b6a1 	.word	0x0800b6a1
 800b5ec:	0800b6a1 	.word	0x0800b6a1
 800b5f0:	0800b6a1 	.word	0x0800b6a1
 800b5f4:	0800b6a1 	.word	0x0800b6a1
 800b5f8:	0800b67d 	.word	0x0800b67d
 800b5fc:	0800b6a1 	.word	0x0800b6a1
 800b600:	0800b6a1 	.word	0x0800b6a1
 800b604:	0800b6a1 	.word	0x0800b6a1
 800b608:	0800b6a1 	.word	0x0800b6a1
 800b60c:	0800b6a1 	.word	0x0800b6a1
 800b610:	0800b6a1 	.word	0x0800b6a1
 800b614:	0800b6a1 	.word	0x0800b6a1
 800b618:	0800b68f 	.word	0x0800b68f
 800b61c:	0800b6a1 	.word	0x0800b6a1
 800b620:	0800b6a1 	.word	0x0800b6a1
 800b624:	0800b6a1 	.word	0x0800b6a1
 800b628:	0800b6a1 	.word	0x0800b6a1
 800b62c:	0800b6a1 	.word	0x0800b6a1
 800b630:	0800b6a1 	.word	0x0800b6a1
 800b634:	0800b6a1 	.word	0x0800b6a1
 800b638:	0800b6b5 	.word	0x0800b6b5
 800b63c:	0800b6a1 	.word	0x0800b6a1
 800b640:	0800b6a1 	.word	0x0800b6a1
 800b644:	0800b6a1 	.word	0x0800b6a1
 800b648:	0800b6a1 	.word	0x0800b6a1
 800b64c:	0800b6a1 	.word	0x0800b6a1
 800b650:	0800b6a1 	.word	0x0800b6a1
 800b654:	0800b6a1 	.word	0x0800b6a1
 800b658:	0800b6b5 	.word	0x0800b6b5
 800b65c:	0800b6a1 	.word	0x0800b6a1
 800b660:	0800b6a1 	.word	0x0800b6a1
 800b664:	0800b6a1 	.word	0x0800b6a1
 800b668:	0800b6a1 	.word	0x0800b6a1
 800b66c:	0800b6a1 	.word	0x0800b6a1
 800b670:	0800b6a1 	.word	0x0800b6a1
 800b674:	0800b6a1 	.word	0x0800b6a1
 800b678:	0800b6b5 	.word	0x0800b6b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3304      	adds	r3, #4
 800b680:	2101      	movs	r1, #1
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fdfa 	bl	800c27c <RCCEx_PLL2_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b68c:	e013      	b.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3324      	adds	r3, #36	; 0x24
 800b692:	2101      	movs	r1, #1
 800b694:	4618      	mov	r0, r3
 800b696:	f000 fea3 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b69a:	4603      	mov	r3, r0
 800b69c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b69e:	e00a      	b.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	75fb      	strb	r3, [r7, #23]
      break;
 800b6a4:	e007      	b.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b6a6:	bf00      	nop
 800b6a8:	58024400 	.word	0x58024400
 800b6ac:	58024800 	.word	0x58024800
 800b6b0:	00ffffcf 	.word	0x00ffffcf
      break;
 800b6b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d109      	bne.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6bc:	4b96      	ldr	r3, [pc, #600]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6c8:	4993      	ldr	r1, [pc, #588]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	654b      	str	r3, [r1, #84]	; 0x54
 800b6ce:	e001      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d038      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e4:	2b05      	cmp	r3, #5
 800b6e6:	d821      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b6e8:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ee:	bf00      	nop
 800b6f0:	0800b733 	.word	0x0800b733
 800b6f4:	0800b709 	.word	0x0800b709
 800b6f8:	0800b71b 	.word	0x0800b71b
 800b6fc:	0800b733 	.word	0x0800b733
 800b700:	0800b733 	.word	0x0800b733
 800b704:	0800b733 	.word	0x0800b733
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3304      	adds	r3, #4
 800b70c:	2101      	movs	r1, #1
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fdb4 	bl	800c27c <RCCEx_PLL2_Config>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b718:	e00c      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3324      	adds	r3, #36	; 0x24
 800b71e:	2101      	movs	r1, #1
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fe5d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b726:	4603      	mov	r3, r0
 800b728:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b72a:	e003      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	75fb      	strb	r3, [r7, #23]
      break;
 800b730:	e000      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b732:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b73a:	4b77      	ldr	r3, [pc, #476]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73e:	f023 0207 	bic.w	r2, r3, #7
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b746:	4974      	ldr	r1, [pc, #464]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	654b      	str	r3, [r1, #84]	; 0x54
 800b74c:	e001      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0304 	and.w	r3, r3, #4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d03a      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b764:	2b05      	cmp	r3, #5
 800b766:	d821      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b7b3 	.word	0x0800b7b3
 800b774:	0800b789 	.word	0x0800b789
 800b778:	0800b79b 	.word	0x0800b79b
 800b77c:	0800b7b3 	.word	0x0800b7b3
 800b780:	0800b7b3 	.word	0x0800b7b3
 800b784:	0800b7b3 	.word	0x0800b7b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3304      	adds	r3, #4
 800b78c:	2101      	movs	r1, #1
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fd74 	bl	800c27c <RCCEx_PLL2_Config>
 800b794:	4603      	mov	r3, r0
 800b796:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b798:	e00c      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3324      	adds	r3, #36	; 0x24
 800b79e:	2101      	movs	r1, #1
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 fe1d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b7aa:	e003      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b0:	e000      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b7b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7ba:	4b57      	ldr	r3, [pc, #348]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7be:	f023 0207 	bic.w	r2, r3, #7
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c8:	4953      	ldr	r1, [pc, #332]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	658b      	str	r3, [r1, #88]	; 0x58
 800b7ce:	e001      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0320 	and.w	r3, r3, #32
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d04b      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7ea:	d02e      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b7ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7f0:	d828      	bhi.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7f6:	d02a      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7fc:	d822      	bhi.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b7fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b802:	d026      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b804:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b808:	d81c      	bhi.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b80a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b80e:	d010      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b814:	d816      	bhi.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b816:	2b00      	cmp	r3, #0
 800b818:	d01d      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b81a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b81e:	d111      	bne.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3304      	adds	r3, #4
 800b824:	2100      	movs	r1, #0
 800b826:	4618      	mov	r0, r3
 800b828:	f000 fd28 	bl	800c27c <RCCEx_PLL2_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b830:	e012      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3324      	adds	r3, #36	; 0x24
 800b836:	2102      	movs	r1, #2
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fdd1 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b83e:	4603      	mov	r3, r0
 800b840:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b842:	e009      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	75fb      	strb	r3, [r7, #23]
      break;
 800b848:	e006      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b84a:	bf00      	nop
 800b84c:	e004      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b84e:	bf00      	nop
 800b850:	e002      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b852:	bf00      	nop
 800b854:	e000      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b856:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10a      	bne.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b85e:	4b2e      	ldr	r3, [pc, #184]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b862:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b86c:	492a      	ldr	r1, [pc, #168]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	654b      	str	r3, [r1, #84]	; 0x54
 800b872:	e001      	b.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	d04d      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b88a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b88e:	d02e      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b890:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b894:	d828      	bhi.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b89a:	d02a      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a0:	d822      	bhi.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b8a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8a6:	d026      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b8a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8ac:	d81c      	bhi.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b8ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b2:	d010      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b8b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b8:	d816      	bhi.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d01d      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b8be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8c2:	d111      	bne.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fcd6 	bl	800c27c <RCCEx_PLL2_Config>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b8d4:	e012      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3324      	adds	r3, #36	; 0x24
 800b8da:	2102      	movs	r1, #2
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fd7f 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b8e6:	e009      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ec:	e006      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b8ee:	bf00      	nop
 800b8f0:	e004      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b8f2:	bf00      	nop
 800b8f4:	e002      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b8f6:	bf00      	nop
 800b8f8:	e000      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b8fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10c      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b902:	4b05      	ldr	r3, [pc, #20]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b906:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b910:	4901      	ldr	r1, [pc, #4]	; (800b918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b912:	4313      	orrs	r3, r2
 800b914:	658b      	str	r3, [r1, #88]	; 0x58
 800b916:	e003      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d04b      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b932:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b936:	d02e      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b938:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b93c:	d828      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b93e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b942:	d02a      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b948:	d822      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b94a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b94e:	d026      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b950:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b954:	d81c      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b95a:	d010      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b95c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b960:	d816      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01d      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b96a:	d111      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3304      	adds	r3, #4
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fc82 	bl	800c27c <RCCEx_PLL2_Config>
 800b978:	4603      	mov	r3, r0
 800b97a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b97c:	e012      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3324      	adds	r3, #36	; 0x24
 800b982:	2102      	movs	r1, #2
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fd2b 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b98a:	4603      	mov	r3, r0
 800b98c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b98e:	e009      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	75fb      	strb	r3, [r7, #23]
      break;
 800b994:	e006      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b996:	bf00      	nop
 800b998:	e004      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b99a:	bf00      	nop
 800b99c:	e002      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b99e:	bf00      	nop
 800b9a0:	e000      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b9a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9aa:	4b9d      	ldr	r3, [pc, #628]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9b8:	4999      	ldr	r1, [pc, #612]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	658b      	str	r3, [r1, #88]	; 0x58
 800b9be:	e001      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d01a      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9da:	d10a      	bne.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3324      	adds	r3, #36	; 0x24
 800b9e0:	2102      	movs	r1, #2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fcfc 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b9f2:	4b8b      	ldr	r3, [pc, #556]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba00:	4987      	ldr	r1, [pc, #540]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0310 	and.w	r3, r3, #16
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d01a      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba1c:	d10a      	bne.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3324      	adds	r3, #36	; 0x24
 800ba22:	2102      	movs	r1, #2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fcdb 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba34:	4b7a      	ldr	r3, [pc, #488]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba42:	4977      	ldr	r1, [pc, #476]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d034      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba5e:	d01d      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ba60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba64:	d817      	bhi.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ba6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba6e:	d009      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800ba70:	e011      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3304      	adds	r3, #4
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fbff 	bl	800c27c <RCCEx_PLL2_Config>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba82:	e00c      	b.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3324      	adds	r3, #36	; 0x24
 800ba88:	2102      	movs	r1, #2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 fca8 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba94:	e003      	b.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	75fb      	strb	r3, [r7, #23]
      break;
 800ba9a:	e000      	b.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800ba9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800baa4:	4b5e      	ldr	r3, [pc, #376]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800baa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bab2:	495b      	ldr	r1, [pc, #364]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	658b      	str	r3, [r1, #88]	; 0x58
 800bab8:	e001      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d033      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bad0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bad4:	d01c      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800bad6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bada:	d816      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800badc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bae0:	d003      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800bae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bae6:	d007      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800bae8:	e00f      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baea:	4b4d      	ldr	r3, [pc, #308]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	4a4c      	ldr	r2, [pc, #304]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800baf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800baf6:	e00c      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3324      	adds	r3, #36	; 0x24
 800bafc:	2101      	movs	r1, #1
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fc6e 	bl	800c3e0 <RCCEx_PLL3_Config>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bb08:	e003      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb0e:	e000      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800bb10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10a      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb18:	4b41      	ldr	r3, [pc, #260]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb26:	493e      	ldr	r1, [pc, #248]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	654b      	str	r3, [r1, #84]	; 0x54
 800bb2c:	e001      	b.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d029      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800bb46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4a:	d007      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800bb4c:	e00f      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb4e:	4b34      	ldr	r3, [pc, #208]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb52:	4a33      	ldr	r2, [pc, #204]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb5a:	e00b      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	2102      	movs	r1, #2
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 fb8a 	bl	800c27c <RCCEx_PLL2_Config>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb6c:	e002      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	75fb      	strb	r3, [r7, #23]
      break;
 800bb72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb7a:	4b29      	ldr	r3, [pc, #164]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb86:	4926      	ldr	r1, [pc, #152]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb8c:	e001      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3324      	adds	r3, #36	; 0x24
 800bba2:	2102      	movs	r1, #2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 fc1b 	bl	800c3e0 <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d033      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbc8:	d017      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bbca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbce:	d811      	bhi.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd4:	d013      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bbd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbda:	d80b      	bhi.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d010      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800bbe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe4:	d106      	bne.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbea:	4a0d      	ldr	r2, [pc, #52]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bbec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bbf2:	e007      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbf8:	e004      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bbfa:	bf00      	nop
 800bbfc:	e002      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bbfe:	bf00      	nop
 800bc00:	e000      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bc02:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10c      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc0a:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc16:	4902      	ldr	r1, [pc, #8]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	654b      	str	r3, [r1, #84]	; 0x54
 800bc1c:	e004      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800bc1e:	bf00      	nop
 800bc20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc34:	4b31      	ldr	r3, [pc, #196]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc40:	492e      	ldr	r1, [pc, #184]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d009      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc52:	4b2a      	ldr	r3, [pc, #168]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc60:	4926      	ldr	r1, [pc, #152]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc72:	4b22      	ldr	r3, [pc, #136]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc7e:	491f      	ldr	r1, [pc, #124]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00d      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc90:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	4a19      	ldr	r2, [pc, #100]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc9a:	6113      	str	r3, [r2, #16]
 800bc9c:	4b17      	ldr	r3, [pc, #92]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bca6:	4915      	ldr	r1, [pc, #84]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da08      	bge.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bcb4:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bcb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc0:	490e      	ldr	r1, [pc, #56]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d009      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bcd2:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bce0:	4906      	ldr	r1, [pc, #24]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bce6:	7dbb      	ldrb	r3, [r7, #22]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e000      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	58024400 	.word	0x58024400

0800bd00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd04:	f7ff f85a 	bl	800adbc <HAL_RCC_GetHCLKFreq>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	091b      	lsrs	r3, r3, #4
 800bd10:	f003 0307 	and.w	r3, r3, #7
 800bd14:	4904      	ldr	r1, [pc, #16]	; (800bd28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd16:	5ccb      	ldrb	r3, [r1, r3]
 800bd18:	f003 031f 	and.w	r3, r3, #31
 800bd1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	58024400 	.word	0x58024400
 800bd28:	080141a4 	.word	0x080141a4

0800bd2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b089      	sub	sp, #36	; 0x24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd34:	4ba1      	ldr	r3, [pc, #644]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd38:	f003 0303 	and.w	r3, r3, #3
 800bd3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bd3e:	4b9f      	ldr	r3, [pc, #636]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd42:	0b1b      	lsrs	r3, r3, #12
 800bd44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bd4a:	4b9c      	ldr	r3, [pc, #624]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	091b      	lsrs	r3, r3, #4
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bd56:	4b99      	ldr	r3, [pc, #612]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	08db      	lsrs	r3, r3, #3
 800bd5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 8111 	beq.w	800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	f000 8083 	beq.w	800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	f200 80a1 	bhi.w	800becc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d056      	beq.n	800be44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd96:	e099      	b.n	800becc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd98:	4b88      	ldr	r3, [pc, #544]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0320 	and.w	r3, r3, #32
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d02d      	beq.n	800be00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bda4:	4b85      	ldr	r3, [pc, #532]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	08db      	lsrs	r3, r3, #3
 800bdaa:	f003 0303 	and.w	r3, r3, #3
 800bdae:	4a84      	ldr	r2, [pc, #528]	; (800bfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bdb0:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	ee07 3a90 	vmov	s15, r3
 800bdbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdce:	4b7b      	ldr	r3, [pc, #492]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bde2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bdfe:	e087      	b.n	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be12:	4b6a      	ldr	r3, [pc, #424]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be22:	ed97 6a03 	vldr	s12, [r7, #12]
 800be26:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be42:	e065      	b.n	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bfcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be56:	4b59      	ldr	r3, [pc, #356]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be66:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be86:	e043      	b.n	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bfd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9a:	4b48      	ldr	r3, [pc, #288]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800beae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beca:	e021      	b.n	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bfcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800beda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bede:	4b37      	ldr	r3, [pc, #220]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee6:	ee07 3a90 	vmov	s15, r3
 800beea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800befe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bf10:	4b2a      	ldr	r3, [pc, #168]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	0a5b      	lsrs	r3, r3, #9
 800bf16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf36:	ee17 2a90 	vmov	r2, s15
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	0c1b      	lsrs	r3, r3, #16
 800bf44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf48:	ee07 3a90 	vmov	s15, r3
 800bf4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf58:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf64:	ee17 2a90 	vmov	r2, s15
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bf6c:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf70:	0e1b      	lsrs	r3, r3, #24
 800bf72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf86:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf92:	ee17 2a90 	vmov	r2, s15
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf9a:	e008      	b.n	800bfae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	609a      	str	r2, [r3, #8]
}
 800bfae:	bf00      	nop
 800bfb0:	3724      	adds	r7, #36	; 0x24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	58024400 	.word	0x58024400
 800bfc0:	03d09000 	.word	0x03d09000
 800bfc4:	46000000 	.word	0x46000000
 800bfc8:	4c742400 	.word	0x4c742400
 800bfcc:	4a742400 	.word	0x4a742400
 800bfd0:	4c371b00 	.word	0x4c371b00

0800bfd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b089      	sub	sp, #36	; 0x24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfdc:	4ba1      	ldr	r3, [pc, #644]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe0:	f003 0303 	and.w	r3, r3, #3
 800bfe4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bfe6:	4b9f      	ldr	r3, [pc, #636]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfea:	0d1b      	lsrs	r3, r3, #20
 800bfec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bff0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bff2:	4b9c      	ldr	r3, [pc, #624]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bffe:	4b99      	ldr	r3, [pc, #612]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c002:	08db      	lsrs	r3, r3, #3
 800c004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	fb02 f303 	mul.w	r3, r2, r3
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c016:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 8111 	beq.w	800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	2b02      	cmp	r3, #2
 800c026:	f000 8083 	beq.w	800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	f200 80a1 	bhi.w	800c174 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d056      	beq.n	800c0ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c03e:	e099      	b.n	800c174 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c040:	4b88      	ldr	r3, [pc, #544]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0320 	and.w	r3, r3, #32
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d02d      	beq.n	800c0a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c04c:	4b85      	ldr	r3, [pc, #532]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	08db      	lsrs	r3, r3, #3
 800c052:	f003 0303 	and.w	r3, r3, #3
 800c056:	4a84      	ldr	r2, [pc, #528]	; (800c268 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c058:	fa22 f303 	lsr.w	r3, r2, r3
 800c05c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	ee07 3a90 	vmov	s15, r3
 800c064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c076:	4b7b      	ldr	r3, [pc, #492]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c086:	ed97 6a03 	vldr	s12, [r7, #12]
 800c08a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c26c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c0a6:	e087      	b.n	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c270 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ba:	4b6a      	ldr	r3, [pc, #424]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c26c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0ea:	e065      	b.n	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c274 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fe:	4b59      	ldr	r3, [pc, #356]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c112:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c26c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c12e:	e043      	b.n	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c278 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c142:	4b48      	ldr	r3, [pc, #288]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c152:	ed97 6a03 	vldr	s12, [r7, #12]
 800c156:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c26c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c172:	e021      	b.n	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	ee07 3a90 	vmov	s15, r3
 800c17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c274 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c186:	4b37      	ldr	r3, [pc, #220]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18e:	ee07 3a90 	vmov	s15, r3
 800c192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c196:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c26c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c1b8:	4b2a      	ldr	r3, [pc, #168]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	0a5b      	lsrs	r3, r3, #9
 800c1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1de:	ee17 2a90 	vmov	r2, s15
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c1e6:	4b1f      	ldr	r3, [pc, #124]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	0c1b      	lsrs	r3, r3, #16
 800c1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c200:	edd7 6a07 	vldr	s13, [r7, #28]
 800c204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c20c:	ee17 2a90 	vmov	r2, s15
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c214:	4b13      	ldr	r3, [pc, #76]	; (800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c218:	0e1b      	lsrs	r3, r3, #24
 800c21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c22a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c22e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c23a:	ee17 2a90 	vmov	r2, s15
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c242:	e008      	b.n	800c256 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	609a      	str	r2, [r3, #8]
}
 800c256:	bf00      	nop
 800c258:	3724      	adds	r7, #36	; 0x24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	58024400 	.word	0x58024400
 800c268:	03d09000 	.word	0x03d09000
 800c26c:	46000000 	.word	0x46000000
 800c270:	4c742400 	.word	0x4c742400
 800c274:	4a742400 	.word	0x4a742400
 800c278:	4c371b00 	.word	0x4c371b00

0800c27c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c28a:	4b53      	ldr	r3, [pc, #332]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	2b03      	cmp	r3, #3
 800c294:	d101      	bne.n	800c29a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e099      	b.n	800c3ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c29a:	4b4f      	ldr	r3, [pc, #316]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a4e      	ldr	r2, [pc, #312]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2a6:	f7fa fa7b 	bl	80067a0 <HAL_GetTick>
 800c2aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2ac:	e008      	b.n	800c2c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2ae:	f7fa fa77 	bl	80067a0 <HAL_GetTick>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d901      	bls.n	800c2c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e086      	b.n	800c3ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2c0:	4b45      	ldr	r3, [pc, #276]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1f0      	bne.n	800c2ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c2cc:	4b42      	ldr	r3, [pc, #264]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	031b      	lsls	r3, r3, #12
 800c2da:	493f      	ldr	r1, [pc, #252]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	628b      	str	r3, [r1, #40]	; 0x28
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	025b      	lsls	r3, r3, #9
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	041b      	lsls	r3, r3, #16
 800c2fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c302:	431a      	orrs	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	3b01      	subs	r3, #1
 800c30a:	061b      	lsls	r3, r3, #24
 800c30c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c310:	4931      	ldr	r1, [pc, #196]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c312:	4313      	orrs	r3, r2
 800c314:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c316:	4b30      	ldr	r3, [pc, #192]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	492d      	ldr	r1, [pc, #180]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c324:	4313      	orrs	r3, r2
 800c326:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c328:	4b2b      	ldr	r3, [pc, #172]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	f023 0220 	bic.w	r2, r3, #32
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	699b      	ldr	r3, [r3, #24]
 800c334:	4928      	ldr	r1, [pc, #160]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c336:	4313      	orrs	r3, r2
 800c338:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c33a:	4b27      	ldr	r3, [pc, #156]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33e:	4a26      	ldr	r2, [pc, #152]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c340:	f023 0310 	bic.w	r3, r3, #16
 800c344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c346:	4b24      	ldr	r3, [pc, #144]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c34a:	4b24      	ldr	r3, [pc, #144]	; (800c3dc <RCCEx_PLL2_Config+0x160>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	69d2      	ldr	r2, [r2, #28]
 800c352:	00d2      	lsls	r2, r2, #3
 800c354:	4920      	ldr	r1, [pc, #128]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c356:	4313      	orrs	r3, r2
 800c358:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c35a:	4b1f      	ldr	r3, [pc, #124]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35e:	4a1e      	ldr	r2, [pc, #120]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c360:	f043 0310 	orr.w	r3, r3, #16
 800c364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c36c:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	4a19      	ldr	r2, [pc, #100]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c376:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c378:	e00f      	b.n	800c39a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d106      	bne.n	800c38e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c380:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c384:	4a14      	ldr	r2, [pc, #80]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c38a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c38c:	e005      	b.n	800c39a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c38e:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	4a11      	ldr	r2, [pc, #68]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c398:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c39a:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a0e      	ldr	r2, [pc, #56]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c3a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3a6:	f7fa f9fb 	bl	80067a0 <HAL_GetTick>
 800c3aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3ac:	e008      	b.n	800c3c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c3ae:	f7fa f9f7 	bl	80067a0 <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d901      	bls.n	800c3c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e006      	b.n	800c3ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3c0:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0f0      	beq.n	800c3ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	58024400 	.word	0x58024400
 800c3dc:	ffff0007 	.word	0xffff0007

0800c3e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3ee:	4b53      	ldr	r3, [pc, #332]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f2:	f003 0303 	and.w	r3, r3, #3
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d101      	bne.n	800c3fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e099      	b.n	800c532 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c3fe:	4b4f      	ldr	r3, [pc, #316]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a4e      	ldr	r2, [pc, #312]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c40a:	f7fa f9c9 	bl	80067a0 <HAL_GetTick>
 800c40e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c410:	e008      	b.n	800c424 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c412:	f7fa f9c5 	bl	80067a0 <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d901      	bls.n	800c424 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e086      	b.n	800c532 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c424:	4b45      	ldr	r3, [pc, #276]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1f0      	bne.n	800c412 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c430:	4b42      	ldr	r3, [pc, #264]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c434:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	051b      	lsls	r3, r3, #20
 800c43e:	493f      	ldr	r1, [pc, #252]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c440:	4313      	orrs	r3, r2
 800c442:	628b      	str	r3, [r1, #40]	; 0x28
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	3b01      	subs	r3, #1
 800c44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	3b01      	subs	r3, #1
 800c454:	025b      	lsls	r3, r3, #9
 800c456:	b29b      	uxth	r3, r3
 800c458:	431a      	orrs	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	3b01      	subs	r3, #1
 800c460:	041b      	lsls	r3, r3, #16
 800c462:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c466:	431a      	orrs	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	061b      	lsls	r3, r3, #24
 800c470:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c474:	4931      	ldr	r1, [pc, #196]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c476:	4313      	orrs	r3, r2
 800c478:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c47a:	4b30      	ldr	r3, [pc, #192]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	492d      	ldr	r1, [pc, #180]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c488:	4313      	orrs	r3, r2
 800c48a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c48c:	4b2b      	ldr	r3, [pc, #172]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	4928      	ldr	r1, [pc, #160]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c49e:	4b27      	ldr	r3, [pc, #156]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a2:	4a26      	ldr	r2, [pc, #152]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c4aa:	4b24      	ldr	r3, [pc, #144]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4ae:	4b24      	ldr	r3, [pc, #144]	; (800c540 <RCCEx_PLL3_Config+0x160>)
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	69d2      	ldr	r2, [r2, #28]
 800c4b6:	00d2      	lsls	r2, r2, #3
 800c4b8:	4920      	ldr	r1, [pc, #128]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4be:	4b1f      	ldr	r3, [pc, #124]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c2:	4a1e      	ldr	r2, [pc, #120]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d106      	bne.n	800c4de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4d0:	4b1a      	ldr	r3, [pc, #104]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	4a19      	ldr	r2, [pc, #100]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c4da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4dc:	e00f      	b.n	800c4fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d106      	bne.n	800c4f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4e4:	4b15      	ldr	r3, [pc, #84]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	4a14      	ldr	r2, [pc, #80]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c4ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4f0:	e005      	b.n	800c4fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c4f2:	4b12      	ldr	r3, [pc, #72]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f6:	4a11      	ldr	r2, [pc, #68]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c4fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a0e      	ldr	r2, [pc, #56]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c50a:	f7fa f949 	bl	80067a0 <HAL_GetTick>
 800c50e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c510:	e008      	b.n	800c524 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c512:	f7fa f945 	bl	80067a0 <HAL_GetTick>
 800c516:	4602      	mov	r2, r0
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	d901      	bls.n	800c524 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c520:	2303      	movs	r3, #3
 800c522:	e006      	b.n	800c532 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c524:	4b05      	ldr	r3, [pc, #20]	; (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0f0      	beq.n	800c512 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c530:	7bfb      	ldrb	r3, [r7, #15]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	58024400 	.word	0x58024400
 800c540:	ffff0007 	.word	0xffff0007

0800c544 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e0f1      	b.n	800c73a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a78      	ldr	r2, [pc, #480]	; (800c744 <HAL_SPI_Init+0x200>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d00f      	beq.n	800c586 <HAL_SPI_Init+0x42>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a77      	ldr	r2, [pc, #476]	; (800c748 <HAL_SPI_Init+0x204>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d00a      	beq.n	800c586 <HAL_SPI_Init+0x42>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a75      	ldr	r2, [pc, #468]	; (800c74c <HAL_SPI_Init+0x208>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d005      	beq.n	800c586 <HAL_SPI_Init+0x42>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	2b0f      	cmp	r3, #15
 800c580:	d901      	bls.n	800c586 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e0d9      	b.n	800c73a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f8e2 	bl	800c750 <SPI_GetPacketSize>
 800c58c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a6c      	ldr	r2, [pc, #432]	; (800c744 <HAL_SPI_Init+0x200>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00c      	beq.n	800c5b2 <HAL_SPI_Init+0x6e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a6a      	ldr	r2, [pc, #424]	; (800c748 <HAL_SPI_Init+0x204>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d007      	beq.n	800c5b2 <HAL_SPI_Init+0x6e>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a69      	ldr	r2, [pc, #420]	; (800c74c <HAL_SPI_Init+0x208>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d002      	beq.n	800c5b2 <HAL_SPI_Init+0x6e>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b08      	cmp	r3, #8
 800c5b0:	d811      	bhi.n	800c5d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c5b6:	4a63      	ldr	r2, [pc, #396]	; (800c744 <HAL_SPI_Init+0x200>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d009      	beq.n	800c5d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a61      	ldr	r2, [pc, #388]	; (800c748 <HAL_SPI_Init+0x204>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d004      	beq.n	800c5d0 <HAL_SPI_Init+0x8c>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a60      	ldr	r2, [pc, #384]	; (800c74c <HAL_SPI_Init+0x208>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d104      	bne.n	800c5da <HAL_SPI_Init+0x96>
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b10      	cmp	r3, #16
 800c5d4:	d901      	bls.n	800c5da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e0af      	b.n	800c73a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7f8 fa92 	bl	8004b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2202      	movs	r2, #2
 800c5f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f022 0201 	bic.w	r2, r2, #1
 800c60a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c616:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c620:	d119      	bne.n	800c656 <HAL_SPI_Init+0x112>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c62a:	d103      	bne.n	800c634 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c630:	2b00      	cmp	r3, #0
 800c632:	d008      	beq.n	800c646 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10c      	bne.n	800c656 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c644:	d107      	bne.n	800c656 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c654:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69da      	ldr	r2, [r3, #28]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	431a      	orrs	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c668:	ea42 0103 	orr.w	r1, r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68da      	ldr	r2, [r3, #12]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	430a      	orrs	r2, r1
 800c676:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c680:	431a      	orrs	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	431a      	orrs	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	699b      	ldr	r3, [r3, #24]
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	431a      	orrs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	431a      	orrs	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	431a      	orrs	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6b6:	ea42 0103 	orr.w	r1, r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d113      	bne.n	800c6f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c6f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f022 0201 	bic.w	r2, r2, #1
 800c704:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00a      	beq.n	800c728 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	430a      	orrs	r2, r1
 800c726:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	40013000 	.word	0x40013000
 800c748:	40003800 	.word	0x40003800
 800c74c:	40003c00 	.word	0x40003c00

0800c750 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75c:	095b      	lsrs	r3, r3, #5
 800c75e:	3301      	adds	r3, #1
 800c760:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	3301      	adds	r3, #1
 800c768:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	3307      	adds	r3, #7
 800c76e:	08db      	lsrs	r3, r3, #3
 800c770:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	fb02 f303 	mul.w	r3, r2, r3
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	e049      	b.n	800c82c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d106      	bne.n	800c7b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7f9 f8cf 	bl	8005950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2202      	movs	r2, #2
 800c7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f000 fd9f 	bl	800d308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b01      	cmp	r3, #1
 800c846:	d001      	beq.n	800c84c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	e054      	b.n	800c8f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2202      	movs	r2, #2
 800c850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f042 0201 	orr.w	r2, r2, #1
 800c862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a26      	ldr	r2, [pc, #152]	; (800c904 <HAL_TIM_Base_Start_IT+0xd0>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d022      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c876:	d01d      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a22      	ldr	r2, [pc, #136]	; (800c908 <HAL_TIM_Base_Start_IT+0xd4>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d018      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a21      	ldr	r2, [pc, #132]	; (800c90c <HAL_TIM_Base_Start_IT+0xd8>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d013      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a1f      	ldr	r2, [pc, #124]	; (800c910 <HAL_TIM_Base_Start_IT+0xdc>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d00e      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a1e      	ldr	r2, [pc, #120]	; (800c914 <HAL_TIM_Base_Start_IT+0xe0>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d009      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a1c      	ldr	r2, [pc, #112]	; (800c918 <HAL_TIM_Base_Start_IT+0xe4>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d004      	beq.n	800c8b4 <HAL_TIM_Base_Start_IT+0x80>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a1b      	ldr	r2, [pc, #108]	; (800c91c <HAL_TIM_Base_Start_IT+0xe8>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d115      	bne.n	800c8e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689a      	ldr	r2, [r3, #8]
 800c8ba:	4b19      	ldr	r3, [pc, #100]	; (800c920 <HAL_TIM_Base_Start_IT+0xec>)
 800c8bc:	4013      	ands	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2b06      	cmp	r3, #6
 800c8c4:	d015      	beq.n	800c8f2 <HAL_TIM_Base_Start_IT+0xbe>
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8cc:	d011      	beq.n	800c8f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f042 0201 	orr.w	r2, r2, #1
 800c8dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8de:	e008      	b.n	800c8f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f042 0201 	orr.w	r2, r2, #1
 800c8ee:	601a      	str	r2, [r3, #0]
 800c8f0:	e000      	b.n	800c8f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	40010000 	.word	0x40010000
 800c908:	40000400 	.word	0x40000400
 800c90c:	40000800 	.word	0x40000800
 800c910:	40000c00 	.word	0x40000c00
 800c914:	40010400 	.word	0x40010400
 800c918:	40001800 	.word	0x40001800
 800c91c:	40014000 	.word	0x40014000
 800c920:	00010007 	.word	0x00010007

0800c924 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f022 0201 	bic.w	r2, r2, #1
 800c93a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6a1a      	ldr	r2, [r3, #32]
 800c942:	f241 1311 	movw	r3, #4369	; 0x1111
 800c946:	4013      	ands	r3, r2
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10f      	bne.n	800c96c <HAL_TIM_Base_Stop_IT+0x48>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6a1a      	ldr	r2, [r3, #32]
 800c952:	f240 4344 	movw	r3, #1092	; 0x444
 800c956:	4013      	ands	r3, r2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d107      	bne.n	800c96c <HAL_TIM_Base_Stop_IT+0x48>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f022 0201 	bic.w	r2, r2, #1
 800c96a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	e049      	b.n	800ca28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d106      	bne.n	800c9ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f841 	bl	800ca30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	4619      	mov	r1, r3
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	f000 fca1 	bl	800d308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2201      	movs	r2, #1
 800ca22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d109      	bne.n	800ca68 <HAL_TIM_PWM_Start+0x24>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	bf14      	ite	ne
 800ca60:	2301      	movne	r3, #1
 800ca62:	2300      	moveq	r3, #0
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	e03c      	b.n	800cae2 <HAL_TIM_PWM_Start+0x9e>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b04      	cmp	r3, #4
 800ca6c:	d109      	bne.n	800ca82 <HAL_TIM_PWM_Start+0x3e>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	bf14      	ite	ne
 800ca7a:	2301      	movne	r3, #1
 800ca7c:	2300      	moveq	r3, #0
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	e02f      	b.n	800cae2 <HAL_TIM_PWM_Start+0x9e>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d109      	bne.n	800ca9c <HAL_TIM_PWM_Start+0x58>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	bf14      	ite	ne
 800ca94:	2301      	movne	r3, #1
 800ca96:	2300      	moveq	r3, #0
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	e022      	b.n	800cae2 <HAL_TIM_PWM_Start+0x9e>
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b0c      	cmp	r3, #12
 800caa0:	d109      	bne.n	800cab6 <HAL_TIM_PWM_Start+0x72>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b01      	cmp	r3, #1
 800caac:	bf14      	ite	ne
 800caae:	2301      	movne	r3, #1
 800cab0:	2300      	moveq	r3, #0
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	e015      	b.n	800cae2 <HAL_TIM_PWM_Start+0x9e>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	2b10      	cmp	r3, #16
 800caba:	d109      	bne.n	800cad0 <HAL_TIM_PWM_Start+0x8c>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	bf14      	ite	ne
 800cac8:	2301      	movne	r3, #1
 800caca:	2300      	moveq	r3, #0
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	e008      	b.n	800cae2 <HAL_TIM_PWM_Start+0x9e>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b01      	cmp	r3, #1
 800cada:	bf14      	ite	ne
 800cadc:	2301      	movne	r3, #1
 800cade:	2300      	moveq	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e0a1      	b.n	800cc2e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d104      	bne.n	800cafa <HAL_TIM_PWM_Start+0xb6>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2202      	movs	r2, #2
 800caf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caf8:	e023      	b.n	800cb42 <HAL_TIM_PWM_Start+0xfe>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d104      	bne.n	800cb0a <HAL_TIM_PWM_Start+0xc6>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb08:	e01b      	b.n	800cb42 <HAL_TIM_PWM_Start+0xfe>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d104      	bne.n	800cb1a <HAL_TIM_PWM_Start+0xd6>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb18:	e013      	b.n	800cb42 <HAL_TIM_PWM_Start+0xfe>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b0c      	cmp	r3, #12
 800cb1e:	d104      	bne.n	800cb2a <HAL_TIM_PWM_Start+0xe6>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb28:	e00b      	b.n	800cb42 <HAL_TIM_PWM_Start+0xfe>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	2b10      	cmp	r3, #16
 800cb2e:	d104      	bne.n	800cb3a <HAL_TIM_PWM_Start+0xf6>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb38:	e003      	b.n	800cb42 <HAL_TIM_PWM_Start+0xfe>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2201      	movs	r2, #1
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 ffea 	bl	800db24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a38      	ldr	r2, [pc, #224]	; (800cc38 <HAL_TIM_PWM_Start+0x1f4>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d013      	beq.n	800cb82 <HAL_TIM_PWM_Start+0x13e>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a37      	ldr	r2, [pc, #220]	; (800cc3c <HAL_TIM_PWM_Start+0x1f8>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d00e      	beq.n	800cb82 <HAL_TIM_PWM_Start+0x13e>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a35      	ldr	r2, [pc, #212]	; (800cc40 <HAL_TIM_PWM_Start+0x1fc>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d009      	beq.n	800cb82 <HAL_TIM_PWM_Start+0x13e>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a34      	ldr	r2, [pc, #208]	; (800cc44 <HAL_TIM_PWM_Start+0x200>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d004      	beq.n	800cb82 <HAL_TIM_PWM_Start+0x13e>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a32      	ldr	r2, [pc, #200]	; (800cc48 <HAL_TIM_PWM_Start+0x204>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d101      	bne.n	800cb86 <HAL_TIM_PWM_Start+0x142>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e000      	b.n	800cb88 <HAL_TIM_PWM_Start+0x144>
 800cb86:	2300      	movs	r3, #0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d007      	beq.n	800cb9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a25      	ldr	r2, [pc, #148]	; (800cc38 <HAL_TIM_PWM_Start+0x1f4>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d022      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbae:	d01d      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a25      	ldr	r2, [pc, #148]	; (800cc4c <HAL_TIM_PWM_Start+0x208>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d018      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a24      	ldr	r2, [pc, #144]	; (800cc50 <HAL_TIM_PWM_Start+0x20c>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d013      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a22      	ldr	r2, [pc, #136]	; (800cc54 <HAL_TIM_PWM_Start+0x210>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d00e      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a1a      	ldr	r2, [pc, #104]	; (800cc3c <HAL_TIM_PWM_Start+0x1f8>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d009      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a1e      	ldr	r2, [pc, #120]	; (800cc58 <HAL_TIM_PWM_Start+0x214>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d004      	beq.n	800cbec <HAL_TIM_PWM_Start+0x1a8>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <HAL_TIM_PWM_Start+0x1fc>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d115      	bne.n	800cc18 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689a      	ldr	r2, [r3, #8]
 800cbf2:	4b1a      	ldr	r3, [pc, #104]	; (800cc5c <HAL_TIM_PWM_Start+0x218>)
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2b06      	cmp	r3, #6
 800cbfc:	d015      	beq.n	800cc2a <HAL_TIM_PWM_Start+0x1e6>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc04:	d011      	beq.n	800cc2a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f042 0201 	orr.w	r2, r2, #1
 800cc14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc16:	e008      	b.n	800cc2a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f042 0201 	orr.w	r2, r2, #1
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	e000      	b.n	800cc2c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	40010000 	.word	0x40010000
 800cc3c:	40010400 	.word	0x40010400
 800cc40:	40014000 	.word	0x40014000
 800cc44:	40014400 	.word	0x40014400
 800cc48:	40014800 	.word	0x40014800
 800cc4c:	40000400 	.word	0x40000400
 800cc50:	40000800 	.word	0x40000800
 800cc54:	40000c00 	.word	0x40000c00
 800cc58:	40001800 	.word	0x40001800
 800cc5c:	00010007 	.word	0x00010007

0800cc60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d122      	bne.n	800ccbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	f003 0302 	and.w	r3, r3, #2
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d11b      	bne.n	800ccbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f06f 0202 	mvn.w	r2, #2
 800cc8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fb12 	bl	800d2cc <HAL_TIM_IC_CaptureCallback>
 800cca8:	e005      	b.n	800ccb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fb04 	bl	800d2b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fb15 	bl	800d2e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d122      	bne.n	800cd10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f003 0304 	and.w	r3, r3, #4
 800ccd4:	2b04      	cmp	r3, #4
 800ccd6:	d11b      	bne.n	800cd10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f06f 0204 	mvn.w	r2, #4
 800cce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2202      	movs	r2, #2
 800cce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d003      	beq.n	800ccfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fae8 	bl	800d2cc <HAL_TIM_IC_CaptureCallback>
 800ccfc:	e005      	b.n	800cd0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fada 	bl	800d2b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 faeb 	bl	800d2e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	f003 0308 	and.w	r3, r3, #8
 800cd1a:	2b08      	cmp	r3, #8
 800cd1c:	d122      	bne.n	800cd64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	f003 0308 	and.w	r3, r3, #8
 800cd28:	2b08      	cmp	r3, #8
 800cd2a:	d11b      	bne.n	800cd64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f06f 0208 	mvn.w	r2, #8
 800cd34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2204      	movs	r2, #4
 800cd3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	69db      	ldr	r3, [r3, #28]
 800cd42:	f003 0303 	and.w	r3, r3, #3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fabe 	bl	800d2cc <HAL_TIM_IC_CaptureCallback>
 800cd50:	e005      	b.n	800cd5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fab0 	bl	800d2b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 fac1 	bl	800d2e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	f003 0310 	and.w	r3, r3, #16
 800cd6e:	2b10      	cmp	r3, #16
 800cd70:	d122      	bne.n	800cdb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	f003 0310 	and.w	r3, r3, #16
 800cd7c:	2b10      	cmp	r3, #16
 800cd7e:	d11b      	bne.n	800cdb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f06f 0210 	mvn.w	r2, #16
 800cd88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2208      	movs	r2, #8
 800cd8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fa94 	bl	800d2cc <HAL_TIM_IC_CaptureCallback>
 800cda4:	e005      	b.n	800cdb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fa86 	bl	800d2b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fa97 	bl	800d2e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d10e      	bne.n	800cde4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	f003 0301 	and.w	r3, r3, #1
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d107      	bne.n	800cde4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f06f 0201 	mvn.w	r2, #1
 800cddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7f6 fb8e 	bl	8003500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdee:	2b80      	cmp	r3, #128	; 0x80
 800cdf0:	d10e      	bne.n	800ce10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdfc:	2b80      	cmp	r3, #128	; 0x80
 800cdfe:	d107      	bne.n	800ce10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 ffc6 	bl	800dd9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce1e:	d10e      	bne.n	800ce3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce2a:	2b80      	cmp	r3, #128	; 0x80
 800ce2c:	d107      	bne.n	800ce3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ce36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 ffb9 	bl	800ddb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce48:	2b40      	cmp	r3, #64	; 0x40
 800ce4a:	d10e      	bne.n	800ce6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce56:	2b40      	cmp	r3, #64	; 0x40
 800ce58:	d107      	bne.n	800ce6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fa45 	bl	800d2f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	f003 0320 	and.w	r3, r3, #32
 800ce74:	2b20      	cmp	r3, #32
 800ce76:	d10e      	bne.n	800ce96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	f003 0320 	and.w	r3, r3, #32
 800ce82:	2b20      	cmp	r3, #32
 800ce84:	d107      	bne.n	800ce96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f06f 0220 	mvn.w	r2, #32
 800ce8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 ff79 	bl	800dd88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
	...

0800cea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d101      	bne.n	800cebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ceba:	2302      	movs	r3, #2
 800cebc:	e0ff      	b.n	800d0be <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b14      	cmp	r3, #20
 800ceca:	f200 80f0 	bhi.w	800d0ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cece:	a201      	add	r2, pc, #4	; (adr r2, 800ced4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ced0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced4:	0800cf29 	.word	0x0800cf29
 800ced8:	0800d0af 	.word	0x0800d0af
 800cedc:	0800d0af 	.word	0x0800d0af
 800cee0:	0800d0af 	.word	0x0800d0af
 800cee4:	0800cf69 	.word	0x0800cf69
 800cee8:	0800d0af 	.word	0x0800d0af
 800ceec:	0800d0af 	.word	0x0800d0af
 800cef0:	0800d0af 	.word	0x0800d0af
 800cef4:	0800cfab 	.word	0x0800cfab
 800cef8:	0800d0af 	.word	0x0800d0af
 800cefc:	0800d0af 	.word	0x0800d0af
 800cf00:	0800d0af 	.word	0x0800d0af
 800cf04:	0800cfeb 	.word	0x0800cfeb
 800cf08:	0800d0af 	.word	0x0800d0af
 800cf0c:	0800d0af 	.word	0x0800d0af
 800cf10:	0800d0af 	.word	0x0800d0af
 800cf14:	0800d02d 	.word	0x0800d02d
 800cf18:	0800d0af 	.word	0x0800d0af
 800cf1c:	0800d0af 	.word	0x0800d0af
 800cf20:	0800d0af 	.word	0x0800d0af
 800cf24:	0800d06d 	.word	0x0800d06d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 fa84 	bl	800d43c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f042 0208 	orr.w	r2, r2, #8
 800cf42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	699a      	ldr	r2, [r3, #24]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f022 0204 	bic.w	r2, r2, #4
 800cf52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6999      	ldr	r1, [r3, #24]
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	691a      	ldr	r2, [r3, #16]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	619a      	str	r2, [r3, #24]
      break;
 800cf66:	e0a5      	b.n	800d0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68b9      	ldr	r1, [r7, #8]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 faf4 	bl	800d55c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	699a      	ldr	r2, [r3, #24]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	699a      	ldr	r2, [r3, #24]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6999      	ldr	r1, [r3, #24]
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	021a      	lsls	r2, r3, #8
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	619a      	str	r2, [r3, #24]
      break;
 800cfa8:	e084      	b.n	800d0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68b9      	ldr	r1, [r7, #8]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 fb5d 	bl	800d670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69da      	ldr	r2, [r3, #28]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f042 0208 	orr.w	r2, r2, #8
 800cfc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69da      	ldr	r2, [r3, #28]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f022 0204 	bic.w	r2, r2, #4
 800cfd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	69d9      	ldr	r1, [r3, #28]
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	691a      	ldr	r2, [r3, #16]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	430a      	orrs	r2, r1
 800cfe6:	61da      	str	r2, [r3, #28]
      break;
 800cfe8:	e064      	b.n	800d0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68b9      	ldr	r1, [r7, #8]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 fbc5 	bl	800d780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	69da      	ldr	r2, [r3, #28]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	69da      	ldr	r2, [r3, #28]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	69d9      	ldr	r1, [r3, #28]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	021a      	lsls	r2, r3, #8
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	430a      	orrs	r2, r1
 800d028:	61da      	str	r2, [r3, #28]
      break;
 800d02a:	e043      	b.n	800d0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68b9      	ldr	r1, [r7, #8]
 800d032:	4618      	mov	r0, r3
 800d034:	f000 fc0e 	bl	800d854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f042 0208 	orr.w	r2, r2, #8
 800d046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f022 0204 	bic.w	r2, r2, #4
 800d056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	691a      	ldr	r2, [r3, #16]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	430a      	orrs	r2, r1
 800d068:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d06a:	e023      	b.n	800d0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68b9      	ldr	r1, [r7, #8]
 800d072:	4618      	mov	r0, r3
 800d074:	f000 fc52 	bl	800d91c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	691b      	ldr	r3, [r3, #16]
 800d0a2:	021a      	lsls	r2, r3, #8
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	430a      	orrs	r2, r1
 800d0aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d0ac:	e002      	b.n	800d0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	75fb      	strb	r3, [r7, #23]
      break;
 800d0b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop

0800d0c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d101      	bne.n	800d0e4 <HAL_TIM_ConfigClockSource+0x1c>
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e0dc      	b.n	800d29e <HAL_TIM_ConfigClockSource+0x1d6>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	4b6a      	ldr	r3, [pc, #424]	; (800d2a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d100:	4013      	ands	r3, r2
 800d102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d10a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a64      	ldr	r2, [pc, #400]	; (800d2ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	f000 80a9 	beq.w	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d120:	4a62      	ldr	r2, [pc, #392]	; (800d2ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800d122:	4293      	cmp	r3, r2
 800d124:	f200 80ae 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d128:	4a61      	ldr	r2, [pc, #388]	; (800d2b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	f000 80a1 	beq.w	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d130:	4a5f      	ldr	r2, [pc, #380]	; (800d2b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d132:	4293      	cmp	r3, r2
 800d134:	f200 80a6 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d138:	4a5e      	ldr	r2, [pc, #376]	; (800d2b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	f000 8099 	beq.w	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d140:	4a5c      	ldr	r2, [pc, #368]	; (800d2b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d142:	4293      	cmp	r3, r2
 800d144:	f200 809e 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d148:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d14c:	f000 8091 	beq.w	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d150:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d154:	f200 8096 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d15c:	f000 8089 	beq.w	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d164:	f200 808e 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d16c:	d03e      	beq.n	800d1ec <HAL_TIM_ConfigClockSource+0x124>
 800d16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d172:	f200 8087 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d17a:	f000 8086 	beq.w	800d28a <HAL_TIM_ConfigClockSource+0x1c2>
 800d17e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d182:	d87f      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d184:	2b70      	cmp	r3, #112	; 0x70
 800d186:	d01a      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0xf6>
 800d188:	2b70      	cmp	r3, #112	; 0x70
 800d18a:	d87b      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d18c:	2b60      	cmp	r3, #96	; 0x60
 800d18e:	d050      	beq.n	800d232 <HAL_TIM_ConfigClockSource+0x16a>
 800d190:	2b60      	cmp	r3, #96	; 0x60
 800d192:	d877      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d194:	2b50      	cmp	r3, #80	; 0x50
 800d196:	d03c      	beq.n	800d212 <HAL_TIM_ConfigClockSource+0x14a>
 800d198:	2b50      	cmp	r3, #80	; 0x50
 800d19a:	d873      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d19c:	2b40      	cmp	r3, #64	; 0x40
 800d19e:	d058      	beq.n	800d252 <HAL_TIM_ConfigClockSource+0x18a>
 800d1a0:	2b40      	cmp	r3, #64	; 0x40
 800d1a2:	d86f      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d1a4:	2b30      	cmp	r3, #48	; 0x30
 800d1a6:	d064      	beq.n	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d1a8:	2b30      	cmp	r3, #48	; 0x30
 800d1aa:	d86b      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d1ac:	2b20      	cmp	r3, #32
 800d1ae:	d060      	beq.n	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d1b0:	2b20      	cmp	r3, #32
 800d1b2:	d867      	bhi.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d05c      	beq.n	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d1b8:	2b10      	cmp	r3, #16
 800d1ba:	d05a      	beq.n	800d272 <HAL_TIM_ConfigClockSource+0x1aa>
 800d1bc:	e062      	b.n	800d284 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6818      	ldr	r0, [r3, #0]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	6899      	ldr	r1, [r3, #8]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f000 fc89 	bl	800dae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d1e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	609a      	str	r2, [r3, #8]
      break;
 800d1ea:	e04f      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6818      	ldr	r0, [r3, #0]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	6899      	ldr	r1, [r3, #8]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	f000 fc72 	bl	800dae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	689a      	ldr	r2, [r3, #8]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d20e:	609a      	str	r2, [r3, #8]
      break;
 800d210:	e03c      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6818      	ldr	r0, [r3, #0]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	6859      	ldr	r1, [r3, #4]
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	461a      	mov	r2, r3
 800d220:	f000 fbe2 	bl	800d9e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2150      	movs	r1, #80	; 0x50
 800d22a:	4618      	mov	r0, r3
 800d22c:	f000 fc3c 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d230:	e02c      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	6859      	ldr	r1, [r3, #4]
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	461a      	mov	r2, r3
 800d240:	f000 fc01 	bl	800da46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2160      	movs	r1, #96	; 0x60
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fc2c 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d250:	e01c      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6818      	ldr	r0, [r3, #0]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	6859      	ldr	r1, [r3, #4]
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	461a      	mov	r2, r3
 800d260:	f000 fbc2 	bl	800d9e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2140      	movs	r1, #64	; 0x40
 800d26a:	4618      	mov	r0, r3
 800d26c:	f000 fc1c 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d270:	e00c      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4619      	mov	r1, r3
 800d27c:	4610      	mov	r0, r2
 800d27e:	f000 fc13 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d282:	e003      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	73fb      	strb	r3, [r7, #15]
      break;
 800d288:	e000      	b.n	800d28c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d28a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	ffceff88 	.word	0xffceff88
 800d2ac:	00100040 	.word	0x00100040
 800d2b0:	00100030 	.word	0x00100030
 800d2b4:	00100020 	.word	0x00100020

0800d2b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2fc:	bf00      	nop
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a40      	ldr	r2, [pc, #256]	; (800d41c <TIM_Base_SetConfig+0x114>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d013      	beq.n	800d348 <TIM_Base_SetConfig+0x40>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d326:	d00f      	beq.n	800d348 <TIM_Base_SetConfig+0x40>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a3d      	ldr	r2, [pc, #244]	; (800d420 <TIM_Base_SetConfig+0x118>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d00b      	beq.n	800d348 <TIM_Base_SetConfig+0x40>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a3c      	ldr	r2, [pc, #240]	; (800d424 <TIM_Base_SetConfig+0x11c>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d007      	beq.n	800d348 <TIM_Base_SetConfig+0x40>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a3b      	ldr	r2, [pc, #236]	; (800d428 <TIM_Base_SetConfig+0x120>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d003      	beq.n	800d348 <TIM_Base_SetConfig+0x40>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a3a      	ldr	r2, [pc, #232]	; (800d42c <TIM_Base_SetConfig+0x124>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d108      	bne.n	800d35a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d34e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	4313      	orrs	r3, r2
 800d358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a2f      	ldr	r2, [pc, #188]	; (800d41c <TIM_Base_SetConfig+0x114>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d01f      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d368:	d01b      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a2c      	ldr	r2, [pc, #176]	; (800d420 <TIM_Base_SetConfig+0x118>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d017      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a2b      	ldr	r2, [pc, #172]	; (800d424 <TIM_Base_SetConfig+0x11c>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d013      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a2a      	ldr	r2, [pc, #168]	; (800d428 <TIM_Base_SetConfig+0x120>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d00f      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a29      	ldr	r2, [pc, #164]	; (800d42c <TIM_Base_SetConfig+0x124>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d00b      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4a28      	ldr	r2, [pc, #160]	; (800d430 <TIM_Base_SetConfig+0x128>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d007      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a27      	ldr	r2, [pc, #156]	; (800d434 <TIM_Base_SetConfig+0x12c>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d003      	beq.n	800d3a2 <TIM_Base_SetConfig+0x9a>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a26      	ldr	r2, [pc, #152]	; (800d438 <TIM_Base_SetConfig+0x130>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d108      	bne.n	800d3b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	689a      	ldr	r2, [r3, #8]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4a10      	ldr	r2, [pc, #64]	; (800d41c <TIM_Base_SetConfig+0x114>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d00f      	beq.n	800d400 <TIM_Base_SetConfig+0xf8>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a12      	ldr	r2, [pc, #72]	; (800d42c <TIM_Base_SetConfig+0x124>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d00b      	beq.n	800d400 <TIM_Base_SetConfig+0xf8>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a11      	ldr	r2, [pc, #68]	; (800d430 <TIM_Base_SetConfig+0x128>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d007      	beq.n	800d400 <TIM_Base_SetConfig+0xf8>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a10      	ldr	r2, [pc, #64]	; (800d434 <TIM_Base_SetConfig+0x12c>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d003      	beq.n	800d400 <TIM_Base_SetConfig+0xf8>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a0f      	ldr	r2, [pc, #60]	; (800d438 <TIM_Base_SetConfig+0x130>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d103      	bne.n	800d408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	691a      	ldr	r2, [r3, #16]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	615a      	str	r2, [r3, #20]
}
 800d40e:	bf00      	nop
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	40010000 	.word	0x40010000
 800d420:	40000400 	.word	0x40000400
 800d424:	40000800 	.word	0x40000800
 800d428:	40000c00 	.word	0x40000c00
 800d42c:	40010400 	.word	0x40010400
 800d430:	40014000 	.word	0x40014000
 800d434:	40014400 	.word	0x40014400
 800d438:	40014800 	.word	0x40014800

0800d43c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	f023 0201 	bic.w	r2, r3, #1
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	4b37      	ldr	r3, [pc, #220]	; (800d544 <TIM_OC1_SetConfig+0x108>)
 800d468:	4013      	ands	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f023 0303 	bic.w	r3, r3, #3
 800d472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f023 0302 	bic.w	r3, r3, #2
 800d484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	4313      	orrs	r3, r2
 800d48e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a2d      	ldr	r2, [pc, #180]	; (800d548 <TIM_OC1_SetConfig+0x10c>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d00f      	beq.n	800d4b8 <TIM_OC1_SetConfig+0x7c>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a2c      	ldr	r2, [pc, #176]	; (800d54c <TIM_OC1_SetConfig+0x110>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d00b      	beq.n	800d4b8 <TIM_OC1_SetConfig+0x7c>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4a2b      	ldr	r2, [pc, #172]	; (800d550 <TIM_OC1_SetConfig+0x114>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d007      	beq.n	800d4b8 <TIM_OC1_SetConfig+0x7c>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a2a      	ldr	r2, [pc, #168]	; (800d554 <TIM_OC1_SetConfig+0x118>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d003      	beq.n	800d4b8 <TIM_OC1_SetConfig+0x7c>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a29      	ldr	r2, [pc, #164]	; (800d558 <TIM_OC1_SetConfig+0x11c>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d10c      	bne.n	800d4d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f023 0308 	bic.w	r3, r3, #8
 800d4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f023 0304 	bic.w	r3, r3, #4
 800d4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a1c      	ldr	r2, [pc, #112]	; (800d548 <TIM_OC1_SetConfig+0x10c>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d00f      	beq.n	800d4fa <TIM_OC1_SetConfig+0xbe>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a1b      	ldr	r2, [pc, #108]	; (800d54c <TIM_OC1_SetConfig+0x110>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d00b      	beq.n	800d4fa <TIM_OC1_SetConfig+0xbe>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a1a      	ldr	r2, [pc, #104]	; (800d550 <TIM_OC1_SetConfig+0x114>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d007      	beq.n	800d4fa <TIM_OC1_SetConfig+0xbe>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a19      	ldr	r2, [pc, #100]	; (800d554 <TIM_OC1_SetConfig+0x118>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d003      	beq.n	800d4fa <TIM_OC1_SetConfig+0xbe>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a18      	ldr	r2, [pc, #96]	; (800d558 <TIM_OC1_SetConfig+0x11c>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d111      	bne.n	800d51e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	4313      	orrs	r3, r2
 800d512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	693a      	ldr	r2, [r7, #16]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	697a      	ldr	r2, [r7, #20]
 800d536:	621a      	str	r2, [r3, #32]
}
 800d538:	bf00      	nop
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	fffeff8f 	.word	0xfffeff8f
 800d548:	40010000 	.word	0x40010000
 800d54c:	40010400 	.word	0x40010400
 800d550:	40014000 	.word	0x40014000
 800d554:	40014400 	.word	0x40014400
 800d558:	40014800 	.word	0x40014800

0800d55c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b087      	sub	sp, #28
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a1b      	ldr	r3, [r3, #32]
 800d56a:	f023 0210 	bic.w	r2, r3, #16
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	4b34      	ldr	r3, [pc, #208]	; (800d658 <TIM_OC2_SetConfig+0xfc>)
 800d588:	4013      	ands	r3, r2
 800d58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	f023 0320 	bic.w	r3, r3, #32
 800d5a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	011b      	lsls	r3, r3, #4
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a29      	ldr	r2, [pc, #164]	; (800d65c <TIM_OC2_SetConfig+0x100>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d003      	beq.n	800d5c4 <TIM_OC2_SetConfig+0x68>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a28      	ldr	r2, [pc, #160]	; (800d660 <TIM_OC2_SetConfig+0x104>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d10d      	bne.n	800d5e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	011b      	lsls	r3, r3, #4
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4a1e      	ldr	r2, [pc, #120]	; (800d65c <TIM_OC2_SetConfig+0x100>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d00f      	beq.n	800d608 <TIM_OC2_SetConfig+0xac>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a1d      	ldr	r2, [pc, #116]	; (800d660 <TIM_OC2_SetConfig+0x104>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d00b      	beq.n	800d608 <TIM_OC2_SetConfig+0xac>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a1c      	ldr	r2, [pc, #112]	; (800d664 <TIM_OC2_SetConfig+0x108>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d007      	beq.n	800d608 <TIM_OC2_SetConfig+0xac>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4a1b      	ldr	r2, [pc, #108]	; (800d668 <TIM_OC2_SetConfig+0x10c>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d003      	beq.n	800d608 <TIM_OC2_SetConfig+0xac>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4a1a      	ldr	r2, [pc, #104]	; (800d66c <TIM_OC2_SetConfig+0x110>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d113      	bne.n	800d630 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d60e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	4313      	orrs	r3, r2
 800d622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	699b      	ldr	r3, [r3, #24]
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	693a      	ldr	r2, [r7, #16]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	621a      	str	r2, [r3, #32]
}
 800d64a:	bf00      	nop
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	feff8fff 	.word	0xfeff8fff
 800d65c:	40010000 	.word	0x40010000
 800d660:	40010400 	.word	0x40010400
 800d664:	40014000 	.word	0x40014000
 800d668:	40014400 	.word	0x40014400
 800d66c:	40014800 	.word	0x40014800

0800d670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a1b      	ldr	r3, [r3, #32]
 800d67e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	4b33      	ldr	r3, [pc, #204]	; (800d768 <TIM_OC3_SetConfig+0xf8>)
 800d69c:	4013      	ands	r3, r2
 800d69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f023 0303 	bic.w	r3, r3, #3
 800d6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	021b      	lsls	r3, r3, #8
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a28      	ldr	r2, [pc, #160]	; (800d76c <TIM_OC3_SetConfig+0xfc>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d003      	beq.n	800d6d6 <TIM_OC3_SetConfig+0x66>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a27      	ldr	r2, [pc, #156]	; (800d770 <TIM_OC3_SetConfig+0x100>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d10d      	bne.n	800d6f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	021b      	lsls	r3, r3, #8
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a1d      	ldr	r2, [pc, #116]	; (800d76c <TIM_OC3_SetConfig+0xfc>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d00f      	beq.n	800d71a <TIM_OC3_SetConfig+0xaa>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a1c      	ldr	r2, [pc, #112]	; (800d770 <TIM_OC3_SetConfig+0x100>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d00b      	beq.n	800d71a <TIM_OC3_SetConfig+0xaa>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a1b      	ldr	r2, [pc, #108]	; (800d774 <TIM_OC3_SetConfig+0x104>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d007      	beq.n	800d71a <TIM_OC3_SetConfig+0xaa>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a1a      	ldr	r2, [pc, #104]	; (800d778 <TIM_OC3_SetConfig+0x108>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d003      	beq.n	800d71a <TIM_OC3_SetConfig+0xaa>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4a19      	ldr	r2, [pc, #100]	; (800d77c <TIM_OC3_SetConfig+0x10c>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d113      	bne.n	800d742 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	011b      	lsls	r3, r3, #4
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	4313      	orrs	r3, r2
 800d734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	699b      	ldr	r3, [r3, #24]
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	4313      	orrs	r3, r2
 800d740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	621a      	str	r2, [r3, #32]
}
 800d75c:	bf00      	nop
 800d75e:	371c      	adds	r7, #28
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	fffeff8f 	.word	0xfffeff8f
 800d76c:	40010000 	.word	0x40010000
 800d770:	40010400 	.word	0x40010400
 800d774:	40014000 	.word	0x40014000
 800d778:	40014400 	.word	0x40014400
 800d77c:	40014800 	.word	0x40014800

0800d780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d780:	b480      	push	{r7}
 800d782:	b087      	sub	sp, #28
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a1b      	ldr	r3, [r3, #32]
 800d79a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	69db      	ldr	r3, [r3, #28]
 800d7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	4b24      	ldr	r3, [pc, #144]	; (800d83c <TIM_OC4_SetConfig+0xbc>)
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	031b      	lsls	r3, r3, #12
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a19      	ldr	r2, [pc, #100]	; (800d840 <TIM_OC4_SetConfig+0xc0>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d00f      	beq.n	800d800 <TIM_OC4_SetConfig+0x80>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a18      	ldr	r2, [pc, #96]	; (800d844 <TIM_OC4_SetConfig+0xc4>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d00b      	beq.n	800d800 <TIM_OC4_SetConfig+0x80>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a17      	ldr	r2, [pc, #92]	; (800d848 <TIM_OC4_SetConfig+0xc8>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d007      	beq.n	800d800 <TIM_OC4_SetConfig+0x80>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a16      	ldr	r2, [pc, #88]	; (800d84c <TIM_OC4_SetConfig+0xcc>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d003      	beq.n	800d800 <TIM_OC4_SetConfig+0x80>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a15      	ldr	r2, [pc, #84]	; (800d850 <TIM_OC4_SetConfig+0xd0>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d109      	bne.n	800d814 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	019b      	lsls	r3, r3, #6
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	4313      	orrs	r3, r2
 800d812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	621a      	str	r2, [r3, #32]
}
 800d82e:	bf00      	nop
 800d830:	371c      	adds	r7, #28
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	feff8fff 	.word	0xfeff8fff
 800d840:	40010000 	.word	0x40010000
 800d844:	40010400 	.word	0x40010400
 800d848:	40014000 	.word	0x40014000
 800d84c:	40014400 	.word	0x40014400
 800d850:	40014800 	.word	0x40014800

0800d854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d854:	b480      	push	{r7}
 800d856:	b087      	sub	sp, #28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4b21      	ldr	r3, [pc, #132]	; (800d904 <TIM_OC5_SetConfig+0xb0>)
 800d880:	4013      	ands	r3, r2
 800d882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	041b      	lsls	r3, r3, #16
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a18      	ldr	r2, [pc, #96]	; (800d908 <TIM_OC5_SetConfig+0xb4>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d00f      	beq.n	800d8ca <TIM_OC5_SetConfig+0x76>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a17      	ldr	r2, [pc, #92]	; (800d90c <TIM_OC5_SetConfig+0xb8>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d00b      	beq.n	800d8ca <TIM_OC5_SetConfig+0x76>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a16      	ldr	r2, [pc, #88]	; (800d910 <TIM_OC5_SetConfig+0xbc>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d007      	beq.n	800d8ca <TIM_OC5_SetConfig+0x76>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a15      	ldr	r2, [pc, #84]	; (800d914 <TIM_OC5_SetConfig+0xc0>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d003      	beq.n	800d8ca <TIM_OC5_SetConfig+0x76>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a14      	ldr	r2, [pc, #80]	; (800d918 <TIM_OC5_SetConfig+0xc4>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d109      	bne.n	800d8de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	021b      	lsls	r3, r3, #8
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	697a      	ldr	r2, [r7, #20]
 800d8e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	621a      	str	r2, [r3, #32]
}
 800d8f8:	bf00      	nop
 800d8fa:	371c      	adds	r7, #28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	fffeff8f 	.word	0xfffeff8f
 800d908:	40010000 	.word	0x40010000
 800d90c:	40010400 	.word	0x40010400
 800d910:	40014000 	.word	0x40014000
 800d914:	40014400 	.word	0x40014400
 800d918:	40014800 	.word	0x40014800

0800d91c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b087      	sub	sp, #28
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <TIM_OC6_SetConfig+0xb4>)
 800d948:	4013      	ands	r3, r2
 800d94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	021b      	lsls	r3, r3, #8
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	4313      	orrs	r3, r2
 800d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d95e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	051b      	lsls	r3, r3, #20
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	4313      	orrs	r3, r2
 800d96a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a19      	ldr	r2, [pc, #100]	; (800d9d4 <TIM_OC6_SetConfig+0xb8>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d00f      	beq.n	800d994 <TIM_OC6_SetConfig+0x78>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <TIM_OC6_SetConfig+0xbc>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d00b      	beq.n	800d994 <TIM_OC6_SetConfig+0x78>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a17      	ldr	r2, [pc, #92]	; (800d9dc <TIM_OC6_SetConfig+0xc0>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d007      	beq.n	800d994 <TIM_OC6_SetConfig+0x78>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a16      	ldr	r2, [pc, #88]	; (800d9e0 <TIM_OC6_SetConfig+0xc4>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d003      	beq.n	800d994 <TIM_OC6_SetConfig+0x78>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a15      	ldr	r2, [pc, #84]	; (800d9e4 <TIM_OC6_SetConfig+0xc8>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d109      	bne.n	800d9a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d99a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	695b      	ldr	r3, [r3, #20]
 800d9a0:	029b      	lsls	r3, r3, #10
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	685a      	ldr	r2, [r3, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	693a      	ldr	r2, [r7, #16]
 800d9c0:	621a      	str	r2, [r3, #32]
}
 800d9c2:	bf00      	nop
 800d9c4:	371c      	adds	r7, #28
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	feff8fff 	.word	0xfeff8fff
 800d9d4:	40010000 	.word	0x40010000
 800d9d8:	40010400 	.word	0x40010400
 800d9dc:	40014000 	.word	0x40014000
 800d9e0:	40014400 	.word	0x40014400
 800d9e4:	40014800 	.word	0x40014800

0800d9e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b087      	sub	sp, #28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6a1b      	ldr	r3, [r3, #32]
 800d9f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	f023 0201 	bic.w	r2, r3, #1
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	011b      	lsls	r3, r3, #4
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	4313      	orrs	r3, r2
 800da1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f023 030a 	bic.w	r3, r3, #10
 800da24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	621a      	str	r2, [r3, #32]
}
 800da3a:	bf00      	nop
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da46:	b480      	push	{r7}
 800da48:	b087      	sub	sp, #28
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	60b9      	str	r1, [r7, #8]
 800da50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	f023 0210 	bic.w	r2, r3, #16
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6a1b      	ldr	r3, [r3, #32]
 800da68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	031b      	lsls	r3, r3, #12
 800da76:	697a      	ldr	r2, [r7, #20]
 800da78:	4313      	orrs	r3, r2
 800da7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	011b      	lsls	r3, r3, #4
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	697a      	ldr	r2, [r7, #20]
 800da92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	621a      	str	r2, [r3, #32]
}
 800da9a:	bf00      	nop
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
	...

0800daa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <TIM_ITRx_SetConfig+0x38>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	f043 0307 	orr.w	r3, r3, #7
 800daca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	609a      	str	r2, [r3, #8]
}
 800dad2:	bf00      	nop
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	ffcfff8f 	.word	0xffcfff8f

0800dae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dafe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	021a      	lsls	r2, r3, #8
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	431a      	orrs	r2, r3
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	4313      	orrs	r3, r2
 800db10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	609a      	str	r2, [r3, #8]
}
 800db18:	bf00      	nop
 800db1a:	371c      	adds	r7, #28
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db24:	b480      	push	{r7}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	f003 031f 	and.w	r3, r3, #31
 800db36:	2201      	movs	r2, #1
 800db38:	fa02 f303 	lsl.w	r3, r2, r3
 800db3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6a1a      	ldr	r2, [r3, #32]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	43db      	mvns	r3, r3
 800db46:	401a      	ands	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6a1a      	ldr	r2, [r3, #32]
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f003 031f 	and.w	r3, r3, #31
 800db56:	6879      	ldr	r1, [r7, #4]
 800db58:	fa01 f303 	lsl.w	r3, r1, r3
 800db5c:	431a      	orrs	r2, r3
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	621a      	str	r2, [r3, #32]
}
 800db62:	bf00      	nop
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
	...

0800db70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db80:	2b01      	cmp	r3, #1
 800db82:	d101      	bne.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db84:	2302      	movs	r3, #2
 800db86:	e06d      	b.n	800dc64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2202      	movs	r2, #2
 800db94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a30      	ldr	r2, [pc, #192]	; (800dc70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d004      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a2f      	ldr	r2, [pc, #188]	; (800dc74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d108      	bne.n	800dbce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dbc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a20      	ldr	r2, [pc, #128]	; (800dc70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d022      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbfa:	d01d      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a1d      	ldr	r2, [pc, #116]	; (800dc78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d018      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a1c      	ldr	r2, [pc, #112]	; (800dc7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d013      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a1a      	ldr	r2, [pc, #104]	; (800dc80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00e      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a15      	ldr	r2, [pc, #84]	; (800dc74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d009      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a16      	ldr	r2, [pc, #88]	; (800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d004      	beq.n	800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a15      	ldr	r2, [pc, #84]	; (800dc88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d10c      	bne.n	800dc52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68ba      	ldr	r2, [r7, #8]
 800dc50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	40010000 	.word	0x40010000
 800dc74:	40010400 	.word	0x40010400
 800dc78:	40000400 	.word	0x40000400
 800dc7c:	40000800 	.word	0x40000800
 800dc80:	40000c00 	.word	0x40000c00
 800dc84:	40001800 	.word	0x40001800
 800dc88:	40014000 	.word	0x40014000

0800dc8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc96:	2300      	movs	r3, #0
 800dc98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d101      	bne.n	800dca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dca4:	2302      	movs	r3, #2
 800dca6:	e065      	b.n	800dd74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	695b      	ldr	r3, [r3, #20]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	041b      	lsls	r3, r3, #16
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a16      	ldr	r2, [pc, #88]	; (800dd80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d004      	beq.n	800dd36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a14      	ldr	r2, [pc, #80]	; (800dd84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d115      	bne.n	800dd62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	051b      	lsls	r3, r3, #20
 800dd42:	4313      	orrs	r3, r2
 800dd44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	6a1b      	ldr	r3, [r3, #32]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr
 800dd80:	40010000 	.word	0x40010000
 800dd84:	40010400 	.word	0x40010400

0800dd88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e042      	b.n	800de5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d106      	bne.n	800ddee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f7f8 f939 	bl	8006060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2224      	movs	r2, #36	; 0x24
 800ddf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f022 0201 	bic.w	r2, r2, #1
 800de04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fdf8 	bl	800e9fc <UART_SetConfig>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e022      	b.n	800de5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f001 fb54 	bl	800f4cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	689a      	ldr	r2, [r3, #8]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f042 0201 	orr.w	r2, r2, #1
 800de52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f001 fbdb 	bl	800f610 <UART_CheckIdleState>
 800de5a:	4603      	mov	r3, r0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08a      	sub	sp, #40	; 0x28
 800de68:	af02      	add	r7, sp, #8
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	4613      	mov	r3, r2
 800de72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de7a:	2b20      	cmp	r3, #32
 800de7c:	f040 8083 	bne.w	800df86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <HAL_UART_Transmit+0x28>
 800de86:	88fb      	ldrh	r3, [r7, #6]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	e07b      	b.n	800df88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de96:	2b01      	cmp	r3, #1
 800de98:	d101      	bne.n	800de9e <HAL_UART_Transmit+0x3a>
 800de9a:	2302      	movs	r3, #2
 800de9c:	e074      	b.n	800df88 <HAL_UART_Transmit+0x124>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2221      	movs	r2, #33	; 0x21
 800deb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deb6:	f7f8 fc73 	bl	80067a0 <HAL_GetTick>
 800deba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	88fa      	ldrh	r2, [r7, #6]
 800dec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	88fa      	ldrh	r2, [r7, #6]
 800dec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ded4:	d108      	bne.n	800dee8 <HAL_UART_Transmit+0x84>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d104      	bne.n	800dee8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	e003      	b.n	800def0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800deec:	2300      	movs	r3, #0
 800deee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800def8:	e02c      	b.n	800df54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2200      	movs	r2, #0
 800df02:	2180      	movs	r1, #128	; 0x80
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f001 fbce 	bl	800f6a6 <UART_WaitOnFlagUntilTimeout>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800df10:	2303      	movs	r3, #3
 800df12:	e039      	b.n	800df88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10b      	bne.n	800df32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	461a      	mov	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	3302      	adds	r3, #2
 800df2e:	61bb      	str	r3, [r7, #24]
 800df30:	e007      	b.n	800df42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	781a      	ldrb	r2, [r3, #0]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	3301      	adds	r3, #1
 800df40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df48:	b29b      	uxth	r3, r3
 800df4a:	3b01      	subs	r3, #1
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1cc      	bne.n	800defa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	2200      	movs	r2, #0
 800df68:	2140      	movs	r1, #64	; 0x40
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f001 fb9b 	bl	800f6a6 <UART_WaitOnFlagUntilTimeout>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d001      	beq.n	800df7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800df76:	2303      	movs	r3, #3
 800df78:	e006      	b.n	800df88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2220      	movs	r2, #32
 800df7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	e000      	b.n	800df88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800df86:	2302      	movs	r3, #2
  }
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3720      	adds	r7, #32
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b08a      	sub	sp, #40	; 0x28
 800df94:	af02      	add	r7, sp, #8
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	4613      	mov	r3, r2
 800df9e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfa6:	2b20      	cmp	r3, #32
 800dfa8:	f040 80c0 	bne.w	800e12c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d002      	beq.n	800dfb8 <HAL_UART_Receive+0x28>
 800dfb2:	88fb      	ldrh	r3, [r7, #6]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d101      	bne.n	800dfbc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e0b8      	b.n	800e12e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d101      	bne.n	800dfca <HAL_UART_Receive+0x3a>
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	e0b1      	b.n	800e12e <HAL_UART_Receive+0x19e>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2222      	movs	r2, #34	; 0x22
 800dfde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfe8:	f7f8 fbda 	bl	80067a0 <HAL_GetTick>
 800dfec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	88fa      	ldrh	r2, [r7, #6]
 800dff2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	88fa      	ldrh	r2, [r7, #6]
 800dffa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e006:	d10e      	bne.n	800e026 <HAL_UART_Receive+0x96>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d105      	bne.n	800e01c <HAL_UART_Receive+0x8c>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e01a:	e02d      	b.n	800e078 <HAL_UART_Receive+0xe8>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	22ff      	movs	r2, #255	; 0xff
 800e020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e024:	e028      	b.n	800e078 <HAL_UART_Receive+0xe8>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10d      	bne.n	800e04a <HAL_UART_Receive+0xba>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d104      	bne.n	800e040 <HAL_UART_Receive+0xb0>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	22ff      	movs	r2, #255	; 0xff
 800e03a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e03e:	e01b      	b.n	800e078 <HAL_UART_Receive+0xe8>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	227f      	movs	r2, #127	; 0x7f
 800e044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e048:	e016      	b.n	800e078 <HAL_UART_Receive+0xe8>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e052:	d10d      	bne.n	800e070 <HAL_UART_Receive+0xe0>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d104      	bne.n	800e066 <HAL_UART_Receive+0xd6>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	227f      	movs	r2, #127	; 0x7f
 800e060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e064:	e008      	b.n	800e078 <HAL_UART_Receive+0xe8>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	223f      	movs	r2, #63	; 0x3f
 800e06a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e06e:	e003      	b.n	800e078 <HAL_UART_Receive+0xe8>
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e07e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e088:	d108      	bne.n	800e09c <HAL_UART_Receive+0x10c>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d104      	bne.n	800e09c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800e092:	2300      	movs	r3, #0
 800e094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	61bb      	str	r3, [r7, #24]
 800e09a:	e003      	b.n	800e0a4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e0ac:	e032      	b.n	800e114 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2120      	movs	r1, #32
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f001 faf4 	bl	800f6a6 <UART_WaitOnFlagUntilTimeout>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	e032      	b.n	800e12e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10c      	bne.n	800e0e8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	8a7b      	ldrh	r3, [r7, #18]
 800e0d8:	4013      	ands	r3, r2
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	3302      	adds	r3, #2
 800e0e4:	61bb      	str	r3, [r7, #24]
 800e0e6:	e00c      	b.n	800e102 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	8a7b      	ldrh	r3, [r7, #18]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	b2da      	uxtb	r2, r3
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	3301      	adds	r3, #1
 800e100:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e108:	b29b      	uxth	r3, r3
 800e10a:	3b01      	subs	r3, #1
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1c6      	bne.n	800e0ae <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2220      	movs	r2, #32
 800e124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e128:	2300      	movs	r3, #0
 800e12a:	e000      	b.n	800e12e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800e12c:	2302      	movs	r3, #2
  }
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3720      	adds	r7, #32
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
	...

0800e138 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08a      	sub	sp, #40	; 0x28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e14c:	2b20      	cmp	r3, #32
 800e14e:	d17a      	bne.n	800e246 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d002      	beq.n	800e15c <HAL_UART_Transmit_DMA+0x24>
 800e156:	88fb      	ldrh	r3, [r7, #6]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d101      	bne.n	800e160 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e073      	b.n	800e248 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e166:	2b01      	cmp	r3, #1
 800e168:	d101      	bne.n	800e16e <HAL_UART_Transmit_DMA+0x36>
 800e16a:	2302      	movs	r3, #2
 800e16c:	e06c      	b.n	800e248 <HAL_UART_Transmit_DMA+0x110>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	88fa      	ldrh	r2, [r7, #6]
 800e180:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	88fa      	ldrh	r2, [r7, #6]
 800e188:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2221      	movs	r2, #33	; 0x21
 800e198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d02c      	beq.n	800e1fe <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1a8:	4a29      	ldr	r2, [pc, #164]	; (800e250 <HAL_UART_Transmit_DMA+0x118>)
 800e1aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1b0:	4a28      	ldr	r2, [pc, #160]	; (800e254 <HAL_UART_Transmit_DMA+0x11c>)
 800e1b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1b8:	4a27      	ldr	r2, [pc, #156]	; (800e258 <HAL_UART_Transmit_DMA+0x120>)
 800e1ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3328      	adds	r3, #40	; 0x28
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	88fb      	ldrh	r3, [r7, #6]
 800e1d8:	f7f9 f994 	bl	8007504 <HAL_DMA_Start_IT>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00d      	beq.n	800e1fe <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2210      	movs	r2, #16
 800e1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2220      	movs	r2, #32
 800e1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e024      	b.n	800e248 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2240      	movs	r2, #64	; 0x40
 800e204:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3308      	adds	r3, #8
 800e214:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	e853 3f00 	ldrex	r3, [r3]
 800e21c:	613b      	str	r3, [r7, #16]
   return(result);
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e224:	627b      	str	r3, [r7, #36]	; 0x24
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	3308      	adds	r3, #8
 800e22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22e:	623a      	str	r2, [r7, #32]
 800e230:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e232:	69f9      	ldr	r1, [r7, #28]
 800e234:	6a3a      	ldr	r2, [r7, #32]
 800e236:	e841 2300 	strex	r3, r2, [r1]
 800e23a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1e5      	bne.n	800e20e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	e000      	b.n	800e248 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e246:	2302      	movs	r3, #2
  }
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3728      	adds	r7, #40	; 0x28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	0800fad9 	.word	0x0800fad9
 800e254:	0800fb6f 	.word	0x0800fb6f
 800e258:	0800fce5 	.word	0x0800fce5

0800e25c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b0ba      	sub	sp, #232	; 0xe8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	69db      	ldr	r3, [r3, #28]
 800e26a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e282:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e286:	f640 030f 	movw	r3, #2063	; 0x80f
 800e28a:	4013      	ands	r3, r2
 800e28c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e294:	2b00      	cmp	r3, #0
 800e296:	d11b      	bne.n	800e2d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29c:	f003 0320 	and.w	r3, r3, #32
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d015      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a8:	f003 0320 	and.w	r3, r3, #32
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d105      	bne.n	800e2bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d009      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 835a 	beq.w	800e97a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	4798      	blx	r3
      }
      return;
 800e2ce:	e354      	b.n	800e97a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e2d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 811f 	beq.w	800e518 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e2da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2de:	4b8b      	ldr	r3, [pc, #556]	; (800e50c <HAL_UART_IRQHandler+0x2b0>)
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d106      	bne.n	800e2f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e2e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e2ea:	4b89      	ldr	r3, [pc, #548]	; (800e510 <HAL_UART_IRQHandler+0x2b4>)
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 8112 	beq.w	800e518 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d011      	beq.n	800e324 <HAL_UART_IRQHandler+0xc8>
 800e300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00b      	beq.n	800e324 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2201      	movs	r2, #1
 800e312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e31a:	f043 0201 	orr.w	r2, r3, #1
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e328:	f003 0302 	and.w	r3, r3, #2
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d011      	beq.n	800e354 <HAL_UART_IRQHandler+0xf8>
 800e330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00b      	beq.n	800e354 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2202      	movs	r2, #2
 800e342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e34a:	f043 0204 	orr.w	r2, r3, #4
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d011      	beq.n	800e384 <HAL_UART_IRQHandler+0x128>
 800e360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e364:	f003 0301 	and.w	r3, r3, #1
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00b      	beq.n	800e384 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2204      	movs	r2, #4
 800e372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e37a:	f043 0202 	orr.w	r2, r3, #2
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e388:	f003 0308 	and.w	r3, r3, #8
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d017      	beq.n	800e3c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e394:	f003 0320 	and.w	r3, r3, #32
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d105      	bne.n	800e3a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e39c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e3a0:	4b5a      	ldr	r3, [pc, #360]	; (800e50c <HAL_UART_IRQHandler+0x2b0>)
 800e3a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00b      	beq.n	800e3c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2208      	movs	r2, #8
 800e3ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3b6:	f043 0208 	orr.w	r2, r3, #8
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d012      	beq.n	800e3f2 <HAL_UART_IRQHandler+0x196>
 800e3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00c      	beq.n	800e3f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3e8:	f043 0220 	orr.w	r2, r3, #32
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 82c0 	beq.w	800e97e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e402:	f003 0320 	and.w	r3, r3, #32
 800e406:	2b00      	cmp	r3, #0
 800e408:	d013      	beq.n	800e432 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e40e:	f003 0320 	and.w	r3, r3, #32
 800e412:	2b00      	cmp	r3, #0
 800e414:	d105      	bne.n	800e422 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e41a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d007      	beq.n	800e432 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e426:	2b00      	cmp	r3, #0
 800e428:	d003      	beq.n	800e432 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e446:	2b40      	cmp	r3, #64	; 0x40
 800e448:	d005      	beq.n	800e456 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e44e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e452:	2b00      	cmp	r3, #0
 800e454:	d04f      	beq.n	800e4f6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 fad8 	bl	800fa0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e466:	2b40      	cmp	r3, #64	; 0x40
 800e468:	d141      	bne.n	800e4ee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	3308      	adds	r3, #8
 800e470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e478:	e853 3f00 	ldrex	r3, [r3]
 800e47c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3308      	adds	r3, #8
 800e492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e49a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e4a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e4a6:	e841 2300 	strex	r3, r2, [r1]
 800e4aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e4ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1d9      	bne.n	800e46a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d013      	beq.n	800e4e6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4c2:	4a14      	ldr	r2, [pc, #80]	; (800e514 <HAL_UART_IRQHandler+0x2b8>)
 800e4c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7f9 fda2 	bl	8008014 <HAL_DMA_Abort_IT>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d017      	beq.n	800e506 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4e4:	e00f      	b.n	800e506 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fa7e 	bl	800e9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4ec:	e00b      	b.n	800e506 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 fa7a 	bl	800e9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4f4:	e007      	b.n	800e506 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 fa76 	bl	800e9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e504:	e23b      	b.n	800e97e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e506:	bf00      	nop
    return;
 800e508:	e239      	b.n	800e97e <HAL_UART_IRQHandler+0x722>
 800e50a:	bf00      	nop
 800e50c:	10000001 	.word	0x10000001
 800e510:	04000120 	.word	0x04000120
 800e514:	0800fd65 	.word	0x0800fd65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	f040 81ce 	bne.w	800e8be <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e526:	f003 0310 	and.w	r3, r3, #16
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 81c7 	beq.w	800e8be <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e534:	f003 0310 	and.w	r3, r3, #16
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 81c0 	beq.w	800e8be <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2210      	movs	r2, #16
 800e544:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e550:	2b40      	cmp	r3, #64	; 0x40
 800e552:	f040 813b 	bne.w	800e7cc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a8b      	ldr	r2, [pc, #556]	; (800e78c <HAL_UART_IRQHandler+0x530>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d059      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a89      	ldr	r2, [pc, #548]	; (800e790 <HAL_UART_IRQHandler+0x534>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d053      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a87      	ldr	r2, [pc, #540]	; (800e794 <HAL_UART_IRQHandler+0x538>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d04d      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a85      	ldr	r2, [pc, #532]	; (800e798 <HAL_UART_IRQHandler+0x53c>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d047      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a83      	ldr	r2, [pc, #524]	; (800e79c <HAL_UART_IRQHandler+0x540>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d041      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a81      	ldr	r2, [pc, #516]	; (800e7a0 <HAL_UART_IRQHandler+0x544>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d03b      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a7f      	ldr	r2, [pc, #508]	; (800e7a4 <HAL_UART_IRQHandler+0x548>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d035      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a7d      	ldr	r2, [pc, #500]	; (800e7a8 <HAL_UART_IRQHandler+0x54c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d02f      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a7b      	ldr	r2, [pc, #492]	; (800e7ac <HAL_UART_IRQHandler+0x550>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d029      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a79      	ldr	r2, [pc, #484]	; (800e7b0 <HAL_UART_IRQHandler+0x554>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d023      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a77      	ldr	r2, [pc, #476]	; (800e7b4 <HAL_UART_IRQHandler+0x558>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d01d      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a75      	ldr	r2, [pc, #468]	; (800e7b8 <HAL_UART_IRQHandler+0x55c>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d017      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a73      	ldr	r2, [pc, #460]	; (800e7bc <HAL_UART_IRQHandler+0x560>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d011      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a71      	ldr	r2, [pc, #452]	; (800e7c0 <HAL_UART_IRQHandler+0x564>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d00b      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a6f      	ldr	r2, [pc, #444]	; (800e7c4 <HAL_UART_IRQHandler+0x568>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d005      	beq.n	800e616 <HAL_UART_IRQHandler+0x3ba>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a6d      	ldr	r2, [pc, #436]	; (800e7c8 <HAL_UART_IRQHandler+0x56c>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d105      	bne.n	800e622 <HAL_UART_IRQHandler+0x3c6>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	e004      	b.n	800e62c <HAL_UART_IRQHandler+0x3d0>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e634:	2b00      	cmp	r3, #0
 800e636:	f000 81a4 	beq.w	800e982 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e644:	429a      	cmp	r2, r3
 800e646:	f080 819c 	bcs.w	800e982 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e65e:	f000 8086 	beq.w	800e76e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e66e:	e853 3f00 	ldrex	r3, [r3]
 800e672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e67a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e67e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e68c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e690:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e698:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e69c:	e841 2300 	strex	r3, r2, [r1]
 800e6a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e6a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1da      	bne.n	800e662 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6b6:	e853 3f00 	ldrex	r3, [r3]
 800e6ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e6bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6be:	f023 0301 	bic.w	r3, r3, #1
 800e6c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e6d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e6d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6dc:	e841 2300 	strex	r3, r2, [r1]
 800e6e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e6e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1e1      	bne.n	800e6ac <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	3308      	adds	r3, #8
 800e6ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6f2:	e853 3f00 	ldrex	r3, [r3]
 800e6f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e6f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3308      	adds	r3, #8
 800e708:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e70c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e70e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e710:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e712:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e714:	e841 2300 	strex	r3, r2, [r1]
 800e718:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e71a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e3      	bne.n	800e6e8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2220      	movs	r2, #32
 800e724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e736:	e853 3f00 	ldrex	r3, [r3]
 800e73a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e73e:	f023 0310 	bic.w	r3, r3, #16
 800e742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	461a      	mov	r2, r3
 800e74c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e750:	65bb      	str	r3, [r7, #88]	; 0x58
 800e752:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e754:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e758:	e841 2300 	strex	r3, r2, [r1]
 800e75c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1e4      	bne.n	800e72e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e768:	4618      	mov	r0, r3
 800e76a:	f7f9 f935 	bl	80079d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	b29b      	uxth	r3, r3
 800e780:	4619      	mov	r1, r3
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7f4 fc72 	bl	800306c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e788:	e0fb      	b.n	800e982 <HAL_UART_IRQHandler+0x726>
 800e78a:	bf00      	nop
 800e78c:	40020010 	.word	0x40020010
 800e790:	40020028 	.word	0x40020028
 800e794:	40020040 	.word	0x40020040
 800e798:	40020058 	.word	0x40020058
 800e79c:	40020070 	.word	0x40020070
 800e7a0:	40020088 	.word	0x40020088
 800e7a4:	400200a0 	.word	0x400200a0
 800e7a8:	400200b8 	.word	0x400200b8
 800e7ac:	40020410 	.word	0x40020410
 800e7b0:	40020428 	.word	0x40020428
 800e7b4:	40020440 	.word	0x40020440
 800e7b8:	40020458 	.word	0x40020458
 800e7bc:	40020470 	.word	0x40020470
 800e7c0:	40020488 	.word	0x40020488
 800e7c4:	400204a0 	.word	0x400204a0
 800e7c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 80cc 	beq.w	800e986 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e7ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 80c7 	beq.w	800e986 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e80c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	461a      	mov	r2, r3
 800e816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e81a:	647b      	str	r3, [r7, #68]	; 0x44
 800e81c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e4      	bne.n	800e7f8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3308      	adds	r3, #8
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	e853 3f00 	ldrex	r3, [r3]
 800e83c:	623b      	str	r3, [r7, #32]
   return(result);
 800e83e:	6a3a      	ldr	r2, [r7, #32]
 800e840:	4b54      	ldr	r3, [pc, #336]	; (800e994 <HAL_UART_IRQHandler+0x738>)
 800e842:	4013      	ands	r3, r2
 800e844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3308      	adds	r3, #8
 800e84e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e852:	633a      	str	r2, [r7, #48]	; 0x30
 800e854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e85a:	e841 2300 	strex	r3, r2, [r1]
 800e85e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1e3      	bne.n	800e82e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2220      	movs	r2, #32
 800e86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	e853 3f00 	ldrex	r3, [r3]
 800e886:	60fb      	str	r3, [r7, #12]
   return(result);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f023 0310 	bic.w	r3, r3, #16
 800e88e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e89c:	61fb      	str	r3, [r7, #28]
 800e89e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a0:	69b9      	ldr	r1, [r7, #24]
 800e8a2:	69fa      	ldr	r2, [r7, #28]
 800e8a4:	e841 2300 	strex	r3, r2, [r1]
 800e8a8:	617b      	str	r3, [r7, #20]
   return(result);
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1e4      	bne.n	800e87a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e8b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7f4 fbd8 	bl	800306c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e8bc:	e063      	b.n	800e986 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00e      	beq.n	800e8e8 <HAL_UART_IRQHandler+0x68c>
 800e8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d008      	beq.n	800e8e8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e8de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f001 fa80 	bl	800fde6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8e6:	e051      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d014      	beq.n	800e91e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d105      	bne.n	800e90c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d008      	beq.n	800e91e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e910:	2b00      	cmp	r3, #0
 800e912:	d03a      	beq.n	800e98a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	4798      	blx	r3
    }
    return;
 800e91c:	e035      	b.n	800e98a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <HAL_UART_IRQHandler+0x6e2>
 800e92a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e932:	2b00      	cmp	r3, #0
 800e934:	d003      	beq.n	800e93e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f001 fa2a 	bl	800fd90 <UART_EndTransmit_IT>
    return;
 800e93c:	e026      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e946:	2b00      	cmp	r3, #0
 800e948:	d009      	beq.n	800e95e <HAL_UART_IRQHandler+0x702>
 800e94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e94e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e952:	2b00      	cmp	r3, #0
 800e954:	d003      	beq.n	800e95e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f001 fa59 	bl	800fe0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e95c:	e016      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e966:	2b00      	cmp	r3, #0
 800e968:	d010      	beq.n	800e98c <HAL_UART_IRQHandler+0x730>
 800e96a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	da0c      	bge.n	800e98c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f001 fa41 	bl	800fdfa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e978:	e008      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
      return;
 800e97a:	bf00      	nop
 800e97c:	e006      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
    return;
 800e97e:	bf00      	nop
 800e980:	e004      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
      return;
 800e982:	bf00      	nop
 800e984:	e002      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
      return;
 800e986:	bf00      	nop
 800e988:	e000      	b.n	800e98c <HAL_UART_IRQHandler+0x730>
    return;
 800e98a:	bf00      	nop
  }
}
 800e98c:	37e8      	adds	r7, #232	; 0xe8
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	effffffe 	.word	0xeffffffe

0800e998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e9a0:	bf00      	nop
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e9b4:	bf00      	nop
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea00:	b092      	sub	sp, #72	; 0x48
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ea06:	2300      	movs	r3, #0
 800ea08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	689a      	ldr	r2, [r3, #8]
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	691b      	ldr	r3, [r3, #16]
 800ea14:	431a      	orrs	r2, r3
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	4bbe      	ldr	r3, [pc, #760]	; (800ed24 <UART_SetConfig+0x328>)
 800ea2c:	4013      	ands	r3, r2
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	6812      	ldr	r2, [r2, #0]
 800ea32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea34:	430b      	orrs	r3, r1
 800ea36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	68da      	ldr	r2, [r3, #12]
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4ab3      	ldr	r2, [pc, #716]	; (800ed28 <UART_SetConfig+0x32c>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d004      	beq.n	800ea68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea64:	4313      	orrs	r3, r2
 800ea66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	689a      	ldr	r2, [r3, #8]
 800ea6e:	4baf      	ldr	r3, [pc, #700]	; (800ed2c <UART_SetConfig+0x330>)
 800ea70:	4013      	ands	r3, r2
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	6812      	ldr	r2, [r2, #0]
 800ea76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	f023 010f 	bic.w	r1, r3, #15
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	430a      	orrs	r2, r1
 800ea90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4aa6      	ldr	r2, [pc, #664]	; (800ed30 <UART_SetConfig+0x334>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d177      	bne.n	800eb8c <UART_SetConfig+0x190>
 800ea9c:	4ba5      	ldr	r3, [pc, #660]	; (800ed34 <UART_SetConfig+0x338>)
 800ea9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eaa4:	2b28      	cmp	r3, #40	; 0x28
 800eaa6:	d86d      	bhi.n	800eb84 <UART_SetConfig+0x188>
 800eaa8:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <UART_SetConfig+0xb4>)
 800eaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaae:	bf00      	nop
 800eab0:	0800eb55 	.word	0x0800eb55
 800eab4:	0800eb85 	.word	0x0800eb85
 800eab8:	0800eb85 	.word	0x0800eb85
 800eabc:	0800eb85 	.word	0x0800eb85
 800eac0:	0800eb85 	.word	0x0800eb85
 800eac4:	0800eb85 	.word	0x0800eb85
 800eac8:	0800eb85 	.word	0x0800eb85
 800eacc:	0800eb85 	.word	0x0800eb85
 800ead0:	0800eb5d 	.word	0x0800eb5d
 800ead4:	0800eb85 	.word	0x0800eb85
 800ead8:	0800eb85 	.word	0x0800eb85
 800eadc:	0800eb85 	.word	0x0800eb85
 800eae0:	0800eb85 	.word	0x0800eb85
 800eae4:	0800eb85 	.word	0x0800eb85
 800eae8:	0800eb85 	.word	0x0800eb85
 800eaec:	0800eb85 	.word	0x0800eb85
 800eaf0:	0800eb65 	.word	0x0800eb65
 800eaf4:	0800eb85 	.word	0x0800eb85
 800eaf8:	0800eb85 	.word	0x0800eb85
 800eafc:	0800eb85 	.word	0x0800eb85
 800eb00:	0800eb85 	.word	0x0800eb85
 800eb04:	0800eb85 	.word	0x0800eb85
 800eb08:	0800eb85 	.word	0x0800eb85
 800eb0c:	0800eb85 	.word	0x0800eb85
 800eb10:	0800eb6d 	.word	0x0800eb6d
 800eb14:	0800eb85 	.word	0x0800eb85
 800eb18:	0800eb85 	.word	0x0800eb85
 800eb1c:	0800eb85 	.word	0x0800eb85
 800eb20:	0800eb85 	.word	0x0800eb85
 800eb24:	0800eb85 	.word	0x0800eb85
 800eb28:	0800eb85 	.word	0x0800eb85
 800eb2c:	0800eb85 	.word	0x0800eb85
 800eb30:	0800eb75 	.word	0x0800eb75
 800eb34:	0800eb85 	.word	0x0800eb85
 800eb38:	0800eb85 	.word	0x0800eb85
 800eb3c:	0800eb85 	.word	0x0800eb85
 800eb40:	0800eb85 	.word	0x0800eb85
 800eb44:	0800eb85 	.word	0x0800eb85
 800eb48:	0800eb85 	.word	0x0800eb85
 800eb4c:	0800eb85 	.word	0x0800eb85
 800eb50:	0800eb7d 	.word	0x0800eb7d
 800eb54:	2301      	movs	r3, #1
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e222      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb5c:	2304      	movs	r3, #4
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e21e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb64:	2308      	movs	r3, #8
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e21a      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb6c:	2310      	movs	r3, #16
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e216      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb74:	2320      	movs	r3, #32
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e212      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb7c:	2340      	movs	r3, #64	; 0x40
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb82:	e20e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb84:	2380      	movs	r3, #128	; 0x80
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8a:	e20a      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a69      	ldr	r2, [pc, #420]	; (800ed38 <UART_SetConfig+0x33c>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d130      	bne.n	800ebf8 <UART_SetConfig+0x1fc>
 800eb96:	4b67      	ldr	r3, [pc, #412]	; (800ed34 <UART_SetConfig+0x338>)
 800eb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9a:	f003 0307 	and.w	r3, r3, #7
 800eb9e:	2b05      	cmp	r3, #5
 800eba0:	d826      	bhi.n	800ebf0 <UART_SetConfig+0x1f4>
 800eba2:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <UART_SetConfig+0x1ac>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ebc1 	.word	0x0800ebc1
 800ebac:	0800ebc9 	.word	0x0800ebc9
 800ebb0:	0800ebd1 	.word	0x0800ebd1
 800ebb4:	0800ebd9 	.word	0x0800ebd9
 800ebb8:	0800ebe1 	.word	0x0800ebe1
 800ebbc:	0800ebe9 	.word	0x0800ebe9
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e1ec      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebc8:	2304      	movs	r3, #4
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e1e8      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebd0:	2308      	movs	r3, #8
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e1e4      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebd8:	2310      	movs	r3, #16
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e1e0      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebe0:	2320      	movs	r3, #32
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e1dc      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebe8:	2340      	movs	r3, #64	; 0x40
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e1d8      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebf0:	2380      	movs	r3, #128	; 0x80
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf6:	e1d4      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a4f      	ldr	r2, [pc, #316]	; (800ed3c <UART_SetConfig+0x340>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d130      	bne.n	800ec64 <UART_SetConfig+0x268>
 800ec02:	4b4c      	ldr	r3, [pc, #304]	; (800ed34 <UART_SetConfig+0x338>)
 800ec04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec06:	f003 0307 	and.w	r3, r3, #7
 800ec0a:	2b05      	cmp	r3, #5
 800ec0c:	d826      	bhi.n	800ec5c <UART_SetConfig+0x260>
 800ec0e:	a201      	add	r2, pc, #4	; (adr r2, 800ec14 <UART_SetConfig+0x218>)
 800ec10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec14:	0800ec2d 	.word	0x0800ec2d
 800ec18:	0800ec35 	.word	0x0800ec35
 800ec1c:	0800ec3d 	.word	0x0800ec3d
 800ec20:	0800ec45 	.word	0x0800ec45
 800ec24:	0800ec4d 	.word	0x0800ec4d
 800ec28:	0800ec55 	.word	0x0800ec55
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e1b6      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec34:	2304      	movs	r3, #4
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e1b2      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec3c:	2308      	movs	r3, #8
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e1ae      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec44:	2310      	movs	r3, #16
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e1aa      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec4c:	2320      	movs	r3, #32
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e1a6      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec54:	2340      	movs	r3, #64	; 0x40
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5a:	e1a2      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec5c:	2380      	movs	r3, #128	; 0x80
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec62:	e19e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a35      	ldr	r2, [pc, #212]	; (800ed40 <UART_SetConfig+0x344>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d130      	bne.n	800ecd0 <UART_SetConfig+0x2d4>
 800ec6e:	4b31      	ldr	r3, [pc, #196]	; (800ed34 <UART_SetConfig+0x338>)
 800ec70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec72:	f003 0307 	and.w	r3, r3, #7
 800ec76:	2b05      	cmp	r3, #5
 800ec78:	d826      	bhi.n	800ecc8 <UART_SetConfig+0x2cc>
 800ec7a:	a201      	add	r2, pc, #4	; (adr r2, 800ec80 <UART_SetConfig+0x284>)
 800ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec80:	0800ec99 	.word	0x0800ec99
 800ec84:	0800eca1 	.word	0x0800eca1
 800ec88:	0800eca9 	.word	0x0800eca9
 800ec8c:	0800ecb1 	.word	0x0800ecb1
 800ec90:	0800ecb9 	.word	0x0800ecb9
 800ec94:	0800ecc1 	.word	0x0800ecc1
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e180      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eca0:	2304      	movs	r3, #4
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e17c      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eca8:	2308      	movs	r3, #8
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e178      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ecb0:	2310      	movs	r3, #16
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb6:	e174      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ecb8:	2320      	movs	r3, #32
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecbe:	e170      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ecc0:	2340      	movs	r3, #64	; 0x40
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc6:	e16c      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ecc8:	2380      	movs	r3, #128	; 0x80
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecce:	e168      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a1b      	ldr	r2, [pc, #108]	; (800ed44 <UART_SetConfig+0x348>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d142      	bne.n	800ed60 <UART_SetConfig+0x364>
 800ecda:	4b16      	ldr	r3, [pc, #88]	; (800ed34 <UART_SetConfig+0x338>)
 800ecdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecde:	f003 0307 	and.w	r3, r3, #7
 800ece2:	2b05      	cmp	r3, #5
 800ece4:	d838      	bhi.n	800ed58 <UART_SetConfig+0x35c>
 800ece6:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <UART_SetConfig+0x2f0>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed05 	.word	0x0800ed05
 800ecf0:	0800ed0d 	.word	0x0800ed0d
 800ecf4:	0800ed15 	.word	0x0800ed15
 800ecf8:	0800ed1d 	.word	0x0800ed1d
 800ecfc:	0800ed49 	.word	0x0800ed49
 800ed00:	0800ed51 	.word	0x0800ed51
 800ed04:	2300      	movs	r3, #0
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0a:	e14a      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed12:	e146      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed14:	2308      	movs	r3, #8
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1a:	e142      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed22:	e13e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed24:	cfff69f3 	.word	0xcfff69f3
 800ed28:	58000c00 	.word	0x58000c00
 800ed2c:	11fff4ff 	.word	0x11fff4ff
 800ed30:	40011000 	.word	0x40011000
 800ed34:	58024400 	.word	0x58024400
 800ed38:	40004400 	.word	0x40004400
 800ed3c:	40004800 	.word	0x40004800
 800ed40:	40004c00 	.word	0x40004c00
 800ed44:	40005000 	.word	0x40005000
 800ed48:	2320      	movs	r3, #32
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4e:	e128      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed50:	2340      	movs	r3, #64	; 0x40
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed56:	e124      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed58:	2380      	movs	r3, #128	; 0x80
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5e:	e120      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4acb      	ldr	r2, [pc, #812]	; (800f094 <UART_SetConfig+0x698>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d176      	bne.n	800ee58 <UART_SetConfig+0x45c>
 800ed6a:	4bcb      	ldr	r3, [pc, #812]	; (800f098 <UART_SetConfig+0x69c>)
 800ed6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed72:	2b28      	cmp	r3, #40	; 0x28
 800ed74:	d86c      	bhi.n	800ee50 <UART_SetConfig+0x454>
 800ed76:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <UART_SetConfig+0x380>)
 800ed78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7c:	0800ee21 	.word	0x0800ee21
 800ed80:	0800ee51 	.word	0x0800ee51
 800ed84:	0800ee51 	.word	0x0800ee51
 800ed88:	0800ee51 	.word	0x0800ee51
 800ed8c:	0800ee51 	.word	0x0800ee51
 800ed90:	0800ee51 	.word	0x0800ee51
 800ed94:	0800ee51 	.word	0x0800ee51
 800ed98:	0800ee51 	.word	0x0800ee51
 800ed9c:	0800ee29 	.word	0x0800ee29
 800eda0:	0800ee51 	.word	0x0800ee51
 800eda4:	0800ee51 	.word	0x0800ee51
 800eda8:	0800ee51 	.word	0x0800ee51
 800edac:	0800ee51 	.word	0x0800ee51
 800edb0:	0800ee51 	.word	0x0800ee51
 800edb4:	0800ee51 	.word	0x0800ee51
 800edb8:	0800ee51 	.word	0x0800ee51
 800edbc:	0800ee31 	.word	0x0800ee31
 800edc0:	0800ee51 	.word	0x0800ee51
 800edc4:	0800ee51 	.word	0x0800ee51
 800edc8:	0800ee51 	.word	0x0800ee51
 800edcc:	0800ee51 	.word	0x0800ee51
 800edd0:	0800ee51 	.word	0x0800ee51
 800edd4:	0800ee51 	.word	0x0800ee51
 800edd8:	0800ee51 	.word	0x0800ee51
 800eddc:	0800ee39 	.word	0x0800ee39
 800ede0:	0800ee51 	.word	0x0800ee51
 800ede4:	0800ee51 	.word	0x0800ee51
 800ede8:	0800ee51 	.word	0x0800ee51
 800edec:	0800ee51 	.word	0x0800ee51
 800edf0:	0800ee51 	.word	0x0800ee51
 800edf4:	0800ee51 	.word	0x0800ee51
 800edf8:	0800ee51 	.word	0x0800ee51
 800edfc:	0800ee41 	.word	0x0800ee41
 800ee00:	0800ee51 	.word	0x0800ee51
 800ee04:	0800ee51 	.word	0x0800ee51
 800ee08:	0800ee51 	.word	0x0800ee51
 800ee0c:	0800ee51 	.word	0x0800ee51
 800ee10:	0800ee51 	.word	0x0800ee51
 800ee14:	0800ee51 	.word	0x0800ee51
 800ee18:	0800ee51 	.word	0x0800ee51
 800ee1c:	0800ee49 	.word	0x0800ee49
 800ee20:	2301      	movs	r3, #1
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee26:	e0bc      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee28:	2304      	movs	r3, #4
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e0b8      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee30:	2308      	movs	r3, #8
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee36:	e0b4      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee38:	2310      	movs	r3, #16
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e0b0      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee40:	2320      	movs	r3, #32
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e0ac      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee48:	2340      	movs	r3, #64	; 0x40
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4e:	e0a8      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee50:	2380      	movs	r3, #128	; 0x80
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee56:	e0a4      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a8f      	ldr	r2, [pc, #572]	; (800f09c <UART_SetConfig+0x6a0>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d130      	bne.n	800eec4 <UART_SetConfig+0x4c8>
 800ee62:	4b8d      	ldr	r3, [pc, #564]	; (800f098 <UART_SetConfig+0x69c>)
 800ee64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee66:	f003 0307 	and.w	r3, r3, #7
 800ee6a:	2b05      	cmp	r3, #5
 800ee6c:	d826      	bhi.n	800eebc <UART_SetConfig+0x4c0>
 800ee6e:	a201      	add	r2, pc, #4	; (adr r2, 800ee74 <UART_SetConfig+0x478>)
 800ee70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee74:	0800ee8d 	.word	0x0800ee8d
 800ee78:	0800ee95 	.word	0x0800ee95
 800ee7c:	0800ee9d 	.word	0x0800ee9d
 800ee80:	0800eea5 	.word	0x0800eea5
 800ee84:	0800eead 	.word	0x0800eead
 800ee88:	0800eeb5 	.word	0x0800eeb5
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e086      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee94:	2304      	movs	r3, #4
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e082      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ee9c:	2308      	movs	r3, #8
 800ee9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea2:	e07e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eea4:	2310      	movs	r3, #16
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e07a      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eeac:	2320      	movs	r3, #32
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e076      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eeb4:	2340      	movs	r3, #64	; 0x40
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeba:	e072      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eebc:	2380      	movs	r3, #128	; 0x80
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec2:	e06e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a75      	ldr	r2, [pc, #468]	; (800f0a0 <UART_SetConfig+0x6a4>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d130      	bne.n	800ef30 <UART_SetConfig+0x534>
 800eece:	4b72      	ldr	r3, [pc, #456]	; (800f098 <UART_SetConfig+0x69c>)
 800eed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eed2:	f003 0307 	and.w	r3, r3, #7
 800eed6:	2b05      	cmp	r3, #5
 800eed8:	d826      	bhi.n	800ef28 <UART_SetConfig+0x52c>
 800eeda:	a201      	add	r2, pc, #4	; (adr r2, 800eee0 <UART_SetConfig+0x4e4>)
 800eedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee0:	0800eef9 	.word	0x0800eef9
 800eee4:	0800ef01 	.word	0x0800ef01
 800eee8:	0800ef09 	.word	0x0800ef09
 800eeec:	0800ef11 	.word	0x0800ef11
 800eef0:	0800ef19 	.word	0x0800ef19
 800eef4:	0800ef21 	.word	0x0800ef21
 800eef8:	2300      	movs	r3, #0
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e050      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef00:	2304      	movs	r3, #4
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e04c      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef08:	2308      	movs	r3, #8
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0e:	e048      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef10:	2310      	movs	r3, #16
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e044      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef18:	2320      	movs	r3, #32
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e040      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef20:	2340      	movs	r3, #64	; 0x40
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e03c      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef28:	2380      	movs	r3, #128	; 0x80
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e038      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a5b      	ldr	r2, [pc, #364]	; (800f0a4 <UART_SetConfig+0x6a8>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d130      	bne.n	800ef9c <UART_SetConfig+0x5a0>
 800ef3a:	4b57      	ldr	r3, [pc, #348]	; (800f098 <UART_SetConfig+0x69c>)
 800ef3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef3e:	f003 0307 	and.w	r3, r3, #7
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	d826      	bhi.n	800ef94 <UART_SetConfig+0x598>
 800ef46:	a201      	add	r2, pc, #4	; (adr r2, 800ef4c <UART_SetConfig+0x550>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800ef65 	.word	0x0800ef65
 800ef50:	0800ef6d 	.word	0x0800ef6d
 800ef54:	0800ef75 	.word	0x0800ef75
 800ef58:	0800ef7d 	.word	0x0800ef7d
 800ef5c:	0800ef85 	.word	0x0800ef85
 800ef60:	0800ef8d 	.word	0x0800ef8d
 800ef64:	2302      	movs	r3, #2
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e01a      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef6c:	2304      	movs	r3, #4
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e016      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef74:	2308      	movs	r3, #8
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7a:	e012      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef7c:	2310      	movs	r3, #16
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef82:	e00e      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef84:	2320      	movs	r3, #32
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8a:	e00a      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef8c:	2340      	movs	r3, #64	; 0x40
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef92:	e006      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef94:	2380      	movs	r3, #128	; 0x80
 800ef96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9a:	e002      	b.n	800efa2 <UART_SetConfig+0x5a6>
 800ef9c:	2380      	movs	r3, #128	; 0x80
 800ef9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a3f      	ldr	r2, [pc, #252]	; (800f0a4 <UART_SetConfig+0x6a8>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	f040 80f8 	bne.w	800f19e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800efae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efb2:	2b20      	cmp	r3, #32
 800efb4:	dc46      	bgt.n	800f044 <UART_SetConfig+0x648>
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	f2c0 8082 	blt.w	800f0c0 <UART_SetConfig+0x6c4>
 800efbc:	3b02      	subs	r3, #2
 800efbe:	2b1e      	cmp	r3, #30
 800efc0:	d87e      	bhi.n	800f0c0 <UART_SetConfig+0x6c4>
 800efc2:	a201      	add	r2, pc, #4	; (adr r2, 800efc8 <UART_SetConfig+0x5cc>)
 800efc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc8:	0800f04b 	.word	0x0800f04b
 800efcc:	0800f0c1 	.word	0x0800f0c1
 800efd0:	0800f053 	.word	0x0800f053
 800efd4:	0800f0c1 	.word	0x0800f0c1
 800efd8:	0800f0c1 	.word	0x0800f0c1
 800efdc:	0800f0c1 	.word	0x0800f0c1
 800efe0:	0800f063 	.word	0x0800f063
 800efe4:	0800f0c1 	.word	0x0800f0c1
 800efe8:	0800f0c1 	.word	0x0800f0c1
 800efec:	0800f0c1 	.word	0x0800f0c1
 800eff0:	0800f0c1 	.word	0x0800f0c1
 800eff4:	0800f0c1 	.word	0x0800f0c1
 800eff8:	0800f0c1 	.word	0x0800f0c1
 800effc:	0800f0c1 	.word	0x0800f0c1
 800f000:	0800f073 	.word	0x0800f073
 800f004:	0800f0c1 	.word	0x0800f0c1
 800f008:	0800f0c1 	.word	0x0800f0c1
 800f00c:	0800f0c1 	.word	0x0800f0c1
 800f010:	0800f0c1 	.word	0x0800f0c1
 800f014:	0800f0c1 	.word	0x0800f0c1
 800f018:	0800f0c1 	.word	0x0800f0c1
 800f01c:	0800f0c1 	.word	0x0800f0c1
 800f020:	0800f0c1 	.word	0x0800f0c1
 800f024:	0800f0c1 	.word	0x0800f0c1
 800f028:	0800f0c1 	.word	0x0800f0c1
 800f02c:	0800f0c1 	.word	0x0800f0c1
 800f030:	0800f0c1 	.word	0x0800f0c1
 800f034:	0800f0c1 	.word	0x0800f0c1
 800f038:	0800f0c1 	.word	0x0800f0c1
 800f03c:	0800f0c1 	.word	0x0800f0c1
 800f040:	0800f0b3 	.word	0x0800f0b3
 800f044:	2b40      	cmp	r3, #64	; 0x40
 800f046:	d037      	beq.n	800f0b8 <UART_SetConfig+0x6bc>
 800f048:	e03a      	b.n	800f0c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f04a:	f7fc fe59 	bl	800bd00 <HAL_RCCEx_GetD3PCLK1Freq>
 800f04e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f050:	e03c      	b.n	800f0cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f056:	4618      	mov	r0, r3
 800f058:	f7fc fe68 	bl	800bd2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f060:	e034      	b.n	800f0cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f062:	f107 0318 	add.w	r3, r7, #24
 800f066:	4618      	mov	r0, r3
 800f068:	f7fc ffb4 	bl	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f070:	e02c      	b.n	800f0cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f072:	4b09      	ldr	r3, [pc, #36]	; (800f098 <UART_SetConfig+0x69c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 0320 	and.w	r3, r3, #32
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d016      	beq.n	800f0ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f07e:	4b06      	ldr	r3, [pc, #24]	; (800f098 <UART_SetConfig+0x69c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	08db      	lsrs	r3, r3, #3
 800f084:	f003 0303 	and.w	r3, r3, #3
 800f088:	4a07      	ldr	r2, [pc, #28]	; (800f0a8 <UART_SetConfig+0x6ac>)
 800f08a:	fa22 f303 	lsr.w	r3, r2, r3
 800f08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f090:	e01c      	b.n	800f0cc <UART_SetConfig+0x6d0>
 800f092:	bf00      	nop
 800f094:	40011400 	.word	0x40011400
 800f098:	58024400 	.word	0x58024400
 800f09c:	40007800 	.word	0x40007800
 800f0a0:	40007c00 	.word	0x40007c00
 800f0a4:	58000c00 	.word	0x58000c00
 800f0a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f0ac:	4b9d      	ldr	r3, [pc, #628]	; (800f324 <UART_SetConfig+0x928>)
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b0:	e00c      	b.n	800f0cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0b2:	4b9d      	ldr	r3, [pc, #628]	; (800f328 <UART_SetConfig+0x92c>)
 800f0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b6:	e009      	b.n	800f0cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0be:	e005      	b.n	800f0cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f000 81de 	beq.w	800f490 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d8:	4a94      	ldr	r2, [pc, #592]	; (800f32c <UART_SetConfig+0x930>)
 800f0da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	005b      	lsls	r3, r3, #1
 800f0f0:	4413      	add	r3, r2
 800f0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d305      	bcc.n	800f104 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f100:	429a      	cmp	r2, r3
 800f102:	d903      	bls.n	800f10c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f10a:	e1c1      	b.n	800f490 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f10e:	2200      	movs	r2, #0
 800f110:	60bb      	str	r3, [r7, #8]
 800f112:	60fa      	str	r2, [r7, #12]
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f118:	4a84      	ldr	r2, [pc, #528]	; (800f32c <UART_SetConfig+0x930>)
 800f11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f11e:	b29b      	uxth	r3, r3
 800f120:	2200      	movs	r2, #0
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	607a      	str	r2, [r7, #4]
 800f126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f12a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f12e:	f7f1 f92f 	bl	8000390 <__aeabi_uldivmod>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	4610      	mov	r0, r2
 800f138:	4619      	mov	r1, r3
 800f13a:	f04f 0200 	mov.w	r2, #0
 800f13e:	f04f 0300 	mov.w	r3, #0
 800f142:	020b      	lsls	r3, r1, #8
 800f144:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f148:	0202      	lsls	r2, r0, #8
 800f14a:	6979      	ldr	r1, [r7, #20]
 800f14c:	6849      	ldr	r1, [r1, #4]
 800f14e:	0849      	lsrs	r1, r1, #1
 800f150:	2000      	movs	r0, #0
 800f152:	460c      	mov	r4, r1
 800f154:	4605      	mov	r5, r0
 800f156:	eb12 0804 	adds.w	r8, r2, r4
 800f15a:	eb43 0905 	adc.w	r9, r3, r5
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	469a      	mov	sl, r3
 800f166:	4693      	mov	fp, r2
 800f168:	4652      	mov	r2, sl
 800f16a:	465b      	mov	r3, fp
 800f16c:	4640      	mov	r0, r8
 800f16e:	4649      	mov	r1, r9
 800f170:	f7f1 f90e 	bl	8000390 <__aeabi_uldivmod>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4613      	mov	r3, r2
 800f17a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f182:	d308      	bcc.n	800f196 <UART_SetConfig+0x79a>
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f18a:	d204      	bcs.n	800f196 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f192:	60da      	str	r2, [r3, #12]
 800f194:	e17c      	b.n	800f490 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f196:	2301      	movs	r3, #1
 800f198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f19c:	e178      	b.n	800f490 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	69db      	ldr	r3, [r3, #28]
 800f1a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1a6:	f040 80c5 	bne.w	800f334 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f1aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f1ae:	2b20      	cmp	r3, #32
 800f1b0:	dc48      	bgt.n	800f244 <UART_SetConfig+0x848>
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	db7b      	blt.n	800f2ae <UART_SetConfig+0x8b2>
 800f1b6:	2b20      	cmp	r3, #32
 800f1b8:	d879      	bhi.n	800f2ae <UART_SetConfig+0x8b2>
 800f1ba:	a201      	add	r2, pc, #4	; (adr r2, 800f1c0 <UART_SetConfig+0x7c4>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f24b 	.word	0x0800f24b
 800f1c4:	0800f253 	.word	0x0800f253
 800f1c8:	0800f2af 	.word	0x0800f2af
 800f1cc:	0800f2af 	.word	0x0800f2af
 800f1d0:	0800f25b 	.word	0x0800f25b
 800f1d4:	0800f2af 	.word	0x0800f2af
 800f1d8:	0800f2af 	.word	0x0800f2af
 800f1dc:	0800f2af 	.word	0x0800f2af
 800f1e0:	0800f26b 	.word	0x0800f26b
 800f1e4:	0800f2af 	.word	0x0800f2af
 800f1e8:	0800f2af 	.word	0x0800f2af
 800f1ec:	0800f2af 	.word	0x0800f2af
 800f1f0:	0800f2af 	.word	0x0800f2af
 800f1f4:	0800f2af 	.word	0x0800f2af
 800f1f8:	0800f2af 	.word	0x0800f2af
 800f1fc:	0800f2af 	.word	0x0800f2af
 800f200:	0800f27b 	.word	0x0800f27b
 800f204:	0800f2af 	.word	0x0800f2af
 800f208:	0800f2af 	.word	0x0800f2af
 800f20c:	0800f2af 	.word	0x0800f2af
 800f210:	0800f2af 	.word	0x0800f2af
 800f214:	0800f2af 	.word	0x0800f2af
 800f218:	0800f2af 	.word	0x0800f2af
 800f21c:	0800f2af 	.word	0x0800f2af
 800f220:	0800f2af 	.word	0x0800f2af
 800f224:	0800f2af 	.word	0x0800f2af
 800f228:	0800f2af 	.word	0x0800f2af
 800f22c:	0800f2af 	.word	0x0800f2af
 800f230:	0800f2af 	.word	0x0800f2af
 800f234:	0800f2af 	.word	0x0800f2af
 800f238:	0800f2af 	.word	0x0800f2af
 800f23c:	0800f2af 	.word	0x0800f2af
 800f240:	0800f2a1 	.word	0x0800f2a1
 800f244:	2b40      	cmp	r3, #64	; 0x40
 800f246:	d02e      	beq.n	800f2a6 <UART_SetConfig+0x8aa>
 800f248:	e031      	b.n	800f2ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f24a:	f7fb fde7 	bl	800ae1c <HAL_RCC_GetPCLK1Freq>
 800f24e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f250:	e033      	b.n	800f2ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f252:	f7fb fdf9 	bl	800ae48 <HAL_RCC_GetPCLK2Freq>
 800f256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f258:	e02f      	b.n	800f2ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f25a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fc fd64 	bl	800bd2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f268:	e027      	b.n	800f2ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f26a:	f107 0318 	add.w	r3, r7, #24
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fc feb0 	bl	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f278:	e01f      	b.n	800f2ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f27a:	4b2d      	ldr	r3, [pc, #180]	; (800f330 <UART_SetConfig+0x934>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f003 0320 	and.w	r3, r3, #32
 800f282:	2b00      	cmp	r3, #0
 800f284:	d009      	beq.n	800f29a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f286:	4b2a      	ldr	r3, [pc, #168]	; (800f330 <UART_SetConfig+0x934>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	08db      	lsrs	r3, r3, #3
 800f28c:	f003 0303 	and.w	r3, r3, #3
 800f290:	4a24      	ldr	r2, [pc, #144]	; (800f324 <UART_SetConfig+0x928>)
 800f292:	fa22 f303 	lsr.w	r3, r2, r3
 800f296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f298:	e00f      	b.n	800f2ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f29a:	4b22      	ldr	r3, [pc, #136]	; (800f324 <UART_SetConfig+0x928>)
 800f29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f29e:	e00c      	b.n	800f2ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2a0:	4b21      	ldr	r3, [pc, #132]	; (800f328 <UART_SetConfig+0x92c>)
 800f2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2a4:	e009      	b.n	800f2ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ac:	e005      	b.n	800f2ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f000 80e7 	beq.w	800f490 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c6:	4a19      	ldr	r2, [pc, #100]	; (800f32c <UART_SetConfig+0x930>)
 800f2c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2d4:	005a      	lsls	r2, r3, #1
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	085b      	lsrs	r3, r3, #1
 800f2dc:	441a      	add	r2, r3
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ea:	2b0f      	cmp	r3, #15
 800f2ec:	d916      	bls.n	800f31c <UART_SetConfig+0x920>
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2f4:	d212      	bcs.n	800f31c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	f023 030f 	bic.w	r3, r3, #15
 800f2fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f302:	085b      	lsrs	r3, r3, #1
 800f304:	b29b      	uxth	r3, r3
 800f306:	f003 0307 	and.w	r3, r3, #7
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f30e:	4313      	orrs	r3, r2
 800f310:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f318:	60da      	str	r2, [r3, #12]
 800f31a:	e0b9      	b.n	800f490 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f31c:	2301      	movs	r3, #1
 800f31e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f322:	e0b5      	b.n	800f490 <UART_SetConfig+0xa94>
 800f324:	03d09000 	.word	0x03d09000
 800f328:	003d0900 	.word	0x003d0900
 800f32c:	080141bc 	.word	0x080141bc
 800f330:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f334:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f338:	2b20      	cmp	r3, #32
 800f33a:	dc49      	bgt.n	800f3d0 <UART_SetConfig+0x9d4>
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	db7c      	blt.n	800f43a <UART_SetConfig+0xa3e>
 800f340:	2b20      	cmp	r3, #32
 800f342:	d87a      	bhi.n	800f43a <UART_SetConfig+0xa3e>
 800f344:	a201      	add	r2, pc, #4	; (adr r2, 800f34c <UART_SetConfig+0x950>)
 800f346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34a:	bf00      	nop
 800f34c:	0800f3d7 	.word	0x0800f3d7
 800f350:	0800f3df 	.word	0x0800f3df
 800f354:	0800f43b 	.word	0x0800f43b
 800f358:	0800f43b 	.word	0x0800f43b
 800f35c:	0800f3e7 	.word	0x0800f3e7
 800f360:	0800f43b 	.word	0x0800f43b
 800f364:	0800f43b 	.word	0x0800f43b
 800f368:	0800f43b 	.word	0x0800f43b
 800f36c:	0800f3f7 	.word	0x0800f3f7
 800f370:	0800f43b 	.word	0x0800f43b
 800f374:	0800f43b 	.word	0x0800f43b
 800f378:	0800f43b 	.word	0x0800f43b
 800f37c:	0800f43b 	.word	0x0800f43b
 800f380:	0800f43b 	.word	0x0800f43b
 800f384:	0800f43b 	.word	0x0800f43b
 800f388:	0800f43b 	.word	0x0800f43b
 800f38c:	0800f407 	.word	0x0800f407
 800f390:	0800f43b 	.word	0x0800f43b
 800f394:	0800f43b 	.word	0x0800f43b
 800f398:	0800f43b 	.word	0x0800f43b
 800f39c:	0800f43b 	.word	0x0800f43b
 800f3a0:	0800f43b 	.word	0x0800f43b
 800f3a4:	0800f43b 	.word	0x0800f43b
 800f3a8:	0800f43b 	.word	0x0800f43b
 800f3ac:	0800f43b 	.word	0x0800f43b
 800f3b0:	0800f43b 	.word	0x0800f43b
 800f3b4:	0800f43b 	.word	0x0800f43b
 800f3b8:	0800f43b 	.word	0x0800f43b
 800f3bc:	0800f43b 	.word	0x0800f43b
 800f3c0:	0800f43b 	.word	0x0800f43b
 800f3c4:	0800f43b 	.word	0x0800f43b
 800f3c8:	0800f43b 	.word	0x0800f43b
 800f3cc:	0800f42d 	.word	0x0800f42d
 800f3d0:	2b40      	cmp	r3, #64	; 0x40
 800f3d2:	d02e      	beq.n	800f432 <UART_SetConfig+0xa36>
 800f3d4:	e031      	b.n	800f43a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3d6:	f7fb fd21 	bl	800ae1c <HAL_RCC_GetPCLK1Freq>
 800f3da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3dc:	e033      	b.n	800f446 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3de:	f7fb fd33 	bl	800ae48 <HAL_RCC_GetPCLK2Freq>
 800f3e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3e4:	e02f      	b.n	800f446 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fc fc9e 	bl	800bd2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f4:	e027      	b.n	800f446 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3f6:	f107 0318 	add.w	r3, r7, #24
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fc fdea 	bl	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f404:	e01f      	b.n	800f446 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f406:	4b2d      	ldr	r3, [pc, #180]	; (800f4bc <UART_SetConfig+0xac0>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0320 	and.w	r3, r3, #32
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d009      	beq.n	800f426 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f412:	4b2a      	ldr	r3, [pc, #168]	; (800f4bc <UART_SetConfig+0xac0>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	08db      	lsrs	r3, r3, #3
 800f418:	f003 0303 	and.w	r3, r3, #3
 800f41c:	4a28      	ldr	r2, [pc, #160]	; (800f4c0 <UART_SetConfig+0xac4>)
 800f41e:	fa22 f303 	lsr.w	r3, r2, r3
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f424:	e00f      	b.n	800f446 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f426:	4b26      	ldr	r3, [pc, #152]	; (800f4c0 <UART_SetConfig+0xac4>)
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42a:	e00c      	b.n	800f446 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f42c:	4b25      	ldr	r3, [pc, #148]	; (800f4c4 <UART_SetConfig+0xac8>)
 800f42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f430:	e009      	b.n	800f446 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f438:	e005      	b.n	800f446 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f444:	bf00      	nop
    }

    if (pclk != 0U)
 800f446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d021      	beq.n	800f490 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	4a1d      	ldr	r2, [pc, #116]	; (800f4c8 <UART_SetConfig+0xacc>)
 800f452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f456:	461a      	mov	r2, r3
 800f458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	085b      	lsrs	r3, r3, #1
 800f464:	441a      	add	r2, r3
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f46e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f472:	2b0f      	cmp	r3, #15
 800f474:	d909      	bls.n	800f48a <UART_SetConfig+0xa8e>
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f47c:	d205      	bcs.n	800f48a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	b29a      	uxth	r2, r3
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	60da      	str	r2, [r3, #12]
 800f488:	e002      	b.n	800f490 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2201      	movs	r2, #1
 800f494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f4ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3748      	adds	r7, #72	; 0x48
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4ba:	bf00      	nop
 800f4bc:	58024400 	.word	0x58024400
 800f4c0:	03d09000 	.word	0x03d09000
 800f4c4:	003d0900 	.word	0x003d0900
 800f4c8:	080141bc 	.word	0x080141bc

0800f4cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d8:	f003 0301 	and.w	r3, r3, #1
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00a      	beq.n	800f4f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	430a      	orrs	r2, r1
 800f4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fa:	f003 0302 	and.w	r3, r3, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00a      	beq.n	800f518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	430a      	orrs	r2, r1
 800f516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00a      	beq.n	800f53a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	430a      	orrs	r2, r1
 800f538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f53e:	f003 0308 	and.w	r3, r3, #8
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00a      	beq.n	800f55c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	430a      	orrs	r2, r1
 800f55a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f560:	f003 0310 	and.w	r3, r3, #16
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00a      	beq.n	800f57e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	430a      	orrs	r2, r1
 800f57c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f582:	f003 0320 	and.w	r3, r3, #32
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00a      	beq.n	800f5a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	430a      	orrs	r2, r1
 800f59e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d01a      	beq.n	800f5e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	430a      	orrs	r2, r1
 800f5c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5ca:	d10a      	bne.n	800f5e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	430a      	orrs	r2, r1
 800f5e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00a      	beq.n	800f604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	430a      	orrs	r2, r1
 800f602:	605a      	str	r2, [r3, #4]
  }
}
 800f604:	bf00      	nop
 800f606:	370c      	adds	r7, #12
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af02      	add	r7, sp, #8
 800f616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f620:	f7f7 f8be 	bl	80067a0 <HAL_GetTick>
 800f624:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f003 0308 	and.w	r3, r3, #8
 800f630:	2b08      	cmp	r3, #8
 800f632:	d10e      	bne.n	800f652 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f82f 	bl	800f6a6 <UART_WaitOnFlagUntilTimeout>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f64e:	2303      	movs	r3, #3
 800f650:	e025      	b.n	800f69e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 0304 	and.w	r3, r3, #4
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d10e      	bne.n	800f67e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 f819 	bl	800f6a6 <UART_WaitOnFlagUntilTimeout>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d001      	beq.n	800f67e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f67a:	2303      	movs	r3, #3
 800f67c:	e00f      	b.n	800f69e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2220      	movs	r2, #32
 800f682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2220      	movs	r2, #32
 800f68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2200      	movs	r2, #0
 800f692:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b09c      	sub	sp, #112	; 0x70
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	60b9      	str	r1, [r7, #8]
 800f6b0:	603b      	str	r3, [r7, #0]
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6b6:	e0a9      	b.n	800f80c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6be:	f000 80a5 	beq.w	800f80c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6c2:	f7f7 f86d 	bl	80067a0 <HAL_GetTick>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d302      	bcc.n	800f6d8 <UART_WaitOnFlagUntilTimeout+0x32>
 800f6d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d140      	bne.n	800f75a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e0:	e853 3f00 	ldrex	r3, [r3]
 800f6e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f6ec:	667b      	str	r3, [r7, #100]	; 0x64
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6fe:	e841 2300 	strex	r3, r2, [r1]
 800f702:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1e6      	bne.n	800f6d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	3308      	adds	r3, #8
 800f710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f714:	e853 3f00 	ldrex	r3, [r3]
 800f718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71c:	f023 0301 	bic.w	r3, r3, #1
 800f720:	663b      	str	r3, [r7, #96]	; 0x60
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3308      	adds	r3, #8
 800f728:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f72a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f72c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f732:	e841 2300 	strex	r3, r2, [r1]
 800f736:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1e5      	bne.n	800f70a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2220      	movs	r2, #32
 800f742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2220      	movs	r2, #32
 800f74a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f756:	2303      	movs	r3, #3
 800f758:	e069      	b.n	800f82e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 0304 	and.w	r3, r3, #4
 800f764:	2b00      	cmp	r3, #0
 800f766:	d051      	beq.n	800f80c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	69db      	ldr	r3, [r3, #28]
 800f76e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f776:	d149      	bne.n	800f80c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f780:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78a:	e853 3f00 	ldrex	r3, [r3]
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f796:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	461a      	mov	r2, r3
 800f79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f7a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7a8:	e841 2300 	strex	r3, r2, [r1]
 800f7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1e6      	bne.n	800f782 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	e853 3f00 	ldrex	r3, [r3]
 800f7c2:	613b      	str	r3, [r7, #16]
   return(result);
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f023 0301 	bic.w	r3, r3, #1
 800f7ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7d4:	623a      	str	r2, [r7, #32]
 800f7d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d8:	69f9      	ldr	r1, [r7, #28]
 800f7da:	6a3a      	ldr	r2, [r7, #32]
 800f7dc:	e841 2300 	strex	r3, r2, [r1]
 800f7e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1e5      	bne.n	800f7b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2220      	movs	r2, #32
 800f7ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2220      	movs	r2, #32
 800f7f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2220      	movs	r2, #32
 800f7fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2200      	movs	r2, #0
 800f804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f808:	2303      	movs	r3, #3
 800f80a:	e010      	b.n	800f82e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	69da      	ldr	r2, [r3, #28]
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	4013      	ands	r3, r2
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	429a      	cmp	r2, r3
 800f81a:	bf0c      	ite	eq
 800f81c:	2301      	moveq	r3, #1
 800f81e:	2300      	movne	r3, #0
 800f820:	b2db      	uxtb	r3, r3
 800f822:	461a      	mov	r2, r3
 800f824:	79fb      	ldrb	r3, [r7, #7]
 800f826:	429a      	cmp	r2, r3
 800f828:	f43f af46 	beq.w	800f6b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3770      	adds	r7, #112	; 0x70
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
	...

0800f838 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b096      	sub	sp, #88	; 0x58
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	4613      	mov	r3, r2
 800f844:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	88fa      	ldrh	r2, [r7, #6]
 800f850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2200      	movs	r2, #0
 800f858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2222      	movs	r2, #34	; 0x22
 800f860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d02c      	beq.n	800f8c6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f870:	4a42      	ldr	r2, [pc, #264]	; (800f97c <UART_Start_Receive_DMA+0x144>)
 800f872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f878:	4a41      	ldr	r2, [pc, #260]	; (800f980 <UART_Start_Receive_DMA+0x148>)
 800f87a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f880:	4a40      	ldr	r2, [pc, #256]	; (800f984 <UART_Start_Receive_DMA+0x14c>)
 800f882:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f888:	2200      	movs	r2, #0
 800f88a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3324      	adds	r3, #36	; 0x24
 800f896:	4619      	mov	r1, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f89c:	461a      	mov	r2, r3
 800f89e:	88fb      	ldrh	r3, [r7, #6]
 800f8a0:	f7f7 fe30 	bl	8007504 <HAL_DMA_Start_IT>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00d      	beq.n	800f8c6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2210      	movs	r2, #16
 800f8ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2220      	movs	r2, #32
 800f8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e055      	b.n	800f972 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d018      	beq.n	800f908 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8de:	e853 3f00 	ldrex	r3, [r3]
 800f8e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8ea:	657b      	str	r3, [r7, #84]	; 0x54
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8fc:	e841 2300 	strex	r3, r2, [r1]
 800f900:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1e6      	bne.n	800f8d6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3308      	adds	r3, #8
 800f90e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f912:	e853 3f00 	ldrex	r3, [r3]
 800f916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91a:	f043 0301 	orr.w	r3, r3, #1
 800f91e:	653b      	str	r3, [r7, #80]	; 0x50
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	3308      	adds	r3, #8
 800f926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f928:	637a      	str	r2, [r7, #52]	; 0x34
 800f92a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f92e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f930:	e841 2300 	strex	r3, r2, [r1]
 800f934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1e5      	bne.n	800f908 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3308      	adds	r3, #8
 800f942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	e853 3f00 	ldrex	r3, [r3]
 800f94a:	613b      	str	r3, [r7, #16]
   return(result);
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f952:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	3308      	adds	r3, #8
 800f95a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f95c:	623a      	str	r2, [r7, #32]
 800f95e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f960:	69f9      	ldr	r1, [r7, #28]
 800f962:	6a3a      	ldr	r2, [r7, #32]
 800f964:	e841 2300 	strex	r3, r2, [r1]
 800f968:	61bb      	str	r3, [r7, #24]
   return(result);
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e5      	bne.n	800f93c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f970:	2300      	movs	r3, #0
}
 800f972:	4618      	mov	r0, r3
 800f974:	3758      	adds	r7, #88	; 0x58
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	0800fb8b 	.word	0x0800fb8b
 800f980:	0800fcad 	.word	0x0800fcad
 800f984:	0800fce5 	.word	0x0800fce5

0800f988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f988:	b480      	push	{r7}
 800f98a:	b08f      	sub	sp, #60	; 0x3c
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f996:	6a3b      	ldr	r3, [r7, #32]
 800f998:	e853 3f00 	ldrex	r3, [r3]
 800f99c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9b6:	e841 2300 	strex	r3, r2, [r1]
 800f9ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1e6      	bne.n	800f990 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	e853 3f00 	ldrex	r3, [r3]
 800f9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f9d8:	633b      	str	r3, [r7, #48]	; 0x30
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3308      	adds	r3, #8
 800f9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9e2:	61ba      	str	r2, [r7, #24]
 800f9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e6:	6979      	ldr	r1, [r7, #20]
 800f9e8:	69ba      	ldr	r2, [r7, #24]
 800f9ea:	e841 2300 	strex	r3, r2, [r1]
 800f9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1e5      	bne.n	800f9c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2220      	movs	r2, #32
 800f9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f9fe:	bf00      	nop
 800fa00:	373c      	adds	r7, #60	; 0x3c
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
	...

0800fa0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b095      	sub	sp, #84	; 0x54
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1c:	e853 3f00 	ldrex	r3, [r3]
 800fa20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa32:	643b      	str	r3, [r7, #64]	; 0x40
 800fa34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa3a:	e841 2300 	strex	r3, r2, [r1]
 800fa3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1e6      	bne.n	800fa14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3308      	adds	r3, #8
 800fa4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	e853 3f00 	ldrex	r3, [r3]
 800fa54:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa56:	69fa      	ldr	r2, [r7, #28]
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <UART_EndRxTransfer+0xc8>)
 800fa5a:	4013      	ands	r3, r2
 800fa5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3308      	adds	r3, #8
 800fa64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa6e:	e841 2300 	strex	r3, r2, [r1]
 800fa72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1e5      	bne.n	800fa46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d118      	bne.n	800fab4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	e853 3f00 	ldrex	r3, [r3]
 800fa8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	f023 0310 	bic.w	r3, r3, #16
 800fa96:	647b      	str	r3, [r7, #68]	; 0x44
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa0:	61bb      	str	r3, [r7, #24]
 800faa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa4:	6979      	ldr	r1, [r7, #20]
 800faa6:	69ba      	ldr	r2, [r7, #24]
 800faa8:	e841 2300 	strex	r3, r2, [r1]
 800faac:	613b      	str	r3, [r7, #16]
   return(result);
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1e6      	bne.n	800fa82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2220      	movs	r2, #32
 800fab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2200      	movs	r2, #0
 800fac6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fac8:	bf00      	nop
 800faca:	3754      	adds	r7, #84	; 0x54
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr
 800fad4:	effffffe 	.word	0xeffffffe

0800fad8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b090      	sub	sp, #64	; 0x40
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faee:	d037      	beq.n	800fb60 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800faf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf2:	2200      	movs	r2, #0
 800faf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800faf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	3308      	adds	r3, #8
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	e853 3f00 	ldrex	r3, [r3]
 800fb06:	623b      	str	r3, [r7, #32]
   return(result);
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3308      	adds	r3, #8
 800fb16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb18:	633a      	str	r2, [r7, #48]	; 0x30
 800fb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb20:	e841 2300 	strex	r3, r2, [r1]
 800fb24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1e5      	bne.n	800faf8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb40:	637b      	str	r3, [r7, #52]	; 0x34
 800fb42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4a:	61fb      	str	r3, [r7, #28]
 800fb4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	69b9      	ldr	r1, [r7, #24]
 800fb50:	69fa      	ldr	r2, [r7, #28]
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	617b      	str	r3, [r7, #20]
   return(result);
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e6      	bne.n	800fb2c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb5e:	e002      	b.n	800fb66 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fb60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb62:	f7fe ff19 	bl	800e998 <HAL_UART_TxCpltCallback>
}
 800fb66:	bf00      	nop
 800fb68:	3740      	adds	r7, #64	; 0x40
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b084      	sub	sp, #16
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7fe ff15 	bl	800e9ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb82:	bf00      	nop
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b09c      	sub	sp, #112	; 0x70
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb96:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	69db      	ldr	r3, [r3, #28]
 800fb9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fba0:	d071      	beq.n	800fc86 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fba4:	2200      	movs	r2, #0
 800fba6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb2:	e853 3f00 	ldrex	r3, [r3]
 800fbb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbc8:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbd0:	e841 2300 	strex	r3, r2, [r1]
 800fbd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d1e6      	bne.n	800fbaa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3308      	adds	r3, #8
 800fbe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	e853 3f00 	ldrex	r3, [r3]
 800fbea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbee:	f023 0301 	bic.w	r3, r3, #1
 800fbf2:	667b      	str	r3, [r7, #100]	; 0x64
 800fbf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	3308      	adds	r3, #8
 800fbfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fbfc:	647a      	str	r2, [r7, #68]	; 0x44
 800fbfe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc04:	e841 2300 	strex	r3, r2, [r1]
 800fc08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1e5      	bne.n	800fbdc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	3308      	adds	r3, #8
 800fc16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1a:	e853 3f00 	ldrex	r3, [r3]
 800fc1e:	623b      	str	r3, [r7, #32]
   return(result);
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc26:	663b      	str	r3, [r7, #96]	; 0x60
 800fc28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	3308      	adds	r3, #8
 800fc2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc30:	633a      	str	r2, [r7, #48]	; 0x30
 800fc32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc38:	e841 2300 	strex	r3, r2, [r1]
 800fc3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1e5      	bne.n	800fc10 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc46:	2220      	movs	r2, #32
 800fc48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d118      	bne.n	800fc86 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	e853 3f00 	ldrex	r3, [r3]
 800fc60:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f023 0310 	bic.w	r3, r3, #16
 800fc68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc72:	61fb      	str	r3, [r7, #28]
 800fc74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc76:	69b9      	ldr	r1, [r7, #24]
 800fc78:	69fa      	ldr	r2, [r7, #28]
 800fc7a:	e841 2300 	strex	r3, r2, [r1]
 800fc7e:	617b      	str	r3, [r7, #20]
   return(result);
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d1e6      	bne.n	800fc54 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d107      	bne.n	800fc9e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc94:	4619      	mov	r1, r3
 800fc96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fc98:	f7f3 f9e8 	bl	800306c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc9c:	e002      	b.n	800fca4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fc9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fca0:	f7fe fe8e 	bl	800e9c0 <HAL_UART_RxCpltCallback>
}
 800fca4:	bf00      	nop
 800fca6:	3770      	adds	r7, #112	; 0x70
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d109      	bne.n	800fcd6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcc8:	085b      	lsrs	r3, r3, #1
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4619      	mov	r1, r3
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f7f3 f9cc 	bl	800306c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fcd4:	e002      	b.n	800fcdc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f7fe fe7c 	bl	800e9d4 <HAL_UART_RxHalfCpltCallback>
}
 800fcdc:	bf00      	nop
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b086      	sub	sp, #24
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcf8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd0c:	2b80      	cmp	r3, #128	; 0x80
 800fd0e:	d109      	bne.n	800fd24 <UART_DMAError+0x40>
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	2b21      	cmp	r3, #33	; 0x21
 800fd14:	d106      	bne.n	800fd24 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fd1e:	6978      	ldr	r0, [r7, #20]
 800fd20:	f7ff fe32 	bl	800f988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd2e:	2b40      	cmp	r3, #64	; 0x40
 800fd30:	d109      	bne.n	800fd46 <UART_DMAError+0x62>
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2b22      	cmp	r3, #34	; 0x22
 800fd36:	d106      	bne.n	800fd46 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fd40:	6978      	ldr	r0, [r7, #20]
 800fd42:	f7ff fe63 	bl	800fa0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd4c:	f043 0210 	orr.w	r2, r3, #16
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd56:	6978      	ldr	r0, [r7, #20]
 800fd58:	f7fe fe46 	bl	800e9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd5c:	bf00      	nop
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f7fe fe30 	bl	800e9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd88:	bf00      	nop
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b088      	sub	sp, #32
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	e853 3f00 	ldrex	r3, [r3]
 800fda4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdac:	61fb      	str	r3, [r7, #28]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	61bb      	str	r3, [r7, #24]
 800fdb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdba:	6979      	ldr	r1, [r7, #20]
 800fdbc:	69ba      	ldr	r2, [r7, #24]
 800fdbe:	e841 2300 	strex	r3, r2, [r1]
 800fdc2:	613b      	str	r3, [r7, #16]
   return(result);
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1e6      	bne.n	800fd98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2220      	movs	r2, #32
 800fdce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7fe fddd 	bl	800e998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdde:	bf00      	nop
 800fde0:	3720      	adds	r7, #32
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fde6:	b480      	push	{r7}
 800fde8:	b083      	sub	sp, #12
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fdee:	bf00      	nop
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fdfa:	b480      	push	{r7}
 800fdfc:	b083      	sub	sp, #12
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fe02:	bf00      	nop
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr

0800fe0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fe0e:	b480      	push	{r7}
 800fe10:	b083      	sub	sp, #12
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fe16:	bf00      	nop
 800fe18:	370c      	adds	r7, #12
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr

0800fe22 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d101      	bne.n	800fe38 <HAL_UARTEx_EnableFifoMode+0x16>
 800fe34:	2302      	movs	r3, #2
 800fe36:	e02b      	b.n	800fe90 <HAL_UARTEx_EnableFifoMode+0x6e>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2224      	movs	r2, #36	; 0x24
 800fe44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f022 0201 	bic.w	r2, r2, #1
 800fe5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fe66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fe6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f91f 	bl	80100bc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2220      	movs	r2, #32
 800fe82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe8e:	2300      	movs	r3, #0
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d101      	bne.n	800feae <HAL_UARTEx_DisableFifoMode+0x16>
 800feaa:	2302      	movs	r3, #2
 800feac:	e027      	b.n	800fefe <HAL_UARTEx_DisableFifoMode+0x66>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2201      	movs	r2, #1
 800feb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2224      	movs	r2, #36	; 0x24
 800feba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f022 0201 	bic.w	r2, r2, #1
 800fed4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fedc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2220      	movs	r2, #32
 800fef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3714      	adds	r7, #20
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr

0800ff0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b084      	sub	sp, #16
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
 800ff12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d101      	bne.n	800ff22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff1e:	2302      	movs	r3, #2
 800ff20:	e02d      	b.n	800ff7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2201      	movs	r2, #1
 800ff26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2224      	movs	r2, #36	; 0x24
 800ff2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	f022 0201 	bic.w	r2, r2, #1
 800ff48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	430a      	orrs	r2, r1
 800ff5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 f8ac 	bl	80100bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2220      	movs	r2, #32
 800ff70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2200      	movs	r2, #0
 800ff78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b084      	sub	sp, #16
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d101      	bne.n	800ff9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff9a:	2302      	movs	r3, #2
 800ff9c:	e02d      	b.n	800fffa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2224      	movs	r2, #36	; 0x24
 800ffaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f022 0201 	bic.w	r2, r2, #1
 800ffc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	683a      	ldr	r2, [r7, #0]
 800ffd6:	430a      	orrs	r2, r1
 800ffd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f86e 	bl	80100bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2220      	movs	r2, #32
 800ffec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b08c      	sub	sp, #48	; 0x30
 8010006:	af00      	add	r7, sp, #0
 8010008:	60f8      	str	r0, [r7, #12]
 801000a:	60b9      	str	r1, [r7, #8]
 801000c:	4613      	mov	r3, r2
 801000e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010016:	2b20      	cmp	r3, #32
 8010018:	d14a      	bne.n	80100b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010020:	88fb      	ldrh	r3, [r7, #6]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010026:	2301      	movs	r3, #1
 8010028:	e043      	b.n	80100b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010030:	2b01      	cmp	r3, #1
 8010032:	d101      	bne.n	8010038 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010034:	2302      	movs	r3, #2
 8010036:	e03c      	b.n	80100b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2201      	movs	r2, #1
 801003c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2201      	movs	r2, #1
 8010044:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010046:	88fb      	ldrh	r3, [r7, #6]
 8010048:	461a      	mov	r2, r3
 801004a:	68b9      	ldr	r1, [r7, #8]
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f7ff fbf3 	bl	800f838 <UART_Start_Receive_DMA>
 8010052:	4603      	mov	r3, r0
 8010054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801005c:	2b00      	cmp	r3, #0
 801005e:	d124      	bne.n	80100aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010064:	2b01      	cmp	r3, #1
 8010066:	d11d      	bne.n	80100a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2210      	movs	r2, #16
 801006e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	e853 3f00 	ldrex	r3, [r3]
 801007c:	617b      	str	r3, [r7, #20]
   return(result);
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f043 0310 	orr.w	r3, r3, #16
 8010084:	62bb      	str	r3, [r7, #40]	; 0x28
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008e:	627b      	str	r3, [r7, #36]	; 0x24
 8010090:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010092:	6a39      	ldr	r1, [r7, #32]
 8010094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010096:	e841 2300 	strex	r3, r2, [r1]
 801009a:	61fb      	str	r3, [r7, #28]
   return(result);
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1e6      	bne.n	8010070 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80100a2:	e002      	b.n	80100aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80100a4:	2301      	movs	r3, #1
 80100a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80100aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100ae:	e000      	b.n	80100b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80100b0:	2302      	movs	r3, #2
  }
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3730      	adds	r7, #48	; 0x30
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
	...

080100bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100bc:	b480      	push	{r7}
 80100be:	b085      	sub	sp, #20
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d108      	bne.n	80100de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100dc:	e031      	b.n	8010142 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100de:	2310      	movs	r3, #16
 80100e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100e2:	2310      	movs	r3, #16
 80100e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	0e5b      	lsrs	r3, r3, #25
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	f003 0307 	and.w	r3, r3, #7
 80100f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	0f5b      	lsrs	r3, r3, #29
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	f003 0307 	and.w	r3, r3, #7
 8010104:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010106:	7bbb      	ldrb	r3, [r7, #14]
 8010108:	7b3a      	ldrb	r2, [r7, #12]
 801010a:	4911      	ldr	r1, [pc, #68]	; (8010150 <UARTEx_SetNbDataToProcess+0x94>)
 801010c:	5c8a      	ldrb	r2, [r1, r2]
 801010e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010112:	7b3a      	ldrb	r2, [r7, #12]
 8010114:	490f      	ldr	r1, [pc, #60]	; (8010154 <UARTEx_SetNbDataToProcess+0x98>)
 8010116:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010118:	fb93 f3f2 	sdiv	r3, r3, r2
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010124:	7bfb      	ldrb	r3, [r7, #15]
 8010126:	7b7a      	ldrb	r2, [r7, #13]
 8010128:	4909      	ldr	r1, [pc, #36]	; (8010150 <UARTEx_SetNbDataToProcess+0x94>)
 801012a:	5c8a      	ldrb	r2, [r1, r2]
 801012c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010130:	7b7a      	ldrb	r2, [r7, #13]
 8010132:	4908      	ldr	r1, [pc, #32]	; (8010154 <UARTEx_SetNbDataToProcess+0x98>)
 8010134:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010136:	fb93 f3f2 	sdiv	r3, r3, r2
 801013a:	b29a      	uxth	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010142:	bf00      	nop
 8010144:	3714      	adds	r7, #20
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	080141d4 	.word	0x080141d4
 8010154:	080141dc 	.word	0x080141dc

08010158 <checkint>:
 8010158:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801015c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010160:	429a      	cmp	r2, r3
 8010162:	b570      	push	{r4, r5, r6, lr}
 8010164:	dd2a      	ble.n	80101bc <checkint+0x64>
 8010166:	f240 4333 	movw	r3, #1075	; 0x433
 801016a:	429a      	cmp	r2, r3
 801016c:	dc24      	bgt.n	80101b8 <checkint+0x60>
 801016e:	1a9b      	subs	r3, r3, r2
 8010170:	f1a3 0620 	sub.w	r6, r3, #32
 8010174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010178:	fa02 f403 	lsl.w	r4, r2, r3
 801017c:	fa02 f606 	lsl.w	r6, r2, r6
 8010180:	f1c3 0520 	rsb	r5, r3, #32
 8010184:	fa22 f505 	lsr.w	r5, r2, r5
 8010188:	4334      	orrs	r4, r6
 801018a:	432c      	orrs	r4, r5
 801018c:	409a      	lsls	r2, r3
 801018e:	ea20 0202 	bic.w	r2, r0, r2
 8010192:	ea21 0404 	bic.w	r4, r1, r4
 8010196:	4322      	orrs	r2, r4
 8010198:	f1a3 0420 	sub.w	r4, r3, #32
 801019c:	f1c3 0220 	rsb	r2, r3, #32
 80101a0:	d10c      	bne.n	80101bc <checkint+0x64>
 80101a2:	40d8      	lsrs	r0, r3
 80101a4:	fa01 f302 	lsl.w	r3, r1, r2
 80101a8:	4318      	orrs	r0, r3
 80101aa:	40e1      	lsrs	r1, r4
 80101ac:	4308      	orrs	r0, r1
 80101ae:	f000 0001 	and.w	r0, r0, #1
 80101b2:	f1d0 0002 	rsbs	r0, r0, #2
 80101b6:	bd70      	pop	{r4, r5, r6, pc}
 80101b8:	2002      	movs	r0, #2
 80101ba:	e7fc      	b.n	80101b6 <checkint+0x5e>
 80101bc:	2000      	movs	r0, #0
 80101be:	e7fa      	b.n	80101b6 <checkint+0x5e>

080101c0 <pow>:
 80101c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c4:	ee10 4a90 	vmov	r4, s1
 80101c8:	ed2d 8b0a 	vpush	{d8-d12}
 80101cc:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80101d0:	ee11 7a90 	vmov	r7, s3
 80101d4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80101d8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80101dc:	429a      	cmp	r2, r3
 80101de:	ee10 6a10 	vmov	r6, s0
 80101e2:	ee11 0a10 	vmov	r0, s2
 80101e6:	b086      	sub	sp, #24
 80101e8:	46d4      	mov	ip, sl
 80101ea:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80101ee:	d806      	bhi.n	80101fe <pow+0x3e>
 80101f0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80101f4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80101f8:	2b7f      	cmp	r3, #127	; 0x7f
 80101fa:	f240 8156 	bls.w	80104aa <pow+0x2ea>
 80101fe:	1802      	adds	r2, r0, r0
 8010200:	eb47 0107 	adc.w	r1, r7, r7
 8010204:	f06f 0e01 	mvn.w	lr, #1
 8010208:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 801020c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8010210:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010214:	45ce      	cmp	lr, r9
 8010216:	eb73 0808 	sbcs.w	r8, r3, r8
 801021a:	d23f      	bcs.n	801029c <pow+0xdc>
 801021c:	ea52 0301 	orrs.w	r3, r2, r1
 8010220:	f04f 0300 	mov.w	r3, #0
 8010224:	d10c      	bne.n	8010240 <pow+0x80>
 8010226:	19b6      	adds	r6, r6, r6
 8010228:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801022c:	4164      	adcs	r4, r4
 801022e:	42b3      	cmp	r3, r6
 8010230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010234:	41a3      	sbcs	r3, r4
 8010236:	f0c0 808c 	bcc.w	8010352 <pow+0x192>
 801023a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801023e:	e028      	b.n	8010292 <pow+0xd2>
 8010240:	4da3      	ldr	r5, [pc, #652]	; (80104d0 <pow+0x310>)
 8010242:	42ac      	cmp	r4, r5
 8010244:	bf08      	it	eq
 8010246:	429e      	cmpeq	r6, r3
 8010248:	d107      	bne.n	801025a <pow+0x9a>
 801024a:	1800      	adds	r0, r0, r0
 801024c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010250:	417f      	adcs	r7, r7
 8010252:	4283      	cmp	r3, r0
 8010254:	4b9f      	ldr	r3, [pc, #636]	; (80104d4 <pow+0x314>)
 8010256:	41bb      	sbcs	r3, r7
 8010258:	e7ed      	b.n	8010236 <pow+0x76>
 801025a:	19b6      	adds	r6, r6, r6
 801025c:	489e      	ldr	r0, [pc, #632]	; (80104d8 <pow+0x318>)
 801025e:	4164      	adcs	r4, r4
 8010260:	42b3      	cmp	r3, r6
 8010262:	eb70 0504 	sbcs.w	r5, r0, r4
 8010266:	d374      	bcc.n	8010352 <pow+0x192>
 8010268:	4281      	cmp	r1, r0
 801026a:	bf08      	it	eq
 801026c:	429a      	cmpeq	r2, r3
 801026e:	d170      	bne.n	8010352 <pow+0x192>
 8010270:	4a9a      	ldr	r2, [pc, #616]	; (80104dc <pow+0x31c>)
 8010272:	4294      	cmp	r4, r2
 8010274:	bf08      	it	eq
 8010276:	429e      	cmpeq	r6, r3
 8010278:	d0df      	beq.n	801023a <pow+0x7a>
 801027a:	4294      	cmp	r4, r2
 801027c:	ea6f 0707 	mvn.w	r7, r7
 8010280:	bf34      	ite	cc
 8010282:	2400      	movcc	r4, #0
 8010284:	2401      	movcs	r4, #1
 8010286:	0fff      	lsrs	r7, r7, #31
 8010288:	42bc      	cmp	r4, r7
 801028a:	f040 81d9 	bne.w	8010640 <pow+0x480>
 801028e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010292:	b006      	add	sp, #24
 8010294:	ecbd 8b0a 	vpop	{d8-d12}
 8010298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029c:	eb16 0806 	adds.w	r8, r6, r6
 80102a0:	eb44 0904 	adc.w	r9, r4, r4
 80102a4:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 80102a8:	f169 0200 	sbc.w	r2, r9, #0
 80102ac:	458e      	cmp	lr, r1
 80102ae:	4193      	sbcs	r3, r2
 80102b0:	d223      	bcs.n	80102fa <pow+0x13a>
 80102b2:	ee20 0b00 	vmul.f64	d0, d0, d0
 80102b6:	2c00      	cmp	r4, #0
 80102b8:	da12      	bge.n	80102e0 <pow+0x120>
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7ff ff4c 	bl	8010158 <checkint>
 80102c0:	2801      	cmp	r0, #1
 80102c2:	d10d      	bne.n	80102e0 <pow+0x120>
 80102c4:	eeb1 0b40 	vneg.f64	d0, d0
 80102c8:	ea58 0309 	orrs.w	r3, r8, r9
 80102cc:	d10a      	bne.n	80102e4 <pow+0x124>
 80102ce:	2f00      	cmp	r7, #0
 80102d0:	dadf      	bge.n	8010292 <pow+0xd2>
 80102d2:	b006      	add	sp, #24
 80102d4:	ecbd 8b0a 	vpop	{d8-d12}
 80102d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102dc:	f000 bfec 	b.w	80112b8 <__math_divzero>
 80102e0:	2000      	movs	r0, #0
 80102e2:	e7f1      	b.n	80102c8 <pow+0x108>
 80102e4:	2f00      	cmp	r7, #0
 80102e6:	dad4      	bge.n	8010292 <pow+0xd2>
 80102e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80102ec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80102f0:	ed8d 7b00 	vstr	d7, [sp]
 80102f4:	ed9d 0b00 	vldr	d0, [sp]
 80102f8:	e7cb      	b.n	8010292 <pow+0xd2>
 80102fa:	2c00      	cmp	r4, #0
 80102fc:	da2c      	bge.n	8010358 <pow+0x198>
 80102fe:	4639      	mov	r1, r7
 8010300:	f7ff ff2a 	bl	8010158 <checkint>
 8010304:	b930      	cbnz	r0, 8010314 <pow+0x154>
 8010306:	b006      	add	sp, #24
 8010308:	ecbd 8b0a 	vpop	{d8-d12}
 801030c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010310:	f000 bfea 	b.w	80112e8 <__math_invalid>
 8010314:	2801      	cmp	r0, #1
 8010316:	bf14      	ite	ne
 8010318:	2000      	movne	r0, #0
 801031a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801031e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010322:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010326:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801032a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801032e:	2b7f      	cmp	r3, #127	; 0x7f
 8010330:	d92d      	bls.n	801038e <pow+0x1ce>
 8010332:	4b67      	ldr	r3, [pc, #412]	; (80104d0 <pow+0x310>)
 8010334:	2000      	movs	r0, #0
 8010336:	429c      	cmp	r4, r3
 8010338:	bf08      	it	eq
 801033a:	4286      	cmpeq	r6, r0
 801033c:	f43f af7d 	beq.w	801023a <pow+0x7a>
 8010340:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010344:	428a      	cmp	r2, r1
 8010346:	d80c      	bhi.n	8010362 <pow+0x1a2>
 8010348:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801034c:	42b0      	cmp	r0, r6
 801034e:	41a3      	sbcs	r3, r4
 8010350:	d204      	bcs.n	801035c <pow+0x19c>
 8010352:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010356:	e79c      	b.n	8010292 <pow+0xd2>
 8010358:	2000      	movs	r0, #0
 801035a:	e7e4      	b.n	8010326 <pow+0x166>
 801035c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010360:	e797      	b.n	8010292 <pow+0xd2>
 8010362:	2e01      	cmp	r6, #1
 8010364:	eb74 0303 	sbcs.w	r3, r4, r3
 8010368:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801036c:	bf34      	ite	cc
 801036e:	2301      	movcc	r3, #1
 8010370:	2300      	movcs	r3, #0
 8010372:	4295      	cmp	r5, r2
 8010374:	bf8c      	ite	hi
 8010376:	2500      	movhi	r5, #0
 8010378:	2501      	movls	r5, #1
 801037a:	42ab      	cmp	r3, r5
 801037c:	f000 809d 	beq.w	80104ba <pow+0x2fa>
 8010380:	b006      	add	sp, #24
 8010382:	ecbd 8b0a 	vpop	{d8-d12}
 8010386:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801038a:	f000 bf8d 	b.w	80112a8 <__math_oflow>
 801038e:	f1bc 0f00 	cmp.w	ip, #0
 8010392:	d10b      	bne.n	80103ac <pow+0x1ec>
 8010394:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80104c8 <pow+0x308>
 8010398:	ee20 7b07 	vmul.f64	d7, d0, d7
 801039c:	ec53 2b17 	vmov	r2, r3, d7
 80103a0:	ee17 6a10 	vmov	r6, s14
 80103a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80103a8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80103ac:	4b4c      	ldr	r3, [pc, #304]	; (80104e0 <pow+0x320>)
 80103ae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80103b2:	4423      	add	r3, r4
 80103b4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80103b8:	1519      	asrs	r1, r3, #20
 80103ba:	0d1b      	lsrs	r3, r3, #20
 80103bc:	051b      	lsls	r3, r3, #20
 80103be:	eba4 0903 	sub.w	r9, r4, r3
 80103c2:	4b48      	ldr	r3, [pc, #288]	; (80104e4 <pow+0x324>)
 80103c4:	ee04 1a10 	vmov	s8, r1
 80103c8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80103cc:	f1b6 0800 	subs.w	r8, r6, #0
 80103d0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80103d4:	ec49 8b15 	vmov	d5, r8, r9
 80103d8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80103dc:	eea5 6b07 	vfma.f64	d6, d5, d7
 80103e0:	ed93 7b00 	vldr	d7, [r3]
 80103e4:	ed93 5b02 	vldr	d5, [r3, #8]
 80103e8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80103ec:	eea4 2b07 	vfma.f64	d2, d4, d7
 80103f0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80103f4:	ee36 ab02 	vadd.f64	d10, d6, d2
 80103f8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80103fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010400:	ed93 5b04 	vldr	d5, [r3, #16]
 8010404:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010408:	ee37 7b02 	vadd.f64	d7, d7, d2
 801040c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010410:	ed93 4b08 	vldr	d4, [r3, #32]
 8010414:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010418:	eeb0 9b40 	vmov.f64	d9, d0
 801041c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010420:	ed93 5b06 	vldr	d5, [r3, #24]
 8010424:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010428:	ee26 bb00 	vmul.f64	d11, d6, d0
 801042c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010430:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010434:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010438:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801043c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010440:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010444:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010448:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801044c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010450:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010454:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010458:	eea0 4b03 	vfma.f64	d4, d0, d3
 801045c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010460:	eeab ab05 	vfma.f64	d10, d11, d5
 8010464:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010468:	ee21 7b06 	vmul.f64	d7, d1, d6
 801046c:	ee17 3a90 	vmov	r3, s15
 8010470:	eeb0 5b47 	vmov.f64	d5, d7
 8010474:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010478:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801047c:	18b2      	adds	r2, r6, r2
 801047e:	2a3e      	cmp	r2, #62	; 0x3e
 8010480:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010484:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010488:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801048c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010490:	d92b      	bls.n	80104ea <pow+0x32a>
 8010492:	2a00      	cmp	r2, #0
 8010494:	da0b      	bge.n	80104ae <pow+0x2ee>
 8010496:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801049a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801049e:	2800      	cmp	r0, #0
 80104a0:	f43f aef7 	beq.w	8010292 <pow+0xd2>
 80104a4:	eeb1 0b40 	vneg.f64	d0, d0
 80104a8:	e6f3      	b.n	8010292 <pow+0xd2>
 80104aa:	2000      	movs	r0, #0
 80104ac:	e77e      	b.n	80103ac <pow+0x1ec>
 80104ae:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80104b2:	d919      	bls.n	80104e8 <pow+0x328>
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f6bf af63 	bge.w	8010380 <pow+0x1c0>
 80104ba:	b006      	add	sp, #24
 80104bc:	ecbd 8b0a 	vpop	{d8-d12}
 80104c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c4:	f000 bee8 	b.w	8011298 <__math_uflow>
 80104c8:	00000000 	.word	0x00000000
 80104cc:	43300000 	.word	0x43300000
 80104d0:	3ff00000 	.word	0x3ff00000
 80104d4:	fff00000 	.word	0xfff00000
 80104d8:	ffe00000 	.word	0xffe00000
 80104dc:	7fe00000 	.word	0x7fe00000
 80104e0:	c0196aab 	.word	0xc0196aab
 80104e4:	080141e8 	.word	0x080141e8
 80104e8:	2600      	movs	r6, #0
 80104ea:	495d      	ldr	r1, [pc, #372]	; (8010660 <pow+0x4a0>)
 80104ec:	ed91 4b02 	vldr	d4, [r1, #8]
 80104f0:	ed91 3b00 	vldr	d3, [r1]
 80104f4:	eeb0 6b44 	vmov.f64	d6, d4
 80104f8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80104fc:	ee16 5a10 	vmov	r5, s12
 8010500:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010504:	ed91 4b04 	vldr	d4, [r1, #16]
 8010508:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801050c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010510:	eeb0 0b47 	vmov.f64	d0, d7
 8010514:	ed91 7b06 	vldr	d7, [r1, #24]
 8010518:	18dc      	adds	r4, r3, r3
 801051a:	f104 030f 	add.w	r3, r4, #15
 801051e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010522:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010526:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801052a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801052e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010532:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010536:	ed91 5b08 	vldr	d5, [r1, #32]
 801053a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801053e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010542:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010546:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801054a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801054e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010552:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010556:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801055a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801055e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010562:	1940      	adds	r0, r0, r5
 8010564:	2700      	movs	r7, #0
 8010566:	eb17 020c 	adds.w	r2, r7, ip
 801056a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801056e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010572:	2e00      	cmp	r6, #0
 8010574:	d15f      	bne.n	8010636 <pow+0x476>
 8010576:	42bd      	cmp	r5, r7
 8010578:	db13      	blt.n	80105a2 <pow+0x3e2>
 801057a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801057e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010582:	4610      	mov	r0, r2
 8010584:	ec41 0b10 	vmov	d0, r0, r1
 8010588:	eea7 0b00 	vfma.f64	d0, d7, d0
 801058c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010648 <pow+0x488>
 8010590:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010594:	b006      	add	sp, #24
 8010596:	ecbd 8b0a 	vpop	{d8-d12}
 801059a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801059e:	f000 bebb 	b.w	8011318 <__math_check_oflow>
 80105a2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80105a6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80105aa:	4610      	mov	r0, r2
 80105ac:	ec41 0b15 	vmov	d5, r0, r1
 80105b0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80105b4:	ee27 6b05 	vmul.f64	d6, d7, d5
 80105b8:	ee35 7b06 	vadd.f64	d7, d5, d6
 80105bc:	eeb0 3bc7 	vabs.f64	d3, d7
 80105c0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80105c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010650 <pow+0x490>
 80105cc:	d52a      	bpl.n	8010624 <pow+0x464>
 80105ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80105d2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80105d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105da:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80105de:	ee35 6b06 	vadd.f64	d6, d5, d6
 80105e2:	bf48      	it	mi
 80105e4:	eeb0 4b43 	vmovmi.f64	d4, d3
 80105e8:	ee37 3b04 	vadd.f64	d3, d7, d4
 80105ec:	ee34 5b43 	vsub.f64	d5, d4, d3
 80105f0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80105f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80105f8:	ee37 7b03 	vadd.f64	d7, d7, d3
 80105fc:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010600:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010608:	d104      	bne.n	8010614 <pow+0x454>
 801060a:	4632      	mov	r2, r6
 801060c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010610:	ec43 2b17 	vmov	d7, r2, r3
 8010614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010618:	ed9d 6b02 	vldr	d6, [sp, #8]
 801061c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010620:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010624:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010628:	b006      	add	sp, #24
 801062a:	ecbd 8b0a 	vpop	{d8-d12}
 801062e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010632:	f000 be68 	b.w	8011306 <__math_check_uflow>
 8010636:	ec43 2b10 	vmov	d0, r2, r3
 801063a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801063e:	e628      	b.n	8010292 <pow+0xd2>
 8010640:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010658 <pow+0x498>
 8010644:	e625      	b.n	8010292 <pow+0xd2>
 8010646:	bf00      	nop
 8010648:	00000000 	.word	0x00000000
 801064c:	7f000000 	.word	0x7f000000
 8010650:	00000000 	.word	0x00000000
 8010654:	00100000 	.word	0x00100000
	...
 8010660:	080153d0 	.word	0x080153d0
 8010664:	00000000 	.word	0x00000000

08010668 <cos>:
 8010668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801066a:	eeb0 7b40 	vmov.f64	d7, d0
 801066e:	ee17 3a90 	vmov	r3, s15
 8010672:	4a21      	ldr	r2, [pc, #132]	; (80106f8 <cos+0x90>)
 8010674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010678:	4293      	cmp	r3, r2
 801067a:	dc06      	bgt.n	801068a <cos+0x22>
 801067c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80106f0 <cos+0x88>
 8010680:	b005      	add	sp, #20
 8010682:	f85d eb04 	ldr.w	lr, [sp], #4
 8010686:	f000 ba8f 	b.w	8010ba8 <__kernel_cos>
 801068a:	4a1c      	ldr	r2, [pc, #112]	; (80106fc <cos+0x94>)
 801068c:	4293      	cmp	r3, r2
 801068e:	dd04      	ble.n	801069a <cos+0x32>
 8010690:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010694:	b005      	add	sp, #20
 8010696:	f85d fb04 	ldr.w	pc, [sp], #4
 801069a:	4668      	mov	r0, sp
 801069c:	f000 f89c 	bl	80107d8 <__ieee754_rem_pio2>
 80106a0:	f000 0003 	and.w	r0, r0, #3
 80106a4:	2801      	cmp	r0, #1
 80106a6:	d009      	beq.n	80106bc <cos+0x54>
 80106a8:	2802      	cmp	r0, #2
 80106aa:	d010      	beq.n	80106ce <cos+0x66>
 80106ac:	b9b0      	cbnz	r0, 80106dc <cos+0x74>
 80106ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106b2:	ed9d 0b00 	vldr	d0, [sp]
 80106b6:	f000 fa77 	bl	8010ba8 <__kernel_cos>
 80106ba:	e7eb      	b.n	8010694 <cos+0x2c>
 80106bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106c0:	ed9d 0b00 	vldr	d0, [sp]
 80106c4:	f000 fd74 	bl	80111b0 <__kernel_sin>
 80106c8:	eeb1 0b40 	vneg.f64	d0, d0
 80106cc:	e7e2      	b.n	8010694 <cos+0x2c>
 80106ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106d2:	ed9d 0b00 	vldr	d0, [sp]
 80106d6:	f000 fa67 	bl	8010ba8 <__kernel_cos>
 80106da:	e7f5      	b.n	80106c8 <cos+0x60>
 80106dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106e0:	ed9d 0b00 	vldr	d0, [sp]
 80106e4:	2001      	movs	r0, #1
 80106e6:	f000 fd63 	bl	80111b0 <__kernel_sin>
 80106ea:	e7d3      	b.n	8010694 <cos+0x2c>
 80106ec:	f3af 8000 	nop.w
	...
 80106f8:	3fe921fb 	.word	0x3fe921fb
 80106fc:	7fefffff 	.word	0x7fefffff

08010700 <sin>:
 8010700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010702:	eeb0 7b40 	vmov.f64	d7, d0
 8010706:	ee17 3a90 	vmov	r3, s15
 801070a:	4a21      	ldr	r2, [pc, #132]	; (8010790 <sin+0x90>)
 801070c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010710:	4293      	cmp	r3, r2
 8010712:	dc07      	bgt.n	8010724 <sin+0x24>
 8010714:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010788 <sin+0x88>
 8010718:	2000      	movs	r0, #0
 801071a:	b005      	add	sp, #20
 801071c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010720:	f000 bd46 	b.w	80111b0 <__kernel_sin>
 8010724:	4a1b      	ldr	r2, [pc, #108]	; (8010794 <sin+0x94>)
 8010726:	4293      	cmp	r3, r2
 8010728:	dd04      	ble.n	8010734 <sin+0x34>
 801072a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801072e:	b005      	add	sp, #20
 8010730:	f85d fb04 	ldr.w	pc, [sp], #4
 8010734:	4668      	mov	r0, sp
 8010736:	f000 f84f 	bl	80107d8 <__ieee754_rem_pio2>
 801073a:	f000 0003 	and.w	r0, r0, #3
 801073e:	2801      	cmp	r0, #1
 8010740:	d00a      	beq.n	8010758 <sin+0x58>
 8010742:	2802      	cmp	r0, #2
 8010744:	d00f      	beq.n	8010766 <sin+0x66>
 8010746:	b9c0      	cbnz	r0, 801077a <sin+0x7a>
 8010748:	ed9d 1b02 	vldr	d1, [sp, #8]
 801074c:	ed9d 0b00 	vldr	d0, [sp]
 8010750:	2001      	movs	r0, #1
 8010752:	f000 fd2d 	bl	80111b0 <__kernel_sin>
 8010756:	e7ea      	b.n	801072e <sin+0x2e>
 8010758:	ed9d 1b02 	vldr	d1, [sp, #8]
 801075c:	ed9d 0b00 	vldr	d0, [sp]
 8010760:	f000 fa22 	bl	8010ba8 <__kernel_cos>
 8010764:	e7e3      	b.n	801072e <sin+0x2e>
 8010766:	ed9d 1b02 	vldr	d1, [sp, #8]
 801076a:	ed9d 0b00 	vldr	d0, [sp]
 801076e:	2001      	movs	r0, #1
 8010770:	f000 fd1e 	bl	80111b0 <__kernel_sin>
 8010774:	eeb1 0b40 	vneg.f64	d0, d0
 8010778:	e7d9      	b.n	801072e <sin+0x2e>
 801077a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801077e:	ed9d 0b00 	vldr	d0, [sp]
 8010782:	f000 fa11 	bl	8010ba8 <__kernel_cos>
 8010786:	e7f5      	b.n	8010774 <sin+0x74>
	...
 8010790:	3fe921fb 	.word	0x3fe921fb
 8010794:	7fefffff 	.word	0x7fefffff

08010798 <atan2f>:
 8010798:	f000 b962 	b.w	8010a60 <__ieee754_atan2f>

0801079c <sqrtf>:
 801079c:	b508      	push	{r3, lr}
 801079e:	ed2d 8b02 	vpush	{d8}
 80107a2:	eeb0 8a40 	vmov.f32	s16, s0
 80107a6:	f000 f9f9 	bl	8010b9c <__ieee754_sqrtf>
 80107aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b2:	d60c      	bvs.n	80107ce <sqrtf+0x32>
 80107b4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80107d4 <sqrtf+0x38>
 80107b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80107bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c0:	d505      	bpl.n	80107ce <sqrtf+0x32>
 80107c2:	f000 ffa3 	bl	801170c <__errno>
 80107c6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80107ca:	2321      	movs	r3, #33	; 0x21
 80107cc:	6003      	str	r3, [r0, #0]
 80107ce:	ecbd 8b02 	vpop	{d8}
 80107d2:	bd08      	pop	{r3, pc}
 80107d4:	00000000 	.word	0x00000000

080107d8 <__ieee754_rem_pio2>:
 80107d8:	b570      	push	{r4, r5, r6, lr}
 80107da:	eeb0 7b40 	vmov.f64	d7, d0
 80107de:	ee17 5a90 	vmov	r5, s15
 80107e2:	4b99      	ldr	r3, [pc, #612]	; (8010a48 <__ieee754_rem_pio2+0x270>)
 80107e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80107e8:	429e      	cmp	r6, r3
 80107ea:	b088      	sub	sp, #32
 80107ec:	4604      	mov	r4, r0
 80107ee:	dc07      	bgt.n	8010800 <__ieee754_rem_pio2+0x28>
 80107f0:	2200      	movs	r2, #0
 80107f2:	2300      	movs	r3, #0
 80107f4:	ed84 0b00 	vstr	d0, [r4]
 80107f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80107fc:	2000      	movs	r0, #0
 80107fe:	e01b      	b.n	8010838 <__ieee754_rem_pio2+0x60>
 8010800:	4b92      	ldr	r3, [pc, #584]	; (8010a4c <__ieee754_rem_pio2+0x274>)
 8010802:	429e      	cmp	r6, r3
 8010804:	dc3b      	bgt.n	801087e <__ieee754_rem_pio2+0xa6>
 8010806:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801080a:	2d00      	cmp	r5, #0
 801080c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8010a08 <__ieee754_rem_pio2+0x230>
 8010810:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010814:	dd19      	ble.n	801084a <__ieee754_rem_pio2+0x72>
 8010816:	ee30 7b46 	vsub.f64	d7, d0, d6
 801081a:	429e      	cmp	r6, r3
 801081c:	d00e      	beq.n	801083c <__ieee754_rem_pio2+0x64>
 801081e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010a10 <__ieee754_rem_pio2+0x238>
 8010822:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010826:	ee37 7b45 	vsub.f64	d7, d7, d5
 801082a:	ed84 5b00 	vstr	d5, [r4]
 801082e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010832:	ed84 7b02 	vstr	d7, [r4, #8]
 8010836:	2001      	movs	r0, #1
 8010838:	b008      	add	sp, #32
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010a18 <__ieee754_rem_pio2+0x240>
 8010840:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010844:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010a20 <__ieee754_rem_pio2+0x248>
 8010848:	e7eb      	b.n	8010822 <__ieee754_rem_pio2+0x4a>
 801084a:	429e      	cmp	r6, r3
 801084c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010850:	d00e      	beq.n	8010870 <__ieee754_rem_pio2+0x98>
 8010852:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8010a10 <__ieee754_rem_pio2+0x238>
 8010856:	ee37 5b06 	vadd.f64	d5, d7, d6
 801085a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801085e:	ed84 5b00 	vstr	d5, [r4]
 8010862:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801086a:	ed84 7b02 	vstr	d7, [r4, #8]
 801086e:	e7e3      	b.n	8010838 <__ieee754_rem_pio2+0x60>
 8010870:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010a18 <__ieee754_rem_pio2+0x240>
 8010874:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010878:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010a20 <__ieee754_rem_pio2+0x248>
 801087c:	e7eb      	b.n	8010856 <__ieee754_rem_pio2+0x7e>
 801087e:	4b74      	ldr	r3, [pc, #464]	; (8010a50 <__ieee754_rem_pio2+0x278>)
 8010880:	429e      	cmp	r6, r3
 8010882:	dc70      	bgt.n	8010966 <__ieee754_rem_pio2+0x18e>
 8010884:	f000 fd5c 	bl	8011340 <fabs>
 8010888:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801088c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010a28 <__ieee754_rem_pio2+0x250>
 8010890:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010894:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010898:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801089c:	ee17 0a90 	vmov	r0, s15
 80108a0:	eeb1 4b45 	vneg.f64	d4, d5
 80108a4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010a08 <__ieee754_rem_pio2+0x230>
 80108a8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80108ac:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010a10 <__ieee754_rem_pio2+0x238>
 80108b0:	281f      	cmp	r0, #31
 80108b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80108b6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80108ba:	dc08      	bgt.n	80108ce <__ieee754_rem_pio2+0xf6>
 80108bc:	4b65      	ldr	r3, [pc, #404]	; (8010a54 <__ieee754_rem_pio2+0x27c>)
 80108be:	1e42      	subs	r2, r0, #1
 80108c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108c4:	42b3      	cmp	r3, r6
 80108c6:	d002      	beq.n	80108ce <__ieee754_rem_pio2+0xf6>
 80108c8:	ed84 6b00 	vstr	d6, [r4]
 80108cc:	e026      	b.n	801091c <__ieee754_rem_pio2+0x144>
 80108ce:	ee16 3a90 	vmov	r3, s13
 80108d2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80108d6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80108da:	2b10      	cmp	r3, #16
 80108dc:	ea4f 5226 	mov.w	r2, r6, asr #20
 80108e0:	ddf2      	ble.n	80108c8 <__ieee754_rem_pio2+0xf0>
 80108e2:	eeb0 6b40 	vmov.f64	d6, d0
 80108e6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010a18 <__ieee754_rem_pio2+0x240>
 80108ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010a20 <__ieee754_rem_pio2+0x248>
 80108ee:	eea4 6b07 	vfma.f64	d6, d4, d7
 80108f2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80108f6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80108fa:	eeb0 7b40 	vmov.f64	d7, d0
 80108fe:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010902:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010906:	ee13 3a90 	vmov	r3, s7
 801090a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	2b31      	cmp	r3, #49	; 0x31
 8010912:	dc17      	bgt.n	8010944 <__ieee754_rem_pio2+0x16c>
 8010914:	eeb0 0b46 	vmov.f64	d0, d6
 8010918:	ed84 3b00 	vstr	d3, [r4]
 801091c:	ed94 6b00 	vldr	d6, [r4]
 8010920:	2d00      	cmp	r5, #0
 8010922:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010926:	ee30 0b47 	vsub.f64	d0, d0, d7
 801092a:	ed84 0b02 	vstr	d0, [r4, #8]
 801092e:	da83      	bge.n	8010838 <__ieee754_rem_pio2+0x60>
 8010930:	eeb1 6b46 	vneg.f64	d6, d6
 8010934:	eeb1 0b40 	vneg.f64	d0, d0
 8010938:	ed84 6b00 	vstr	d6, [r4]
 801093c:	ed84 0b02 	vstr	d0, [r4, #8]
 8010940:	4240      	negs	r0, r0
 8010942:	e779      	b.n	8010838 <__ieee754_rem_pio2+0x60>
 8010944:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8010a30 <__ieee754_rem_pio2+0x258>
 8010948:	eeb0 0b46 	vmov.f64	d0, d6
 801094c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010950:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010954:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8010a38 <__ieee754_rem_pio2+0x260>
 8010958:	eea4 7b03 	vfma.f64	d7, d4, d3
 801095c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010960:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010964:	e7b0      	b.n	80108c8 <__ieee754_rem_pio2+0xf0>
 8010966:	4b3c      	ldr	r3, [pc, #240]	; (8010a58 <__ieee754_rem_pio2+0x280>)
 8010968:	429e      	cmp	r6, r3
 801096a:	dd06      	ble.n	801097a <__ieee754_rem_pio2+0x1a2>
 801096c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010970:	ed80 7b02 	vstr	d7, [r0, #8]
 8010974:	ed80 7b00 	vstr	d7, [r0]
 8010978:	e740      	b.n	80107fc <__ieee754_rem_pio2+0x24>
 801097a:	1532      	asrs	r2, r6, #20
 801097c:	ee10 0a10 	vmov	r0, s0
 8010980:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010984:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010988:	ec41 0b17 	vmov	d7, r0, r1
 801098c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010990:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010a40 <__ieee754_rem_pio2+0x268>
 8010994:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010998:	ee37 7b46 	vsub.f64	d7, d7, d6
 801099c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80109a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80109a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80109a8:	a902      	add	r1, sp, #8
 80109aa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80109ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80109b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80109b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80109ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80109be:	2603      	movs	r6, #3
 80109c0:	4608      	mov	r0, r1
 80109c2:	ed91 7b04 	vldr	d7, [r1, #16]
 80109c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ce:	4633      	mov	r3, r6
 80109d0:	f1a1 0108 	sub.w	r1, r1, #8
 80109d4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80109d8:	d0f3      	beq.n	80109c2 <__ieee754_rem_pio2+0x1ea>
 80109da:	4920      	ldr	r1, [pc, #128]	; (8010a5c <__ieee754_rem_pio2+0x284>)
 80109dc:	9101      	str	r1, [sp, #4]
 80109de:	2102      	movs	r1, #2
 80109e0:	9100      	str	r1, [sp, #0]
 80109e2:	4621      	mov	r1, r4
 80109e4:	f000 f94c 	bl	8010c80 <__kernel_rem_pio2>
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	f6bf af25 	bge.w	8010838 <__ieee754_rem_pio2+0x60>
 80109ee:	ed94 7b00 	vldr	d7, [r4]
 80109f2:	eeb1 7b47 	vneg.f64	d7, d7
 80109f6:	ed84 7b00 	vstr	d7, [r4]
 80109fa:	ed94 7b02 	vldr	d7, [r4, #8]
 80109fe:	eeb1 7b47 	vneg.f64	d7, d7
 8010a02:	ed84 7b02 	vstr	d7, [r4, #8]
 8010a06:	e79b      	b.n	8010940 <__ieee754_rem_pio2+0x168>
 8010a08:	54400000 	.word	0x54400000
 8010a0c:	3ff921fb 	.word	0x3ff921fb
 8010a10:	1a626331 	.word	0x1a626331
 8010a14:	3dd0b461 	.word	0x3dd0b461
 8010a18:	1a600000 	.word	0x1a600000
 8010a1c:	3dd0b461 	.word	0x3dd0b461
 8010a20:	2e037073 	.word	0x2e037073
 8010a24:	3ba3198a 	.word	0x3ba3198a
 8010a28:	6dc9c883 	.word	0x6dc9c883
 8010a2c:	3fe45f30 	.word	0x3fe45f30
 8010a30:	2e000000 	.word	0x2e000000
 8010a34:	3ba3198a 	.word	0x3ba3198a
 8010a38:	252049c1 	.word	0x252049c1
 8010a3c:	397b839a 	.word	0x397b839a
 8010a40:	00000000 	.word	0x00000000
 8010a44:	41700000 	.word	0x41700000
 8010a48:	3fe921fb 	.word	0x3fe921fb
 8010a4c:	4002d97b 	.word	0x4002d97b
 8010a50:	413921fb 	.word	0x413921fb
 8010a54:	08015230 	.word	0x08015230
 8010a58:	7fefffff 	.word	0x7fefffff
 8010a5c:	080152b0 	.word	0x080152b0

08010a60 <__ieee754_atan2f>:
 8010a60:	ee10 2a90 	vmov	r2, s1
 8010a64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010a68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010a6c:	b510      	push	{r4, lr}
 8010a6e:	eef0 7a40 	vmov.f32	s15, s0
 8010a72:	dc06      	bgt.n	8010a82 <__ieee754_atan2f+0x22>
 8010a74:	ee10 0a10 	vmov	r0, s0
 8010a78:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010a7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010a80:	dd04      	ble.n	8010a8c <__ieee754_atan2f+0x2c>
 8010a82:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010a86:	eeb0 0a67 	vmov.f32	s0, s15
 8010a8a:	bd10      	pop	{r4, pc}
 8010a8c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010a90:	d103      	bne.n	8010a9a <__ieee754_atan2f+0x3a>
 8010a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a96:	f000 bd5d 	b.w	8011554 <atanf>
 8010a9a:	1794      	asrs	r4, r2, #30
 8010a9c:	f004 0402 	and.w	r4, r4, #2
 8010aa0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010aa4:	b93b      	cbnz	r3, 8010ab6 <__ieee754_atan2f+0x56>
 8010aa6:	2c02      	cmp	r4, #2
 8010aa8:	d05c      	beq.n	8010b64 <__ieee754_atan2f+0x104>
 8010aaa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010b78 <__ieee754_atan2f+0x118>
 8010aae:	2c03      	cmp	r4, #3
 8010ab0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010ab4:	e7e7      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010ab6:	b939      	cbnz	r1, 8010ac8 <__ieee754_atan2f+0x68>
 8010ab8:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010b7c <__ieee754_atan2f+0x11c>
 8010abc:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8010b80 <__ieee754_atan2f+0x120>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	fe67 7a80 	vselge.f32	s15, s15, s0
 8010ac6:	e7de      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010ac8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010acc:	d110      	bne.n	8010af0 <__ieee754_atan2f+0x90>
 8010ace:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010ad2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010ad6:	d107      	bne.n	8010ae8 <__ieee754_atan2f+0x88>
 8010ad8:	2c02      	cmp	r4, #2
 8010ada:	d846      	bhi.n	8010b6a <__ieee754_atan2f+0x10a>
 8010adc:	4b29      	ldr	r3, [pc, #164]	; (8010b84 <__ieee754_atan2f+0x124>)
 8010ade:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ae2:	edd4 7a00 	vldr	s15, [r4]
 8010ae6:	e7ce      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010ae8:	2c02      	cmp	r4, #2
 8010aea:	d841      	bhi.n	8010b70 <__ieee754_atan2f+0x110>
 8010aec:	4b26      	ldr	r3, [pc, #152]	; (8010b88 <__ieee754_atan2f+0x128>)
 8010aee:	e7f6      	b.n	8010ade <__ieee754_atan2f+0x7e>
 8010af0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010af4:	d0e0      	beq.n	8010ab8 <__ieee754_atan2f+0x58>
 8010af6:	1a5b      	subs	r3, r3, r1
 8010af8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010afc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010b00:	da1a      	bge.n	8010b38 <__ieee754_atan2f+0xd8>
 8010b02:	2a00      	cmp	r2, #0
 8010b04:	da01      	bge.n	8010b0a <__ieee754_atan2f+0xaa>
 8010b06:	313c      	adds	r1, #60	; 0x3c
 8010b08:	db19      	blt.n	8010b3e <__ieee754_atan2f+0xde>
 8010b0a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010b0e:	f000 fdf5 	bl	80116fc <fabsf>
 8010b12:	f000 fd1f 	bl	8011554 <atanf>
 8010b16:	eef0 7a40 	vmov.f32	s15, s0
 8010b1a:	2c01      	cmp	r4, #1
 8010b1c:	d012      	beq.n	8010b44 <__ieee754_atan2f+0xe4>
 8010b1e:	2c02      	cmp	r4, #2
 8010b20:	d017      	beq.n	8010b52 <__ieee754_atan2f+0xf2>
 8010b22:	2c00      	cmp	r4, #0
 8010b24:	d0af      	beq.n	8010a86 <__ieee754_atan2f+0x26>
 8010b26:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010b8c <__ieee754_atan2f+0x12c>
 8010b2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010b2e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010b90 <__ieee754_atan2f+0x130>
 8010b32:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010b36:	e7a6      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010b38:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010b7c <__ieee754_atan2f+0x11c>
 8010b3c:	e7ed      	b.n	8010b1a <__ieee754_atan2f+0xba>
 8010b3e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010b94 <__ieee754_atan2f+0x134>
 8010b42:	e7ea      	b.n	8010b1a <__ieee754_atan2f+0xba>
 8010b44:	ee17 3a90 	vmov	r3, s15
 8010b48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010b4c:	ee07 3a90 	vmov	s15, r3
 8010b50:	e799      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010b52:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010b8c <__ieee754_atan2f+0x12c>
 8010b56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010b5a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010b90 <__ieee754_atan2f+0x130>
 8010b5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010b62:	e790      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010b64:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010b90 <__ieee754_atan2f+0x130>
 8010b68:	e78d      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010b6a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010b98 <__ieee754_atan2f+0x138>
 8010b6e:	e78a      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010b70:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010b94 <__ieee754_atan2f+0x134>
 8010b74:	e787      	b.n	8010a86 <__ieee754_atan2f+0x26>
 8010b76:	bf00      	nop
 8010b78:	c0490fdb 	.word	0xc0490fdb
 8010b7c:	3fc90fdb 	.word	0x3fc90fdb
 8010b80:	bfc90fdb 	.word	0xbfc90fdb
 8010b84:	080153b8 	.word	0x080153b8
 8010b88:	080153c4 	.word	0x080153c4
 8010b8c:	33bbbd2e 	.word	0x33bbbd2e
 8010b90:	40490fdb 	.word	0x40490fdb
 8010b94:	00000000 	.word	0x00000000
 8010b98:	3f490fdb 	.word	0x3f490fdb

08010b9c <__ieee754_sqrtf>:
 8010b9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ba0:	4770      	bx	lr
 8010ba2:	0000      	movs	r0, r0
 8010ba4:	0000      	movs	r0, r0
	...

08010ba8 <__kernel_cos>:
 8010ba8:	ee10 1a90 	vmov	r1, s1
 8010bac:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010bb4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010bb8:	da05      	bge.n	8010bc6 <__kernel_cos+0x1e>
 8010bba:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010bbe:	ee17 3a90 	vmov	r3, s15
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d03d      	beq.n	8010c42 <__kernel_cos+0x9a>
 8010bc6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010bca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010c48 <__kernel_cos+0xa0>
 8010bce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010c50 <__kernel_cos+0xa8>
 8010bd2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010bd6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010c58 <__kernel_cos+0xb0>
 8010bda:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010bde:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010c60 <__kernel_cos+0xb8>
 8010be2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010be6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010c68 <__kernel_cos+0xc0>
 8010bea:	4b23      	ldr	r3, [pc, #140]	; (8010c78 <__kernel_cos+0xd0>)
 8010bec:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010bf0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010c70 <__kernel_cos+0xc8>
 8010bf4:	4299      	cmp	r1, r3
 8010bf6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010bfa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010bfe:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010c02:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010c06:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010c0a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010c0e:	dc04      	bgt.n	8010c1a <__kernel_cos+0x72>
 8010c10:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010c14:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010c18:	4770      	bx	lr
 8010c1a:	4b18      	ldr	r3, [pc, #96]	; (8010c7c <__kernel_cos+0xd4>)
 8010c1c:	4299      	cmp	r1, r3
 8010c1e:	dc0d      	bgt.n	8010c3c <__kernel_cos+0x94>
 8010c20:	2200      	movs	r2, #0
 8010c22:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010c26:	ec43 2b15 	vmov	d5, r2, r3
 8010c2a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010c2e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010c32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c36:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010c3a:	4770      	bx	lr
 8010c3c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010c40:	e7f3      	b.n	8010c2a <__kernel_cos+0x82>
 8010c42:	eeb0 0b44 	vmov.f64	d0, d4
 8010c46:	4770      	bx	lr
 8010c48:	be8838d4 	.word	0xbe8838d4
 8010c4c:	bda8fae9 	.word	0xbda8fae9
 8010c50:	bdb4b1c4 	.word	0xbdb4b1c4
 8010c54:	3e21ee9e 	.word	0x3e21ee9e
 8010c58:	809c52ad 	.word	0x809c52ad
 8010c5c:	be927e4f 	.word	0xbe927e4f
 8010c60:	19cb1590 	.word	0x19cb1590
 8010c64:	3efa01a0 	.word	0x3efa01a0
 8010c68:	16c15177 	.word	0x16c15177
 8010c6c:	bf56c16c 	.word	0xbf56c16c
 8010c70:	5555554c 	.word	0x5555554c
 8010c74:	3fa55555 	.word	0x3fa55555
 8010c78:	3fd33332 	.word	0x3fd33332
 8010c7c:	3fe90000 	.word	0x3fe90000

08010c80 <__kernel_rem_pio2>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	ed2d 8b06 	vpush	{d8-d10}
 8010c88:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8010c8c:	460f      	mov	r7, r1
 8010c8e:	9002      	str	r0, [sp, #8]
 8010c90:	49c5      	ldr	r1, [pc, #788]	; (8010fa8 <__kernel_rem_pio2+0x328>)
 8010c92:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8010c94:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8010c98:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8010c9c:	9301      	str	r3, [sp, #4]
 8010c9e:	f112 0f14 	cmn.w	r2, #20
 8010ca2:	bfa8      	it	ge
 8010ca4:	2018      	movge	r0, #24
 8010ca6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010caa:	bfb8      	it	lt
 8010cac:	2000      	movlt	r0, #0
 8010cae:	f06f 0417 	mvn.w	r4, #23
 8010cb2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8010f90 <__kernel_rem_pio2+0x310>
 8010cb6:	bfa4      	itt	ge
 8010cb8:	f1a2 0a03 	subge.w	sl, r2, #3
 8010cbc:	fb9a f0f0 	sdivge	r0, sl, r0
 8010cc0:	fb00 4404 	mla	r4, r0, r4, r4
 8010cc4:	1a46      	subs	r6, r0, r1
 8010cc6:	4414      	add	r4, r2
 8010cc8:	eb09 0c01 	add.w	ip, r9, r1
 8010ccc:	ad1a      	add	r5, sp, #104	; 0x68
 8010cce:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	4562      	cmp	r2, ip
 8010cd6:	dd10      	ble.n	8010cfa <__kernel_rem_pio2+0x7a>
 8010cd8:	9a01      	ldr	r2, [sp, #4]
 8010cda:	ab1a      	add	r3, sp, #104	; 0x68
 8010cdc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010ce0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8010ce4:	f04f 0c00 	mov.w	ip, #0
 8010ce8:	45cc      	cmp	ip, r9
 8010cea:	dc26      	bgt.n	8010d3a <__kernel_rem_pio2+0xba>
 8010cec:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8010f90 <__kernel_rem_pio2+0x310>
 8010cf0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010cf4:	4616      	mov	r6, r2
 8010cf6:	2500      	movs	r5, #0
 8010cf8:	e015      	b.n	8010d26 <__kernel_rem_pio2+0xa6>
 8010cfa:	42d6      	cmn	r6, r2
 8010cfc:	d409      	bmi.n	8010d12 <__kernel_rem_pio2+0x92>
 8010cfe:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8010d02:	ee07 3a90 	vmov	s15, r3
 8010d06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d0a:	eca5 7b02 	vstmia	r5!, {d7}
 8010d0e:	3201      	adds	r2, #1
 8010d10:	e7e0      	b.n	8010cd4 <__kernel_rem_pio2+0x54>
 8010d12:	eeb0 7b46 	vmov.f64	d7, d6
 8010d16:	e7f8      	b.n	8010d0a <__kernel_rem_pio2+0x8a>
 8010d18:	ecb8 5b02 	vldmia	r8!, {d5}
 8010d1c:	ed96 6b00 	vldr	d6, [r6]
 8010d20:	3501      	adds	r5, #1
 8010d22:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010d26:	428d      	cmp	r5, r1
 8010d28:	f1a6 0608 	sub.w	r6, r6, #8
 8010d2c:	ddf4      	ble.n	8010d18 <__kernel_rem_pio2+0x98>
 8010d2e:	ecaa 7b02 	vstmia	sl!, {d7}
 8010d32:	f10c 0c01 	add.w	ip, ip, #1
 8010d36:	3208      	adds	r2, #8
 8010d38:	e7d6      	b.n	8010ce8 <__kernel_rem_pio2+0x68>
 8010d3a:	ab06      	add	r3, sp, #24
 8010d3c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8010f98 <__kernel_rem_pio2+0x318>
 8010d40:	ed9f ab97 	vldr	d10, [pc, #604]	; 8010fa0 <__kernel_rem_pio2+0x320>
 8010d44:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8010d48:	9303      	str	r3, [sp, #12]
 8010d4a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8010d4e:	464d      	mov	r5, r9
 8010d50:	00eb      	lsls	r3, r5, #3
 8010d52:	9304      	str	r3, [sp, #16]
 8010d54:	ab92      	add	r3, sp, #584	; 0x248
 8010d56:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010d5a:	f10d 0b18 	add.w	fp, sp, #24
 8010d5e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8010d60:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8010d64:	465e      	mov	r6, fp
 8010d66:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	f1a2 0208 	sub.w	r2, r2, #8
 8010d72:	dc4c      	bgt.n	8010e0e <__kernel_rem_pio2+0x18e>
 8010d74:	4620      	mov	r0, r4
 8010d76:	9105      	str	r1, [sp, #20]
 8010d78:	f000 fb62 	bl	8011440 <scalbn>
 8010d7c:	eeb0 8b40 	vmov.f64	d8, d0
 8010d80:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010d84:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010d88:	f000 fae6 	bl	8011358 <floor>
 8010d8c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010d90:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010d94:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010d98:	2c00      	cmp	r4, #0
 8010d9a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010d9e:	ee17 8a90 	vmov	r8, s15
 8010da2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010da6:	9905      	ldr	r1, [sp, #20]
 8010da8:	dd43      	ble.n	8010e32 <__kernel_rem_pio2+0x1b2>
 8010daa:	1e68      	subs	r0, r5, #1
 8010dac:	ab06      	add	r3, sp, #24
 8010dae:	f1c4 0c18 	rsb	ip, r4, #24
 8010db2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010db6:	fa46 f20c 	asr.w	r2, r6, ip
 8010dba:	4490      	add	r8, r2
 8010dbc:	fa02 f20c 	lsl.w	r2, r2, ip
 8010dc0:	1ab6      	subs	r6, r6, r2
 8010dc2:	f1c4 0217 	rsb	r2, r4, #23
 8010dc6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8010dca:	4116      	asrs	r6, r2
 8010dcc:	2e00      	cmp	r6, #0
 8010dce:	dd3f      	ble.n	8010e50 <__kernel_rem_pio2+0x1d0>
 8010dd0:	f04f 0c00 	mov.w	ip, #0
 8010dd4:	f108 0801 	add.w	r8, r8, #1
 8010dd8:	4660      	mov	r0, ip
 8010dda:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010dde:	4565      	cmp	r5, ip
 8010de0:	dc6e      	bgt.n	8010ec0 <__kernel_rem_pio2+0x240>
 8010de2:	2c00      	cmp	r4, #0
 8010de4:	dd04      	ble.n	8010df0 <__kernel_rem_pio2+0x170>
 8010de6:	2c01      	cmp	r4, #1
 8010de8:	d07f      	beq.n	8010eea <__kernel_rem_pio2+0x26a>
 8010dea:	2c02      	cmp	r4, #2
 8010dec:	f000 8087 	beq.w	8010efe <__kernel_rem_pio2+0x27e>
 8010df0:	2e02      	cmp	r6, #2
 8010df2:	d12d      	bne.n	8010e50 <__kernel_rem_pio2+0x1d0>
 8010df4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010df8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010dfc:	b340      	cbz	r0, 8010e50 <__kernel_rem_pio2+0x1d0>
 8010dfe:	4620      	mov	r0, r4
 8010e00:	9105      	str	r1, [sp, #20]
 8010e02:	f000 fb1d 	bl	8011440 <scalbn>
 8010e06:	9905      	ldr	r1, [sp, #20]
 8010e08:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010e0c:	e020      	b.n	8010e50 <__kernel_rem_pio2+0x1d0>
 8010e0e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010e12:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010e16:	3801      	subs	r0, #1
 8010e18:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010e1c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010e20:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010e24:	eca6 0a01 	vstmia	r6!, {s0}
 8010e28:	ed92 0b00 	vldr	d0, [r2]
 8010e2c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010e30:	e79c      	b.n	8010d6c <__kernel_rem_pio2+0xec>
 8010e32:	d105      	bne.n	8010e40 <__kernel_rem_pio2+0x1c0>
 8010e34:	1e6a      	subs	r2, r5, #1
 8010e36:	ab06      	add	r3, sp, #24
 8010e38:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8010e3c:	15f6      	asrs	r6, r6, #23
 8010e3e:	e7c5      	b.n	8010dcc <__kernel_rem_pio2+0x14c>
 8010e40:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010e44:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e4c:	da36      	bge.n	8010ebc <__kernel_rem_pio2+0x23c>
 8010e4e:	2600      	movs	r6, #0
 8010e50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e58:	f040 80aa 	bne.w	8010fb0 <__kernel_rem_pio2+0x330>
 8010e5c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8010e60:	4658      	mov	r0, fp
 8010e62:	2200      	movs	r2, #0
 8010e64:	4548      	cmp	r0, r9
 8010e66:	da52      	bge.n	8010f0e <__kernel_rem_pio2+0x28e>
 8010e68:	2a00      	cmp	r2, #0
 8010e6a:	f000 8081 	beq.w	8010f70 <__kernel_rem_pio2+0x2f0>
 8010e6e:	ab06      	add	r3, sp, #24
 8010e70:	3c18      	subs	r4, #24
 8010e72:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f000 8087 	beq.w	8010f8a <__kernel_rem_pio2+0x30a>
 8010e7c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010e80:	4620      	mov	r0, r4
 8010e82:	f000 fadd 	bl	8011440 <scalbn>
 8010e86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010e8a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8010f98 <__kernel_rem_pio2+0x318>
 8010e8e:	a96a      	add	r1, sp, #424	; 0x1a8
 8010e90:	f103 0208 	add.w	r2, r3, #8
 8010e94:	1888      	adds	r0, r1, r2
 8010e96:	4659      	mov	r1, fp
 8010e98:	2900      	cmp	r1, #0
 8010e9a:	f280 80b7 	bge.w	801100c <__kernel_rem_pio2+0x38c>
 8010e9e:	4659      	mov	r1, fp
 8010ea0:	2900      	cmp	r1, #0
 8010ea2:	f2c0 80d5 	blt.w	8011050 <__kernel_rem_pio2+0x3d0>
 8010ea6:	a86a      	add	r0, sp, #424	; 0x1a8
 8010ea8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8010eac:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8010f90 <__kernel_rem_pio2+0x310>
 8010eb0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8010fac <__kernel_rem_pio2+0x32c>
 8010eb4:	2400      	movs	r4, #0
 8010eb6:	ebab 0001 	sub.w	r0, fp, r1
 8010eba:	e0be      	b.n	801103a <__kernel_rem_pio2+0x3ba>
 8010ebc:	2602      	movs	r6, #2
 8010ebe:	e787      	b.n	8010dd0 <__kernel_rem_pio2+0x150>
 8010ec0:	f8db 2000 	ldr.w	r2, [fp]
 8010ec4:	b958      	cbnz	r0, 8010ede <__kernel_rem_pio2+0x25e>
 8010ec6:	b122      	cbz	r2, 8010ed2 <__kernel_rem_pio2+0x252>
 8010ec8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010ecc:	f8cb 2000 	str.w	r2, [fp]
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	f10c 0c01 	add.w	ip, ip, #1
 8010ed6:	f10b 0b04 	add.w	fp, fp, #4
 8010eda:	4610      	mov	r0, r2
 8010edc:	e77f      	b.n	8010dde <__kernel_rem_pio2+0x15e>
 8010ede:	ebae 0202 	sub.w	r2, lr, r2
 8010ee2:	f8cb 2000 	str.w	r2, [fp]
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	e7f3      	b.n	8010ed2 <__kernel_rem_pio2+0x252>
 8010eea:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8010eee:	ab06      	add	r3, sp, #24
 8010ef0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010ef4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010ef8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8010efc:	e778      	b.n	8010df0 <__kernel_rem_pio2+0x170>
 8010efe:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8010f02:	ab06      	add	r3, sp, #24
 8010f04:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010f08:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8010f0c:	e7f4      	b.n	8010ef8 <__kernel_rem_pio2+0x278>
 8010f0e:	ab06      	add	r3, sp, #24
 8010f10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010f14:	3801      	subs	r0, #1
 8010f16:	431a      	orrs	r2, r3
 8010f18:	e7a4      	b.n	8010e64 <__kernel_rem_pio2+0x1e4>
 8010f1a:	f10c 0c01 	add.w	ip, ip, #1
 8010f1e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d0f9      	beq.n	8010f1a <__kernel_rem_pio2+0x29a>
 8010f26:	9b04      	ldr	r3, [sp, #16]
 8010f28:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010f2c:	eb0d 0203 	add.w	r2, sp, r3
 8010f30:	9b01      	ldr	r3, [sp, #4]
 8010f32:	18e8      	adds	r0, r5, r3
 8010f34:	ab1a      	add	r3, sp, #104	; 0x68
 8010f36:	1c6e      	adds	r6, r5, #1
 8010f38:	3a98      	subs	r2, #152	; 0x98
 8010f3a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010f3e:	4465      	add	r5, ip
 8010f40:	42b5      	cmp	r5, r6
 8010f42:	f6ff af05 	blt.w	8010d50 <__kernel_rem_pio2+0xd0>
 8010f46:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8010f4a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010f4e:	ee07 3a90 	vmov	s15, r3
 8010f52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f56:	f04f 0c00 	mov.w	ip, #0
 8010f5a:	eca0 7b02 	vstmia	r0!, {d7}
 8010f5e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010f90 <__kernel_rem_pio2+0x310>
 8010f62:	4680      	mov	r8, r0
 8010f64:	458c      	cmp	ip, r1
 8010f66:	dd07      	ble.n	8010f78 <__kernel_rem_pio2+0x2f8>
 8010f68:	eca2 7b02 	vstmia	r2!, {d7}
 8010f6c:	3601      	adds	r6, #1
 8010f6e:	e7e7      	b.n	8010f40 <__kernel_rem_pio2+0x2c0>
 8010f70:	9a03      	ldr	r2, [sp, #12]
 8010f72:	f04f 0c01 	mov.w	ip, #1
 8010f76:	e7d2      	b.n	8010f1e <__kernel_rem_pio2+0x29e>
 8010f78:	ecbe 5b02 	vldmia	lr!, {d5}
 8010f7c:	ed38 6b02 	vldmdb	r8!, {d6}
 8010f80:	f10c 0c01 	add.w	ip, ip, #1
 8010f84:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010f88:	e7ec      	b.n	8010f64 <__kernel_rem_pio2+0x2e4>
 8010f8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010f8e:	e76e      	b.n	8010e6e <__kernel_rem_pio2+0x1ee>
	...
 8010f9c:	3e700000 	.word	0x3e700000
 8010fa0:	00000000 	.word	0x00000000
 8010fa4:	41700000 	.word	0x41700000
 8010fa8:	08015c80 	.word	0x08015c80
 8010fac:	08015c40 	.word	0x08015c40
 8010fb0:	4260      	negs	r0, r4
 8010fb2:	eeb0 0b48 	vmov.f64	d0, d8
 8010fb6:	f000 fa43 	bl	8011440 <scalbn>
 8010fba:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011198 <__kernel_rem_pio2+0x518>
 8010fbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc6:	db18      	blt.n	8010ffa <__kernel_rem_pio2+0x37a>
 8010fc8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80111a0 <__kernel_rem_pio2+0x520>
 8010fcc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010fd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010fd4:	aa06      	add	r2, sp, #24
 8010fd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010fda:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010fde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010fe2:	f105 0b01 	add.w	fp, r5, #1
 8010fe6:	ee10 3a10 	vmov	r3, s0
 8010fea:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010fee:	ee17 3a10 	vmov	r3, s14
 8010ff2:	3418      	adds	r4, #24
 8010ff4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8010ff8:	e740      	b.n	8010e7c <__kernel_rem_pio2+0x1fc>
 8010ffa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010ffe:	aa06      	add	r2, sp, #24
 8011000:	ee10 3a10 	vmov	r3, s0
 8011004:	46ab      	mov	fp, r5
 8011006:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801100a:	e737      	b.n	8010e7c <__kernel_rem_pio2+0x1fc>
 801100c:	ac06      	add	r4, sp, #24
 801100e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011012:	9401      	str	r4, [sp, #4]
 8011014:	ee07 4a90 	vmov	s15, r4
 8011018:	3901      	subs	r1, #1
 801101a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801101e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011022:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011026:	ed20 7b02 	vstmdb	r0!, {d7}
 801102a:	e735      	b.n	8010e98 <__kernel_rem_pio2+0x218>
 801102c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011030:	ecb5 6b02 	vldmia	r5!, {d6}
 8011034:	3401      	adds	r4, #1
 8011036:	eea5 7b06 	vfma.f64	d7, d5, d6
 801103a:	454c      	cmp	r4, r9
 801103c:	dc01      	bgt.n	8011042 <__kernel_rem_pio2+0x3c2>
 801103e:	4284      	cmp	r4, r0
 8011040:	ddf4      	ble.n	801102c <__kernel_rem_pio2+0x3ac>
 8011042:	ac42      	add	r4, sp, #264	; 0x108
 8011044:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011048:	ed80 7b00 	vstr	d7, [r0]
 801104c:	3901      	subs	r1, #1
 801104e:	e727      	b.n	8010ea0 <__kernel_rem_pio2+0x220>
 8011050:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011052:	2902      	cmp	r1, #2
 8011054:	dc0a      	bgt.n	801106c <__kernel_rem_pio2+0x3ec>
 8011056:	2900      	cmp	r1, #0
 8011058:	dc2c      	bgt.n	80110b4 <__kernel_rem_pio2+0x434>
 801105a:	d045      	beq.n	80110e8 <__kernel_rem_pio2+0x468>
 801105c:	f008 0007 	and.w	r0, r8, #7
 8011060:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011064:	ecbd 8b06 	vpop	{d8-d10}
 8011068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801106e:	2a03      	cmp	r2, #3
 8011070:	d1f4      	bne.n	801105c <__kernel_rem_pio2+0x3dc>
 8011072:	aa42      	add	r2, sp, #264	; 0x108
 8011074:	4413      	add	r3, r2
 8011076:	461a      	mov	r2, r3
 8011078:	4619      	mov	r1, r3
 801107a:	4658      	mov	r0, fp
 801107c:	2800      	cmp	r0, #0
 801107e:	f1a1 0108 	sub.w	r1, r1, #8
 8011082:	dc54      	bgt.n	801112e <__kernel_rem_pio2+0x4ae>
 8011084:	4659      	mov	r1, fp
 8011086:	2901      	cmp	r1, #1
 8011088:	f1a2 0208 	sub.w	r2, r2, #8
 801108c:	dc5f      	bgt.n	801114e <__kernel_rem_pio2+0x4ce>
 801108e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80111a8 <__kernel_rem_pio2+0x528>
 8011092:	3308      	adds	r3, #8
 8011094:	f1bb 0f01 	cmp.w	fp, #1
 8011098:	dc69      	bgt.n	801116e <__kernel_rem_pio2+0x4ee>
 801109a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801109e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80110a2:	2e00      	cmp	r6, #0
 80110a4:	d16a      	bne.n	801117c <__kernel_rem_pio2+0x4fc>
 80110a6:	ed87 5b00 	vstr	d5, [r7]
 80110aa:	ed87 6b02 	vstr	d6, [r7, #8]
 80110ae:	ed87 7b04 	vstr	d7, [r7, #16]
 80110b2:	e7d3      	b.n	801105c <__kernel_rem_pio2+0x3dc>
 80110b4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80111a8 <__kernel_rem_pio2+0x528>
 80110b8:	ab42      	add	r3, sp, #264	; 0x108
 80110ba:	441a      	add	r2, r3
 80110bc:	465b      	mov	r3, fp
 80110be:	2b00      	cmp	r3, #0
 80110c0:	da26      	bge.n	8011110 <__kernel_rem_pio2+0x490>
 80110c2:	b35e      	cbz	r6, 801111c <__kernel_rem_pio2+0x49c>
 80110c4:	eeb1 7b46 	vneg.f64	d7, d6
 80110c8:	ed87 7b00 	vstr	d7, [r7]
 80110cc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80110d0:	aa44      	add	r2, sp, #272	; 0x110
 80110d2:	2301      	movs	r3, #1
 80110d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110d8:	459b      	cmp	fp, r3
 80110da:	da22      	bge.n	8011122 <__kernel_rem_pio2+0x4a2>
 80110dc:	b10e      	cbz	r6, 80110e2 <__kernel_rem_pio2+0x462>
 80110de:	eeb1 7b47 	vneg.f64	d7, d7
 80110e2:	ed87 7b02 	vstr	d7, [r7, #8]
 80110e6:	e7b9      	b.n	801105c <__kernel_rem_pio2+0x3dc>
 80110e8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80111a8 <__kernel_rem_pio2+0x528>
 80110ec:	ab42      	add	r3, sp, #264	; 0x108
 80110ee:	441a      	add	r2, r3
 80110f0:	f1bb 0f00 	cmp.w	fp, #0
 80110f4:	da05      	bge.n	8011102 <__kernel_rem_pio2+0x482>
 80110f6:	b10e      	cbz	r6, 80110fc <__kernel_rem_pio2+0x47c>
 80110f8:	eeb1 7b47 	vneg.f64	d7, d7
 80110fc:	ed87 7b00 	vstr	d7, [r7]
 8011100:	e7ac      	b.n	801105c <__kernel_rem_pio2+0x3dc>
 8011102:	ed32 6b02 	vldmdb	r2!, {d6}
 8011106:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801110a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801110e:	e7ef      	b.n	80110f0 <__kernel_rem_pio2+0x470>
 8011110:	ed32 7b02 	vldmdb	r2!, {d7}
 8011114:	3b01      	subs	r3, #1
 8011116:	ee36 6b07 	vadd.f64	d6, d6, d7
 801111a:	e7d0      	b.n	80110be <__kernel_rem_pio2+0x43e>
 801111c:	eeb0 7b46 	vmov.f64	d7, d6
 8011120:	e7d2      	b.n	80110c8 <__kernel_rem_pio2+0x448>
 8011122:	ecb2 6b02 	vldmia	r2!, {d6}
 8011126:	3301      	adds	r3, #1
 8011128:	ee37 7b06 	vadd.f64	d7, d7, d6
 801112c:	e7d4      	b.n	80110d8 <__kernel_rem_pio2+0x458>
 801112e:	ed91 7b00 	vldr	d7, [r1]
 8011132:	ed91 5b02 	vldr	d5, [r1, #8]
 8011136:	3801      	subs	r0, #1
 8011138:	ee37 6b05 	vadd.f64	d6, d7, d5
 801113c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011140:	ed81 6b00 	vstr	d6, [r1]
 8011144:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011148:	ed81 7b02 	vstr	d7, [r1, #8]
 801114c:	e796      	b.n	801107c <__kernel_rem_pio2+0x3fc>
 801114e:	ed92 7b00 	vldr	d7, [r2]
 8011152:	ed92 5b02 	vldr	d5, [r2, #8]
 8011156:	3901      	subs	r1, #1
 8011158:	ee37 6b05 	vadd.f64	d6, d7, d5
 801115c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011160:	ed82 6b00 	vstr	d6, [r2]
 8011164:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011168:	ed82 7b02 	vstr	d7, [r2, #8]
 801116c:	e78b      	b.n	8011086 <__kernel_rem_pio2+0x406>
 801116e:	ed33 6b02 	vldmdb	r3!, {d6}
 8011172:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011176:	ee37 7b06 	vadd.f64	d7, d7, d6
 801117a:	e78b      	b.n	8011094 <__kernel_rem_pio2+0x414>
 801117c:	eeb1 5b45 	vneg.f64	d5, d5
 8011180:	eeb1 6b46 	vneg.f64	d6, d6
 8011184:	ed87 5b00 	vstr	d5, [r7]
 8011188:	eeb1 7b47 	vneg.f64	d7, d7
 801118c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011190:	e78d      	b.n	80110ae <__kernel_rem_pio2+0x42e>
 8011192:	bf00      	nop
 8011194:	f3af 8000 	nop.w
 8011198:	00000000 	.word	0x00000000
 801119c:	41700000 	.word	0x41700000
 80111a0:	00000000 	.word	0x00000000
 80111a4:	3e700000 	.word	0x3e700000
	...

080111b0 <__kernel_sin>:
 80111b0:	ee10 3a90 	vmov	r3, s1
 80111b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111b8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80111bc:	da04      	bge.n	80111c8 <__kernel_sin+0x18>
 80111be:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80111c2:	ee17 3a90 	vmov	r3, s15
 80111c6:	b35b      	cbz	r3, 8011220 <__kernel_sin+0x70>
 80111c8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80111cc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80111d0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011228 <__kernel_sin+0x78>
 80111d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011230 <__kernel_sin+0x80>
 80111d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80111dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011238 <__kernel_sin+0x88>
 80111e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80111e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011240 <__kernel_sin+0x90>
 80111e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80111ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011248 <__kernel_sin+0x98>
 80111f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80111f4:	b930      	cbnz	r0, 8011204 <__kernel_sin+0x54>
 80111f6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011250 <__kernel_sin+0xa0>
 80111fa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80111fe:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011202:	4770      	bx	lr
 8011204:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011208:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801120c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011210:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011214:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011258 <__kernel_sin+0xa8>
 8011218:	eea5 1b07 	vfma.f64	d1, d5, d7
 801121c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	f3af 8000 	nop.w
 8011228:	5acfd57c 	.word	0x5acfd57c
 801122c:	3de5d93a 	.word	0x3de5d93a
 8011230:	8a2b9ceb 	.word	0x8a2b9ceb
 8011234:	be5ae5e6 	.word	0xbe5ae5e6
 8011238:	57b1fe7d 	.word	0x57b1fe7d
 801123c:	3ec71de3 	.word	0x3ec71de3
 8011240:	19c161d5 	.word	0x19c161d5
 8011244:	bf2a01a0 	.word	0xbf2a01a0
 8011248:	1110f8a6 	.word	0x1110f8a6
 801124c:	3f811111 	.word	0x3f811111
 8011250:	55555549 	.word	0x55555549
 8011254:	bfc55555 	.word	0xbfc55555
 8011258:	55555549 	.word	0x55555549
 801125c:	3fc55555 	.word	0x3fc55555

08011260 <with_errno>:
 8011260:	b513      	push	{r0, r1, r4, lr}
 8011262:	4604      	mov	r4, r0
 8011264:	ed8d 0b00 	vstr	d0, [sp]
 8011268:	f000 fa50 	bl	801170c <__errno>
 801126c:	ed9d 0b00 	vldr	d0, [sp]
 8011270:	6004      	str	r4, [r0, #0]
 8011272:	b002      	add	sp, #8
 8011274:	bd10      	pop	{r4, pc}

08011276 <xflow>:
 8011276:	b082      	sub	sp, #8
 8011278:	b158      	cbz	r0, 8011292 <xflow+0x1c>
 801127a:	eeb1 7b40 	vneg.f64	d7, d0
 801127e:	ed8d 7b00 	vstr	d7, [sp]
 8011282:	ed9d 7b00 	vldr	d7, [sp]
 8011286:	2022      	movs	r0, #34	; 0x22
 8011288:	ee20 0b07 	vmul.f64	d0, d0, d7
 801128c:	b002      	add	sp, #8
 801128e:	f7ff bfe7 	b.w	8011260 <with_errno>
 8011292:	eeb0 7b40 	vmov.f64	d7, d0
 8011296:	e7f2      	b.n	801127e <xflow+0x8>

08011298 <__math_uflow>:
 8011298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112a0 <__math_uflow+0x8>
 801129c:	f7ff bfeb 	b.w	8011276 <xflow>
 80112a0:	00000000 	.word	0x00000000
 80112a4:	10000000 	.word	0x10000000

080112a8 <__math_oflow>:
 80112a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112b0 <__math_oflow+0x8>
 80112ac:	f7ff bfe3 	b.w	8011276 <xflow>
 80112b0:	00000000 	.word	0x00000000
 80112b4:	70000000 	.word	0x70000000

080112b8 <__math_divzero>:
 80112b8:	b082      	sub	sp, #8
 80112ba:	2800      	cmp	r0, #0
 80112bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80112c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80112c4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80112c8:	ed8d 7b00 	vstr	d7, [sp]
 80112cc:	ed9d 0b00 	vldr	d0, [sp]
 80112d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80112e0 <__math_divzero+0x28>
 80112d4:	2022      	movs	r0, #34	; 0x22
 80112d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80112da:	b002      	add	sp, #8
 80112dc:	f7ff bfc0 	b.w	8011260 <with_errno>
	...

080112e8 <__math_invalid>:
 80112e8:	eeb0 7b40 	vmov.f64	d7, d0
 80112ec:	eeb4 7b47 	vcmp.f64	d7, d7
 80112f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80112f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80112fc:	d602      	bvs.n	8011304 <__math_invalid+0x1c>
 80112fe:	2021      	movs	r0, #33	; 0x21
 8011300:	f7ff bfae 	b.w	8011260 <with_errno>
 8011304:	4770      	bx	lr

08011306 <__math_check_uflow>:
 8011306:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130e:	d102      	bne.n	8011316 <__math_check_uflow+0x10>
 8011310:	2022      	movs	r0, #34	; 0x22
 8011312:	f7ff bfa5 	b.w	8011260 <with_errno>
 8011316:	4770      	bx	lr

08011318 <__math_check_oflow>:
 8011318:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011338 <__math_check_oflow+0x20>
 801131c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011320:	eeb4 7b46 	vcmp.f64	d7, d6
 8011324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011328:	dd02      	ble.n	8011330 <__math_check_oflow+0x18>
 801132a:	2022      	movs	r0, #34	; 0x22
 801132c:	f7ff bf98 	b.w	8011260 <with_errno>
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	f3af 8000 	nop.w
 8011338:	ffffffff 	.word	0xffffffff
 801133c:	7fefffff 	.word	0x7fefffff

08011340 <fabs>:
 8011340:	ec51 0b10 	vmov	r0, r1, d0
 8011344:	ee10 2a10 	vmov	r2, s0
 8011348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801134c:	ec43 2b10 	vmov	d0, r2, r3
 8011350:	4770      	bx	lr
 8011352:	0000      	movs	r0, r0
 8011354:	0000      	movs	r0, r0
	...

08011358 <floor>:
 8011358:	ee10 1a90 	vmov	r1, s1
 801135c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011360:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011364:	2b13      	cmp	r3, #19
 8011366:	b530      	push	{r4, r5, lr}
 8011368:	ee10 0a10 	vmov	r0, s0
 801136c:	ee10 5a10 	vmov	r5, s0
 8011370:	dc31      	bgt.n	80113d6 <floor+0x7e>
 8011372:	2b00      	cmp	r3, #0
 8011374:	da15      	bge.n	80113a2 <floor+0x4a>
 8011376:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011430 <floor+0xd8>
 801137a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801137e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011386:	dd07      	ble.n	8011398 <floor+0x40>
 8011388:	2900      	cmp	r1, #0
 801138a:	da4e      	bge.n	801142a <floor+0xd2>
 801138c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011390:	4318      	orrs	r0, r3
 8011392:	d001      	beq.n	8011398 <floor+0x40>
 8011394:	4928      	ldr	r1, [pc, #160]	; (8011438 <floor+0xe0>)
 8011396:	2000      	movs	r0, #0
 8011398:	460b      	mov	r3, r1
 801139a:	4602      	mov	r2, r0
 801139c:	ec43 2b10 	vmov	d0, r2, r3
 80113a0:	e020      	b.n	80113e4 <floor+0x8c>
 80113a2:	4a26      	ldr	r2, [pc, #152]	; (801143c <floor+0xe4>)
 80113a4:	411a      	asrs	r2, r3
 80113a6:	ea01 0402 	and.w	r4, r1, r2
 80113aa:	4304      	orrs	r4, r0
 80113ac:	d01a      	beq.n	80113e4 <floor+0x8c>
 80113ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011430 <floor+0xd8>
 80113b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80113ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113be:	ddeb      	ble.n	8011398 <floor+0x40>
 80113c0:	2900      	cmp	r1, #0
 80113c2:	bfbe      	ittt	lt
 80113c4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80113c8:	fa40 f303 	asrlt.w	r3, r0, r3
 80113cc:	18c9      	addlt	r1, r1, r3
 80113ce:	ea21 0102 	bic.w	r1, r1, r2
 80113d2:	2000      	movs	r0, #0
 80113d4:	e7e0      	b.n	8011398 <floor+0x40>
 80113d6:	2b33      	cmp	r3, #51	; 0x33
 80113d8:	dd05      	ble.n	80113e6 <floor+0x8e>
 80113da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113de:	d101      	bne.n	80113e4 <floor+0x8c>
 80113e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80113e4:	bd30      	pop	{r4, r5, pc}
 80113e6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80113ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113ee:	40e2      	lsrs	r2, r4
 80113f0:	4202      	tst	r2, r0
 80113f2:	d0f7      	beq.n	80113e4 <floor+0x8c>
 80113f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011430 <floor+0xd8>
 80113f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011404:	ddc8      	ble.n	8011398 <floor+0x40>
 8011406:	2900      	cmp	r1, #0
 8011408:	da02      	bge.n	8011410 <floor+0xb8>
 801140a:	2b14      	cmp	r3, #20
 801140c:	d103      	bne.n	8011416 <floor+0xbe>
 801140e:	3101      	adds	r1, #1
 8011410:	ea20 0002 	bic.w	r0, r0, r2
 8011414:	e7c0      	b.n	8011398 <floor+0x40>
 8011416:	2401      	movs	r4, #1
 8011418:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801141c:	fa04 f303 	lsl.w	r3, r4, r3
 8011420:	4418      	add	r0, r3
 8011422:	42a8      	cmp	r0, r5
 8011424:	bf38      	it	cc
 8011426:	1909      	addcc	r1, r1, r4
 8011428:	e7f2      	b.n	8011410 <floor+0xb8>
 801142a:	2000      	movs	r0, #0
 801142c:	4601      	mov	r1, r0
 801142e:	e7b3      	b.n	8011398 <floor+0x40>
 8011430:	8800759c 	.word	0x8800759c
 8011434:	7e37e43c 	.word	0x7e37e43c
 8011438:	bff00000 	.word	0xbff00000
 801143c:	000fffff 	.word	0x000fffff

08011440 <scalbn>:
 8011440:	ee10 1a90 	vmov	r1, s1
 8011444:	b510      	push	{r4, lr}
 8011446:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801144a:	b98c      	cbnz	r4, 8011470 <scalbn+0x30>
 801144c:	ee10 3a10 	vmov	r3, s0
 8011450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011454:	430b      	orrs	r3, r1
 8011456:	d011      	beq.n	801147c <scalbn+0x3c>
 8011458:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011520 <scalbn+0xe0>
 801145c:	4b3c      	ldr	r3, [pc, #240]	; (8011550 <scalbn+0x110>)
 801145e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011462:	4298      	cmp	r0, r3
 8011464:	da0b      	bge.n	801147e <scalbn+0x3e>
 8011466:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011528 <scalbn+0xe8>
 801146a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801146e:	e005      	b.n	801147c <scalbn+0x3c>
 8011470:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011474:	429c      	cmp	r4, r3
 8011476:	d107      	bne.n	8011488 <scalbn+0x48>
 8011478:	ee30 0b00 	vadd.f64	d0, d0, d0
 801147c:	bd10      	pop	{r4, pc}
 801147e:	ee10 1a90 	vmov	r1, s1
 8011482:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011486:	3c36      	subs	r4, #54	; 0x36
 8011488:	4404      	add	r4, r0
 801148a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801148e:	429c      	cmp	r4, r3
 8011490:	dd0d      	ble.n	80114ae <scalbn+0x6e>
 8011492:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011530 <scalbn+0xf0>
 8011496:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011538 <scalbn+0xf8>
 801149a:	eeb0 6b47 	vmov.f64	d6, d7
 801149e:	ee10 3a90 	vmov	r3, s1
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80114a8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80114ac:	e7e6      	b.n	801147c <scalbn+0x3c>
 80114ae:	2c00      	cmp	r4, #0
 80114b0:	dd0a      	ble.n	80114c8 <scalbn+0x88>
 80114b2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80114b6:	ec53 2b10 	vmov	r2, r3, d0
 80114ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80114be:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80114c2:	ec43 2b10 	vmov	d0, r2, r3
 80114c6:	e7d9      	b.n	801147c <scalbn+0x3c>
 80114c8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80114cc:	da19      	bge.n	8011502 <scalbn+0xc2>
 80114ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80114d2:	4298      	cmp	r0, r3
 80114d4:	ee10 3a90 	vmov	r3, s1
 80114d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114dc:	dd09      	ble.n	80114f2 <scalbn+0xb2>
 80114de:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011530 <scalbn+0xf0>
 80114e2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011538 <scalbn+0xf8>
 80114e6:	eeb0 7b40 	vmov.f64	d7, d0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80114f0:	e7bb      	b.n	801146a <scalbn+0x2a>
 80114f2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011528 <scalbn+0xe8>
 80114f6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011540 <scalbn+0x100>
 80114fa:	eeb0 7b40 	vmov.f64	d7, d0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	e7f4      	b.n	80114ec <scalbn+0xac>
 8011502:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011506:	ec53 2b10 	vmov	r2, r3, d0
 801150a:	3436      	adds	r4, #54	; 0x36
 801150c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011510:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011514:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011548 <scalbn+0x108>
 8011518:	ec43 2b10 	vmov	d0, r2, r3
 801151c:	e7a5      	b.n	801146a <scalbn+0x2a>
 801151e:	bf00      	nop
 8011520:	00000000 	.word	0x00000000
 8011524:	43500000 	.word	0x43500000
 8011528:	c2f8f359 	.word	0xc2f8f359
 801152c:	01a56e1f 	.word	0x01a56e1f
 8011530:	8800759c 	.word	0x8800759c
 8011534:	7e37e43c 	.word	0x7e37e43c
 8011538:	8800759c 	.word	0x8800759c
 801153c:	fe37e43c 	.word	0xfe37e43c
 8011540:	c2f8f359 	.word	0xc2f8f359
 8011544:	81a56e1f 	.word	0x81a56e1f
 8011548:	00000000 	.word	0x00000000
 801154c:	3c900000 	.word	0x3c900000
 8011550:	ffff3cb0 	.word	0xffff3cb0

08011554 <atanf>:
 8011554:	b538      	push	{r3, r4, r5, lr}
 8011556:	ee10 5a10 	vmov	r5, s0
 801155a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801155e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011562:	eef0 7a40 	vmov.f32	s15, s0
 8011566:	db0f      	blt.n	8011588 <atanf+0x34>
 8011568:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801156c:	dd04      	ble.n	8011578 <atanf+0x24>
 801156e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011572:	eeb0 0a67 	vmov.f32	s0, s15
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80116b0 <atanf+0x15c>
 801157c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80116b4 <atanf+0x160>
 8011580:	2d00      	cmp	r5, #0
 8011582:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8011586:	e7f4      	b.n	8011572 <atanf+0x1e>
 8011588:	4b4b      	ldr	r3, [pc, #300]	; (80116b8 <atanf+0x164>)
 801158a:	429c      	cmp	r4, r3
 801158c:	dc10      	bgt.n	80115b0 <atanf+0x5c>
 801158e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011592:	da0a      	bge.n	80115aa <atanf+0x56>
 8011594:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80116bc <atanf+0x168>
 8011598:	ee30 7a07 	vadd.f32	s14, s0, s14
 801159c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80115a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a8:	dce3      	bgt.n	8011572 <atanf+0x1e>
 80115aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ae:	e013      	b.n	80115d8 <atanf+0x84>
 80115b0:	f000 f8a4 	bl	80116fc <fabsf>
 80115b4:	4b42      	ldr	r3, [pc, #264]	; (80116c0 <atanf+0x16c>)
 80115b6:	429c      	cmp	r4, r3
 80115b8:	dc4f      	bgt.n	801165a <atanf+0x106>
 80115ba:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80115be:	429c      	cmp	r4, r3
 80115c0:	dc41      	bgt.n	8011646 <atanf+0xf2>
 80115c2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80115c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80115ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 80115ce:	2300      	movs	r3, #0
 80115d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80115d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80115d8:	1c5a      	adds	r2, r3, #1
 80115da:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80115de:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80116c4 <atanf+0x170>
 80115e2:	eddf 5a39 	vldr	s11, [pc, #228]	; 80116c8 <atanf+0x174>
 80115e6:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80116cc <atanf+0x178>
 80115ea:	ee66 6a06 	vmul.f32	s13, s12, s12
 80115ee:	eee6 5a87 	vfma.f32	s11, s13, s14
 80115f2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80116d0 <atanf+0x17c>
 80115f6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80115fa:	eddf 5a36 	vldr	s11, [pc, #216]	; 80116d4 <atanf+0x180>
 80115fe:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011602:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80116d8 <atanf+0x184>
 8011606:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801160a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80116dc <atanf+0x188>
 801160e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011612:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80116e0 <atanf+0x18c>
 8011616:	eea6 5a87 	vfma.f32	s10, s13, s14
 801161a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80116e4 <atanf+0x190>
 801161e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011622:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80116e8 <atanf+0x194>
 8011626:	eea7 5a26 	vfma.f32	s10, s14, s13
 801162a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80116ec <atanf+0x198>
 801162e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011632:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011636:	eea5 7a86 	vfma.f32	s14, s11, s12
 801163a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801163e:	d121      	bne.n	8011684 <atanf+0x130>
 8011640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011644:	e795      	b.n	8011572 <atanf+0x1e>
 8011646:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801164a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801164e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011652:	2301      	movs	r3, #1
 8011654:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011658:	e7be      	b.n	80115d8 <atanf+0x84>
 801165a:	4b25      	ldr	r3, [pc, #148]	; (80116f0 <atanf+0x19c>)
 801165c:	429c      	cmp	r4, r3
 801165e:	dc0b      	bgt.n	8011678 <atanf+0x124>
 8011660:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011668:	eea0 7a27 	vfma.f32	s14, s0, s15
 801166c:	2302      	movs	r3, #2
 801166e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011676:	e7af      	b.n	80115d8 <atanf+0x84>
 8011678:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801167c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011680:	2303      	movs	r3, #3
 8011682:	e7a9      	b.n	80115d8 <atanf+0x84>
 8011684:	4a1b      	ldr	r2, [pc, #108]	; (80116f4 <atanf+0x1a0>)
 8011686:	491c      	ldr	r1, [pc, #112]	; (80116f8 <atanf+0x1a4>)
 8011688:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801168c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011690:	ed93 0a00 	vldr	s0, [r3]
 8011694:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011698:	ed92 0a00 	vldr	s0, [r2]
 801169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80116a6:	bfb8      	it	lt
 80116a8:	eef1 7a67 	vneglt.f32	s15, s15
 80116ac:	e761      	b.n	8011572 <atanf+0x1e>
 80116ae:	bf00      	nop
 80116b0:	3fc90fdb 	.word	0x3fc90fdb
 80116b4:	bfc90fdb 	.word	0xbfc90fdb
 80116b8:	3edfffff 	.word	0x3edfffff
 80116bc:	7149f2ca 	.word	0x7149f2ca
 80116c0:	3f97ffff 	.word	0x3f97ffff
 80116c4:	3c8569d7 	.word	0x3c8569d7
 80116c8:	3d4bda59 	.word	0x3d4bda59
 80116cc:	bd6ef16b 	.word	0xbd6ef16b
 80116d0:	3d886b35 	.word	0x3d886b35
 80116d4:	3dba2e6e 	.word	0x3dba2e6e
 80116d8:	3e124925 	.word	0x3e124925
 80116dc:	3eaaaaab 	.word	0x3eaaaaab
 80116e0:	bd15a221 	.word	0xbd15a221
 80116e4:	bd9d8795 	.word	0xbd9d8795
 80116e8:	bde38e38 	.word	0xbde38e38
 80116ec:	be4ccccd 	.word	0xbe4ccccd
 80116f0:	401bffff 	.word	0x401bffff
 80116f4:	08015c90 	.word	0x08015c90
 80116f8:	08015ca0 	.word	0x08015ca0

080116fc <fabsf>:
 80116fc:	ee10 3a10 	vmov	r3, s0
 8011700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011704:	ee00 3a10 	vmov	s0, r3
 8011708:	4770      	bx	lr
	...

0801170c <__errno>:
 801170c:	4b01      	ldr	r3, [pc, #4]	; (8011714 <__errno+0x8>)
 801170e:	6818      	ldr	r0, [r3, #0]
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop
 8011714:	24000238 	.word	0x24000238

08011718 <__libc_init_array>:
 8011718:	b570      	push	{r4, r5, r6, lr}
 801171a:	4d0d      	ldr	r5, [pc, #52]	; (8011750 <__libc_init_array+0x38>)
 801171c:	4c0d      	ldr	r4, [pc, #52]	; (8011754 <__libc_init_array+0x3c>)
 801171e:	1b64      	subs	r4, r4, r5
 8011720:	10a4      	asrs	r4, r4, #2
 8011722:	2600      	movs	r6, #0
 8011724:	42a6      	cmp	r6, r4
 8011726:	d109      	bne.n	801173c <__libc_init_array+0x24>
 8011728:	4d0b      	ldr	r5, [pc, #44]	; (8011758 <__libc_init_array+0x40>)
 801172a:	4c0c      	ldr	r4, [pc, #48]	; (801175c <__libc_init_array+0x44>)
 801172c:	f002 fd02 	bl	8014134 <_init>
 8011730:	1b64      	subs	r4, r4, r5
 8011732:	10a4      	asrs	r4, r4, #2
 8011734:	2600      	movs	r6, #0
 8011736:	42a6      	cmp	r6, r4
 8011738:	d105      	bne.n	8011746 <__libc_init_array+0x2e>
 801173a:	bd70      	pop	{r4, r5, r6, pc}
 801173c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011740:	4798      	blx	r3
 8011742:	3601      	adds	r6, #1
 8011744:	e7ee      	b.n	8011724 <__libc_init_array+0xc>
 8011746:	f855 3b04 	ldr.w	r3, [r5], #4
 801174a:	4798      	blx	r3
 801174c:	3601      	adds	r6, #1
 801174e:	e7f2      	b.n	8011736 <__libc_init_array+0x1e>
 8011750:	08016094 	.word	0x08016094
 8011754:	08016094 	.word	0x08016094
 8011758:	08016094 	.word	0x08016094
 801175c:	0801609c 	.word	0x0801609c

08011760 <memset>:
 8011760:	4402      	add	r2, r0
 8011762:	4603      	mov	r3, r0
 8011764:	4293      	cmp	r3, r2
 8011766:	d100      	bne.n	801176a <memset+0xa>
 8011768:	4770      	bx	lr
 801176a:	f803 1b01 	strb.w	r1, [r3], #1
 801176e:	e7f9      	b.n	8011764 <memset+0x4>

08011770 <__cvt>:
 8011770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011772:	ed2d 8b02 	vpush	{d8}
 8011776:	eeb0 8b40 	vmov.f64	d8, d0
 801177a:	b085      	sub	sp, #20
 801177c:	4617      	mov	r7, r2
 801177e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011780:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011782:	ee18 2a90 	vmov	r2, s17
 8011786:	f025 0520 	bic.w	r5, r5, #32
 801178a:	2a00      	cmp	r2, #0
 801178c:	bfb6      	itet	lt
 801178e:	222d      	movlt	r2, #45	; 0x2d
 8011790:	2200      	movge	r2, #0
 8011792:	eeb1 8b40 	vneglt.f64	d8, d0
 8011796:	2d46      	cmp	r5, #70	; 0x46
 8011798:	460c      	mov	r4, r1
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	d004      	beq.n	80117a8 <__cvt+0x38>
 801179e:	2d45      	cmp	r5, #69	; 0x45
 80117a0:	d100      	bne.n	80117a4 <__cvt+0x34>
 80117a2:	3401      	adds	r4, #1
 80117a4:	2102      	movs	r1, #2
 80117a6:	e000      	b.n	80117aa <__cvt+0x3a>
 80117a8:	2103      	movs	r1, #3
 80117aa:	ab03      	add	r3, sp, #12
 80117ac:	9301      	str	r3, [sp, #4]
 80117ae:	ab02      	add	r3, sp, #8
 80117b0:	9300      	str	r3, [sp, #0]
 80117b2:	4622      	mov	r2, r4
 80117b4:	4633      	mov	r3, r6
 80117b6:	eeb0 0b48 	vmov.f64	d0, d8
 80117ba:	f000 fddd 	bl	8012378 <_dtoa_r>
 80117be:	2d47      	cmp	r5, #71	; 0x47
 80117c0:	d101      	bne.n	80117c6 <__cvt+0x56>
 80117c2:	07fb      	lsls	r3, r7, #31
 80117c4:	d51a      	bpl.n	80117fc <__cvt+0x8c>
 80117c6:	2d46      	cmp	r5, #70	; 0x46
 80117c8:	eb00 0204 	add.w	r2, r0, r4
 80117cc:	d10c      	bne.n	80117e8 <__cvt+0x78>
 80117ce:	7803      	ldrb	r3, [r0, #0]
 80117d0:	2b30      	cmp	r3, #48	; 0x30
 80117d2:	d107      	bne.n	80117e4 <__cvt+0x74>
 80117d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80117d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117dc:	bf1c      	itt	ne
 80117de:	f1c4 0401 	rsbne	r4, r4, #1
 80117e2:	6034      	strne	r4, [r6, #0]
 80117e4:	6833      	ldr	r3, [r6, #0]
 80117e6:	441a      	add	r2, r3
 80117e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80117ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f0:	bf08      	it	eq
 80117f2:	9203      	streq	r2, [sp, #12]
 80117f4:	2130      	movs	r1, #48	; 0x30
 80117f6:	9b03      	ldr	r3, [sp, #12]
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d307      	bcc.n	801180c <__cvt+0x9c>
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011800:	1a1b      	subs	r3, r3, r0
 8011802:	6013      	str	r3, [r2, #0]
 8011804:	b005      	add	sp, #20
 8011806:	ecbd 8b02 	vpop	{d8}
 801180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801180c:	1c5c      	adds	r4, r3, #1
 801180e:	9403      	str	r4, [sp, #12]
 8011810:	7019      	strb	r1, [r3, #0]
 8011812:	e7f0      	b.n	80117f6 <__cvt+0x86>

08011814 <__exponent>:
 8011814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011816:	4603      	mov	r3, r0
 8011818:	2900      	cmp	r1, #0
 801181a:	bfb8      	it	lt
 801181c:	4249      	neglt	r1, r1
 801181e:	f803 2b02 	strb.w	r2, [r3], #2
 8011822:	bfb4      	ite	lt
 8011824:	222d      	movlt	r2, #45	; 0x2d
 8011826:	222b      	movge	r2, #43	; 0x2b
 8011828:	2909      	cmp	r1, #9
 801182a:	7042      	strb	r2, [r0, #1]
 801182c:	dd2a      	ble.n	8011884 <__exponent+0x70>
 801182e:	f10d 0407 	add.w	r4, sp, #7
 8011832:	46a4      	mov	ip, r4
 8011834:	270a      	movs	r7, #10
 8011836:	46a6      	mov	lr, r4
 8011838:	460a      	mov	r2, r1
 801183a:	fb91 f6f7 	sdiv	r6, r1, r7
 801183e:	fb07 1516 	mls	r5, r7, r6, r1
 8011842:	3530      	adds	r5, #48	; 0x30
 8011844:	2a63      	cmp	r2, #99	; 0x63
 8011846:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801184a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801184e:	4631      	mov	r1, r6
 8011850:	dcf1      	bgt.n	8011836 <__exponent+0x22>
 8011852:	3130      	adds	r1, #48	; 0x30
 8011854:	f1ae 0502 	sub.w	r5, lr, #2
 8011858:	f804 1c01 	strb.w	r1, [r4, #-1]
 801185c:	1c44      	adds	r4, r0, #1
 801185e:	4629      	mov	r1, r5
 8011860:	4561      	cmp	r1, ip
 8011862:	d30a      	bcc.n	801187a <__exponent+0x66>
 8011864:	f10d 0209 	add.w	r2, sp, #9
 8011868:	eba2 020e 	sub.w	r2, r2, lr
 801186c:	4565      	cmp	r5, ip
 801186e:	bf88      	it	hi
 8011870:	2200      	movhi	r2, #0
 8011872:	4413      	add	r3, r2
 8011874:	1a18      	subs	r0, r3, r0
 8011876:	b003      	add	sp, #12
 8011878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801187a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801187e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011882:	e7ed      	b.n	8011860 <__exponent+0x4c>
 8011884:	2330      	movs	r3, #48	; 0x30
 8011886:	3130      	adds	r1, #48	; 0x30
 8011888:	7083      	strb	r3, [r0, #2]
 801188a:	70c1      	strb	r1, [r0, #3]
 801188c:	1d03      	adds	r3, r0, #4
 801188e:	e7f1      	b.n	8011874 <__exponent+0x60>

08011890 <_printf_float>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	b08b      	sub	sp, #44	; 0x2c
 8011896:	460c      	mov	r4, r1
 8011898:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801189c:	4616      	mov	r6, r2
 801189e:	461f      	mov	r7, r3
 80118a0:	4605      	mov	r5, r0
 80118a2:	f001 fc8f 	bl	80131c4 <_localeconv_r>
 80118a6:	f8d0 b000 	ldr.w	fp, [r0]
 80118aa:	4658      	mov	r0, fp
 80118ac:	f7ee fd18 	bl	80002e0 <strlen>
 80118b0:	2300      	movs	r3, #0
 80118b2:	9308      	str	r3, [sp, #32]
 80118b4:	f8d8 3000 	ldr.w	r3, [r8]
 80118b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80118bc:	6822      	ldr	r2, [r4, #0]
 80118be:	3307      	adds	r3, #7
 80118c0:	f023 0307 	bic.w	r3, r3, #7
 80118c4:	f103 0108 	add.w	r1, r3, #8
 80118c8:	f8c8 1000 	str.w	r1, [r8]
 80118cc:	4682      	mov	sl, r0
 80118ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80118d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80118d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011b38 <_printf_float+0x2a8>
 80118da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80118de:	eeb0 6bc0 	vabs.f64	d6, d0
 80118e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	dd24      	ble.n	8011936 <_printf_float+0xa6>
 80118ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80118f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f4:	d502      	bpl.n	80118fc <_printf_float+0x6c>
 80118f6:	232d      	movs	r3, #45	; 0x2d
 80118f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118fc:	4b90      	ldr	r3, [pc, #576]	; (8011b40 <_printf_float+0x2b0>)
 80118fe:	4891      	ldr	r0, [pc, #580]	; (8011b44 <_printf_float+0x2b4>)
 8011900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011904:	bf94      	ite	ls
 8011906:	4698      	movls	r8, r3
 8011908:	4680      	movhi	r8, r0
 801190a:	2303      	movs	r3, #3
 801190c:	6123      	str	r3, [r4, #16]
 801190e:	f022 0204 	bic.w	r2, r2, #4
 8011912:	2300      	movs	r3, #0
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	9304      	str	r3, [sp, #16]
 8011918:	9700      	str	r7, [sp, #0]
 801191a:	4633      	mov	r3, r6
 801191c:	aa09      	add	r2, sp, #36	; 0x24
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	f000 f9d3 	bl	8011ccc <_printf_common>
 8011926:	3001      	adds	r0, #1
 8011928:	f040 808a 	bne.w	8011a40 <_printf_float+0x1b0>
 801192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011930:	b00b      	add	sp, #44	; 0x2c
 8011932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011936:	eeb4 0b40 	vcmp.f64	d0, d0
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	d709      	bvc.n	8011954 <_printf_float+0xc4>
 8011940:	ee10 3a90 	vmov	r3, s1
 8011944:	2b00      	cmp	r3, #0
 8011946:	bfbc      	itt	lt
 8011948:	232d      	movlt	r3, #45	; 0x2d
 801194a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801194e:	487e      	ldr	r0, [pc, #504]	; (8011b48 <_printf_float+0x2b8>)
 8011950:	4b7e      	ldr	r3, [pc, #504]	; (8011b4c <_printf_float+0x2bc>)
 8011952:	e7d5      	b.n	8011900 <_printf_float+0x70>
 8011954:	6863      	ldr	r3, [r4, #4]
 8011956:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801195a:	9104      	str	r1, [sp, #16]
 801195c:	1c59      	adds	r1, r3, #1
 801195e:	d13c      	bne.n	80119da <_printf_float+0x14a>
 8011960:	2306      	movs	r3, #6
 8011962:	6063      	str	r3, [r4, #4]
 8011964:	2300      	movs	r3, #0
 8011966:	9303      	str	r3, [sp, #12]
 8011968:	ab08      	add	r3, sp, #32
 801196a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801196e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011972:	ab07      	add	r3, sp, #28
 8011974:	6861      	ldr	r1, [r4, #4]
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	6022      	str	r2, [r4, #0]
 801197a:	f10d 031b 	add.w	r3, sp, #27
 801197e:	4628      	mov	r0, r5
 8011980:	f7ff fef6 	bl	8011770 <__cvt>
 8011984:	9b04      	ldr	r3, [sp, #16]
 8011986:	9907      	ldr	r1, [sp, #28]
 8011988:	2b47      	cmp	r3, #71	; 0x47
 801198a:	4680      	mov	r8, r0
 801198c:	d108      	bne.n	80119a0 <_printf_float+0x110>
 801198e:	1cc8      	adds	r0, r1, #3
 8011990:	db02      	blt.n	8011998 <_printf_float+0x108>
 8011992:	6863      	ldr	r3, [r4, #4]
 8011994:	4299      	cmp	r1, r3
 8011996:	dd41      	ble.n	8011a1c <_printf_float+0x18c>
 8011998:	f1a9 0902 	sub.w	r9, r9, #2
 801199c:	fa5f f989 	uxtb.w	r9, r9
 80119a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80119a4:	d820      	bhi.n	80119e8 <_printf_float+0x158>
 80119a6:	3901      	subs	r1, #1
 80119a8:	464a      	mov	r2, r9
 80119aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80119ae:	9107      	str	r1, [sp, #28]
 80119b0:	f7ff ff30 	bl	8011814 <__exponent>
 80119b4:	9a08      	ldr	r2, [sp, #32]
 80119b6:	9004      	str	r0, [sp, #16]
 80119b8:	1813      	adds	r3, r2, r0
 80119ba:	2a01      	cmp	r2, #1
 80119bc:	6123      	str	r3, [r4, #16]
 80119be:	dc02      	bgt.n	80119c6 <_printf_float+0x136>
 80119c0:	6822      	ldr	r2, [r4, #0]
 80119c2:	07d2      	lsls	r2, r2, #31
 80119c4:	d501      	bpl.n	80119ca <_printf_float+0x13a>
 80119c6:	3301      	adds	r3, #1
 80119c8:	6123      	str	r3, [r4, #16]
 80119ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d0a2      	beq.n	8011918 <_printf_float+0x88>
 80119d2:	232d      	movs	r3, #45	; 0x2d
 80119d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d8:	e79e      	b.n	8011918 <_printf_float+0x88>
 80119da:	9904      	ldr	r1, [sp, #16]
 80119dc:	2947      	cmp	r1, #71	; 0x47
 80119de:	d1c1      	bne.n	8011964 <_printf_float+0xd4>
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1bf      	bne.n	8011964 <_printf_float+0xd4>
 80119e4:	2301      	movs	r3, #1
 80119e6:	e7bc      	b.n	8011962 <_printf_float+0xd2>
 80119e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80119ec:	d118      	bne.n	8011a20 <_printf_float+0x190>
 80119ee:	2900      	cmp	r1, #0
 80119f0:	6863      	ldr	r3, [r4, #4]
 80119f2:	dd0b      	ble.n	8011a0c <_printf_float+0x17c>
 80119f4:	6121      	str	r1, [r4, #16]
 80119f6:	b913      	cbnz	r3, 80119fe <_printf_float+0x16e>
 80119f8:	6822      	ldr	r2, [r4, #0]
 80119fa:	07d0      	lsls	r0, r2, #31
 80119fc:	d502      	bpl.n	8011a04 <_printf_float+0x174>
 80119fe:	3301      	adds	r3, #1
 8011a00:	440b      	add	r3, r1
 8011a02:	6123      	str	r3, [r4, #16]
 8011a04:	2300      	movs	r3, #0
 8011a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a08:	9304      	str	r3, [sp, #16]
 8011a0a:	e7de      	b.n	80119ca <_printf_float+0x13a>
 8011a0c:	b913      	cbnz	r3, 8011a14 <_printf_float+0x184>
 8011a0e:	6822      	ldr	r2, [r4, #0]
 8011a10:	07d2      	lsls	r2, r2, #31
 8011a12:	d501      	bpl.n	8011a18 <_printf_float+0x188>
 8011a14:	3302      	adds	r3, #2
 8011a16:	e7f4      	b.n	8011a02 <_printf_float+0x172>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	e7f2      	b.n	8011a02 <_printf_float+0x172>
 8011a1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011a20:	9b08      	ldr	r3, [sp, #32]
 8011a22:	4299      	cmp	r1, r3
 8011a24:	db05      	blt.n	8011a32 <_printf_float+0x1a2>
 8011a26:	6823      	ldr	r3, [r4, #0]
 8011a28:	6121      	str	r1, [r4, #16]
 8011a2a:	07d8      	lsls	r0, r3, #31
 8011a2c:	d5ea      	bpl.n	8011a04 <_printf_float+0x174>
 8011a2e:	1c4b      	adds	r3, r1, #1
 8011a30:	e7e7      	b.n	8011a02 <_printf_float+0x172>
 8011a32:	2900      	cmp	r1, #0
 8011a34:	bfd4      	ite	le
 8011a36:	f1c1 0202 	rsble	r2, r1, #2
 8011a3a:	2201      	movgt	r2, #1
 8011a3c:	4413      	add	r3, r2
 8011a3e:	e7e0      	b.n	8011a02 <_printf_float+0x172>
 8011a40:	6823      	ldr	r3, [r4, #0]
 8011a42:	055a      	lsls	r2, r3, #21
 8011a44:	d407      	bmi.n	8011a56 <_printf_float+0x1c6>
 8011a46:	6923      	ldr	r3, [r4, #16]
 8011a48:	4642      	mov	r2, r8
 8011a4a:	4631      	mov	r1, r6
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	47b8      	blx	r7
 8011a50:	3001      	adds	r0, #1
 8011a52:	d12a      	bne.n	8011aaa <_printf_float+0x21a>
 8011a54:	e76a      	b.n	801192c <_printf_float+0x9c>
 8011a56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011a5a:	f240 80e2 	bls.w	8011c22 <_printf_float+0x392>
 8011a5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6a:	d133      	bne.n	8011ad4 <_printf_float+0x244>
 8011a6c:	4a38      	ldr	r2, [pc, #224]	; (8011b50 <_printf_float+0x2c0>)
 8011a6e:	2301      	movs	r3, #1
 8011a70:	4631      	mov	r1, r6
 8011a72:	4628      	mov	r0, r5
 8011a74:	47b8      	blx	r7
 8011a76:	3001      	adds	r0, #1
 8011a78:	f43f af58 	beq.w	801192c <_printf_float+0x9c>
 8011a7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	db02      	blt.n	8011a8a <_printf_float+0x1fa>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	07d8      	lsls	r0, r3, #31
 8011a88:	d50f      	bpl.n	8011aaa <_printf_float+0x21a>
 8011a8a:	4653      	mov	r3, sl
 8011a8c:	465a      	mov	r2, fp
 8011a8e:	4631      	mov	r1, r6
 8011a90:	4628      	mov	r0, r5
 8011a92:	47b8      	blx	r7
 8011a94:	3001      	adds	r0, #1
 8011a96:	f43f af49 	beq.w	801192c <_printf_float+0x9c>
 8011a9a:	f04f 0800 	mov.w	r8, #0
 8011a9e:	f104 091a 	add.w	r9, r4, #26
 8011aa2:	9b08      	ldr	r3, [sp, #32]
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	4543      	cmp	r3, r8
 8011aa8:	dc09      	bgt.n	8011abe <_printf_float+0x22e>
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	079b      	lsls	r3, r3, #30
 8011aae:	f100 8108 	bmi.w	8011cc2 <_printf_float+0x432>
 8011ab2:	68e0      	ldr	r0, [r4, #12]
 8011ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab6:	4298      	cmp	r0, r3
 8011ab8:	bfb8      	it	lt
 8011aba:	4618      	movlt	r0, r3
 8011abc:	e738      	b.n	8011930 <_printf_float+0xa0>
 8011abe:	2301      	movs	r3, #1
 8011ac0:	464a      	mov	r2, r9
 8011ac2:	4631      	mov	r1, r6
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	47b8      	blx	r7
 8011ac8:	3001      	adds	r0, #1
 8011aca:	f43f af2f 	beq.w	801192c <_printf_float+0x9c>
 8011ace:	f108 0801 	add.w	r8, r8, #1
 8011ad2:	e7e6      	b.n	8011aa2 <_printf_float+0x212>
 8011ad4:	9b07      	ldr	r3, [sp, #28]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	dc3c      	bgt.n	8011b54 <_printf_float+0x2c4>
 8011ada:	4a1d      	ldr	r2, [pc, #116]	; (8011b50 <_printf_float+0x2c0>)
 8011adc:	2301      	movs	r3, #1
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b8      	blx	r7
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	f43f af21 	beq.w	801192c <_printf_float+0x9c>
 8011aea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011aee:	4313      	orrs	r3, r2
 8011af0:	d102      	bne.n	8011af8 <_printf_float+0x268>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	07d9      	lsls	r1, r3, #31
 8011af6:	d5d8      	bpl.n	8011aaa <_printf_float+0x21a>
 8011af8:	4653      	mov	r3, sl
 8011afa:	465a      	mov	r2, fp
 8011afc:	4631      	mov	r1, r6
 8011afe:	4628      	mov	r0, r5
 8011b00:	47b8      	blx	r7
 8011b02:	3001      	adds	r0, #1
 8011b04:	f43f af12 	beq.w	801192c <_printf_float+0x9c>
 8011b08:	f04f 0900 	mov.w	r9, #0
 8011b0c:	f104 0a1a 	add.w	sl, r4, #26
 8011b10:	9b07      	ldr	r3, [sp, #28]
 8011b12:	425b      	negs	r3, r3
 8011b14:	454b      	cmp	r3, r9
 8011b16:	dc01      	bgt.n	8011b1c <_printf_float+0x28c>
 8011b18:	9b08      	ldr	r3, [sp, #32]
 8011b1a:	e795      	b.n	8011a48 <_printf_float+0x1b8>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	4652      	mov	r2, sl
 8011b20:	4631      	mov	r1, r6
 8011b22:	4628      	mov	r0, r5
 8011b24:	47b8      	blx	r7
 8011b26:	3001      	adds	r0, #1
 8011b28:	f43f af00 	beq.w	801192c <_printf_float+0x9c>
 8011b2c:	f109 0901 	add.w	r9, r9, #1
 8011b30:	e7ee      	b.n	8011b10 <_printf_float+0x280>
 8011b32:	bf00      	nop
 8011b34:	f3af 8000 	nop.w
 8011b38:	ffffffff 	.word	0xffffffff
 8011b3c:	7fefffff 	.word	0x7fefffff
 8011b40:	08015cb4 	.word	0x08015cb4
 8011b44:	08015cb8 	.word	0x08015cb8
 8011b48:	08015cc0 	.word	0x08015cc0
 8011b4c:	08015cbc 	.word	0x08015cbc
 8011b50:	08015cc4 	.word	0x08015cc4
 8011b54:	9a08      	ldr	r2, [sp, #32]
 8011b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	bfa8      	it	ge
 8011b5c:	461a      	movge	r2, r3
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	4691      	mov	r9, r2
 8011b62:	dc38      	bgt.n	8011bd6 <_printf_float+0x346>
 8011b64:	2300      	movs	r3, #0
 8011b66:	9305      	str	r3, [sp, #20]
 8011b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b6c:	f104 021a 	add.w	r2, r4, #26
 8011b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b72:	9905      	ldr	r1, [sp, #20]
 8011b74:	9304      	str	r3, [sp, #16]
 8011b76:	eba3 0309 	sub.w	r3, r3, r9
 8011b7a:	428b      	cmp	r3, r1
 8011b7c:	dc33      	bgt.n	8011be6 <_printf_float+0x356>
 8011b7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	db3c      	blt.n	8011c00 <_printf_float+0x370>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	07da      	lsls	r2, r3, #31
 8011b8a:	d439      	bmi.n	8011c00 <_printf_float+0x370>
 8011b8c:	9b08      	ldr	r3, [sp, #32]
 8011b8e:	9a04      	ldr	r2, [sp, #16]
 8011b90:	9907      	ldr	r1, [sp, #28]
 8011b92:	1a9a      	subs	r2, r3, r2
 8011b94:	eba3 0901 	sub.w	r9, r3, r1
 8011b98:	4591      	cmp	r9, r2
 8011b9a:	bfa8      	it	ge
 8011b9c:	4691      	movge	r9, r2
 8011b9e:	f1b9 0f00 	cmp.w	r9, #0
 8011ba2:	dc35      	bgt.n	8011c10 <_printf_float+0x380>
 8011ba4:	f04f 0800 	mov.w	r8, #0
 8011ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bac:	f104 0a1a 	add.w	sl, r4, #26
 8011bb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011bb4:	1a9b      	subs	r3, r3, r2
 8011bb6:	eba3 0309 	sub.w	r3, r3, r9
 8011bba:	4543      	cmp	r3, r8
 8011bbc:	f77f af75 	ble.w	8011aaa <_printf_float+0x21a>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	4652      	mov	r2, sl
 8011bc4:	4631      	mov	r1, r6
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	47b8      	blx	r7
 8011bca:	3001      	adds	r0, #1
 8011bcc:	f43f aeae 	beq.w	801192c <_printf_float+0x9c>
 8011bd0:	f108 0801 	add.w	r8, r8, #1
 8011bd4:	e7ec      	b.n	8011bb0 <_printf_float+0x320>
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	4631      	mov	r1, r6
 8011bda:	4642      	mov	r2, r8
 8011bdc:	4628      	mov	r0, r5
 8011bde:	47b8      	blx	r7
 8011be0:	3001      	adds	r0, #1
 8011be2:	d1bf      	bne.n	8011b64 <_printf_float+0x2d4>
 8011be4:	e6a2      	b.n	801192c <_printf_float+0x9c>
 8011be6:	2301      	movs	r3, #1
 8011be8:	4631      	mov	r1, r6
 8011bea:	4628      	mov	r0, r5
 8011bec:	9204      	str	r2, [sp, #16]
 8011bee:	47b8      	blx	r7
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	f43f ae9b 	beq.w	801192c <_printf_float+0x9c>
 8011bf6:	9b05      	ldr	r3, [sp, #20]
 8011bf8:	9a04      	ldr	r2, [sp, #16]
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	9305      	str	r3, [sp, #20]
 8011bfe:	e7b7      	b.n	8011b70 <_printf_float+0x2e0>
 8011c00:	4653      	mov	r3, sl
 8011c02:	465a      	mov	r2, fp
 8011c04:	4631      	mov	r1, r6
 8011c06:	4628      	mov	r0, r5
 8011c08:	47b8      	blx	r7
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	d1be      	bne.n	8011b8c <_printf_float+0x2fc>
 8011c0e:	e68d      	b.n	801192c <_printf_float+0x9c>
 8011c10:	9a04      	ldr	r2, [sp, #16]
 8011c12:	464b      	mov	r3, r9
 8011c14:	4442      	add	r2, r8
 8011c16:	4631      	mov	r1, r6
 8011c18:	4628      	mov	r0, r5
 8011c1a:	47b8      	blx	r7
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	d1c1      	bne.n	8011ba4 <_printf_float+0x314>
 8011c20:	e684      	b.n	801192c <_printf_float+0x9c>
 8011c22:	9a08      	ldr	r2, [sp, #32]
 8011c24:	2a01      	cmp	r2, #1
 8011c26:	dc01      	bgt.n	8011c2c <_printf_float+0x39c>
 8011c28:	07db      	lsls	r3, r3, #31
 8011c2a:	d537      	bpl.n	8011c9c <_printf_float+0x40c>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	4642      	mov	r2, r8
 8011c30:	4631      	mov	r1, r6
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b8      	blx	r7
 8011c36:	3001      	adds	r0, #1
 8011c38:	f43f ae78 	beq.w	801192c <_printf_float+0x9c>
 8011c3c:	4653      	mov	r3, sl
 8011c3e:	465a      	mov	r2, fp
 8011c40:	4631      	mov	r1, r6
 8011c42:	4628      	mov	r0, r5
 8011c44:	47b8      	blx	r7
 8011c46:	3001      	adds	r0, #1
 8011c48:	f43f ae70 	beq.w	801192c <_printf_float+0x9c>
 8011c4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011c50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c58:	d01b      	beq.n	8011c92 <_printf_float+0x402>
 8011c5a:	9b08      	ldr	r3, [sp, #32]
 8011c5c:	f108 0201 	add.w	r2, r8, #1
 8011c60:	3b01      	subs	r3, #1
 8011c62:	4631      	mov	r1, r6
 8011c64:	4628      	mov	r0, r5
 8011c66:	47b8      	blx	r7
 8011c68:	3001      	adds	r0, #1
 8011c6a:	d10e      	bne.n	8011c8a <_printf_float+0x3fa>
 8011c6c:	e65e      	b.n	801192c <_printf_float+0x9c>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	464a      	mov	r2, r9
 8011c72:	4631      	mov	r1, r6
 8011c74:	4628      	mov	r0, r5
 8011c76:	47b8      	blx	r7
 8011c78:	3001      	adds	r0, #1
 8011c7a:	f43f ae57 	beq.w	801192c <_printf_float+0x9c>
 8011c7e:	f108 0801 	add.w	r8, r8, #1
 8011c82:	9b08      	ldr	r3, [sp, #32]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	4543      	cmp	r3, r8
 8011c88:	dcf1      	bgt.n	8011c6e <_printf_float+0x3de>
 8011c8a:	9b04      	ldr	r3, [sp, #16]
 8011c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c90:	e6db      	b.n	8011a4a <_printf_float+0x1ba>
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	f104 091a 	add.w	r9, r4, #26
 8011c9a:	e7f2      	b.n	8011c82 <_printf_float+0x3f2>
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	4642      	mov	r2, r8
 8011ca0:	e7df      	b.n	8011c62 <_printf_float+0x3d2>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	464a      	mov	r2, r9
 8011ca6:	4631      	mov	r1, r6
 8011ca8:	4628      	mov	r0, r5
 8011caa:	47b8      	blx	r7
 8011cac:	3001      	adds	r0, #1
 8011cae:	f43f ae3d 	beq.w	801192c <_printf_float+0x9c>
 8011cb2:	f108 0801 	add.w	r8, r8, #1
 8011cb6:	68e3      	ldr	r3, [r4, #12]
 8011cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cba:	1a5b      	subs	r3, r3, r1
 8011cbc:	4543      	cmp	r3, r8
 8011cbe:	dcf0      	bgt.n	8011ca2 <_printf_float+0x412>
 8011cc0:	e6f7      	b.n	8011ab2 <_printf_float+0x222>
 8011cc2:	f04f 0800 	mov.w	r8, #0
 8011cc6:	f104 0919 	add.w	r9, r4, #25
 8011cca:	e7f4      	b.n	8011cb6 <_printf_float+0x426>

08011ccc <_printf_common>:
 8011ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cd0:	4616      	mov	r6, r2
 8011cd2:	4699      	mov	r9, r3
 8011cd4:	688a      	ldr	r2, [r1, #8]
 8011cd6:	690b      	ldr	r3, [r1, #16]
 8011cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	bfb8      	it	lt
 8011ce0:	4613      	movlt	r3, r2
 8011ce2:	6033      	str	r3, [r6, #0]
 8011ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ce8:	4607      	mov	r7, r0
 8011cea:	460c      	mov	r4, r1
 8011cec:	b10a      	cbz	r2, 8011cf2 <_printf_common+0x26>
 8011cee:	3301      	adds	r3, #1
 8011cf0:	6033      	str	r3, [r6, #0]
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	0699      	lsls	r1, r3, #26
 8011cf6:	bf42      	ittt	mi
 8011cf8:	6833      	ldrmi	r3, [r6, #0]
 8011cfa:	3302      	addmi	r3, #2
 8011cfc:	6033      	strmi	r3, [r6, #0]
 8011cfe:	6825      	ldr	r5, [r4, #0]
 8011d00:	f015 0506 	ands.w	r5, r5, #6
 8011d04:	d106      	bne.n	8011d14 <_printf_common+0x48>
 8011d06:	f104 0a19 	add.w	sl, r4, #25
 8011d0a:	68e3      	ldr	r3, [r4, #12]
 8011d0c:	6832      	ldr	r2, [r6, #0]
 8011d0e:	1a9b      	subs	r3, r3, r2
 8011d10:	42ab      	cmp	r3, r5
 8011d12:	dc26      	bgt.n	8011d62 <_printf_common+0x96>
 8011d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d18:	1e13      	subs	r3, r2, #0
 8011d1a:	6822      	ldr	r2, [r4, #0]
 8011d1c:	bf18      	it	ne
 8011d1e:	2301      	movne	r3, #1
 8011d20:	0692      	lsls	r2, r2, #26
 8011d22:	d42b      	bmi.n	8011d7c <_printf_common+0xb0>
 8011d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d28:	4649      	mov	r1, r9
 8011d2a:	4638      	mov	r0, r7
 8011d2c:	47c0      	blx	r8
 8011d2e:	3001      	adds	r0, #1
 8011d30:	d01e      	beq.n	8011d70 <_printf_common+0xa4>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	68e5      	ldr	r5, [r4, #12]
 8011d36:	6832      	ldr	r2, [r6, #0]
 8011d38:	f003 0306 	and.w	r3, r3, #6
 8011d3c:	2b04      	cmp	r3, #4
 8011d3e:	bf08      	it	eq
 8011d40:	1aad      	subeq	r5, r5, r2
 8011d42:	68a3      	ldr	r3, [r4, #8]
 8011d44:	6922      	ldr	r2, [r4, #16]
 8011d46:	bf0c      	ite	eq
 8011d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d4c:	2500      	movne	r5, #0
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	bfc4      	itt	gt
 8011d52:	1a9b      	subgt	r3, r3, r2
 8011d54:	18ed      	addgt	r5, r5, r3
 8011d56:	2600      	movs	r6, #0
 8011d58:	341a      	adds	r4, #26
 8011d5a:	42b5      	cmp	r5, r6
 8011d5c:	d11a      	bne.n	8011d94 <_printf_common+0xc8>
 8011d5e:	2000      	movs	r0, #0
 8011d60:	e008      	b.n	8011d74 <_printf_common+0xa8>
 8011d62:	2301      	movs	r3, #1
 8011d64:	4652      	mov	r2, sl
 8011d66:	4649      	mov	r1, r9
 8011d68:	4638      	mov	r0, r7
 8011d6a:	47c0      	blx	r8
 8011d6c:	3001      	adds	r0, #1
 8011d6e:	d103      	bne.n	8011d78 <_printf_common+0xac>
 8011d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d78:	3501      	adds	r5, #1
 8011d7a:	e7c6      	b.n	8011d0a <_printf_common+0x3e>
 8011d7c:	18e1      	adds	r1, r4, r3
 8011d7e:	1c5a      	adds	r2, r3, #1
 8011d80:	2030      	movs	r0, #48	; 0x30
 8011d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d86:	4422      	add	r2, r4
 8011d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d90:	3302      	adds	r3, #2
 8011d92:	e7c7      	b.n	8011d24 <_printf_common+0x58>
 8011d94:	2301      	movs	r3, #1
 8011d96:	4622      	mov	r2, r4
 8011d98:	4649      	mov	r1, r9
 8011d9a:	4638      	mov	r0, r7
 8011d9c:	47c0      	blx	r8
 8011d9e:	3001      	adds	r0, #1
 8011da0:	d0e6      	beq.n	8011d70 <_printf_common+0xa4>
 8011da2:	3601      	adds	r6, #1
 8011da4:	e7d9      	b.n	8011d5a <_printf_common+0x8e>
	...

08011da8 <_printf_i>:
 8011da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dac:	7e0f      	ldrb	r7, [r1, #24]
 8011dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011db0:	2f78      	cmp	r7, #120	; 0x78
 8011db2:	4691      	mov	r9, r2
 8011db4:	4680      	mov	r8, r0
 8011db6:	460c      	mov	r4, r1
 8011db8:	469a      	mov	sl, r3
 8011dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011dbe:	d807      	bhi.n	8011dd0 <_printf_i+0x28>
 8011dc0:	2f62      	cmp	r7, #98	; 0x62
 8011dc2:	d80a      	bhi.n	8011dda <_printf_i+0x32>
 8011dc4:	2f00      	cmp	r7, #0
 8011dc6:	f000 80d8 	beq.w	8011f7a <_printf_i+0x1d2>
 8011dca:	2f58      	cmp	r7, #88	; 0x58
 8011dcc:	f000 80a3 	beq.w	8011f16 <_printf_i+0x16e>
 8011dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011dd8:	e03a      	b.n	8011e50 <_printf_i+0xa8>
 8011dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dde:	2b15      	cmp	r3, #21
 8011de0:	d8f6      	bhi.n	8011dd0 <_printf_i+0x28>
 8011de2:	a101      	add	r1, pc, #4	; (adr r1, 8011de8 <_printf_i+0x40>)
 8011de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011de8:	08011e41 	.word	0x08011e41
 8011dec:	08011e55 	.word	0x08011e55
 8011df0:	08011dd1 	.word	0x08011dd1
 8011df4:	08011dd1 	.word	0x08011dd1
 8011df8:	08011dd1 	.word	0x08011dd1
 8011dfc:	08011dd1 	.word	0x08011dd1
 8011e00:	08011e55 	.word	0x08011e55
 8011e04:	08011dd1 	.word	0x08011dd1
 8011e08:	08011dd1 	.word	0x08011dd1
 8011e0c:	08011dd1 	.word	0x08011dd1
 8011e10:	08011dd1 	.word	0x08011dd1
 8011e14:	08011f61 	.word	0x08011f61
 8011e18:	08011e85 	.word	0x08011e85
 8011e1c:	08011f43 	.word	0x08011f43
 8011e20:	08011dd1 	.word	0x08011dd1
 8011e24:	08011dd1 	.word	0x08011dd1
 8011e28:	08011f83 	.word	0x08011f83
 8011e2c:	08011dd1 	.word	0x08011dd1
 8011e30:	08011e85 	.word	0x08011e85
 8011e34:	08011dd1 	.word	0x08011dd1
 8011e38:	08011dd1 	.word	0x08011dd1
 8011e3c:	08011f4b 	.word	0x08011f4b
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	1d1a      	adds	r2, r3, #4
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	602a      	str	r2, [r5, #0]
 8011e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e50:	2301      	movs	r3, #1
 8011e52:	e0a3      	b.n	8011f9c <_printf_i+0x1f4>
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	6829      	ldr	r1, [r5, #0]
 8011e58:	0606      	lsls	r6, r0, #24
 8011e5a:	f101 0304 	add.w	r3, r1, #4
 8011e5e:	d50a      	bpl.n	8011e76 <_printf_i+0xce>
 8011e60:	680e      	ldr	r6, [r1, #0]
 8011e62:	602b      	str	r3, [r5, #0]
 8011e64:	2e00      	cmp	r6, #0
 8011e66:	da03      	bge.n	8011e70 <_printf_i+0xc8>
 8011e68:	232d      	movs	r3, #45	; 0x2d
 8011e6a:	4276      	negs	r6, r6
 8011e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e70:	485e      	ldr	r0, [pc, #376]	; (8011fec <_printf_i+0x244>)
 8011e72:	230a      	movs	r3, #10
 8011e74:	e019      	b.n	8011eaa <_printf_i+0x102>
 8011e76:	680e      	ldr	r6, [r1, #0]
 8011e78:	602b      	str	r3, [r5, #0]
 8011e7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011e7e:	bf18      	it	ne
 8011e80:	b236      	sxthne	r6, r6
 8011e82:	e7ef      	b.n	8011e64 <_printf_i+0xbc>
 8011e84:	682b      	ldr	r3, [r5, #0]
 8011e86:	6820      	ldr	r0, [r4, #0]
 8011e88:	1d19      	adds	r1, r3, #4
 8011e8a:	6029      	str	r1, [r5, #0]
 8011e8c:	0601      	lsls	r1, r0, #24
 8011e8e:	d501      	bpl.n	8011e94 <_printf_i+0xec>
 8011e90:	681e      	ldr	r6, [r3, #0]
 8011e92:	e002      	b.n	8011e9a <_printf_i+0xf2>
 8011e94:	0646      	lsls	r6, r0, #25
 8011e96:	d5fb      	bpl.n	8011e90 <_printf_i+0xe8>
 8011e98:	881e      	ldrh	r6, [r3, #0]
 8011e9a:	4854      	ldr	r0, [pc, #336]	; (8011fec <_printf_i+0x244>)
 8011e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8011e9e:	bf0c      	ite	eq
 8011ea0:	2308      	moveq	r3, #8
 8011ea2:	230a      	movne	r3, #10
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011eaa:	6865      	ldr	r5, [r4, #4]
 8011eac:	60a5      	str	r5, [r4, #8]
 8011eae:	2d00      	cmp	r5, #0
 8011eb0:	bfa2      	ittt	ge
 8011eb2:	6821      	ldrge	r1, [r4, #0]
 8011eb4:	f021 0104 	bicge.w	r1, r1, #4
 8011eb8:	6021      	strge	r1, [r4, #0]
 8011eba:	b90e      	cbnz	r6, 8011ec0 <_printf_i+0x118>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	d04d      	beq.n	8011f5c <_printf_i+0x1b4>
 8011ec0:	4615      	mov	r5, r2
 8011ec2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011ec6:	fb03 6711 	mls	r7, r3, r1, r6
 8011eca:	5dc7      	ldrb	r7, [r0, r7]
 8011ecc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ed0:	4637      	mov	r7, r6
 8011ed2:	42bb      	cmp	r3, r7
 8011ed4:	460e      	mov	r6, r1
 8011ed6:	d9f4      	bls.n	8011ec2 <_printf_i+0x11a>
 8011ed8:	2b08      	cmp	r3, #8
 8011eda:	d10b      	bne.n	8011ef4 <_printf_i+0x14c>
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	07de      	lsls	r6, r3, #31
 8011ee0:	d508      	bpl.n	8011ef4 <_printf_i+0x14c>
 8011ee2:	6923      	ldr	r3, [r4, #16]
 8011ee4:	6861      	ldr	r1, [r4, #4]
 8011ee6:	4299      	cmp	r1, r3
 8011ee8:	bfde      	ittt	le
 8011eea:	2330      	movle	r3, #48	; 0x30
 8011eec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ef0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011ef4:	1b52      	subs	r2, r2, r5
 8011ef6:	6122      	str	r2, [r4, #16]
 8011ef8:	f8cd a000 	str.w	sl, [sp]
 8011efc:	464b      	mov	r3, r9
 8011efe:	aa03      	add	r2, sp, #12
 8011f00:	4621      	mov	r1, r4
 8011f02:	4640      	mov	r0, r8
 8011f04:	f7ff fee2 	bl	8011ccc <_printf_common>
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d14c      	bne.n	8011fa6 <_printf_i+0x1fe>
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f10:	b004      	add	sp, #16
 8011f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f16:	4835      	ldr	r0, [pc, #212]	; (8011fec <_printf_i+0x244>)
 8011f18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011f1c:	6829      	ldr	r1, [r5, #0]
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f24:	6029      	str	r1, [r5, #0]
 8011f26:	061d      	lsls	r5, r3, #24
 8011f28:	d514      	bpl.n	8011f54 <_printf_i+0x1ac>
 8011f2a:	07df      	lsls	r7, r3, #31
 8011f2c:	bf44      	itt	mi
 8011f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8011f32:	6023      	strmi	r3, [r4, #0]
 8011f34:	b91e      	cbnz	r6, 8011f3e <_printf_i+0x196>
 8011f36:	6823      	ldr	r3, [r4, #0]
 8011f38:	f023 0320 	bic.w	r3, r3, #32
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	2310      	movs	r3, #16
 8011f40:	e7b0      	b.n	8011ea4 <_printf_i+0xfc>
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	f043 0320 	orr.w	r3, r3, #32
 8011f48:	6023      	str	r3, [r4, #0]
 8011f4a:	2378      	movs	r3, #120	; 0x78
 8011f4c:	4828      	ldr	r0, [pc, #160]	; (8011ff0 <_printf_i+0x248>)
 8011f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f52:	e7e3      	b.n	8011f1c <_printf_i+0x174>
 8011f54:	0659      	lsls	r1, r3, #25
 8011f56:	bf48      	it	mi
 8011f58:	b2b6      	uxthmi	r6, r6
 8011f5a:	e7e6      	b.n	8011f2a <_printf_i+0x182>
 8011f5c:	4615      	mov	r5, r2
 8011f5e:	e7bb      	b.n	8011ed8 <_printf_i+0x130>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	6826      	ldr	r6, [r4, #0]
 8011f64:	6961      	ldr	r1, [r4, #20]
 8011f66:	1d18      	adds	r0, r3, #4
 8011f68:	6028      	str	r0, [r5, #0]
 8011f6a:	0635      	lsls	r5, r6, #24
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	d501      	bpl.n	8011f74 <_printf_i+0x1cc>
 8011f70:	6019      	str	r1, [r3, #0]
 8011f72:	e002      	b.n	8011f7a <_printf_i+0x1d2>
 8011f74:	0670      	lsls	r0, r6, #25
 8011f76:	d5fb      	bpl.n	8011f70 <_printf_i+0x1c8>
 8011f78:	8019      	strh	r1, [r3, #0]
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	6123      	str	r3, [r4, #16]
 8011f7e:	4615      	mov	r5, r2
 8011f80:	e7ba      	b.n	8011ef8 <_printf_i+0x150>
 8011f82:	682b      	ldr	r3, [r5, #0]
 8011f84:	1d1a      	adds	r2, r3, #4
 8011f86:	602a      	str	r2, [r5, #0]
 8011f88:	681d      	ldr	r5, [r3, #0]
 8011f8a:	6862      	ldr	r2, [r4, #4]
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	4628      	mov	r0, r5
 8011f90:	f7ee f9ae 	bl	80002f0 <memchr>
 8011f94:	b108      	cbz	r0, 8011f9a <_printf_i+0x1f2>
 8011f96:	1b40      	subs	r0, r0, r5
 8011f98:	6060      	str	r0, [r4, #4]
 8011f9a:	6863      	ldr	r3, [r4, #4]
 8011f9c:	6123      	str	r3, [r4, #16]
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fa4:	e7a8      	b.n	8011ef8 <_printf_i+0x150>
 8011fa6:	6923      	ldr	r3, [r4, #16]
 8011fa8:	462a      	mov	r2, r5
 8011faa:	4649      	mov	r1, r9
 8011fac:	4640      	mov	r0, r8
 8011fae:	47d0      	blx	sl
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	d0ab      	beq.n	8011f0c <_printf_i+0x164>
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	079b      	lsls	r3, r3, #30
 8011fb8:	d413      	bmi.n	8011fe2 <_printf_i+0x23a>
 8011fba:	68e0      	ldr	r0, [r4, #12]
 8011fbc:	9b03      	ldr	r3, [sp, #12]
 8011fbe:	4298      	cmp	r0, r3
 8011fc0:	bfb8      	it	lt
 8011fc2:	4618      	movlt	r0, r3
 8011fc4:	e7a4      	b.n	8011f10 <_printf_i+0x168>
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	4632      	mov	r2, r6
 8011fca:	4649      	mov	r1, r9
 8011fcc:	4640      	mov	r0, r8
 8011fce:	47d0      	blx	sl
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	d09b      	beq.n	8011f0c <_printf_i+0x164>
 8011fd4:	3501      	adds	r5, #1
 8011fd6:	68e3      	ldr	r3, [r4, #12]
 8011fd8:	9903      	ldr	r1, [sp, #12]
 8011fda:	1a5b      	subs	r3, r3, r1
 8011fdc:	42ab      	cmp	r3, r5
 8011fde:	dcf2      	bgt.n	8011fc6 <_printf_i+0x21e>
 8011fe0:	e7eb      	b.n	8011fba <_printf_i+0x212>
 8011fe2:	2500      	movs	r5, #0
 8011fe4:	f104 0619 	add.w	r6, r4, #25
 8011fe8:	e7f5      	b.n	8011fd6 <_printf_i+0x22e>
 8011fea:	bf00      	nop
 8011fec:	08015cc6 	.word	0x08015cc6
 8011ff0:	08015cd7 	.word	0x08015cd7

08011ff4 <_puts_r>:
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	460e      	mov	r6, r1
 8011ff8:	4605      	mov	r5, r0
 8011ffa:	b118      	cbz	r0, 8012004 <_puts_r+0x10>
 8011ffc:	6983      	ldr	r3, [r0, #24]
 8011ffe:	b90b      	cbnz	r3, 8012004 <_puts_r+0x10>
 8012000:	f001 f842 	bl	8013088 <__sinit>
 8012004:	69ab      	ldr	r3, [r5, #24]
 8012006:	68ac      	ldr	r4, [r5, #8]
 8012008:	b913      	cbnz	r3, 8012010 <_puts_r+0x1c>
 801200a:	4628      	mov	r0, r5
 801200c:	f001 f83c 	bl	8013088 <__sinit>
 8012010:	4b2c      	ldr	r3, [pc, #176]	; (80120c4 <_puts_r+0xd0>)
 8012012:	429c      	cmp	r4, r3
 8012014:	d120      	bne.n	8012058 <_puts_r+0x64>
 8012016:	686c      	ldr	r4, [r5, #4]
 8012018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801201a:	07db      	lsls	r3, r3, #31
 801201c:	d405      	bmi.n	801202a <_puts_r+0x36>
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	0598      	lsls	r0, r3, #22
 8012022:	d402      	bmi.n	801202a <_puts_r+0x36>
 8012024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012026:	f001 f8d2 	bl	80131ce <__retarget_lock_acquire_recursive>
 801202a:	89a3      	ldrh	r3, [r4, #12]
 801202c:	0719      	lsls	r1, r3, #28
 801202e:	d51d      	bpl.n	801206c <_puts_r+0x78>
 8012030:	6923      	ldr	r3, [r4, #16]
 8012032:	b1db      	cbz	r3, 801206c <_puts_r+0x78>
 8012034:	3e01      	subs	r6, #1
 8012036:	68a3      	ldr	r3, [r4, #8]
 8012038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801203c:	3b01      	subs	r3, #1
 801203e:	60a3      	str	r3, [r4, #8]
 8012040:	bb39      	cbnz	r1, 8012092 <_puts_r+0x9e>
 8012042:	2b00      	cmp	r3, #0
 8012044:	da38      	bge.n	80120b8 <_puts_r+0xc4>
 8012046:	4622      	mov	r2, r4
 8012048:	210a      	movs	r1, #10
 801204a:	4628      	mov	r0, r5
 801204c:	f000 f848 	bl	80120e0 <__swbuf_r>
 8012050:	3001      	adds	r0, #1
 8012052:	d011      	beq.n	8012078 <_puts_r+0x84>
 8012054:	250a      	movs	r5, #10
 8012056:	e011      	b.n	801207c <_puts_r+0x88>
 8012058:	4b1b      	ldr	r3, [pc, #108]	; (80120c8 <_puts_r+0xd4>)
 801205a:	429c      	cmp	r4, r3
 801205c:	d101      	bne.n	8012062 <_puts_r+0x6e>
 801205e:	68ac      	ldr	r4, [r5, #8]
 8012060:	e7da      	b.n	8012018 <_puts_r+0x24>
 8012062:	4b1a      	ldr	r3, [pc, #104]	; (80120cc <_puts_r+0xd8>)
 8012064:	429c      	cmp	r4, r3
 8012066:	bf08      	it	eq
 8012068:	68ec      	ldreq	r4, [r5, #12]
 801206a:	e7d5      	b.n	8012018 <_puts_r+0x24>
 801206c:	4621      	mov	r1, r4
 801206e:	4628      	mov	r0, r5
 8012070:	f000 f888 	bl	8012184 <__swsetup_r>
 8012074:	2800      	cmp	r0, #0
 8012076:	d0dd      	beq.n	8012034 <_puts_r+0x40>
 8012078:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801207c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801207e:	07da      	lsls	r2, r3, #31
 8012080:	d405      	bmi.n	801208e <_puts_r+0x9a>
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	059b      	lsls	r3, r3, #22
 8012086:	d402      	bmi.n	801208e <_puts_r+0x9a>
 8012088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801208a:	f001 f8a1 	bl	80131d0 <__retarget_lock_release_recursive>
 801208e:	4628      	mov	r0, r5
 8012090:	bd70      	pop	{r4, r5, r6, pc}
 8012092:	2b00      	cmp	r3, #0
 8012094:	da04      	bge.n	80120a0 <_puts_r+0xac>
 8012096:	69a2      	ldr	r2, [r4, #24]
 8012098:	429a      	cmp	r2, r3
 801209a:	dc06      	bgt.n	80120aa <_puts_r+0xb6>
 801209c:	290a      	cmp	r1, #10
 801209e:	d004      	beq.n	80120aa <_puts_r+0xb6>
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	1c5a      	adds	r2, r3, #1
 80120a4:	6022      	str	r2, [r4, #0]
 80120a6:	7019      	strb	r1, [r3, #0]
 80120a8:	e7c5      	b.n	8012036 <_puts_r+0x42>
 80120aa:	4622      	mov	r2, r4
 80120ac:	4628      	mov	r0, r5
 80120ae:	f000 f817 	bl	80120e0 <__swbuf_r>
 80120b2:	3001      	adds	r0, #1
 80120b4:	d1bf      	bne.n	8012036 <_puts_r+0x42>
 80120b6:	e7df      	b.n	8012078 <_puts_r+0x84>
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	250a      	movs	r5, #10
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	6022      	str	r2, [r4, #0]
 80120c0:	701d      	strb	r5, [r3, #0]
 80120c2:	e7db      	b.n	801207c <_puts_r+0x88>
 80120c4:	08015d98 	.word	0x08015d98
 80120c8:	08015db8 	.word	0x08015db8
 80120cc:	08015d78 	.word	0x08015d78

080120d0 <puts>:
 80120d0:	4b02      	ldr	r3, [pc, #8]	; (80120dc <puts+0xc>)
 80120d2:	4601      	mov	r1, r0
 80120d4:	6818      	ldr	r0, [r3, #0]
 80120d6:	f7ff bf8d 	b.w	8011ff4 <_puts_r>
 80120da:	bf00      	nop
 80120dc:	24000238 	.word	0x24000238

080120e0 <__swbuf_r>:
 80120e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e2:	460e      	mov	r6, r1
 80120e4:	4614      	mov	r4, r2
 80120e6:	4605      	mov	r5, r0
 80120e8:	b118      	cbz	r0, 80120f2 <__swbuf_r+0x12>
 80120ea:	6983      	ldr	r3, [r0, #24]
 80120ec:	b90b      	cbnz	r3, 80120f2 <__swbuf_r+0x12>
 80120ee:	f000 ffcb 	bl	8013088 <__sinit>
 80120f2:	4b21      	ldr	r3, [pc, #132]	; (8012178 <__swbuf_r+0x98>)
 80120f4:	429c      	cmp	r4, r3
 80120f6:	d12b      	bne.n	8012150 <__swbuf_r+0x70>
 80120f8:	686c      	ldr	r4, [r5, #4]
 80120fa:	69a3      	ldr	r3, [r4, #24]
 80120fc:	60a3      	str	r3, [r4, #8]
 80120fe:	89a3      	ldrh	r3, [r4, #12]
 8012100:	071a      	lsls	r2, r3, #28
 8012102:	d52f      	bpl.n	8012164 <__swbuf_r+0x84>
 8012104:	6923      	ldr	r3, [r4, #16]
 8012106:	b36b      	cbz	r3, 8012164 <__swbuf_r+0x84>
 8012108:	6923      	ldr	r3, [r4, #16]
 801210a:	6820      	ldr	r0, [r4, #0]
 801210c:	1ac0      	subs	r0, r0, r3
 801210e:	6963      	ldr	r3, [r4, #20]
 8012110:	b2f6      	uxtb	r6, r6
 8012112:	4283      	cmp	r3, r0
 8012114:	4637      	mov	r7, r6
 8012116:	dc04      	bgt.n	8012122 <__swbuf_r+0x42>
 8012118:	4621      	mov	r1, r4
 801211a:	4628      	mov	r0, r5
 801211c:	f000 ff20 	bl	8012f60 <_fflush_r>
 8012120:	bb30      	cbnz	r0, 8012170 <__swbuf_r+0x90>
 8012122:	68a3      	ldr	r3, [r4, #8]
 8012124:	3b01      	subs	r3, #1
 8012126:	60a3      	str	r3, [r4, #8]
 8012128:	6823      	ldr	r3, [r4, #0]
 801212a:	1c5a      	adds	r2, r3, #1
 801212c:	6022      	str	r2, [r4, #0]
 801212e:	701e      	strb	r6, [r3, #0]
 8012130:	6963      	ldr	r3, [r4, #20]
 8012132:	3001      	adds	r0, #1
 8012134:	4283      	cmp	r3, r0
 8012136:	d004      	beq.n	8012142 <__swbuf_r+0x62>
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	07db      	lsls	r3, r3, #31
 801213c:	d506      	bpl.n	801214c <__swbuf_r+0x6c>
 801213e:	2e0a      	cmp	r6, #10
 8012140:	d104      	bne.n	801214c <__swbuf_r+0x6c>
 8012142:	4621      	mov	r1, r4
 8012144:	4628      	mov	r0, r5
 8012146:	f000 ff0b 	bl	8012f60 <_fflush_r>
 801214a:	b988      	cbnz	r0, 8012170 <__swbuf_r+0x90>
 801214c:	4638      	mov	r0, r7
 801214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012150:	4b0a      	ldr	r3, [pc, #40]	; (801217c <__swbuf_r+0x9c>)
 8012152:	429c      	cmp	r4, r3
 8012154:	d101      	bne.n	801215a <__swbuf_r+0x7a>
 8012156:	68ac      	ldr	r4, [r5, #8]
 8012158:	e7cf      	b.n	80120fa <__swbuf_r+0x1a>
 801215a:	4b09      	ldr	r3, [pc, #36]	; (8012180 <__swbuf_r+0xa0>)
 801215c:	429c      	cmp	r4, r3
 801215e:	bf08      	it	eq
 8012160:	68ec      	ldreq	r4, [r5, #12]
 8012162:	e7ca      	b.n	80120fa <__swbuf_r+0x1a>
 8012164:	4621      	mov	r1, r4
 8012166:	4628      	mov	r0, r5
 8012168:	f000 f80c 	bl	8012184 <__swsetup_r>
 801216c:	2800      	cmp	r0, #0
 801216e:	d0cb      	beq.n	8012108 <__swbuf_r+0x28>
 8012170:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012174:	e7ea      	b.n	801214c <__swbuf_r+0x6c>
 8012176:	bf00      	nop
 8012178:	08015d98 	.word	0x08015d98
 801217c:	08015db8 	.word	0x08015db8
 8012180:	08015d78 	.word	0x08015d78

08012184 <__swsetup_r>:
 8012184:	4b32      	ldr	r3, [pc, #200]	; (8012250 <__swsetup_r+0xcc>)
 8012186:	b570      	push	{r4, r5, r6, lr}
 8012188:	681d      	ldr	r5, [r3, #0]
 801218a:	4606      	mov	r6, r0
 801218c:	460c      	mov	r4, r1
 801218e:	b125      	cbz	r5, 801219a <__swsetup_r+0x16>
 8012190:	69ab      	ldr	r3, [r5, #24]
 8012192:	b913      	cbnz	r3, 801219a <__swsetup_r+0x16>
 8012194:	4628      	mov	r0, r5
 8012196:	f000 ff77 	bl	8013088 <__sinit>
 801219a:	4b2e      	ldr	r3, [pc, #184]	; (8012254 <__swsetup_r+0xd0>)
 801219c:	429c      	cmp	r4, r3
 801219e:	d10f      	bne.n	80121c0 <__swsetup_r+0x3c>
 80121a0:	686c      	ldr	r4, [r5, #4]
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121a8:	0719      	lsls	r1, r3, #28
 80121aa:	d42c      	bmi.n	8012206 <__swsetup_r+0x82>
 80121ac:	06dd      	lsls	r5, r3, #27
 80121ae:	d411      	bmi.n	80121d4 <__swsetup_r+0x50>
 80121b0:	2309      	movs	r3, #9
 80121b2:	6033      	str	r3, [r6, #0]
 80121b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121b8:	81a3      	strh	r3, [r4, #12]
 80121ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121be:	e03e      	b.n	801223e <__swsetup_r+0xba>
 80121c0:	4b25      	ldr	r3, [pc, #148]	; (8012258 <__swsetup_r+0xd4>)
 80121c2:	429c      	cmp	r4, r3
 80121c4:	d101      	bne.n	80121ca <__swsetup_r+0x46>
 80121c6:	68ac      	ldr	r4, [r5, #8]
 80121c8:	e7eb      	b.n	80121a2 <__swsetup_r+0x1e>
 80121ca:	4b24      	ldr	r3, [pc, #144]	; (801225c <__swsetup_r+0xd8>)
 80121cc:	429c      	cmp	r4, r3
 80121ce:	bf08      	it	eq
 80121d0:	68ec      	ldreq	r4, [r5, #12]
 80121d2:	e7e6      	b.n	80121a2 <__swsetup_r+0x1e>
 80121d4:	0758      	lsls	r0, r3, #29
 80121d6:	d512      	bpl.n	80121fe <__swsetup_r+0x7a>
 80121d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121da:	b141      	cbz	r1, 80121ee <__swsetup_r+0x6a>
 80121dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121e0:	4299      	cmp	r1, r3
 80121e2:	d002      	beq.n	80121ea <__swsetup_r+0x66>
 80121e4:	4630      	mov	r0, r6
 80121e6:	f001 fc09 	bl	80139fc <_free_r>
 80121ea:	2300      	movs	r3, #0
 80121ec:	6363      	str	r3, [r4, #52]	; 0x34
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80121f4:	81a3      	strh	r3, [r4, #12]
 80121f6:	2300      	movs	r3, #0
 80121f8:	6063      	str	r3, [r4, #4]
 80121fa:	6923      	ldr	r3, [r4, #16]
 80121fc:	6023      	str	r3, [r4, #0]
 80121fe:	89a3      	ldrh	r3, [r4, #12]
 8012200:	f043 0308 	orr.w	r3, r3, #8
 8012204:	81a3      	strh	r3, [r4, #12]
 8012206:	6923      	ldr	r3, [r4, #16]
 8012208:	b94b      	cbnz	r3, 801221e <__swsetup_r+0x9a>
 801220a:	89a3      	ldrh	r3, [r4, #12]
 801220c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012214:	d003      	beq.n	801221e <__swsetup_r+0x9a>
 8012216:	4621      	mov	r1, r4
 8012218:	4630      	mov	r0, r6
 801221a:	f000 ffff 	bl	801321c <__smakebuf_r>
 801221e:	89a0      	ldrh	r0, [r4, #12]
 8012220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012224:	f010 0301 	ands.w	r3, r0, #1
 8012228:	d00a      	beq.n	8012240 <__swsetup_r+0xbc>
 801222a:	2300      	movs	r3, #0
 801222c:	60a3      	str	r3, [r4, #8]
 801222e:	6963      	ldr	r3, [r4, #20]
 8012230:	425b      	negs	r3, r3
 8012232:	61a3      	str	r3, [r4, #24]
 8012234:	6923      	ldr	r3, [r4, #16]
 8012236:	b943      	cbnz	r3, 801224a <__swsetup_r+0xc6>
 8012238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801223c:	d1ba      	bne.n	80121b4 <__swsetup_r+0x30>
 801223e:	bd70      	pop	{r4, r5, r6, pc}
 8012240:	0781      	lsls	r1, r0, #30
 8012242:	bf58      	it	pl
 8012244:	6963      	ldrpl	r3, [r4, #20]
 8012246:	60a3      	str	r3, [r4, #8]
 8012248:	e7f4      	b.n	8012234 <__swsetup_r+0xb0>
 801224a:	2000      	movs	r0, #0
 801224c:	e7f7      	b.n	801223e <__swsetup_r+0xba>
 801224e:	bf00      	nop
 8012250:	24000238 	.word	0x24000238
 8012254:	08015d98 	.word	0x08015d98
 8012258:	08015db8 	.word	0x08015db8
 801225c:	08015d78 	.word	0x08015d78

08012260 <quorem>:
 8012260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	6903      	ldr	r3, [r0, #16]
 8012266:	690c      	ldr	r4, [r1, #16]
 8012268:	42a3      	cmp	r3, r4
 801226a:	4607      	mov	r7, r0
 801226c:	f2c0 8081 	blt.w	8012372 <quorem+0x112>
 8012270:	3c01      	subs	r4, #1
 8012272:	f101 0814 	add.w	r8, r1, #20
 8012276:	f100 0514 	add.w	r5, r0, #20
 801227a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801227e:	9301      	str	r3, [sp, #4]
 8012280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012288:	3301      	adds	r3, #1
 801228a:	429a      	cmp	r2, r3
 801228c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012294:	fbb2 f6f3 	udiv	r6, r2, r3
 8012298:	d331      	bcc.n	80122fe <quorem+0x9e>
 801229a:	f04f 0e00 	mov.w	lr, #0
 801229e:	4640      	mov	r0, r8
 80122a0:	46ac      	mov	ip, r5
 80122a2:	46f2      	mov	sl, lr
 80122a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80122a8:	b293      	uxth	r3, r2
 80122aa:	fb06 e303 	mla	r3, r6, r3, lr
 80122ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	ebaa 0303 	sub.w	r3, sl, r3
 80122b8:	f8dc a000 	ldr.w	sl, [ip]
 80122bc:	0c12      	lsrs	r2, r2, #16
 80122be:	fa13 f38a 	uxtah	r3, r3, sl
 80122c2:	fb06 e202 	mla	r2, r6, r2, lr
 80122c6:	9300      	str	r3, [sp, #0]
 80122c8:	9b00      	ldr	r3, [sp, #0]
 80122ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80122ce:	b292      	uxth	r2, r2
 80122d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80122d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80122d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80122dc:	4581      	cmp	r9, r0
 80122de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122e2:	f84c 3b04 	str.w	r3, [ip], #4
 80122e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80122ea:	d2db      	bcs.n	80122a4 <quorem+0x44>
 80122ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80122f0:	b92b      	cbnz	r3, 80122fe <quorem+0x9e>
 80122f2:	9b01      	ldr	r3, [sp, #4]
 80122f4:	3b04      	subs	r3, #4
 80122f6:	429d      	cmp	r5, r3
 80122f8:	461a      	mov	r2, r3
 80122fa:	d32e      	bcc.n	801235a <quorem+0xfa>
 80122fc:	613c      	str	r4, [r7, #16]
 80122fe:	4638      	mov	r0, r7
 8012300:	f001 fa64 	bl	80137cc <__mcmp>
 8012304:	2800      	cmp	r0, #0
 8012306:	db24      	blt.n	8012352 <quorem+0xf2>
 8012308:	3601      	adds	r6, #1
 801230a:	4628      	mov	r0, r5
 801230c:	f04f 0c00 	mov.w	ip, #0
 8012310:	f858 2b04 	ldr.w	r2, [r8], #4
 8012314:	f8d0 e000 	ldr.w	lr, [r0]
 8012318:	b293      	uxth	r3, r2
 801231a:	ebac 0303 	sub.w	r3, ip, r3
 801231e:	0c12      	lsrs	r2, r2, #16
 8012320:	fa13 f38e 	uxtah	r3, r3, lr
 8012324:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801232c:	b29b      	uxth	r3, r3
 801232e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012332:	45c1      	cmp	r9, r8
 8012334:	f840 3b04 	str.w	r3, [r0], #4
 8012338:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801233c:	d2e8      	bcs.n	8012310 <quorem+0xb0>
 801233e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012346:	b922      	cbnz	r2, 8012352 <quorem+0xf2>
 8012348:	3b04      	subs	r3, #4
 801234a:	429d      	cmp	r5, r3
 801234c:	461a      	mov	r2, r3
 801234e:	d30a      	bcc.n	8012366 <quorem+0x106>
 8012350:	613c      	str	r4, [r7, #16]
 8012352:	4630      	mov	r0, r6
 8012354:	b003      	add	sp, #12
 8012356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235a:	6812      	ldr	r2, [r2, #0]
 801235c:	3b04      	subs	r3, #4
 801235e:	2a00      	cmp	r2, #0
 8012360:	d1cc      	bne.n	80122fc <quorem+0x9c>
 8012362:	3c01      	subs	r4, #1
 8012364:	e7c7      	b.n	80122f6 <quorem+0x96>
 8012366:	6812      	ldr	r2, [r2, #0]
 8012368:	3b04      	subs	r3, #4
 801236a:	2a00      	cmp	r2, #0
 801236c:	d1f0      	bne.n	8012350 <quorem+0xf0>
 801236e:	3c01      	subs	r4, #1
 8012370:	e7eb      	b.n	801234a <quorem+0xea>
 8012372:	2000      	movs	r0, #0
 8012374:	e7ee      	b.n	8012354 <quorem+0xf4>
	...

08012378 <_dtoa_r>:
 8012378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237c:	ed2d 8b02 	vpush	{d8}
 8012380:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012382:	b091      	sub	sp, #68	; 0x44
 8012384:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012388:	ec59 8b10 	vmov	r8, r9, d0
 801238c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801238e:	9106      	str	r1, [sp, #24]
 8012390:	4606      	mov	r6, r0
 8012392:	9208      	str	r2, [sp, #32]
 8012394:	930c      	str	r3, [sp, #48]	; 0x30
 8012396:	b975      	cbnz	r5, 80123b6 <_dtoa_r+0x3e>
 8012398:	2010      	movs	r0, #16
 801239a:	f000 ff7f 	bl	801329c <malloc>
 801239e:	4602      	mov	r2, r0
 80123a0:	6270      	str	r0, [r6, #36]	; 0x24
 80123a2:	b920      	cbnz	r0, 80123ae <_dtoa_r+0x36>
 80123a4:	4baa      	ldr	r3, [pc, #680]	; (8012650 <_dtoa_r+0x2d8>)
 80123a6:	21ea      	movs	r1, #234	; 0xea
 80123a8:	48aa      	ldr	r0, [pc, #680]	; (8012654 <_dtoa_r+0x2dc>)
 80123aa:	f001 fc6d 	bl	8013c88 <__assert_func>
 80123ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80123b2:	6005      	str	r5, [r0, #0]
 80123b4:	60c5      	str	r5, [r0, #12]
 80123b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80123b8:	6819      	ldr	r1, [r3, #0]
 80123ba:	b151      	cbz	r1, 80123d2 <_dtoa_r+0x5a>
 80123bc:	685a      	ldr	r2, [r3, #4]
 80123be:	604a      	str	r2, [r1, #4]
 80123c0:	2301      	movs	r3, #1
 80123c2:	4093      	lsls	r3, r2
 80123c4:	608b      	str	r3, [r1, #8]
 80123c6:	4630      	mov	r0, r6
 80123c8:	f000 ffbe 	bl	8013348 <_Bfree>
 80123cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80123ce:	2200      	movs	r2, #0
 80123d0:	601a      	str	r2, [r3, #0]
 80123d2:	f1b9 0300 	subs.w	r3, r9, #0
 80123d6:	bfbb      	ittet	lt
 80123d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80123dc:	9303      	strlt	r3, [sp, #12]
 80123de:	2300      	movge	r3, #0
 80123e0:	2201      	movlt	r2, #1
 80123e2:	bfac      	ite	ge
 80123e4:	6023      	strge	r3, [r4, #0]
 80123e6:	6022      	strlt	r2, [r4, #0]
 80123e8:	4b9b      	ldr	r3, [pc, #620]	; (8012658 <_dtoa_r+0x2e0>)
 80123ea:	9c03      	ldr	r4, [sp, #12]
 80123ec:	43a3      	bics	r3, r4
 80123ee:	d11c      	bne.n	801242a <_dtoa_r+0xb2>
 80123f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80123f6:	6013      	str	r3, [r2, #0]
 80123f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80123fc:	ea53 0308 	orrs.w	r3, r3, r8
 8012400:	f000 84fd 	beq.w	8012dfe <_dtoa_r+0xa86>
 8012404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012406:	b963      	cbnz	r3, 8012422 <_dtoa_r+0xaa>
 8012408:	4b94      	ldr	r3, [pc, #592]	; (801265c <_dtoa_r+0x2e4>)
 801240a:	e01f      	b.n	801244c <_dtoa_r+0xd4>
 801240c:	4b94      	ldr	r3, [pc, #592]	; (8012660 <_dtoa_r+0x2e8>)
 801240e:	9301      	str	r3, [sp, #4]
 8012410:	3308      	adds	r3, #8
 8012412:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012414:	6013      	str	r3, [r2, #0]
 8012416:	9801      	ldr	r0, [sp, #4]
 8012418:	b011      	add	sp, #68	; 0x44
 801241a:	ecbd 8b02 	vpop	{d8}
 801241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012422:	4b8e      	ldr	r3, [pc, #568]	; (801265c <_dtoa_r+0x2e4>)
 8012424:	9301      	str	r3, [sp, #4]
 8012426:	3303      	adds	r3, #3
 8012428:	e7f3      	b.n	8012412 <_dtoa_r+0x9a>
 801242a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801242e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012436:	d10b      	bne.n	8012450 <_dtoa_r+0xd8>
 8012438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801243a:	2301      	movs	r3, #1
 801243c:	6013      	str	r3, [r2, #0]
 801243e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012440:	2b00      	cmp	r3, #0
 8012442:	f000 84d9 	beq.w	8012df8 <_dtoa_r+0xa80>
 8012446:	4887      	ldr	r0, [pc, #540]	; (8012664 <_dtoa_r+0x2ec>)
 8012448:	6018      	str	r0, [r3, #0]
 801244a:	1e43      	subs	r3, r0, #1
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	e7e2      	b.n	8012416 <_dtoa_r+0x9e>
 8012450:	a90f      	add	r1, sp, #60	; 0x3c
 8012452:	aa0e      	add	r2, sp, #56	; 0x38
 8012454:	4630      	mov	r0, r6
 8012456:	eeb0 0b48 	vmov.f64	d0, d8
 801245a:	f001 fa5d 	bl	8013918 <__d2b>
 801245e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012462:	4605      	mov	r5, r0
 8012464:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012466:	2900      	cmp	r1, #0
 8012468:	d046      	beq.n	80124f8 <_dtoa_r+0x180>
 801246a:	ee18 4a90 	vmov	r4, s17
 801246e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012472:	ec53 2b18 	vmov	r2, r3, d8
 8012476:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801247a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801247e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012482:	2400      	movs	r4, #0
 8012484:	ec43 2b16 	vmov	d6, r2, r3
 8012488:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801248c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012638 <_dtoa_r+0x2c0>
 8012490:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012494:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012640 <_dtoa_r+0x2c8>
 8012498:	eea7 6b05 	vfma.f64	d6, d7, d5
 801249c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012648 <_dtoa_r+0x2d0>
 80124a0:	ee07 1a90 	vmov	s15, r1
 80124a4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80124a8:	eeb0 7b46 	vmov.f64	d7, d6
 80124ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 80124b0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80124b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80124b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124bc:	ee16 ba90 	vmov	fp, s13
 80124c0:	940a      	str	r4, [sp, #40]	; 0x28
 80124c2:	d508      	bpl.n	80124d6 <_dtoa_r+0x15e>
 80124c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80124c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80124cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d0:	bf18      	it	ne
 80124d2:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80124d6:	f1bb 0f16 	cmp.w	fp, #22
 80124da:	d82f      	bhi.n	801253c <_dtoa_r+0x1c4>
 80124dc:	4b62      	ldr	r3, [pc, #392]	; (8012668 <_dtoa_r+0x2f0>)
 80124de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80124e2:	ed93 7b00 	vldr	d7, [r3]
 80124e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80124ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ee:	d501      	bpl.n	80124f4 <_dtoa_r+0x17c>
 80124f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80124f4:	2300      	movs	r3, #0
 80124f6:	e022      	b.n	801253e <_dtoa_r+0x1c6>
 80124f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80124fa:	4401      	add	r1, r0
 80124fc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012500:	2b20      	cmp	r3, #32
 8012502:	bfc1      	itttt	gt
 8012504:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012508:	fa04 f303 	lslgt.w	r3, r4, r3
 801250c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012510:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012514:	bfd6      	itet	le
 8012516:	f1c3 0320 	rsble	r3, r3, #32
 801251a:	ea43 0808 	orrgt.w	r8, r3, r8
 801251e:	fa08 f803 	lslle.w	r8, r8, r3
 8012522:	ee07 8a90 	vmov	s15, r8
 8012526:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801252a:	3901      	subs	r1, #1
 801252c:	ee17 4a90 	vmov	r4, s15
 8012530:	ec53 2b17 	vmov	r2, r3, d7
 8012534:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012538:	2401      	movs	r4, #1
 801253a:	e7a3      	b.n	8012484 <_dtoa_r+0x10c>
 801253c:	2301      	movs	r3, #1
 801253e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012540:	1a43      	subs	r3, r0, r1
 8012542:	1e5a      	subs	r2, r3, #1
 8012544:	bf45      	ittet	mi
 8012546:	f1c3 0301 	rsbmi	r3, r3, #1
 801254a:	9304      	strmi	r3, [sp, #16]
 801254c:	2300      	movpl	r3, #0
 801254e:	2300      	movmi	r3, #0
 8012550:	9205      	str	r2, [sp, #20]
 8012552:	bf54      	ite	pl
 8012554:	9304      	strpl	r3, [sp, #16]
 8012556:	9305      	strmi	r3, [sp, #20]
 8012558:	f1bb 0f00 	cmp.w	fp, #0
 801255c:	db18      	blt.n	8012590 <_dtoa_r+0x218>
 801255e:	9b05      	ldr	r3, [sp, #20]
 8012560:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012564:	445b      	add	r3, fp
 8012566:	9305      	str	r3, [sp, #20]
 8012568:	2300      	movs	r3, #0
 801256a:	9a06      	ldr	r2, [sp, #24]
 801256c:	2a09      	cmp	r2, #9
 801256e:	d849      	bhi.n	8012604 <_dtoa_r+0x28c>
 8012570:	2a05      	cmp	r2, #5
 8012572:	bfc4      	itt	gt
 8012574:	3a04      	subgt	r2, #4
 8012576:	9206      	strgt	r2, [sp, #24]
 8012578:	9a06      	ldr	r2, [sp, #24]
 801257a:	f1a2 0202 	sub.w	r2, r2, #2
 801257e:	bfcc      	ite	gt
 8012580:	2400      	movgt	r4, #0
 8012582:	2401      	movle	r4, #1
 8012584:	2a03      	cmp	r2, #3
 8012586:	d848      	bhi.n	801261a <_dtoa_r+0x2a2>
 8012588:	e8df f002 	tbb	[pc, r2]
 801258c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012590:	9b04      	ldr	r3, [sp, #16]
 8012592:	2200      	movs	r2, #0
 8012594:	eba3 030b 	sub.w	r3, r3, fp
 8012598:	9304      	str	r3, [sp, #16]
 801259a:	9209      	str	r2, [sp, #36]	; 0x24
 801259c:	f1cb 0300 	rsb	r3, fp, #0
 80125a0:	e7e3      	b.n	801256a <_dtoa_r+0x1f2>
 80125a2:	2200      	movs	r2, #0
 80125a4:	9207      	str	r2, [sp, #28]
 80125a6:	9a08      	ldr	r2, [sp, #32]
 80125a8:	2a00      	cmp	r2, #0
 80125aa:	dc39      	bgt.n	8012620 <_dtoa_r+0x2a8>
 80125ac:	f04f 0a01 	mov.w	sl, #1
 80125b0:	46d1      	mov	r9, sl
 80125b2:	4652      	mov	r2, sl
 80125b4:	f8cd a020 	str.w	sl, [sp, #32]
 80125b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80125ba:	2100      	movs	r1, #0
 80125bc:	6079      	str	r1, [r7, #4]
 80125be:	2004      	movs	r0, #4
 80125c0:	f100 0c14 	add.w	ip, r0, #20
 80125c4:	4594      	cmp	ip, r2
 80125c6:	6879      	ldr	r1, [r7, #4]
 80125c8:	d92f      	bls.n	801262a <_dtoa_r+0x2b2>
 80125ca:	4630      	mov	r0, r6
 80125cc:	930d      	str	r3, [sp, #52]	; 0x34
 80125ce:	f000 fe7b 	bl	80132c8 <_Balloc>
 80125d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125d4:	9001      	str	r0, [sp, #4]
 80125d6:	4602      	mov	r2, r0
 80125d8:	2800      	cmp	r0, #0
 80125da:	d149      	bne.n	8012670 <_dtoa_r+0x2f8>
 80125dc:	4b23      	ldr	r3, [pc, #140]	; (801266c <_dtoa_r+0x2f4>)
 80125de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80125e2:	e6e1      	b.n	80123a8 <_dtoa_r+0x30>
 80125e4:	2201      	movs	r2, #1
 80125e6:	e7dd      	b.n	80125a4 <_dtoa_r+0x22c>
 80125e8:	2200      	movs	r2, #0
 80125ea:	9207      	str	r2, [sp, #28]
 80125ec:	9a08      	ldr	r2, [sp, #32]
 80125ee:	eb0b 0a02 	add.w	sl, fp, r2
 80125f2:	f10a 0901 	add.w	r9, sl, #1
 80125f6:	464a      	mov	r2, r9
 80125f8:	2a01      	cmp	r2, #1
 80125fa:	bfb8      	it	lt
 80125fc:	2201      	movlt	r2, #1
 80125fe:	e7db      	b.n	80125b8 <_dtoa_r+0x240>
 8012600:	2201      	movs	r2, #1
 8012602:	e7f2      	b.n	80125ea <_dtoa_r+0x272>
 8012604:	2401      	movs	r4, #1
 8012606:	2200      	movs	r2, #0
 8012608:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801260c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012610:	2100      	movs	r1, #0
 8012612:	46d1      	mov	r9, sl
 8012614:	2212      	movs	r2, #18
 8012616:	9108      	str	r1, [sp, #32]
 8012618:	e7ce      	b.n	80125b8 <_dtoa_r+0x240>
 801261a:	2201      	movs	r2, #1
 801261c:	9207      	str	r2, [sp, #28]
 801261e:	e7f5      	b.n	801260c <_dtoa_r+0x294>
 8012620:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012624:	46d1      	mov	r9, sl
 8012626:	4652      	mov	r2, sl
 8012628:	e7c6      	b.n	80125b8 <_dtoa_r+0x240>
 801262a:	3101      	adds	r1, #1
 801262c:	6079      	str	r1, [r7, #4]
 801262e:	0040      	lsls	r0, r0, #1
 8012630:	e7c6      	b.n	80125c0 <_dtoa_r+0x248>
 8012632:	bf00      	nop
 8012634:	f3af 8000 	nop.w
 8012638:	636f4361 	.word	0x636f4361
 801263c:	3fd287a7 	.word	0x3fd287a7
 8012640:	8b60c8b3 	.word	0x8b60c8b3
 8012644:	3fc68a28 	.word	0x3fc68a28
 8012648:	509f79fb 	.word	0x509f79fb
 801264c:	3fd34413 	.word	0x3fd34413
 8012650:	08015cf5 	.word	0x08015cf5
 8012654:	08015d0c 	.word	0x08015d0c
 8012658:	7ff00000 	.word	0x7ff00000
 801265c:	08015cf1 	.word	0x08015cf1
 8012660:	08015ce8 	.word	0x08015ce8
 8012664:	08015cc5 	.word	0x08015cc5
 8012668:	08015e60 	.word	0x08015e60
 801266c:	08015d67 	.word	0x08015d67
 8012670:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012672:	9901      	ldr	r1, [sp, #4]
 8012674:	6011      	str	r1, [r2, #0]
 8012676:	f1b9 0f0e 	cmp.w	r9, #14
 801267a:	d86c      	bhi.n	8012756 <_dtoa_r+0x3de>
 801267c:	2c00      	cmp	r4, #0
 801267e:	d06a      	beq.n	8012756 <_dtoa_r+0x3de>
 8012680:	f1bb 0f00 	cmp.w	fp, #0
 8012684:	f340 80a0 	ble.w	80127c8 <_dtoa_r+0x450>
 8012688:	49c1      	ldr	r1, [pc, #772]	; (8012990 <_dtoa_r+0x618>)
 801268a:	f00b 020f 	and.w	r2, fp, #15
 801268e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012692:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012696:	ed92 7b00 	vldr	d7, [r2]
 801269a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801269e:	f000 8087 	beq.w	80127b0 <_dtoa_r+0x438>
 80126a2:	4abc      	ldr	r2, [pc, #752]	; (8012994 <_dtoa_r+0x61c>)
 80126a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80126a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80126ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80126b0:	f001 010f 	and.w	r1, r1, #15
 80126b4:	2203      	movs	r2, #3
 80126b6:	48b7      	ldr	r0, [pc, #732]	; (8012994 <_dtoa_r+0x61c>)
 80126b8:	2900      	cmp	r1, #0
 80126ba:	d17b      	bne.n	80127b4 <_dtoa_r+0x43c>
 80126bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80126c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80126c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80126ca:	2900      	cmp	r1, #0
 80126cc:	f000 80a2 	beq.w	8012814 <_dtoa_r+0x49c>
 80126d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80126d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80126dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e0:	f140 8098 	bpl.w	8012814 <_dtoa_r+0x49c>
 80126e4:	f1b9 0f00 	cmp.w	r9, #0
 80126e8:	f000 8094 	beq.w	8012814 <_dtoa_r+0x49c>
 80126ec:	f1ba 0f00 	cmp.w	sl, #0
 80126f0:	dd2f      	ble.n	8012752 <_dtoa_r+0x3da>
 80126f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80126f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80126fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126fe:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012702:	3201      	adds	r2, #1
 8012704:	4650      	mov	r0, sl
 8012706:	ed9d 6b02 	vldr	d6, [sp, #8]
 801270a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801270e:	ee07 2a90 	vmov	s15, r2
 8012712:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012716:	eea7 5b06 	vfma.f64	d5, d7, d6
 801271a:	ee15 4a90 	vmov	r4, s11
 801271e:	ec52 1b15 	vmov	r1, r2, d5
 8012722:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012726:	2800      	cmp	r0, #0
 8012728:	d177      	bne.n	801281a <_dtoa_r+0x4a2>
 801272a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801272e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012732:	ec42 1b17 	vmov	d7, r1, r2
 8012736:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273e:	f300 8263 	bgt.w	8012c08 <_dtoa_r+0x890>
 8012742:	eeb1 7b47 	vneg.f64	d7, d7
 8012746:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274e:	f100 8258 	bmi.w	8012c02 <_dtoa_r+0x88a>
 8012752:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012758:	2a00      	cmp	r2, #0
 801275a:	f2c0 811d 	blt.w	8012998 <_dtoa_r+0x620>
 801275e:	f1bb 0f0e 	cmp.w	fp, #14
 8012762:	f300 8119 	bgt.w	8012998 <_dtoa_r+0x620>
 8012766:	4b8a      	ldr	r3, [pc, #552]	; (8012990 <_dtoa_r+0x618>)
 8012768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801276c:	ed93 6b00 	vldr	d6, [r3]
 8012770:	9b08      	ldr	r3, [sp, #32]
 8012772:	2b00      	cmp	r3, #0
 8012774:	f280 80b7 	bge.w	80128e6 <_dtoa_r+0x56e>
 8012778:	f1b9 0f00 	cmp.w	r9, #0
 801277c:	f300 80b3 	bgt.w	80128e6 <_dtoa_r+0x56e>
 8012780:	f040 823f 	bne.w	8012c02 <_dtoa_r+0x88a>
 8012784:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012788:	ee26 6b07 	vmul.f64	d6, d6, d7
 801278c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012798:	464c      	mov	r4, r9
 801279a:	464f      	mov	r7, r9
 801279c:	f280 8215 	bge.w	8012bca <_dtoa_r+0x852>
 80127a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80127a4:	2331      	movs	r3, #49	; 0x31
 80127a6:	f808 3b01 	strb.w	r3, [r8], #1
 80127aa:	f10b 0b01 	add.w	fp, fp, #1
 80127ae:	e211      	b.n	8012bd4 <_dtoa_r+0x85c>
 80127b0:	2202      	movs	r2, #2
 80127b2:	e780      	b.n	80126b6 <_dtoa_r+0x33e>
 80127b4:	07cc      	lsls	r4, r1, #31
 80127b6:	d504      	bpl.n	80127c2 <_dtoa_r+0x44a>
 80127b8:	ed90 6b00 	vldr	d6, [r0]
 80127bc:	3201      	adds	r2, #1
 80127be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127c2:	1049      	asrs	r1, r1, #1
 80127c4:	3008      	adds	r0, #8
 80127c6:	e777      	b.n	80126b8 <_dtoa_r+0x340>
 80127c8:	d022      	beq.n	8012810 <_dtoa_r+0x498>
 80127ca:	f1cb 0100 	rsb	r1, fp, #0
 80127ce:	4a70      	ldr	r2, [pc, #448]	; (8012990 <_dtoa_r+0x618>)
 80127d0:	f001 000f 	and.w	r0, r1, #15
 80127d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80127d8:	ed92 7b00 	vldr	d7, [r2]
 80127dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80127e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127e4:	486b      	ldr	r0, [pc, #428]	; (8012994 <_dtoa_r+0x61c>)
 80127e6:	1109      	asrs	r1, r1, #4
 80127e8:	2400      	movs	r4, #0
 80127ea:	2202      	movs	r2, #2
 80127ec:	b929      	cbnz	r1, 80127fa <_dtoa_r+0x482>
 80127ee:	2c00      	cmp	r4, #0
 80127f0:	f43f af6a 	beq.w	80126c8 <_dtoa_r+0x350>
 80127f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127f8:	e766      	b.n	80126c8 <_dtoa_r+0x350>
 80127fa:	07cf      	lsls	r7, r1, #31
 80127fc:	d505      	bpl.n	801280a <_dtoa_r+0x492>
 80127fe:	ed90 6b00 	vldr	d6, [r0]
 8012802:	3201      	adds	r2, #1
 8012804:	2401      	movs	r4, #1
 8012806:	ee27 7b06 	vmul.f64	d7, d7, d6
 801280a:	1049      	asrs	r1, r1, #1
 801280c:	3008      	adds	r0, #8
 801280e:	e7ed      	b.n	80127ec <_dtoa_r+0x474>
 8012810:	2202      	movs	r2, #2
 8012812:	e759      	b.n	80126c8 <_dtoa_r+0x350>
 8012814:	465f      	mov	r7, fp
 8012816:	4648      	mov	r0, r9
 8012818:	e775      	b.n	8012706 <_dtoa_r+0x38e>
 801281a:	ec42 1b17 	vmov	d7, r1, r2
 801281e:	4a5c      	ldr	r2, [pc, #368]	; (8012990 <_dtoa_r+0x618>)
 8012820:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012824:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012828:	9a01      	ldr	r2, [sp, #4]
 801282a:	1814      	adds	r4, r2, r0
 801282c:	9a07      	ldr	r2, [sp, #28]
 801282e:	b352      	cbz	r2, 8012886 <_dtoa_r+0x50e>
 8012830:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012834:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012838:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801283c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012840:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012844:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012848:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801284c:	ee14 2a90 	vmov	r2, s9
 8012850:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012854:	3230      	adds	r2, #48	; 0x30
 8012856:	ee36 6b45 	vsub.f64	d6, d6, d5
 801285a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012862:	f808 2b01 	strb.w	r2, [r8], #1
 8012866:	d439      	bmi.n	80128dc <_dtoa_r+0x564>
 8012868:	ee32 5b46 	vsub.f64	d5, d2, d6
 801286c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012874:	d472      	bmi.n	801295c <_dtoa_r+0x5e4>
 8012876:	45a0      	cmp	r8, r4
 8012878:	f43f af6b 	beq.w	8012752 <_dtoa_r+0x3da>
 801287c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012880:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012884:	e7e0      	b.n	8012848 <_dtoa_r+0x4d0>
 8012886:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801288a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801288e:	4621      	mov	r1, r4
 8012890:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012894:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012898:	ee14 2a90 	vmov	r2, s9
 801289c:	3230      	adds	r2, #48	; 0x30
 801289e:	f808 2b01 	strb.w	r2, [r8], #1
 80128a2:	45a0      	cmp	r8, r4
 80128a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80128a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80128ac:	d118      	bne.n	80128e0 <_dtoa_r+0x568>
 80128ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80128b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80128b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80128ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128be:	dc4d      	bgt.n	801295c <_dtoa_r+0x5e4>
 80128c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80128c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128cc:	f57f af41 	bpl.w	8012752 <_dtoa_r+0x3da>
 80128d0:	4688      	mov	r8, r1
 80128d2:	3901      	subs	r1, #1
 80128d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80128d8:	2b30      	cmp	r3, #48	; 0x30
 80128da:	d0f9      	beq.n	80128d0 <_dtoa_r+0x558>
 80128dc:	46bb      	mov	fp, r7
 80128de:	e02a      	b.n	8012936 <_dtoa_r+0x5be>
 80128e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80128e4:	e7d6      	b.n	8012894 <_dtoa_r+0x51c>
 80128e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80128ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80128f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80128f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80128fa:	ee15 3a10 	vmov	r3, s10
 80128fe:	3330      	adds	r3, #48	; 0x30
 8012900:	f808 3b01 	strb.w	r3, [r8], #1
 8012904:	9b01      	ldr	r3, [sp, #4]
 8012906:	eba8 0303 	sub.w	r3, r8, r3
 801290a:	4599      	cmp	r9, r3
 801290c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012910:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012914:	d133      	bne.n	801297e <_dtoa_r+0x606>
 8012916:	ee37 7b07 	vadd.f64	d7, d7, d7
 801291a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012922:	dc1a      	bgt.n	801295a <_dtoa_r+0x5e2>
 8012924:	eeb4 7b46 	vcmp.f64	d7, d6
 8012928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292c:	d103      	bne.n	8012936 <_dtoa_r+0x5be>
 801292e:	ee15 3a10 	vmov	r3, s10
 8012932:	07d9      	lsls	r1, r3, #31
 8012934:	d411      	bmi.n	801295a <_dtoa_r+0x5e2>
 8012936:	4629      	mov	r1, r5
 8012938:	4630      	mov	r0, r6
 801293a:	f000 fd05 	bl	8013348 <_Bfree>
 801293e:	2300      	movs	r3, #0
 8012940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012942:	f888 3000 	strb.w	r3, [r8]
 8012946:	f10b 0301 	add.w	r3, fp, #1
 801294a:	6013      	str	r3, [r2, #0]
 801294c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801294e:	2b00      	cmp	r3, #0
 8012950:	f43f ad61 	beq.w	8012416 <_dtoa_r+0x9e>
 8012954:	f8c3 8000 	str.w	r8, [r3]
 8012958:	e55d      	b.n	8012416 <_dtoa_r+0x9e>
 801295a:	465f      	mov	r7, fp
 801295c:	4643      	mov	r3, r8
 801295e:	4698      	mov	r8, r3
 8012960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012964:	2a39      	cmp	r2, #57	; 0x39
 8012966:	d106      	bne.n	8012976 <_dtoa_r+0x5fe>
 8012968:	9a01      	ldr	r2, [sp, #4]
 801296a:	429a      	cmp	r2, r3
 801296c:	d1f7      	bne.n	801295e <_dtoa_r+0x5e6>
 801296e:	9901      	ldr	r1, [sp, #4]
 8012970:	2230      	movs	r2, #48	; 0x30
 8012972:	3701      	adds	r7, #1
 8012974:	700a      	strb	r2, [r1, #0]
 8012976:	781a      	ldrb	r2, [r3, #0]
 8012978:	3201      	adds	r2, #1
 801297a:	701a      	strb	r2, [r3, #0]
 801297c:	e7ae      	b.n	80128dc <_dtoa_r+0x564>
 801297e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012982:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298a:	d1b2      	bne.n	80128f2 <_dtoa_r+0x57a>
 801298c:	e7d3      	b.n	8012936 <_dtoa_r+0x5be>
 801298e:	bf00      	nop
 8012990:	08015e60 	.word	0x08015e60
 8012994:	08015e38 	.word	0x08015e38
 8012998:	9907      	ldr	r1, [sp, #28]
 801299a:	2900      	cmp	r1, #0
 801299c:	f000 80d0 	beq.w	8012b40 <_dtoa_r+0x7c8>
 80129a0:	9906      	ldr	r1, [sp, #24]
 80129a2:	2901      	cmp	r1, #1
 80129a4:	f300 80b4 	bgt.w	8012b10 <_dtoa_r+0x798>
 80129a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129aa:	2900      	cmp	r1, #0
 80129ac:	f000 80ac 	beq.w	8012b08 <_dtoa_r+0x790>
 80129b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80129b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80129b8:	461c      	mov	r4, r3
 80129ba:	930a      	str	r3, [sp, #40]	; 0x28
 80129bc:	9b04      	ldr	r3, [sp, #16]
 80129be:	4413      	add	r3, r2
 80129c0:	9304      	str	r3, [sp, #16]
 80129c2:	9b05      	ldr	r3, [sp, #20]
 80129c4:	2101      	movs	r1, #1
 80129c6:	4413      	add	r3, r2
 80129c8:	4630      	mov	r0, r6
 80129ca:	9305      	str	r3, [sp, #20]
 80129cc:	f000 fd74 	bl	80134b8 <__i2b>
 80129d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129d2:	4607      	mov	r7, r0
 80129d4:	f1b8 0f00 	cmp.w	r8, #0
 80129d8:	dd0d      	ble.n	80129f6 <_dtoa_r+0x67e>
 80129da:	9a05      	ldr	r2, [sp, #20]
 80129dc:	2a00      	cmp	r2, #0
 80129de:	dd0a      	ble.n	80129f6 <_dtoa_r+0x67e>
 80129e0:	4542      	cmp	r2, r8
 80129e2:	9904      	ldr	r1, [sp, #16]
 80129e4:	bfa8      	it	ge
 80129e6:	4642      	movge	r2, r8
 80129e8:	1a89      	subs	r1, r1, r2
 80129ea:	9104      	str	r1, [sp, #16]
 80129ec:	9905      	ldr	r1, [sp, #20]
 80129ee:	eba8 0802 	sub.w	r8, r8, r2
 80129f2:	1a8a      	subs	r2, r1, r2
 80129f4:	9205      	str	r2, [sp, #20]
 80129f6:	b303      	cbz	r3, 8012a3a <_dtoa_r+0x6c2>
 80129f8:	9a07      	ldr	r2, [sp, #28]
 80129fa:	2a00      	cmp	r2, #0
 80129fc:	f000 80a5 	beq.w	8012b4a <_dtoa_r+0x7d2>
 8012a00:	2c00      	cmp	r4, #0
 8012a02:	dd13      	ble.n	8012a2c <_dtoa_r+0x6b4>
 8012a04:	4639      	mov	r1, r7
 8012a06:	4622      	mov	r2, r4
 8012a08:	4630      	mov	r0, r6
 8012a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8012a0c:	f000 fe14 	bl	8013638 <__pow5mult>
 8012a10:	462a      	mov	r2, r5
 8012a12:	4601      	mov	r1, r0
 8012a14:	4607      	mov	r7, r0
 8012a16:	4630      	mov	r0, r6
 8012a18:	f000 fd64 	bl	80134e4 <__multiply>
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	900a      	str	r0, [sp, #40]	; 0x28
 8012a20:	4630      	mov	r0, r6
 8012a22:	f000 fc91 	bl	8013348 <_Bfree>
 8012a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a2a:	4615      	mov	r5, r2
 8012a2c:	1b1a      	subs	r2, r3, r4
 8012a2e:	d004      	beq.n	8012a3a <_dtoa_r+0x6c2>
 8012a30:	4629      	mov	r1, r5
 8012a32:	4630      	mov	r0, r6
 8012a34:	f000 fe00 	bl	8013638 <__pow5mult>
 8012a38:	4605      	mov	r5, r0
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	f000 fd3b 	bl	80134b8 <__i2b>
 8012a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	4604      	mov	r4, r0
 8012a48:	f340 8081 	ble.w	8012b4e <_dtoa_r+0x7d6>
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	4601      	mov	r1, r0
 8012a50:	4630      	mov	r0, r6
 8012a52:	f000 fdf1 	bl	8013638 <__pow5mult>
 8012a56:	9b06      	ldr	r3, [sp, #24]
 8012a58:	2b01      	cmp	r3, #1
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	dd7a      	ble.n	8012b54 <_dtoa_r+0x7dc>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	930a      	str	r3, [sp, #40]	; 0x28
 8012a62:	6922      	ldr	r2, [r4, #16]
 8012a64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012a68:	6910      	ldr	r0, [r2, #16]
 8012a6a:	f000 fcd5 	bl	8013418 <__hi0bits>
 8012a6e:	f1c0 0020 	rsb	r0, r0, #32
 8012a72:	9b05      	ldr	r3, [sp, #20]
 8012a74:	4418      	add	r0, r3
 8012a76:	f010 001f 	ands.w	r0, r0, #31
 8012a7a:	f000 808c 	beq.w	8012b96 <_dtoa_r+0x81e>
 8012a7e:	f1c0 0220 	rsb	r2, r0, #32
 8012a82:	2a04      	cmp	r2, #4
 8012a84:	f340 8085 	ble.w	8012b92 <_dtoa_r+0x81a>
 8012a88:	f1c0 001c 	rsb	r0, r0, #28
 8012a8c:	9b04      	ldr	r3, [sp, #16]
 8012a8e:	4403      	add	r3, r0
 8012a90:	9304      	str	r3, [sp, #16]
 8012a92:	9b05      	ldr	r3, [sp, #20]
 8012a94:	4403      	add	r3, r0
 8012a96:	4480      	add	r8, r0
 8012a98:	9305      	str	r3, [sp, #20]
 8012a9a:	9b04      	ldr	r3, [sp, #16]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	dd05      	ble.n	8012aac <_dtoa_r+0x734>
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	4630      	mov	r0, r6
 8012aa6:	f000 fe21 	bl	80136ec <__lshift>
 8012aaa:	4605      	mov	r5, r0
 8012aac:	9b05      	ldr	r3, [sp, #20]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	dd05      	ble.n	8012abe <_dtoa_r+0x746>
 8012ab2:	4621      	mov	r1, r4
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	f000 fe18 	bl	80136ec <__lshift>
 8012abc:	4604      	mov	r4, r0
 8012abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d06a      	beq.n	8012b9a <_dtoa_r+0x822>
 8012ac4:	4621      	mov	r1, r4
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f000 fe80 	bl	80137cc <__mcmp>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	da64      	bge.n	8012b9a <_dtoa_r+0x822>
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	220a      	movs	r2, #10
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	f000 fc58 	bl	801338c <__multadd>
 8012adc:	9b07      	ldr	r3, [sp, #28]
 8012ade:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012ae2:	4605      	mov	r5, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	f000 8191 	beq.w	8012e0c <_dtoa_r+0xa94>
 8012aea:	4639      	mov	r1, r7
 8012aec:	2300      	movs	r3, #0
 8012aee:	220a      	movs	r2, #10
 8012af0:	4630      	mov	r0, r6
 8012af2:	f000 fc4b 	bl	801338c <__multadd>
 8012af6:	f1ba 0f00 	cmp.w	sl, #0
 8012afa:	4607      	mov	r7, r0
 8012afc:	f300 808d 	bgt.w	8012c1a <_dtoa_r+0x8a2>
 8012b00:	9b06      	ldr	r3, [sp, #24]
 8012b02:	2b02      	cmp	r3, #2
 8012b04:	dc50      	bgt.n	8012ba8 <_dtoa_r+0x830>
 8012b06:	e088      	b.n	8012c1a <_dtoa_r+0x8a2>
 8012b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012b0e:	e751      	b.n	80129b4 <_dtoa_r+0x63c>
 8012b10:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	bfbf      	itttt	lt
 8012b18:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8012b1a:	1ae3      	sublt	r3, r4, r3
 8012b1c:	18d2      	addlt	r2, r2, r3
 8012b1e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012b20:	bfb6      	itet	lt
 8012b22:	4623      	movlt	r3, r4
 8012b24:	1b1c      	subge	r4, r3, r4
 8012b26:	2400      	movlt	r4, #0
 8012b28:	f1b9 0f00 	cmp.w	r9, #0
 8012b2c:	bfb5      	itete	lt
 8012b2e:	9a04      	ldrlt	r2, [sp, #16]
 8012b30:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012b34:	eba2 0809 	sublt.w	r8, r2, r9
 8012b38:	464a      	movge	r2, r9
 8012b3a:	bfb8      	it	lt
 8012b3c:	2200      	movlt	r2, #0
 8012b3e:	e73c      	b.n	80129ba <_dtoa_r+0x642>
 8012b40:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012b44:	9f07      	ldr	r7, [sp, #28]
 8012b46:	461c      	mov	r4, r3
 8012b48:	e744      	b.n	80129d4 <_dtoa_r+0x65c>
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	e770      	b.n	8012a30 <_dtoa_r+0x6b8>
 8012b4e:	9b06      	ldr	r3, [sp, #24]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	dc18      	bgt.n	8012b86 <_dtoa_r+0x80e>
 8012b54:	9b02      	ldr	r3, [sp, #8]
 8012b56:	b9b3      	cbnz	r3, 8012b86 <_dtoa_r+0x80e>
 8012b58:	9b03      	ldr	r3, [sp, #12]
 8012b5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012b5e:	b9a2      	cbnz	r2, 8012b8a <_dtoa_r+0x812>
 8012b60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012b64:	0d12      	lsrs	r2, r2, #20
 8012b66:	0512      	lsls	r2, r2, #20
 8012b68:	b18a      	cbz	r2, 8012b8e <_dtoa_r+0x816>
 8012b6a:	9b04      	ldr	r3, [sp, #16]
 8012b6c:	3301      	adds	r3, #1
 8012b6e:	9304      	str	r3, [sp, #16]
 8012b70:	9b05      	ldr	r3, [sp, #20]
 8012b72:	3301      	adds	r3, #1
 8012b74:	9305      	str	r3, [sp, #20]
 8012b76:	2301      	movs	r3, #1
 8012b78:	930a      	str	r3, [sp, #40]	; 0x28
 8012b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f47f af70 	bne.w	8012a62 <_dtoa_r+0x6ea>
 8012b82:	2001      	movs	r0, #1
 8012b84:	e775      	b.n	8012a72 <_dtoa_r+0x6fa>
 8012b86:	2300      	movs	r3, #0
 8012b88:	e7f6      	b.n	8012b78 <_dtoa_r+0x800>
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	e7f4      	b.n	8012b78 <_dtoa_r+0x800>
 8012b8e:	920a      	str	r2, [sp, #40]	; 0x28
 8012b90:	e7f3      	b.n	8012b7a <_dtoa_r+0x802>
 8012b92:	d082      	beq.n	8012a9a <_dtoa_r+0x722>
 8012b94:	4610      	mov	r0, r2
 8012b96:	301c      	adds	r0, #28
 8012b98:	e778      	b.n	8012a8c <_dtoa_r+0x714>
 8012b9a:	f1b9 0f00 	cmp.w	r9, #0
 8012b9e:	dc37      	bgt.n	8012c10 <_dtoa_r+0x898>
 8012ba0:	9b06      	ldr	r3, [sp, #24]
 8012ba2:	2b02      	cmp	r3, #2
 8012ba4:	dd34      	ble.n	8012c10 <_dtoa_r+0x898>
 8012ba6:	46ca      	mov	sl, r9
 8012ba8:	f1ba 0f00 	cmp.w	sl, #0
 8012bac:	d10d      	bne.n	8012bca <_dtoa_r+0x852>
 8012bae:	4621      	mov	r1, r4
 8012bb0:	4653      	mov	r3, sl
 8012bb2:	2205      	movs	r2, #5
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	f000 fbe9 	bl	801338c <__multadd>
 8012bba:	4601      	mov	r1, r0
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f000 fe04 	bl	80137cc <__mcmp>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	f73f adeb 	bgt.w	80127a0 <_dtoa_r+0x428>
 8012bca:	9b08      	ldr	r3, [sp, #32]
 8012bcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012bd0:	ea6f 0b03 	mvn.w	fp, r3
 8012bd4:	f04f 0900 	mov.w	r9, #0
 8012bd8:	4621      	mov	r1, r4
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f000 fbb4 	bl	8013348 <_Bfree>
 8012be0:	2f00      	cmp	r7, #0
 8012be2:	f43f aea8 	beq.w	8012936 <_dtoa_r+0x5be>
 8012be6:	f1b9 0f00 	cmp.w	r9, #0
 8012bea:	d005      	beq.n	8012bf8 <_dtoa_r+0x880>
 8012bec:	45b9      	cmp	r9, r7
 8012bee:	d003      	beq.n	8012bf8 <_dtoa_r+0x880>
 8012bf0:	4649      	mov	r1, r9
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f000 fba8 	bl	8013348 <_Bfree>
 8012bf8:	4639      	mov	r1, r7
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	f000 fba4 	bl	8013348 <_Bfree>
 8012c00:	e699      	b.n	8012936 <_dtoa_r+0x5be>
 8012c02:	2400      	movs	r4, #0
 8012c04:	4627      	mov	r7, r4
 8012c06:	e7e0      	b.n	8012bca <_dtoa_r+0x852>
 8012c08:	46bb      	mov	fp, r7
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	4607      	mov	r7, r0
 8012c0e:	e5c7      	b.n	80127a0 <_dtoa_r+0x428>
 8012c10:	9b07      	ldr	r3, [sp, #28]
 8012c12:	46ca      	mov	sl, r9
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	f000 8100 	beq.w	8012e1a <_dtoa_r+0xaa2>
 8012c1a:	f1b8 0f00 	cmp.w	r8, #0
 8012c1e:	dd05      	ble.n	8012c2c <_dtoa_r+0x8b4>
 8012c20:	4639      	mov	r1, r7
 8012c22:	4642      	mov	r2, r8
 8012c24:	4630      	mov	r0, r6
 8012c26:	f000 fd61 	bl	80136ec <__lshift>
 8012c2a:	4607      	mov	r7, r0
 8012c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d05d      	beq.n	8012cee <_dtoa_r+0x976>
 8012c32:	6879      	ldr	r1, [r7, #4]
 8012c34:	4630      	mov	r0, r6
 8012c36:	f000 fb47 	bl	80132c8 <_Balloc>
 8012c3a:	4680      	mov	r8, r0
 8012c3c:	b928      	cbnz	r0, 8012c4a <_dtoa_r+0x8d2>
 8012c3e:	4b82      	ldr	r3, [pc, #520]	; (8012e48 <_dtoa_r+0xad0>)
 8012c40:	4602      	mov	r2, r0
 8012c42:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012c46:	f7ff bbaf 	b.w	80123a8 <_dtoa_r+0x30>
 8012c4a:	693a      	ldr	r2, [r7, #16]
 8012c4c:	3202      	adds	r2, #2
 8012c4e:	0092      	lsls	r2, r2, #2
 8012c50:	f107 010c 	add.w	r1, r7, #12
 8012c54:	300c      	adds	r0, #12
 8012c56:	f000 fb29 	bl	80132ac <memcpy>
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	4641      	mov	r1, r8
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f000 fd44 	bl	80136ec <__lshift>
 8012c64:	9b01      	ldr	r3, [sp, #4]
 8012c66:	3301      	adds	r3, #1
 8012c68:	9304      	str	r3, [sp, #16]
 8012c6a:	9b01      	ldr	r3, [sp, #4]
 8012c6c:	4453      	add	r3, sl
 8012c6e:	9308      	str	r3, [sp, #32]
 8012c70:	9b02      	ldr	r3, [sp, #8]
 8012c72:	f003 0301 	and.w	r3, r3, #1
 8012c76:	46b9      	mov	r9, r7
 8012c78:	9307      	str	r3, [sp, #28]
 8012c7a:	4607      	mov	r7, r0
 8012c7c:	9b04      	ldr	r3, [sp, #16]
 8012c7e:	4621      	mov	r1, r4
 8012c80:	3b01      	subs	r3, #1
 8012c82:	4628      	mov	r0, r5
 8012c84:	9302      	str	r3, [sp, #8]
 8012c86:	f7ff faeb 	bl	8012260 <quorem>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	3330      	adds	r3, #48	; 0x30
 8012c8e:	9005      	str	r0, [sp, #20]
 8012c90:	4649      	mov	r1, r9
 8012c92:	4628      	mov	r0, r5
 8012c94:	9309      	str	r3, [sp, #36]	; 0x24
 8012c96:	f000 fd99 	bl	80137cc <__mcmp>
 8012c9a:	463a      	mov	r2, r7
 8012c9c:	4682      	mov	sl, r0
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f000 fdaf 	bl	8013804 <__mdiff>
 8012ca6:	68c2      	ldr	r2, [r0, #12]
 8012ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012caa:	4680      	mov	r8, r0
 8012cac:	bb0a      	cbnz	r2, 8012cf2 <_dtoa_r+0x97a>
 8012cae:	4601      	mov	r1, r0
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	f000 fd8b 	bl	80137cc <__mcmp>
 8012cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cb8:	4602      	mov	r2, r0
 8012cba:	4641      	mov	r1, r8
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012cc2:	f000 fb41 	bl	8013348 <_Bfree>
 8012cc6:	9b06      	ldr	r3, [sp, #24]
 8012cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012cce:	ea43 0102 	orr.w	r1, r3, r2
 8012cd2:	9b07      	ldr	r3, [sp, #28]
 8012cd4:	430b      	orrs	r3, r1
 8012cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cd8:	d10d      	bne.n	8012cf6 <_dtoa_r+0x97e>
 8012cda:	2b39      	cmp	r3, #57	; 0x39
 8012cdc:	d029      	beq.n	8012d32 <_dtoa_r+0x9ba>
 8012cde:	f1ba 0f00 	cmp.w	sl, #0
 8012ce2:	dd01      	ble.n	8012ce8 <_dtoa_r+0x970>
 8012ce4:	9b05      	ldr	r3, [sp, #20]
 8012ce6:	3331      	adds	r3, #49	; 0x31
 8012ce8:	9a02      	ldr	r2, [sp, #8]
 8012cea:	7013      	strb	r3, [r2, #0]
 8012cec:	e774      	b.n	8012bd8 <_dtoa_r+0x860>
 8012cee:	4638      	mov	r0, r7
 8012cf0:	e7b8      	b.n	8012c64 <_dtoa_r+0x8ec>
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	e7e1      	b.n	8012cba <_dtoa_r+0x942>
 8012cf6:	f1ba 0f00 	cmp.w	sl, #0
 8012cfa:	db06      	blt.n	8012d0a <_dtoa_r+0x992>
 8012cfc:	9906      	ldr	r1, [sp, #24]
 8012cfe:	ea41 0a0a 	orr.w	sl, r1, sl
 8012d02:	9907      	ldr	r1, [sp, #28]
 8012d04:	ea5a 0101 	orrs.w	r1, sl, r1
 8012d08:	d120      	bne.n	8012d4c <_dtoa_r+0x9d4>
 8012d0a:	2a00      	cmp	r2, #0
 8012d0c:	ddec      	ble.n	8012ce8 <_dtoa_r+0x970>
 8012d0e:	4629      	mov	r1, r5
 8012d10:	2201      	movs	r2, #1
 8012d12:	4630      	mov	r0, r6
 8012d14:	9304      	str	r3, [sp, #16]
 8012d16:	f000 fce9 	bl	80136ec <__lshift>
 8012d1a:	4621      	mov	r1, r4
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	f000 fd55 	bl	80137cc <__mcmp>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	9b04      	ldr	r3, [sp, #16]
 8012d26:	dc02      	bgt.n	8012d2e <_dtoa_r+0x9b6>
 8012d28:	d1de      	bne.n	8012ce8 <_dtoa_r+0x970>
 8012d2a:	07da      	lsls	r2, r3, #31
 8012d2c:	d5dc      	bpl.n	8012ce8 <_dtoa_r+0x970>
 8012d2e:	2b39      	cmp	r3, #57	; 0x39
 8012d30:	d1d8      	bne.n	8012ce4 <_dtoa_r+0x96c>
 8012d32:	9a02      	ldr	r2, [sp, #8]
 8012d34:	2339      	movs	r3, #57	; 0x39
 8012d36:	7013      	strb	r3, [r2, #0]
 8012d38:	4643      	mov	r3, r8
 8012d3a:	4698      	mov	r8, r3
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012d42:	2a39      	cmp	r2, #57	; 0x39
 8012d44:	d051      	beq.n	8012dea <_dtoa_r+0xa72>
 8012d46:	3201      	adds	r2, #1
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	e745      	b.n	8012bd8 <_dtoa_r+0x860>
 8012d4c:	2a00      	cmp	r2, #0
 8012d4e:	dd03      	ble.n	8012d58 <_dtoa_r+0x9e0>
 8012d50:	2b39      	cmp	r3, #57	; 0x39
 8012d52:	d0ee      	beq.n	8012d32 <_dtoa_r+0x9ba>
 8012d54:	3301      	adds	r3, #1
 8012d56:	e7c7      	b.n	8012ce8 <_dtoa_r+0x970>
 8012d58:	9a04      	ldr	r2, [sp, #16]
 8012d5a:	9908      	ldr	r1, [sp, #32]
 8012d5c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012d60:	428a      	cmp	r2, r1
 8012d62:	d02b      	beq.n	8012dbc <_dtoa_r+0xa44>
 8012d64:	4629      	mov	r1, r5
 8012d66:	2300      	movs	r3, #0
 8012d68:	220a      	movs	r2, #10
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f000 fb0e 	bl	801338c <__multadd>
 8012d70:	45b9      	cmp	r9, r7
 8012d72:	4605      	mov	r5, r0
 8012d74:	f04f 0300 	mov.w	r3, #0
 8012d78:	f04f 020a 	mov.w	r2, #10
 8012d7c:	4649      	mov	r1, r9
 8012d7e:	4630      	mov	r0, r6
 8012d80:	d107      	bne.n	8012d92 <_dtoa_r+0xa1a>
 8012d82:	f000 fb03 	bl	801338c <__multadd>
 8012d86:	4681      	mov	r9, r0
 8012d88:	4607      	mov	r7, r0
 8012d8a:	9b04      	ldr	r3, [sp, #16]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	9304      	str	r3, [sp, #16]
 8012d90:	e774      	b.n	8012c7c <_dtoa_r+0x904>
 8012d92:	f000 fafb 	bl	801338c <__multadd>
 8012d96:	4639      	mov	r1, r7
 8012d98:	4681      	mov	r9, r0
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	220a      	movs	r2, #10
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f000 faf4 	bl	801338c <__multadd>
 8012da4:	4607      	mov	r7, r0
 8012da6:	e7f0      	b.n	8012d8a <_dtoa_r+0xa12>
 8012da8:	f1ba 0f00 	cmp.w	sl, #0
 8012dac:	9a01      	ldr	r2, [sp, #4]
 8012dae:	bfcc      	ite	gt
 8012db0:	46d0      	movgt	r8, sl
 8012db2:	f04f 0801 	movle.w	r8, #1
 8012db6:	4490      	add	r8, r2
 8012db8:	f04f 0900 	mov.w	r9, #0
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	9302      	str	r3, [sp, #8]
 8012dc4:	f000 fc92 	bl	80136ec <__lshift>
 8012dc8:	4621      	mov	r1, r4
 8012dca:	4605      	mov	r5, r0
 8012dcc:	f000 fcfe 	bl	80137cc <__mcmp>
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	dcb1      	bgt.n	8012d38 <_dtoa_r+0x9c0>
 8012dd4:	d102      	bne.n	8012ddc <_dtoa_r+0xa64>
 8012dd6:	9b02      	ldr	r3, [sp, #8]
 8012dd8:	07db      	lsls	r3, r3, #31
 8012dda:	d4ad      	bmi.n	8012d38 <_dtoa_r+0x9c0>
 8012ddc:	4643      	mov	r3, r8
 8012dde:	4698      	mov	r8, r3
 8012de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012de4:	2a30      	cmp	r2, #48	; 0x30
 8012de6:	d0fa      	beq.n	8012dde <_dtoa_r+0xa66>
 8012de8:	e6f6      	b.n	8012bd8 <_dtoa_r+0x860>
 8012dea:	9a01      	ldr	r2, [sp, #4]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d1a4      	bne.n	8012d3a <_dtoa_r+0x9c2>
 8012df0:	f10b 0b01 	add.w	fp, fp, #1
 8012df4:	2331      	movs	r3, #49	; 0x31
 8012df6:	e778      	b.n	8012cea <_dtoa_r+0x972>
 8012df8:	4b14      	ldr	r3, [pc, #80]	; (8012e4c <_dtoa_r+0xad4>)
 8012dfa:	f7ff bb27 	b.w	801244c <_dtoa_r+0xd4>
 8012dfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f47f ab03 	bne.w	801240c <_dtoa_r+0x94>
 8012e06:	4b12      	ldr	r3, [pc, #72]	; (8012e50 <_dtoa_r+0xad8>)
 8012e08:	f7ff bb20 	b.w	801244c <_dtoa_r+0xd4>
 8012e0c:	f1ba 0f00 	cmp.w	sl, #0
 8012e10:	dc03      	bgt.n	8012e1a <_dtoa_r+0xaa2>
 8012e12:	9b06      	ldr	r3, [sp, #24]
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	f73f aec7 	bgt.w	8012ba8 <_dtoa_r+0x830>
 8012e1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e1e:	4621      	mov	r1, r4
 8012e20:	4628      	mov	r0, r5
 8012e22:	f7ff fa1d 	bl	8012260 <quorem>
 8012e26:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012e2a:	f808 3b01 	strb.w	r3, [r8], #1
 8012e2e:	9a01      	ldr	r2, [sp, #4]
 8012e30:	eba8 0202 	sub.w	r2, r8, r2
 8012e34:	4592      	cmp	sl, r2
 8012e36:	ddb7      	ble.n	8012da8 <_dtoa_r+0xa30>
 8012e38:	4629      	mov	r1, r5
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	220a      	movs	r2, #10
 8012e3e:	4630      	mov	r0, r6
 8012e40:	f000 faa4 	bl	801338c <__multadd>
 8012e44:	4605      	mov	r5, r0
 8012e46:	e7ea      	b.n	8012e1e <_dtoa_r+0xaa6>
 8012e48:	08015d67 	.word	0x08015d67
 8012e4c:	08015cc4 	.word	0x08015cc4
 8012e50:	08015ce8 	.word	0x08015ce8

08012e54 <__sflush_r>:
 8012e54:	898a      	ldrh	r2, [r1, #12]
 8012e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	0710      	lsls	r0, r2, #28
 8012e5e:	460c      	mov	r4, r1
 8012e60:	d458      	bmi.n	8012f14 <__sflush_r+0xc0>
 8012e62:	684b      	ldr	r3, [r1, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	dc05      	bgt.n	8012e74 <__sflush_r+0x20>
 8012e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	dc02      	bgt.n	8012e74 <__sflush_r+0x20>
 8012e6e:	2000      	movs	r0, #0
 8012e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e76:	2e00      	cmp	r6, #0
 8012e78:	d0f9      	beq.n	8012e6e <__sflush_r+0x1a>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e80:	682f      	ldr	r7, [r5, #0]
 8012e82:	602b      	str	r3, [r5, #0]
 8012e84:	d032      	beq.n	8012eec <__sflush_r+0x98>
 8012e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e88:	89a3      	ldrh	r3, [r4, #12]
 8012e8a:	075a      	lsls	r2, r3, #29
 8012e8c:	d505      	bpl.n	8012e9a <__sflush_r+0x46>
 8012e8e:	6863      	ldr	r3, [r4, #4]
 8012e90:	1ac0      	subs	r0, r0, r3
 8012e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e94:	b10b      	cbz	r3, 8012e9a <__sflush_r+0x46>
 8012e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e98:	1ac0      	subs	r0, r0, r3
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ea0:	6a21      	ldr	r1, [r4, #32]
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	47b0      	blx	r6
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	d106      	bne.n	8012eba <__sflush_r+0x66>
 8012eac:	6829      	ldr	r1, [r5, #0]
 8012eae:	291d      	cmp	r1, #29
 8012eb0:	d82c      	bhi.n	8012f0c <__sflush_r+0xb8>
 8012eb2:	4a2a      	ldr	r2, [pc, #168]	; (8012f5c <__sflush_r+0x108>)
 8012eb4:	40ca      	lsrs	r2, r1
 8012eb6:	07d6      	lsls	r6, r2, #31
 8012eb8:	d528      	bpl.n	8012f0c <__sflush_r+0xb8>
 8012eba:	2200      	movs	r2, #0
 8012ebc:	6062      	str	r2, [r4, #4]
 8012ebe:	04d9      	lsls	r1, r3, #19
 8012ec0:	6922      	ldr	r2, [r4, #16]
 8012ec2:	6022      	str	r2, [r4, #0]
 8012ec4:	d504      	bpl.n	8012ed0 <__sflush_r+0x7c>
 8012ec6:	1c42      	adds	r2, r0, #1
 8012ec8:	d101      	bne.n	8012ece <__sflush_r+0x7a>
 8012eca:	682b      	ldr	r3, [r5, #0]
 8012ecc:	b903      	cbnz	r3, 8012ed0 <__sflush_r+0x7c>
 8012ece:	6560      	str	r0, [r4, #84]	; 0x54
 8012ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ed2:	602f      	str	r7, [r5, #0]
 8012ed4:	2900      	cmp	r1, #0
 8012ed6:	d0ca      	beq.n	8012e6e <__sflush_r+0x1a>
 8012ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012edc:	4299      	cmp	r1, r3
 8012ede:	d002      	beq.n	8012ee6 <__sflush_r+0x92>
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f000 fd8b 	bl	80139fc <_free_r>
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8012eea:	e7c1      	b.n	8012e70 <__sflush_r+0x1c>
 8012eec:	6a21      	ldr	r1, [r4, #32]
 8012eee:	2301      	movs	r3, #1
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	47b0      	blx	r6
 8012ef4:	1c41      	adds	r1, r0, #1
 8012ef6:	d1c7      	bne.n	8012e88 <__sflush_r+0x34>
 8012ef8:	682b      	ldr	r3, [r5, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d0c4      	beq.n	8012e88 <__sflush_r+0x34>
 8012efe:	2b1d      	cmp	r3, #29
 8012f00:	d001      	beq.n	8012f06 <__sflush_r+0xb2>
 8012f02:	2b16      	cmp	r3, #22
 8012f04:	d101      	bne.n	8012f0a <__sflush_r+0xb6>
 8012f06:	602f      	str	r7, [r5, #0]
 8012f08:	e7b1      	b.n	8012e6e <__sflush_r+0x1a>
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f10:	81a3      	strh	r3, [r4, #12]
 8012f12:	e7ad      	b.n	8012e70 <__sflush_r+0x1c>
 8012f14:	690f      	ldr	r7, [r1, #16]
 8012f16:	2f00      	cmp	r7, #0
 8012f18:	d0a9      	beq.n	8012e6e <__sflush_r+0x1a>
 8012f1a:	0793      	lsls	r3, r2, #30
 8012f1c:	680e      	ldr	r6, [r1, #0]
 8012f1e:	bf08      	it	eq
 8012f20:	694b      	ldreq	r3, [r1, #20]
 8012f22:	600f      	str	r7, [r1, #0]
 8012f24:	bf18      	it	ne
 8012f26:	2300      	movne	r3, #0
 8012f28:	eba6 0807 	sub.w	r8, r6, r7
 8012f2c:	608b      	str	r3, [r1, #8]
 8012f2e:	f1b8 0f00 	cmp.w	r8, #0
 8012f32:	dd9c      	ble.n	8012e6e <__sflush_r+0x1a>
 8012f34:	6a21      	ldr	r1, [r4, #32]
 8012f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f38:	4643      	mov	r3, r8
 8012f3a:	463a      	mov	r2, r7
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	47b0      	blx	r6
 8012f40:	2800      	cmp	r0, #0
 8012f42:	dc06      	bgt.n	8012f52 <__sflush_r+0xfe>
 8012f44:	89a3      	ldrh	r3, [r4, #12]
 8012f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f4a:	81a3      	strh	r3, [r4, #12]
 8012f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f50:	e78e      	b.n	8012e70 <__sflush_r+0x1c>
 8012f52:	4407      	add	r7, r0
 8012f54:	eba8 0800 	sub.w	r8, r8, r0
 8012f58:	e7e9      	b.n	8012f2e <__sflush_r+0xda>
 8012f5a:	bf00      	nop
 8012f5c:	20400001 	.word	0x20400001

08012f60 <_fflush_r>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	690b      	ldr	r3, [r1, #16]
 8012f64:	4605      	mov	r5, r0
 8012f66:	460c      	mov	r4, r1
 8012f68:	b913      	cbnz	r3, 8012f70 <_fflush_r+0x10>
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	b118      	cbz	r0, 8012f7a <_fflush_r+0x1a>
 8012f72:	6983      	ldr	r3, [r0, #24]
 8012f74:	b90b      	cbnz	r3, 8012f7a <_fflush_r+0x1a>
 8012f76:	f000 f887 	bl	8013088 <__sinit>
 8012f7a:	4b14      	ldr	r3, [pc, #80]	; (8012fcc <_fflush_r+0x6c>)
 8012f7c:	429c      	cmp	r4, r3
 8012f7e:	d11b      	bne.n	8012fb8 <_fflush_r+0x58>
 8012f80:	686c      	ldr	r4, [r5, #4]
 8012f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d0ef      	beq.n	8012f6a <_fflush_r+0xa>
 8012f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f8c:	07d0      	lsls	r0, r2, #31
 8012f8e:	d404      	bmi.n	8012f9a <_fflush_r+0x3a>
 8012f90:	0599      	lsls	r1, r3, #22
 8012f92:	d402      	bmi.n	8012f9a <_fflush_r+0x3a>
 8012f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f96:	f000 f91a 	bl	80131ce <__retarget_lock_acquire_recursive>
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	4621      	mov	r1, r4
 8012f9e:	f7ff ff59 	bl	8012e54 <__sflush_r>
 8012fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fa4:	07da      	lsls	r2, r3, #31
 8012fa6:	4605      	mov	r5, r0
 8012fa8:	d4e0      	bmi.n	8012f6c <_fflush_r+0xc>
 8012faa:	89a3      	ldrh	r3, [r4, #12]
 8012fac:	059b      	lsls	r3, r3, #22
 8012fae:	d4dd      	bmi.n	8012f6c <_fflush_r+0xc>
 8012fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fb2:	f000 f90d 	bl	80131d0 <__retarget_lock_release_recursive>
 8012fb6:	e7d9      	b.n	8012f6c <_fflush_r+0xc>
 8012fb8:	4b05      	ldr	r3, [pc, #20]	; (8012fd0 <_fflush_r+0x70>)
 8012fba:	429c      	cmp	r4, r3
 8012fbc:	d101      	bne.n	8012fc2 <_fflush_r+0x62>
 8012fbe:	68ac      	ldr	r4, [r5, #8]
 8012fc0:	e7df      	b.n	8012f82 <_fflush_r+0x22>
 8012fc2:	4b04      	ldr	r3, [pc, #16]	; (8012fd4 <_fflush_r+0x74>)
 8012fc4:	429c      	cmp	r4, r3
 8012fc6:	bf08      	it	eq
 8012fc8:	68ec      	ldreq	r4, [r5, #12]
 8012fca:	e7da      	b.n	8012f82 <_fflush_r+0x22>
 8012fcc:	08015d98 	.word	0x08015d98
 8012fd0:	08015db8 	.word	0x08015db8
 8012fd4:	08015d78 	.word	0x08015d78

08012fd8 <std>:
 8012fd8:	2300      	movs	r3, #0
 8012fda:	b510      	push	{r4, lr}
 8012fdc:	4604      	mov	r4, r0
 8012fde:	e9c0 3300 	strd	r3, r3, [r0]
 8012fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fe6:	6083      	str	r3, [r0, #8]
 8012fe8:	8181      	strh	r1, [r0, #12]
 8012fea:	6643      	str	r3, [r0, #100]	; 0x64
 8012fec:	81c2      	strh	r2, [r0, #14]
 8012fee:	6183      	str	r3, [r0, #24]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	2208      	movs	r2, #8
 8012ff4:	305c      	adds	r0, #92	; 0x5c
 8012ff6:	f7fe fbb3 	bl	8011760 <memset>
 8012ffa:	4b05      	ldr	r3, [pc, #20]	; (8013010 <std+0x38>)
 8012ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8012ffe:	4b05      	ldr	r3, [pc, #20]	; (8013014 <std+0x3c>)
 8013000:	62a3      	str	r3, [r4, #40]	; 0x28
 8013002:	4b05      	ldr	r3, [pc, #20]	; (8013018 <std+0x40>)
 8013004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013006:	4b05      	ldr	r3, [pc, #20]	; (801301c <std+0x44>)
 8013008:	6224      	str	r4, [r4, #32]
 801300a:	6323      	str	r3, [r4, #48]	; 0x30
 801300c:	bd10      	pop	{r4, pc}
 801300e:	bf00      	nop
 8013010:	08013bdd 	.word	0x08013bdd
 8013014:	08013bff 	.word	0x08013bff
 8013018:	08013c37 	.word	0x08013c37
 801301c:	08013c5b 	.word	0x08013c5b

08013020 <_cleanup_r>:
 8013020:	4901      	ldr	r1, [pc, #4]	; (8013028 <_cleanup_r+0x8>)
 8013022:	f000 b8af 	b.w	8013184 <_fwalk_reent>
 8013026:	bf00      	nop
 8013028:	08012f61 	.word	0x08012f61

0801302c <__sfmoreglue>:
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	2268      	movs	r2, #104	; 0x68
 8013030:	1e4d      	subs	r5, r1, #1
 8013032:	4355      	muls	r5, r2
 8013034:	460e      	mov	r6, r1
 8013036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801303a:	f000 fd4b 	bl	8013ad4 <_malloc_r>
 801303e:	4604      	mov	r4, r0
 8013040:	b140      	cbz	r0, 8013054 <__sfmoreglue+0x28>
 8013042:	2100      	movs	r1, #0
 8013044:	e9c0 1600 	strd	r1, r6, [r0]
 8013048:	300c      	adds	r0, #12
 801304a:	60a0      	str	r0, [r4, #8]
 801304c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013050:	f7fe fb86 	bl	8011760 <memset>
 8013054:	4620      	mov	r0, r4
 8013056:	bd70      	pop	{r4, r5, r6, pc}

08013058 <__sfp_lock_acquire>:
 8013058:	4801      	ldr	r0, [pc, #4]	; (8013060 <__sfp_lock_acquire+0x8>)
 801305a:	f000 b8b8 	b.w	80131ce <__retarget_lock_acquire_recursive>
 801305e:	bf00      	nop
 8013060:	240015f5 	.word	0x240015f5

08013064 <__sfp_lock_release>:
 8013064:	4801      	ldr	r0, [pc, #4]	; (801306c <__sfp_lock_release+0x8>)
 8013066:	f000 b8b3 	b.w	80131d0 <__retarget_lock_release_recursive>
 801306a:	bf00      	nop
 801306c:	240015f5 	.word	0x240015f5

08013070 <__sinit_lock_acquire>:
 8013070:	4801      	ldr	r0, [pc, #4]	; (8013078 <__sinit_lock_acquire+0x8>)
 8013072:	f000 b8ac 	b.w	80131ce <__retarget_lock_acquire_recursive>
 8013076:	bf00      	nop
 8013078:	240015f6 	.word	0x240015f6

0801307c <__sinit_lock_release>:
 801307c:	4801      	ldr	r0, [pc, #4]	; (8013084 <__sinit_lock_release+0x8>)
 801307e:	f000 b8a7 	b.w	80131d0 <__retarget_lock_release_recursive>
 8013082:	bf00      	nop
 8013084:	240015f6 	.word	0x240015f6

08013088 <__sinit>:
 8013088:	b510      	push	{r4, lr}
 801308a:	4604      	mov	r4, r0
 801308c:	f7ff fff0 	bl	8013070 <__sinit_lock_acquire>
 8013090:	69a3      	ldr	r3, [r4, #24]
 8013092:	b11b      	cbz	r3, 801309c <__sinit+0x14>
 8013094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013098:	f7ff bff0 	b.w	801307c <__sinit_lock_release>
 801309c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80130a0:	6523      	str	r3, [r4, #80]	; 0x50
 80130a2:	4b13      	ldr	r3, [pc, #76]	; (80130f0 <__sinit+0x68>)
 80130a4:	4a13      	ldr	r2, [pc, #76]	; (80130f4 <__sinit+0x6c>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80130aa:	42a3      	cmp	r3, r4
 80130ac:	bf04      	itt	eq
 80130ae:	2301      	moveq	r3, #1
 80130b0:	61a3      	streq	r3, [r4, #24]
 80130b2:	4620      	mov	r0, r4
 80130b4:	f000 f820 	bl	80130f8 <__sfp>
 80130b8:	6060      	str	r0, [r4, #4]
 80130ba:	4620      	mov	r0, r4
 80130bc:	f000 f81c 	bl	80130f8 <__sfp>
 80130c0:	60a0      	str	r0, [r4, #8]
 80130c2:	4620      	mov	r0, r4
 80130c4:	f000 f818 	bl	80130f8 <__sfp>
 80130c8:	2200      	movs	r2, #0
 80130ca:	60e0      	str	r0, [r4, #12]
 80130cc:	2104      	movs	r1, #4
 80130ce:	6860      	ldr	r0, [r4, #4]
 80130d0:	f7ff ff82 	bl	8012fd8 <std>
 80130d4:	68a0      	ldr	r0, [r4, #8]
 80130d6:	2201      	movs	r2, #1
 80130d8:	2109      	movs	r1, #9
 80130da:	f7ff ff7d 	bl	8012fd8 <std>
 80130de:	68e0      	ldr	r0, [r4, #12]
 80130e0:	2202      	movs	r2, #2
 80130e2:	2112      	movs	r1, #18
 80130e4:	f7ff ff78 	bl	8012fd8 <std>
 80130e8:	2301      	movs	r3, #1
 80130ea:	61a3      	str	r3, [r4, #24]
 80130ec:	e7d2      	b.n	8013094 <__sinit+0xc>
 80130ee:	bf00      	nop
 80130f0:	08015cb0 	.word	0x08015cb0
 80130f4:	08013021 	.word	0x08013021

080130f8 <__sfp>:
 80130f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130fa:	4607      	mov	r7, r0
 80130fc:	f7ff ffac 	bl	8013058 <__sfp_lock_acquire>
 8013100:	4b1e      	ldr	r3, [pc, #120]	; (801317c <__sfp+0x84>)
 8013102:	681e      	ldr	r6, [r3, #0]
 8013104:	69b3      	ldr	r3, [r6, #24]
 8013106:	b913      	cbnz	r3, 801310e <__sfp+0x16>
 8013108:	4630      	mov	r0, r6
 801310a:	f7ff ffbd 	bl	8013088 <__sinit>
 801310e:	3648      	adds	r6, #72	; 0x48
 8013110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013114:	3b01      	subs	r3, #1
 8013116:	d503      	bpl.n	8013120 <__sfp+0x28>
 8013118:	6833      	ldr	r3, [r6, #0]
 801311a:	b30b      	cbz	r3, 8013160 <__sfp+0x68>
 801311c:	6836      	ldr	r6, [r6, #0]
 801311e:	e7f7      	b.n	8013110 <__sfp+0x18>
 8013120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013124:	b9d5      	cbnz	r5, 801315c <__sfp+0x64>
 8013126:	4b16      	ldr	r3, [pc, #88]	; (8013180 <__sfp+0x88>)
 8013128:	60e3      	str	r3, [r4, #12]
 801312a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801312e:	6665      	str	r5, [r4, #100]	; 0x64
 8013130:	f000 f84c 	bl	80131cc <__retarget_lock_init_recursive>
 8013134:	f7ff ff96 	bl	8013064 <__sfp_lock_release>
 8013138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801313c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013140:	6025      	str	r5, [r4, #0]
 8013142:	61a5      	str	r5, [r4, #24]
 8013144:	2208      	movs	r2, #8
 8013146:	4629      	mov	r1, r5
 8013148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801314c:	f7fe fb08 	bl	8011760 <memset>
 8013150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013158:	4620      	mov	r0, r4
 801315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801315c:	3468      	adds	r4, #104	; 0x68
 801315e:	e7d9      	b.n	8013114 <__sfp+0x1c>
 8013160:	2104      	movs	r1, #4
 8013162:	4638      	mov	r0, r7
 8013164:	f7ff ff62 	bl	801302c <__sfmoreglue>
 8013168:	4604      	mov	r4, r0
 801316a:	6030      	str	r0, [r6, #0]
 801316c:	2800      	cmp	r0, #0
 801316e:	d1d5      	bne.n	801311c <__sfp+0x24>
 8013170:	f7ff ff78 	bl	8013064 <__sfp_lock_release>
 8013174:	230c      	movs	r3, #12
 8013176:	603b      	str	r3, [r7, #0]
 8013178:	e7ee      	b.n	8013158 <__sfp+0x60>
 801317a:	bf00      	nop
 801317c:	08015cb0 	.word	0x08015cb0
 8013180:	ffff0001 	.word	0xffff0001

08013184 <_fwalk_reent>:
 8013184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013188:	4606      	mov	r6, r0
 801318a:	4688      	mov	r8, r1
 801318c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013190:	2700      	movs	r7, #0
 8013192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013196:	f1b9 0901 	subs.w	r9, r9, #1
 801319a:	d505      	bpl.n	80131a8 <_fwalk_reent+0x24>
 801319c:	6824      	ldr	r4, [r4, #0]
 801319e:	2c00      	cmp	r4, #0
 80131a0:	d1f7      	bne.n	8013192 <_fwalk_reent+0xe>
 80131a2:	4638      	mov	r0, r7
 80131a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a8:	89ab      	ldrh	r3, [r5, #12]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d907      	bls.n	80131be <_fwalk_reent+0x3a>
 80131ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131b2:	3301      	adds	r3, #1
 80131b4:	d003      	beq.n	80131be <_fwalk_reent+0x3a>
 80131b6:	4629      	mov	r1, r5
 80131b8:	4630      	mov	r0, r6
 80131ba:	47c0      	blx	r8
 80131bc:	4307      	orrs	r7, r0
 80131be:	3568      	adds	r5, #104	; 0x68
 80131c0:	e7e9      	b.n	8013196 <_fwalk_reent+0x12>
	...

080131c4 <_localeconv_r>:
 80131c4:	4800      	ldr	r0, [pc, #0]	; (80131c8 <_localeconv_r+0x4>)
 80131c6:	4770      	bx	lr
 80131c8:	2400038c 	.word	0x2400038c

080131cc <__retarget_lock_init_recursive>:
 80131cc:	4770      	bx	lr

080131ce <__retarget_lock_acquire_recursive>:
 80131ce:	4770      	bx	lr

080131d0 <__retarget_lock_release_recursive>:
 80131d0:	4770      	bx	lr

080131d2 <__swhatbuf_r>:
 80131d2:	b570      	push	{r4, r5, r6, lr}
 80131d4:	460e      	mov	r6, r1
 80131d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131da:	2900      	cmp	r1, #0
 80131dc:	b096      	sub	sp, #88	; 0x58
 80131de:	4614      	mov	r4, r2
 80131e0:	461d      	mov	r5, r3
 80131e2:	da08      	bge.n	80131f6 <__swhatbuf_r+0x24>
 80131e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80131e8:	2200      	movs	r2, #0
 80131ea:	602a      	str	r2, [r5, #0]
 80131ec:	061a      	lsls	r2, r3, #24
 80131ee:	d410      	bmi.n	8013212 <__swhatbuf_r+0x40>
 80131f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131f4:	e00e      	b.n	8013214 <__swhatbuf_r+0x42>
 80131f6:	466a      	mov	r2, sp
 80131f8:	f000 fd86 	bl	8013d08 <_fstat_r>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	dbf1      	blt.n	80131e4 <__swhatbuf_r+0x12>
 8013200:	9a01      	ldr	r2, [sp, #4]
 8013202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801320a:	425a      	negs	r2, r3
 801320c:	415a      	adcs	r2, r3
 801320e:	602a      	str	r2, [r5, #0]
 8013210:	e7ee      	b.n	80131f0 <__swhatbuf_r+0x1e>
 8013212:	2340      	movs	r3, #64	; 0x40
 8013214:	2000      	movs	r0, #0
 8013216:	6023      	str	r3, [r4, #0]
 8013218:	b016      	add	sp, #88	; 0x58
 801321a:	bd70      	pop	{r4, r5, r6, pc}

0801321c <__smakebuf_r>:
 801321c:	898b      	ldrh	r3, [r1, #12]
 801321e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013220:	079d      	lsls	r5, r3, #30
 8013222:	4606      	mov	r6, r0
 8013224:	460c      	mov	r4, r1
 8013226:	d507      	bpl.n	8013238 <__smakebuf_r+0x1c>
 8013228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801322c:	6023      	str	r3, [r4, #0]
 801322e:	6123      	str	r3, [r4, #16]
 8013230:	2301      	movs	r3, #1
 8013232:	6163      	str	r3, [r4, #20]
 8013234:	b002      	add	sp, #8
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	ab01      	add	r3, sp, #4
 801323a:	466a      	mov	r2, sp
 801323c:	f7ff ffc9 	bl	80131d2 <__swhatbuf_r>
 8013240:	9900      	ldr	r1, [sp, #0]
 8013242:	4605      	mov	r5, r0
 8013244:	4630      	mov	r0, r6
 8013246:	f000 fc45 	bl	8013ad4 <_malloc_r>
 801324a:	b948      	cbnz	r0, 8013260 <__smakebuf_r+0x44>
 801324c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013250:	059a      	lsls	r2, r3, #22
 8013252:	d4ef      	bmi.n	8013234 <__smakebuf_r+0x18>
 8013254:	f023 0303 	bic.w	r3, r3, #3
 8013258:	f043 0302 	orr.w	r3, r3, #2
 801325c:	81a3      	strh	r3, [r4, #12]
 801325e:	e7e3      	b.n	8013228 <__smakebuf_r+0xc>
 8013260:	4b0d      	ldr	r3, [pc, #52]	; (8013298 <__smakebuf_r+0x7c>)
 8013262:	62b3      	str	r3, [r6, #40]	; 0x28
 8013264:	89a3      	ldrh	r3, [r4, #12]
 8013266:	6020      	str	r0, [r4, #0]
 8013268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801326c:	81a3      	strh	r3, [r4, #12]
 801326e:	9b00      	ldr	r3, [sp, #0]
 8013270:	6163      	str	r3, [r4, #20]
 8013272:	9b01      	ldr	r3, [sp, #4]
 8013274:	6120      	str	r0, [r4, #16]
 8013276:	b15b      	cbz	r3, 8013290 <__smakebuf_r+0x74>
 8013278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801327c:	4630      	mov	r0, r6
 801327e:	f000 fd55 	bl	8013d2c <_isatty_r>
 8013282:	b128      	cbz	r0, 8013290 <__smakebuf_r+0x74>
 8013284:	89a3      	ldrh	r3, [r4, #12]
 8013286:	f023 0303 	bic.w	r3, r3, #3
 801328a:	f043 0301 	orr.w	r3, r3, #1
 801328e:	81a3      	strh	r3, [r4, #12]
 8013290:	89a0      	ldrh	r0, [r4, #12]
 8013292:	4305      	orrs	r5, r0
 8013294:	81a5      	strh	r5, [r4, #12]
 8013296:	e7cd      	b.n	8013234 <__smakebuf_r+0x18>
 8013298:	08013021 	.word	0x08013021

0801329c <malloc>:
 801329c:	4b02      	ldr	r3, [pc, #8]	; (80132a8 <malloc+0xc>)
 801329e:	4601      	mov	r1, r0
 80132a0:	6818      	ldr	r0, [r3, #0]
 80132a2:	f000 bc17 	b.w	8013ad4 <_malloc_r>
 80132a6:	bf00      	nop
 80132a8:	24000238 	.word	0x24000238

080132ac <memcpy>:
 80132ac:	440a      	add	r2, r1
 80132ae:	4291      	cmp	r1, r2
 80132b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80132b4:	d100      	bne.n	80132b8 <memcpy+0xc>
 80132b6:	4770      	bx	lr
 80132b8:	b510      	push	{r4, lr}
 80132ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132c2:	4291      	cmp	r1, r2
 80132c4:	d1f9      	bne.n	80132ba <memcpy+0xe>
 80132c6:	bd10      	pop	{r4, pc}

080132c8 <_Balloc>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132cc:	4604      	mov	r4, r0
 80132ce:	460d      	mov	r5, r1
 80132d0:	b976      	cbnz	r6, 80132f0 <_Balloc+0x28>
 80132d2:	2010      	movs	r0, #16
 80132d4:	f7ff ffe2 	bl	801329c <malloc>
 80132d8:	4602      	mov	r2, r0
 80132da:	6260      	str	r0, [r4, #36]	; 0x24
 80132dc:	b920      	cbnz	r0, 80132e8 <_Balloc+0x20>
 80132de:	4b18      	ldr	r3, [pc, #96]	; (8013340 <_Balloc+0x78>)
 80132e0:	4818      	ldr	r0, [pc, #96]	; (8013344 <_Balloc+0x7c>)
 80132e2:	2166      	movs	r1, #102	; 0x66
 80132e4:	f000 fcd0 	bl	8013c88 <__assert_func>
 80132e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132ec:	6006      	str	r6, [r0, #0]
 80132ee:	60c6      	str	r6, [r0, #12]
 80132f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132f2:	68f3      	ldr	r3, [r6, #12]
 80132f4:	b183      	cbz	r3, 8013318 <_Balloc+0x50>
 80132f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132fe:	b9b8      	cbnz	r0, 8013330 <_Balloc+0x68>
 8013300:	2101      	movs	r1, #1
 8013302:	fa01 f605 	lsl.w	r6, r1, r5
 8013306:	1d72      	adds	r2, r6, #5
 8013308:	0092      	lsls	r2, r2, #2
 801330a:	4620      	mov	r0, r4
 801330c:	f000 fb60 	bl	80139d0 <_calloc_r>
 8013310:	b160      	cbz	r0, 801332c <_Balloc+0x64>
 8013312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013316:	e00e      	b.n	8013336 <_Balloc+0x6e>
 8013318:	2221      	movs	r2, #33	; 0x21
 801331a:	2104      	movs	r1, #4
 801331c:	4620      	mov	r0, r4
 801331e:	f000 fb57 	bl	80139d0 <_calloc_r>
 8013322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013324:	60f0      	str	r0, [r6, #12]
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d1e4      	bne.n	80132f6 <_Balloc+0x2e>
 801332c:	2000      	movs	r0, #0
 801332e:	bd70      	pop	{r4, r5, r6, pc}
 8013330:	6802      	ldr	r2, [r0, #0]
 8013332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013336:	2300      	movs	r3, #0
 8013338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801333c:	e7f7      	b.n	801332e <_Balloc+0x66>
 801333e:	bf00      	nop
 8013340:	08015cf5 	.word	0x08015cf5
 8013344:	08015dd8 	.word	0x08015dd8

08013348 <_Bfree>:
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801334c:	4605      	mov	r5, r0
 801334e:	460c      	mov	r4, r1
 8013350:	b976      	cbnz	r6, 8013370 <_Bfree+0x28>
 8013352:	2010      	movs	r0, #16
 8013354:	f7ff ffa2 	bl	801329c <malloc>
 8013358:	4602      	mov	r2, r0
 801335a:	6268      	str	r0, [r5, #36]	; 0x24
 801335c:	b920      	cbnz	r0, 8013368 <_Bfree+0x20>
 801335e:	4b09      	ldr	r3, [pc, #36]	; (8013384 <_Bfree+0x3c>)
 8013360:	4809      	ldr	r0, [pc, #36]	; (8013388 <_Bfree+0x40>)
 8013362:	218a      	movs	r1, #138	; 0x8a
 8013364:	f000 fc90 	bl	8013c88 <__assert_func>
 8013368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801336c:	6006      	str	r6, [r0, #0]
 801336e:	60c6      	str	r6, [r0, #12]
 8013370:	b13c      	cbz	r4, 8013382 <_Bfree+0x3a>
 8013372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013374:	6862      	ldr	r2, [r4, #4]
 8013376:	68db      	ldr	r3, [r3, #12]
 8013378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801337c:	6021      	str	r1, [r4, #0]
 801337e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013382:	bd70      	pop	{r4, r5, r6, pc}
 8013384:	08015cf5 	.word	0x08015cf5
 8013388:	08015dd8 	.word	0x08015dd8

0801338c <__multadd>:
 801338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013390:	690d      	ldr	r5, [r1, #16]
 8013392:	4607      	mov	r7, r0
 8013394:	460c      	mov	r4, r1
 8013396:	461e      	mov	r6, r3
 8013398:	f101 0c14 	add.w	ip, r1, #20
 801339c:	2000      	movs	r0, #0
 801339e:	f8dc 3000 	ldr.w	r3, [ip]
 80133a2:	b299      	uxth	r1, r3
 80133a4:	fb02 6101 	mla	r1, r2, r1, r6
 80133a8:	0c1e      	lsrs	r6, r3, #16
 80133aa:	0c0b      	lsrs	r3, r1, #16
 80133ac:	fb02 3306 	mla	r3, r2, r6, r3
 80133b0:	b289      	uxth	r1, r1
 80133b2:	3001      	adds	r0, #1
 80133b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80133b8:	4285      	cmp	r5, r0
 80133ba:	f84c 1b04 	str.w	r1, [ip], #4
 80133be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80133c2:	dcec      	bgt.n	801339e <__multadd+0x12>
 80133c4:	b30e      	cbz	r6, 801340a <__multadd+0x7e>
 80133c6:	68a3      	ldr	r3, [r4, #8]
 80133c8:	42ab      	cmp	r3, r5
 80133ca:	dc19      	bgt.n	8013400 <__multadd+0x74>
 80133cc:	6861      	ldr	r1, [r4, #4]
 80133ce:	4638      	mov	r0, r7
 80133d0:	3101      	adds	r1, #1
 80133d2:	f7ff ff79 	bl	80132c8 <_Balloc>
 80133d6:	4680      	mov	r8, r0
 80133d8:	b928      	cbnz	r0, 80133e6 <__multadd+0x5a>
 80133da:	4602      	mov	r2, r0
 80133dc:	4b0c      	ldr	r3, [pc, #48]	; (8013410 <__multadd+0x84>)
 80133de:	480d      	ldr	r0, [pc, #52]	; (8013414 <__multadd+0x88>)
 80133e0:	21b5      	movs	r1, #181	; 0xb5
 80133e2:	f000 fc51 	bl	8013c88 <__assert_func>
 80133e6:	6922      	ldr	r2, [r4, #16]
 80133e8:	3202      	adds	r2, #2
 80133ea:	f104 010c 	add.w	r1, r4, #12
 80133ee:	0092      	lsls	r2, r2, #2
 80133f0:	300c      	adds	r0, #12
 80133f2:	f7ff ff5b 	bl	80132ac <memcpy>
 80133f6:	4621      	mov	r1, r4
 80133f8:	4638      	mov	r0, r7
 80133fa:	f7ff ffa5 	bl	8013348 <_Bfree>
 80133fe:	4644      	mov	r4, r8
 8013400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013404:	3501      	adds	r5, #1
 8013406:	615e      	str	r6, [r3, #20]
 8013408:	6125      	str	r5, [r4, #16]
 801340a:	4620      	mov	r0, r4
 801340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013410:	08015d67 	.word	0x08015d67
 8013414:	08015dd8 	.word	0x08015dd8

08013418 <__hi0bits>:
 8013418:	0c03      	lsrs	r3, r0, #16
 801341a:	041b      	lsls	r3, r3, #16
 801341c:	b9d3      	cbnz	r3, 8013454 <__hi0bits+0x3c>
 801341e:	0400      	lsls	r0, r0, #16
 8013420:	2310      	movs	r3, #16
 8013422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013426:	bf04      	itt	eq
 8013428:	0200      	lsleq	r0, r0, #8
 801342a:	3308      	addeq	r3, #8
 801342c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013430:	bf04      	itt	eq
 8013432:	0100      	lsleq	r0, r0, #4
 8013434:	3304      	addeq	r3, #4
 8013436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801343a:	bf04      	itt	eq
 801343c:	0080      	lsleq	r0, r0, #2
 801343e:	3302      	addeq	r3, #2
 8013440:	2800      	cmp	r0, #0
 8013442:	db05      	blt.n	8013450 <__hi0bits+0x38>
 8013444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013448:	f103 0301 	add.w	r3, r3, #1
 801344c:	bf08      	it	eq
 801344e:	2320      	moveq	r3, #32
 8013450:	4618      	mov	r0, r3
 8013452:	4770      	bx	lr
 8013454:	2300      	movs	r3, #0
 8013456:	e7e4      	b.n	8013422 <__hi0bits+0xa>

08013458 <__lo0bits>:
 8013458:	6803      	ldr	r3, [r0, #0]
 801345a:	f013 0207 	ands.w	r2, r3, #7
 801345e:	4601      	mov	r1, r0
 8013460:	d00b      	beq.n	801347a <__lo0bits+0x22>
 8013462:	07da      	lsls	r2, r3, #31
 8013464:	d423      	bmi.n	80134ae <__lo0bits+0x56>
 8013466:	0798      	lsls	r0, r3, #30
 8013468:	bf49      	itett	mi
 801346a:	085b      	lsrmi	r3, r3, #1
 801346c:	089b      	lsrpl	r3, r3, #2
 801346e:	2001      	movmi	r0, #1
 8013470:	600b      	strmi	r3, [r1, #0]
 8013472:	bf5c      	itt	pl
 8013474:	600b      	strpl	r3, [r1, #0]
 8013476:	2002      	movpl	r0, #2
 8013478:	4770      	bx	lr
 801347a:	b298      	uxth	r0, r3
 801347c:	b9a8      	cbnz	r0, 80134aa <__lo0bits+0x52>
 801347e:	0c1b      	lsrs	r3, r3, #16
 8013480:	2010      	movs	r0, #16
 8013482:	b2da      	uxtb	r2, r3
 8013484:	b90a      	cbnz	r2, 801348a <__lo0bits+0x32>
 8013486:	3008      	adds	r0, #8
 8013488:	0a1b      	lsrs	r3, r3, #8
 801348a:	071a      	lsls	r2, r3, #28
 801348c:	bf04      	itt	eq
 801348e:	091b      	lsreq	r3, r3, #4
 8013490:	3004      	addeq	r0, #4
 8013492:	079a      	lsls	r2, r3, #30
 8013494:	bf04      	itt	eq
 8013496:	089b      	lsreq	r3, r3, #2
 8013498:	3002      	addeq	r0, #2
 801349a:	07da      	lsls	r2, r3, #31
 801349c:	d403      	bmi.n	80134a6 <__lo0bits+0x4e>
 801349e:	085b      	lsrs	r3, r3, #1
 80134a0:	f100 0001 	add.w	r0, r0, #1
 80134a4:	d005      	beq.n	80134b2 <__lo0bits+0x5a>
 80134a6:	600b      	str	r3, [r1, #0]
 80134a8:	4770      	bx	lr
 80134aa:	4610      	mov	r0, r2
 80134ac:	e7e9      	b.n	8013482 <__lo0bits+0x2a>
 80134ae:	2000      	movs	r0, #0
 80134b0:	4770      	bx	lr
 80134b2:	2020      	movs	r0, #32
 80134b4:	4770      	bx	lr
	...

080134b8 <__i2b>:
 80134b8:	b510      	push	{r4, lr}
 80134ba:	460c      	mov	r4, r1
 80134bc:	2101      	movs	r1, #1
 80134be:	f7ff ff03 	bl	80132c8 <_Balloc>
 80134c2:	4602      	mov	r2, r0
 80134c4:	b928      	cbnz	r0, 80134d2 <__i2b+0x1a>
 80134c6:	4b05      	ldr	r3, [pc, #20]	; (80134dc <__i2b+0x24>)
 80134c8:	4805      	ldr	r0, [pc, #20]	; (80134e0 <__i2b+0x28>)
 80134ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80134ce:	f000 fbdb 	bl	8013c88 <__assert_func>
 80134d2:	2301      	movs	r3, #1
 80134d4:	6144      	str	r4, [r0, #20]
 80134d6:	6103      	str	r3, [r0, #16]
 80134d8:	bd10      	pop	{r4, pc}
 80134da:	bf00      	nop
 80134dc:	08015d67 	.word	0x08015d67
 80134e0:	08015dd8 	.word	0x08015dd8

080134e4 <__multiply>:
 80134e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e8:	4691      	mov	r9, r2
 80134ea:	690a      	ldr	r2, [r1, #16]
 80134ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134f0:	429a      	cmp	r2, r3
 80134f2:	bfb8      	it	lt
 80134f4:	460b      	movlt	r3, r1
 80134f6:	460c      	mov	r4, r1
 80134f8:	bfbc      	itt	lt
 80134fa:	464c      	movlt	r4, r9
 80134fc:	4699      	movlt	r9, r3
 80134fe:	6927      	ldr	r7, [r4, #16]
 8013500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013504:	68a3      	ldr	r3, [r4, #8]
 8013506:	6861      	ldr	r1, [r4, #4]
 8013508:	eb07 060a 	add.w	r6, r7, sl
 801350c:	42b3      	cmp	r3, r6
 801350e:	b085      	sub	sp, #20
 8013510:	bfb8      	it	lt
 8013512:	3101      	addlt	r1, #1
 8013514:	f7ff fed8 	bl	80132c8 <_Balloc>
 8013518:	b930      	cbnz	r0, 8013528 <__multiply+0x44>
 801351a:	4602      	mov	r2, r0
 801351c:	4b44      	ldr	r3, [pc, #272]	; (8013630 <__multiply+0x14c>)
 801351e:	4845      	ldr	r0, [pc, #276]	; (8013634 <__multiply+0x150>)
 8013520:	f240 115d 	movw	r1, #349	; 0x15d
 8013524:	f000 fbb0 	bl	8013c88 <__assert_func>
 8013528:	f100 0514 	add.w	r5, r0, #20
 801352c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013530:	462b      	mov	r3, r5
 8013532:	2200      	movs	r2, #0
 8013534:	4543      	cmp	r3, r8
 8013536:	d321      	bcc.n	801357c <__multiply+0x98>
 8013538:	f104 0314 	add.w	r3, r4, #20
 801353c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013540:	f109 0314 	add.w	r3, r9, #20
 8013544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013548:	9202      	str	r2, [sp, #8]
 801354a:	1b3a      	subs	r2, r7, r4
 801354c:	3a15      	subs	r2, #21
 801354e:	f022 0203 	bic.w	r2, r2, #3
 8013552:	3204      	adds	r2, #4
 8013554:	f104 0115 	add.w	r1, r4, #21
 8013558:	428f      	cmp	r7, r1
 801355a:	bf38      	it	cc
 801355c:	2204      	movcc	r2, #4
 801355e:	9201      	str	r2, [sp, #4]
 8013560:	9a02      	ldr	r2, [sp, #8]
 8013562:	9303      	str	r3, [sp, #12]
 8013564:	429a      	cmp	r2, r3
 8013566:	d80c      	bhi.n	8013582 <__multiply+0x9e>
 8013568:	2e00      	cmp	r6, #0
 801356a:	dd03      	ble.n	8013574 <__multiply+0x90>
 801356c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013570:	2b00      	cmp	r3, #0
 8013572:	d05a      	beq.n	801362a <__multiply+0x146>
 8013574:	6106      	str	r6, [r0, #16]
 8013576:	b005      	add	sp, #20
 8013578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357c:	f843 2b04 	str.w	r2, [r3], #4
 8013580:	e7d8      	b.n	8013534 <__multiply+0x50>
 8013582:	f8b3 a000 	ldrh.w	sl, [r3]
 8013586:	f1ba 0f00 	cmp.w	sl, #0
 801358a:	d024      	beq.n	80135d6 <__multiply+0xf2>
 801358c:	f104 0e14 	add.w	lr, r4, #20
 8013590:	46a9      	mov	r9, r5
 8013592:	f04f 0c00 	mov.w	ip, #0
 8013596:	f85e 2b04 	ldr.w	r2, [lr], #4
 801359a:	f8d9 1000 	ldr.w	r1, [r9]
 801359e:	fa1f fb82 	uxth.w	fp, r2
 80135a2:	b289      	uxth	r1, r1
 80135a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80135a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80135ac:	f8d9 2000 	ldr.w	r2, [r9]
 80135b0:	4461      	add	r1, ip
 80135b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80135ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80135be:	b289      	uxth	r1, r1
 80135c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80135c4:	4577      	cmp	r7, lr
 80135c6:	f849 1b04 	str.w	r1, [r9], #4
 80135ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135ce:	d8e2      	bhi.n	8013596 <__multiply+0xb2>
 80135d0:	9a01      	ldr	r2, [sp, #4]
 80135d2:	f845 c002 	str.w	ip, [r5, r2]
 80135d6:	9a03      	ldr	r2, [sp, #12]
 80135d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80135dc:	3304      	adds	r3, #4
 80135de:	f1b9 0f00 	cmp.w	r9, #0
 80135e2:	d020      	beq.n	8013626 <__multiply+0x142>
 80135e4:	6829      	ldr	r1, [r5, #0]
 80135e6:	f104 0c14 	add.w	ip, r4, #20
 80135ea:	46ae      	mov	lr, r5
 80135ec:	f04f 0a00 	mov.w	sl, #0
 80135f0:	f8bc b000 	ldrh.w	fp, [ip]
 80135f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80135f8:	fb09 220b 	mla	r2, r9, fp, r2
 80135fc:	4492      	add	sl, r2
 80135fe:	b289      	uxth	r1, r1
 8013600:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013604:	f84e 1b04 	str.w	r1, [lr], #4
 8013608:	f85c 2b04 	ldr.w	r2, [ip], #4
 801360c:	f8be 1000 	ldrh.w	r1, [lr]
 8013610:	0c12      	lsrs	r2, r2, #16
 8013612:	fb09 1102 	mla	r1, r9, r2, r1
 8013616:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801361a:	4567      	cmp	r7, ip
 801361c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013620:	d8e6      	bhi.n	80135f0 <__multiply+0x10c>
 8013622:	9a01      	ldr	r2, [sp, #4]
 8013624:	50a9      	str	r1, [r5, r2]
 8013626:	3504      	adds	r5, #4
 8013628:	e79a      	b.n	8013560 <__multiply+0x7c>
 801362a:	3e01      	subs	r6, #1
 801362c:	e79c      	b.n	8013568 <__multiply+0x84>
 801362e:	bf00      	nop
 8013630:	08015d67 	.word	0x08015d67
 8013634:	08015dd8 	.word	0x08015dd8

08013638 <__pow5mult>:
 8013638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801363c:	4615      	mov	r5, r2
 801363e:	f012 0203 	ands.w	r2, r2, #3
 8013642:	4606      	mov	r6, r0
 8013644:	460f      	mov	r7, r1
 8013646:	d007      	beq.n	8013658 <__pow5mult+0x20>
 8013648:	4c25      	ldr	r4, [pc, #148]	; (80136e0 <__pow5mult+0xa8>)
 801364a:	3a01      	subs	r2, #1
 801364c:	2300      	movs	r3, #0
 801364e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013652:	f7ff fe9b 	bl	801338c <__multadd>
 8013656:	4607      	mov	r7, r0
 8013658:	10ad      	asrs	r5, r5, #2
 801365a:	d03d      	beq.n	80136d8 <__pow5mult+0xa0>
 801365c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801365e:	b97c      	cbnz	r4, 8013680 <__pow5mult+0x48>
 8013660:	2010      	movs	r0, #16
 8013662:	f7ff fe1b 	bl	801329c <malloc>
 8013666:	4602      	mov	r2, r0
 8013668:	6270      	str	r0, [r6, #36]	; 0x24
 801366a:	b928      	cbnz	r0, 8013678 <__pow5mult+0x40>
 801366c:	4b1d      	ldr	r3, [pc, #116]	; (80136e4 <__pow5mult+0xac>)
 801366e:	481e      	ldr	r0, [pc, #120]	; (80136e8 <__pow5mult+0xb0>)
 8013670:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013674:	f000 fb08 	bl	8013c88 <__assert_func>
 8013678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801367c:	6004      	str	r4, [r0, #0]
 801367e:	60c4      	str	r4, [r0, #12]
 8013680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013688:	b94c      	cbnz	r4, 801369e <__pow5mult+0x66>
 801368a:	f240 2171 	movw	r1, #625	; 0x271
 801368e:	4630      	mov	r0, r6
 8013690:	f7ff ff12 	bl	80134b8 <__i2b>
 8013694:	2300      	movs	r3, #0
 8013696:	f8c8 0008 	str.w	r0, [r8, #8]
 801369a:	4604      	mov	r4, r0
 801369c:	6003      	str	r3, [r0, #0]
 801369e:	f04f 0900 	mov.w	r9, #0
 80136a2:	07eb      	lsls	r3, r5, #31
 80136a4:	d50a      	bpl.n	80136bc <__pow5mult+0x84>
 80136a6:	4639      	mov	r1, r7
 80136a8:	4622      	mov	r2, r4
 80136aa:	4630      	mov	r0, r6
 80136ac:	f7ff ff1a 	bl	80134e4 <__multiply>
 80136b0:	4639      	mov	r1, r7
 80136b2:	4680      	mov	r8, r0
 80136b4:	4630      	mov	r0, r6
 80136b6:	f7ff fe47 	bl	8013348 <_Bfree>
 80136ba:	4647      	mov	r7, r8
 80136bc:	106d      	asrs	r5, r5, #1
 80136be:	d00b      	beq.n	80136d8 <__pow5mult+0xa0>
 80136c0:	6820      	ldr	r0, [r4, #0]
 80136c2:	b938      	cbnz	r0, 80136d4 <__pow5mult+0x9c>
 80136c4:	4622      	mov	r2, r4
 80136c6:	4621      	mov	r1, r4
 80136c8:	4630      	mov	r0, r6
 80136ca:	f7ff ff0b 	bl	80134e4 <__multiply>
 80136ce:	6020      	str	r0, [r4, #0]
 80136d0:	f8c0 9000 	str.w	r9, [r0]
 80136d4:	4604      	mov	r4, r0
 80136d6:	e7e4      	b.n	80136a2 <__pow5mult+0x6a>
 80136d8:	4638      	mov	r0, r7
 80136da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136de:	bf00      	nop
 80136e0:	08015f28 	.word	0x08015f28
 80136e4:	08015cf5 	.word	0x08015cf5
 80136e8:	08015dd8 	.word	0x08015dd8

080136ec <__lshift>:
 80136ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136f0:	460c      	mov	r4, r1
 80136f2:	6849      	ldr	r1, [r1, #4]
 80136f4:	6923      	ldr	r3, [r4, #16]
 80136f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136fa:	68a3      	ldr	r3, [r4, #8]
 80136fc:	4607      	mov	r7, r0
 80136fe:	4691      	mov	r9, r2
 8013700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013704:	f108 0601 	add.w	r6, r8, #1
 8013708:	42b3      	cmp	r3, r6
 801370a:	db0b      	blt.n	8013724 <__lshift+0x38>
 801370c:	4638      	mov	r0, r7
 801370e:	f7ff fddb 	bl	80132c8 <_Balloc>
 8013712:	4605      	mov	r5, r0
 8013714:	b948      	cbnz	r0, 801372a <__lshift+0x3e>
 8013716:	4602      	mov	r2, r0
 8013718:	4b2a      	ldr	r3, [pc, #168]	; (80137c4 <__lshift+0xd8>)
 801371a:	482b      	ldr	r0, [pc, #172]	; (80137c8 <__lshift+0xdc>)
 801371c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013720:	f000 fab2 	bl	8013c88 <__assert_func>
 8013724:	3101      	adds	r1, #1
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	e7ee      	b.n	8013708 <__lshift+0x1c>
 801372a:	2300      	movs	r3, #0
 801372c:	f100 0114 	add.w	r1, r0, #20
 8013730:	f100 0210 	add.w	r2, r0, #16
 8013734:	4618      	mov	r0, r3
 8013736:	4553      	cmp	r3, sl
 8013738:	db37      	blt.n	80137aa <__lshift+0xbe>
 801373a:	6920      	ldr	r0, [r4, #16]
 801373c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013740:	f104 0314 	add.w	r3, r4, #20
 8013744:	f019 091f 	ands.w	r9, r9, #31
 8013748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801374c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013750:	d02f      	beq.n	80137b2 <__lshift+0xc6>
 8013752:	f1c9 0e20 	rsb	lr, r9, #32
 8013756:	468a      	mov	sl, r1
 8013758:	f04f 0c00 	mov.w	ip, #0
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	fa02 f209 	lsl.w	r2, r2, r9
 8013762:	ea42 020c 	orr.w	r2, r2, ip
 8013766:	f84a 2b04 	str.w	r2, [sl], #4
 801376a:	f853 2b04 	ldr.w	r2, [r3], #4
 801376e:	4298      	cmp	r0, r3
 8013770:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013774:	d8f2      	bhi.n	801375c <__lshift+0x70>
 8013776:	1b03      	subs	r3, r0, r4
 8013778:	3b15      	subs	r3, #21
 801377a:	f023 0303 	bic.w	r3, r3, #3
 801377e:	3304      	adds	r3, #4
 8013780:	f104 0215 	add.w	r2, r4, #21
 8013784:	4290      	cmp	r0, r2
 8013786:	bf38      	it	cc
 8013788:	2304      	movcc	r3, #4
 801378a:	f841 c003 	str.w	ip, [r1, r3]
 801378e:	f1bc 0f00 	cmp.w	ip, #0
 8013792:	d001      	beq.n	8013798 <__lshift+0xac>
 8013794:	f108 0602 	add.w	r6, r8, #2
 8013798:	3e01      	subs	r6, #1
 801379a:	4638      	mov	r0, r7
 801379c:	612e      	str	r6, [r5, #16]
 801379e:	4621      	mov	r1, r4
 80137a0:	f7ff fdd2 	bl	8013348 <_Bfree>
 80137a4:	4628      	mov	r0, r5
 80137a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80137ae:	3301      	adds	r3, #1
 80137b0:	e7c1      	b.n	8013736 <__lshift+0x4a>
 80137b2:	3904      	subs	r1, #4
 80137b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80137b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80137bc:	4298      	cmp	r0, r3
 80137be:	d8f9      	bhi.n	80137b4 <__lshift+0xc8>
 80137c0:	e7ea      	b.n	8013798 <__lshift+0xac>
 80137c2:	bf00      	nop
 80137c4:	08015d67 	.word	0x08015d67
 80137c8:	08015dd8 	.word	0x08015dd8

080137cc <__mcmp>:
 80137cc:	b530      	push	{r4, r5, lr}
 80137ce:	6902      	ldr	r2, [r0, #16]
 80137d0:	690c      	ldr	r4, [r1, #16]
 80137d2:	1b12      	subs	r2, r2, r4
 80137d4:	d10e      	bne.n	80137f4 <__mcmp+0x28>
 80137d6:	f100 0314 	add.w	r3, r0, #20
 80137da:	3114      	adds	r1, #20
 80137dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80137e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80137e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80137e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80137ec:	42a5      	cmp	r5, r4
 80137ee:	d003      	beq.n	80137f8 <__mcmp+0x2c>
 80137f0:	d305      	bcc.n	80137fe <__mcmp+0x32>
 80137f2:	2201      	movs	r2, #1
 80137f4:	4610      	mov	r0, r2
 80137f6:	bd30      	pop	{r4, r5, pc}
 80137f8:	4283      	cmp	r3, r0
 80137fa:	d3f3      	bcc.n	80137e4 <__mcmp+0x18>
 80137fc:	e7fa      	b.n	80137f4 <__mcmp+0x28>
 80137fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013802:	e7f7      	b.n	80137f4 <__mcmp+0x28>

08013804 <__mdiff>:
 8013804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013808:	460c      	mov	r4, r1
 801380a:	4606      	mov	r6, r0
 801380c:	4611      	mov	r1, r2
 801380e:	4620      	mov	r0, r4
 8013810:	4690      	mov	r8, r2
 8013812:	f7ff ffdb 	bl	80137cc <__mcmp>
 8013816:	1e05      	subs	r5, r0, #0
 8013818:	d110      	bne.n	801383c <__mdiff+0x38>
 801381a:	4629      	mov	r1, r5
 801381c:	4630      	mov	r0, r6
 801381e:	f7ff fd53 	bl	80132c8 <_Balloc>
 8013822:	b930      	cbnz	r0, 8013832 <__mdiff+0x2e>
 8013824:	4b3a      	ldr	r3, [pc, #232]	; (8013910 <__mdiff+0x10c>)
 8013826:	4602      	mov	r2, r0
 8013828:	f240 2132 	movw	r1, #562	; 0x232
 801382c:	4839      	ldr	r0, [pc, #228]	; (8013914 <__mdiff+0x110>)
 801382e:	f000 fa2b 	bl	8013c88 <__assert_func>
 8013832:	2301      	movs	r3, #1
 8013834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801383c:	bfa4      	itt	ge
 801383e:	4643      	movge	r3, r8
 8013840:	46a0      	movge	r8, r4
 8013842:	4630      	mov	r0, r6
 8013844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013848:	bfa6      	itte	ge
 801384a:	461c      	movge	r4, r3
 801384c:	2500      	movge	r5, #0
 801384e:	2501      	movlt	r5, #1
 8013850:	f7ff fd3a 	bl	80132c8 <_Balloc>
 8013854:	b920      	cbnz	r0, 8013860 <__mdiff+0x5c>
 8013856:	4b2e      	ldr	r3, [pc, #184]	; (8013910 <__mdiff+0x10c>)
 8013858:	4602      	mov	r2, r0
 801385a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801385e:	e7e5      	b.n	801382c <__mdiff+0x28>
 8013860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013864:	6926      	ldr	r6, [r4, #16]
 8013866:	60c5      	str	r5, [r0, #12]
 8013868:	f104 0914 	add.w	r9, r4, #20
 801386c:	f108 0514 	add.w	r5, r8, #20
 8013870:	f100 0e14 	add.w	lr, r0, #20
 8013874:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013878:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801387c:	f108 0210 	add.w	r2, r8, #16
 8013880:	46f2      	mov	sl, lr
 8013882:	2100      	movs	r1, #0
 8013884:	f859 3b04 	ldr.w	r3, [r9], #4
 8013888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801388c:	fa1f f883 	uxth.w	r8, r3
 8013890:	fa11 f18b 	uxtah	r1, r1, fp
 8013894:	0c1b      	lsrs	r3, r3, #16
 8013896:	eba1 0808 	sub.w	r8, r1, r8
 801389a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801389e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138a2:	fa1f f888 	uxth.w	r8, r8
 80138a6:	1419      	asrs	r1, r3, #16
 80138a8:	454e      	cmp	r6, r9
 80138aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138ae:	f84a 3b04 	str.w	r3, [sl], #4
 80138b2:	d8e7      	bhi.n	8013884 <__mdiff+0x80>
 80138b4:	1b33      	subs	r3, r6, r4
 80138b6:	3b15      	subs	r3, #21
 80138b8:	f023 0303 	bic.w	r3, r3, #3
 80138bc:	3304      	adds	r3, #4
 80138be:	3415      	adds	r4, #21
 80138c0:	42a6      	cmp	r6, r4
 80138c2:	bf38      	it	cc
 80138c4:	2304      	movcc	r3, #4
 80138c6:	441d      	add	r5, r3
 80138c8:	4473      	add	r3, lr
 80138ca:	469e      	mov	lr, r3
 80138cc:	462e      	mov	r6, r5
 80138ce:	4566      	cmp	r6, ip
 80138d0:	d30e      	bcc.n	80138f0 <__mdiff+0xec>
 80138d2:	f10c 0203 	add.w	r2, ip, #3
 80138d6:	1b52      	subs	r2, r2, r5
 80138d8:	f022 0203 	bic.w	r2, r2, #3
 80138dc:	3d03      	subs	r5, #3
 80138de:	45ac      	cmp	ip, r5
 80138e0:	bf38      	it	cc
 80138e2:	2200      	movcc	r2, #0
 80138e4:	441a      	add	r2, r3
 80138e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80138ea:	b17b      	cbz	r3, 801390c <__mdiff+0x108>
 80138ec:	6107      	str	r7, [r0, #16]
 80138ee:	e7a3      	b.n	8013838 <__mdiff+0x34>
 80138f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80138f4:	fa11 f288 	uxtah	r2, r1, r8
 80138f8:	1414      	asrs	r4, r2, #16
 80138fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80138fe:	b292      	uxth	r2, r2
 8013900:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013904:	f84e 2b04 	str.w	r2, [lr], #4
 8013908:	1421      	asrs	r1, r4, #16
 801390a:	e7e0      	b.n	80138ce <__mdiff+0xca>
 801390c:	3f01      	subs	r7, #1
 801390e:	e7ea      	b.n	80138e6 <__mdiff+0xe2>
 8013910:	08015d67 	.word	0x08015d67
 8013914:	08015dd8 	.word	0x08015dd8

08013918 <__d2b>:
 8013918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801391c:	4689      	mov	r9, r1
 801391e:	2101      	movs	r1, #1
 8013920:	ec57 6b10 	vmov	r6, r7, d0
 8013924:	4690      	mov	r8, r2
 8013926:	f7ff fccf 	bl	80132c8 <_Balloc>
 801392a:	4604      	mov	r4, r0
 801392c:	b930      	cbnz	r0, 801393c <__d2b+0x24>
 801392e:	4602      	mov	r2, r0
 8013930:	4b25      	ldr	r3, [pc, #148]	; (80139c8 <__d2b+0xb0>)
 8013932:	4826      	ldr	r0, [pc, #152]	; (80139cc <__d2b+0xb4>)
 8013934:	f240 310a 	movw	r1, #778	; 0x30a
 8013938:	f000 f9a6 	bl	8013c88 <__assert_func>
 801393c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013944:	bb35      	cbnz	r5, 8013994 <__d2b+0x7c>
 8013946:	2e00      	cmp	r6, #0
 8013948:	9301      	str	r3, [sp, #4]
 801394a:	d028      	beq.n	801399e <__d2b+0x86>
 801394c:	4668      	mov	r0, sp
 801394e:	9600      	str	r6, [sp, #0]
 8013950:	f7ff fd82 	bl	8013458 <__lo0bits>
 8013954:	9900      	ldr	r1, [sp, #0]
 8013956:	b300      	cbz	r0, 801399a <__d2b+0x82>
 8013958:	9a01      	ldr	r2, [sp, #4]
 801395a:	f1c0 0320 	rsb	r3, r0, #32
 801395e:	fa02 f303 	lsl.w	r3, r2, r3
 8013962:	430b      	orrs	r3, r1
 8013964:	40c2      	lsrs	r2, r0
 8013966:	6163      	str	r3, [r4, #20]
 8013968:	9201      	str	r2, [sp, #4]
 801396a:	9b01      	ldr	r3, [sp, #4]
 801396c:	61a3      	str	r3, [r4, #24]
 801396e:	2b00      	cmp	r3, #0
 8013970:	bf14      	ite	ne
 8013972:	2202      	movne	r2, #2
 8013974:	2201      	moveq	r2, #1
 8013976:	6122      	str	r2, [r4, #16]
 8013978:	b1d5      	cbz	r5, 80139b0 <__d2b+0x98>
 801397a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801397e:	4405      	add	r5, r0
 8013980:	f8c9 5000 	str.w	r5, [r9]
 8013984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013988:	f8c8 0000 	str.w	r0, [r8]
 801398c:	4620      	mov	r0, r4
 801398e:	b003      	add	sp, #12
 8013990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013998:	e7d5      	b.n	8013946 <__d2b+0x2e>
 801399a:	6161      	str	r1, [r4, #20]
 801399c:	e7e5      	b.n	801396a <__d2b+0x52>
 801399e:	a801      	add	r0, sp, #4
 80139a0:	f7ff fd5a 	bl	8013458 <__lo0bits>
 80139a4:	9b01      	ldr	r3, [sp, #4]
 80139a6:	6163      	str	r3, [r4, #20]
 80139a8:	2201      	movs	r2, #1
 80139aa:	6122      	str	r2, [r4, #16]
 80139ac:	3020      	adds	r0, #32
 80139ae:	e7e3      	b.n	8013978 <__d2b+0x60>
 80139b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80139b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80139b8:	f8c9 0000 	str.w	r0, [r9]
 80139bc:	6918      	ldr	r0, [r3, #16]
 80139be:	f7ff fd2b 	bl	8013418 <__hi0bits>
 80139c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80139c6:	e7df      	b.n	8013988 <__d2b+0x70>
 80139c8:	08015d67 	.word	0x08015d67
 80139cc:	08015dd8 	.word	0x08015dd8

080139d0 <_calloc_r>:
 80139d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139d2:	fba1 2402 	umull	r2, r4, r1, r2
 80139d6:	b94c      	cbnz	r4, 80139ec <_calloc_r+0x1c>
 80139d8:	4611      	mov	r1, r2
 80139da:	9201      	str	r2, [sp, #4]
 80139dc:	f000 f87a 	bl	8013ad4 <_malloc_r>
 80139e0:	9a01      	ldr	r2, [sp, #4]
 80139e2:	4605      	mov	r5, r0
 80139e4:	b930      	cbnz	r0, 80139f4 <_calloc_r+0x24>
 80139e6:	4628      	mov	r0, r5
 80139e8:	b003      	add	sp, #12
 80139ea:	bd30      	pop	{r4, r5, pc}
 80139ec:	220c      	movs	r2, #12
 80139ee:	6002      	str	r2, [r0, #0]
 80139f0:	2500      	movs	r5, #0
 80139f2:	e7f8      	b.n	80139e6 <_calloc_r+0x16>
 80139f4:	4621      	mov	r1, r4
 80139f6:	f7fd feb3 	bl	8011760 <memset>
 80139fa:	e7f4      	b.n	80139e6 <_calloc_r+0x16>

080139fc <_free_r>:
 80139fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139fe:	2900      	cmp	r1, #0
 8013a00:	d044      	beq.n	8013a8c <_free_r+0x90>
 8013a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a06:	9001      	str	r0, [sp, #4]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8013a0e:	bfb8      	it	lt
 8013a10:	18e4      	addlt	r4, r4, r3
 8013a12:	f000 f9bf 	bl	8013d94 <__malloc_lock>
 8013a16:	4a1e      	ldr	r2, [pc, #120]	; (8013a90 <_free_r+0x94>)
 8013a18:	9801      	ldr	r0, [sp, #4]
 8013a1a:	6813      	ldr	r3, [r2, #0]
 8013a1c:	b933      	cbnz	r3, 8013a2c <_free_r+0x30>
 8013a1e:	6063      	str	r3, [r4, #4]
 8013a20:	6014      	str	r4, [r2, #0]
 8013a22:	b003      	add	sp, #12
 8013a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a28:	f000 b9ba 	b.w	8013da0 <__malloc_unlock>
 8013a2c:	42a3      	cmp	r3, r4
 8013a2e:	d908      	bls.n	8013a42 <_free_r+0x46>
 8013a30:	6825      	ldr	r5, [r4, #0]
 8013a32:	1961      	adds	r1, r4, r5
 8013a34:	428b      	cmp	r3, r1
 8013a36:	bf01      	itttt	eq
 8013a38:	6819      	ldreq	r1, [r3, #0]
 8013a3a:	685b      	ldreq	r3, [r3, #4]
 8013a3c:	1949      	addeq	r1, r1, r5
 8013a3e:	6021      	streq	r1, [r4, #0]
 8013a40:	e7ed      	b.n	8013a1e <_free_r+0x22>
 8013a42:	461a      	mov	r2, r3
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	b10b      	cbz	r3, 8013a4c <_free_r+0x50>
 8013a48:	42a3      	cmp	r3, r4
 8013a4a:	d9fa      	bls.n	8013a42 <_free_r+0x46>
 8013a4c:	6811      	ldr	r1, [r2, #0]
 8013a4e:	1855      	adds	r5, r2, r1
 8013a50:	42a5      	cmp	r5, r4
 8013a52:	d10b      	bne.n	8013a6c <_free_r+0x70>
 8013a54:	6824      	ldr	r4, [r4, #0]
 8013a56:	4421      	add	r1, r4
 8013a58:	1854      	adds	r4, r2, r1
 8013a5a:	42a3      	cmp	r3, r4
 8013a5c:	6011      	str	r1, [r2, #0]
 8013a5e:	d1e0      	bne.n	8013a22 <_free_r+0x26>
 8013a60:	681c      	ldr	r4, [r3, #0]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	6053      	str	r3, [r2, #4]
 8013a66:	4421      	add	r1, r4
 8013a68:	6011      	str	r1, [r2, #0]
 8013a6a:	e7da      	b.n	8013a22 <_free_r+0x26>
 8013a6c:	d902      	bls.n	8013a74 <_free_r+0x78>
 8013a6e:	230c      	movs	r3, #12
 8013a70:	6003      	str	r3, [r0, #0]
 8013a72:	e7d6      	b.n	8013a22 <_free_r+0x26>
 8013a74:	6825      	ldr	r5, [r4, #0]
 8013a76:	1961      	adds	r1, r4, r5
 8013a78:	428b      	cmp	r3, r1
 8013a7a:	bf04      	itt	eq
 8013a7c:	6819      	ldreq	r1, [r3, #0]
 8013a7e:	685b      	ldreq	r3, [r3, #4]
 8013a80:	6063      	str	r3, [r4, #4]
 8013a82:	bf04      	itt	eq
 8013a84:	1949      	addeq	r1, r1, r5
 8013a86:	6021      	streq	r1, [r4, #0]
 8013a88:	6054      	str	r4, [r2, #4]
 8013a8a:	e7ca      	b.n	8013a22 <_free_r+0x26>
 8013a8c:	b003      	add	sp, #12
 8013a8e:	bd30      	pop	{r4, r5, pc}
 8013a90:	240015f8 	.word	0x240015f8

08013a94 <sbrk_aligned>:
 8013a94:	b570      	push	{r4, r5, r6, lr}
 8013a96:	4e0e      	ldr	r6, [pc, #56]	; (8013ad0 <sbrk_aligned+0x3c>)
 8013a98:	460c      	mov	r4, r1
 8013a9a:	6831      	ldr	r1, [r6, #0]
 8013a9c:	4605      	mov	r5, r0
 8013a9e:	b911      	cbnz	r1, 8013aa6 <sbrk_aligned+0x12>
 8013aa0:	f000 f88c 	bl	8013bbc <_sbrk_r>
 8013aa4:	6030      	str	r0, [r6, #0]
 8013aa6:	4621      	mov	r1, r4
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f000 f887 	bl	8013bbc <_sbrk_r>
 8013aae:	1c43      	adds	r3, r0, #1
 8013ab0:	d00a      	beq.n	8013ac8 <sbrk_aligned+0x34>
 8013ab2:	1cc4      	adds	r4, r0, #3
 8013ab4:	f024 0403 	bic.w	r4, r4, #3
 8013ab8:	42a0      	cmp	r0, r4
 8013aba:	d007      	beq.n	8013acc <sbrk_aligned+0x38>
 8013abc:	1a21      	subs	r1, r4, r0
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f000 f87c 	bl	8013bbc <_sbrk_r>
 8013ac4:	3001      	adds	r0, #1
 8013ac6:	d101      	bne.n	8013acc <sbrk_aligned+0x38>
 8013ac8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013acc:	4620      	mov	r0, r4
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	240015fc 	.word	0x240015fc

08013ad4 <_malloc_r>:
 8013ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad8:	1ccd      	adds	r5, r1, #3
 8013ada:	f025 0503 	bic.w	r5, r5, #3
 8013ade:	3508      	adds	r5, #8
 8013ae0:	2d0c      	cmp	r5, #12
 8013ae2:	bf38      	it	cc
 8013ae4:	250c      	movcc	r5, #12
 8013ae6:	2d00      	cmp	r5, #0
 8013ae8:	4607      	mov	r7, r0
 8013aea:	db01      	blt.n	8013af0 <_malloc_r+0x1c>
 8013aec:	42a9      	cmp	r1, r5
 8013aee:	d905      	bls.n	8013afc <_malloc_r+0x28>
 8013af0:	230c      	movs	r3, #12
 8013af2:	603b      	str	r3, [r7, #0]
 8013af4:	2600      	movs	r6, #0
 8013af6:	4630      	mov	r0, r6
 8013af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013afc:	4e2e      	ldr	r6, [pc, #184]	; (8013bb8 <_malloc_r+0xe4>)
 8013afe:	f000 f949 	bl	8013d94 <__malloc_lock>
 8013b02:	6833      	ldr	r3, [r6, #0]
 8013b04:	461c      	mov	r4, r3
 8013b06:	bb34      	cbnz	r4, 8013b56 <_malloc_r+0x82>
 8013b08:	4629      	mov	r1, r5
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	f7ff ffc2 	bl	8013a94 <sbrk_aligned>
 8013b10:	1c43      	adds	r3, r0, #1
 8013b12:	4604      	mov	r4, r0
 8013b14:	d14d      	bne.n	8013bb2 <_malloc_r+0xde>
 8013b16:	6834      	ldr	r4, [r6, #0]
 8013b18:	4626      	mov	r6, r4
 8013b1a:	2e00      	cmp	r6, #0
 8013b1c:	d140      	bne.n	8013ba0 <_malloc_r+0xcc>
 8013b1e:	6823      	ldr	r3, [r4, #0]
 8013b20:	4631      	mov	r1, r6
 8013b22:	4638      	mov	r0, r7
 8013b24:	eb04 0803 	add.w	r8, r4, r3
 8013b28:	f000 f848 	bl	8013bbc <_sbrk_r>
 8013b2c:	4580      	cmp	r8, r0
 8013b2e:	d13a      	bne.n	8013ba6 <_malloc_r+0xd2>
 8013b30:	6821      	ldr	r1, [r4, #0]
 8013b32:	3503      	adds	r5, #3
 8013b34:	1a6d      	subs	r5, r5, r1
 8013b36:	f025 0503 	bic.w	r5, r5, #3
 8013b3a:	3508      	adds	r5, #8
 8013b3c:	2d0c      	cmp	r5, #12
 8013b3e:	bf38      	it	cc
 8013b40:	250c      	movcc	r5, #12
 8013b42:	4629      	mov	r1, r5
 8013b44:	4638      	mov	r0, r7
 8013b46:	f7ff ffa5 	bl	8013a94 <sbrk_aligned>
 8013b4a:	3001      	adds	r0, #1
 8013b4c:	d02b      	beq.n	8013ba6 <_malloc_r+0xd2>
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	442b      	add	r3, r5
 8013b52:	6023      	str	r3, [r4, #0]
 8013b54:	e00e      	b.n	8013b74 <_malloc_r+0xa0>
 8013b56:	6822      	ldr	r2, [r4, #0]
 8013b58:	1b52      	subs	r2, r2, r5
 8013b5a:	d41e      	bmi.n	8013b9a <_malloc_r+0xc6>
 8013b5c:	2a0b      	cmp	r2, #11
 8013b5e:	d916      	bls.n	8013b8e <_malloc_r+0xba>
 8013b60:	1961      	adds	r1, r4, r5
 8013b62:	42a3      	cmp	r3, r4
 8013b64:	6025      	str	r5, [r4, #0]
 8013b66:	bf18      	it	ne
 8013b68:	6059      	strne	r1, [r3, #4]
 8013b6a:	6863      	ldr	r3, [r4, #4]
 8013b6c:	bf08      	it	eq
 8013b6e:	6031      	streq	r1, [r6, #0]
 8013b70:	5162      	str	r2, [r4, r5]
 8013b72:	604b      	str	r3, [r1, #4]
 8013b74:	4638      	mov	r0, r7
 8013b76:	f104 060b 	add.w	r6, r4, #11
 8013b7a:	f000 f911 	bl	8013da0 <__malloc_unlock>
 8013b7e:	f026 0607 	bic.w	r6, r6, #7
 8013b82:	1d23      	adds	r3, r4, #4
 8013b84:	1af2      	subs	r2, r6, r3
 8013b86:	d0b6      	beq.n	8013af6 <_malloc_r+0x22>
 8013b88:	1b9b      	subs	r3, r3, r6
 8013b8a:	50a3      	str	r3, [r4, r2]
 8013b8c:	e7b3      	b.n	8013af6 <_malloc_r+0x22>
 8013b8e:	6862      	ldr	r2, [r4, #4]
 8013b90:	42a3      	cmp	r3, r4
 8013b92:	bf0c      	ite	eq
 8013b94:	6032      	streq	r2, [r6, #0]
 8013b96:	605a      	strne	r2, [r3, #4]
 8013b98:	e7ec      	b.n	8013b74 <_malloc_r+0xa0>
 8013b9a:	4623      	mov	r3, r4
 8013b9c:	6864      	ldr	r4, [r4, #4]
 8013b9e:	e7b2      	b.n	8013b06 <_malloc_r+0x32>
 8013ba0:	4634      	mov	r4, r6
 8013ba2:	6876      	ldr	r6, [r6, #4]
 8013ba4:	e7b9      	b.n	8013b1a <_malloc_r+0x46>
 8013ba6:	230c      	movs	r3, #12
 8013ba8:	603b      	str	r3, [r7, #0]
 8013baa:	4638      	mov	r0, r7
 8013bac:	f000 f8f8 	bl	8013da0 <__malloc_unlock>
 8013bb0:	e7a1      	b.n	8013af6 <_malloc_r+0x22>
 8013bb2:	6025      	str	r5, [r4, #0]
 8013bb4:	e7de      	b.n	8013b74 <_malloc_r+0xa0>
 8013bb6:	bf00      	nop
 8013bb8:	240015f8 	.word	0x240015f8

08013bbc <_sbrk_r>:
 8013bbc:	b538      	push	{r3, r4, r5, lr}
 8013bbe:	4d06      	ldr	r5, [pc, #24]	; (8013bd8 <_sbrk_r+0x1c>)
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	4608      	mov	r0, r1
 8013bc6:	602b      	str	r3, [r5, #0]
 8013bc8:	f7f1 f9be 	bl	8004f48 <_sbrk>
 8013bcc:	1c43      	adds	r3, r0, #1
 8013bce:	d102      	bne.n	8013bd6 <_sbrk_r+0x1a>
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	b103      	cbz	r3, 8013bd6 <_sbrk_r+0x1a>
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	24001600 	.word	0x24001600

08013bdc <__sread>:
 8013bdc:	b510      	push	{r4, lr}
 8013bde:	460c      	mov	r4, r1
 8013be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be4:	f000 fa3c 	bl	8014060 <_read_r>
 8013be8:	2800      	cmp	r0, #0
 8013bea:	bfab      	itete	ge
 8013bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013bee:	89a3      	ldrhlt	r3, [r4, #12]
 8013bf0:	181b      	addge	r3, r3, r0
 8013bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013bf6:	bfac      	ite	ge
 8013bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013bfa:	81a3      	strhlt	r3, [r4, #12]
 8013bfc:	bd10      	pop	{r4, pc}

08013bfe <__swrite>:
 8013bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c02:	461f      	mov	r7, r3
 8013c04:	898b      	ldrh	r3, [r1, #12]
 8013c06:	05db      	lsls	r3, r3, #23
 8013c08:	4605      	mov	r5, r0
 8013c0a:	460c      	mov	r4, r1
 8013c0c:	4616      	mov	r6, r2
 8013c0e:	d505      	bpl.n	8013c1c <__swrite+0x1e>
 8013c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c14:	2302      	movs	r3, #2
 8013c16:	2200      	movs	r2, #0
 8013c18:	f000 f898 	bl	8013d4c <_lseek_r>
 8013c1c:	89a3      	ldrh	r3, [r4, #12]
 8013c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c26:	81a3      	strh	r3, [r4, #12]
 8013c28:	4632      	mov	r2, r6
 8013c2a:	463b      	mov	r3, r7
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c32:	f000 b817 	b.w	8013c64 <_write_r>

08013c36 <__sseek>:
 8013c36:	b510      	push	{r4, lr}
 8013c38:	460c      	mov	r4, r1
 8013c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c3e:	f000 f885 	bl	8013d4c <_lseek_r>
 8013c42:	1c43      	adds	r3, r0, #1
 8013c44:	89a3      	ldrh	r3, [r4, #12]
 8013c46:	bf15      	itete	ne
 8013c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c52:	81a3      	strheq	r3, [r4, #12]
 8013c54:	bf18      	it	ne
 8013c56:	81a3      	strhne	r3, [r4, #12]
 8013c58:	bd10      	pop	{r4, pc}

08013c5a <__sclose>:
 8013c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c5e:	f000 b831 	b.w	8013cc4 <_close_r>
	...

08013c64 <_write_r>:
 8013c64:	b538      	push	{r3, r4, r5, lr}
 8013c66:	4d07      	ldr	r5, [pc, #28]	; (8013c84 <_write_r+0x20>)
 8013c68:	4604      	mov	r4, r0
 8013c6a:	4608      	mov	r0, r1
 8013c6c:	4611      	mov	r1, r2
 8013c6e:	2200      	movs	r2, #0
 8013c70:	602a      	str	r2, [r5, #0]
 8013c72:	461a      	mov	r2, r3
 8013c74:	f7f1 f917 	bl	8004ea6 <_write>
 8013c78:	1c43      	adds	r3, r0, #1
 8013c7a:	d102      	bne.n	8013c82 <_write_r+0x1e>
 8013c7c:	682b      	ldr	r3, [r5, #0]
 8013c7e:	b103      	cbz	r3, 8013c82 <_write_r+0x1e>
 8013c80:	6023      	str	r3, [r4, #0]
 8013c82:	bd38      	pop	{r3, r4, r5, pc}
 8013c84:	24001600 	.word	0x24001600

08013c88 <__assert_func>:
 8013c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c8a:	4614      	mov	r4, r2
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	4b09      	ldr	r3, [pc, #36]	; (8013cb4 <__assert_func+0x2c>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4605      	mov	r5, r0
 8013c94:	68d8      	ldr	r0, [r3, #12]
 8013c96:	b14c      	cbz	r4, 8013cac <__assert_func+0x24>
 8013c98:	4b07      	ldr	r3, [pc, #28]	; (8013cb8 <__assert_func+0x30>)
 8013c9a:	9100      	str	r1, [sp, #0]
 8013c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ca0:	4906      	ldr	r1, [pc, #24]	; (8013cbc <__assert_func+0x34>)
 8013ca2:	462b      	mov	r3, r5
 8013ca4:	f000 f81e 	bl	8013ce4 <fiprintf>
 8013ca8:	f000 f9f9 	bl	801409e <abort>
 8013cac:	4b04      	ldr	r3, [pc, #16]	; (8013cc0 <__assert_func+0x38>)
 8013cae:	461c      	mov	r4, r3
 8013cb0:	e7f3      	b.n	8013c9a <__assert_func+0x12>
 8013cb2:	bf00      	nop
 8013cb4:	24000238 	.word	0x24000238
 8013cb8:	08015f34 	.word	0x08015f34
 8013cbc:	08015f41 	.word	0x08015f41
 8013cc0:	08015f6f 	.word	0x08015f6f

08013cc4 <_close_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4d06      	ldr	r5, [pc, #24]	; (8013ce0 <_close_r+0x1c>)
 8013cc8:	2300      	movs	r3, #0
 8013cca:	4604      	mov	r4, r0
 8013ccc:	4608      	mov	r0, r1
 8013cce:	602b      	str	r3, [r5, #0]
 8013cd0:	f7f1 f905 	bl	8004ede <_close>
 8013cd4:	1c43      	adds	r3, r0, #1
 8013cd6:	d102      	bne.n	8013cde <_close_r+0x1a>
 8013cd8:	682b      	ldr	r3, [r5, #0]
 8013cda:	b103      	cbz	r3, 8013cde <_close_r+0x1a>
 8013cdc:	6023      	str	r3, [r4, #0]
 8013cde:	bd38      	pop	{r3, r4, r5, pc}
 8013ce0:	24001600 	.word	0x24001600

08013ce4 <fiprintf>:
 8013ce4:	b40e      	push	{r1, r2, r3}
 8013ce6:	b503      	push	{r0, r1, lr}
 8013ce8:	4601      	mov	r1, r0
 8013cea:	ab03      	add	r3, sp, #12
 8013cec:	4805      	ldr	r0, [pc, #20]	; (8013d04 <fiprintf+0x20>)
 8013cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cf2:	6800      	ldr	r0, [r0, #0]
 8013cf4:	9301      	str	r3, [sp, #4]
 8013cf6:	f000 f883 	bl	8013e00 <_vfiprintf_r>
 8013cfa:	b002      	add	sp, #8
 8013cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d00:	b003      	add	sp, #12
 8013d02:	4770      	bx	lr
 8013d04:	24000238 	.word	0x24000238

08013d08 <_fstat_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	4d07      	ldr	r5, [pc, #28]	; (8013d28 <_fstat_r+0x20>)
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4604      	mov	r4, r0
 8013d10:	4608      	mov	r0, r1
 8013d12:	4611      	mov	r1, r2
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	f7f1 f8ee 	bl	8004ef6 <_fstat>
 8013d1a:	1c43      	adds	r3, r0, #1
 8013d1c:	d102      	bne.n	8013d24 <_fstat_r+0x1c>
 8013d1e:	682b      	ldr	r3, [r5, #0]
 8013d20:	b103      	cbz	r3, 8013d24 <_fstat_r+0x1c>
 8013d22:	6023      	str	r3, [r4, #0]
 8013d24:	bd38      	pop	{r3, r4, r5, pc}
 8013d26:	bf00      	nop
 8013d28:	24001600 	.word	0x24001600

08013d2c <_isatty_r>:
 8013d2c:	b538      	push	{r3, r4, r5, lr}
 8013d2e:	4d06      	ldr	r5, [pc, #24]	; (8013d48 <_isatty_r+0x1c>)
 8013d30:	2300      	movs	r3, #0
 8013d32:	4604      	mov	r4, r0
 8013d34:	4608      	mov	r0, r1
 8013d36:	602b      	str	r3, [r5, #0]
 8013d38:	f7f1 f8ed 	bl	8004f16 <_isatty>
 8013d3c:	1c43      	adds	r3, r0, #1
 8013d3e:	d102      	bne.n	8013d46 <_isatty_r+0x1a>
 8013d40:	682b      	ldr	r3, [r5, #0]
 8013d42:	b103      	cbz	r3, 8013d46 <_isatty_r+0x1a>
 8013d44:	6023      	str	r3, [r4, #0]
 8013d46:	bd38      	pop	{r3, r4, r5, pc}
 8013d48:	24001600 	.word	0x24001600

08013d4c <_lseek_r>:
 8013d4c:	b538      	push	{r3, r4, r5, lr}
 8013d4e:	4d07      	ldr	r5, [pc, #28]	; (8013d6c <_lseek_r+0x20>)
 8013d50:	4604      	mov	r4, r0
 8013d52:	4608      	mov	r0, r1
 8013d54:	4611      	mov	r1, r2
 8013d56:	2200      	movs	r2, #0
 8013d58:	602a      	str	r2, [r5, #0]
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	f7f1 f8e6 	bl	8004f2c <_lseek>
 8013d60:	1c43      	adds	r3, r0, #1
 8013d62:	d102      	bne.n	8013d6a <_lseek_r+0x1e>
 8013d64:	682b      	ldr	r3, [r5, #0]
 8013d66:	b103      	cbz	r3, 8013d6a <_lseek_r+0x1e>
 8013d68:	6023      	str	r3, [r4, #0]
 8013d6a:	bd38      	pop	{r3, r4, r5, pc}
 8013d6c:	24001600 	.word	0x24001600

08013d70 <__ascii_mbtowc>:
 8013d70:	b082      	sub	sp, #8
 8013d72:	b901      	cbnz	r1, 8013d76 <__ascii_mbtowc+0x6>
 8013d74:	a901      	add	r1, sp, #4
 8013d76:	b142      	cbz	r2, 8013d8a <__ascii_mbtowc+0x1a>
 8013d78:	b14b      	cbz	r3, 8013d8e <__ascii_mbtowc+0x1e>
 8013d7a:	7813      	ldrb	r3, [r2, #0]
 8013d7c:	600b      	str	r3, [r1, #0]
 8013d7e:	7812      	ldrb	r2, [r2, #0]
 8013d80:	1e10      	subs	r0, r2, #0
 8013d82:	bf18      	it	ne
 8013d84:	2001      	movne	r0, #1
 8013d86:	b002      	add	sp, #8
 8013d88:	4770      	bx	lr
 8013d8a:	4610      	mov	r0, r2
 8013d8c:	e7fb      	b.n	8013d86 <__ascii_mbtowc+0x16>
 8013d8e:	f06f 0001 	mvn.w	r0, #1
 8013d92:	e7f8      	b.n	8013d86 <__ascii_mbtowc+0x16>

08013d94 <__malloc_lock>:
 8013d94:	4801      	ldr	r0, [pc, #4]	; (8013d9c <__malloc_lock+0x8>)
 8013d96:	f7ff ba1a 	b.w	80131ce <__retarget_lock_acquire_recursive>
 8013d9a:	bf00      	nop
 8013d9c:	240015f4 	.word	0x240015f4

08013da0 <__malloc_unlock>:
 8013da0:	4801      	ldr	r0, [pc, #4]	; (8013da8 <__malloc_unlock+0x8>)
 8013da2:	f7ff ba15 	b.w	80131d0 <__retarget_lock_release_recursive>
 8013da6:	bf00      	nop
 8013da8:	240015f4 	.word	0x240015f4

08013dac <__sfputc_r>:
 8013dac:	6893      	ldr	r3, [r2, #8]
 8013dae:	3b01      	subs	r3, #1
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	b410      	push	{r4}
 8013db4:	6093      	str	r3, [r2, #8]
 8013db6:	da08      	bge.n	8013dca <__sfputc_r+0x1e>
 8013db8:	6994      	ldr	r4, [r2, #24]
 8013dba:	42a3      	cmp	r3, r4
 8013dbc:	db01      	blt.n	8013dc2 <__sfputc_r+0x16>
 8013dbe:	290a      	cmp	r1, #10
 8013dc0:	d103      	bne.n	8013dca <__sfputc_r+0x1e>
 8013dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dc6:	f7fe b98b 	b.w	80120e0 <__swbuf_r>
 8013dca:	6813      	ldr	r3, [r2, #0]
 8013dcc:	1c58      	adds	r0, r3, #1
 8013dce:	6010      	str	r0, [r2, #0]
 8013dd0:	7019      	strb	r1, [r3, #0]
 8013dd2:	4608      	mov	r0, r1
 8013dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dd8:	4770      	bx	lr

08013dda <__sfputs_r>:
 8013dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ddc:	4606      	mov	r6, r0
 8013dde:	460f      	mov	r7, r1
 8013de0:	4614      	mov	r4, r2
 8013de2:	18d5      	adds	r5, r2, r3
 8013de4:	42ac      	cmp	r4, r5
 8013de6:	d101      	bne.n	8013dec <__sfputs_r+0x12>
 8013de8:	2000      	movs	r0, #0
 8013dea:	e007      	b.n	8013dfc <__sfputs_r+0x22>
 8013dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013df0:	463a      	mov	r2, r7
 8013df2:	4630      	mov	r0, r6
 8013df4:	f7ff ffda 	bl	8013dac <__sfputc_r>
 8013df8:	1c43      	adds	r3, r0, #1
 8013dfa:	d1f3      	bne.n	8013de4 <__sfputs_r+0xa>
 8013dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e00 <_vfiprintf_r>:
 8013e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e04:	460d      	mov	r5, r1
 8013e06:	b09d      	sub	sp, #116	; 0x74
 8013e08:	4614      	mov	r4, r2
 8013e0a:	4698      	mov	r8, r3
 8013e0c:	4606      	mov	r6, r0
 8013e0e:	b118      	cbz	r0, 8013e18 <_vfiprintf_r+0x18>
 8013e10:	6983      	ldr	r3, [r0, #24]
 8013e12:	b90b      	cbnz	r3, 8013e18 <_vfiprintf_r+0x18>
 8013e14:	f7ff f938 	bl	8013088 <__sinit>
 8013e18:	4b89      	ldr	r3, [pc, #548]	; (8014040 <_vfiprintf_r+0x240>)
 8013e1a:	429d      	cmp	r5, r3
 8013e1c:	d11b      	bne.n	8013e56 <_vfiprintf_r+0x56>
 8013e1e:	6875      	ldr	r5, [r6, #4]
 8013e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e22:	07d9      	lsls	r1, r3, #31
 8013e24:	d405      	bmi.n	8013e32 <_vfiprintf_r+0x32>
 8013e26:	89ab      	ldrh	r3, [r5, #12]
 8013e28:	059a      	lsls	r2, r3, #22
 8013e2a:	d402      	bmi.n	8013e32 <_vfiprintf_r+0x32>
 8013e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e2e:	f7ff f9ce 	bl	80131ce <__retarget_lock_acquire_recursive>
 8013e32:	89ab      	ldrh	r3, [r5, #12]
 8013e34:	071b      	lsls	r3, r3, #28
 8013e36:	d501      	bpl.n	8013e3c <_vfiprintf_r+0x3c>
 8013e38:	692b      	ldr	r3, [r5, #16]
 8013e3a:	b9eb      	cbnz	r3, 8013e78 <_vfiprintf_r+0x78>
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f7fe f9a0 	bl	8012184 <__swsetup_r>
 8013e44:	b1c0      	cbz	r0, 8013e78 <_vfiprintf_r+0x78>
 8013e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e48:	07dc      	lsls	r4, r3, #31
 8013e4a:	d50e      	bpl.n	8013e6a <_vfiprintf_r+0x6a>
 8013e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e50:	b01d      	add	sp, #116	; 0x74
 8013e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e56:	4b7b      	ldr	r3, [pc, #492]	; (8014044 <_vfiprintf_r+0x244>)
 8013e58:	429d      	cmp	r5, r3
 8013e5a:	d101      	bne.n	8013e60 <_vfiprintf_r+0x60>
 8013e5c:	68b5      	ldr	r5, [r6, #8]
 8013e5e:	e7df      	b.n	8013e20 <_vfiprintf_r+0x20>
 8013e60:	4b79      	ldr	r3, [pc, #484]	; (8014048 <_vfiprintf_r+0x248>)
 8013e62:	429d      	cmp	r5, r3
 8013e64:	bf08      	it	eq
 8013e66:	68f5      	ldreq	r5, [r6, #12]
 8013e68:	e7da      	b.n	8013e20 <_vfiprintf_r+0x20>
 8013e6a:	89ab      	ldrh	r3, [r5, #12]
 8013e6c:	0598      	lsls	r0, r3, #22
 8013e6e:	d4ed      	bmi.n	8013e4c <_vfiprintf_r+0x4c>
 8013e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e72:	f7ff f9ad 	bl	80131d0 <__retarget_lock_release_recursive>
 8013e76:	e7e9      	b.n	8013e4c <_vfiprintf_r+0x4c>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e7c:	2320      	movs	r3, #32
 8013e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e86:	2330      	movs	r3, #48	; 0x30
 8013e88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801404c <_vfiprintf_r+0x24c>
 8013e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e90:	f04f 0901 	mov.w	r9, #1
 8013e94:	4623      	mov	r3, r4
 8013e96:	469a      	mov	sl, r3
 8013e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e9c:	b10a      	cbz	r2, 8013ea2 <_vfiprintf_r+0xa2>
 8013e9e:	2a25      	cmp	r2, #37	; 0x25
 8013ea0:	d1f9      	bne.n	8013e96 <_vfiprintf_r+0x96>
 8013ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8013ea6:	d00b      	beq.n	8013ec0 <_vfiprintf_r+0xc0>
 8013ea8:	465b      	mov	r3, fp
 8013eaa:	4622      	mov	r2, r4
 8013eac:	4629      	mov	r1, r5
 8013eae:	4630      	mov	r0, r6
 8013eb0:	f7ff ff93 	bl	8013dda <__sfputs_r>
 8013eb4:	3001      	adds	r0, #1
 8013eb6:	f000 80aa 	beq.w	801400e <_vfiprintf_r+0x20e>
 8013eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ebc:	445a      	add	r2, fp
 8013ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8013ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f000 80a2 	beq.w	801400e <_vfiprintf_r+0x20e>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ed4:	f10a 0a01 	add.w	sl, sl, #1
 8013ed8:	9304      	str	r3, [sp, #16]
 8013eda:	9307      	str	r3, [sp, #28]
 8013edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8013ee2:	4654      	mov	r4, sl
 8013ee4:	2205      	movs	r2, #5
 8013ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eea:	4858      	ldr	r0, [pc, #352]	; (801404c <_vfiprintf_r+0x24c>)
 8013eec:	f7ec fa00 	bl	80002f0 <memchr>
 8013ef0:	9a04      	ldr	r2, [sp, #16]
 8013ef2:	b9d8      	cbnz	r0, 8013f2c <_vfiprintf_r+0x12c>
 8013ef4:	06d1      	lsls	r1, r2, #27
 8013ef6:	bf44      	itt	mi
 8013ef8:	2320      	movmi	r3, #32
 8013efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013efe:	0713      	lsls	r3, r2, #28
 8013f00:	bf44      	itt	mi
 8013f02:	232b      	movmi	r3, #43	; 0x2b
 8013f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f08:	f89a 3000 	ldrb.w	r3, [sl]
 8013f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8013f0e:	d015      	beq.n	8013f3c <_vfiprintf_r+0x13c>
 8013f10:	9a07      	ldr	r2, [sp, #28]
 8013f12:	4654      	mov	r4, sl
 8013f14:	2000      	movs	r0, #0
 8013f16:	f04f 0c0a 	mov.w	ip, #10
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f20:	3b30      	subs	r3, #48	; 0x30
 8013f22:	2b09      	cmp	r3, #9
 8013f24:	d94e      	bls.n	8013fc4 <_vfiprintf_r+0x1c4>
 8013f26:	b1b0      	cbz	r0, 8013f56 <_vfiprintf_r+0x156>
 8013f28:	9207      	str	r2, [sp, #28]
 8013f2a:	e014      	b.n	8013f56 <_vfiprintf_r+0x156>
 8013f2c:	eba0 0308 	sub.w	r3, r0, r8
 8013f30:	fa09 f303 	lsl.w	r3, r9, r3
 8013f34:	4313      	orrs	r3, r2
 8013f36:	9304      	str	r3, [sp, #16]
 8013f38:	46a2      	mov	sl, r4
 8013f3a:	e7d2      	b.n	8013ee2 <_vfiprintf_r+0xe2>
 8013f3c:	9b03      	ldr	r3, [sp, #12]
 8013f3e:	1d19      	adds	r1, r3, #4
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	9103      	str	r1, [sp, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	bfbb      	ittet	lt
 8013f48:	425b      	neglt	r3, r3
 8013f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8013f4e:	9307      	strge	r3, [sp, #28]
 8013f50:	9307      	strlt	r3, [sp, #28]
 8013f52:	bfb8      	it	lt
 8013f54:	9204      	strlt	r2, [sp, #16]
 8013f56:	7823      	ldrb	r3, [r4, #0]
 8013f58:	2b2e      	cmp	r3, #46	; 0x2e
 8013f5a:	d10c      	bne.n	8013f76 <_vfiprintf_r+0x176>
 8013f5c:	7863      	ldrb	r3, [r4, #1]
 8013f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f60:	d135      	bne.n	8013fce <_vfiprintf_r+0x1ce>
 8013f62:	9b03      	ldr	r3, [sp, #12]
 8013f64:	1d1a      	adds	r2, r3, #4
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	9203      	str	r2, [sp, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	bfb8      	it	lt
 8013f6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f72:	3402      	adds	r4, #2
 8013f74:	9305      	str	r3, [sp, #20]
 8013f76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801405c <_vfiprintf_r+0x25c>
 8013f7a:	7821      	ldrb	r1, [r4, #0]
 8013f7c:	2203      	movs	r2, #3
 8013f7e:	4650      	mov	r0, sl
 8013f80:	f7ec f9b6 	bl	80002f0 <memchr>
 8013f84:	b140      	cbz	r0, 8013f98 <_vfiprintf_r+0x198>
 8013f86:	2340      	movs	r3, #64	; 0x40
 8013f88:	eba0 000a 	sub.w	r0, r0, sl
 8013f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8013f90:	9b04      	ldr	r3, [sp, #16]
 8013f92:	4303      	orrs	r3, r0
 8013f94:	3401      	adds	r4, #1
 8013f96:	9304      	str	r3, [sp, #16]
 8013f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f9c:	482c      	ldr	r0, [pc, #176]	; (8014050 <_vfiprintf_r+0x250>)
 8013f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fa2:	2206      	movs	r2, #6
 8013fa4:	f7ec f9a4 	bl	80002f0 <memchr>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d03f      	beq.n	801402c <_vfiprintf_r+0x22c>
 8013fac:	4b29      	ldr	r3, [pc, #164]	; (8014054 <_vfiprintf_r+0x254>)
 8013fae:	bb1b      	cbnz	r3, 8013ff8 <_vfiprintf_r+0x1f8>
 8013fb0:	9b03      	ldr	r3, [sp, #12]
 8013fb2:	3307      	adds	r3, #7
 8013fb4:	f023 0307 	bic.w	r3, r3, #7
 8013fb8:	3308      	adds	r3, #8
 8013fba:	9303      	str	r3, [sp, #12]
 8013fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fbe:	443b      	add	r3, r7
 8013fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8013fc2:	e767      	b.n	8013e94 <_vfiprintf_r+0x94>
 8013fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fc8:	460c      	mov	r4, r1
 8013fca:	2001      	movs	r0, #1
 8013fcc:	e7a5      	b.n	8013f1a <_vfiprintf_r+0x11a>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	3401      	adds	r4, #1
 8013fd2:	9305      	str	r3, [sp, #20]
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	f04f 0c0a 	mov.w	ip, #10
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fe0:	3a30      	subs	r2, #48	; 0x30
 8013fe2:	2a09      	cmp	r2, #9
 8013fe4:	d903      	bls.n	8013fee <_vfiprintf_r+0x1ee>
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d0c5      	beq.n	8013f76 <_vfiprintf_r+0x176>
 8013fea:	9105      	str	r1, [sp, #20]
 8013fec:	e7c3      	b.n	8013f76 <_vfiprintf_r+0x176>
 8013fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	e7f0      	b.n	8013fda <_vfiprintf_r+0x1da>
 8013ff8:	ab03      	add	r3, sp, #12
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	462a      	mov	r2, r5
 8013ffe:	4b16      	ldr	r3, [pc, #88]	; (8014058 <_vfiprintf_r+0x258>)
 8014000:	a904      	add	r1, sp, #16
 8014002:	4630      	mov	r0, r6
 8014004:	f7fd fc44 	bl	8011890 <_printf_float>
 8014008:	4607      	mov	r7, r0
 801400a:	1c78      	adds	r0, r7, #1
 801400c:	d1d6      	bne.n	8013fbc <_vfiprintf_r+0x1bc>
 801400e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014010:	07d9      	lsls	r1, r3, #31
 8014012:	d405      	bmi.n	8014020 <_vfiprintf_r+0x220>
 8014014:	89ab      	ldrh	r3, [r5, #12]
 8014016:	059a      	lsls	r2, r3, #22
 8014018:	d402      	bmi.n	8014020 <_vfiprintf_r+0x220>
 801401a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801401c:	f7ff f8d8 	bl	80131d0 <__retarget_lock_release_recursive>
 8014020:	89ab      	ldrh	r3, [r5, #12]
 8014022:	065b      	lsls	r3, r3, #25
 8014024:	f53f af12 	bmi.w	8013e4c <_vfiprintf_r+0x4c>
 8014028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801402a:	e711      	b.n	8013e50 <_vfiprintf_r+0x50>
 801402c:	ab03      	add	r3, sp, #12
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	462a      	mov	r2, r5
 8014032:	4b09      	ldr	r3, [pc, #36]	; (8014058 <_vfiprintf_r+0x258>)
 8014034:	a904      	add	r1, sp, #16
 8014036:	4630      	mov	r0, r6
 8014038:	f7fd feb6 	bl	8011da8 <_printf_i>
 801403c:	e7e4      	b.n	8014008 <_vfiprintf_r+0x208>
 801403e:	bf00      	nop
 8014040:	08015d98 	.word	0x08015d98
 8014044:	08015db8 	.word	0x08015db8
 8014048:	08015d78 	.word	0x08015d78
 801404c:	08015f7a 	.word	0x08015f7a
 8014050:	08015f84 	.word	0x08015f84
 8014054:	08011891 	.word	0x08011891
 8014058:	08013ddb 	.word	0x08013ddb
 801405c:	08015f80 	.word	0x08015f80

08014060 <_read_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4d07      	ldr	r5, [pc, #28]	; (8014080 <_read_r+0x20>)
 8014064:	4604      	mov	r4, r0
 8014066:	4608      	mov	r0, r1
 8014068:	4611      	mov	r1, r2
 801406a:	2200      	movs	r2, #0
 801406c:	602a      	str	r2, [r5, #0]
 801406e:	461a      	mov	r2, r3
 8014070:	f7f0 fefc 	bl	8004e6c <_read>
 8014074:	1c43      	adds	r3, r0, #1
 8014076:	d102      	bne.n	801407e <_read_r+0x1e>
 8014078:	682b      	ldr	r3, [r5, #0]
 801407a:	b103      	cbz	r3, 801407e <_read_r+0x1e>
 801407c:	6023      	str	r3, [r4, #0]
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	24001600 	.word	0x24001600

08014084 <__ascii_wctomb>:
 8014084:	b149      	cbz	r1, 801409a <__ascii_wctomb+0x16>
 8014086:	2aff      	cmp	r2, #255	; 0xff
 8014088:	bf85      	ittet	hi
 801408a:	238a      	movhi	r3, #138	; 0x8a
 801408c:	6003      	strhi	r3, [r0, #0]
 801408e:	700a      	strbls	r2, [r1, #0]
 8014090:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014094:	bf98      	it	ls
 8014096:	2001      	movls	r0, #1
 8014098:	4770      	bx	lr
 801409a:	4608      	mov	r0, r1
 801409c:	4770      	bx	lr

0801409e <abort>:
 801409e:	b508      	push	{r3, lr}
 80140a0:	2006      	movs	r0, #6
 80140a2:	f000 f82b 	bl	80140fc <raise>
 80140a6:	2001      	movs	r0, #1
 80140a8:	f7f0 fed6 	bl	8004e58 <_exit>

080140ac <_raise_r>:
 80140ac:	291f      	cmp	r1, #31
 80140ae:	b538      	push	{r3, r4, r5, lr}
 80140b0:	4604      	mov	r4, r0
 80140b2:	460d      	mov	r5, r1
 80140b4:	d904      	bls.n	80140c0 <_raise_r+0x14>
 80140b6:	2316      	movs	r3, #22
 80140b8:	6003      	str	r3, [r0, #0]
 80140ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140be:	bd38      	pop	{r3, r4, r5, pc}
 80140c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80140c2:	b112      	cbz	r2, 80140ca <_raise_r+0x1e>
 80140c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80140c8:	b94b      	cbnz	r3, 80140de <_raise_r+0x32>
 80140ca:	4620      	mov	r0, r4
 80140cc:	f000 f830 	bl	8014130 <_getpid_r>
 80140d0:	462a      	mov	r2, r5
 80140d2:	4601      	mov	r1, r0
 80140d4:	4620      	mov	r0, r4
 80140d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140da:	f000 b817 	b.w	801410c <_kill_r>
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d00a      	beq.n	80140f8 <_raise_r+0x4c>
 80140e2:	1c59      	adds	r1, r3, #1
 80140e4:	d103      	bne.n	80140ee <_raise_r+0x42>
 80140e6:	2316      	movs	r3, #22
 80140e8:	6003      	str	r3, [r0, #0]
 80140ea:	2001      	movs	r0, #1
 80140ec:	e7e7      	b.n	80140be <_raise_r+0x12>
 80140ee:	2400      	movs	r4, #0
 80140f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80140f4:	4628      	mov	r0, r5
 80140f6:	4798      	blx	r3
 80140f8:	2000      	movs	r0, #0
 80140fa:	e7e0      	b.n	80140be <_raise_r+0x12>

080140fc <raise>:
 80140fc:	4b02      	ldr	r3, [pc, #8]	; (8014108 <raise+0xc>)
 80140fe:	4601      	mov	r1, r0
 8014100:	6818      	ldr	r0, [r3, #0]
 8014102:	f7ff bfd3 	b.w	80140ac <_raise_r>
 8014106:	bf00      	nop
 8014108:	24000238 	.word	0x24000238

0801410c <_kill_r>:
 801410c:	b538      	push	{r3, r4, r5, lr}
 801410e:	4d07      	ldr	r5, [pc, #28]	; (801412c <_kill_r+0x20>)
 8014110:	2300      	movs	r3, #0
 8014112:	4604      	mov	r4, r0
 8014114:	4608      	mov	r0, r1
 8014116:	4611      	mov	r1, r2
 8014118:	602b      	str	r3, [r5, #0]
 801411a:	f7f0 fe8d 	bl	8004e38 <_kill>
 801411e:	1c43      	adds	r3, r0, #1
 8014120:	d102      	bne.n	8014128 <_kill_r+0x1c>
 8014122:	682b      	ldr	r3, [r5, #0]
 8014124:	b103      	cbz	r3, 8014128 <_kill_r+0x1c>
 8014126:	6023      	str	r3, [r4, #0]
 8014128:	bd38      	pop	{r3, r4, r5, pc}
 801412a:	bf00      	nop
 801412c:	24001600 	.word	0x24001600

08014130 <_getpid_r>:
 8014130:	f7f0 be7a 	b.w	8004e28 <_getpid>

08014134 <_init>:
 8014134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014136:	bf00      	nop
 8014138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801413a:	bc08      	pop	{r3}
 801413c:	469e      	mov	lr, r3
 801413e:	4770      	bx	lr

08014140 <_fini>:
 8014140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014142:	bf00      	nop
 8014144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014146:	bc08      	pop	{r3}
 8014148:	469e      	mov	lr, r3
 801414a:	4770      	bx	lr
