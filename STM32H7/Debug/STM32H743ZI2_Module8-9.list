
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bad0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be5c  0800be5c  0001be5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be64  0800be64  0001be64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800be6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008dc  20000078  0800bee0  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000954  0800bee0  00020954  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a5f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003975  00000000  00000000  00043b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001428  00000000  00000000  00047478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001310  00000000  00000000  000488a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000439c  00000000  00000000  00049bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019c44  00000000  00000000  0004df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c33  00000000  00000000  00067b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf7c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d40  00000000  00000000  001cf818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd58 	.word	0x0800bd58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	0800bd58 	.word	0x0800bd58

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f001 ff6e 	bl	8002560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f8ea 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 ff0a 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 fdb8 	bl	8001200 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000690:	f000 fd6a 	bl	8001168 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000694:	f000 fa84 	bl	8000ba0 <MX_TIM2_Init>
  MX_UART4_Init();
 8000698:	f000 fd16 	bl	80010c8 <MX_UART4_Init>
  MX_TIM4_Init();
 800069c:	f000 fb70 	bl	8000d80 <MX_TIM4_Init>
  MX_SPI3_Init();
 80006a0:	f000 f97a 	bl	8000998 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006a4:	f000 f9ce 	bl	8000a44 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006a8:	f000 faf2 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006ac:	f000 fbe0 	bl	8000e70 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006b0:	f000 fc66 	bl	8000f80 <MX_TIM15_Init>
  MX_TIM12_Init();
 80006b4:	f000 fc2a 	bl	8000f0c <MX_TIM12_Init>
  MX_CRC_Init();
 80006b8:	f000 f94c 	bl	8000954 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4854      	ldr	r0, [pc, #336]	; (8000814 <main+0x19c>)
 80006c2:	f004 fdb9 	bl	8005238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2102      	movs	r1, #2
 80006ca:	4853      	ldr	r0, [pc, #332]	; (8000818 <main+0x1a0>)
 80006cc:	f004 fdb4 	bl	8005238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d6:	484f      	ldr	r0, [pc, #316]	; (8000814 <main+0x19c>)
 80006d8:	f004 fdae 	bl	8005238 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80006dc:	4b4f      	ldr	r3, [pc, #316]	; (800081c <main+0x1a4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b4e      	ldr	r3, [pc, #312]	; (800081c <main+0x1a4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f042 0220 	orr.w	r2, r2, #32
 80006ea:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 80006ec:	4b4b      	ldr	r3, [pc, #300]	; (800081c <main+0x1a4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b4a      	ldr	r3, [pc, #296]	; (800081c <main+0x1a4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006fa:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 80006fc:	2204      	movs	r2, #4
 80006fe:	4948      	ldr	r1, [pc, #288]	; (8000820 <main+0x1a8>)
 8000700:	4846      	ldr	r0, [pc, #280]	; (800081c <main+0x1a4>)
 8000702:	f008 fc35 	bl	8008f70 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(State_Checksum_Error)
 8000706:	4b47      	ldr	r3, [pc, #284]	; (8000824 <main+0x1ac>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00b      	beq.n	8000726 <main+0xae>
	  {
		  State_Checksum_Error = 0;
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <main+0x1ac>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <main+0x1b0>)
 8000716:	22ee      	movs	r2, #238	; 0xee
 8000718:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	2201      	movs	r2, #1
 800071e:	4942      	ldr	r1, [pc, #264]	; (8000828 <main+0x1b0>)
 8000720:	483e      	ldr	r0, [pc, #248]	; (800081c <main+0x1a4>)
 8000722:	f008 fb8f 	bl	8008e44 <HAL_UART_Transmit>
	  }
	  if(State_Input_Joint_State)
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <main+0x1b4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00b      	beq.n	8000746 <main+0xce>
	  {
		  State_Input_Joint_State = 0;
 800072e:	4b3f      	ldr	r3, [pc, #252]	; (800082c <main+0x1b4>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000734:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <main+0x1b0>)
 8000736:	22ad      	movs	r2, #173	; 0xad
 8000738:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	2201      	movs	r2, #1
 800073e:	493a      	ldr	r1, [pc, #232]	; (8000828 <main+0x1b0>)
 8000740:	4836      	ldr	r0, [pc, #216]	; (800081c <main+0x1a4>)
 8000742:	f008 fb7f 	bl	8008e44 <HAL_UART_Transmit>
	  }
	  if(State_Print_4_Joint_State)
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <main+0x1b8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d022      	beq.n	8000794 <main+0x11c>
	  {
		  State_Print_4_Joint_State = 0;
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <main+0x1b8>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
		  printf("\n%3f %3f %3f %3f\n\r", q1, q2, q3, q4);
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <main+0x1bc>)
 8000756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <main+0x1c0>)
 800075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000760:	4936      	ldr	r1, [pc, #216]	; (800083c <main+0x1c4>)
 8000762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000766:	4c36      	ldr	r4, [pc, #216]	; (8000840 <main+0x1c8>)
 8000768:	e9d4 4500 	ldrd	r4, r5, [r4]
 800076c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000774:	e9cd 2300 	strd	r2, r3, [sp]
 8000778:	4642      	mov	r2, r8
 800077a:	464b      	mov	r3, r9
 800077c:	4831      	ldr	r0, [pc, #196]	; (8000844 <main+0x1cc>)
 800077e:	f00a fb95 	bl	800aeac <iprintf>
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <main+0x1b0>)
 8000784:	22ad      	movs	r2, #173	; 0xad
 8000786:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2201      	movs	r2, #1
 800078c:	4926      	ldr	r1, [pc, #152]	; (8000828 <main+0x1b0>)
 800078e:	4823      	ldr	r0, [pc, #140]	; (800081c <main+0x1a4>)
 8000790:	f008 fb58 	bl	8008e44 <HAL_UART_Transmit>
	  }
	  if(State_Activate_Gripper)
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <main+0x1d0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00b      	beq.n	80007b4 <main+0x13c>
	  {
		  State_Activate_Gripper = 0;
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <main+0x1d0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <main+0x1b0>)
 80007a4:	22ad      	movs	r2, #173	; 0xad
 80007a6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2201      	movs	r2, #1
 80007ac:	491e      	ldr	r1, [pc, #120]	; (8000828 <main+0x1b0>)
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <main+0x1a4>)
 80007b0:	f008 fb48 	bl	8008e44 <HAL_UART_Transmit>
	  }
	  if(State_Deactivate_Gripper)
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <main+0x1d4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00b      	beq.n	80007d4 <main+0x15c>
	  {
		  State_Deactivate_Gripper = 0;
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <main+0x1d4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <main+0x1b0>)
 80007c4:	22ad      	movs	r2, #173	; 0xad
 80007c6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	2201      	movs	r2, #1
 80007cc:	4916      	ldr	r1, [pc, #88]	; (8000828 <main+0x1b0>)
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <main+0x1a4>)
 80007d0:	f008 fb38 	bl	8008e44 <HAL_UART_Transmit>
	  }
	  if(State_Set_Home)
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <main+0x1d8>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00b      	beq.n	80007f4 <main+0x17c>
	  {
		  State_Set_Home = 0;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <main+0x1d8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <main+0x1b0>)
 80007e4:	22ad      	movs	r2, #173	; 0xad
 80007e6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2201      	movs	r2, #1
 80007ec:	490e      	ldr	r1, [pc, #56]	; (8000828 <main+0x1b0>)
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <main+0x1a4>)
 80007f0:	f008 fb28 	bl	8008e44 <HAL_UART_Transmit>
	  }
	  if(State_PID_Control_Timer)
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <main+0x1dc>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <main+0x18a>
	  {
//		  HAL_TIM_Base_Start_IT(&htim5);
		  State_PID_Control_Timer = 0;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <main+0x1dc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	  }
	  if(State_Casade_Control_Timer)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <main+0x1e0>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	f43f af7d 	beq.w	8000706 <main+0x8e>
	  {
//		  HAL_TIM_Base_Start_IT(&htim12);
		  State_Casade_Control_Timer = 0;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0x1e0>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	  if(State_Checksum_Error)
 8000812:	e778      	b.n	8000706 <main+0x8e>
 8000814:	58020400 	.word	0x58020400
 8000818:	58021000 	.word	0x58021000
 800081c:	200002d0 	.word	0x200002d0
 8000820:	2000093c 	.word	0x2000093c
 8000824:	200008b4 	.word	0x200008b4
 8000828:	200006b0 	.word	0x200006b0
 800082c:	20000534 	.word	0x20000534
 8000830:	200006b2 	.word	0x200006b2
 8000834:	200006a8 	.word	0x200006a8
 8000838:	20000460 	.word	0x20000460
 800083c:	20000698 	.word	0x20000698
 8000840:	200008b8 	.word	0x200008b8
 8000844:	0800bd70 	.word	0x0800bd70
 8000848:	20000938 	.word	0x20000938
 800084c:	2000045c 	.word	0x2000045c
 8000850:	200006b1 	.word	0x200006b1
 8000854:	200006a0 	.word	0x200006a0
 8000858:	20000810 	.word	0x20000810

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	; 0x70
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	224c      	movs	r2, #76	; 0x4c
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00a fb16 	bl	800ae9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00a fb10 	bl	800ae9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800087c:	2002      	movs	r0, #2
 800087e:	f004 fd0f 	bl	80052a0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <SystemClock_Config+0xf0>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <SystemClock_Config+0xf0>)
 800088c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <SystemClock_Config+0xf0>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <SystemClock_Config+0xf4>)
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <SystemClock_Config+0xf4>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xf4>)
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b4:	bf00      	nop
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <SystemClock_Config+0xf0>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c2:	d1f8      	bne.n	80008b6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008dc:	233c      	movs	r3, #60	; 0x3c
 80008de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008e4:	2306      	movs	r3, #6
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ec:	230c      	movs	r3, #12
 80008ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 fd09 	bl	8005314 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000908:	f001 f837 	bl	800197a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	233f      	movs	r3, #63	; 0x3f
 800090e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2303      	movs	r3, #3
 8000912:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000918:	2308      	movs	r3, #8
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000928:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2104      	movs	r1, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f005 f8fe 	bl	8005b34 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800093e:	f001 f81c 	bl	800197a <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3770      	adds	r7, #112	; 0x70
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	58024800 	.word	0x58024800
 8000950:	58000400 	.word	0x58000400

08000954 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_CRC_Init+0x3c>)
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <MX_CRC_Init+0x40>)
 800095c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_CRC_Init+0x3c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_CRC_Init+0x3c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_CRC_Init+0x3c>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_CRC_Init+0x3c>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_CRC_Init+0x3c>)
 8000978:	2201      	movs	r2, #1
 800097a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_CRC_Init+0x3c>)
 800097e:	f001 ff9d 	bl	80028bc <HAL_CRC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000988:	f000 fff7 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000438 	.word	0x20000438
 8000994:	58024c00 	.word	0x58024c00

08000998 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_SPI3_Init+0xa4>)
 800099e:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <MX_SPI3_Init+0xa8>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI3_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_SPI3_Init+0xa4>)
 8000a28:	f006 ff72 	bl	8007910 <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a32:	f000 ffa2 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000584 	.word	0x20000584
 8000a40:	40003c00 	.word	0x40003c00

08000a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09a      	sub	sp, #104	; 0x68
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	222c      	movs	r2, #44	; 0x2c
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00a fa0c 	bl	800ae9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000a86:	4a45      	ldr	r2, [pc, #276]	; (8000b9c <MX_TIM1_Init+0x158>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000a8a:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000a8c:	22ef      	movs	r2, #239	; 0xef
 8000a8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000a98:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab0:	4839      	ldr	r0, [pc, #228]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000ab2:	f007 f84a 	bl	8007b4a <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f000 ff5d 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aca:	4619      	mov	r1, r3
 8000acc:	4832      	ldr	r0, [pc, #200]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000ace:	f007 fb23 	bl	8008118 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ad8:	f000 ff4f 	bl	800197a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000adc:	482e      	ldr	r0, [pc, #184]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000ade:	f007 f88b 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ae8:	f000 ff47 	bl	800197a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000b00:	f008 f82c 	bl	8008b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b0a:	f000 ff36 	bl	800197a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000b12:	f240 1339 	movw	r3, #313	; 0x139
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b30:	2204      	movs	r2, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000b36:	f007 f9df 	bl	8007ef8 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b40:	f000 ff1b 	bl	800197a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000b7a:	f008 f877 	bl	8008c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000b84:	f000 fef9 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM1_Init+0x154>)
 8000b8a:	f001 f85d 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3768      	adds	r7, #104	; 0x68
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200006b4 	.word	0x200006b4
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	615a      	str	r2, [r3, #20]
 8000bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000bdc:	22ef      	movs	r2, #239	; 0xef
 8000bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000be8:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfa:	4824      	ldr	r0, [pc, #144]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000bfc:	f006 ffa5 	bl	8007b4a <HAL_TIM_Base_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c06:	f000 feb8 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481d      	ldr	r0, [pc, #116]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000c18:	f007 fa7e 	bl	8008118 <HAL_TIM_ConfigClockSource>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c22:	f000 feaa 	bl	800197a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c26:	4819      	ldr	r0, [pc, #100]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000c28:	f006 ffe6 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c32:	f000 fea2 	bl	800197a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000c46:	f007 ff89 	bl	8008b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c50:	f000 fe93 	bl	800197a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c54:	2360      	movs	r3, #96	; 0x60
 8000c56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c58:	f240 1339 	movw	r3, #313	; 0x139
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	2208      	movs	r2, #8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000c6e:	f007 f943 	bl	8007ef8 <HAL_TIM_PWM_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c78:	f000 fe7f 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <MX_TIM2_Init+0xec>)
 8000c7e:	f000 ffe3 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000814 	.word	0x20000814

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000cc4:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <MX_TIM3_Init+0xec>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000cca:	22ef      	movs	r2, #239	; 0xef
 8000ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000cd6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000cea:	f006 ff2e 	bl	8007b4a <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cf4:	f000 fe41 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	4619      	mov	r1, r3
 8000d04:	481c      	ldr	r0, [pc, #112]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000d06:	f007 fa07 	bl	8008118 <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d10:	f000 fe33 	bl	800197a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d14:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000d16:	f006 ff6f 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d20:	f000 fe2b 	bl	800197a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000d34:	f007 ff12 	bl	8008b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d3e:	f000 fe1c 	bl	800197a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	; 0x60
 8000d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d46:	f240 1339 	movw	r3, #313	; 0x139
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000d5c:	f007 f8cc 	bl	8007ef8 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d66:	f000 fe08 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM3_Init+0xe8>)
 8000d6c:	f000 ff6c 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8000d70:	bf00      	nop
 8000d72:	3738      	adds	r7, #56	; 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000538 	.word	0x20000538
 8000d7c:	40000400 	.word	0x40000400

08000d80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000db4:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <MX_TIM4_Init+0xec>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000dba:	22ef      	movs	r2, #239	; 0xef
 8000dbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000dc6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000dca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dd8:	4823      	ldr	r0, [pc, #140]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000dda:	f006 feb6 	bl	8007b4a <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000de4:	f000 fdc9 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	4619      	mov	r1, r3
 8000df4:	481c      	ldr	r0, [pc, #112]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000df6:	f007 f98f 	bl	8008118 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e00:	f000 fdbb 	bl	800197a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e04:	4818      	ldr	r0, [pc, #96]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000e06:	f006 fef7 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e10:	f000 fdb3 	bl	800197a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000e24:	f007 fe9a 	bl	8008b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e2e:	f000 fda4 	bl	800197a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000e36:	f240 1339 	movw	r3, #313	; 0x139
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	2208      	movs	r2, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000e4c:	f007 f854 	bl	8007ef8 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e56:	f000 fd90 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM4_Init+0xe8>)
 8000e5c:	f000 fef4 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8000e60:	bf00      	nop
 8000e62:	3738      	adds	r7, #56	; 0x38
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000020c 	.word	0x2000020c
 8000e6c:	40000800 	.word	0x40000800

08000e70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000e96:	22ef      	movs	r2, #239	; 0xef
 8000e98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000ea2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ea6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000eb6:	f006 fe48 	bl	8007b4a <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ec0:	f000 fd5b 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000ed2:	f007 f921 	bl	8008118 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000edc:	f000 fd4d 	bl	800197a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_TIM5_Init+0x94>)
 8000eee:	f007 fe35 	bl	8008b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 fd3f 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200004e8 	.word	0x200004e8
 8000f08:	40000c00 	.word	0x40000c00

08000f0c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <MX_TIM12_Init+0x70>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f26:	22ef      	movs	r2, #239	; 0xef
 8000f28:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f36:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f46:	f006 fe00 	bl	8007b4a <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000f50:	f000 fd13 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_TIM12_Init+0x6c>)
 8000f60:	f007 f8da 	bl	8008118 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000f6a:	f000 fd06 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000868 	.word	0x20000868
 8000f7c:	40001800 	.word	0x40001800

08000f80 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09a      	sub	sp, #104	; 0x68
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	222c      	movs	r2, #44	; 0x2c
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f009 ff6e 	bl	800ae9c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <MX_TIM15_Init+0x144>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fc8:	22ef      	movs	r2, #239	; 0xef
 8000fca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fd4:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000fd8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fec:	4834      	ldr	r0, [pc, #208]	; (80010c0 <MX_TIM15_Init+0x140>)
 8000fee:	f006 fdac 	bl	8007b4a <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000ff8:	f000 fcbf 	bl	800197a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001006:	4619      	mov	r1, r3
 8001008:	482d      	ldr	r0, [pc, #180]	; (80010c0 <MX_TIM15_Init+0x140>)
 800100a:	f007 f885 	bl	8008118 <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001014:	f000 fcb1 	bl	800197a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001018:	4829      	ldr	r0, [pc, #164]	; (80010c0 <MX_TIM15_Init+0x140>)
 800101a:	f006 fded 	bl	8007bf8 <HAL_TIM_PWM_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001024:	f000 fca9 	bl	800197a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001034:	4619      	mov	r1, r3
 8001036:	4822      	ldr	r0, [pc, #136]	; (80010c0 <MX_TIM15_Init+0x140>)
 8001038:	f007 fd90 	bl	8008b5c <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001042:	f000 fc9a 	bl	800197a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001046:	2360      	movs	r3, #96	; 0x60
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800104a:	f240 1339 	movw	r3, #313	; 0x139
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001068:	2204      	movs	r2, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_TIM15_Init+0x140>)
 800106e:	f006 ff43 	bl	8007ef8 <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001078:	f000 fc7f 	bl	800197a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_TIM15_Init+0x140>)
 80010a4:	f007 fde2 	bl	8008c6c <HAL_TIMEx_ConfigBreakDeadTime>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80010ae:	f000 fc64 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM15_Init+0x140>)
 80010b4:	f000 fdc8 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 80010b8:	bf00      	nop
 80010ba:	3768      	adds	r7, #104	; 0x68
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200003e0 	.word	0x200003e0
 80010c4:	40014000 	.word	0x40014000

080010c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_UART4_Init+0x94>)
 80010ce:	4a24      	ldr	r2, [pc, #144]	; (8001160 <MX_UART4_Init+0x98>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_UART4_Init+0x94>)
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_UART4_Init+0x9c>)
 80010d6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_UART4_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_UART4_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_UART4_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_UART4_Init+0x94>)
 80010ec:	220c      	movs	r2, #12
 80010ee:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_UART4_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_UART4_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_UART4_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_UART4_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_UART4_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800110e:	2300      	movs	r3, #0
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_UART4_Init+0x94>)
 8001116:	f009 fd0b 	bl	800ab30 <HAL_RS485Ex_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001120:	f000 fc2b 	bl	800197a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	2100      	movs	r1, #0
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_UART4_Init+0x94>)
 8001128:	f009 fdc3 	bl	800acb2 <HAL_UARTEx_SetTxFifoThreshold>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001132:	f000 fc22 	bl	800197a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_UART4_Init+0x94>)
 800113a:	f009 fdf8 	bl	800ad2e <HAL_UARTEx_SetRxFifoThreshold>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8001144:	f000 fc19 	bl	800197a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_UART4_Init+0x94>)
 800114a:	f009 fd79 	bl	800ac40 <HAL_UARTEx_DisableFifoMode>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8001154:	f000 fc11 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000700 	.word	0x20000700
 8001160:	40004c00 	.word	0x40004c00
 8001164:	001e8480 	.word	0x001e8480

08001168 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 800116e:	4a23      	ldr	r2, [pc, #140]	; (80011fc <MX_USART3_UART_Init+0x94>)
 8001170:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011b2:	f007 fdf7 	bl	8008da4 <HAL_UART_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011bc:	f000 fbdd 	bl	800197a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c0:	2100      	movs	r1, #0
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011c4:	f009 fd75 	bl	800acb2 <HAL_UARTEx_SetTxFifoThreshold>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011ce:	f000 fbd4 	bl	800197a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011d6:	f009 fdaa 	bl	800ad2e <HAL_UARTEx_SetRxFifoThreshold>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011e0:	f000 fbcb 	bl	800197a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_USART3_UART_Init+0x90>)
 80011e6:	f009 fd2b 	bl	800ac40 <HAL_UARTEx_DisableFifoMode>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 fbc3 	bl	800197a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200002d0 	.word	0x200002d0
 80011fc:	40004800 	.word	0x40004800

08001200 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <MX_DMA_Init+0x274>)
 8001208:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800120c:	4a99      	ldr	r2, [pc, #612]	; (8001474 <MX_DMA_Init+0x274>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001216:	4b97      	ldr	r3, [pc, #604]	; (8001474 <MX_DMA_Init+0x274>)
 8001218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001224:	4b93      	ldr	r3, [pc, #588]	; (8001474 <MX_DMA_Init+0x274>)
 8001226:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122a:	4a92      	ldr	r2, [pc, #584]	; (8001474 <MX_DMA_Init+0x274>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001234:	4b8f      	ldr	r3, [pc, #572]	; (8001474 <MX_DMA_Init+0x274>)
 8001236:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 8001242:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <MX_DMA_Init+0x278>)
 8001244:	4a8d      	ldr	r2, [pc, #564]	; (800147c <MX_DMA_Init+0x27c>)
 8001246:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001248:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <MX_DMA_Init+0x278>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800124e:	4b8a      	ldr	r3, [pc, #552]	; (8001478 <MX_DMA_Init+0x278>)
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <MX_DMA_Init+0x278>)
 8001256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 800125c:	4b86      	ldr	r3, [pc, #536]	; (8001478 <MX_DMA_Init+0x278>)
 800125e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001262:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001264:	4b84      	ldr	r3, [pc, #528]	; (8001478 <MX_DMA_Init+0x278>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126a:	4b83      	ldr	r3, [pc, #524]	; (8001478 <MX_DMA_Init+0x278>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <MX_DMA_Init+0x278>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001276:	4b80      	ldr	r3, [pc, #512]	; (8001478 <MX_DMA_Init+0x278>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <MX_DMA_Init+0x278>)
 800127e:	2204      	movs	r2, #4
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <MX_DMA_Init+0x278>)
 8001284:	2203      	movs	r2, #3
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <MX_DMA_Init+0x278>)
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <MX_DMA_Init+0x278>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 8001294:	4878      	ldr	r0, [pc, #480]	; (8001478 <MX_DMA_Init+0x278>)
 8001296:	f001 fbfb 	bl	8002a90 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 80012a0:	f000 fb6b 	bl	800197a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <MX_DMA_Init+0x280>)
 80012a6:	4a77      	ldr	r2, [pc, #476]	; (8001484 <MX_DMA_Init+0x284>)
 80012a8:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 80012aa:	4b75      	ldr	r3, [pc, #468]	; (8001480 <MX_DMA_Init+0x280>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012b0:	4b73      	ldr	r3, [pc, #460]	; (8001480 <MX_DMA_Init+0x280>)
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <MX_DMA_Init+0x280>)
 80012b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012bc:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <MX_DMA_Init+0x280>)
 80012c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <MX_DMA_Init+0x280>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <MX_DMA_Init+0x280>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <MX_DMA_Init+0x280>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <MX_DMA_Init+0x280>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012de:	4b68      	ldr	r3, [pc, #416]	; (8001480 <MX_DMA_Init+0x280>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012e4:	4b66      	ldr	r3, [pc, #408]	; (8001480 <MX_DMA_Init+0x280>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 80012ea:	4b65      	ldr	r3, [pc, #404]	; (8001480 <MX_DMA_Init+0x280>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012f0:	4b63      	ldr	r3, [pc, #396]	; (8001480 <MX_DMA_Init+0x280>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 80012f6:	4862      	ldr	r0, [pc, #392]	; (8001480 <MX_DMA_Init+0x280>)
 80012f8:	f001 fbca 	bl	8002a90 <HAL_DMA_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 8001302:	f000 fb3a 	bl	800197a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8001306:	4b60      	ldr	r3, [pc, #384]	; (8001488 <MX_DMA_Init+0x288>)
 8001308:	4a60      	ldr	r2, [pc, #384]	; (800148c <MX_DMA_Init+0x28c>)
 800130a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <MX_DMA_Init+0x288>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001312:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <MX_DMA_Init+0x288>)
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <MX_DMA_Init+0x288>)
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001320:	4b59      	ldr	r3, [pc, #356]	; (8001488 <MX_DMA_Init+0x288>)
 8001322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001326:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <MX_DMA_Init+0x288>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <MX_DMA_Init+0x288>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <MX_DMA_Init+0x288>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <MX_DMA_Init+0x288>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001340:	4b51      	ldr	r3, [pc, #324]	; (8001488 <MX_DMA_Init+0x288>)
 8001342:	2204      	movs	r2, #4
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001346:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MX_DMA_Init+0x288>)
 8001348:	2203      	movs	r2, #3
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 800134c:	4b4e      	ldr	r3, [pc, #312]	; (8001488 <MX_DMA_Init+0x288>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MX_DMA_Init+0x288>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8001358:	484b      	ldr	r0, [pc, #300]	; (8001488 <MX_DMA_Init+0x288>)
 800135a:	f001 fb99 	bl	8002a90 <HAL_DMA_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 8001364:	f000 fb09 	bl	800197a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <MX_DMA_Init+0x290>)
 800136a:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <MX_DMA_Init+0x294>)
 800136c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <MX_DMA_Init+0x290>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <MX_DMA_Init+0x290>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 800137a:	4b45      	ldr	r3, [pc, #276]	; (8001490 <MX_DMA_Init+0x290>)
 800137c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001380:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b43      	ldr	r3, [pc, #268]	; (8001490 <MX_DMA_Init+0x290>)
 8001384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001388:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <MX_DMA_Init+0x290>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001390:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <MX_DMA_Init+0x290>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <MX_DMA_Init+0x290>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <MX_DMA_Init+0x290>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <MX_DMA_Init+0x290>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013a8:	4b39      	ldr	r3, [pc, #228]	; (8001490 <MX_DMA_Init+0x290>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <MX_DMA_Init+0x290>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <MX_DMA_Init+0x290>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <MX_DMA_Init+0x290>)
 80013bc:	f001 fb68 	bl	8002a90 <HAL_DMA_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 80013c6:	f000 fad8 	bl	800197a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <MX_DMA_Init+0x298>)
 80013cc:	4a33      	ldr	r2, [pc, #204]	; (800149c <MX_DMA_Init+0x29c>)
 80013ce:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_DMA_Init+0x298>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <MX_DMA_Init+0x298>)
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_DMA_Init+0x298>)
 80013de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_DMA_Init+0x298>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ea:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <MX_DMA_Init+0x298>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_DMA_Init+0x298>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <MX_DMA_Init+0x298>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <MX_DMA_Init+0x298>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_DMA_Init+0x298>)
 8001406:	2204      	movs	r2, #4
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_DMA_Init+0x298>)
 800140c:	2203      	movs	r2, #3
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_DMA_Init+0x298>)
 8001412:	2200      	movs	r2, #0
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_DMA_Init+0x298>)
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <MX_DMA_Init+0x298>)
 800141e:	f001 fb37 	bl	8002a90 <HAL_DMA_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001428:	f000 faa7 	bl	800197a <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	200c      	movs	r0, #12
 8001432:	f001 fa0e 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001436:	200c      	movs	r0, #12
 8001438:	f001 fa25 	bl	8002886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	200d      	movs	r0, #13
 8001442:	f001 fa06 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001446:	200d      	movs	r0, #13
 8001448:	f001 fa1d 	bl	8002886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2038      	movs	r0, #56	; 0x38
 8001452:	f001 f9fe 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001456:	2038      	movs	r0, #56	; 0x38
 8001458:	f001 fa15 	bl	8002886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2039      	movs	r0, #57	; 0x39
 8001462:	f001 f9f6 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001466:	2039      	movs	r0, #57	; 0x39
 8001468:	f001 fa0d 	bl	8002886 <HAL_NVIC_EnableIRQ>

}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	20000360 	.word	0x20000360
 800147c:	40020058 	.word	0x40020058
 8001480:	20000798 	.word	0x20000798
 8001484:	40020440 	.word	0x40020440
 8001488:	2000060c 	.word	0x2000060c
 800148c:	40020458 	.word	0x40020458
 8001490:	200000a4 	.word	0x200000a4
 8001494:	40020470 	.word	0x40020470
 8001498:	2000011c 	.word	0x2000011c
 800149c:	40020488 	.word	0x40020488

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b6:	4b7b      	ldr	r3, [pc, #492]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a79      	ldr	r2, [pc, #484]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d4:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4a6a      	ldr	r2, [pc, #424]	; (80016a4 <MX_GPIO_Init+0x204>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <MX_GPIO_Init+0x204>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <MX_GPIO_Init+0x204>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <MX_GPIO_Init+0x204>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <MX_GPIO_Init+0x204>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001588:	2200      	movs	r2, #0
 800158a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800158e:	4846      	ldr	r0, [pc, #280]	; (80016a8 <MX_GPIO_Init+0x208>)
 8001590:	f003 fe52 	bl	8005238 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f24c 0102 	movw	r1, #49154	; 0xc002
 800159a:	4844      	ldr	r0, [pc, #272]	; (80016ac <MX_GPIO_Init+0x20c>)
 800159c:	f003 fe4c 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a6:	4842      	ldr	r0, [pc, #264]	; (80016b0 <MX_GPIO_Init+0x210>)
 80015a8:	f003 fe46 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b2:	4840      	ldr	r0, [pc, #256]	; (80016b4 <MX_GPIO_Init+0x214>)
 80015b4:	f003 fe40 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80015b8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80015bc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4835      	ldr	r0, [pc, #212]	; (80016a8 <MX_GPIO_Init+0x208>)
 80015d2:	f003 fc81 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 80015d6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <MX_GPIO_Init+0x218>)
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4830      	ldr	r0, [pc, #192]	; (80016ac <MX_GPIO_Init+0x20c>)
 80015ec:	f003 fc74 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80015f0:	f24c 0302 	movw	r3, #49154	; 0xc002
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4828      	ldr	r0, [pc, #160]	; (80016ac <MX_GPIO_Init+0x20c>)
 800160a:	f003 fc65 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4822      	ldr	r0, [pc, #136]	; (80016b0 <MX_GPIO_Init+0x210>)
 8001628:	f003 fc56 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	481b      	ldr	r0, [pc, #108]	; (80016b4 <MX_GPIO_Init+0x214>)
 8001646:	f003 fc47 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800164a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <MX_GPIO_Init+0x21c>)
 8001660:	f003 fc3a 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001664:	23c0      	movs	r3, #192	; 0xc0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_GPIO_Init+0x218>)
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_GPIO_Init+0x208>)
 8001678:	f003 fc2e 	bl	8004ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2103      	movs	r1, #3
 8001680:	2017      	movs	r0, #23
 8001682:	f001 f8e6 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001686:	2017      	movs	r0, #23
 8001688:	f001 f8fd 	bl	8002886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2103      	movs	r1, #3
 8001690:	2028      	movs	r0, #40	; 0x28
 8001692:	f001 f8de 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001696:	2028      	movs	r0, #40	; 0x28
 8001698:	f001 f8f5 	bl	8002886 <HAL_NVIC_EnableIRQ>

}
 800169c:	bf00      	nop
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	58024400 	.word	0x58024400
 80016a8:	58020400 	.word	0x58020400
 80016ac:	58021000 	.word	0x58021000
 80016b0:	58020c00 	.word	0x58020c00
 80016b4:	58020800 	.word	0x58020800
 80016b8:	11110000 	.word	0x11110000
 80016bc:	58021800 	.word	0x58021800

080016c0 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80016c8:	1d39      	adds	r1, r7, #4
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	2201      	movs	r2, #1
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <__io_putchar+0x20>)
 80016d2:	f007 fbb7 	bl	8008e44 <HAL_UART_Transmit>

return ch;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002d0 	.word	0x200002d0

080016e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a83      	ldr	r2, [pc, #524]	; (80018fc <HAL_UART_RxCpltCallback+0x218>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f040 80ff 	bne.w	80018f4 <HAL_UART_RxCpltCallback+0x210>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 80016f6:	4b82      	ldr	r3, [pc, #520]	; (8001900 <HAL_UART_RxCpltCallback+0x21c>)
 80016f8:	22ac      	movs	r2, #172	; 0xac
 80016fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	2201      	movs	r2, #1
 8001700:	497f      	ldr	r1, [pc, #508]	; (8001900 <HAL_UART_RxCpltCallback+0x21c>)
 8001702:	487e      	ldr	r0, [pc, #504]	; (80018fc <HAL_UART_RxCpltCallback+0x218>)
 8001704:	f007 fb9e 	bl	8008e44 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2101      	movs	r1, #1
 800170c:	487d      	ldr	r0, [pc, #500]	; (8001904 <HAL_UART_RxCpltCallback+0x220>)
 800170e:	f003 fd93 	bl	8005238 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2102      	movs	r1, #2
 8001716:	487c      	ldr	r0, [pc, #496]	; (8001908 <HAL_UART_RxCpltCallback+0x224>)
 8001718:	f003 fd8e 	bl	8005238 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001722:	4878      	ldr	r0, [pc, #480]	; (8001904 <HAL_UART_RxCpltCallback+0x220>)
 8001724:	f003 fd88 	bl	8005238 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8001728:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	b2db      	uxtb	r3, r3
 8001732:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 8001734:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 800173e:	2400      	movs	r4, #0
 8001740:	e006      	b.n	8001750 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 8001744:	5d1b      	ldrb	r3, [r3, r4]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 800174e:	3401      	adds	r4, #1
 8001750:	2c02      	cmp	r4, #2
 8001752:	ddf6      	ble.n	8001742 <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 80ad 	bne.w	80018c4 <HAL_UART_RxCpltCallback+0x1e0>
		{
			switch(num_mode)
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	2b0e      	cmp	r3, #14
 8001772:	f200 8095 	bhi.w	80018a0 <HAL_UART_RxCpltCallback+0x1bc>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <HAL_UART_RxCpltCallback+0x98>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	080018a1 	.word	0x080018a1
 8001780:	080018a1 	.word	0x080018a1
 8001784:	080018a1 	.word	0x080018a1
 8001788:	080018a1 	.word	0x080018a1
 800178c:	080018a1 	.word	0x080018a1
 8001790:	080017b9 	.word	0x080017b9
 8001794:	080017e9 	.word	0x080017e9
 8001798:	08001819 	.word	0x08001819
 800179c:	08001849 	.word	0x08001849
 80017a0:	08001879 	.word	0x08001879
 80017a4:	08001881 	.word	0x08001881
 80017a8:	08001889 	.word	0x08001889
 80017ac:	08001891 	.word	0x08001891
 80017b0:	08001899 	.word	0x08001899
 80017b4:	080018a1 	.word	0x080018a1
			{
				case 6:		// q1 Mode
				{
					q1 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b29b      	uxth	r3, r3
 80017c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017da:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <HAL_UART_RxCpltCallback+0x22c>)
 80017dc:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 80017e0:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_UART_RxCpltCallback+0x230>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
					break;
 80017e6:	e05c      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 7:		// q2 Mode
				{
					q2 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b21b      	sxth	r3, r3
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_UART_RxCpltCallback+0x234>)
 800180c:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_UART_RxCpltCallback+0x230>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
					break;
 8001816:	e044      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 8:		// q3 Mode
				{
					q3 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4413      	add	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	b21b      	sxth	r3, r3
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_UART_RxCpltCallback+0x238>)
 800183c:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_UART_RxCpltCallback+0x230>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
					break;
 8001846:	e02c      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 9:		// q4 Mode
				{
					q4 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b29b      	uxth	r3, r3
 8001850:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21b      	sxth	r3, r3
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_UART_RxCpltCallback+0x23c>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_UART_RxCpltCallback+0x230>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
					break;
 8001876:	e014      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_UART_RxCpltCallback+0x240>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
					break;
 800187e:	e010      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_UART_RxCpltCallback+0x244>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
					break;
 8001886:	e00c      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 8001888:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_UART_RxCpltCallback+0x248>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
					break;
 800188e:	e008      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_UART_RxCpltCallback+0x24c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
					break;
 8001896:	e004      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_UART_RxCpltCallback+0x250>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
					break;
 800189e:	e000      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1be>
				{
					break;
				}
				default:
				{
					break;
 80018a0:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2101      	movs	r1, #1
 80018a6:	4817      	ldr	r0, [pc, #92]	; (8001904 <HAL_UART_RxCpltCallback+0x220>)
 80018a8:	f003 fcc6 	bl	8005238 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2102      	movs	r1, #2
 80018b0:	4815      	ldr	r0, [pc, #84]	; (8001908 <HAL_UART_RxCpltCallback+0x224>)
 80018b2:	f003 fcc1 	bl	8005238 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <HAL_UART_RxCpltCallback+0x220>)
 80018be:	f003 fcbb 	bl	8005238 <HAL_GPIO_WritePin>
 80018c2:	e012      	b.n	80018ea <HAL_UART_RxCpltCallback+0x206>
		}
		else
		{
			  State_Checksum_Error = 1;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_UART_RxCpltCallback+0x254>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <HAL_UART_RxCpltCallback+0x220>)
 80018d0:	f003 fcb2 	bl	8005238 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2102      	movs	r1, #2
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <HAL_UART_RxCpltCallback+0x224>)
 80018da:	f003 fcad 	bl	8005238 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <HAL_UART_RxCpltCallback+0x220>)
 80018e6:	f003 fca7 	bl	8005238 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 80018ea:	2204      	movs	r2, #4
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <HAL_UART_RxCpltCallback+0x228>)
 80018ee:	4803      	ldr	r0, [pc, #12]	; (80018fc <HAL_UART_RxCpltCallback+0x218>)
 80018f0:	f007 fb3e 	bl	8008f70 <HAL_UART_Receive_IT>
	}
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	200002d0 	.word	0x200002d0
 8001900:	200006b0 	.word	0x200006b0
 8001904:	58020400 	.word	0x58020400
 8001908:	58021000 	.word	0x58021000
 800190c:	2000093c 	.word	0x2000093c
 8001910:	200006a8 	.word	0x200006a8
 8001914:	20000534 	.word	0x20000534
 8001918:	20000460 	.word	0x20000460
 800191c:	20000698 	.word	0x20000698
 8001920:	200008b8 	.word	0x200008b8
 8001924:	200006b1 	.word	0x200006b1
 8001928:	200006b2 	.word	0x200006b2
 800192c:	200000a0 	.word	0x200000a0
 8001930:	20000938 	.word	0x20000938
 8001934:	2000045c 	.word	0x2000045c
 8001938:	200008b4 	.word	0x200008b4

0800193c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]


}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197e:	b672      	cpsid	i
}
 8001980:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001982:	e7fe      	b.n	8001982 <Error_Handler+0x8>

08001984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_MspInit+0x30>)
 800198c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x30>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x30>)
 800199c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	58024400 	.word	0x58024400

080019b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_CRC_MspInit+0x3c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10e      	bne.n	80019e8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_CRC_MspInit+0x40>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_CRC_MspInit+0x40>)
 80019d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_CRC_MspInit+0x40>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	58024c00 	.word	0x58024c00
 80019f8:	58024400 	.word	0x58024400

080019fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0b8      	sub	sp, #224	; 0xe0
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	22bc      	movs	r2, #188	; 0xbc
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f009 fa3d 	bl	800ae9c <memset>
  if(hspi->Instance==SPI3)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_SPI_MspInit+0xc0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d142      	bne.n	8001ab2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fc06 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a46:	f7ff ff98 	bl	800197a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_SPI_MspInit+0xc8>)
 8001aae:	f003 fa13 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	37e0      	adds	r7, #224	; 0xe0
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40003c00 	.word	0x40003c00
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	58020800 	.word	0x58020800

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a55      	ldr	r2, [pc, #340]	; (8001c2c <HAL_TIM_Base_MspInit+0x164>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10f      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aea:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001af8:	e094      	b.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b02:	d10f      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b14:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
}
 8001b22:	e07f      	b.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	; (8001c34 <HAL_TIM_Base_MspInit+0x16c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d10f      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b34:	4a3e      	ldr	r2, [pc, #248]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
}
 8001b4c:	e06a      	b.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <HAL_TIM_Base_MspInit+0x170>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d10f      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
}
 8001b76:	e055      	b.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <HAL_TIM_Base_MspInit+0x174>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d117      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2032      	movs	r0, #50	; 0x32
 8001ba6:	f000 fe54 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001baa:	2032      	movs	r0, #50	; 0x32
 8001bac:	f000 fe6b 	bl	8002886 <HAL_NVIC_EnableIRQ>
}
 8001bb0:	e038      	b.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_TIM_Base_MspInit+0x178>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d117      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	202b      	movs	r0, #43	; 0x2b
 8001be0:	f000 fe37 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001be4:	202b      	movs	r0, #43	; 0x2b
 8001be6:	f000 fe4e 	bl	8002886 <HAL_NVIC_EnableIRQ>
}
 8001bea:	e01b      	b.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_TIM_Base_MspInit+0x17c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d116      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_TIM_Base_MspInit+0x168>)
 8001c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2074      	movs	r0, #116	; 0x74
 8001c1a:	f000 fe1a 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001c1e:	2074      	movs	r0, #116	; 0x74
 8001c20:	f000 fe31 	bl	8002886 <HAL_NVIC_EnableIRQ>
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	58024400 	.word	0x58024400
 8001c34:	40000400 	.word	0x40000400
 8001c38:	40000800 	.word	0x40000800
 8001c3c:	40000c00 	.word	0x40000c00
 8001c40:	40001800 	.word	0x40001800
 8001c44:	40014000 	.word	0x40014000

08001c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5e      	ldr	r2, [pc, #376]	; (8001de0 <HAL_TIM_MspPostInit+0x198>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d120      	bne.n	8001cac <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c6a:	4b5e      	ldr	r3, [pc, #376]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	4a5c      	ldr	r2, [pc, #368]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4850      	ldr	r0, [pc, #320]	; (8001de8 <HAL_TIM_MspPostInit+0x1a0>)
 8001ca6:	f003 f917 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001caa:	e094      	b.n	8001dd6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d120      	bne.n	8001cf8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	483e      	ldr	r0, [pc, #248]	; (8001dec <HAL_TIM_MspPostInit+0x1a4>)
 8001cf2:	f003 f8f1 	bl	8004ed8 <HAL_GPIO_Init>
}
 8001cf6:	e06e      	b.n	8001dd6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_TIM_MspPostInit+0x1a8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d11f      	bne.n	8001d42 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001d20:	2340      	movs	r3, #64	; 0x40
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	482e      	ldr	r0, [pc, #184]	; (8001df4 <HAL_TIM_MspPostInit+0x1ac>)
 8001d3c:	f003 f8cc 	bl	8004ed8 <HAL_GPIO_Init>
}
 8001d40:	e049      	b.n	8001dd6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <HAL_TIM_MspPostInit+0x1b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d120      	bne.n	8001d8e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4619      	mov	r1, r3
 8001d86:	4819      	ldr	r0, [pc, #100]	; (8001dec <HAL_TIM_MspPostInit+0x1a4>)
 8001d88:	f003 f8a6 	bl	8004ed8 <HAL_GPIO_Init>
}
 8001d8c:	e023      	b.n	8001dd6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_TIM_MspPostInit+0x1b4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11e      	bne.n	8001dd6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_TIM_MspPostInit+0x19c>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <HAL_TIM_MspPostInit+0x1a0>)
 8001dd2:	f003 f881 	bl	8004ed8 <HAL_GPIO_Init>
}
 8001dd6:	bf00      	nop
 8001dd8:	3730      	adds	r7, #48	; 0x30
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40010000 	.word	0x40010000
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58021000 	.word	0x58021000
 8001dec:	58020400 	.word	0x58020400
 8001df0:	40000400 	.word	0x40000400
 8001df4:	58020000 	.word	0x58020000
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40014000 	.word	0x40014000

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0bc      	sub	sp, #240	; 0xf0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	22bc      	movs	r2, #188	; 0xbc
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f009 f83b 	bl	800ae9c <memset>
  if(huart->Instance==UART4)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <HAL_UART_MspInit+0x1c8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	f040 80db 	bne.w	8001fe8 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e32:	2302      	movs	r3, #2
 8001e34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 fa03 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001e4c:	f7ff fd95 	bl	800197a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e56:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7e:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	4a4e      	ldr	r2, [pc, #312]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ece:	4619      	mov	r1, r3
 8001ed0:	483f      	ldr	r0, [pc, #252]	; (8001fd0 <HAL_UART_MspInit+0x1d0>)
 8001ed2:	f003 f801 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4836      	ldr	r0, [pc, #216]	; (8001fd4 <HAL_UART_MspInit+0x1d4>)
 8001efc:	f002 ffec 	bl	8004ed8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f02:	4a36      	ldr	r2, [pc, #216]	; (8001fdc <HAL_UART_MspInit+0x1dc>)
 8001f04:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f3e:	4826      	ldr	r0, [pc, #152]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f40:	f000 fda6 	bl	8002a90 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001f4a:	f7ff fd16 	bl	800197a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f52:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f54:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <HAL_UART_MspInit+0x1e4>)
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001f9a:	f000 fd79 	bl	8002a90 <HAL_DMA_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001fa4:	f7ff fce9 	bl	800197a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001fac:	679a      	str	r2, [r3, #120]	; 0x78
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_UART_MspInit+0x1e0>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2034      	movs	r0, #52	; 0x34
 8001fba:	f000 fc4a 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001fbe:	2034      	movs	r0, #52	; 0x34
 8001fc0:	f000 fc61 	bl	8002886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fc4:	e0bd      	b.n	8002142 <HAL_UART_MspInit+0x342>
 8001fc6:	bf00      	nop
 8001fc8:	40004c00 	.word	0x40004c00
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	58020000 	.word	0x58020000
 8001fd4:	58020c00 	.word	0x58020c00
 8001fd8:	20000194 	.word	0x20000194
 8001fdc:	40020410 	.word	0x40020410
 8001fe0:	200008c0 	.word	0x200008c0
 8001fe4:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a57      	ldr	r2, [pc, #348]	; (800214c <HAL_UART_MspInit+0x34c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	f040 80a7 	bne.w	8002142 <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffe:	f107 0320 	add.w	r3, r7, #32
 8002002:	4618      	mov	r0, r3
 8002004:	f004 f922 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_UART_MspInit+0x212>
      Error_Handler();
 800200e:	f7ff fcb4 	bl	800197a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002012:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <HAL_UART_MspInit+0x350>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002018:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_UART_MspInit+0x350>)
 800201a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_UART_MspInit+0x350>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_UART_MspInit+0x350>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a46      	ldr	r2, [pc, #280]	; (8002150 <HAL_UART_MspInit+0x350>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_UART_MspInit+0x350>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002068:	2307      	movs	r3, #7
 800206a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002072:	4619      	mov	r1, r3
 8002074:	4837      	ldr	r0, [pc, #220]	; (8002154 <HAL_UART_MspInit+0x354>)
 8002076:	f002 ff2f 	bl	8004ed8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_UART_MspInit+0x358>)
 800207c:	4a37      	ldr	r2, [pc, #220]	; (800215c <HAL_UART_MspInit+0x35c>)
 800207e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <HAL_UART_MspInit+0x358>)
 8002082:	222d      	movs	r2, #45	; 0x2d
 8002084:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_UART_MspInit+0x358>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_UART_MspInit+0x358>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <HAL_UART_MspInit+0x358>)
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_UART_MspInit+0x358>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020ba:	4827      	ldr	r0, [pc, #156]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020bc:	f000 fce8 	bl	8002a90 <HAL_DMA_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 80020c6:	f7ff fc58 	bl	800197a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a22      	ldr	r2, [pc, #136]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80020d0:	4a21      	ldr	r2, [pc, #132]	; (8002158 <HAL_UART_MspInit+0x358>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <HAL_UART_MspInit+0x364>)
 80020da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020de:	222e      	movs	r2, #46	; 0x2e
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_UART_MspInit+0x360>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_UART_MspInit+0x360>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002108:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_UART_MspInit+0x360>)
 800210a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_UART_MspInit+0x360>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <HAL_UART_MspInit+0x360>)
 8002118:	f000 fcba 	bl	8002a90 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_MspInit+0x326>
      Error_Handler();
 8002122:	f7ff fc2a 	bl	800197a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_UART_MspInit+0x360>)
 800212a:	679a      	str	r2, [r3, #120]	; 0x78
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_UART_MspInit+0x360>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2027      	movs	r0, #39	; 0x27
 8002138:	f000 fb8b 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800213c:	2027      	movs	r0, #39	; 0x27
 800213e:	f000 fba2 	bl	8002886 <HAL_NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	37f0      	adds	r7, #240	; 0xf0
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40004800 	.word	0x40004800
 8002150:	58024400 	.word	0x58024400
 8002154:	58020c00 	.word	0x58020c00
 8002158:	20000258 	.word	0x20000258
 800215c:	40020028 	.word	0x40020028
 8002160:	20000470 	.word	0x20000470
 8002164:	40020040 	.word	0x40020040

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 fa46 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA1_Stream1_IRQHandler+0x10>)
 80021c2:	f001 fd23 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000258 	.word	0x20000258

080021d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <DMA1_Stream2_IRQHandler+0x10>)
 80021d6:	f001 fd19 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000470 	.word	0x20000470

080021e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021e8:	2040      	movs	r0, #64	; 0x40
 80021ea:	f003 f83e 	bl	800526a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021ee:	2080      	movs	r0, #128	; 0x80
 80021f0:	f003 f83b 	bl	800526a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <USART3_IRQHandler+0x10>)
 80021fe:	f006 fefd 	bl	8008ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002d0 	.word	0x200002d0

0800220c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002210:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002214:	f003 f829 	bl	800526a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002218:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800221c:	f003 f825 	bl	800526a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002220:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002224:	f003 f821 	bl	800526a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002228:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800222c:	f003 f81d 	bl	800526a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800223a:	f005 fd3e 	bl	8007cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000868 	.word	0x20000868

08002248 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <TIM5_IRQHandler+0x10>)
 800224e:	f005 fd34 	bl	8007cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200004e8 	.word	0x200004e8

0800225c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <UART4_IRQHandler+0x10>)
 8002262:	f006 fecb 	bl	8008ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000700 	.word	0x20000700

08002270 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA2_Stream0_IRQHandler+0x10>)
 8002276:	f001 fcc9 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000194 	.word	0x20000194

08002284 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA2_Stream1_IRQHandler+0x10>)
 800228a:	f001 fcbf 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200008c0 	.word	0x200008c0

08002298 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM15_IRQHandler+0x10>)
 800229e:	f005 fd0c 	bl	8007cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200003e0 	.word	0x200003e0

080022ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e00a      	b.n	80022d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022be:	f3af 8000 	nop.w
 80022c2:	4601      	mov	r1, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	dbf0      	blt.n	80022be <_read+0x12>
	}

return len;
 80022dc:	687b      	ldr	r3, [r7, #4]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e009      	b.n	800230c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff f9dd 	bl	80016c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf1      	blt.n	80022f8 <_write+0x12>
	}
	return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_close>:

int _close(int file)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002346:	605a      	str	r2, [r3, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_isatty>:

int _isatty(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	return 1;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <_sbrk+0x5c>)
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <_sbrk+0x60>)
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_sbrk+0x64>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <_sbrk+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d207      	bcs.n	80023c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b8:	f008 fd46 	bl	800ae48 <__errno>
 80023bc:	4603      	mov	r3, r0
 80023be:	220c      	movs	r2, #12
 80023c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	e009      	b.n	80023dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <_sbrk+0x64>)
 80023d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20020000 	.word	0x20020000
 80023e8:	00000400 	.word	0x00000400
 80023ec:	20000094 	.word	0x20000094
 80023f0:	20000958 	.word	0x20000958

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <SystemInit+0xec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <SystemInit+0xec>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <SystemInit+0xf0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	2b06      	cmp	r3, #6
 8002412:	d807      	bhi.n	8002424 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002414:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <SystemInit+0xf0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 030f 	bic.w	r3, r3, #15
 800241c:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <SystemInit+0xf0>)
 800241e:	f043 0307 	orr.w	r3, r3, #7
 8002422:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002424:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <SystemInit+0xf4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <SystemInit+0xf4>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002430:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <SystemInit+0xf4>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002436:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <SystemInit+0xf4>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	492b      	ldr	r1, [pc, #172]	; (80024e8 <SystemInit+0xf4>)
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <SystemInit+0xf8>)
 800243e:	4013      	ands	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <SystemInit+0xf0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <SystemInit+0xf0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 030f 	bic.w	r3, r3, #15
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <SystemInit+0xf0>)
 8002458:	f043 0307 	orr.w	r3, r3, #7
 800245c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <SystemInit+0xf4>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <SystemInit+0xf4>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <SystemInit+0xf4>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <SystemInit+0xf4>)
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <SystemInit+0xfc>)
 8002474:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <SystemInit+0xf4>)
 8002478:	4a1e      	ldr	r2, [pc, #120]	; (80024f4 <SystemInit+0x100>)
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <SystemInit+0xf4>)
 800247e:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <SystemInit+0x104>)
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <SystemInit+0xf4>)
 8002484:	2200      	movs	r2, #0
 8002486:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <SystemInit+0xf4>)
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <SystemInit+0x104>)
 800248c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <SystemInit+0xf4>)
 8002490:	2200      	movs	r2, #0
 8002492:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <SystemInit+0xf4>)
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <SystemInit+0x104>)
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <SystemInit+0xf4>)
 800249c:	2200      	movs	r2, #0
 800249e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <SystemInit+0xf4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <SystemInit+0xf4>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <SystemInit+0xf4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <SystemInit+0x108>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <SystemInit+0x10c>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024be:	d202      	bcs.n	80024c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <SystemInit+0x110>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <SystemInit+0x114>)
 80024c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SystemInit+0xec>)
 80024d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	52002000 	.word	0x52002000
 80024e8:	58024400 	.word	0x58024400
 80024ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80024f0:	02020200 	.word	0x02020200
 80024f4:	01ff0000 	.word	0x01ff0000
 80024f8:	01010280 	.word	0x01010280
 80024fc:	5c001000 	.word	0x5c001000
 8002500:	ffff0000 	.word	0xffff0000
 8002504:	51008108 	.word	0x51008108
 8002508:	52004000 	.word	0x52004000

0800250c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800250c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002544 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002510:	f7ff ff70 	bl	80023f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002516:	490d      	ldr	r1, [pc, #52]	; (800254c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800251c:	e002      	b.n	8002524 <LoopCopyDataInit>

0800251e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002522:	3304      	adds	r3, #4

08002524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002528:	d3f9      	bcc.n	800251e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800252c:	4c0a      	ldr	r4, [pc, #40]	; (8002558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002530:	e001      	b.n	8002536 <LoopFillZerobss>

08002532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002534:	3204      	adds	r2, #4

08002536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002538:	d3fb      	bcc.n	8002532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253a:	f008 fc8b 	bl	800ae54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253e:	f7fe f89b 	bl	8000678 <main>
  bx  lr
 8002542:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800254c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002550:	0800be6c 	.word	0x0800be6c
  ldr r2, =_sbss
 8002554:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002558:	20000954 	.word	0x20000954

0800255c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC3_IRQHandler>
	...

08002560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002566:	2003      	movs	r0, #3
 8002568:	f000 f968 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800256c:	f003 fc98 	bl	8005ea0 <HAL_RCC_GetSysClockFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_Init+0x68>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4913      	ldr	r1, [pc, #76]	; (80025cc <HAL_Init+0x6c>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_Init+0x68>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_Init+0x6c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <HAL_Init+0x70>)
 80025a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025a4:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <HAL_Init+0x74>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025aa:	2000      	movs	r0, #0
 80025ac:	f000 f814 	bl	80025d8 <HAL_InitTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e002      	b.n	80025c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025ba:	f7ff f9e3 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	58024400 	.word	0x58024400
 80025cc:	0800bd84 	.word	0x0800bd84
 80025d0:	20000004 	.word	0x20000004
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_InitTick+0x60>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e021      	b.n	8002630 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_InitTick+0x64>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_InitTick+0x60>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f94d 	bl	80028a2 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f000 f917 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x68>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	2000000c 	.word	0x2000000c
 800263c:	20000000 	.word	0x20000000
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000940 	.word	0x20000940

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000940 	.word	0x20000940

08002684 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetREVID+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0c1b      	lsrs	r3, r3, #16
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	5c001000 	.word	0x5c001000

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <__NVIC_SetPriorityGrouping+0x40>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x40>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00
 80026e0:	05fa0000 	.word	0x05fa0000

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_SetPriority+0x50>)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff29 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002860:	f7ff ff40 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7ff ff90 	bl	8002790 <NVIC_EncodePriority>
 8002870:	4602      	mov	r2, r0
 8002872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff5f 	bl	800273c <__NVIC_SetPriority>
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff33 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffa4 	bl	80027f8 <SysTick_Config>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e054      	b.n	8002978 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7f5b      	ldrb	r3, [r3, #29]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff f86a 	bl	80019b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	791b      	ldrb	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_CRC_Init+0xc4>)
 80028f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0218 	bic.w	r2, r2, #24
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	e00c      	b.n	8002926 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f834 	bl	8002984 <HAL_CRCEx_Polynomial_Set>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e028      	b.n	8002978 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	795b      	ldrb	r3, [r3, #5]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f04f 32ff 	mov.w	r2, #4294967295
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	e004      	b.n	8002944 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6912      	ldr	r2, [r2, #16]
 8002942:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	04c11db7 	.word	0x04c11db7

08002984 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002994:	231f      	movs	r3, #31
 8002996:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002998:	bf00      	nop
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	613a      	str	r2, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_CRCEx_Polynomial_Set+0x16>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b18      	cmp	r3, #24
 80029bc:	d846      	bhi.n	8002a4c <HAL_CRCEx_Polynomial_Set+0xc8>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	08002a53 	.word	0x08002a53
 80029c8:	08002a4d 	.word	0x08002a4d
 80029cc:	08002a4d 	.word	0x08002a4d
 80029d0:	08002a4d 	.word	0x08002a4d
 80029d4:	08002a4d 	.word	0x08002a4d
 80029d8:	08002a4d 	.word	0x08002a4d
 80029dc:	08002a4d 	.word	0x08002a4d
 80029e0:	08002a4d 	.word	0x08002a4d
 80029e4:	08002a41 	.word	0x08002a41
 80029e8:	08002a4d 	.word	0x08002a4d
 80029ec:	08002a4d 	.word	0x08002a4d
 80029f0:	08002a4d 	.word	0x08002a4d
 80029f4:	08002a4d 	.word	0x08002a4d
 80029f8:	08002a4d 	.word	0x08002a4d
 80029fc:	08002a4d 	.word	0x08002a4d
 8002a00:	08002a4d 	.word	0x08002a4d
 8002a04:	08002a35 	.word	0x08002a35
 8002a08:	08002a4d 	.word	0x08002a4d
 8002a0c:	08002a4d 	.word	0x08002a4d
 8002a10:	08002a4d 	.word	0x08002a4d
 8002a14:	08002a4d 	.word	0x08002a4d
 8002a18:	08002a4d 	.word	0x08002a4d
 8002a1c:	08002a4d 	.word	0x08002a4d
 8002a20:	08002a4d 	.word	0x08002a4d
 8002a24:	08002a29 	.word	0x08002a29
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d913      	bls.n	8002a56 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a32:	e010      	b.n	8002a56 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b07      	cmp	r3, #7
 8002a38:	d90f      	bls.n	8002a5a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a3e:	e00c      	b.n	8002a5a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	d90b      	bls.n	8002a5e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a4a:	e008      	b.n	8002a5e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a50:	e006      	b.n	8002a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a5e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 0118 	bic.w	r1, r3, #24
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff fde8 	bl	800266c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e316      	b.n	80030d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a66      	ldr	r2, [pc, #408]	; (8002c48 <HAL_DMA_Init+0x1b8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04a      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <HAL_DMA_Init+0x1bc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d045      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a63      	ldr	r2, [pc, #396]	; (8002c50 <HAL_DMA_Init+0x1c0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d040      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a62      	ldr	r2, [pc, #392]	; (8002c54 <HAL_DMA_Init+0x1c4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d03b      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a60      	ldr	r2, [pc, #384]	; (8002c58 <HAL_DMA_Init+0x1c8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d036      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5f      	ldr	r2, [pc, #380]	; (8002c5c <HAL_DMA_Init+0x1cc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d031      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a5d      	ldr	r2, [pc, #372]	; (8002c60 <HAL_DMA_Init+0x1d0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02c      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5c      	ldr	r2, [pc, #368]	; (8002c64 <HAL_DMA_Init+0x1d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d027      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5a      	ldr	r2, [pc, #360]	; (8002c68 <HAL_DMA_Init+0x1d8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d022      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a59      	ldr	r2, [pc, #356]	; (8002c6c <HAL_DMA_Init+0x1dc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01d      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_DMA_Init+0x1e0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d018      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a56      	ldr	r2, [pc, #344]	; (8002c74 <HAL_DMA_Init+0x1e4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d013      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_DMA_Init+0x1e8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00e      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a53      	ldr	r2, [pc, #332]	; (8002c7c <HAL_DMA_Init+0x1ec>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <HAL_DMA_Init+0x1f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_DMA_Init+0xb8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <HAL_DMA_Init+0x1f4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_DMA_Init+0xbc>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_Init+0xbe>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 813b 	beq.w	8002dca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a37      	ldr	r2, [pc, #220]	; (8002c48 <HAL_DMA_Init+0x1b8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d04a      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a36      	ldr	r2, [pc, #216]	; (8002c4c <HAL_DMA_Init+0x1bc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d045      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_DMA_Init+0x1c0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d040      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <HAL_DMA_Init+0x1c4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d03b      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a31      	ldr	r2, [pc, #196]	; (8002c58 <HAL_DMA_Init+0x1c8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d036      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_DMA_Init+0x1cc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2e      	ldr	r2, [pc, #184]	; (8002c60 <HAL_DMA_Init+0x1d0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02c      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_DMA_Init+0x1d4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d027      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	; (8002c68 <HAL_DMA_Init+0x1d8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d022      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <HAL_DMA_Init+0x1dc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d01d      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_DMA_Init+0x1e0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_DMA_Init+0x1e4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <HAL_DMA_Init+0x1e8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <HAL_DMA_Init+0x1ec>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_DMA_Init+0x1f0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_Init+0x174>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_DMA_Init+0x1f4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <HAL_DMA_Init+0x186>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_DMA_Init+0x196>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c26:	e02f      	b.n	8002c88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c28:	f7ff fd20 	bl	800266c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d928      	bls.n	8002c88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e246      	b.n	80030d6 <HAL_DMA_Init+0x646>
 8002c48:	40020010 	.word	0x40020010
 8002c4c:	40020028 	.word	0x40020028
 8002c50:	40020040 	.word	0x40020040
 8002c54:	40020058 	.word	0x40020058
 8002c58:	40020070 	.word	0x40020070
 8002c5c:	40020088 	.word	0x40020088
 8002c60:	400200a0 	.word	0x400200a0
 8002c64:	400200b8 	.word	0x400200b8
 8002c68:	40020410 	.word	0x40020410
 8002c6c:	40020428 	.word	0x40020428
 8002c70:	40020440 	.word	0x40020440
 8002c74:	40020458 	.word	0x40020458
 8002c78:	40020470 	.word	0x40020470
 8002c7c:	40020488 	.word	0x40020488
 8002c80:	400204a0 	.word	0x400204a0
 8002c84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1c8      	bne.n	8002c28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <HAL_DMA_Init+0x420>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d107      	bne.n	8002cec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <HAL_DMA_Init+0x424>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <HAL_DMA_Init+0x428>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf8:	d328      	bcc.n	8002d4c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b28      	cmp	r3, #40	; 0x28
 8002d00:	d903      	bls.n	8002d0a <HAL_DMA_Init+0x27a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b2e      	cmp	r3, #46	; 0x2e
 8002d08:	d917      	bls.n	8002d3a <HAL_DMA_Init+0x2aa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d10:	d903      	bls.n	8002d1a <HAL_DMA_Init+0x28a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b42      	cmp	r3, #66	; 0x42
 8002d18:	d90f      	bls.n	8002d3a <HAL_DMA_Init+0x2aa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b46      	cmp	r3, #70	; 0x46
 8002d20:	d903      	bls.n	8002d2a <HAL_DMA_Init+0x29a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b48      	cmp	r3, #72	; 0x48
 8002d28:	d907      	bls.n	8002d3a <HAL_DMA_Init+0x2aa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b4e      	cmp	r3, #78	; 0x4e
 8002d30:	d905      	bls.n	8002d3e <HAL_DMA_Init+0x2ae>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b52      	cmp	r3, #82	; 0x52
 8002d38:	d801      	bhi.n	8002d3e <HAL_DMA_Init+0x2ae>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_DMA_Init+0x2b0>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d117      	bne.n	8002da6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f001 ff1b 	bl	8004bc4 <DMA_CheckFifoParam>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2240      	movs	r2, #64	; 0x40
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e197      	b.n	80030d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 fe56 	bl	8004a60 <DMA_CalcBaseAndBitshift>
 8002db4:	4603      	mov	r3, r0
 8002db6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	223f      	movs	r2, #63	; 0x3f
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e0cd      	b.n	8002f66 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a3b      	ldr	r2, [pc, #236]	; (8002ebc <HAL_DMA_Init+0x42c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <HAL_DMA_Init+0x430>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <HAL_DMA_Init+0x434>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a36      	ldr	r2, [pc, #216]	; (8002ec8 <HAL_DMA_Init+0x438>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <HAL_DMA_Init+0x43c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a33      	ldr	r2, [pc, #204]	; (8002ed0 <HAL_DMA_Init+0x440>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HAL_DMA_Init+0x444>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_Init+0x38a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_DMA_Init+0x448>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_Init+0x38e>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_DMA_Init+0x390>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8097 	beq.w	8002f54 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a24      	ldr	r2, [pc, #144]	; (8002ebc <HAL_DMA_Init+0x42c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d021      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_DMA_Init+0x430>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01c      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_DMA_Init+0x434>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d017      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <HAL_DMA_Init+0x438>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d012      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <HAL_DMA_Init+0x43c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00d      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_DMA_Init+0x440>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d008      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_DMA_Init+0x444>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <HAL_DMA_Init+0x3e4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <HAL_DMA_Init+0x448>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_DMA_Init+0x44c>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d020      	beq.n	8002ee0 <HAL_DMA_Init+0x450>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d102      	bne.n	8002eac <HAL_DMA_Init+0x41c>
 8002ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eaa:	e01a      	b.n	8002ee2 <HAL_DMA_Init+0x452>
 8002eac:	2300      	movs	r3, #0
 8002eae:	e018      	b.n	8002ee2 <HAL_DMA_Init+0x452>
 8002eb0:	fe10803f 	.word	0xfe10803f
 8002eb4:	5c001000 	.word	0x5c001000
 8002eb8:	ffff0000 	.word	0xffff0000
 8002ebc:	58025408 	.word	0x58025408
 8002ec0:	5802541c 	.word	0x5802541c
 8002ec4:	58025430 	.word	0x58025430
 8002ec8:	58025444 	.word	0x58025444
 8002ecc:	58025458 	.word	0x58025458
 8002ed0:	5802546c 	.word	0x5802546c
 8002ed4:	58025480 	.word	0x58025480
 8002ed8:	58025494 	.word	0x58025494
 8002edc:	fffe000f 	.word	0xfffe000f
 8002ee0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <HAL_DMA_Init+0x650>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_DMA_Init+0x654>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 fd91 	bl	8004a60 <DMA_CalcBaseAndBitshift>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	e008      	b.n	8002f66 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0b7      	b.n	80030d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5f      	ldr	r2, [pc, #380]	; (80030e8 <HAL_DMA_Init+0x658>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d072      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5d      	ldr	r2, [pc, #372]	; (80030ec <HAL_DMA_Init+0x65c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d06d      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_DMA_Init+0x660>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d068      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5a      	ldr	r2, [pc, #360]	; (80030f4 <HAL_DMA_Init+0x664>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d063      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a59      	ldr	r2, [pc, #356]	; (80030f8 <HAL_DMA_Init+0x668>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d05e      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_DMA_Init+0x66c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d059      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_DMA_Init+0x670>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d054      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_DMA_Init+0x674>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d04f      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a53      	ldr	r2, [pc, #332]	; (8003108 <HAL_DMA_Init+0x678>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04a      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a51      	ldr	r2, [pc, #324]	; (800310c <HAL_DMA_Init+0x67c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d045      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a50      	ldr	r2, [pc, #320]	; (8003110 <HAL_DMA_Init+0x680>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d040      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4e      	ldr	r2, [pc, #312]	; (8003114 <HAL_DMA_Init+0x684>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d03b      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4d      	ldr	r2, [pc, #308]	; (8003118 <HAL_DMA_Init+0x688>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d036      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a4b      	ldr	r2, [pc, #300]	; (800311c <HAL_DMA_Init+0x68c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d031      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <HAL_DMA_Init+0x690>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02c      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a48      	ldr	r2, [pc, #288]	; (8003124 <HAL_DMA_Init+0x694>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d027      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a47      	ldr	r2, [pc, #284]	; (8003128 <HAL_DMA_Init+0x698>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a45      	ldr	r2, [pc, #276]	; (800312c <HAL_DMA_Init+0x69c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a44      	ldr	r2, [pc, #272]	; (8003130 <HAL_DMA_Init+0x6a0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a42      	ldr	r2, [pc, #264]	; (8003134 <HAL_DMA_Init+0x6a4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a41      	ldr	r2, [pc, #260]	; (8003138 <HAL_DMA_Init+0x6a8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3f      	ldr	r2, [pc, #252]	; (800313c <HAL_DMA_Init+0x6ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3e      	ldr	r2, [pc, #248]	; (8003140 <HAL_DMA_Init+0x6b0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_Init+0x5c6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_DMA_Init+0x6b4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_DMA_Init+0x5ca>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_DMA_Init+0x5cc>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d032      	beq.n	80030c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f001 fe2b 	bl	8004cbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b80      	cmp	r3, #128	; 0x80
 800306c:	d102      	bne.n	8003074 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003088:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_DMA_Init+0x624>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b08      	cmp	r3, #8
 8003098:	d80c      	bhi.n	80030b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f001 fea8 	bl	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e008      	b.n	80030c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	a7fdabf8 	.word	0xa7fdabf8
 80030e4:	cccccccd 	.word	0xcccccccd
 80030e8:	40020010 	.word	0x40020010
 80030ec:	40020028 	.word	0x40020028
 80030f0:	40020040 	.word	0x40020040
 80030f4:	40020058 	.word	0x40020058
 80030f8:	40020070 	.word	0x40020070
 80030fc:	40020088 	.word	0x40020088
 8003100:	400200a0 	.word	0x400200a0
 8003104:	400200b8 	.word	0x400200b8
 8003108:	40020410 	.word	0x40020410
 800310c:	40020428 	.word	0x40020428
 8003110:	40020440 	.word	0x40020440
 8003114:	40020458 	.word	0x40020458
 8003118:	40020470 	.word	0x40020470
 800311c:	40020488 	.word	0x40020488
 8003120:	400204a0 	.word	0x400204a0
 8003124:	400204b8 	.word	0x400204b8
 8003128:	58025408 	.word	0x58025408
 800312c:	5802541c 	.word	0x5802541c
 8003130:	58025430 	.word	0x58025430
 8003134:	58025444 	.word	0x58025444
 8003138:	58025458 	.word	0x58025458
 800313c:	5802546c 	.word	0x5802546c
 8003140:	58025480 	.word	0x58025480
 8003144:	58025494 	.word	0x58025494

08003148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff fa8c 	bl	800266c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e2dc      	b.n	800371a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d008      	beq.n	800317e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e2cd      	b.n	800371a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a76      	ldr	r2, [pc, #472]	; (800335c <HAL_DMA_Abort+0x214>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04a      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a74      	ldr	r2, [pc, #464]	; (8003360 <HAL_DMA_Abort+0x218>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d045      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a73      	ldr	r2, [pc, #460]	; (8003364 <HAL_DMA_Abort+0x21c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d040      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a71      	ldr	r2, [pc, #452]	; (8003368 <HAL_DMA_Abort+0x220>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03b      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a70      	ldr	r2, [pc, #448]	; (800336c <HAL_DMA_Abort+0x224>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d036      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <HAL_DMA_Abort+0x228>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6d      	ldr	r2, [pc, #436]	; (8003374 <HAL_DMA_Abort+0x22c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6b      	ldr	r2, [pc, #428]	; (8003378 <HAL_DMA_Abort+0x230>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d027      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_DMA_Abort+0x234>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a68      	ldr	r2, [pc, #416]	; (8003380 <HAL_DMA_Abort+0x238>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01d      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a67      	ldr	r2, [pc, #412]	; (8003384 <HAL_DMA_Abort+0x23c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_DMA_Abort+0x240>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a64      	ldr	r2, [pc, #400]	; (800338c <HAL_DMA_Abort+0x244>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a62      	ldr	r2, [pc, #392]	; (8003390 <HAL_DMA_Abort+0x248>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a61      	ldr	r2, [pc, #388]	; (8003394 <HAL_DMA_Abort+0x24c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_DMA_Abort+0xd6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5f      	ldr	r2, [pc, #380]	; (8003398 <HAL_DMA_Abort+0x250>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_DMA_Abort+0xda>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_DMA_Abort+0xdc>
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 021e 	bic.w	r2, r2, #30
 8003236:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003246:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	e00a      	b.n	8003266 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 020e 	bic.w	r2, r2, #14
 800325e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <HAL_DMA_Abort+0x214>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d072      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3a      	ldr	r2, [pc, #232]	; (8003360 <HAL_DMA_Abort+0x218>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d06d      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a39      	ldr	r2, [pc, #228]	; (8003364 <HAL_DMA_Abort+0x21c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d068      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a37      	ldr	r2, [pc, #220]	; (8003368 <HAL_DMA_Abort+0x220>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d063      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a36      	ldr	r2, [pc, #216]	; (800336c <HAL_DMA_Abort+0x224>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d05e      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_DMA_Abort+0x228>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d059      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a33      	ldr	r2, [pc, #204]	; (8003374 <HAL_DMA_Abort+0x22c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d054      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a31      	ldr	r2, [pc, #196]	; (8003378 <HAL_DMA_Abort+0x230>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d04f      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a30      	ldr	r2, [pc, #192]	; (800337c <HAL_DMA_Abort+0x234>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04a      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <HAL_DMA_Abort+0x238>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d045      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_DMA_Abort+0x23c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_DMA_Abort+0x240>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03b      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2a      	ldr	r2, [pc, #168]	; (800338c <HAL_DMA_Abort+0x244>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d036      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a28      	ldr	r2, [pc, #160]	; (8003390 <HAL_DMA_Abort+0x248>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a27      	ldr	r2, [pc, #156]	; (8003394 <HAL_DMA_Abort+0x24c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02c      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a25      	ldr	r2, [pc, #148]	; (8003398 <HAL_DMA_Abort+0x250>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d027      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a24      	ldr	r2, [pc, #144]	; (800339c <HAL_DMA_Abort+0x254>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <HAL_DMA_Abort+0x258>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_DMA_Abort+0x25c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <HAL_DMA_Abort+0x260>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <HAL_DMA_Abort+0x264>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_DMA_Abort+0x268>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_DMA_Abort+0x26c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_DMA_Abort+0x20e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_DMA_Abort+0x270>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d132      	bne.n	80033bc <HAL_DMA_Abort+0x274>
 8003356:	2301      	movs	r3, #1
 8003358:	e031      	b.n	80033be <HAL_DMA_Abort+0x276>
 800335a:	bf00      	nop
 800335c:	40020010 	.word	0x40020010
 8003360:	40020028 	.word	0x40020028
 8003364:	40020040 	.word	0x40020040
 8003368:	40020058 	.word	0x40020058
 800336c:	40020070 	.word	0x40020070
 8003370:	40020088 	.word	0x40020088
 8003374:	400200a0 	.word	0x400200a0
 8003378:	400200b8 	.word	0x400200b8
 800337c:	40020410 	.word	0x40020410
 8003380:	40020428 	.word	0x40020428
 8003384:	40020440 	.word	0x40020440
 8003388:	40020458 	.word	0x40020458
 800338c:	40020470 	.word	0x40020470
 8003390:	40020488 	.word	0x40020488
 8003394:	400204a0 	.word	0x400204a0
 8003398:	400204b8 	.word	0x400204b8
 800339c:	58025408 	.word	0x58025408
 80033a0:	5802541c 	.word	0x5802541c
 80033a4:	58025430 	.word	0x58025430
 80033a8:	58025444 	.word	0x58025444
 80033ac:	58025458 	.word	0x58025458
 80033b0:	5802546c 	.word	0x5802546c
 80033b4:	58025480 	.word	0x58025480
 80033b8:	58025494 	.word	0x58025494
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6d      	ldr	r2, [pc, #436]	; (800358c <HAL_DMA_Abort+0x444>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d04a      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6b      	ldr	r2, [pc, #428]	; (8003590 <HAL_DMA_Abort+0x448>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d045      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6a      	ldr	r2, [pc, #424]	; (8003594 <HAL_DMA_Abort+0x44c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d040      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a68      	ldr	r2, [pc, #416]	; (8003598 <HAL_DMA_Abort+0x450>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d03b      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_DMA_Abort+0x454>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d036      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <HAL_DMA_Abort+0x458>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a64      	ldr	r2, [pc, #400]	; (80035a4 <HAL_DMA_Abort+0x45c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d02c      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a62      	ldr	r2, [pc, #392]	; (80035a8 <HAL_DMA_Abort+0x460>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d027      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a61      	ldr	r2, [pc, #388]	; (80035ac <HAL_DMA_Abort+0x464>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5f      	ldr	r2, [pc, #380]	; (80035b0 <HAL_DMA_Abort+0x468>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5e      	ldr	r2, [pc, #376]	; (80035b4 <HAL_DMA_Abort+0x46c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <HAL_DMA_Abort+0x470>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a5b      	ldr	r2, [pc, #364]	; (80035bc <HAL_DMA_Abort+0x474>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a59      	ldr	r2, [pc, #356]	; (80035c0 <HAL_DMA_Abort+0x478>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_DMA_Abort+0x47c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_DMA_Abort+0x32a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a56      	ldr	r2, [pc, #344]	; (80035c8 <HAL_DMA_Abort+0x480>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <HAL_DMA_Abort+0x33c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e007      	b.n	8003494 <HAL_DMA_Abort+0x34c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003494:	e013      	b.n	80034be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003496:	f7ff f8e9 	bl	800266c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d90c      	bls.n	80034be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e12d      	b.n	800371a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	; (800358c <HAL_DMA_Abort+0x444>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d04a      	beq.n	800356a <HAL_DMA_Abort+0x422>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_DMA_Abort+0x448>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d045      	beq.n	800356a <HAL_DMA_Abort+0x422>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <HAL_DMA_Abort+0x44c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d040      	beq.n	800356a <HAL_DMA_Abort+0x422>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_DMA_Abort+0x450>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d03b      	beq.n	800356a <HAL_DMA_Abort+0x422>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a29      	ldr	r2, [pc, #164]	; (800359c <HAL_DMA_Abort+0x454>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d036      	beq.n	800356a <HAL_DMA_Abort+0x422>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_DMA_Abort+0x458>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <HAL_DMA_Abort+0x45c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d02c      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <HAL_DMA_Abort+0x460>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d027      	beq.n	800356a <HAL_DMA_Abort+0x422>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a23      	ldr	r2, [pc, #140]	; (80035ac <HAL_DMA_Abort+0x464>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <HAL_DMA_Abort+0x468>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01d      	beq.n	800356a <HAL_DMA_Abort+0x422>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a20      	ldr	r2, [pc, #128]	; (80035b4 <HAL_DMA_Abort+0x46c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d018      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_DMA_Abort+0x470>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_DMA_Abort+0x474>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_DMA_Abort+0x422>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_DMA_Abort+0x478>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1a      	ldr	r2, [pc, #104]	; (80035c4 <HAL_DMA_Abort+0x47c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_DMA_Abort+0x422>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_DMA_Abort+0x480>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <HAL_DMA_Abort+0x426>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_DMA_Abort+0x428>
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02b      	beq.n	80035cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	223f      	movs	r2, #63	; 0x3f
 8003584:	409a      	lsls	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	e02a      	b.n	80035e2 <HAL_DMA_Abort+0x49a>
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2201      	movs	r2, #1
 80035dc:	409a      	lsls	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <HAL_DMA_Abort+0x5dc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d072      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <HAL_DMA_Abort+0x5e0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d06d      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4c      	ldr	r2, [pc, #304]	; (800372c <HAL_DMA_Abort+0x5e4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d068      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <HAL_DMA_Abort+0x5e8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d063      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a49      	ldr	r2, [pc, #292]	; (8003734 <HAL_DMA_Abort+0x5ec>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d05e      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a47      	ldr	r2, [pc, #284]	; (8003738 <HAL_DMA_Abort+0x5f0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d059      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a46      	ldr	r2, [pc, #280]	; (800373c <HAL_DMA_Abort+0x5f4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d054      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a44      	ldr	r2, [pc, #272]	; (8003740 <HAL_DMA_Abort+0x5f8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d04f      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a43      	ldr	r2, [pc, #268]	; (8003744 <HAL_DMA_Abort+0x5fc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04a      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a41      	ldr	r2, [pc, #260]	; (8003748 <HAL_DMA_Abort+0x600>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d045      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a40      	ldr	r2, [pc, #256]	; (800374c <HAL_DMA_Abort+0x604>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3e      	ldr	r2, [pc, #248]	; (8003750 <HAL_DMA_Abort+0x608>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d03b      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <HAL_DMA_Abort+0x60c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d036      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3b      	ldr	r2, [pc, #236]	; (8003758 <HAL_DMA_Abort+0x610>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d031      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_DMA_Abort+0x614>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d02c      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a38      	ldr	r2, [pc, #224]	; (8003760 <HAL_DMA_Abort+0x618>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_DMA_Abort+0x61c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a35      	ldr	r2, [pc, #212]	; (8003768 <HAL_DMA_Abort+0x620>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a34      	ldr	r2, [pc, #208]	; (800376c <HAL_DMA_Abort+0x624>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a32      	ldr	r2, [pc, #200]	; (8003770 <HAL_DMA_Abort+0x628>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a31      	ldr	r2, [pc, #196]	; (8003774 <HAL_DMA_Abort+0x62c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <HAL_DMA_Abort+0x630>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2e      	ldr	r2, [pc, #184]	; (800377c <HAL_DMA_Abort+0x634>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_Abort+0x58a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <HAL_DMA_Abort+0x638>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_Abort+0x58e>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_DMA_Abort+0x590>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003706:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40020010 	.word	0x40020010
 8003728:	40020028 	.word	0x40020028
 800372c:	40020040 	.word	0x40020040
 8003730:	40020058 	.word	0x40020058
 8003734:	40020070 	.word	0x40020070
 8003738:	40020088 	.word	0x40020088
 800373c:	400200a0 	.word	0x400200a0
 8003740:	400200b8 	.word	0x400200b8
 8003744:	40020410 	.word	0x40020410
 8003748:	40020428 	.word	0x40020428
 800374c:	40020440 	.word	0x40020440
 8003750:	40020458 	.word	0x40020458
 8003754:	40020470 	.word	0x40020470
 8003758:	40020488 	.word	0x40020488
 800375c:	400204a0 	.word	0x400204a0
 8003760:	400204b8 	.word	0x400204b8
 8003764:	58025408 	.word	0x58025408
 8003768:	5802541c 	.word	0x5802541c
 800376c:	58025430 	.word	0x58025430
 8003770:	58025444 	.word	0x58025444
 8003774:	58025458 	.word	0x58025458
 8003778:	5802546c 	.word	0x5802546c
 800377c:	58025480 	.word	0x58025480
 8003780:	58025494 	.word	0x58025494

08003784 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e205      	b.n	8003ba2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d004      	beq.n	80037ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e1fa      	b.n	8003ba2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a8c      	ldr	r2, [pc, #560]	; (80039e4 <HAL_DMA_Abort_IT+0x260>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a8b      	ldr	r2, [pc, #556]	; (80039e8 <HAL_DMA_Abort_IT+0x264>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a89      	ldr	r2, [pc, #548]	; (80039ec <HAL_DMA_Abort_IT+0x268>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a88      	ldr	r2, [pc, #544]	; (80039f0 <HAL_DMA_Abort_IT+0x26c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a86      	ldr	r2, [pc, #536]	; (80039f4 <HAL_DMA_Abort_IT+0x270>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a85      	ldr	r2, [pc, #532]	; (80039f8 <HAL_DMA_Abort_IT+0x274>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a83      	ldr	r2, [pc, #524]	; (80039fc <HAL_DMA_Abort_IT+0x278>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a82      	ldr	r2, [pc, #520]	; (8003a00 <HAL_DMA_Abort_IT+0x27c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_DMA_Abort_IT+0x280>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7f      	ldr	r2, [pc, #508]	; (8003a08 <HAL_DMA_Abort_IT+0x284>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a7d      	ldr	r2, [pc, #500]	; (8003a0c <HAL_DMA_Abort_IT+0x288>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7c      	ldr	r2, [pc, #496]	; (8003a10 <HAL_DMA_Abort_IT+0x28c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a7a      	ldr	r2, [pc, #488]	; (8003a14 <HAL_DMA_Abort_IT+0x290>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a79      	ldr	r2, [pc, #484]	; (8003a18 <HAL_DMA_Abort_IT+0x294>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a77      	ldr	r2, [pc, #476]	; (8003a1c <HAL_DMA_Abort_IT+0x298>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Abort_IT+0xc8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a76      	ldr	r2, [pc, #472]	; (8003a20 <HAL_DMA_Abort_IT+0x29c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Abort_IT+0xcc>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_DMA_Abort_IT+0xce>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d065      	beq.n	8003922 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a60      	ldr	r2, [pc, #384]	; (80039e4 <HAL_DMA_Abort_IT+0x260>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04a      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <HAL_DMA_Abort_IT+0x264>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d045      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <HAL_DMA_Abort_IT+0x268>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5b      	ldr	r2, [pc, #364]	; (80039f0 <HAL_DMA_Abort_IT+0x26c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03b      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_DMA_Abort_IT+0x270>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d036      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_DMA_Abort_IT+0x274>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a57      	ldr	r2, [pc, #348]	; (80039fc <HAL_DMA_Abort_IT+0x278>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d02c      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a55      	ldr	r2, [pc, #340]	; (8003a00 <HAL_DMA_Abort_IT+0x27c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a54      	ldr	r2, [pc, #336]	; (8003a04 <HAL_DMA_Abort_IT+0x280>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_DMA_Abort_IT+0x284>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a51      	ldr	r2, [pc, #324]	; (8003a0c <HAL_DMA_Abort_IT+0x288>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <HAL_DMA_Abort_IT+0x28c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a4e      	ldr	r2, [pc, #312]	; (8003a14 <HAL_DMA_Abort_IT+0x290>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_DMA_Abort_IT+0x294>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <HAL_DMA_Abort_IT+0x298>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_Abort_IT+0x17a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a49      	ldr	r2, [pc, #292]	; (8003a20 <HAL_DMA_Abort_IT+0x29c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <HAL_DMA_Abort_IT+0x18c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e147      	b.n	8003ba0 <HAL_DMA_Abort_IT+0x41c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e13e      	b.n	8003ba0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 020e 	bic.w	r2, r2, #14
 8003930:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <HAL_DMA_Abort_IT+0x260>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04a      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <HAL_DMA_Abort_IT+0x264>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d045      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_DMA_Abort_IT+0x268>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d040      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <HAL_DMA_Abort_IT+0x26c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d03b      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a25      	ldr	r2, [pc, #148]	; (80039f4 <HAL_DMA_Abort_IT+0x270>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d036      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <HAL_DMA_Abort_IT+0x274>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a22      	ldr	r2, [pc, #136]	; (80039fc <HAL_DMA_Abort_IT+0x278>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d02c      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a20      	ldr	r2, [pc, #128]	; (8003a00 <HAL_DMA_Abort_IT+0x27c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d027      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_DMA_Abort_IT+0x280>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_DMA_Abort_IT+0x284>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01d      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <HAL_DMA_Abort_IT+0x288>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_DMA_Abort_IT+0x28c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_DMA_Abort_IT+0x290>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_DMA_Abort_IT+0x294>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <HAL_DMA_Abort_IT+0x298>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x24e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_DMA_Abort_IT+0x29c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d128      	bne.n	8003a24 <HAL_DMA_Abort_IT+0x2a0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e027      	b.n	8003a34 <HAL_DMA_Abort_IT+0x2b0>
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5c      	ldr	r2, [pc, #368]	; (8003bac <HAL_DMA_Abort_IT+0x428>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d072      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5b      	ldr	r2, [pc, #364]	; (8003bb0 <HAL_DMA_Abort_IT+0x42c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d06d      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a59      	ldr	r2, [pc, #356]	; (8003bb4 <HAL_DMA_Abort_IT+0x430>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d068      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_DMA_Abort_IT+0x434>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d063      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_DMA_Abort_IT+0x438>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d05e      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a55      	ldr	r2, [pc, #340]	; (8003bc0 <HAL_DMA_Abort_IT+0x43c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d059      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a53      	ldr	r2, [pc, #332]	; (8003bc4 <HAL_DMA_Abort_IT+0x440>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d054      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a52      	ldr	r2, [pc, #328]	; (8003bc8 <HAL_DMA_Abort_IT+0x444>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04f      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a50      	ldr	r2, [pc, #320]	; (8003bcc <HAL_DMA_Abort_IT+0x448>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d04a      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a4f      	ldr	r2, [pc, #316]	; (8003bd0 <HAL_DMA_Abort_IT+0x44c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d045      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a4d      	ldr	r2, [pc, #308]	; (8003bd4 <HAL_DMA_Abort_IT+0x450>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d040      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a4c      	ldr	r2, [pc, #304]	; (8003bd8 <HAL_DMA_Abort_IT+0x454>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d03b      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <HAL_DMA_Abort_IT+0x458>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d036      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <HAL_DMA_Abort_IT+0x45c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d031      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a47      	ldr	r2, [pc, #284]	; (8003be4 <HAL_DMA_Abort_IT+0x460>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02c      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a46      	ldr	r2, [pc, #280]	; (8003be8 <HAL_DMA_Abort_IT+0x464>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d027      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a44      	ldr	r2, [pc, #272]	; (8003bec <HAL_DMA_Abort_IT+0x468>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d022      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_DMA_Abort_IT+0x46c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d01d      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a41      	ldr	r2, [pc, #260]	; (8003bf4 <HAL_DMA_Abort_IT+0x470>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a40      	ldr	r2, [pc, #256]	; (8003bf8 <HAL_DMA_Abort_IT+0x474>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3e      	ldr	r2, [pc, #248]	; (8003bfc <HAL_DMA_Abort_IT+0x478>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <HAL_DMA_Abort_IT+0x47c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3b      	ldr	r2, [pc, #236]	; (8003c04 <HAL_DMA_Abort_IT+0x480>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x3a0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <HAL_DMA_Abort_IT+0x484>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_DMA_Abort_IT+0x3a4>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_DMA_Abort_IT+0x3a6>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d028      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	58025408 	.word	0x58025408
 8003bf0:	5802541c 	.word	0x5802541c
 8003bf4:	58025430 	.word	0x58025430
 8003bf8:	58025444 	.word	0x58025444
 8003bfc:	58025458 	.word	0x58025458
 8003c00:	5802546c 	.word	0x5802546c
 8003c04:	58025480 	.word	0x58025480
 8003c08:	58025494 	.word	0x58025494

08003c0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c18:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <HAL_DMA_IRQHandler+0x1ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a67      	ldr	r2, [pc, #412]	; (8003dbc <HAL_DMA_IRQHandler+0x1b0>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0a9b      	lsrs	r3, r3, #10
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <HAL_DMA_IRQHandler+0x1b4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5d      	ldr	r2, [pc, #372]	; (8003dc4 <HAL_DMA_IRQHandler+0x1b8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5c      	ldr	r2, [pc, #368]	; (8003dc8 <HAL_DMA_IRQHandler+0x1bc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5a      	ldr	r2, [pc, #360]	; (8003dcc <HAL_DMA_IRQHandler+0x1c0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a59      	ldr	r2, [pc, #356]	; (8003dd0 <HAL_DMA_IRQHandler+0x1c4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a57      	ldr	r2, [pc, #348]	; (8003dd4 <HAL_DMA_IRQHandler+0x1c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a56      	ldr	r2, [pc, #344]	; (8003dd8 <HAL_DMA_IRQHandler+0x1cc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_DMA_IRQHandler+0x1d0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a53      	ldr	r2, [pc, #332]	; (8003de0 <HAL_DMA_IRQHandler+0x1d4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a51      	ldr	r2, [pc, #324]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a50      	ldr	r2, [pc, #320]	; (8003de8 <HAL_DMA_IRQHandler+0x1dc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_DMA_IRQHandler+0x1e0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_DMA_IRQHandler+0x1e4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	; (8003df4 <HAL_DMA_IRQHandler+0x1e8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4a      	ldr	r2, [pc, #296]	; (8003df8 <HAL_DMA_IRQHandler+0x1ec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_DMA_IRQHandler+0x1f0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0xd6>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_DMA_IRQHandler+0xd8>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 842b 	beq.w	8004540 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80a2 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2e      	ldr	r2, [pc, #184]	; (8003dc0 <HAL_DMA_IRQHandler+0x1b4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <HAL_DMA_IRQHandler+0x1b8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <HAL_DMA_IRQHandler+0x1bc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <HAL_DMA_IRQHandler+0x1c0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <HAL_DMA_IRQHandler+0x1c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <HAL_DMA_IRQHandler+0x1c8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <HAL_DMA_IRQHandler+0x1cc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <HAL_DMA_IRQHandler+0x1d0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <HAL_DMA_IRQHandler+0x1d4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <HAL_DMA_IRQHandler+0x1dc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_DMA_IRQHandler+0x1e0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_DMA_IRQHandler+0x1e4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_DMA_IRQHandler+0x1e8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_DMA_IRQHandler+0x1ec>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_DMA_IRQHandler+0x1f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d12f      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x1f4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e02e      	b.n	8003e14 <HAL_DMA_IRQHandler+0x208>
 8003db6:	bf00      	nop
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	1b4e81b5 	.word	0x1b4e81b5
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf14      	ite	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	2300      	moveq	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2208      	movs	r2, #8
 8003e32:	409a      	lsls	r2, r3
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06e      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a69      	ldr	r2, [pc, #420]	; (8004004 <HAL_DMA_IRQHandler+0x3f8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d04a      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a67      	ldr	r2, [pc, #412]	; (8004008 <HAL_DMA_IRQHandler+0x3fc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d045      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a66      	ldr	r2, [pc, #408]	; (800400c <HAL_DMA_IRQHandler+0x400>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d040      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a64      	ldr	r2, [pc, #400]	; (8004010 <HAL_DMA_IRQHandler+0x404>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d03b      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a63      	ldr	r2, [pc, #396]	; (8004014 <HAL_DMA_IRQHandler+0x408>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d036      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a61      	ldr	r2, [pc, #388]	; (8004018 <HAL_DMA_IRQHandler+0x40c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d031      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a60      	ldr	r2, [pc, #384]	; (800401c <HAL_DMA_IRQHandler+0x410>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d02c      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a5e      	ldr	r2, [pc, #376]	; (8004020 <HAL_DMA_IRQHandler+0x414>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d027      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_DMA_IRQHandler+0x418>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d022      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_DMA_IRQHandler+0x41c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01d      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5a      	ldr	r2, [pc, #360]	; (800402c <HAL_DMA_IRQHandler+0x420>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d018      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a58      	ldr	r2, [pc, #352]	; (8004030 <HAL_DMA_IRQHandler+0x424>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a57      	ldr	r2, [pc, #348]	; (8004034 <HAL_DMA_IRQHandler+0x428>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a55      	ldr	r2, [pc, #340]	; (8004038 <HAL_DMA_IRQHandler+0x42c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a54      	ldr	r2, [pc, #336]	; (800403c <HAL_DMA_IRQHandler+0x430>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_DMA_IRQHandler+0x434>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10a      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x304>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e003      	b.n	8003f18 <HAL_DMA_IRQHandler+0x30c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2201      	movs	r2, #1
 8003f26:	409a      	lsls	r2, r3
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f043 0202 	orr.w	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2204      	movs	r2, #4
 8003f42:	409a      	lsls	r2, r3
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 808f 	beq.w	800406c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <HAL_DMA_IRQHandler+0x3f8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04a      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <HAL_DMA_IRQHandler+0x3fc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d045      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_DMA_IRQHandler+0x400>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a27      	ldr	r2, [pc, #156]	; (8004010 <HAL_DMA_IRQHandler+0x404>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d03b      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <HAL_DMA_IRQHandler+0x408>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d036      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <HAL_DMA_IRQHandler+0x40c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d031      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a23      	ldr	r2, [pc, #140]	; (800401c <HAL_DMA_IRQHandler+0x410>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d02c      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a21      	ldr	r2, [pc, #132]	; (8004020 <HAL_DMA_IRQHandler+0x414>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_DMA_IRQHandler+0x418>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_DMA_IRQHandler+0x41c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_DMA_IRQHandler+0x420>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_DMA_IRQHandler+0x424>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_DMA_IRQHandler+0x428>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_DMA_IRQHandler+0x42c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_DMA_IRQHandler+0x430>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <HAL_DMA_IRQHandler+0x434>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d12a      	bne.n	8004044 <HAL_DMA_IRQHandler+0x438>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e023      	b.n	800404c <HAL_DMA_IRQHandler+0x440>
 8004004:	40020010 	.word	0x40020010
 8004008:	40020028 	.word	0x40020028
 800400c:	40020040 	.word	0x40020040
 8004010:	40020058 	.word	0x40020058
 8004014:	40020070 	.word	0x40020070
 8004018:	40020088 	.word	0x40020088
 800401c:	400200a0 	.word	0x400200a0
 8004020:	400200b8 	.word	0x400200b8
 8004024:	40020410 	.word	0x40020410
 8004028:	40020428 	.word	0x40020428
 800402c:	40020440 	.word	0x40020440
 8004030:	40020458 	.word	0x40020458
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	400204a0 	.word	0x400204a0
 8004040:	400204b8 	.word	0x400204b8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2204      	movs	r2, #4
 800405a:	409a      	lsls	r2, r3
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2210      	movs	r2, #16
 8004076:	409a      	lsls	r2, r3
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80a6 	beq.w	80041ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a85      	ldr	r2, [pc, #532]	; (800429c <HAL_DMA_IRQHandler+0x690>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d04a      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <HAL_DMA_IRQHandler+0x694>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d045      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a82      	ldr	r2, [pc, #520]	; (80042a4 <HAL_DMA_IRQHandler+0x698>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d040      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a80      	ldr	r2, [pc, #512]	; (80042a8 <HAL_DMA_IRQHandler+0x69c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d03b      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7f      	ldr	r2, [pc, #508]	; (80042ac <HAL_DMA_IRQHandler+0x6a0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d036      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a7d      	ldr	r2, [pc, #500]	; (80042b0 <HAL_DMA_IRQHandler+0x6a4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7c      	ldr	r2, [pc, #496]	; (80042b4 <HAL_DMA_IRQHandler+0x6a8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d02c      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_DMA_IRQHandler+0x6ac>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d027      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a79      	ldr	r2, [pc, #484]	; (80042bc <HAL_DMA_IRQHandler+0x6b0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d022      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a77      	ldr	r2, [pc, #476]	; (80042c0 <HAL_DMA_IRQHandler+0x6b4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01d      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a76      	ldr	r2, [pc, #472]	; (80042c4 <HAL_DMA_IRQHandler+0x6b8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_DMA_IRQHandler+0x6bc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a73      	ldr	r2, [pc, #460]	; (80042cc <HAL_DMA_IRQHandler+0x6c0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a71      	ldr	r2, [pc, #452]	; (80042d0 <HAL_DMA_IRQHandler+0x6c4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a70      	ldr	r2, [pc, #448]	; (80042d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a6e      	ldr	r2, [pc, #440]	; (80042d8 <HAL_DMA_IRQHandler+0x6cc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10a      	bne.n	8004138 <HAL_DMA_IRQHandler+0x52c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e009      	b.n	800414c <HAL_DMA_IRQHandler+0x540>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d03e      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2210      	movs	r2, #16
 800415a:	409a      	lsls	r2, r3
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d108      	bne.n	800418e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d024      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
 800418c:	e01f      	b.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01b      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
 800419e:	e016      	b.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0208 	bic.w	r2, r2, #8
 80041bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2220      	movs	r2, #32
 80041d8:	409a      	lsls	r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8110 	beq.w	8004404 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_DMA_IRQHandler+0x690>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_DMA_IRQHandler+0x694>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <HAL_DMA_IRQHandler+0x698>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_DMA_IRQHandler+0x69c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a26      	ldr	r2, [pc, #152]	; (80042ac <HAL_DMA_IRQHandler+0x6a0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_DMA_IRQHandler+0x6a4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a23      	ldr	r2, [pc, #140]	; (80042b4 <HAL_DMA_IRQHandler+0x6a8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_DMA_IRQHandler+0x6ac>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a20      	ldr	r2, [pc, #128]	; (80042bc <HAL_DMA_IRQHandler+0x6b0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_DMA_IRQHandler+0x6b4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_DMA_IRQHandler+0x6b8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_DMA_IRQHandler+0x6bc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <HAL_DMA_IRQHandler+0x6c0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_DMA_IRQHandler+0x6c4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_DMA_IRQHandler+0x6cc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d12b      	bne.n	80042dc <HAL_DMA_IRQHandler+0x6d0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e02a      	b.n	80042f0 <HAL_DMA_IRQHandler+0x6e4>
 800429a:	bf00      	nop
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8087 	beq.w	8004404 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2220      	movs	r2, #32
 8004300:	409a      	lsls	r2, r3
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b04      	cmp	r3, #4
 8004310:	d139      	bne.n	8004386 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0216 	bic.w	r2, r2, #22
 8004320:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_DMA_IRQHandler+0x736>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	223f      	movs	r2, #63	; 0x3f
 800435c:	409a      	lsls	r2, r3
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 834a 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
          }
          return;
 8004384:	e344      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
 80043b2:	e027      	b.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
 80043c4:	e01e      	b.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0210 	bic.w	r2, r2, #16
 80043e2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8306 	beq.w	8004a1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8088 	beq.w	800452c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2204      	movs	r2, #4
 8004420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7a      	ldr	r2, [pc, #488]	; (8004614 <HAL_DMA_IRQHandler+0xa08>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a79      	ldr	r2, [pc, #484]	; (8004618 <HAL_DMA_IRQHandler+0xa0c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	; (800461c <HAL_DMA_IRQHandler+0xa10>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a76      	ldr	r2, [pc, #472]	; (8004620 <HAL_DMA_IRQHandler+0xa14>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a74      	ldr	r2, [pc, #464]	; (8004624 <HAL_DMA_IRQHandler+0xa18>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	; (8004628 <HAL_DMA_IRQHandler+0xa1c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a71      	ldr	r2, [pc, #452]	; (800462c <HAL_DMA_IRQHandler+0xa20>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a70      	ldr	r2, [pc, #448]	; (8004630 <HAL_DMA_IRQHandler+0xa24>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <HAL_DMA_IRQHandler+0xa28>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6d      	ldr	r2, [pc, #436]	; (8004638 <HAL_DMA_IRQHandler+0xa2c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	; (800463c <HAL_DMA_IRQHandler+0xa30>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6a      	ldr	r2, [pc, #424]	; (8004640 <HAL_DMA_IRQHandler+0xa34>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a68      	ldr	r2, [pc, #416]	; (8004644 <HAL_DMA_IRQHandler+0xa38>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a67      	ldr	r2, [pc, #412]	; (8004648 <HAL_DMA_IRQHandler+0xa3c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	; (800464c <HAL_DMA_IRQHandler+0xa40>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a64      	ldr	r2, [pc, #400]	; (8004650 <HAL_DMA_IRQHandler+0xa44>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x8ca>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e007      	b.n	80044e6 <HAL_DMA_IRQHandler+0x8da>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d307      	bcc.n	8004502 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f2      	bne.n	80044e6 <HAL_DMA_IRQHandler+0x8da>
 8004500:	e000      	b.n	8004504 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004502:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004522:	e003      	b.n	800452c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8272 	beq.w	8004a1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	e26c      	b.n	8004a1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a43      	ldr	r2, [pc, #268]	; (8004654 <HAL_DMA_IRQHandler+0xa48>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a42      	ldr	r2, [pc, #264]	; (8004658 <HAL_DMA_IRQHandler+0xa4c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d01d      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a40      	ldr	r2, [pc, #256]	; (800465c <HAL_DMA_IRQHandler+0xa50>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <HAL_DMA_IRQHandler+0xa54>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3d      	ldr	r2, [pc, #244]	; (8004664 <HAL_DMA_IRQHandler+0xa58>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <HAL_DMA_IRQHandler+0xa5c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a3a      	ldr	r2, [pc, #232]	; (800466c <HAL_DMA_IRQHandler+0xa60>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_DMA_IRQHandler+0x984>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a39      	ldr	r2, [pc, #228]	; (8004670 <HAL_DMA_IRQHandler+0xa64>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_DMA_IRQHandler+0x988>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_DMA_IRQHandler+0x98a>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 823f 	beq.w	8004a1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2204      	movs	r2, #4
 80045ae:	409a      	lsls	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80cd 	beq.w	8004754 <HAL_DMA_IRQHandler+0xb48>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80c7 	beq.w	8004754 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	2204      	movs	r2, #4
 80045d0:	409a      	lsls	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d049      	beq.n	8004674 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8210 	beq.w	8004a14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045fc:	e20a      	b.n	8004a14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8206 	beq.w	8004a14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004610:	e200      	b.n	8004a14 <HAL_DMA_IRQHandler+0xe08>
 8004612:	bf00      	nop
 8004614:	40020010 	.word	0x40020010
 8004618:	40020028 	.word	0x40020028
 800461c:	40020040 	.word	0x40020040
 8004620:	40020058 	.word	0x40020058
 8004624:	40020070 	.word	0x40020070
 8004628:	40020088 	.word	0x40020088
 800462c:	400200a0 	.word	0x400200a0
 8004630:	400200b8 	.word	0x400200b8
 8004634:	40020410 	.word	0x40020410
 8004638:	40020428 	.word	0x40020428
 800463c:	40020440 	.word	0x40020440
 8004640:	40020458 	.word	0x40020458
 8004644:	40020470 	.word	0x40020470
 8004648:	40020488 	.word	0x40020488
 800464c:	400204a0 	.word	0x400204a0
 8004650:	400204b8 	.word	0x400204b8
 8004654:	58025408 	.word	0x58025408
 8004658:	5802541c 	.word	0x5802541c
 800465c:	58025430 	.word	0x58025430
 8004660:	58025444 	.word	0x58025444
 8004664:	58025458 	.word	0x58025458
 8004668:	5802546c 	.word	0x5802546c
 800466c:	58025480 	.word	0x58025480
 8004670:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d160      	bne.n	8004740 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a8c      	ldr	r2, [pc, #560]	; (80048b4 <HAL_DMA_IRQHandler+0xca8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04a      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a8a      	ldr	r2, [pc, #552]	; (80048b8 <HAL_DMA_IRQHandler+0xcac>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d045      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a89      	ldr	r2, [pc, #548]	; (80048bc <HAL_DMA_IRQHandler+0xcb0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d040      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a87      	ldr	r2, [pc, #540]	; (80048c0 <HAL_DMA_IRQHandler+0xcb4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03b      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a86      	ldr	r2, [pc, #536]	; (80048c4 <HAL_DMA_IRQHandler+0xcb8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d036      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a84      	ldr	r2, [pc, #528]	; (80048c8 <HAL_DMA_IRQHandler+0xcbc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d031      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a83      	ldr	r2, [pc, #524]	; (80048cc <HAL_DMA_IRQHandler+0xcc0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d02c      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a81      	ldr	r2, [pc, #516]	; (80048d0 <HAL_DMA_IRQHandler+0xcc4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_DMA_IRQHandler+0xcc8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7e      	ldr	r2, [pc, #504]	; (80048d8 <HAL_DMA_IRQHandler+0xccc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7d      	ldr	r2, [pc, #500]	; (80048dc <HAL_DMA_IRQHandler+0xcd0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a7b      	ldr	r2, [pc, #492]	; (80048e0 <HAL_DMA_IRQHandler+0xcd4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7a      	ldr	r2, [pc, #488]	; (80048e4 <HAL_DMA_IRQHandler+0xcd8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a78      	ldr	r2, [pc, #480]	; (80048e8 <HAL_DMA_IRQHandler+0xcdc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_DMA_IRQHandler+0xce0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_DMA_IRQHandler+0xb12>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a75      	ldr	r2, [pc, #468]	; (80048f0 <HAL_DMA_IRQHandler+0xce4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <HAL_DMA_IRQHandler+0xb24>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0208 	bic.w	r2, r2, #8
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e007      	b.n	8004740 <HAL_DMA_IRQHandler+0xb34>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0204 	bic.w	r2, r2, #4
 800473e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8165 	beq.w	8004a14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004752:	e15f      	b.n	8004a14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2202      	movs	r2, #2
 800475e:	409a      	lsls	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80c5 	beq.w	80048f4 <HAL_DMA_IRQHandler+0xce8>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80bf 	beq.w	80048f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2202      	movs	r2, #2
 8004780:	409a      	lsls	r2, r3
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d018      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 813a 	beq.w	8004a18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ac:	e134      	b.n	8004a18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8130 	beq.w	8004a18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c0:	e12a      	b.n	8004a18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d168      	bne.n	800489e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a38      	ldr	r2, [pc, #224]	; (80048b4 <HAL_DMA_IRQHandler+0xca8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d04a      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <HAL_DMA_IRQHandler+0xcac>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d045      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a35      	ldr	r2, [pc, #212]	; (80048bc <HAL_DMA_IRQHandler+0xcb0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d040      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a34      	ldr	r2, [pc, #208]	; (80048c0 <HAL_DMA_IRQHandler+0xcb4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d03b      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a32      	ldr	r2, [pc, #200]	; (80048c4 <HAL_DMA_IRQHandler+0xcb8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d036      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <HAL_DMA_IRQHandler+0xcbc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d031      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <HAL_DMA_IRQHandler+0xcc0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02c      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2e      	ldr	r2, [pc, #184]	; (80048d0 <HAL_DMA_IRQHandler+0xcc4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d027      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2c      	ldr	r2, [pc, #176]	; (80048d4 <HAL_DMA_IRQHandler+0xcc8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d022      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2b      	ldr	r2, [pc, #172]	; (80048d8 <HAL_DMA_IRQHandler+0xccc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01d      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_DMA_IRQHandler+0xcd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_DMA_IRQHandler+0xcd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <HAL_DMA_IRQHandler+0xcd8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <HAL_DMA_IRQHandler+0xcdc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a23      	ldr	r2, [pc, #140]	; (80048ec <HAL_DMA_IRQHandler+0xce0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_DMA_IRQHandler+0xc60>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <HAL_DMA_IRQHandler+0xce4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <HAL_DMA_IRQHandler+0xc72>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0214 	bic.w	r2, r2, #20
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e007      	b.n	800488e <HAL_DMA_IRQHandler+0xc82>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 020a 	bic.w	r2, r2, #10
 800488c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80b8 	beq.w	8004a18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b0:	e0b2      	b.n	8004a18 <HAL_DMA_IRQHandler+0xe0c>
 80048b2:	bf00      	nop
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2208      	movs	r2, #8
 80048fe:	409a      	lsls	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8088 	beq.w	8004a1a <HAL_DMA_IRQHandler+0xe0e>
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8082 	beq.w	8004a1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a41      	ldr	r2, [pc, #260]	; (8004a20 <HAL_DMA_IRQHandler+0xe14>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d04a      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3f      	ldr	r2, [pc, #252]	; (8004a24 <HAL_DMA_IRQHandler+0xe18>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d045      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3e      	ldr	r2, [pc, #248]	; (8004a28 <HAL_DMA_IRQHandler+0xe1c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d040      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3c      	ldr	r2, [pc, #240]	; (8004a2c <HAL_DMA_IRQHandler+0xe20>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d03b      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <HAL_DMA_IRQHandler+0xe24>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d036      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a39      	ldr	r2, [pc, #228]	; (8004a34 <HAL_DMA_IRQHandler+0xe28>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <HAL_DMA_IRQHandler+0xe2c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a36      	ldr	r2, [pc, #216]	; (8004a3c <HAL_DMA_IRQHandler+0xe30>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d027      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a35      	ldr	r2, [pc, #212]	; (8004a40 <HAL_DMA_IRQHandler+0xe34>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a33      	ldr	r2, [pc, #204]	; (8004a44 <HAL_DMA_IRQHandler+0xe38>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a32      	ldr	r2, [pc, #200]	; (8004a48 <HAL_DMA_IRQHandler+0xe3c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <HAL_DMA_IRQHandler+0xe40>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2f      	ldr	r2, [pc, #188]	; (8004a50 <HAL_DMA_IRQHandler+0xe44>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2d      	ldr	r2, [pc, #180]	; (8004a54 <HAL_DMA_IRQHandler+0xe48>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_DMA_IRQHandler+0xe4c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xdaa>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_DMA_IRQHandler+0xe50>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <HAL_DMA_IRQHandler+0xdbc>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 021c 	bic.w	r2, r2, #28
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e007      	b.n	80049d8 <HAL_DMA_IRQHandler+0xdcc>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 020e 	bic.w	r2, r2, #14
 80049d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2201      	movs	r2, #1
 80049e2:	409a      	lsls	r2, r3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
 8004a0e:	e004      	b.n	8004a1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a10:	bf00      	nop
 8004a12:	e002      	b.n	8004a1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40020010 	.word	0x40020010
 8004a24:	40020028 	.word	0x40020028
 8004a28:	40020040 	.word	0x40020040
 8004a2c:	40020058 	.word	0x40020058
 8004a30:	40020070 	.word	0x40020070
 8004a34:	40020088 	.word	0x40020088
 8004a38:	400200a0 	.word	0x400200a0
 8004a3c:	400200b8 	.word	0x400200b8
 8004a40:	40020410 	.word	0x40020410
 8004a44:	40020428 	.word	0x40020428
 8004a48:	40020440 	.word	0x40020440
 8004a4c:	40020458 	.word	0x40020458
 8004a50:	40020470 	.word	0x40020470
 8004a54:	40020488 	.word	0x40020488
 8004a58:	400204a0 	.word	0x400204a0
 8004a5c:	400204b8 	.word	0x400204b8

08004a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a42      	ldr	r2, [pc, #264]	; (8004b78 <DMA_CalcBaseAndBitshift+0x118>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04a      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a41      	ldr	r2, [pc, #260]	; (8004b7c <DMA_CalcBaseAndBitshift+0x11c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d045      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3f      	ldr	r2, [pc, #252]	; (8004b80 <DMA_CalcBaseAndBitshift+0x120>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3e      	ldr	r2, [pc, #248]	; (8004b84 <DMA_CalcBaseAndBitshift+0x124>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d03b      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3c      	ldr	r2, [pc, #240]	; (8004b88 <DMA_CalcBaseAndBitshift+0x128>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d036      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3b      	ldr	r2, [pc, #236]	; (8004b8c <DMA_CalcBaseAndBitshift+0x12c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d031      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a39      	ldr	r2, [pc, #228]	; (8004b90 <DMA_CalcBaseAndBitshift+0x130>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02c      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <DMA_CalcBaseAndBitshift+0x134>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d027      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a36      	ldr	r2, [pc, #216]	; (8004b98 <DMA_CalcBaseAndBitshift+0x138>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a35      	ldr	r2, [pc, #212]	; (8004b9c <DMA_CalcBaseAndBitshift+0x13c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01d      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <DMA_CalcBaseAndBitshift+0x140>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a32      	ldr	r2, [pc, #200]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x144>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <DMA_CalcBaseAndBitshift+0x148>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2f      	ldr	r2, [pc, #188]	; (8004bac <DMA_CalcBaseAndBitshift+0x14c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2d      	ldr	r2, [pc, #180]	; (8004bb0 <DMA_CalcBaseAndBitshift+0x150>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <DMA_CalcBaseAndBitshift+0xa8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <DMA_CalcBaseAndBitshift+0x154>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <DMA_CalcBaseAndBitshift+0xac>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <DMA_CalcBaseAndBitshift+0xae>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d024      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	3b10      	subs	r3, #16
 8004b1a:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <DMA_CalcBaseAndBitshift+0x158>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	4a24      	ldr	r2, [pc, #144]	; (8004bbc <DMA_CalcBaseAndBitshift+0x15c>)
 8004b2c:	5cd3      	ldrb	r3, [r2, r3]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d908      	bls.n	8004b4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <DMA_CalcBaseAndBitshift+0x160>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	1d1a      	adds	r2, r3, #4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	659a      	str	r2, [r3, #88]	; 0x58
 8004b4a:	e00d      	b.n	8004b68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <DMA_CalcBaseAndBitshift+0x160>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5a:	e005      	b.n	8004b68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40020010 	.word	0x40020010
 8004b7c:	40020028 	.word	0x40020028
 8004b80:	40020040 	.word	0x40020040
 8004b84:	40020058 	.word	0x40020058
 8004b88:	40020070 	.word	0x40020070
 8004b8c:	40020088 	.word	0x40020088
 8004b90:	400200a0 	.word	0x400200a0
 8004b94:	400200b8 	.word	0x400200b8
 8004b98:	40020410 	.word	0x40020410
 8004b9c:	40020428 	.word	0x40020428
 8004ba0:	40020440 	.word	0x40020440
 8004ba4:	40020458 	.word	0x40020458
 8004ba8:	40020470 	.word	0x40020470
 8004bac:	40020488 	.word	0x40020488
 8004bb0:	400204a0 	.word	0x400204a0
 8004bb4:	400204b8 	.word	0x400204b8
 8004bb8:	aaaaaaab 	.word	0xaaaaaaab
 8004bbc:	0800bd94 	.word	0x0800bd94
 8004bc0:	fffffc00 	.word	0xfffffc00

08004bc4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d120      	bne.n	8004c1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d858      	bhi.n	8004c92 <DMA_CheckFifoParam+0xce>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <DMA_CheckFifoParam+0x24>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c0b 	.word	0x08004c0b
 8004bf0:	08004bf9 	.word	0x08004bf9
 8004bf4:	08004c93 	.word	0x08004c93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d048      	beq.n	8004c96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c08:	e045      	b.n	8004c96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c12:	d142      	bne.n	8004c9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c18:	e03f      	b.n	8004c9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c22:	d123      	bne.n	8004c6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d838      	bhi.n	8004c9e <DMA_CheckFifoParam+0xda>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <DMA_CheckFifoParam+0x70>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c4b 	.word	0x08004c4b
 8004c3c:	08004c45 	.word	0x08004c45
 8004c40:	08004c5d 	.word	0x08004c5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
        break;
 8004c48:	e030      	b.n	8004cac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d025      	beq.n	8004ca2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c5a:	e022      	b.n	8004ca2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c64:	d11f      	bne.n	8004ca6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c6a:	e01c      	b.n	8004ca6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d902      	bls.n	8004c7a <DMA_CheckFifoParam+0xb6>
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d003      	beq.n	8004c80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c78:	e018      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c7e:	e015      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00e      	beq.n	8004caa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8004c90:	e00b      	b.n	8004caa <DMA_CheckFifoParam+0xe6>
        break;
 8004c92:	bf00      	nop
 8004c94:	e00a      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        break;
 8004c96:	bf00      	nop
 8004c98:	e008      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        break;
 8004c9a:	bf00      	nop
 8004c9c:	e006      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        break;
 8004c9e:	bf00      	nop
 8004ca0:	e004      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <DMA_CheckFifoParam+0xe8>
    break;
 8004caa:	bf00      	nop
    }
  }

  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop

08004cbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a36      	ldr	r2, [pc, #216]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a35      	ldr	r2, [pc, #212]	; (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a32      	ldr	r2, [pc, #200]	; (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a30      	ldr	r2, [pc, #192]	; (8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2d      	ldr	r2, [pc, #180]	; (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01a      	beq.n	8004d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	3b08      	subs	r3, #8
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	461a      	mov	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d58:	e024      	b.n	8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	3b10      	subs	r3, #16
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d806      	bhi.n	8004d82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d902      	bls.n	8004d82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3308      	adds	r3, #8
 8004d80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a16      	ldr	r2, [pc, #88]	; (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	58025408 	.word	0x58025408
 8004db4:	5802541c 	.word	0x5802541c
 8004db8:	58025430 	.word	0x58025430
 8004dbc:	58025444 	.word	0x58025444
 8004dc0:	58025458 	.word	0x58025458
 8004dc4:	5802546c 	.word	0x5802546c
 8004dc8:	58025480 	.word	0x58025480
 8004dcc:	58025494 	.word	0x58025494
 8004dd0:	cccccccd 	.word	0xcccccccd
 8004dd4:	16009600 	.word	0x16009600
 8004dd8:	58025880 	.word	0x58025880
 8004ddc:	aaaaaaab 	.word	0xaaaaaaab
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	4002040f 	.word	0x4002040f
 8004de8:	10008200 	.word	0x10008200
 8004dec:	40020880 	.word	0x40020880

08004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04a      	beq.n	8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d847      	bhi.n	8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d022      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a24      	ldr	r2, [pc, #144]	; (8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d01d      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d018      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00e      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e78:	671a      	str	r2, [r3, #112]	; 0x70
 8004e7a:	e009      	b.n	8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	461a      	mov	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	58025408 	.word	0x58025408
 8004eac:	5802541c 	.word	0x5802541c
 8004eb0:	58025430 	.word	0x58025430
 8004eb4:	58025444 	.word	0x58025444
 8004eb8:	58025458 	.word	0x58025458
 8004ebc:	5802546c 	.word	0x5802546c
 8004ec0:	58025480 	.word	0x58025480
 8004ec4:	58025494 	.word	0x58025494
 8004ec8:	1600963f 	.word	0x1600963f
 8004ecc:	58025940 	.word	0x58025940
 8004ed0:	1000823f 	.word	0x1000823f
 8004ed4:	40020940 	.word	0x40020940

08004ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ee6:	4b89      	ldr	r3, [pc, #548]	; (800510c <HAL_GPIO_Init+0x234>)
 8004ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eea:	e194      	b.n	8005216 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8186 	beq.w	8005210 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d00b      	beq.n	8004f24 <HAL_GPIO_Init+0x4c>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d007      	beq.n	8004f24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f18:	2b11      	cmp	r3, #17
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b12      	cmp	r3, #18
 8004f22:	d130      	bne.n	8004f86 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 0201 	and.w	r2, r3, #1
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	2203      	movs	r2, #3
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0xee>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b12      	cmp	r3, #18
 8004fc4:	d123      	bne.n	800500e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	08da      	lsrs	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3208      	adds	r2, #8
 8004fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	220f      	movs	r2, #15
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	08da      	lsrs	r2, r3, #3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3208      	adds	r2, #8
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0203 	and.w	r2, r3, #3
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80e0 	beq.w	8005210 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005050:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <HAL_GPIO_Init+0x238>)
 8005052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <HAL_GPIO_Init+0x238>)
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005060:	4b2b      	ldr	r3, [pc, #172]	; (8005110 <HAL_GPIO_Init+0x238>)
 8005062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800506e:	4a29      	ldr	r2, [pc, #164]	; (8005114 <HAL_GPIO_Init+0x23c>)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	3302      	adds	r3, #2
 8005076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <HAL_GPIO_Init+0x240>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d052      	beq.n	8005140 <HAL_GPIO_Init+0x268>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_GPIO_Init+0x244>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d031      	beq.n	8005106 <HAL_GPIO_Init+0x22e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_GPIO_Init+0x248>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02b      	beq.n	8005102 <HAL_GPIO_Init+0x22a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_GPIO_Init+0x24c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d025      	beq.n	80050fe <HAL_GPIO_Init+0x226>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_GPIO_Init+0x250>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01f      	beq.n	80050fa <HAL_GPIO_Init+0x222>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a1b      	ldr	r2, [pc, #108]	; (800512c <HAL_GPIO_Init+0x254>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d019      	beq.n	80050f6 <HAL_GPIO_Init+0x21e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_GPIO_Init+0x258>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_GPIO_Init+0x21a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_GPIO_Init+0x25c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00d      	beq.n	80050ee <HAL_GPIO_Init+0x216>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_GPIO_Init+0x260>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <HAL_GPIO_Init+0x212>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <HAL_GPIO_Init+0x264>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d101      	bne.n	80050e6 <HAL_GPIO_Init+0x20e>
 80050e2:	2309      	movs	r3, #9
 80050e4:	e02d      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050e6:	230a      	movs	r3, #10
 80050e8:	e02b      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050ea:	2308      	movs	r3, #8
 80050ec:	e029      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050ee:	2307      	movs	r3, #7
 80050f0:	e027      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050f2:	2306      	movs	r3, #6
 80050f4:	e025      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050f6:	2305      	movs	r3, #5
 80050f8:	e023      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050fa:	2304      	movs	r3, #4
 80050fc:	e021      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 80050fe:	2303      	movs	r3, #3
 8005100:	e01f      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 8005102:	2302      	movs	r3, #2
 8005104:	e01d      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 8005106:	2301      	movs	r3, #1
 8005108:	e01b      	b.n	8005142 <HAL_GPIO_Init+0x26a>
 800510a:	bf00      	nop
 800510c:	58000080 	.word	0x58000080
 8005110:	58024400 	.word	0x58024400
 8005114:	58000400 	.word	0x58000400
 8005118:	58020000 	.word	0x58020000
 800511c:	58020400 	.word	0x58020400
 8005120:	58020800 	.word	0x58020800
 8005124:	58020c00 	.word	0x58020c00
 8005128:	58021000 	.word	0x58021000
 800512c:	58021400 	.word	0x58021400
 8005130:	58021800 	.word	0x58021800
 8005134:	58021c00 	.word	0x58021c00
 8005138:	58022000 	.word	0x58022000
 800513c:	58022400 	.word	0x58022400
 8005140:	2300      	movs	r3, #0
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	f002 0203 	and.w	r2, r2, #3
 8005148:	0092      	lsls	r2, r2, #2
 800514a:	4093      	lsls	r3, r2
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005152:	4938      	ldr	r1, [pc, #224]	; (8005234 <HAL_GPIO_Init+0x35c>)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	3302      	adds	r3, #2
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	3301      	adds	r3, #1
 8005214:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	f47f ae63 	bne.w	8004eec <HAL_GPIO_Init+0x14>
  }
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	3724      	adds	r7, #36	; 0x24
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	58000400 	.word	0x58000400

08005238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
 8005244:	4613      	mov	r3, r2
 8005246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005248:	787b      	ldrb	r3, [r7, #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800524e:	887a      	ldrh	r2, [r7, #2]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005254:	e003      	b.n	800525e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	041a      	lsls	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	619a      	str	r2, [r3, #24]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	4603      	mov	r3, r0
 8005272:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	4618      	mov	r0, r3
 8005292:	f7fc fb5d 	bl	8001950 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d00a      	beq.n	80052ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e01f      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e01d      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	490f      	ldr	r1, [pc, #60]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052da:	f7fd f9c7 	bl	800266c <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052e0:	e009      	b.n	80052f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052e2:	f7fd f9c3 	bl	800266c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f0:	d901      	bls.n	80052f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e007      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d1ee      	bne.n	80052e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	58024800 	.word	0x58024800

08005314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e3ff      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8087 	beq.w	8005442 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800533e:	4b97      	ldr	r3, [pc, #604]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	2b10      	cmp	r3, #16
 8005348:	d007      	beq.n	800535a <HAL_RCC_OscConfig+0x46>
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	2b18      	cmp	r3, #24
 800534e:	d110      	bne.n	8005372 <HAL_RCC_OscConfig+0x5e>
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d10b      	bne.n	8005372 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535a:	4b90      	ldr	r3, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d06c      	beq.n	8005440 <HAL_RCC_OscConfig+0x12c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d168      	bne.n	8005440 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e3d9      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x76>
 800537c:	4b87      	ldr	r3, [pc, #540]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a86      	ldr	r2, [pc, #536]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e02e      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x98>
 8005392:	4b82      	ldr	r3, [pc, #520]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a81      	ldr	r2, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4b7f      	ldr	r3, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a7e      	ldr	r2, [pc, #504]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e01d      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0xbc>
 80053b6:	4b79      	ldr	r3, [pc, #484]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a78      	ldr	r2, [pc, #480]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a75      	ldr	r2, [pc, #468]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 80053d0:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a71      	ldr	r2, [pc, #452]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b6f      	ldr	r3, [pc, #444]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a6e      	ldr	r2, [pc, #440]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd f93c 	bl	800266c <HAL_GetTick>
 80053f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fd f938 	bl	800266c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	; 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e38d      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800540a:	4b64      	ldr	r3, [pc, #400]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0xe4>
 8005416:	e014      	b.n	8005442 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd f928 	bl	800266c <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005420:	f7fd f924 	bl	800266c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e379      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x10c>
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80ae 	beq.w	80055ac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005450:	4b52      	ldr	r3, [pc, #328]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005458:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800545a:	4b50      	ldr	r3, [pc, #320]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_RCC_OscConfig+0x162>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b18      	cmp	r3, #24
 800546a:	d13a      	bne.n	80054e2 <HAL_RCC_OscConfig+0x1ce>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d135      	bne.n	80054e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005476:	4b49      	ldr	r3, [pc, #292]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_RCC_OscConfig+0x17a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e34b      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548e:	f7fd f8f9 	bl	8002684 <HAL_GetREVID>
 8005492:	4603      	mov	r3, r0
 8005494:	f241 0203 	movw	r2, #4099	; 0x1003
 8005498:	4293      	cmp	r3, r2
 800549a:	d817      	bhi.n	80054cc <HAL_RCC_OscConfig+0x1b8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d108      	bne.n	80054b6 <HAL_RCC_OscConfig+0x1a2>
 80054a4:	4b3d      	ldr	r3, [pc, #244]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054ac:	4a3b      	ldr	r2, [pc, #236]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b4:	e07a      	b.n	80055ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	4b39      	ldr	r3, [pc, #228]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	031b      	lsls	r3, r3, #12
 80054c4:	4935      	ldr	r1, [pc, #212]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ca:	e06f      	b.n	80055ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054cc:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	4930      	ldr	r1, [pc, #192]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e0:	e064      	b.n	80055ac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d045      	beq.n	8005576 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054ea:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 0219 	bic.w	r2, r3, #25
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	4929      	ldr	r1, [pc, #164]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd f8b6 	bl	800266c <HAL_GetTick>
 8005500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005504:	f7fd f8b2 	bl	800266c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e307      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005516:	4b21      	ldr	r3, [pc, #132]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005522:	f7fd f8af 	bl	8002684 <HAL_GetREVID>
 8005526:	4603      	mov	r3, r0
 8005528:	f241 0203 	movw	r2, #4099	; 0x1003
 800552c:	4293      	cmp	r3, r2
 800552e:	d817      	bhi.n	8005560 <HAL_RCC_OscConfig+0x24c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b40      	cmp	r3, #64	; 0x40
 8005536:	d108      	bne.n	800554a <HAL_RCC_OscConfig+0x236>
 8005538:	4b18      	ldr	r3, [pc, #96]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005540:	4a16      	ldr	r2, [pc, #88]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	6053      	str	r3, [r2, #4]
 8005548:	e030      	b.n	80055ac <HAL_RCC_OscConfig+0x298>
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	031b      	lsls	r3, r3, #12
 8005558:	4910      	ldr	r1, [pc, #64]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800555a:	4313      	orrs	r3, r2
 800555c:	604b      	str	r3, [r1, #4]
 800555e:	e025      	b.n	80055ac <HAL_RCC_OscConfig+0x298>
 8005560:	4b0e      	ldr	r3, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	061b      	lsls	r3, r3, #24
 800556e:	490b      	ldr	r1, [pc, #44]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]
 8005574:	e01a      	b.n	80055ac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fd f873 	bl	800266c <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558a:	f7fd f86f 	bl	800266c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d903      	bls.n	80055a0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e2c4      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
 800559c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055a0:	4ba4      	ldr	r3, [pc, #656]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ee      	bne.n	800558a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80a9 	beq.w	800570c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ba:	4b9e      	ldr	r3, [pc, #632]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055c4:	4b9b      	ldr	r3, [pc, #620]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d007      	beq.n	80055e0 <HAL_RCC_OscConfig+0x2cc>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b18      	cmp	r3, #24
 80055d4:	d13a      	bne.n	800564c <HAL_RCC_OscConfig+0x338>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d135      	bne.n	800564c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055e0:	4b94      	ldr	r3, [pc, #592]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_OscConfig+0x2e4>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e296      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055f8:	f7fd f844 	bl	8002684 <HAL_GetREVID>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005602:	4293      	cmp	r3, r2
 8005604:	d817      	bhi.n	8005636 <HAL_RCC_OscConfig+0x322>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	2b20      	cmp	r3, #32
 800560c:	d108      	bne.n	8005620 <HAL_RCC_OscConfig+0x30c>
 800560e:	4b89      	ldr	r3, [pc, #548]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005616:	4a87      	ldr	r2, [pc, #540]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800561c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800561e:	e075      	b.n	800570c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005620:	4b84      	ldr	r3, [pc, #528]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	069b      	lsls	r3, r3, #26
 800562e:	4981      	ldr	r1, [pc, #516]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005634:	e06a      	b.n	800570c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005636:	4b7f      	ldr	r3, [pc, #508]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	061b      	lsls	r3, r3, #24
 8005644:	497b      	ldr	r1, [pc, #492]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005646:	4313      	orrs	r3, r2
 8005648:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800564a:	e05f      	b.n	800570c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d042      	beq.n	80056da <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005654:	4b77      	ldr	r3, [pc, #476]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a76      	ldr	r2, [pc, #472]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 800565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fd f804 	bl	800266c <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005668:	f7fd f800 	bl	800266c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e255      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800567a:	4b6e      	ldr	r3, [pc, #440]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005686:	f7fc fffd 	bl	8002684 <HAL_GetREVID>
 800568a:	4603      	mov	r3, r0
 800568c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005690:	4293      	cmp	r3, r2
 8005692:	d817      	bhi.n	80056c4 <HAL_RCC_OscConfig+0x3b0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d108      	bne.n	80056ae <HAL_RCC_OscConfig+0x39a>
 800569c:	4b65      	ldr	r3, [pc, #404]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056a4:	4a63      	ldr	r2, [pc, #396]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056aa:	6053      	str	r3, [r2, #4]
 80056ac:	e02e      	b.n	800570c <HAL_RCC_OscConfig+0x3f8>
 80056ae:	4b61      	ldr	r3, [pc, #388]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	069b      	lsls	r3, r3, #26
 80056bc:	495d      	ldr	r1, [pc, #372]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
 80056c2:	e023      	b.n	800570c <HAL_RCC_OscConfig+0x3f8>
 80056c4:	4b5b      	ldr	r3, [pc, #364]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	4958      	ldr	r1, [pc, #352]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60cb      	str	r3, [r1, #12]
 80056d8:	e018      	b.n	800570c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056da:	4b56      	ldr	r3, [pc, #344]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a55      	ldr	r2, [pc, #340]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80056e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fc ffc1 	bl	800266c <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056ee:	f7fc ffbd 	bl	800266c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e212      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005700:	4b4c      	ldr	r3, [pc, #304]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d036      	beq.n	8005786 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005720:	4b44      	ldr	r3, [pc, #272]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005724:	4a43      	ldr	r2, [pc, #268]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fc ff9e 	bl	800266c <HAL_GetTick>
 8005730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005734:	f7fc ff9a 	bl	800266c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e1ef      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005746:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x420>
 8005752:	e018      	b.n	8005786 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005754:	4b37      	ldr	r3, [pc, #220]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 8005756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005758:	4a36      	ldr	r2, [pc, #216]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005760:	f7fc ff84 	bl	800266c <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005768:	f7fc ff80 	bl	800266c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e1d5      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800577a:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d036      	beq.n	8005800 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d019      	beq.n	80057ce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800579a:	4b26      	ldr	r3, [pc, #152]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a25      	ldr	r2, [pc, #148]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80057a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057a6:	f7fc ff61 	bl	800266c <HAL_GetTick>
 80057aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057ae:	f7fc ff5d 	bl	800266c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1b2      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057c0:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x49a>
 80057cc:	e018      	b.n	8005800 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ce:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80057d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057da:	f7fc ff47 	bl	800266c <HAL_GetTick>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057e2:	f7fc ff43 	bl	800266c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e198      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <HAL_RCC_OscConfig+0x520>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8085 	beq.w	8005918 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <HAL_RCC_OscConfig+0x524>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <HAL_RCC_OscConfig+0x524>)
 8005814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800581a:	f7fc ff27 	bl	800266c <HAL_GetTick>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005820:	e00c      	b.n	800583c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005822:	f7fc ff23 	bl	800266c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b64      	cmp	r3, #100	; 0x64
 800582e:	d905      	bls.n	800583c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e178      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
 8005834:	58024400 	.word	0x58024400
 8005838:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800583c:	4b96      	ldr	r3, [pc, #600]	; (8005a98 <HAL_RCC_OscConfig+0x784>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ec      	beq.n	8005822 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d106      	bne.n	800585e <HAL_RCC_OscConfig+0x54a>
 8005850:	4b92      	ldr	r3, [pc, #584]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a91      	ldr	r2, [pc, #580]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	e02d      	b.n	80058ba <HAL_RCC_OscConfig+0x5a6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x56c>
 8005866:	4b8d      	ldr	r3, [pc, #564]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4a8c      	ldr	r2, [pc, #560]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	6713      	str	r3, [r2, #112]	; 0x70
 8005872:	4b8a      	ldr	r3, [pc, #552]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005876:	4a89      	ldr	r2, [pc, #548]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	6713      	str	r3, [r2, #112]	; 0x70
 800587e:	e01c      	b.n	80058ba <HAL_RCC_OscConfig+0x5a6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b05      	cmp	r3, #5
 8005886:	d10c      	bne.n	80058a2 <HAL_RCC_OscConfig+0x58e>
 8005888:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	4a83      	ldr	r2, [pc, #524]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800588e:	f043 0304 	orr.w	r3, r3, #4
 8005892:	6713      	str	r3, [r2, #112]	; 0x70
 8005894:	4b81      	ldr	r3, [pc, #516]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4a80      	ldr	r2, [pc, #512]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6713      	str	r3, [r2, #112]	; 0x70
 80058a0:	e00b      	b.n	80058ba <HAL_RCC_OscConfig+0x5a6>
 80058a2:	4b7e      	ldr	r3, [pc, #504]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	4a7d      	ldr	r2, [pc, #500]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	6713      	str	r3, [r2, #112]	; 0x70
 80058ae:	4b7b      	ldr	r3, [pc, #492]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a7a      	ldr	r2, [pc, #488]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d015      	beq.n	80058ee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fc fed3 	bl	800266c <HAL_GetTick>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fc fecf 	bl	800266c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e122      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058e0:	4b6e      	ldr	r3, [pc, #440]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ee      	beq.n	80058ca <HAL_RCC_OscConfig+0x5b6>
 80058ec:	e014      	b.n	8005918 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fc febd 	bl	800266c <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f6:	f7fc feb9 	bl	800266c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	f241 3288 	movw	r2, #5000	; 0x1388
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e10c      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800590c:	4b63      	ldr	r3, [pc, #396]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ee      	bne.n	80058f6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8101 	beq.w	8005b24 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005922:	4b5e      	ldr	r3, [pc, #376]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800592a:	2b18      	cmp	r3, #24
 800592c:	f000 80bc 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b02      	cmp	r3, #2
 8005936:	f040 8095 	bne.w	8005a64 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593a:	4b58      	ldr	r3, [pc, #352]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a57      	ldr	r2, [pc, #348]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fc fe91 	bl	800266c <HAL_GetTick>
 800594a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594e:	f7fc fe8d 	bl	800266c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0e2      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005960:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800596c:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 800596e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005970:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_RCC_OscConfig+0x78c>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800597c:	0112      	lsls	r2, r2, #4
 800597e:	430a      	orrs	r2, r1
 8005980:	4946      	ldr	r1, [pc, #280]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005982:	4313      	orrs	r3, r2
 8005984:	628b      	str	r3, [r1, #40]	; 0x28
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	3b01      	subs	r3, #1
 800598c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	3b01      	subs	r3, #1
 8005996:	025b      	lsls	r3, r3, #9
 8005998:	b29b      	uxth	r3, r3
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	3b01      	subs	r3, #1
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ae:	3b01      	subs	r3, #1
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059b6:	4939      	ldr	r1, [pc, #228]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80059bc:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a36      	ldr	r2, [pc, #216]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059c8:	4b34      	ldr	r3, [pc, #208]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059cc:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <HAL_RCC_OscConfig+0x790>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059d4:	00d2      	lsls	r2, r2, #3
 80059d6:	4931      	ldr	r1, [pc, #196]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059dc:	4b2f      	ldr	r3, [pc, #188]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	f023 020c 	bic.w	r2, r3, #12
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	492c      	ldr	r1, [pc, #176]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059ee:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	f023 0202 	bic.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4928      	ldr	r1, [pc, #160]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a00:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0c:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a18:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fc fe16 	bl	800266c <HAL_GetTick>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fc fe12 	bl	800266c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e067      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x730>
 8005a62:	e05f      	b.n	8005b24 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc fdfc 	bl	800266c <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc fdf8 	bl	800266c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04d      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <HAL_RCC_OscConfig+0x788>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x764>
 8005a96:	e045      	b.n	8005b24 <HAL_RCC_OscConfig+0x810>
 8005a98:	58024800 	.word	0x58024800
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	fffffc0c 	.word	0xfffffc0c
 8005aa4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCC_OscConfig+0x81c>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <HAL_RCC_OscConfig+0x81c>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d031      	beq.n	8005b20 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d12a      	bne.n	8005b20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d122      	bne.n	8005b20 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d11a      	bne.n	8005b20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d111      	bne.n	8005b20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d108      	bne.n	8005b20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3730      	adds	r7, #48	; 0x30
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400

08005b34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e19c      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b48:	4b8a      	ldr	r3, [pc, #552]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d910      	bls.n	8005b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b56:	4b87      	ldr	r3, [pc, #540]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 020f 	bic.w	r2, r3, #15
 8005b5e:	4985      	ldr	r1, [pc, #532]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b83      	ldr	r3, [pc, #524]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d001      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e184      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	4b7b      	ldr	r3, [pc, #492]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d908      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b94:	4b78      	ldr	r3, [pc, #480]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	4975      	ldr	r1, [pc, #468]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	4b70      	ldr	r3, [pc, #448]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d908      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bc2:	4b6d      	ldr	r3, [pc, #436]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	496a      	ldr	r1, [pc, #424]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	4b64      	ldr	r3, [pc, #400]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d908      	bls.n	8005c02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bf0:	4b61      	ldr	r3, [pc, #388]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	495e      	ldr	r1, [pc, #376]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d010      	beq.n	8005c30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69da      	ldr	r2, [r3, #28]
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d908      	bls.n	8005c30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c1e:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	4953      	ldr	r1, [pc, #332]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	4b4d      	ldr	r3, [pc, #308]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d908      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c4c:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f023 020f 	bic.w	r2, r3, #15
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4947      	ldr	r1, [pc, #284]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d055      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c6a:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	4940      	ldr	r1, [pc, #256]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d107      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c84:	4b3c      	ldr	r3, [pc, #240]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d121      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0f6      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d107      	bne.n	8005cac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c9c:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d115      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0ea      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cb4:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0de      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cc4:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0d6      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cd4:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f023 0207 	bic.w	r2, r3, #7
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4925      	ldr	r1, [pc, #148]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce6:	f7fc fcc1 	bl	800266c <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cec:	e00a      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cee:	f7fc fcbd 	bl	800266c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e0be      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d04:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d1eb      	bne.n	8005cee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d010      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d208      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d32:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f023 020f 	bic.w	r2, r3, #15
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	490e      	ldr	r1, [pc, #56]	; (8005d78 <HAL_RCC_ClockConfig+0x244>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d214      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 020f 	bic.w	r2, r3, #15
 8005d5a:	4906      	ldr	r1, [pc, #24]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <HAL_RCC_ClockConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d005      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e086      	b.n	8005e82 <HAL_RCC_ClockConfig+0x34e>
 8005d74:	52002000 	.word	0x52002000
 8005d78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d208      	bcs.n	8005daa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d98:	4b3c      	ldr	r3, [pc, #240]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	4939      	ldr	r1, [pc, #228]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d010      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d208      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dc6:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	492e      	ldr	r1, [pc, #184]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d208      	bcs.n	8005e06 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	4922      	ldr	r1, [pc, #136]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d208      	bcs.n	8005e34 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e22:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4917      	ldr	r1, [pc, #92]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e34:	f000 f834 	bl	8005ea0 <HAL_RCC_GetSysClockFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	4912      	ldr	r1, [pc, #72]	; (8005e90 <HAL_RCC_ClockConfig+0x35c>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <HAL_RCC_ClockConfig+0x358>)
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	4a0d      	ldr	r2, [pc, #52]	; (8005e90 <HAL_RCC_ClockConfig+0x35c>)
 8005e5c:	5cd3      	ldrb	r3, [r2, r3]
 8005e5e:	f003 031f 	and.w	r3, r3, #31
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <HAL_RCC_ClockConfig+0x360>)
 8005e6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e6c:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_RCC_ClockConfig+0x364>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <HAL_RCC_ClockConfig+0x368>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fc fbae 	bl	80025d8 <HAL_InitTick>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	0800bd84 	.word	0x0800bd84
 8005e94:	20000004 	.word	0x20000004
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	20000008 	.word	0x20000008

08005ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea6:	4bb3      	ldr	r3, [pc, #716]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eae:	2b18      	cmp	r3, #24
 8005eb0:	f200 8155 	bhi.w	800615e <HAL_RCC_GetSysClockFreq+0x2be>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	0800615f 	.word	0x0800615f
 8005ec4:	0800615f 	.word	0x0800615f
 8005ec8:	0800615f 	.word	0x0800615f
 8005ecc:	0800615f 	.word	0x0800615f
 8005ed0:	0800615f 	.word	0x0800615f
 8005ed4:	0800615f 	.word	0x0800615f
 8005ed8:	0800615f 	.word	0x0800615f
 8005edc:	08005f47 	.word	0x08005f47
 8005ee0:	0800615f 	.word	0x0800615f
 8005ee4:	0800615f 	.word	0x0800615f
 8005ee8:	0800615f 	.word	0x0800615f
 8005eec:	0800615f 	.word	0x0800615f
 8005ef0:	0800615f 	.word	0x0800615f
 8005ef4:	0800615f 	.word	0x0800615f
 8005ef8:	0800615f 	.word	0x0800615f
 8005efc:	08005f4d 	.word	0x08005f4d
 8005f00:	0800615f 	.word	0x0800615f
 8005f04:	0800615f 	.word	0x0800615f
 8005f08:	0800615f 	.word	0x0800615f
 8005f0c:	0800615f 	.word	0x0800615f
 8005f10:	0800615f 	.word	0x0800615f
 8005f14:	0800615f 	.word	0x0800615f
 8005f18:	0800615f 	.word	0x0800615f
 8005f1c:	08005f53 	.word	0x08005f53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f20:	4b94      	ldr	r3, [pc, #592]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f2c:	4b91      	ldr	r3, [pc, #580]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	4a90      	ldr	r2, [pc, #576]	; (8006178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f3e:	e111      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f40:	4b8d      	ldr	r3, [pc, #564]	; (8006178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f42:	61bb      	str	r3, [r7, #24]
    break;
 8005f44:	e10e      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f46:	4b8d      	ldr	r3, [pc, #564]	; (800617c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f48:	61bb      	str	r3, [r7, #24]
    break;
 8005f4a:	e10b      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f4c:	4b8c      	ldr	r3, [pc, #560]	; (8006180 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f4e:	61bb      	str	r3, [r7, #24]
    break;
 8005f50:	e108      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f52:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f5c:	4b85      	ldr	r3, [pc, #532]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f68:	4b82      	ldr	r3, [pc, #520]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f72:	4b80      	ldr	r3, [pc, #512]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80e1 	beq.w	8006158 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f000 8083 	beq.w	80060a4 <HAL_RCC_GetSysClockFreq+0x204>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	f200 80a1 	bhi.w	80060e8 <HAL_RCC_GetSysClockFreq+0x248>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x114>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d056      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005fb2:	e099      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb4:	4b6f      	ldr	r3, [pc, #444]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02d      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fc0:	4b6c      	ldr	r3, [pc, #432]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	08db      	lsrs	r3, r3, #3
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	4a6b      	ldr	r2, [pc, #428]	; (8006178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fea:	4b62      	ldr	r3, [pc, #392]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ffe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006016:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800601a:	e087      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006188 <HAL_RCC_GetSysClockFreq+0x2e8>
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b51      	ldr	r3, [pc, #324]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006042:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800605e:	e065      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800618c <HAL_RCC_GetSysClockFreq+0x2ec>
 800606e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006072:	4b40      	ldr	r3, [pc, #256]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	ed97 6a02 	vldr	s12, [r7, #8]
 8006086:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800608a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a2:	e043      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006190 <HAL_RCC_GetSysClockFreq+0x2f0>
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b2f      	ldr	r3, [pc, #188]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006184 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e6:	e021      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800618c <HAL_RCC_GetSysClockFreq+0x2ec>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a02 	vldr	s12, [r7, #8]
 800610e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800612c:	4b11      	ldr	r3, [pc, #68]	; (8006174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	0a5b      	lsrs	r3, r3, #9
 8006132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006136:	3301      	adds	r3, #1
 8006138:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006144:	edd7 6a07 	vldr	s13, [r7, #28]
 8006148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800614c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006150:	ee17 3a90 	vmov	r3, s15
 8006154:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006156:	e005      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
    break;
 800615c:	e002      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006160:	61bb      	str	r3, [r7, #24]
    break;
 8006162:	bf00      	nop
  }

  return sysclockfreq;
 8006164:	69bb      	ldr	r3, [r7, #24]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	58024400 	.word	0x58024400
 8006178:	03d09000 	.word	0x03d09000
 800617c:	003d0900 	.word	0x003d0900
 8006180:	02dc6c00 	.word	0x02dc6c00
 8006184:	46000000 	.word	0x46000000
 8006188:	4c742400 	.word	0x4c742400
 800618c:	4a742400 	.word	0x4a742400
 8006190:	4c371b00 	.word	0x4c371b00

08006194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800619a:	f7ff fe81 	bl	8005ea0 <HAL_RCC_GetSysClockFreq>
 800619e:	4602      	mov	r2, r0
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	0a1b      	lsrs	r3, r3, #8
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	490f      	ldr	r1, [pc, #60]	; (80061e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80061ac:	5ccb      	ldrb	r3, [r1, r3]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	fa22 f303 	lsr.w	r3, r2, r3
 80061b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80061c2:	5cd3      	ldrb	r3, [r2, r3]
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <HAL_RCC_GetHCLKFreq+0x58>)
 80061d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061d2:	4a07      	ldr	r2, [pc, #28]	; (80061f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061d8:	4b04      	ldr	r3, [pc, #16]	; (80061ec <HAL_RCC_GetHCLKFreq+0x58>)
 80061da:	681b      	ldr	r3, [r3, #0]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	58024400 	.word	0x58024400
 80061e8:	0800bd84 	.word	0x0800bd84
 80061ec:	20000004 	.word	0x20000004
 80061f0:	20000000 	.word	0x20000000

080061f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061f8:	f7ff ffcc 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	091b      	lsrs	r3, r3, #4
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	4904      	ldr	r1, [pc, #16]	; (800621c <HAL_RCC_GetPCLK1Freq+0x28>)
 800620a:	5ccb      	ldrb	r3, [r1, r3]
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	58024400 	.word	0x58024400
 800621c:	0800bd84 	.word	0x0800bd84

08006220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006224:	f7ff ffb6 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4904      	ldr	r1, [pc, #16]	; (8006248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}
 8006244:	58024400 	.word	0x58024400
 8006248:	0800bd84 	.word	0x0800bd84

0800624c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006258:	2300      	movs	r3, #0
 800625a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d03f      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006270:	d02a      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006276:	d824      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800627c:	d018      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800627e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006282:	d81e      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800628c:	d007      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800628e:	e018      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006290:	4bab      	ldr	r3, [pc, #684]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4aaa      	ldr	r2, [pc, #680]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800629c:	e015      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2102      	movs	r1, #2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f9cf 	bl	8007648 <RCCEx_PLL2_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062ae:	e00c      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	2102      	movs	r1, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fa78 	bl	80077ac <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
      break;
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80062c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062d0:	4b9b      	ldr	r3, [pc, #620]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062dc:	4998      	ldr	r1, [pc, #608]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	650b      	str	r3, [r1, #80]	; 0x50
 80062e2:	e001      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d03d      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d826      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006319 	.word	0x08006319
 8006308:	08006327 	.word	0x08006327
 800630c:	08006339 	.word	0x08006339
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b89      	ldr	r3, [pc, #548]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a88      	ldr	r2, [pc, #544]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006324:	e015      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3304      	adds	r3, #4
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f001 f98b 	bl	8007648 <RCCEx_PLL2_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006336:	e00c      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fa34 	bl	80077ac <RCCEx_PLL3_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
      break;
 800634e:	e000      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006358:	4b79      	ldr	r3, [pc, #484]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800635a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635c:	f023 0207 	bic.w	r2, r3, #7
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	4976      	ldr	r1, [pc, #472]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006366:	4313      	orrs	r3, r2
 8006368:	650b      	str	r3, [r1, #80]	; 0x50
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006378:	2b00      	cmp	r3, #0
 800637a:	d042      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006384:	d02b      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638a:	d825      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800638c:	2bc0      	cmp	r3, #192	; 0xc0
 800638e:	d028      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006390:	2bc0      	cmp	r3, #192	; 0xc0
 8006392:	d821      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d016      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d81d      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d007      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80063a4:	e018      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a6:	4b66      	ldr	r3, [pc, #408]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	4a65      	ldr	r2, [pc, #404]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063b2:	e017      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f944 	bl	8007648 <RCCEx_PLL2_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063c4:	e00e      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3324      	adds	r3, #36	; 0x24
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f9ed 	bl	80077ac <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063d6:	e005      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	75fb      	strb	r3, [r7, #23]
      break;
 80063dc:	e002      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80063e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063ea:	4b55      	ldr	r3, [pc, #340]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	4952      	ldr	r1, [pc, #328]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	650b      	str	r3, [r1, #80]	; 0x50
 80063fc:	e001      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640a:	2b00      	cmp	r3, #0
 800640c:	d049      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006418:	d030      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800641a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800641e:	d82a      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006420:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006424:	d02c      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800642a:	d824      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800642c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006430:	d018      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006436:	d81e      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800643c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006440:	d007      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006442:	e018      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006444:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4a3d      	ldr	r2, [pc, #244]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006450:	e017      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f001 f8f5 	bl	8007648 <RCCEx_PLL2_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006462:	e00e      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f99e 	bl	80077ac <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006474:	e005      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
      break;
 800647a:	e002      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800647c:	bf00      	nop
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006488:	4b2d      	ldr	r3, [pc, #180]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006496:	492a      	ldr	r1, [pc, #168]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006498:	4313      	orrs	r3, r2
 800649a:	658b      	str	r3, [r1, #88]	; 0x58
 800649c:	e001      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d04c      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064b8:	d030      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80064ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064be:	d82a      	bhi.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064c4:	d02c      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80064c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064ca:	d824      	bhi.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064d0:	d018      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80064d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064d6:	d81e      	bhi.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064e0:	d007      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80064e2:	e018      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e4:	4b16      	ldr	r3, [pc, #88]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f0:	e017      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3304      	adds	r3, #4
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 f8a5 	bl	8007648 <RCCEx_PLL2_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006502:	e00e      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3324      	adds	r3, #36	; 0x24
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f001 f94e 	bl	80077ac <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006514:	e005      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
      break;
 800651a:	e002      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006528:	4b05      	ldr	r3, [pc, #20]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006536:	4902      	ldr	r1, [pc, #8]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006538:	4313      	orrs	r3, r2
 800653a:	658b      	str	r3, [r1, #88]	; 0x58
 800653c:	e004      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d032      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006558:	2b30      	cmp	r3, #48	; 0x30
 800655a:	d01c      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800655c:	2b30      	cmp	r3, #48	; 0x30
 800655e:	d817      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d00c      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006564:	2b20      	cmp	r3, #32
 8006566:	d813      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d016      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800656c:	2b10      	cmp	r3, #16
 800656e:	d10f      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006570:	4baf      	ldr	r3, [pc, #700]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4aae      	ldr	r2, [pc, #696]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800657c:	e00e      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f85f 	bl	8007648 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800658e:	e005      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	75fb      	strb	r3, [r7, #23]
      break;
 8006594:	e002      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006596:	bf00      	nop
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800659a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065a2:	4ba3      	ldr	r3, [pc, #652]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ae:	49a0      	ldr	r1, [pc, #640]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d047      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ce:	d030      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80065d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065d4:	d82a      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065da:	d02c      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80065dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065e0:	d824      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e6:	d018      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ec:	d81e      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	d007      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065f8:	e018      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	4a8c      	ldr	r2, [pc, #560]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006606:	e017      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f001 f81a 	bl	8007648 <RCCEx_PLL2_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006618:	e00e      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3324      	adds	r3, #36	; 0x24
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f8c3 	bl	80077ac <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800662a:	e005      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
      break;
 8006630:	e002      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800663e:	4b7c      	ldr	r3, [pc, #496]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006642:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	4979      	ldr	r1, [pc, #484]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800664c:	4313      	orrs	r3, r2
 800664e:	650b      	str	r3, [r1, #80]	; 0x50
 8006650:	e001      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d049      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800666a:	d02e      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800666c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006670:	d828      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006676:	d02a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006678:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800667c:	d822      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800667e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006682:	d026      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006688:	d81c      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800668a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668e:	d010      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006694:	d816      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01d      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800669a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669e:	d111      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 ffce 	bl	8007648 <RCCEx_PLL2_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066b0:	e012      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	2101      	movs	r1, #1
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 f877 	bl	80077ac <RCCEx_PLL3_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066c2:	e009      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      break;
 80066c8:	e006      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066ca:	bf00      	nop
 80066cc:	e004      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066de:	4b54      	ldr	r3, [pc, #336]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	4951      	ldr	r1, [pc, #324]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	650b      	str	r3, [r1, #80]	; 0x50
 80066f0:	e001      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04b      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800670c:	d02e      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800670e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006712:	d828      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d02a      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d822      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006724:	d026      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800672a:	d81c      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006730:	d010      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006736:	d816      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01d      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800673c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006740:	d111      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	2101      	movs	r1, #1
 8006748:	4618      	mov	r0, r3
 800674a:	f000 ff7d 	bl	8007648 <RCCEx_PLL2_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006752:	e012      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3324      	adds	r3, #36	; 0x24
 8006758:	2101      	movs	r1, #1
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f826 	bl	80077ac <RCCEx_PLL3_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006764:	e009      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	75fb      	strb	r3, [r7, #23]
      break;
 800676a:	e006      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800676c:	bf00      	nop
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006780:	4b2b      	ldr	r3, [pc, #172]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800678e:	4928      	ldr	r1, [pc, #160]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006790:	4313      	orrs	r3, r2
 8006792:	658b      	str	r3, [r1, #88]	; 0x58
 8006794:	e001      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d02f      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ae:	d00e      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d814      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d015      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80067ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067be:	d10f      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067cc:	e00c      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 ff37 	bl	8007648 <RCCEx_PLL2_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
      break;
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80067e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067ee:	4b10      	ldr	r3, [pc, #64]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fa:	490d      	ldr	r1, [pc, #52]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	650b      	str	r3, [r1, #80]	; 0x50
 8006800:	e001      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d033      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	2b03      	cmp	r3, #3
 8006818:	d81c      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	0800685b 	.word	0x0800685b
 8006824:	08006835 	.word	0x08006835
 8006828:	08006843 	.word	0x08006843
 800682c:	0800685b 	.word	0x0800685b
 8006830:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4bb8      	ldr	r3, [pc, #736]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4ab7      	ldr	r2, [pc, #732]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006840:	e00c      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2102      	movs	r1, #2
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fefd 	bl	8007648 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006852:	e003      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
      break;
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800685a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006862:	4bad      	ldr	r3, [pc, #692]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006866:	f023 0203 	bic.w	r2, r3, #3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	49aa      	ldr	r1, [pc, #680]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8086 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006888:	4ba4      	ldr	r3, [pc, #656]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4aa3      	ldr	r2, [pc, #652]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800688e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006894:	f7fb feea 	bl	800266c <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689a:	e009      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689c:	f7fb fee6 	bl	800266c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	; 0x64
 80068a8:	d902      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	75fb      	strb	r3, [r7, #23]
        break;
 80068ae:	e005      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b0:	4b9a      	ldr	r3, [pc, #616]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ef      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d166      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068c2:	4b95      	ldr	r3, [pc, #596]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068cc:	4053      	eors	r3, r2
 80068ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068d6:	4b90      	ldr	r3, [pc, #576]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068e0:	4b8d      	ldr	r3, [pc, #564]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e4:	4a8c      	ldr	r2, [pc, #560]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068ec:	4b8a      	ldr	r3, [pc, #552]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	4a89      	ldr	r2, [pc, #548]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068f8:	4a87      	ldr	r2, [pc, #540]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006908:	d115      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690a:	f7fb feaf 	bl	800266c <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006910:	e00b      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fb feab 	bl	800266c <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d902      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	75fb      	strb	r3, [r7, #23]
            break;
 8006928:	e005      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800692a:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0ed      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d126      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800694a:	d10d      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800694c:	4b72      	ldr	r3, [pc, #456]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800695a:	0919      	lsrs	r1, r3, #4
 800695c:	4b70      	ldr	r3, [pc, #448]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800695e:	400b      	ands	r3, r1
 8006960:	496d      	ldr	r1, [pc, #436]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006962:	4313      	orrs	r3, r2
 8006964:	610b      	str	r3, [r1, #16]
 8006966:	e005      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006968:	4b6b      	ldr	r3, [pc, #428]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	4a6a      	ldr	r2, [pc, #424]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800696e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006972:	6113      	str	r3, [r2, #16]
 8006974:	4b68      	ldr	r3, [pc, #416]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006982:	4965      	ldr	r1, [pc, #404]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006984:	4313      	orrs	r3, r2
 8006986:	670b      	str	r3, [r1, #112]	; 0x70
 8006988:	e004      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	75bb      	strb	r3, [r7, #22]
 800698e:	e001      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d07e      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a4:	2b28      	cmp	r3, #40	; 0x28
 80069a6:	d867      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	08006a7f 	.word	0x08006a7f
 80069b4:	08006a79 	.word	0x08006a79
 80069b8:	08006a79 	.word	0x08006a79
 80069bc:	08006a79 	.word	0x08006a79
 80069c0:	08006a79 	.word	0x08006a79
 80069c4:	08006a79 	.word	0x08006a79
 80069c8:	08006a79 	.word	0x08006a79
 80069cc:	08006a79 	.word	0x08006a79
 80069d0:	08006a55 	.word	0x08006a55
 80069d4:	08006a79 	.word	0x08006a79
 80069d8:	08006a79 	.word	0x08006a79
 80069dc:	08006a79 	.word	0x08006a79
 80069e0:	08006a79 	.word	0x08006a79
 80069e4:	08006a79 	.word	0x08006a79
 80069e8:	08006a79 	.word	0x08006a79
 80069ec:	08006a79 	.word	0x08006a79
 80069f0:	08006a67 	.word	0x08006a67
 80069f4:	08006a79 	.word	0x08006a79
 80069f8:	08006a79 	.word	0x08006a79
 80069fc:	08006a79 	.word	0x08006a79
 8006a00:	08006a79 	.word	0x08006a79
 8006a04:	08006a79 	.word	0x08006a79
 8006a08:	08006a79 	.word	0x08006a79
 8006a0c:	08006a79 	.word	0x08006a79
 8006a10:	08006a7f 	.word	0x08006a7f
 8006a14:	08006a79 	.word	0x08006a79
 8006a18:	08006a79 	.word	0x08006a79
 8006a1c:	08006a79 	.word	0x08006a79
 8006a20:	08006a79 	.word	0x08006a79
 8006a24:	08006a79 	.word	0x08006a79
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006a79 	.word	0x08006a79
 8006a30:	08006a7f 	.word	0x08006a7f
 8006a34:	08006a79 	.word	0x08006a79
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a79 	.word	0x08006a79
 8006a40:	08006a79 	.word	0x08006a79
 8006a44:	08006a79 	.word	0x08006a79
 8006a48:	08006a79 	.word	0x08006a79
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	08006a7f 	.word	0x08006a7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fdf4 	bl	8007648 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a64:	e00c      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fe9d 	bl	80077ac <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a86:	4b24      	ldr	r3, [pc, #144]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a92:	4921      	ldr	r1, [pc, #132]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	654b      	str	r3, [r1, #84]	; 0x54
 8006a98:	e001      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d03e      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d820      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006afb 	.word	0x08006afb
 8006abc:	08006ad1 	.word	0x08006ad1
 8006ac0:	08006ae3 	.word	0x08006ae3
 8006ac4:	08006afb 	.word	0x08006afb
 8006ac8:	08006afb 	.word	0x08006afb
 8006acc:	08006afb 	.word	0x08006afb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fdb6 	bl	8007648 <RCCEx_PLL2_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ae0:	e00c      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3324      	adds	r3, #36	; 0x24
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fe5f 	bl	80077ac <RCCEx_PLL3_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006af2:	e003      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	75fb      	strb	r3, [r7, #23]
      break;
 8006af8:	e000      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d110      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	f023 0207 	bic.w	r2, r3, #7
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0e:	4902      	ldr	r1, [pc, #8]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	654b      	str	r3, [r1, #84]	; 0x54
 8006b14:	e008      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006b16:	bf00      	nop
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	58024800 	.word	0x58024800
 8006b20:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d039      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	d820      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b87 	.word	0x08006b87
 8006b48:	08006b5d 	.word	0x08006b5d
 8006b4c:	08006b6f 	.word	0x08006b6f
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006b87 	.word	0x08006b87
 8006b58:	08006b87 	.word	0x08006b87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	2101      	movs	r1, #1
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fd70 	bl	8007648 <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b6c:	e00c      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3324      	adds	r3, #36	; 0x24
 8006b72:	2101      	movs	r1, #1
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fe19 	bl	80077ac <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b7e:	e003      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
      break;
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b8e:	4bb7      	ldr	r3, [pc, #732]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b92:	f023 0207 	bic.w	r2, r3, #7
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9c:	49b3      	ldr	r1, [pc, #716]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ba2:	e001      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d04b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bbe:	d02e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bc4:	d828      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d02a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd0:	d822      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bd6:	d026      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bdc:	d81c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be2:	d010      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be8:	d816      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf2:	d111      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fd24 	bl	8007648 <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c04:	e012      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3324      	adds	r3, #36	; 0x24
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fdcd 	bl	80077ac <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c16:	e009      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c32:	4b8e      	ldr	r3, [pc, #568]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c40:	498a      	ldr	r1, [pc, #552]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	654b      	str	r3, [r1, #84]	; 0x54
 8006c46:	e001      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d04b      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c62:	d02e      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006c64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c68:	d828      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6e:	d02a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c74:	d822      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c7a:	d026      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c80:	d81c      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c86:	d010      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	d816      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01d      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c96:	d111      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fcd2 	bl	8007648 <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ca8:	e012      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	; 0x24
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fd7b 	bl	80077ac <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cba:	e009      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cd6:	4b65      	ldr	r3, [pc, #404]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ce4:	4961      	ldr	r1, [pc, #388]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8006cea:	e001      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d04b      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d06:	d02e      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006d08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d0c:	d828      	bhi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d12:	d02a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d18:	d822      	bhi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d1e:	d026      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d24:	d81c      	bhi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d2a:	d010      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d30:	d816      	bhi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01d      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	d111      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fc80 	bl	8007648 <RCCEx_PLL2_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d4c:	e012      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3324      	adds	r3, #36	; 0x24
 8006d52:	2102      	movs	r1, #2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fd29 	bl	80077ac <RCCEx_PLL3_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d5e:	e009      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
      break;
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d66:	bf00      	nop
 8006d68:	e004      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d6a:	bf00      	nop
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d7a:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d88:	4938      	ldr	r1, [pc, #224]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d8e:	e001      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006daa:	d10a      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3324      	adds	r3, #36	; 0x24
 8006db0:	2102      	movs	r1, #2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fcfa 	bl	80077ac <RCCEx_PLL3_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006dc2:	4b2a      	ldr	r3, [pc, #168]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd0:	4926      	ldr	r1, [pc, #152]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01a      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dec:	d10a      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3324      	adds	r3, #36	; 0x24
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fcd9 	bl	80077ac <RCCEx_PLL3_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e04:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e12:	4916      	ldr	r1, [pc, #88]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d036      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e2e:	d01f      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e34:	d817      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d009      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006e40:	e011      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3304      	adds	r3, #4
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fbfd 	bl	8007648 <RCCEx_PLL2_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e52:	e00e      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fca6 	bl	80077ac <RCCEx_PLL3_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e64:	e005      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6a:	e002      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e6c:	58024400 	.word	0x58024400
      break;
 8006e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e78:	4b93      	ldr	r3, [pc, #588]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e86:	4990      	ldr	r1, [pc, #576]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e8c:	e001      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d033      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea8:	d01c      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006eaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eae:	d816      	bhi.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb4:	d003      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eba:	d007      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006ebc:	e00f      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebe:	4b82      	ldr	r3, [pc, #520]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	4a81      	ldr	r2, [pc, #516]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006eca:	e00c      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3324      	adds	r3, #36	; 0x24
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fc6a 	bl	80077ac <RCCEx_PLL3_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006edc:	e003      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eec:	4b76      	ldr	r3, [pc, #472]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efa:	4973      	ldr	r1, [pc, #460]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	654b      	str	r3, [r1, #84]	; 0x54
 8006f00:	e001      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d029      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1e:	d007      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006f20:	e00f      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f22:	4b69      	ldr	r3, [pc, #420]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f2e:	e00b      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	2102      	movs	r1, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fb86 	bl	8007648 <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f40:	e002      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
      break;
 8006f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f4e:	4b5e      	ldr	r3, [pc, #376]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	495b      	ldr	r1, [pc, #364]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f60:	e001      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3324      	adds	r3, #36	; 0x24
 8006f76:	2102      	movs	r1, #2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fc17 	bl	80077ac <RCCEx_PLL3_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d030      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f9c:	d017      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa2:	d811      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa8:	d013      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fae:	d80b      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d010      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fba:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4a42      	ldr	r2, [pc, #264]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fc6:	e007      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
      break;
 8006fcc:	e004      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006fce:	bf00      	nop
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fde:	4b3a      	ldr	r3, [pc, #232]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fea:	4937      	ldr	r1, [pc, #220]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	654b      	str	r3, [r1, #84]	; 0x54
 8006ff0:	e001      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007002:	4b31      	ldr	r3, [pc, #196]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	492e      	ldr	r1, [pc, #184]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007020:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800702e:	4926      	ldr	r1, [pc, #152]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007040:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007044:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704c:	491e      	ldr	r1, [pc, #120]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800704e:	4313      	orrs	r3, r2
 8007050:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00d      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800705e:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007068:	6113      	str	r3, [r2, #16]
 800706a:	4b17      	ldr	r3, [pc, #92]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007074:	4914      	ldr	r1, [pc, #80]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007076:	4313      	orrs	r3, r2
 8007078:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	da08      	bge.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708e:	490e      	ldr	r1, [pc, #56]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007090:	4313      	orrs	r3, r2
 8007092:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d009      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	4906      	ldr	r1, [pc, #24]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80070b4:	7dbb      	ldrb	r3, [r7, #22]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e000      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	58024400 	.word	0x58024400

080070cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070d0:	f7ff f860 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	4904      	ldr	r1, [pc, #16]	; (80070f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070e2:	5ccb      	ldrb	r3, [r1, r3]
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	58024400 	.word	0x58024400
 80070f4:	0800bd84 	.word	0x0800bd84

080070f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007100:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800710a:	4b9f      	ldr	r3, [pc, #636]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	0b1b      	lsrs	r3, r3, #12
 8007110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007114:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007116:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007122:	4b99      	ldr	r3, [pc, #612]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8111 	beq.w	8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b02      	cmp	r3, #2
 800714a:	f000 8083 	beq.w	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f200 80a1 	bhi.w	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d056      	beq.n	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007162:	e099      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007164:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02d      	beq.n	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007170:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a84      	ldr	r2, [pc, #528]	; (800738c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071ca:	e087      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800720e:	e065      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007252:	e043      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007296:	e021      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072dc:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	0a5b      	lsrs	r3, r3, #9
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800730a:	4b1f      	ldr	r3, [pc, #124]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007324:	edd7 6a07 	vldr	s13, [r7, #28]
 8007328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007330:	ee17 2a90 	vmov	r2, s15
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007352:	edd7 6a07 	vldr	s13, [r7, #28]
 8007356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735e:	ee17 2a90 	vmov	r2, s15
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007366:	e008      	b.n	800737a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	609a      	str	r2, [r3, #8]
}
 800737a:	bf00      	nop
 800737c:	3724      	adds	r7, #36	; 0x24
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400
 800738c:	03d09000 	.word	0x03d09000
 8007390:	46000000 	.word	0x46000000
 8007394:	4c742400 	.word	0x4c742400
 8007398:	4a742400 	.word	0x4a742400
 800739c:	4c371b00 	.word	0x4c371b00

080073a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b089      	sub	sp, #36	; 0x24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a8:	4ba1      	ldr	r3, [pc, #644]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073b2:	4b9f      	ldr	r3, [pc, #636]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	0d1b      	lsrs	r3, r3, #20
 80073b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073be:	4b9c      	ldr	r3, [pc, #624]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80073ca:	4b99      	ldr	r3, [pc, #612]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	08db      	lsrs	r3, r3, #3
 80073d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	fb02 f303 	mul.w	r3, r2, r3
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8111 	beq.w	8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	f000 8083 	beq.w	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	f200 80a1 	bhi.w	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d056      	beq.n	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800740a:	e099      	b.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800740c:	4b88      	ldr	r3, [pc, #544]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02d      	beq.n	8007474 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007418:	4b85      	ldr	r3, [pc, #532]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	08db      	lsrs	r3, r3, #3
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	4a84      	ldr	r2, [pc, #528]	; (8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007424:	fa22 f303 	lsr.w	r3, r2, r3
 8007428:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007442:	4b7b      	ldr	r3, [pc, #492]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	ed97 6a03 	vldr	s12, [r7, #12]
 8007456:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007472:	e087      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800763c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b6a      	ldr	r3, [pc, #424]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b6:	e065      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b59      	ldr	r3, [pc, #356]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fa:	e043      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b48      	ldr	r3, [pc, #288]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753e:	e021      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b37      	ldr	r3, [pc, #220]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007582:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007584:	4b2a      	ldr	r3, [pc, #168]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	0a5b      	lsrs	r3, r3, #9
 800758a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759e:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075aa:	ee17 2a90 	vmov	r2, s15
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075b2:	4b1f      	ldr	r3, [pc, #124]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d8:	ee17 2a90 	vmov	r2, s15
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075e0:	4b13      	ldr	r3, [pc, #76]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	0e1b      	lsrs	r3, r3, #24
 80075e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007606:	ee17 2a90 	vmov	r2, s15
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800760e:	e008      	b.n	8007622 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	609a      	str	r2, [r3, #8]
}
 8007622:	bf00      	nop
 8007624:	3724      	adds	r7, #36	; 0x24
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400
 8007634:	03d09000 	.word	0x03d09000
 8007638:	46000000 	.word	0x46000000
 800763c:	4c742400 	.word	0x4c742400
 8007640:	4a742400 	.word	0x4a742400
 8007644:	4c371b00 	.word	0x4c371b00

08007648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007656:	4b53      	ldr	r3, [pc, #332]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b03      	cmp	r3, #3
 8007660:	d101      	bne.n	8007666 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e099      	b.n	800779a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007666:	4b4f      	ldr	r3, [pc, #316]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a4e      	ldr	r2, [pc, #312]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800766c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007672:	f7fa fffb 	bl	800266c <HAL_GetTick>
 8007676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007678:	e008      	b.n	800768c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800767a:	f7fa fff7 	bl	800266c <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e086      	b.n	800779a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800768c:	4b45      	ldr	r3, [pc, #276]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f0      	bne.n	800767a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007698:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	031b      	lsls	r3, r3, #12
 80076a6:	493f      	ldr	r1, [pc, #252]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	628b      	str	r3, [r1, #40]	; 0x28
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	025b      	lsls	r3, r3, #9
 80076be:	b29b      	uxth	r3, r3
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	061b      	lsls	r3, r3, #24
 80076d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076dc:	4931      	ldr	r1, [pc, #196]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076e2:	4b30      	ldr	r3, [pc, #192]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	492d      	ldr	r1, [pc, #180]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076f4:	4b2b      	ldr	r3, [pc, #172]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f023 0220 	bic.w	r2, r3, #32
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	4928      	ldr	r1, [pc, #160]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007702:	4313      	orrs	r3, r2
 8007704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007706:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	4a26      	ldr	r2, [pc, #152]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800770c:	f023 0310 	bic.w	r3, r3, #16
 8007710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007712:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007716:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <RCCEx_PLL2_Config+0x160>)
 8007718:	4013      	ands	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	69d2      	ldr	r2, [r2, #28]
 800771e:	00d2      	lsls	r2, r2, #3
 8007720:	4920      	ldr	r1, [pc, #128]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007726:	4b1f      	ldr	r3, [pc, #124]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800772c:	f043 0310 	orr.w	r3, r3, #16
 8007730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007738:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800773e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007744:	e00f      	b.n	8007766 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d106      	bne.n	800775a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800774c:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	4a14      	ldr	r2, [pc, #80]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007758:	e005      	b.n	8007766 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a11      	ldr	r2, [pc, #68]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007766:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a0e      	ldr	r2, [pc, #56]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800776c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007772:	f7fa ff7b 	bl	800266c <HAL_GetTick>
 8007776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007778:	e008      	b.n	800778c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800777a:	f7fa ff77 	bl	800266c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e006      	b.n	800779a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <RCCEx_PLL2_Config+0x15c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
 80077a8:	ffff0007 	.word	0xffff0007

080077ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ba:	4b53      	ldr	r3, [pc, #332]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d101      	bne.n	80077ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e099      	b.n	80078fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077ca:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a4e      	ldr	r2, [pc, #312]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80077d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d6:	f7fa ff49 	bl	800266c <HAL_GetTick>
 80077da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077dc:	e008      	b.n	80077f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077de:	f7fa ff45 	bl	800266c <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e086      	b.n	80078fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f0      	bne.n	80077de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077fc:	4b42      	ldr	r3, [pc, #264]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	051b      	lsls	r3, r3, #20
 800780a:	493f      	ldr	r1, [pc, #252]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 800780c:	4313      	orrs	r3, r2
 800780e:	628b      	str	r3, [r1, #40]	; 0x28
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	025b      	lsls	r3, r3, #9
 8007822:	b29b      	uxth	r3, r3
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	3b01      	subs	r3, #1
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	3b01      	subs	r3, #1
 800783a:	061b      	lsls	r3, r3, #24
 800783c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007840:	4931      	ldr	r1, [pc, #196]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	492d      	ldr	r1, [pc, #180]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007858:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	4928      	ldr	r1, [pc, #160]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800786a:	4b27      	ldr	r3, [pc, #156]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	4a26      	ldr	r2, [pc, #152]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <RCCEx_PLL3_Config+0x160>)
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	69d2      	ldr	r2, [r2, #28]
 8007882:	00d2      	lsls	r2, r2, #3
 8007884:	4920      	ldr	r1, [pc, #128]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800788a:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 8007890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a8:	e00f      	b.n	80078ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a14      	ldr	r2, [pc, #80]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078bc:	e005      	b.n	80078ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a11      	ldr	r2, [pc, #68]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a0e      	ldr	r2, [pc, #56]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fa fec9 	bl	800266c <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078dc:	e008      	b.n	80078f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078de:	f7fa fec5 	bl	800266c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e006      	b.n	80078fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <RCCEx_PLL3_Config+0x15c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	58024400 	.word	0x58024400
 800790c:	ffff0007 	.word	0xffff0007

08007910 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0eb      	b.n	8007afe <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a75      	ldr	r2, [pc, #468]	; (8007b08 <HAL_SPI_Init+0x1f8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00f      	beq.n	8007956 <HAL_SPI_Init+0x46>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a74      	ldr	r2, [pc, #464]	; (8007b0c <HAL_SPI_Init+0x1fc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00a      	beq.n	8007956 <HAL_SPI_Init+0x46>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a72      	ldr	r2, [pc, #456]	; (8007b10 <HAL_SPI_Init+0x200>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d005      	beq.n	8007956 <HAL_SPI_Init+0x46>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b0f      	cmp	r3, #15
 8007950:	d901      	bls.n	8007956 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e0d3      	b.n	8007afe <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8dc 	bl	8007b14 <SPI_GetPacketSize>
 800795c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a69      	ldr	r2, [pc, #420]	; (8007b08 <HAL_SPI_Init+0x1f8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00c      	beq.n	8007982 <HAL_SPI_Init+0x72>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a67      	ldr	r2, [pc, #412]	; (8007b0c <HAL_SPI_Init+0x1fc>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d007      	beq.n	8007982 <HAL_SPI_Init+0x72>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a66      	ldr	r2, [pc, #408]	; (8007b10 <HAL_SPI_Init+0x200>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d002      	beq.n	8007982 <HAL_SPI_Init+0x72>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b08      	cmp	r3, #8
 8007980:	d811      	bhi.n	80079a6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007986:	4a60      	ldr	r2, [pc, #384]	; (8007b08 <HAL_SPI_Init+0x1f8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d009      	beq.n	80079a0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5e      	ldr	r2, [pc, #376]	; (8007b0c <HAL_SPI_Init+0x1fc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_SPI_Init+0x90>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <HAL_SPI_Init+0x200>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d104      	bne.n	80079aa <HAL_SPI_Init+0x9a>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b10      	cmp	r3, #16
 80079a4:	d901      	bls.n	80079aa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e0a9      	b.n	8007afe <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fa f81c 	bl	80019fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0201 	bic.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079e4:	d119      	bne.n	8007a1a <HAL_SPI_Init+0x10a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ee:	d103      	bne.n	80079f8 <HAL_SPI_Init+0xe8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d008      	beq.n	8007a0a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10c      	bne.n	8007a1a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a08:	d107      	bne.n	8007a1a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	ea42 0103 	orr.w	r1, r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	ea42 0103 	orr.w	r1, r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d113      	bne.n	8007aba <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ab8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0201 	bic.w	r2, r2, #1
 8007ac8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	40013000 	.word	0x40013000
 8007b0c:	40003800 	.word	0x40003800
 8007b10:	40003c00 	.word	0x40003c00

08007b14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	3307      	adds	r3, #7
 8007b32:	08db      	lsrs	r3, r3, #3
 8007b34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e049      	b.n	8007bf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7f9 ffa9 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f000 fbe1 	bl	8008350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e049      	b.n	8007c9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f841 	bl	8007ca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f000 fb8a 	bl	8008350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d122      	bne.n	8007d16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d11b      	bne.n	8007d16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f06f 0202 	mvn.w	r2, #2
 8007ce6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb09 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
 8007d02:	e005      	b.n	8007d10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fafb 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fb0c 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d122      	bne.n	8007d6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d11b      	bne.n	8007d6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f06f 0204 	mvn.w	r2, #4
 8007d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fadf 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
 8007d56:	e005      	b.n	8007d64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fad1 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fae2 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d122      	bne.n	8007dbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d11b      	bne.n	8007dbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f06f 0208 	mvn.w	r2, #8
 8007d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2204      	movs	r2, #4
 8007d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fab5 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
 8007daa:	e005      	b.n	8007db8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 faa7 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fab8 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f003 0310 	and.w	r3, r3, #16
 8007dc8:	2b10      	cmp	r3, #16
 8007dca:	d122      	bne.n	8007e12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d11b      	bne.n	8007e12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f06f 0210 	mvn.w	r2, #16
 8007de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2208      	movs	r2, #8
 8007de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa8b 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
 8007dfe:	e005      	b.n	8007e0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fa7d 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa8e 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10e      	bne.n	8007e3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d107      	bne.n	8007e3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f06f 0201 	mvn.w	r2, #1
 8007e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7f9 fd94 	bl	8001966 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e48:	2b80      	cmp	r3, #128	; 0x80
 8007e4a:	d10e      	bne.n	8007e6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e56:	2b80      	cmp	r3, #128	; 0x80
 8007e58:	d107      	bne.n	8007e6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 ff89 	bl	8008d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e78:	d10e      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d107      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 ff7c 	bl	8008d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d10e      	bne.n	8007ec4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d107      	bne.n	8007ec4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa3c 	bl	800833c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d10e      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d107      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0220 	mvn.w	r2, #32
 8007ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 ff3c 	bl	8008d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e0fd      	b.n	800810e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b14      	cmp	r3, #20
 8007f1e:	f200 80f0 	bhi.w	8008102 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08008103 	.word	0x08008103
 8007f30:	08008103 	.word	0x08008103
 8007f34:	08008103 	.word	0x08008103
 8007f38:	08007fbd 	.word	0x08007fbd
 8007f3c:	08008103 	.word	0x08008103
 8007f40:	08008103 	.word	0x08008103
 8007f44:	08008103 	.word	0x08008103
 8007f48:	08007fff 	.word	0x08007fff
 8007f4c:	08008103 	.word	0x08008103
 8007f50:	08008103 	.word	0x08008103
 8007f54:	08008103 	.word	0x08008103
 8007f58:	0800803f 	.word	0x0800803f
 8007f5c:	08008103 	.word	0x08008103
 8007f60:	08008103 	.word	0x08008103
 8007f64:	08008103 	.word	0x08008103
 8007f68:	08008081 	.word	0x08008081
 8007f6c:	08008103 	.word	0x08008103
 8007f70:	08008103 	.word	0x08008103
 8007f74:	08008103 	.word	0x08008103
 8007f78:	080080c1 	.word	0x080080c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fa7e 	bl	8008484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0208 	orr.w	r2, r2, #8
 8007f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0204 	bic.w	r2, r2, #4
 8007fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6999      	ldr	r1, [r3, #24]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	619a      	str	r2, [r3, #24]
      break;
 8007fba:	e0a3      	b.n	8008104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 faee 	bl	80085a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6999      	ldr	r1, [r3, #24]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	021a      	lsls	r2, r3, #8
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	619a      	str	r2, [r3, #24]
      break;
 8007ffc:	e082      	b.n	8008104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fb57 	bl	80086b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0208 	orr.w	r2, r2, #8
 8008018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0204 	bic.w	r2, r2, #4
 8008028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69d9      	ldr	r1, [r3, #28]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	61da      	str	r2, [r3, #28]
      break;
 800803c:	e062      	b.n	8008104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fbbd 	bl	80087c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69da      	ldr	r2, [r3, #28]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69d9      	ldr	r1, [r3, #28]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	021a      	lsls	r2, r3, #8
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	61da      	str	r2, [r3, #28]
      break;
 800807e:	e041      	b.n	8008104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68b9      	ldr	r1, [r7, #8]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fc04 	bl	8008894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0208 	orr.w	r2, r2, #8
 800809a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0204 	bic.w	r2, r2, #4
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080be:	e021      	b.n	8008104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fc46 	bl	8008958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	021a      	lsls	r2, r3, #8
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008100:	e000      	b.n	8008104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008102:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop

08008118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_TIM_ConfigClockSource+0x18>
 800812c:	2302      	movs	r3, #2
 800812e:	e0db      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4b69      	ldr	r3, [pc, #420]	; (80082f0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800814c:	4013      	ands	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008156:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a63      	ldr	r2, [pc, #396]	; (80082f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f000 80a9 	beq.w	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 800816c:	4a61      	ldr	r2, [pc, #388]	; (80082f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	f200 80ae 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008174:	4a60      	ldr	r2, [pc, #384]	; (80082f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	f000 80a1 	beq.w	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 800817c:	4a5e      	ldr	r2, [pc, #376]	; (80082f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	f200 80a6 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008184:	4a5d      	ldr	r2, [pc, #372]	; (80082fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	f000 8099 	beq.w	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 800818c:	4a5b      	ldr	r2, [pc, #364]	; (80082fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	f200 809e 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008194:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008198:	f000 8091 	beq.w	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 800819c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081a0:	f200 8096 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081a8:	f000 8089 	beq.w	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 80081ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b0:	f200 808e 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b8:	d03e      	beq.n	8008238 <HAL_TIM_ConfigClockSource+0x120>
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081be:	f200 8087 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c6:	f000 8085 	beq.w	80082d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d87f      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081d0:	2b70      	cmp	r3, #112	; 0x70
 80081d2:	d01a      	beq.n	800820a <HAL_TIM_ConfigClockSource+0xf2>
 80081d4:	2b70      	cmp	r3, #112	; 0x70
 80081d6:	d87b      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081d8:	2b60      	cmp	r3, #96	; 0x60
 80081da:	d050      	beq.n	800827e <HAL_TIM_ConfigClockSource+0x166>
 80081dc:	2b60      	cmp	r3, #96	; 0x60
 80081de:	d877      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081e0:	2b50      	cmp	r3, #80	; 0x50
 80081e2:	d03c      	beq.n	800825e <HAL_TIM_ConfigClockSource+0x146>
 80081e4:	2b50      	cmp	r3, #80	; 0x50
 80081e6:	d873      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d058      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x186>
 80081ec:	2b40      	cmp	r3, #64	; 0x40
 80081ee:	d86f      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081f0:	2b30      	cmp	r3, #48	; 0x30
 80081f2:	d064      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 80081f4:	2b30      	cmp	r3, #48	; 0x30
 80081f6:	d86b      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d060      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d867      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d05c      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x1a6>
 8008204:	2b10      	cmp	r3, #16
 8008206:	d05a      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008208:	e062      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6899      	ldr	r1, [r3, #8]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f000 fc7f 	bl	8008b1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800822c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	609a      	str	r2, [r3, #8]
      break;
 8008236:	e04e      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	6899      	ldr	r1, [r3, #8]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f000 fc68 	bl	8008b1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800825a:	609a      	str	r2, [r3, #8]
      break;
 800825c:	e03b      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6859      	ldr	r1, [r3, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	461a      	mov	r2, r3
 800826c:	f000 fbd8 	bl	8008a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2150      	movs	r1, #80	; 0x50
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fc32 	bl	8008ae0 <TIM_ITRx_SetConfig>
      break;
 800827c:	e02b      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6859      	ldr	r1, [r3, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	461a      	mov	r2, r3
 800828c:	f000 fbf7 	bl	8008a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2160      	movs	r1, #96	; 0x60
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fc22 	bl	8008ae0 <TIM_ITRx_SetConfig>
      break;
 800829c:	e01b      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6859      	ldr	r1, [r3, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f000 fbb8 	bl	8008a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2140      	movs	r1, #64	; 0x40
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fc12 	bl	8008ae0 <TIM_ITRx_SetConfig>
      break;
 80082bc:	e00b      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f000 fc09 	bl	8008ae0 <TIM_ITRx_SetConfig>
        break;
 80082ce:	e002      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80082d0:	bf00      	nop
 80082d2:	e000      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80082d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	ffceff88 	.word	0xffceff88
 80082f4:	00100040 	.word	0x00100040
 80082f8:	00100030 	.word	0x00100030
 80082fc:	00100020 	.word	0x00100020

08008300 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a40      	ldr	r2, [pc, #256]	; (8008464 <TIM_Base_SetConfig+0x114>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d013      	beq.n	8008390 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800836e:	d00f      	beq.n	8008390 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a3d      	ldr	r2, [pc, #244]	; (8008468 <TIM_Base_SetConfig+0x118>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00b      	beq.n	8008390 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a3c      	ldr	r2, [pc, #240]	; (800846c <TIM_Base_SetConfig+0x11c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d007      	beq.n	8008390 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a3b      	ldr	r2, [pc, #236]	; (8008470 <TIM_Base_SetConfig+0x120>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d003      	beq.n	8008390 <TIM_Base_SetConfig+0x40>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a3a      	ldr	r2, [pc, #232]	; (8008474 <TIM_Base_SetConfig+0x124>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d108      	bne.n	80083a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a2f      	ldr	r2, [pc, #188]	; (8008464 <TIM_Base_SetConfig+0x114>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01f      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b0:	d01b      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a2c      	ldr	r2, [pc, #176]	; (8008468 <TIM_Base_SetConfig+0x118>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d017      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2b      	ldr	r2, [pc, #172]	; (800846c <TIM_Base_SetConfig+0x11c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2a      	ldr	r2, [pc, #168]	; (8008470 <TIM_Base_SetConfig+0x120>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00f      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a29      	ldr	r2, [pc, #164]	; (8008474 <TIM_Base_SetConfig+0x124>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00b      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a28      	ldr	r2, [pc, #160]	; (8008478 <TIM_Base_SetConfig+0x128>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d007      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a27      	ldr	r2, [pc, #156]	; (800847c <TIM_Base_SetConfig+0x12c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d003      	beq.n	80083ea <TIM_Base_SetConfig+0x9a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a26      	ldr	r2, [pc, #152]	; (8008480 <TIM_Base_SetConfig+0x130>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d108      	bne.n	80083fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a10      	ldr	r2, [pc, #64]	; (8008464 <TIM_Base_SetConfig+0x114>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00f      	beq.n	8008448 <TIM_Base_SetConfig+0xf8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a12      	ldr	r2, [pc, #72]	; (8008474 <TIM_Base_SetConfig+0x124>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00b      	beq.n	8008448 <TIM_Base_SetConfig+0xf8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a11      	ldr	r2, [pc, #68]	; (8008478 <TIM_Base_SetConfig+0x128>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d007      	beq.n	8008448 <TIM_Base_SetConfig+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <TIM_Base_SetConfig+0x12c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d003      	beq.n	8008448 <TIM_Base_SetConfig+0xf8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a0f      	ldr	r2, [pc, #60]	; (8008480 <TIM_Base_SetConfig+0x130>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d103      	bne.n	8008450 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	615a      	str	r2, [r3, #20]
}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40010000 	.word	0x40010000
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40000c00 	.word	0x40000c00
 8008474:	40010400 	.word	0x40010400
 8008478:	40014000 	.word	0x40014000
 800847c:	40014400 	.word	0x40014400
 8008480:	40014800 	.word	0x40014800

08008484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4b37      	ldr	r3, [pc, #220]	; (800858c <TIM_OC1_SetConfig+0x108>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f023 0302 	bic.w	r3, r3, #2
 80084cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a2d      	ldr	r2, [pc, #180]	; (8008590 <TIM_OC1_SetConfig+0x10c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <TIM_OC1_SetConfig+0x7c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a2c      	ldr	r2, [pc, #176]	; (8008594 <TIM_OC1_SetConfig+0x110>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_OC1_SetConfig+0x7c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a2b      	ldr	r2, [pc, #172]	; (8008598 <TIM_OC1_SetConfig+0x114>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_OC1_SetConfig+0x7c>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a2a      	ldr	r2, [pc, #168]	; (800859c <TIM_OC1_SetConfig+0x118>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_OC1_SetConfig+0x7c>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <TIM_OC1_SetConfig+0x11c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d10c      	bne.n	800851a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f023 0308 	bic.w	r3, r3, #8
 8008506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f023 0304 	bic.w	r3, r3, #4
 8008518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1c      	ldr	r2, [pc, #112]	; (8008590 <TIM_OC1_SetConfig+0x10c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00f      	beq.n	8008542 <TIM_OC1_SetConfig+0xbe>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1b      	ldr	r2, [pc, #108]	; (8008594 <TIM_OC1_SetConfig+0x110>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00b      	beq.n	8008542 <TIM_OC1_SetConfig+0xbe>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a1a      	ldr	r2, [pc, #104]	; (8008598 <TIM_OC1_SetConfig+0x114>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <TIM_OC1_SetConfig+0xbe>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a19      	ldr	r2, [pc, #100]	; (800859c <TIM_OC1_SetConfig+0x118>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d003      	beq.n	8008542 <TIM_OC1_SetConfig+0xbe>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a18      	ldr	r2, [pc, #96]	; (80085a0 <TIM_OC1_SetConfig+0x11c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d111      	bne.n	8008566 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	621a      	str	r2, [r3, #32]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	fffeff8f 	.word	0xfffeff8f
 8008590:	40010000 	.word	0x40010000
 8008594:	40010400 	.word	0x40010400
 8008598:	40014000 	.word	0x40014000
 800859c:	40014400 	.word	0x40014400
 80085a0:	40014800 	.word	0x40014800

080085a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	f023 0210 	bic.w	r2, r3, #16
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4b34      	ldr	r3, [pc, #208]	; (80086a0 <TIM_OC2_SetConfig+0xfc>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0320 	bic.w	r3, r3, #32
 80085ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <TIM_OC2_SetConfig+0x100>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d003      	beq.n	800860c <TIM_OC2_SetConfig+0x68>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <TIM_OC2_SetConfig+0x104>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d10d      	bne.n	8008628 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <TIM_OC2_SetConfig+0x100>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00f      	beq.n	8008650 <TIM_OC2_SetConfig+0xac>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1d      	ldr	r2, [pc, #116]	; (80086a8 <TIM_OC2_SetConfig+0x104>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00b      	beq.n	8008650 <TIM_OC2_SetConfig+0xac>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a1c      	ldr	r2, [pc, #112]	; (80086ac <TIM_OC2_SetConfig+0x108>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d007      	beq.n	8008650 <TIM_OC2_SetConfig+0xac>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1b      	ldr	r2, [pc, #108]	; (80086b0 <TIM_OC2_SetConfig+0x10c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d003      	beq.n	8008650 <TIM_OC2_SetConfig+0xac>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a1a      	ldr	r2, [pc, #104]	; (80086b4 <TIM_OC2_SetConfig+0x110>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d113      	bne.n	8008678 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800865e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	feff8fff 	.word	0xfeff8fff
 80086a4:	40010000 	.word	0x40010000
 80086a8:	40010400 	.word	0x40010400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400
 80086b4:	40014800 	.word	0x40014800

080086b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <TIM_OC3_SetConfig+0xf8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_OC3_SetConfig+0x66>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a26      	ldr	r2, [pc, #152]	; (80087b4 <TIM_OC3_SetConfig+0xfc>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d10d      	bne.n	800873a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a1c      	ldr	r2, [pc, #112]	; (80087b0 <TIM_OC3_SetConfig+0xf8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00f      	beq.n	8008762 <TIM_OC3_SetConfig+0xaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a1b      	ldr	r2, [pc, #108]	; (80087b4 <TIM_OC3_SetConfig+0xfc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00b      	beq.n	8008762 <TIM_OC3_SetConfig+0xaa>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a1a      	ldr	r2, [pc, #104]	; (80087b8 <TIM_OC3_SetConfig+0x100>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d007      	beq.n	8008762 <TIM_OC3_SetConfig+0xaa>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a19      	ldr	r2, [pc, #100]	; (80087bc <TIM_OC3_SetConfig+0x104>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d003      	beq.n	8008762 <TIM_OC3_SetConfig+0xaa>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a18      	ldr	r2, [pc, #96]	; (80087c0 <TIM_OC3_SetConfig+0x108>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d113      	bne.n	800878a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	011b      	lsls	r3, r3, #4
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	621a      	str	r2, [r3, #32]
}
 80087a4:	bf00      	nop
 80087a6:	371c      	adds	r7, #28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	40010000 	.word	0x40010000
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800

080087c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800880e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	031b      	lsls	r3, r3, #12
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a18      	ldr	r2, [pc, #96]	; (8008880 <TIM_OC4_SetConfig+0xbc>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00f      	beq.n	8008844 <TIM_OC4_SetConfig+0x80>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a17      	ldr	r2, [pc, #92]	; (8008884 <TIM_OC4_SetConfig+0xc0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_OC4_SetConfig+0x80>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a16      	ldr	r2, [pc, #88]	; (8008888 <TIM_OC4_SetConfig+0xc4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC4_SetConfig+0x80>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a15      	ldr	r2, [pc, #84]	; (800888c <TIM_OC4_SetConfig+0xc8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC4_SetConfig+0x80>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a14      	ldr	r2, [pc, #80]	; (8008890 <TIM_OC4_SetConfig+0xcc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d109      	bne.n	8008858 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	019b      	lsls	r3, r3, #6
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40010400 	.word	0x40010400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800

08008894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	041b      	lsls	r3, r3, #16
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a17      	ldr	r2, [pc, #92]	; (8008944 <TIM_OC5_SetConfig+0xb0>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00f      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a16      	ldr	r2, [pc, #88]	; (8008948 <TIM_OC5_SetConfig+0xb4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00b      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a15      	ldr	r2, [pc, #84]	; (800894c <TIM_OC5_SetConfig+0xb8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d007      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a14      	ldr	r2, [pc, #80]	; (8008950 <TIM_OC5_SetConfig+0xbc>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d003      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a13      	ldr	r2, [pc, #76]	; (8008954 <TIM_OC5_SetConfig+0xc0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d109      	bne.n	800891e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	621a      	str	r2, [r3, #32]
}
 8008938:	bf00      	nop
 800893a:	371c      	adds	r7, #28
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	40010000 	.word	0x40010000
 8008948:	40010400 	.word	0x40010400
 800894c:	40014000 	.word	0x40014000
 8008950:	40014400 	.word	0x40014400
 8008954:	40014800 	.word	0x40014800

08008958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800899a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	051b      	lsls	r3, r3, #20
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a18      	ldr	r2, [pc, #96]	; (8008a0c <TIM_OC6_SetConfig+0xb4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00f      	beq.n	80089d0 <TIM_OC6_SetConfig+0x78>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a17      	ldr	r2, [pc, #92]	; (8008a10 <TIM_OC6_SetConfig+0xb8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00b      	beq.n	80089d0 <TIM_OC6_SetConfig+0x78>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a16      	ldr	r2, [pc, #88]	; (8008a14 <TIM_OC6_SetConfig+0xbc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d007      	beq.n	80089d0 <TIM_OC6_SetConfig+0x78>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a15      	ldr	r2, [pc, #84]	; (8008a18 <TIM_OC6_SetConfig+0xc0>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d003      	beq.n	80089d0 <TIM_OC6_SetConfig+0x78>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a14      	ldr	r2, [pc, #80]	; (8008a1c <TIM_OC6_SetConfig+0xc4>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d109      	bne.n	80089e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	029b      	lsls	r3, r3, #10
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	621a      	str	r2, [r3, #32]
}
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	40010000 	.word	0x40010000
 8008a10:	40010400 	.word	0x40010400
 8008a14:	40014000 	.word	0x40014000
 8008a18:	40014400 	.word	0x40014400
 8008a1c:	40014800 	.word	0x40014800

08008a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f023 030a 	bic.w	r3, r3, #10
 8008a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f023 0210 	bic.w	r2, r3, #16
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	031b      	lsls	r3, r3, #12
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
	...

08008ae0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <TIM_ITRx_SetConfig+0x38>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	f043 0307 	orr.w	r3, r3, #7
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	609a      	str	r2, [r3, #8]
}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	ffcfff8f 	.word	0xffcfff8f

08008b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	021a      	lsls	r2, r3, #8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	609a      	str	r2, [r3, #8]
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e068      	b.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a2e      	ldr	r2, [pc, #184]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d004      	beq.n	8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a2d      	ldr	r2, [pc, #180]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d108      	bne.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1e      	ldr	r2, [pc, #120]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d01d      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d018      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a1b      	ldr	r2, [pc, #108]	; (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d013      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a1a      	ldr	r2, [pc, #104]	; (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00e      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d009      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a13      	ldr	r2, [pc, #76]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d004      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d10c      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40010000 	.word	0x40010000
 8008c58:	40010400 	.word	0x40010400
 8008c5c:	40000400 	.word	0x40000400
 8008c60:	40000800 	.word	0x40000800
 8008c64:	40000c00 	.word	0x40000c00
 8008c68:	40001800 	.word	0x40001800

08008c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e065      	b.n	8008d54 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	041b      	lsls	r3, r3, #16
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a16      	ldr	r2, [pc, #88]	; (8008d60 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d004      	beq.n	8008d16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a14      	ldr	r2, [pc, #80]	; (8008d64 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d115      	bne.n	8008d42 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	40010000 	.word	0x40010000
 8008d64:	40010400 	.word	0x40010400

08008d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e042      	b.n	8008e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d106      	bne.n	8008dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7f9 f819 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2224      	movs	r2, #36	; 0x24
 8008dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fbd8 	bl	800959c <UART_SetConfig>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e022      	b.n	8008e3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 f92c 	bl	800a05c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f9b3 	bl	800a1a0 <UART_CheckIdleState>
 8008e3a:	4603      	mov	r3, r0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	4613      	mov	r3, r2
 8008e52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	f040 8083 	bne.w	8008f66 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <HAL_UART_Transmit+0x28>
 8008e66:	88fb      	ldrh	r3, [r7, #6]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e07b      	b.n	8008f68 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <HAL_UART_Transmit+0x3a>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e074      	b.n	8008f68 <HAL_UART_Transmit+0x124>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2221      	movs	r2, #33	; 0x21
 8008e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e96:	f7f9 fbe9 	bl	800266c <HAL_GetTick>
 8008e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	88fa      	ldrh	r2, [r7, #6]
 8008ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb4:	d108      	bne.n	8008ec8 <HAL_UART_Transmit+0x84>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d104      	bne.n	8008ec8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	61bb      	str	r3, [r7, #24]
 8008ec6:	e003      	b.n	8008ed0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008ed8:	e02c      	b.n	8008f34 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2180      	movs	r1, #128	; 0x80
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f001 f9a6 	bl	800a236 <UART_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e039      	b.n	8008f68 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	e007      	b.n	8008f22 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	781a      	ldrb	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1cc      	bne.n	8008eda <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2200      	movs	r2, #0
 8008f48:	2140      	movs	r1, #64	; 0x40
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f001 f973 	bl	800a236 <UART_WaitOnFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e006      	b.n	8008f68 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f66:	2302      	movs	r3, #2
  }
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d131      	bne.n	8008fec <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <HAL_UART_Receive_IT+0x24>
 8008f8e:	88fb      	ldrh	r3, [r7, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e02a      	b.n	8008fee <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UART_Receive_IT+0x36>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e023      	b.n	8008fee <HAL_UART_Receive_IT+0x7e>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0f      	ldr	r2, [pc, #60]	; (8008ff8 <HAL_UART_Receive_IT+0x88>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00e      	beq.n	8008fdc <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fda:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f001 f9a8 	bl	800a338 <UART_Start_Receive_IT>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	e000      	b.n	8008fee <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	58000c00 	.word	0x58000c00

08008ffc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009022:	4013      	ands	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d118      	bne.n	800905e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	d013      	beq.n	800905e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8282 	beq.w	8009558 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
      }
      return;
 800905c:	e27c      	b.n	8009558 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80ef 	beq.w	8009244 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4b73      	ldr	r3, [pc, #460]	; (8009238 <HAL_UART_IRQHandler+0x23c>)
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d105      	bne.n	800907c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	4b72      	ldr	r3, [pc, #456]	; (800923c <HAL_UART_IRQHandler+0x240>)
 8009074:	4013      	ands	r3, r2
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80e4 	beq.w	8009244 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d010      	beq.n	80090a8 <HAL_UART_IRQHandler+0xac>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2201      	movs	r2, #1
 8009096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	f043 0201 	orr.w	r2, r3, #1
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d010      	beq.n	80090d4 <HAL_UART_IRQHandler+0xd8>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2202      	movs	r2, #2
 80090c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ca:	f043 0204 	orr.w	r2, r3, #4
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d010      	beq.n	8009100 <HAL_UART_IRQHandler+0x104>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2204      	movs	r2, #4
 80090ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f6:	f043 0202 	orr.w	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d015      	beq.n	8009136 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4b48      	ldr	r3, [pc, #288]	; (8009238 <HAL_UART_IRQHandler+0x23c>)
 8009118:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00b      	beq.n	8009136 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2208      	movs	r2, #8
 8009124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912c:	f043 0208 	orr.w	r2, r3, #8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HAL_UART_IRQHandler+0x168>
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00c      	beq.n	8009164 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 81f6 	beq.w	800955c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b40      	cmp	r3, #64	; 0x40
 80091b2:	d004      	beq.n	80091be <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d031      	beq.n	8009222 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 f978 	bl	800a4b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ce:	2b40      	cmp	r3, #64	; 0x40
 80091d0:	d123      	bne.n	800921a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d013      	beq.n	8009212 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ee:	4a14      	ldr	r2, [pc, #80]	; (8009240 <HAL_UART_IRQHandler+0x244>)
 80091f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fa fac4 	bl	8003784 <HAL_DMA_Abort_IT>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d017      	beq.n	8009232 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009210:	e00f      	b.n	8009232 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f9ac 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	e00b      	b.n	8009232 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9a8 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009220:	e007      	b.n	8009232 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f9a4 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009230:	e194      	b.n	800955c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009232:	bf00      	nop
    return;
 8009234:	e192      	b.n	800955c <HAL_UART_IRQHandler+0x560>
 8009236:	bf00      	nop
 8009238:	10000001 	.word	0x10000001
 800923c:	04000120 	.word	0x04000120
 8009240:	0800a519 	.word	0x0800a519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009248:	2b01      	cmp	r3, #1
 800924a:	f040 810f 	bne.w	800946c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 8109 	beq.w	800946c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8103 	beq.w	800946c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2210      	movs	r2, #16
 800926c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	f040 80bb 	bne.w	80093f4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a96      	ldr	r2, [pc, #600]	; (80094e0 <HAL_UART_IRQHandler+0x4e4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d059      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a94      	ldr	r2, [pc, #592]	; (80094e4 <HAL_UART_IRQHandler+0x4e8>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d053      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a92      	ldr	r2, [pc, #584]	; (80094e8 <HAL_UART_IRQHandler+0x4ec>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d04d      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a90      	ldr	r2, [pc, #576]	; (80094ec <HAL_UART_IRQHandler+0x4f0>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d047      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a8e      	ldr	r2, [pc, #568]	; (80094f0 <HAL_UART_IRQHandler+0x4f4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d041      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a8c      	ldr	r2, [pc, #560]	; (80094f4 <HAL_UART_IRQHandler+0x4f8>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d03b      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a8a      	ldr	r2, [pc, #552]	; (80094f8 <HAL_UART_IRQHandler+0x4fc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d035      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a88      	ldr	r2, [pc, #544]	; (80094fc <HAL_UART_IRQHandler+0x500>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d02f      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a86      	ldr	r2, [pc, #536]	; (8009500 <HAL_UART_IRQHandler+0x504>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d029      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a84      	ldr	r2, [pc, #528]	; (8009504 <HAL_UART_IRQHandler+0x508>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d023      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a82      	ldr	r2, [pc, #520]	; (8009508 <HAL_UART_IRQHandler+0x50c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d01d      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a80      	ldr	r2, [pc, #512]	; (800950c <HAL_UART_IRQHandler+0x510>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d017      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a7e      	ldr	r2, [pc, #504]	; (8009510 <HAL_UART_IRQHandler+0x514>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d011      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a7c      	ldr	r2, [pc, #496]	; (8009514 <HAL_UART_IRQHandler+0x518>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00b      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a7a      	ldr	r2, [pc, #488]	; (8009518 <HAL_UART_IRQHandler+0x51c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d005      	beq.n	800933e <HAL_UART_IRQHandler+0x342>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a78      	ldr	r2, [pc, #480]	; (800951c <HAL_UART_IRQHandler+0x520>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d105      	bne.n	800934a <HAL_UART_IRQHandler+0x34e>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	b29b      	uxth	r3, r3
 8009348:	e004      	b.n	8009354 <HAL_UART_IRQHandler+0x358>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	b29b      	uxth	r3, r3
 8009354:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009356:	893b      	ldrh	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 8101 	beq.w	8009560 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009364:	893a      	ldrh	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	f080 80fa 	bcs.w	8009560 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	893a      	ldrh	r2, [r7, #8]
 8009370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937e:	d02b      	beq.n	80093d8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800938e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689a      	ldr	r2, [r3, #8]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0210 	bic.w	r2, r2, #16
 80093cc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f9 feb8 	bl	8003148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f8c9 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093f2:	e0b5      	b.n	8009560 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009400:	b29b      	uxth	r3, r3
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80a8 	beq.w	8009564 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009414:	897b      	ldrh	r3, [r7, #10]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 80a4 	beq.w	8009564 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800942a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	4b3a      	ldr	r3, [pc, #232]	; (8009520 <HAL_UART_IRQHandler+0x524>)
 8009438:	400b      	ands	r3, r1
 800943a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0210 	bic.w	r2, r2, #16
 800945e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009460:	897b      	ldrh	r3, [r7, #10]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f88d 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800946a:	e07b      	b.n	8009564 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00d      	beq.n	8009492 <HAL_UART_IRQHandler+0x496>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 fbba 	bl	800ac04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009490:	e06b      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009498:	2b00      	cmp	r3, #0
 800949a:	d012      	beq.n	80094c2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d008      	beq.n	80094c2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d057      	beq.n	8009568 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
    }
    return;
 80094c0:	e052      	b.n	8009568 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d02b      	beq.n	8009524 <HAL_UART_IRQHandler+0x528>
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d026      	beq.n	8009524 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 f834 	bl	800a544 <UART_EndTransmit_IT>
    return;
 80094dc:	e045      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
 80094de:	bf00      	nop
 80094e0:	40020010 	.word	0x40020010
 80094e4:	40020028 	.word	0x40020028
 80094e8:	40020040 	.word	0x40020040
 80094ec:	40020058 	.word	0x40020058
 80094f0:	40020070 	.word	0x40020070
 80094f4:	40020088 	.word	0x40020088
 80094f8:	400200a0 	.word	0x400200a0
 80094fc:	400200b8 	.word	0x400200b8
 8009500:	40020410 	.word	0x40020410
 8009504:	40020428 	.word	0x40020428
 8009508:	40020440 	.word	0x40020440
 800950c:	40020458 	.word	0x40020458
 8009510:	40020470 	.word	0x40020470
 8009514:	40020488 	.word	0x40020488
 8009518:	400204a0 	.word	0x400204a0
 800951c:	400204b8 	.word	0x400204b8
 8009520:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <HAL_UART_IRQHandler+0x544>
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 fb77 	bl	800ac2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800953e:	e014      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00f      	beq.n	800956a <HAL_UART_IRQHandler+0x56e>
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	da0c      	bge.n	800956a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 fb61 	bl	800ac18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009556:	e008      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
      return;
 8009558:	bf00      	nop
 800955a:	e006      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
    return;
 800955c:	bf00      	nop
 800955e:	e004      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
      return;
 8009560:	bf00      	nop
 8009562:	e002      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
      return;
 8009564:	bf00      	nop
 8009566:	e000      	b.n	800956a <HAL_UART_IRQHandler+0x56e>
    return;
 8009568:	bf00      	nop
  }
}
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800959c:	b5b0      	push	{r4, r5, r7, lr}
 800959e:	b08e      	sub	sp, #56	; 0x38
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	4313      	orrs	r3, r2
 80095c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	4bbf      	ldr	r3, [pc, #764]	; (80098c8 <UART_SetConfig+0x32c>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095d2:	430b      	orrs	r3, r1
 80095d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4ab5      	ldr	r2, [pc, #724]	; (80098cc <UART_SetConfig+0x330>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d004      	beq.n	8009606 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009602:	4313      	orrs	r3, r2
 8009604:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	4bb0      	ldr	r3, [pc, #704]	; (80098d0 <UART_SetConfig+0x334>)
 800960e:	4013      	ands	r3, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009616:	430b      	orrs	r3, r1
 8009618:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	f023 010f 	bic.w	r1, r3, #15
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4aa7      	ldr	r2, [pc, #668]	; (80098d4 <UART_SetConfig+0x338>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d176      	bne.n	8009728 <UART_SetConfig+0x18c>
 800963a:	4ba7      	ldr	r3, [pc, #668]	; (80098d8 <UART_SetConfig+0x33c>)
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009642:	2b28      	cmp	r3, #40	; 0x28
 8009644:	d86c      	bhi.n	8009720 <UART_SetConfig+0x184>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <UART_SetConfig+0xb0>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	080096f1 	.word	0x080096f1
 8009650:	08009721 	.word	0x08009721
 8009654:	08009721 	.word	0x08009721
 8009658:	08009721 	.word	0x08009721
 800965c:	08009721 	.word	0x08009721
 8009660:	08009721 	.word	0x08009721
 8009664:	08009721 	.word	0x08009721
 8009668:	08009721 	.word	0x08009721
 800966c:	080096f9 	.word	0x080096f9
 8009670:	08009721 	.word	0x08009721
 8009674:	08009721 	.word	0x08009721
 8009678:	08009721 	.word	0x08009721
 800967c:	08009721 	.word	0x08009721
 8009680:	08009721 	.word	0x08009721
 8009684:	08009721 	.word	0x08009721
 8009688:	08009721 	.word	0x08009721
 800968c:	08009701 	.word	0x08009701
 8009690:	08009721 	.word	0x08009721
 8009694:	08009721 	.word	0x08009721
 8009698:	08009721 	.word	0x08009721
 800969c:	08009721 	.word	0x08009721
 80096a0:	08009721 	.word	0x08009721
 80096a4:	08009721 	.word	0x08009721
 80096a8:	08009721 	.word	0x08009721
 80096ac:	08009709 	.word	0x08009709
 80096b0:	08009721 	.word	0x08009721
 80096b4:	08009721 	.word	0x08009721
 80096b8:	08009721 	.word	0x08009721
 80096bc:	08009721 	.word	0x08009721
 80096c0:	08009721 	.word	0x08009721
 80096c4:	08009721 	.word	0x08009721
 80096c8:	08009721 	.word	0x08009721
 80096cc:	08009711 	.word	0x08009711
 80096d0:	08009721 	.word	0x08009721
 80096d4:	08009721 	.word	0x08009721
 80096d8:	08009721 	.word	0x08009721
 80096dc:	08009721 	.word	0x08009721
 80096e0:	08009721 	.word	0x08009721
 80096e4:	08009721 	.word	0x08009721
 80096e8:	08009721 	.word	0x08009721
 80096ec:	08009719 	.word	0x08009719
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f6:	e222      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80096f8:	2304      	movs	r3, #4
 80096fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fe:	e21e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009700:	2308      	movs	r3, #8
 8009702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009706:	e21a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009708:	2310      	movs	r3, #16
 800970a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970e:	e216      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009710:	2320      	movs	r3, #32
 8009712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009716:	e212      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009718:	2340      	movs	r3, #64	; 0x40
 800971a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971e:	e20e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009720:	2380      	movs	r3, #128	; 0x80
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e20a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a6b      	ldr	r2, [pc, #428]	; (80098dc <UART_SetConfig+0x340>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d130      	bne.n	8009794 <UART_SetConfig+0x1f8>
 8009732:	4b69      	ldr	r3, [pc, #420]	; (80098d8 <UART_SetConfig+0x33c>)
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b05      	cmp	r3, #5
 800973c:	d826      	bhi.n	800978c <UART_SetConfig+0x1f0>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <UART_SetConfig+0x1a8>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	0800975d 	.word	0x0800975d
 8009748:	08009765 	.word	0x08009765
 800974c:	0800976d 	.word	0x0800976d
 8009750:	08009775 	.word	0x08009775
 8009754:	0800977d 	.word	0x0800977d
 8009758:	08009785 	.word	0x08009785
 800975c:	2300      	movs	r3, #0
 800975e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009762:	e1ec      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009764:	2304      	movs	r3, #4
 8009766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976a:	e1e8      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800976c:	2308      	movs	r3, #8
 800976e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009772:	e1e4      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009774:	2310      	movs	r3, #16
 8009776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977a:	e1e0      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800977c:	2320      	movs	r3, #32
 800977e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009782:	e1dc      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009784:	2340      	movs	r3, #64	; 0x40
 8009786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978a:	e1d8      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800978c:	2380      	movs	r3, #128	; 0x80
 800978e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009792:	e1d4      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a51      	ldr	r2, [pc, #324]	; (80098e0 <UART_SetConfig+0x344>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d130      	bne.n	8009800 <UART_SetConfig+0x264>
 800979e:	4b4e      	ldr	r3, [pc, #312]	; (80098d8 <UART_SetConfig+0x33c>)
 80097a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d826      	bhi.n	80097f8 <UART_SetConfig+0x25c>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <UART_SetConfig+0x214>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097c9 	.word	0x080097c9
 80097b4:	080097d1 	.word	0x080097d1
 80097b8:	080097d9 	.word	0x080097d9
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	2300      	movs	r3, #0
 80097ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ce:	e1b6      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d6:	e1b2      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097de:	e1ae      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e6:	e1aa      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80097e8:	2320      	movs	r3, #32
 80097ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ee:	e1a6      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f6:	e1a2      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fe:	e19e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a37      	ldr	r2, [pc, #220]	; (80098e4 <UART_SetConfig+0x348>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d130      	bne.n	800986c <UART_SetConfig+0x2d0>
 800980a:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <UART_SetConfig+0x33c>)
 800980c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980e:	f003 0307 	and.w	r3, r3, #7
 8009812:	2b05      	cmp	r3, #5
 8009814:	d826      	bhi.n	8009864 <UART_SetConfig+0x2c8>
 8009816:	a201      	add	r2, pc, #4	; (adr r2, 800981c <UART_SetConfig+0x280>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	08009835 	.word	0x08009835
 8009820:	0800983d 	.word	0x0800983d
 8009824:	08009845 	.word	0x08009845
 8009828:	0800984d 	.word	0x0800984d
 800982c:	08009855 	.word	0x08009855
 8009830:	0800985d 	.word	0x0800985d
 8009834:	2300      	movs	r3, #0
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e180      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800983c:	2304      	movs	r3, #4
 800983e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009842:	e17c      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009844:	2308      	movs	r3, #8
 8009846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984a:	e178      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800984c:	2310      	movs	r3, #16
 800984e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009852:	e174      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009854:	2320      	movs	r3, #32
 8009856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985a:	e170      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009862:	e16c      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009864:	2380      	movs	r3, #128	; 0x80
 8009866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986a:	e168      	b.n	8009b3e <UART_SetConfig+0x5a2>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <UART_SetConfig+0x34c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d142      	bne.n	80098fc <UART_SetConfig+0x360>
 8009876:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <UART_SetConfig+0x33c>)
 8009878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	2b05      	cmp	r3, #5
 8009880:	d838      	bhi.n	80098f4 <UART_SetConfig+0x358>
 8009882:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <UART_SetConfig+0x2ec>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	080098a1 	.word	0x080098a1
 800988c:	080098a9 	.word	0x080098a9
 8009890:	080098b1 	.word	0x080098b1
 8009894:	080098b9 	.word	0x080098b9
 8009898:	080098c1 	.word	0x080098c1
 800989c:	080098ed 	.word	0x080098ed
 80098a0:	2300      	movs	r3, #0
 80098a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a6:	e14a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098a8:	2304      	movs	r3, #4
 80098aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ae:	e146      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098b0:	2308      	movs	r3, #8
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e142      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098b8:	2310      	movs	r3, #16
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e13e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098c0:	2320      	movs	r3, #32
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e13a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098c8:	cfff69f3 	.word	0xcfff69f3
 80098cc:	58000c00 	.word	0x58000c00
 80098d0:	11fff4ff 	.word	0x11fff4ff
 80098d4:	40011000 	.word	0x40011000
 80098d8:	58024400 	.word	0x58024400
 80098dc:	40004400 	.word	0x40004400
 80098e0:	40004800 	.word	0x40004800
 80098e4:	40004c00 	.word	0x40004c00
 80098e8:	40005000 	.word	0x40005000
 80098ec:	2340      	movs	r3, #64	; 0x40
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e124      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098f4:	2380      	movs	r3, #128	; 0x80
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e120      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4acc      	ldr	r2, [pc, #816]	; (8009c34 <UART_SetConfig+0x698>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d176      	bne.n	80099f4 <UART_SetConfig+0x458>
 8009906:	4bcc      	ldr	r3, [pc, #816]	; (8009c38 <UART_SetConfig+0x69c>)
 8009908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800990e:	2b28      	cmp	r3, #40	; 0x28
 8009910:	d86c      	bhi.n	80099ec <UART_SetConfig+0x450>
 8009912:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <UART_SetConfig+0x37c>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	080099bd 	.word	0x080099bd
 800991c:	080099ed 	.word	0x080099ed
 8009920:	080099ed 	.word	0x080099ed
 8009924:	080099ed 	.word	0x080099ed
 8009928:	080099ed 	.word	0x080099ed
 800992c:	080099ed 	.word	0x080099ed
 8009930:	080099ed 	.word	0x080099ed
 8009934:	080099ed 	.word	0x080099ed
 8009938:	080099c5 	.word	0x080099c5
 800993c:	080099ed 	.word	0x080099ed
 8009940:	080099ed 	.word	0x080099ed
 8009944:	080099ed 	.word	0x080099ed
 8009948:	080099ed 	.word	0x080099ed
 800994c:	080099ed 	.word	0x080099ed
 8009950:	080099ed 	.word	0x080099ed
 8009954:	080099ed 	.word	0x080099ed
 8009958:	080099cd 	.word	0x080099cd
 800995c:	080099ed 	.word	0x080099ed
 8009960:	080099ed 	.word	0x080099ed
 8009964:	080099ed 	.word	0x080099ed
 8009968:	080099ed 	.word	0x080099ed
 800996c:	080099ed 	.word	0x080099ed
 8009970:	080099ed 	.word	0x080099ed
 8009974:	080099ed 	.word	0x080099ed
 8009978:	080099d5 	.word	0x080099d5
 800997c:	080099ed 	.word	0x080099ed
 8009980:	080099ed 	.word	0x080099ed
 8009984:	080099ed 	.word	0x080099ed
 8009988:	080099ed 	.word	0x080099ed
 800998c:	080099ed 	.word	0x080099ed
 8009990:	080099ed 	.word	0x080099ed
 8009994:	080099ed 	.word	0x080099ed
 8009998:	080099dd 	.word	0x080099dd
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	080099ed 	.word	0x080099ed
 80099a4:	080099ed 	.word	0x080099ed
 80099a8:	080099ed 	.word	0x080099ed
 80099ac:	080099ed 	.word	0x080099ed
 80099b0:	080099ed 	.word	0x080099ed
 80099b4:	080099ed 	.word	0x080099ed
 80099b8:	080099e5 	.word	0x080099e5
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e0bc      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099c4:	2304      	movs	r3, #4
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e0b8      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099cc:	2308      	movs	r3, #8
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e0b4      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099d4:	2310      	movs	r3, #16
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e0b0      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099dc:	2320      	movs	r3, #32
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e0ac      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099e4:	2340      	movs	r3, #64	; 0x40
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e0a8      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099ec:	2380      	movs	r3, #128	; 0x80
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e0a4      	b.n	8009b3e <UART_SetConfig+0x5a2>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a90      	ldr	r2, [pc, #576]	; (8009c3c <UART_SetConfig+0x6a0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d130      	bne.n	8009a60 <UART_SetConfig+0x4c4>
 80099fe:	4b8e      	ldr	r3, [pc, #568]	; (8009c38 <UART_SetConfig+0x69c>)
 8009a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	2b05      	cmp	r3, #5
 8009a08:	d826      	bhi.n	8009a58 <UART_SetConfig+0x4bc>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <UART_SetConfig+0x474>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a31 	.word	0x08009a31
 8009a18:	08009a39 	.word	0x08009a39
 8009a1c:	08009a41 	.word	0x08009a41
 8009a20:	08009a49 	.word	0x08009a49
 8009a24:	08009a51 	.word	0x08009a51
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2e:	e086      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a30:	2304      	movs	r3, #4
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	e082      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a38:	2308      	movs	r3, #8
 8009a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3e:	e07e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a40:	2310      	movs	r3, #16
 8009a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a46:	e07a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4e:	e076      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a56:	e072      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a58:	2380      	movs	r3, #128	; 0x80
 8009a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5e:	e06e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a76      	ldr	r2, [pc, #472]	; (8009c40 <UART_SetConfig+0x6a4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d130      	bne.n	8009acc <UART_SetConfig+0x530>
 8009a6a:	4b73      	ldr	r3, [pc, #460]	; (8009c38 <UART_SetConfig+0x69c>)
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	2b05      	cmp	r3, #5
 8009a74:	d826      	bhi.n	8009ac4 <UART_SetConfig+0x528>
 8009a76:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <UART_SetConfig+0x4e0>)
 8009a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7c:	08009a95 	.word	0x08009a95
 8009a80:	08009a9d 	.word	0x08009a9d
 8009a84:	08009aa5 	.word	0x08009aa5
 8009a88:	08009aad 	.word	0x08009aad
 8009a8c:	08009ab5 	.word	0x08009ab5
 8009a90:	08009abd 	.word	0x08009abd
 8009a94:	2300      	movs	r3, #0
 8009a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9a:	e050      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009a9c:	2304      	movs	r3, #4
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e04c      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009aa4:	2308      	movs	r3, #8
 8009aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aaa:	e048      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009aac:	2310      	movs	r3, #16
 8009aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab2:	e044      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aba:	e040      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009abc:	2340      	movs	r3, #64	; 0x40
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac2:	e03c      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009ac4:	2380      	movs	r3, #128	; 0x80
 8009ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aca:	e038      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a5c      	ldr	r2, [pc, #368]	; (8009c44 <UART_SetConfig+0x6a8>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d130      	bne.n	8009b38 <UART_SetConfig+0x59c>
 8009ad6:	4b58      	ldr	r3, [pc, #352]	; (8009c38 <UART_SetConfig+0x69c>)
 8009ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	2b05      	cmp	r3, #5
 8009ae0:	d826      	bhi.n	8009b30 <UART_SetConfig+0x594>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <UART_SetConfig+0x54c>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009b01 	.word	0x08009b01
 8009aec:	08009b09 	.word	0x08009b09
 8009af0:	08009b11 	.word	0x08009b11
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b21 	.word	0x08009b21
 8009afc:	08009b29 	.word	0x08009b29
 8009b00:	2302      	movs	r3, #2
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e01a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b08:	2304      	movs	r3, #4
 8009b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0e:	e016      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b10:	2308      	movs	r3, #8
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b16:	e012      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b18:	2310      	movs	r3, #16
 8009b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1e:	e00e      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b20:	2320      	movs	r3, #32
 8009b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b26:	e00a      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b28:	2340      	movs	r3, #64	; 0x40
 8009b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2e:	e006      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b30:	2380      	movs	r3, #128	; 0x80
 8009b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b36:	e002      	b.n	8009b3e <UART_SetConfig+0x5a2>
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a40      	ldr	r2, [pc, #256]	; (8009c44 <UART_SetConfig+0x6a8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	f040 80ef 	bne.w	8009d28 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	dc46      	bgt.n	8009be0 <UART_SetConfig+0x644>
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	f2c0 8081 	blt.w	8009c5a <UART_SetConfig+0x6be>
 8009b58:	3b02      	subs	r3, #2
 8009b5a:	2b1e      	cmp	r3, #30
 8009b5c:	d87d      	bhi.n	8009c5a <UART_SetConfig+0x6be>
 8009b5e:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <UART_SetConfig+0x5c8>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009be7 	.word	0x08009be7
 8009b68:	08009c5b 	.word	0x08009c5b
 8009b6c:	08009bef 	.word	0x08009bef
 8009b70:	08009c5b 	.word	0x08009c5b
 8009b74:	08009c5b 	.word	0x08009c5b
 8009b78:	08009c5b 	.word	0x08009c5b
 8009b7c:	08009bff 	.word	0x08009bff
 8009b80:	08009c5b 	.word	0x08009c5b
 8009b84:	08009c5b 	.word	0x08009c5b
 8009b88:	08009c5b 	.word	0x08009c5b
 8009b8c:	08009c5b 	.word	0x08009c5b
 8009b90:	08009c5b 	.word	0x08009c5b
 8009b94:	08009c5b 	.word	0x08009c5b
 8009b98:	08009c5b 	.word	0x08009c5b
 8009b9c:	08009c0f 	.word	0x08009c0f
 8009ba0:	08009c5b 	.word	0x08009c5b
 8009ba4:	08009c5b 	.word	0x08009c5b
 8009ba8:	08009c5b 	.word	0x08009c5b
 8009bac:	08009c5b 	.word	0x08009c5b
 8009bb0:	08009c5b 	.word	0x08009c5b
 8009bb4:	08009c5b 	.word	0x08009c5b
 8009bb8:	08009c5b 	.word	0x08009c5b
 8009bbc:	08009c5b 	.word	0x08009c5b
 8009bc0:	08009c5b 	.word	0x08009c5b
 8009bc4:	08009c5b 	.word	0x08009c5b
 8009bc8:	08009c5b 	.word	0x08009c5b
 8009bcc:	08009c5b 	.word	0x08009c5b
 8009bd0:	08009c5b 	.word	0x08009c5b
 8009bd4:	08009c5b 	.word	0x08009c5b
 8009bd8:	08009c5b 	.word	0x08009c5b
 8009bdc:	08009c4d 	.word	0x08009c4d
 8009be0:	2b40      	cmp	r3, #64	; 0x40
 8009be2:	d036      	beq.n	8009c52 <UART_SetConfig+0x6b6>
 8009be4:	e039      	b.n	8009c5a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009be6:	f7fd fa71 	bl	80070cc <HAL_RCCEx_GetD3PCLK1Freq>
 8009bea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bec:	e03b      	b.n	8009c66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bee:	f107 0314 	add.w	r3, r7, #20
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fd fa80 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bfc:	e033      	b.n	8009c66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fd fbcc 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c0c:	e02b      	b.n	8009c66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <UART_SetConfig+0x69c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <UART_SetConfig+0x69c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	08db      	lsrs	r3, r3, #3
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	4a08      	ldr	r2, [pc, #32]	; (8009c48 <UART_SetConfig+0x6ac>)
 8009c26:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c2c:	e01b      	b.n	8009c66 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009c2e:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <UART_SetConfig+0x6ac>)
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c32:	e018      	b.n	8009c66 <UART_SetConfig+0x6ca>
 8009c34:	40011400 	.word	0x40011400
 8009c38:	58024400 	.word	0x58024400
 8009c3c:	40007800 	.word	0x40007800
 8009c40:	40007c00 	.word	0x40007c00
 8009c44:	58000c00 	.word	0x58000c00
 8009c48:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c4c:	4bc4      	ldr	r3, [pc, #784]	; (8009f60 <UART_SetConfig+0x9c4>)
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c50:	e009      	b.n	8009c66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c58:	e005      	b.n	8009c66 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 81da 	beq.w	800a022 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	4abc      	ldr	r2, [pc, #752]	; (8009f64 <UART_SetConfig+0x9c8>)
 8009c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c80:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	6a3a      	ldr	r2, [r7, #32]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d305      	bcc.n	8009c9e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c98:	6a3a      	ldr	r2, [r7, #32]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d903      	bls.n	8009ca6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ca4:	e1bd      	b.n	800a022 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f04f 0100 	mov.w	r1, #0
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	4aac      	ldr	r2, [pc, #688]	; (8009f64 <UART_SetConfig+0x9c8>)
 8009cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	f04f 0300 	mov.w	r3, #0
 8009cbe:	f7f6 fb5f 	bl	8000380 <__aeabi_uldivmod>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f04f 0200 	mov.w	r2, #0
 8009cce:	f04f 0300 	mov.w	r3, #0
 8009cd2:	020b      	lsls	r3, r1, #8
 8009cd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cd8:	0202      	lsls	r2, r0, #8
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	6849      	ldr	r1, [r1, #4]
 8009cde:	0849      	lsrs	r1, r1, #1
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	f04f 0100 	mov.w	r1, #0
 8009ce6:	1814      	adds	r4, r2, r0
 8009ce8:	eb43 0501 	adc.w	r5, r3, r1
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7f6 fb41 	bl	8000380 <__aeabi_uldivmod>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4613      	mov	r3, r2
 8009d04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d0c:	d308      	bcc.n	8009d20 <UART_SetConfig+0x784>
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d14:	d204      	bcs.n	8009d20 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d1c:	60da      	str	r2, [r3, #12]
 8009d1e:	e180      	b.n	800a022 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d26:	e17c      	b.n	800a022 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d30:	f040 80bf 	bne.w	8009eb2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009d34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	dc49      	bgt.n	8009dd0 <UART_SetConfig+0x834>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	db7c      	blt.n	8009e3a <UART_SetConfig+0x89e>
 8009d40:	2b20      	cmp	r3, #32
 8009d42:	d87a      	bhi.n	8009e3a <UART_SetConfig+0x89e>
 8009d44:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <UART_SetConfig+0x7b0>)
 8009d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4a:	bf00      	nop
 8009d4c:	08009dd7 	.word	0x08009dd7
 8009d50:	08009ddf 	.word	0x08009ddf
 8009d54:	08009e3b 	.word	0x08009e3b
 8009d58:	08009e3b 	.word	0x08009e3b
 8009d5c:	08009de7 	.word	0x08009de7
 8009d60:	08009e3b 	.word	0x08009e3b
 8009d64:	08009e3b 	.word	0x08009e3b
 8009d68:	08009e3b 	.word	0x08009e3b
 8009d6c:	08009df7 	.word	0x08009df7
 8009d70:	08009e3b 	.word	0x08009e3b
 8009d74:	08009e3b 	.word	0x08009e3b
 8009d78:	08009e3b 	.word	0x08009e3b
 8009d7c:	08009e3b 	.word	0x08009e3b
 8009d80:	08009e3b 	.word	0x08009e3b
 8009d84:	08009e3b 	.word	0x08009e3b
 8009d88:	08009e3b 	.word	0x08009e3b
 8009d8c:	08009e07 	.word	0x08009e07
 8009d90:	08009e3b 	.word	0x08009e3b
 8009d94:	08009e3b 	.word	0x08009e3b
 8009d98:	08009e3b 	.word	0x08009e3b
 8009d9c:	08009e3b 	.word	0x08009e3b
 8009da0:	08009e3b 	.word	0x08009e3b
 8009da4:	08009e3b 	.word	0x08009e3b
 8009da8:	08009e3b 	.word	0x08009e3b
 8009dac:	08009e3b 	.word	0x08009e3b
 8009db0:	08009e3b 	.word	0x08009e3b
 8009db4:	08009e3b 	.word	0x08009e3b
 8009db8:	08009e3b 	.word	0x08009e3b
 8009dbc:	08009e3b 	.word	0x08009e3b
 8009dc0:	08009e3b 	.word	0x08009e3b
 8009dc4:	08009e3b 	.word	0x08009e3b
 8009dc8:	08009e3b 	.word	0x08009e3b
 8009dcc:	08009e2d 	.word	0x08009e2d
 8009dd0:	2b40      	cmp	r3, #64	; 0x40
 8009dd2:	d02e      	beq.n	8009e32 <UART_SetConfig+0x896>
 8009dd4:	e031      	b.n	8009e3a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd6:	f7fc fa0d 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 8009dda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ddc:	e033      	b.n	8009e46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dde:	f7fc fa1f 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 8009de2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009de4:	e02f      	b.n	8009e46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de6:	f107 0314 	add.w	r3, r7, #20
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd f984 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df4:	e027      	b.n	8009e46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df6:	f107 0308 	add.w	r3, r7, #8
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fd fad0 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e04:	e01f      	b.n	8009e46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e06:	4b58      	ldr	r3, [pc, #352]	; (8009f68 <UART_SetConfig+0x9cc>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d009      	beq.n	8009e26 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e12:	4b55      	ldr	r3, [pc, #340]	; (8009f68 <UART_SetConfig+0x9cc>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	08db      	lsrs	r3, r3, #3
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	4a53      	ldr	r2, [pc, #332]	; (8009f6c <UART_SetConfig+0x9d0>)
 8009e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e24:	e00f      	b.n	8009e46 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009e26:	4b51      	ldr	r3, [pc, #324]	; (8009f6c <UART_SetConfig+0x9d0>)
 8009e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e2a:	e00c      	b.n	8009e46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e2c:	4b4c      	ldr	r3, [pc, #304]	; (8009f60 <UART_SetConfig+0x9c4>)
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e30:	e009      	b.n	8009e46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e38:	e005      	b.n	8009e46 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80ea 	beq.w	800a022 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	4a44      	ldr	r2, [pc, #272]	; (8009f64 <UART_SetConfig+0x9c8>)
 8009e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e60:	005a      	lsls	r2, r3, #1
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	441a      	add	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	2b0f      	cmp	r3, #15
 8009e7a:	d916      	bls.n	8009eaa <UART_SetConfig+0x90e>
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e82:	d212      	bcs.n	8009eaa <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f023 030f 	bic.w	r3, r3, #15
 8009e8c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	085b      	lsrs	r3, r3, #1
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ea6:	60da      	str	r2, [r3, #12]
 8009ea8:	e0bb      	b.n	800a022 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009eb0:	e0b7      	b.n	800a022 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	dc4a      	bgt.n	8009f50 <UART_SetConfig+0x9b4>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f2c0 8086 	blt.w	8009fcc <UART_SetConfig+0xa30>
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	f200 8083 	bhi.w	8009fcc <UART_SetConfig+0xa30>
 8009ec6:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <UART_SetConfig+0x930>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009f57 	.word	0x08009f57
 8009ed0:	08009f71 	.word	0x08009f71
 8009ed4:	08009fcd 	.word	0x08009fcd
 8009ed8:	08009fcd 	.word	0x08009fcd
 8009edc:	08009f79 	.word	0x08009f79
 8009ee0:	08009fcd 	.word	0x08009fcd
 8009ee4:	08009fcd 	.word	0x08009fcd
 8009ee8:	08009fcd 	.word	0x08009fcd
 8009eec:	08009f89 	.word	0x08009f89
 8009ef0:	08009fcd 	.word	0x08009fcd
 8009ef4:	08009fcd 	.word	0x08009fcd
 8009ef8:	08009fcd 	.word	0x08009fcd
 8009efc:	08009fcd 	.word	0x08009fcd
 8009f00:	08009fcd 	.word	0x08009fcd
 8009f04:	08009fcd 	.word	0x08009fcd
 8009f08:	08009fcd 	.word	0x08009fcd
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009fcd 	.word	0x08009fcd
 8009f14:	08009fcd 	.word	0x08009fcd
 8009f18:	08009fcd 	.word	0x08009fcd
 8009f1c:	08009fcd 	.word	0x08009fcd
 8009f20:	08009fcd 	.word	0x08009fcd
 8009f24:	08009fcd 	.word	0x08009fcd
 8009f28:	08009fcd 	.word	0x08009fcd
 8009f2c:	08009fcd 	.word	0x08009fcd
 8009f30:	08009fcd 	.word	0x08009fcd
 8009f34:	08009fcd 	.word	0x08009fcd
 8009f38:	08009fcd 	.word	0x08009fcd
 8009f3c:	08009fcd 	.word	0x08009fcd
 8009f40:	08009fcd 	.word	0x08009fcd
 8009f44:	08009fcd 	.word	0x08009fcd
 8009f48:	08009fcd 	.word	0x08009fcd
 8009f4c:	08009fbf 	.word	0x08009fbf
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	d037      	beq.n	8009fc4 <UART_SetConfig+0xa28>
 8009f54:	e03a      	b.n	8009fcc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f56:	f7fc f94d 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 8009f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f5c:	e03c      	b.n	8009fd8 <UART_SetConfig+0xa3c>
 8009f5e:	bf00      	nop
 8009f60:	003d0900 	.word	0x003d0900
 8009f64:	0800bd9c 	.word	0x0800bd9c
 8009f68:	58024400 	.word	0x58024400
 8009f6c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f70:	f7fc f956 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 8009f74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f76:	e02f      	b.n	8009fd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f78:	f107 0314 	add.w	r3, r7, #20
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fd f8bb 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f86:	e027      	b.n	8009fd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f88:	f107 0308 	add.w	r3, r7, #8
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fd fa07 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f96:	e01f      	b.n	8009fd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f98:	4b2c      	ldr	r3, [pc, #176]	; (800a04c <UART_SetConfig+0xab0>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0320 	and.w	r3, r3, #32
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d009      	beq.n	8009fb8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fa4:	4b29      	ldr	r3, [pc, #164]	; (800a04c <UART_SetConfig+0xab0>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	08db      	lsrs	r3, r3, #3
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	4a28      	ldr	r2, [pc, #160]	; (800a050 <UART_SetConfig+0xab4>)
 8009fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fb6:	e00f      	b.n	8009fd8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009fb8:	4b25      	ldr	r3, [pc, #148]	; (800a050 <UART_SetConfig+0xab4>)
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fbc:	e00c      	b.n	8009fd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fbe:	4b25      	ldr	r3, [pc, #148]	; (800a054 <UART_SetConfig+0xab8>)
 8009fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fc2:	e009      	b.n	8009fd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fca:	e005      	b.n	8009fd8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009fd6:	bf00      	nop
    }

    if (pclk != 0U)
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d021      	beq.n	800a022 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	4a1d      	ldr	r2, [pc, #116]	; (800a058 <UART_SetConfig+0xabc>)
 8009fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	085b      	lsrs	r3, r3, #1
 8009ff6:	441a      	add	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a000:	b29b      	uxth	r3, r3
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	2b0f      	cmp	r3, #15
 800a008:	d908      	bls.n	800a01c <UART_SetConfig+0xa80>
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a010:	d204      	bcs.n	800a01c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a018:	60da      	str	r2, [r3, #12]
 800a01a:	e002      	b.n	800a022 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a03e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a042:	4618      	mov	r0, r3
 800a044:	3738      	adds	r7, #56	; 0x38
 800a046:	46bd      	mov	sp, r7
 800a048:	bdb0      	pop	{r4, r5, r7, pc}
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	03d09000 	.word	0x03d09000
 800a054:	003d0900 	.word	0x003d0900
 800a058:	0800bd9c 	.word	0x0800bd9c

0800a05c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00a      	beq.n	800a086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	f003 0308 	and.w	r3, r3, #8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00a      	beq.n	800a10e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01a      	beq.n	800a172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a15a:	d10a      	bne.n	800a172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	605a      	str	r2, [r3, #4]
  }
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1b0:	f7f8 fa5c 	bl	800266c <HAL_GetTick>
 800a1b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0308 	and.w	r3, r3, #8
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d10e      	bne.n	800a1e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f82f 	bl	800a236 <UART_WaitOnFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e025      	b.n	800a22e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d10e      	bne.n	800a20e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f819 	bl	800a236 <UART_WaitOnFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e00f      	b.n	800a22e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2220      	movs	r2, #32
 800a212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2220      	movs	r2, #32
 800a21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	4613      	mov	r3, r2
 800a244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a246:	e062      	b.n	800a30e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d05e      	beq.n	800a30e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a250:	f7f8 fa0c 	bl	800266c <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d302      	bcc.n	800a266 <UART_WaitOnFlagUntilTimeout+0x30>
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d11d      	bne.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a274:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0201 	bic.w	r2, r2, #1
 800a284:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e045      	b.n	800a32e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d02e      	beq.n	800a30e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2be:	d126      	bne.n	800a30e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0201 	bic.w	r2, r2, #1
 800a2e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e00f      	b.n	800a32e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4013      	ands	r3, r2
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	bf0c      	ite	eq
 800a31e:	2301      	moveq	r3, #1
 800a320:	2300      	movne	r3, #0
 800a322:	b2db      	uxtb	r3, r3
 800a324:	461a      	mov	r2, r3
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d08d      	beq.n	800a248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	88fa      	ldrh	r2, [r7, #6]
 800a350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	88fa      	ldrh	r2, [r7, #6]
 800a358:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a36a:	d10e      	bne.n	800a38a <UART_Start_Receive_IT+0x52>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d105      	bne.n	800a380 <UART_Start_Receive_IT+0x48>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a37a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a37e:	e02d      	b.n	800a3dc <UART_Start_Receive_IT+0xa4>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	22ff      	movs	r2, #255	; 0xff
 800a384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a388:	e028      	b.n	800a3dc <UART_Start_Receive_IT+0xa4>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10d      	bne.n	800a3ae <UART_Start_Receive_IT+0x76>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d104      	bne.n	800a3a4 <UART_Start_Receive_IT+0x6c>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	22ff      	movs	r2, #255	; 0xff
 800a39e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3a2:	e01b      	b.n	800a3dc <UART_Start_Receive_IT+0xa4>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	227f      	movs	r2, #127	; 0x7f
 800a3a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3ac:	e016      	b.n	800a3dc <UART_Start_Receive_IT+0xa4>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3b6:	d10d      	bne.n	800a3d4 <UART_Start_Receive_IT+0x9c>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <UART_Start_Receive_IT+0x92>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	227f      	movs	r2, #127	; 0x7f
 800a3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3c8:	e008      	b.n	800a3dc <UART_Start_Receive_IT+0xa4>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	223f      	movs	r2, #63	; 0x3f
 800a3ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3d2:	e003      	b.n	800a3dc <UART_Start_Receive_IT+0xa4>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2222      	movs	r2, #34	; 0x22
 800a3e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a404:	d12a      	bne.n	800a45c <UART_Start_Receive_IT+0x124>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a40c:	88fa      	ldrh	r2, [r7, #6]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d324      	bcc.n	800a45c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41a:	d107      	bne.n	800a42c <UART_Start_Receive_IT+0xf4>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d103      	bne.n	800a42c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <UART_Start_Receive_IT+0x16c>)
 800a428:	671a      	str	r2, [r3, #112]	; 0x70
 800a42a:	e002      	b.n	800a432 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <UART_Start_Receive_IT+0x170>)
 800a430:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a448:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a458:	609a      	str	r2, [r3, #8]
 800a45a:	e01b      	b.n	800a494 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a464:	d107      	bne.n	800a476 <UART_Start_Receive_IT+0x13e>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4a0e      	ldr	r2, [pc, #56]	; (800a4ac <UART_Start_Receive_IT+0x174>)
 800a472:	671a      	str	r2, [r3, #112]	; 0x70
 800a474:	e002      	b.n	800a47c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a0d      	ldr	r2, [pc, #52]	; (800a4b0 <UART_Start_Receive_IT+0x178>)
 800a47a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a492:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	0800a92d 	.word	0x0800a92d
 800a4a8:	0800a729 	.word	0x0800a729
 800a4ac:	0800a651 	.word	0x0800a651
 800a4b0:	0800a579 	.word	0x0800a579

0800a4b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6899      	ldr	r1, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <UART_EndRxTransfer+0x60>)
 800a4d8:	400b      	ands	r3, r1
 800a4da:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d107      	bne.n	800a4f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 0210 	bic.w	r2, r2, #16
 800a4f2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	effffffe 	.word	0xeffffffe

0800a518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff f81a 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a55a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2220      	movs	r2, #32
 800a560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7f7 f9e6 	bl	800193c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a586:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58e:	2b22      	cmp	r3, #34	; 0x22
 800a590:	d152      	bne.n	800a638 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a59a:	89bb      	ldrh	r3, [r7, #12]
 800a59c:	b2d9      	uxtb	r1, r3
 800a59e:	89fb      	ldrh	r3, [r7, #14]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	400a      	ands	r2, r1
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d139      	bne.n	800a648 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a5e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 0201 	bic.w	r2, r2, #1
 800a5f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d10f      	bne.n	800a62a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0210 	bic.w	r2, r2, #16
 800a618:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fe ffae 	bl	8009584 <HAL_UARTEx_RxEventCallback>
 800a628:	e002      	b.n	800a630 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7f7 f85a 	bl	80016e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a636:	e007      	b.n	800a648 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699a      	ldr	r2, [r3, #24]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0208 	orr.w	r2, r2, #8
 800a646:	619a      	str	r2, [r3, #24]
}
 800a648:	bf00      	nop
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a65e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	2b22      	cmp	r3, #34	; 0x22
 800a668:	d152      	bne.n	800a710 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a678:	89ba      	ldrh	r2, [r7, #12]
 800a67a:	89fb      	ldrh	r3, [r7, #14]
 800a67c:	4013      	ands	r3, r2
 800a67e:	b29a      	uxth	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a688:	1c9a      	adds	r2, r3, #2
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a694:	b29b      	uxth	r3, r3
 800a696:	3b01      	subs	r3, #1
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d139      	bne.n	800a720 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a6ba:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f022 0201 	bic.w	r2, r2, #1
 800a6ca:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d10f      	bne.n	800a702 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0210 	bic.w	r2, r2, #16
 800a6f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7fe ff42 	bl	8009584 <HAL_UARTEx_RxEventCallback>
 800a700:	e002      	b.n	800a708 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7f6 ffee 	bl	80016e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a70e:	e007      	b.n	800a720 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699a      	ldr	r2, [r3, #24]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0208 	orr.w	r2, r2, #8
 800a71e:	619a      	str	r2, [r3, #24]
}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a736:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a756:	2b22      	cmp	r3, #34	; 0x22
 800a758:	f040 80d8 	bne.w	800a90c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a762:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a764:	e0a8      	b.n	800a8b8 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a76e:	89bb      	ldrh	r3, [r7, #12]
 800a770:	b2d9      	uxtb	r1, r3
 800a772:	8b7b      	ldrh	r3, [r7, #26]
 800a774:	b2da      	uxtb	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77a:	400a      	ands	r2, r1
 800a77c:	b2d2      	uxtb	r2, r2
 800a77e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a790:	b29b      	uxth	r3, r3
 800a792:	3b01      	subs	r3, #1
 800a794:	b29a      	uxth	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d04d      	beq.n	800a84a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d010      	beq.n	800a7da <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7d0:	f043 0201 	orr.w	r2, r3, #1
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d010      	beq.n	800a806 <UART_RxISR_8BIT_FIFOEN+0xde>
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fc:	f043 0204 	orr.w	r2, r3, #4
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d010      	beq.n	800a832 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00b      	beq.n	800a832 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2204      	movs	r2, #4
 800a820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a828:	f043 0202 	orr.w	r2, r3, #2
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d006      	beq.n	800a84a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7fe fe97 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a850:	b29b      	uxth	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d130      	bne.n	800a8b8 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a864:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6899      	ldr	r1, [r3, #8]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b2c      	ldr	r3, [pc, #176]	; (800a924 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a872:	400b      	ands	r3, r1
 800a874:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d10f      	bne.n	800a8ac <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0210 	bic.w	r2, r2, #16
 800a89a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7fe fe6d 	bl	8009584 <HAL_UARTEx_RxEventCallback>
 800a8aa:	e002      	b.n	800a8b2 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7f6 ff19 	bl	80016e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d005      	beq.n	800a8ca <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	f003 0320 	and.w	r3, r3, #32
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f47f af4e 	bne.w	800a766 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8d0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a8d2:	897b      	ldrh	r3, [r7, #10]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d021      	beq.n	800a91c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8de:	897a      	ldrh	r2, [r7, #10]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d21b      	bcs.n	800a91c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a8f2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a0c      	ldr	r2, [pc, #48]	; (800a928 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a8f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0220 	orr.w	r2, r2, #32
 800a908:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a90a:	e007      	b.n	800a91c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699a      	ldr	r2, [r3, #24]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f042 0208 	orr.w	r2, r2, #8
 800a91a:	619a      	str	r2, [r3, #24]
}
 800a91c:	bf00      	nop
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	effffffe 	.word	0xeffffffe
 800a928:	0800a579 	.word	0x0800a579

0800a92c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	; 0x28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a93a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95a:	2b22      	cmp	r3, #34	; 0x22
 800a95c:	f040 80d8 	bne.w	800ab10 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a966:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a968:	e0a8      	b.n	800aabc <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a976:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a978:	8aba      	ldrh	r2, [r7, #20]
 800a97a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a97c:	4013      	ands	r3, r2
 800a97e:	b29a      	uxth	r2, r3
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a988:	1c9a      	adds	r2, r3, #2
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a994:	b29b      	uxth	r3, r3
 800a996:	3b01      	subs	r3, #1
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d04d      	beq.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d010      	beq.n	800a9de <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d4:	f043 0201 	orr.w	r2, r3, #1
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	f003 0302 	and.w	r3, r3, #2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d010      	beq.n	800aa0a <UART_RxISR_16BIT_FIFOEN+0xde>
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00b      	beq.n	800aa0a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa00:	f043 0204 	orr.w	r2, r3, #4
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	f003 0304 	and.w	r3, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d010      	beq.n	800aa36 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2204      	movs	r2, #4
 800aa24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa2c:	f043 0202 	orr.w	r2, r3, #2
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fe fd95 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d130      	bne.n	800aabc <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa68:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6899      	ldr	r1, [r3, #8]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	4b2c      	ldr	r3, [pc, #176]	; (800ab28 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800aa76:	400b      	ands	r3, r1
 800aa78:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d10f      	bne.n	800aab0 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0210 	bic.w	r2, r2, #16
 800aa9e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7fe fd6b 	bl	8009584 <HAL_UARTEx_RxEventCallback>
 800aaae:	e002      	b.n	800aab6 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7f6 fe17 	bl	80016e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aabc:	8afb      	ldrh	r3, [r7, #22]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d005      	beq.n	800aace <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	f003 0320 	and.w	r3, r3, #32
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f47f af4e 	bne.w	800a96a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aad4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aad6:	89fb      	ldrh	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d021      	beq.n	800ab20 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aae2:	89fa      	ldrh	r2, [r7, #14]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d21b      	bcs.n	800ab20 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aaf6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a0c      	ldr	r2, [pc, #48]	; (800ab2c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800aafc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f042 0220 	orr.w	r2, r2, #32
 800ab0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab0e:	e007      	b.n	800ab20 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699a      	ldr	r2, [r3, #24]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0208 	orr.w	r2, r2, #8
 800ab1e:	619a      	str	r2, [r3, #24]
}
 800ab20:	bf00      	nop
 800ab22:	3728      	adds	r7, #40	; 0x28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	effffffe 	.word	0xeffffffe
 800ab2c:	0800a651 	.word	0x0800a651

0800ab30 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e056      	b.n	800abf6 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7f7 f950 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2224      	movs	r2, #36	; 0x24
 800ab64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0201 	bic.w	r2, r2, #1
 800ab76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7fe fd0f 	bl	800959c <UART_SetConfig>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d101      	bne.n	800ab88 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e036      	b.n	800abf6 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff fa63 	bl	800a05c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aba4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	055b      	lsls	r3, r3, #21
 800abbe:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	041b      	lsls	r3, r3, #16
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <HAL_RS485Ex_Init+0xd0>)
 800abd2:	4013      	ands	r3, r2
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	6812      	ldr	r2, [r2, #0]
 800abd8:	6979      	ldr	r1, [r7, #20]
 800abda:	430b      	orrs	r3, r1
 800abdc:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0201 	orr.w	r2, r2, #1
 800abec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff fad6 	bl	800a1a0 <UART_CheckIdleState>
 800abf4:	4603      	mov	r3, r0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	fc00ffff 	.word	0xfc00ffff

0800ac04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d101      	bne.n	800ac56 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac52:	2302      	movs	r3, #2
 800ac54:	e027      	b.n	800aca6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2224      	movs	r2, #36	; 0x24
 800ac62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0201 	bic.w	r2, r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acc6:	2302      	movs	r3, #2
 800acc8:	e02d      	b.n	800ad26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2224      	movs	r2, #36	; 0x24
 800acd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0201 	bic.w	r2, r2, #1
 800acf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f850 	bl	800adac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2220      	movs	r2, #32
 800ad18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b084      	sub	sp, #16
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d101      	bne.n	800ad46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad42:	2302      	movs	r3, #2
 800ad44:	e02d      	b.n	800ada2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2224      	movs	r2, #36	; 0x24
 800ad52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0201 	bic.w	r2, r2, #1
 800ad6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f812 	bl	800adac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d108      	bne.n	800adce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adcc:	e031      	b.n	800ae32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adce:	2310      	movs	r3, #16
 800add0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800add2:	2310      	movs	r3, #16
 800add4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	0e5b      	lsrs	r3, r3, #25
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	f003 0307 	and.w	r3, r3, #7
 800ade4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	0f5b      	lsrs	r3, r3, #29
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	f003 0307 	and.w	r3, r3, #7
 800adf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	7b3a      	ldrb	r2, [r7, #12]
 800adfa:	4911      	ldr	r1, [pc, #68]	; (800ae40 <UARTEx_SetNbDataToProcess+0x94>)
 800adfc:	5c8a      	ldrb	r2, [r1, r2]
 800adfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae02:	7b3a      	ldrb	r2, [r7, #12]
 800ae04:	490f      	ldr	r1, [pc, #60]	; (800ae44 <UARTEx_SetNbDataToProcess+0x98>)
 800ae06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	7b7a      	ldrb	r2, [r7, #13]
 800ae18:	4909      	ldr	r1, [pc, #36]	; (800ae40 <UARTEx_SetNbDataToProcess+0x94>)
 800ae1a:	5c8a      	ldrb	r2, [r1, r2]
 800ae1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae20:	7b7a      	ldrb	r2, [r7, #13]
 800ae22:	4908      	ldr	r1, [pc, #32]	; (800ae44 <UARTEx_SetNbDataToProcess+0x98>)
 800ae24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	0800bdb4 	.word	0x0800bdb4
 800ae44:	0800bdbc 	.word	0x0800bdbc

0800ae48 <__errno>:
 800ae48:	4b01      	ldr	r3, [pc, #4]	; (800ae50 <__errno+0x8>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20000010 	.word	0x20000010

0800ae54 <__libc_init_array>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4d0d      	ldr	r5, [pc, #52]	; (800ae8c <__libc_init_array+0x38>)
 800ae58:	4c0d      	ldr	r4, [pc, #52]	; (800ae90 <__libc_init_array+0x3c>)
 800ae5a:	1b64      	subs	r4, r4, r5
 800ae5c:	10a4      	asrs	r4, r4, #2
 800ae5e:	2600      	movs	r6, #0
 800ae60:	42a6      	cmp	r6, r4
 800ae62:	d109      	bne.n	800ae78 <__libc_init_array+0x24>
 800ae64:	4d0b      	ldr	r5, [pc, #44]	; (800ae94 <__libc_init_array+0x40>)
 800ae66:	4c0c      	ldr	r4, [pc, #48]	; (800ae98 <__libc_init_array+0x44>)
 800ae68:	f000 ff76 	bl	800bd58 <_init>
 800ae6c:	1b64      	subs	r4, r4, r5
 800ae6e:	10a4      	asrs	r4, r4, #2
 800ae70:	2600      	movs	r6, #0
 800ae72:	42a6      	cmp	r6, r4
 800ae74:	d105      	bne.n	800ae82 <__libc_init_array+0x2e>
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7c:	4798      	blx	r3
 800ae7e:	3601      	adds	r6, #1
 800ae80:	e7ee      	b.n	800ae60 <__libc_init_array+0xc>
 800ae82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae86:	4798      	blx	r3
 800ae88:	3601      	adds	r6, #1
 800ae8a:	e7f2      	b.n	800ae72 <__libc_init_array+0x1e>
 800ae8c:	0800be64 	.word	0x0800be64
 800ae90:	0800be64 	.word	0x0800be64
 800ae94:	0800be64 	.word	0x0800be64
 800ae98:	0800be68 	.word	0x0800be68

0800ae9c <memset>:
 800ae9c:	4402      	add	r2, r0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d100      	bne.n	800aea6 <memset+0xa>
 800aea4:	4770      	bx	lr
 800aea6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeaa:	e7f9      	b.n	800aea0 <memset+0x4>

0800aeac <iprintf>:
 800aeac:	b40f      	push	{r0, r1, r2, r3}
 800aeae:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <iprintf+0x2c>)
 800aeb0:	b513      	push	{r0, r1, r4, lr}
 800aeb2:	681c      	ldr	r4, [r3, #0]
 800aeb4:	b124      	cbz	r4, 800aec0 <iprintf+0x14>
 800aeb6:	69a3      	ldr	r3, [r4, #24]
 800aeb8:	b913      	cbnz	r3, 800aec0 <iprintf+0x14>
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 f866 	bl	800af8c <__sinit>
 800aec0:	ab05      	add	r3, sp, #20
 800aec2:	9a04      	ldr	r2, [sp, #16]
 800aec4:	68a1      	ldr	r1, [r4, #8]
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 f983 	bl	800b1d4 <_vfiprintf_r>
 800aece:	b002      	add	sp, #8
 800aed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed4:	b004      	add	sp, #16
 800aed6:	4770      	bx	lr
 800aed8:	20000010 	.word	0x20000010

0800aedc <std>:
 800aedc:	2300      	movs	r3, #0
 800aede:	b510      	push	{r4, lr}
 800aee0:	4604      	mov	r4, r0
 800aee2:	e9c0 3300 	strd	r3, r3, [r0]
 800aee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeea:	6083      	str	r3, [r0, #8]
 800aeec:	8181      	strh	r1, [r0, #12]
 800aeee:	6643      	str	r3, [r0, #100]	; 0x64
 800aef0:	81c2      	strh	r2, [r0, #14]
 800aef2:	6183      	str	r3, [r0, #24]
 800aef4:	4619      	mov	r1, r3
 800aef6:	2208      	movs	r2, #8
 800aef8:	305c      	adds	r0, #92	; 0x5c
 800aefa:	f7ff ffcf 	bl	800ae9c <memset>
 800aefe:	4b05      	ldr	r3, [pc, #20]	; (800af14 <std+0x38>)
 800af00:	6263      	str	r3, [r4, #36]	; 0x24
 800af02:	4b05      	ldr	r3, [pc, #20]	; (800af18 <std+0x3c>)
 800af04:	62a3      	str	r3, [r4, #40]	; 0x28
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <std+0x40>)
 800af08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <std+0x44>)
 800af0c:	6224      	str	r4, [r4, #32]
 800af0e:	6323      	str	r3, [r4, #48]	; 0x30
 800af10:	bd10      	pop	{r4, pc}
 800af12:	bf00      	nop
 800af14:	0800b77d 	.word	0x0800b77d
 800af18:	0800b79f 	.word	0x0800b79f
 800af1c:	0800b7d7 	.word	0x0800b7d7
 800af20:	0800b7fb 	.word	0x0800b7fb

0800af24 <_cleanup_r>:
 800af24:	4901      	ldr	r1, [pc, #4]	; (800af2c <_cleanup_r+0x8>)
 800af26:	f000 b8af 	b.w	800b088 <_fwalk_reent>
 800af2a:	bf00      	nop
 800af2c:	0800bad5 	.word	0x0800bad5

0800af30 <__sfmoreglue>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	1e4a      	subs	r2, r1, #1
 800af34:	2568      	movs	r5, #104	; 0x68
 800af36:	4355      	muls	r5, r2
 800af38:	460e      	mov	r6, r1
 800af3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af3e:	f000 f8c5 	bl	800b0cc <_malloc_r>
 800af42:	4604      	mov	r4, r0
 800af44:	b140      	cbz	r0, 800af58 <__sfmoreglue+0x28>
 800af46:	2100      	movs	r1, #0
 800af48:	e9c0 1600 	strd	r1, r6, [r0]
 800af4c:	300c      	adds	r0, #12
 800af4e:	60a0      	str	r0, [r4, #8]
 800af50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af54:	f7ff ffa2 	bl	800ae9c <memset>
 800af58:	4620      	mov	r0, r4
 800af5a:	bd70      	pop	{r4, r5, r6, pc}

0800af5c <__sfp_lock_acquire>:
 800af5c:	4801      	ldr	r0, [pc, #4]	; (800af64 <__sfp_lock_acquire+0x8>)
 800af5e:	f000 b8b3 	b.w	800b0c8 <__retarget_lock_acquire_recursive>
 800af62:	bf00      	nop
 800af64:	2000094c 	.word	0x2000094c

0800af68 <__sfp_lock_release>:
 800af68:	4801      	ldr	r0, [pc, #4]	; (800af70 <__sfp_lock_release+0x8>)
 800af6a:	f000 b8ae 	b.w	800b0ca <__retarget_lock_release_recursive>
 800af6e:	bf00      	nop
 800af70:	2000094c 	.word	0x2000094c

0800af74 <__sinit_lock_acquire>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__sinit_lock_acquire+0x8>)
 800af76:	f000 b8a7 	b.w	800b0c8 <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	20000947 	.word	0x20000947

0800af80 <__sinit_lock_release>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__sinit_lock_release+0x8>)
 800af82:	f000 b8a2 	b.w	800b0ca <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	20000947 	.word	0x20000947

0800af8c <__sinit>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	4604      	mov	r4, r0
 800af90:	f7ff fff0 	bl	800af74 <__sinit_lock_acquire>
 800af94:	69a3      	ldr	r3, [r4, #24]
 800af96:	b11b      	cbz	r3, 800afa0 <__sinit+0x14>
 800af98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af9c:	f7ff bff0 	b.w	800af80 <__sinit_lock_release>
 800afa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afa4:	6523      	str	r3, [r4, #80]	; 0x50
 800afa6:	4b13      	ldr	r3, [pc, #76]	; (800aff4 <__sinit+0x68>)
 800afa8:	4a13      	ldr	r2, [pc, #76]	; (800aff8 <__sinit+0x6c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	62a2      	str	r2, [r4, #40]	; 0x28
 800afae:	42a3      	cmp	r3, r4
 800afb0:	bf04      	itt	eq
 800afb2:	2301      	moveq	r3, #1
 800afb4:	61a3      	streq	r3, [r4, #24]
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f820 	bl	800affc <__sfp>
 800afbc:	6060      	str	r0, [r4, #4]
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 f81c 	bl	800affc <__sfp>
 800afc4:	60a0      	str	r0, [r4, #8]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f818 	bl	800affc <__sfp>
 800afcc:	2200      	movs	r2, #0
 800afce:	60e0      	str	r0, [r4, #12]
 800afd0:	2104      	movs	r1, #4
 800afd2:	6860      	ldr	r0, [r4, #4]
 800afd4:	f7ff ff82 	bl	800aedc <std>
 800afd8:	68a0      	ldr	r0, [r4, #8]
 800afda:	2201      	movs	r2, #1
 800afdc:	2109      	movs	r1, #9
 800afde:	f7ff ff7d 	bl	800aedc <std>
 800afe2:	68e0      	ldr	r0, [r4, #12]
 800afe4:	2202      	movs	r2, #2
 800afe6:	2112      	movs	r1, #18
 800afe8:	f7ff ff78 	bl	800aedc <std>
 800afec:	2301      	movs	r3, #1
 800afee:	61a3      	str	r3, [r4, #24]
 800aff0:	e7d2      	b.n	800af98 <__sinit+0xc>
 800aff2:	bf00      	nop
 800aff4:	0800bdc4 	.word	0x0800bdc4
 800aff8:	0800af25 	.word	0x0800af25

0800affc <__sfp>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	4607      	mov	r7, r0
 800b000:	f7ff ffac 	bl	800af5c <__sfp_lock_acquire>
 800b004:	4b1e      	ldr	r3, [pc, #120]	; (800b080 <__sfp+0x84>)
 800b006:	681e      	ldr	r6, [r3, #0]
 800b008:	69b3      	ldr	r3, [r6, #24]
 800b00a:	b913      	cbnz	r3, 800b012 <__sfp+0x16>
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff ffbd 	bl	800af8c <__sinit>
 800b012:	3648      	adds	r6, #72	; 0x48
 800b014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b018:	3b01      	subs	r3, #1
 800b01a:	d503      	bpl.n	800b024 <__sfp+0x28>
 800b01c:	6833      	ldr	r3, [r6, #0]
 800b01e:	b30b      	cbz	r3, 800b064 <__sfp+0x68>
 800b020:	6836      	ldr	r6, [r6, #0]
 800b022:	e7f7      	b.n	800b014 <__sfp+0x18>
 800b024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b028:	b9d5      	cbnz	r5, 800b060 <__sfp+0x64>
 800b02a:	4b16      	ldr	r3, [pc, #88]	; (800b084 <__sfp+0x88>)
 800b02c:	60e3      	str	r3, [r4, #12]
 800b02e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b032:	6665      	str	r5, [r4, #100]	; 0x64
 800b034:	f000 f847 	bl	800b0c6 <__retarget_lock_init_recursive>
 800b038:	f7ff ff96 	bl	800af68 <__sfp_lock_release>
 800b03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b044:	6025      	str	r5, [r4, #0]
 800b046:	61a5      	str	r5, [r4, #24]
 800b048:	2208      	movs	r2, #8
 800b04a:	4629      	mov	r1, r5
 800b04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b050:	f7ff ff24 	bl	800ae9c <memset>
 800b054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b05c:	4620      	mov	r0, r4
 800b05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b060:	3468      	adds	r4, #104	; 0x68
 800b062:	e7d9      	b.n	800b018 <__sfp+0x1c>
 800b064:	2104      	movs	r1, #4
 800b066:	4638      	mov	r0, r7
 800b068:	f7ff ff62 	bl	800af30 <__sfmoreglue>
 800b06c:	4604      	mov	r4, r0
 800b06e:	6030      	str	r0, [r6, #0]
 800b070:	2800      	cmp	r0, #0
 800b072:	d1d5      	bne.n	800b020 <__sfp+0x24>
 800b074:	f7ff ff78 	bl	800af68 <__sfp_lock_release>
 800b078:	230c      	movs	r3, #12
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	e7ee      	b.n	800b05c <__sfp+0x60>
 800b07e:	bf00      	nop
 800b080:	0800bdc4 	.word	0x0800bdc4
 800b084:	ffff0001 	.word	0xffff0001

0800b088 <_fwalk_reent>:
 800b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b08c:	4606      	mov	r6, r0
 800b08e:	4688      	mov	r8, r1
 800b090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b094:	2700      	movs	r7, #0
 800b096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b09a:	f1b9 0901 	subs.w	r9, r9, #1
 800b09e:	d505      	bpl.n	800b0ac <_fwalk_reent+0x24>
 800b0a0:	6824      	ldr	r4, [r4, #0]
 800b0a2:	2c00      	cmp	r4, #0
 800b0a4:	d1f7      	bne.n	800b096 <_fwalk_reent+0xe>
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ac:	89ab      	ldrh	r3, [r5, #12]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d907      	bls.n	800b0c2 <_fwalk_reent+0x3a>
 800b0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	d003      	beq.n	800b0c2 <_fwalk_reent+0x3a>
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4630      	mov	r0, r6
 800b0be:	47c0      	blx	r8
 800b0c0:	4307      	orrs	r7, r0
 800b0c2:	3568      	adds	r5, #104	; 0x68
 800b0c4:	e7e9      	b.n	800b09a <_fwalk_reent+0x12>

0800b0c6 <__retarget_lock_init_recursive>:
 800b0c6:	4770      	bx	lr

0800b0c8 <__retarget_lock_acquire_recursive>:
 800b0c8:	4770      	bx	lr

0800b0ca <__retarget_lock_release_recursive>:
 800b0ca:	4770      	bx	lr

0800b0cc <_malloc_r>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	1ccd      	adds	r5, r1, #3
 800b0d0:	f025 0503 	bic.w	r5, r5, #3
 800b0d4:	3508      	adds	r5, #8
 800b0d6:	2d0c      	cmp	r5, #12
 800b0d8:	bf38      	it	cc
 800b0da:	250c      	movcc	r5, #12
 800b0dc:	2d00      	cmp	r5, #0
 800b0de:	4606      	mov	r6, r0
 800b0e0:	db01      	blt.n	800b0e6 <_malloc_r+0x1a>
 800b0e2:	42a9      	cmp	r1, r5
 800b0e4:	d903      	bls.n	800b0ee <_malloc_r+0x22>
 800b0e6:	230c      	movs	r3, #12
 800b0e8:	6033      	str	r3, [r6, #0]
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ee:	f000 fda3 	bl	800bc38 <__malloc_lock>
 800b0f2:	4921      	ldr	r1, [pc, #132]	; (800b178 <_malloc_r+0xac>)
 800b0f4:	680a      	ldr	r2, [r1, #0]
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	b99c      	cbnz	r4, 800b122 <_malloc_r+0x56>
 800b0fa:	4f20      	ldr	r7, [pc, #128]	; (800b17c <_malloc_r+0xb0>)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	b923      	cbnz	r3, 800b10a <_malloc_r+0x3e>
 800b100:	4621      	mov	r1, r4
 800b102:	4630      	mov	r0, r6
 800b104:	f000 fb2a 	bl	800b75c <_sbrk_r>
 800b108:	6038      	str	r0, [r7, #0]
 800b10a:	4629      	mov	r1, r5
 800b10c:	4630      	mov	r0, r6
 800b10e:	f000 fb25 	bl	800b75c <_sbrk_r>
 800b112:	1c43      	adds	r3, r0, #1
 800b114:	d123      	bne.n	800b15e <_malloc_r+0x92>
 800b116:	230c      	movs	r3, #12
 800b118:	6033      	str	r3, [r6, #0]
 800b11a:	4630      	mov	r0, r6
 800b11c:	f000 fd92 	bl	800bc44 <__malloc_unlock>
 800b120:	e7e3      	b.n	800b0ea <_malloc_r+0x1e>
 800b122:	6823      	ldr	r3, [r4, #0]
 800b124:	1b5b      	subs	r3, r3, r5
 800b126:	d417      	bmi.n	800b158 <_malloc_r+0x8c>
 800b128:	2b0b      	cmp	r3, #11
 800b12a:	d903      	bls.n	800b134 <_malloc_r+0x68>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	441c      	add	r4, r3
 800b130:	6025      	str	r5, [r4, #0]
 800b132:	e004      	b.n	800b13e <_malloc_r+0x72>
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	42a2      	cmp	r2, r4
 800b138:	bf0c      	ite	eq
 800b13a:	600b      	streq	r3, [r1, #0]
 800b13c:	6053      	strne	r3, [r2, #4]
 800b13e:	4630      	mov	r0, r6
 800b140:	f000 fd80 	bl	800bc44 <__malloc_unlock>
 800b144:	f104 000b 	add.w	r0, r4, #11
 800b148:	1d23      	adds	r3, r4, #4
 800b14a:	f020 0007 	bic.w	r0, r0, #7
 800b14e:	1ac2      	subs	r2, r0, r3
 800b150:	d0cc      	beq.n	800b0ec <_malloc_r+0x20>
 800b152:	1a1b      	subs	r3, r3, r0
 800b154:	50a3      	str	r3, [r4, r2]
 800b156:	e7c9      	b.n	800b0ec <_malloc_r+0x20>
 800b158:	4622      	mov	r2, r4
 800b15a:	6864      	ldr	r4, [r4, #4]
 800b15c:	e7cc      	b.n	800b0f8 <_malloc_r+0x2c>
 800b15e:	1cc4      	adds	r4, r0, #3
 800b160:	f024 0403 	bic.w	r4, r4, #3
 800b164:	42a0      	cmp	r0, r4
 800b166:	d0e3      	beq.n	800b130 <_malloc_r+0x64>
 800b168:	1a21      	subs	r1, r4, r0
 800b16a:	4630      	mov	r0, r6
 800b16c:	f000 faf6 	bl	800b75c <_sbrk_r>
 800b170:	3001      	adds	r0, #1
 800b172:	d1dd      	bne.n	800b130 <_malloc_r+0x64>
 800b174:	e7cf      	b.n	800b116 <_malloc_r+0x4a>
 800b176:	bf00      	nop
 800b178:	20000098 	.word	0x20000098
 800b17c:	2000009c 	.word	0x2000009c

0800b180 <__sfputc_r>:
 800b180:	6893      	ldr	r3, [r2, #8]
 800b182:	3b01      	subs	r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	b410      	push	{r4}
 800b188:	6093      	str	r3, [r2, #8]
 800b18a:	da08      	bge.n	800b19e <__sfputc_r+0x1e>
 800b18c:	6994      	ldr	r4, [r2, #24]
 800b18e:	42a3      	cmp	r3, r4
 800b190:	db01      	blt.n	800b196 <__sfputc_r+0x16>
 800b192:	290a      	cmp	r1, #10
 800b194:	d103      	bne.n	800b19e <__sfputc_r+0x1e>
 800b196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19a:	f000 bb33 	b.w	800b804 <__swbuf_r>
 800b19e:	6813      	ldr	r3, [r2, #0]
 800b1a0:	1c58      	adds	r0, r3, #1
 800b1a2:	6010      	str	r0, [r2, #0]
 800b1a4:	7019      	strb	r1, [r3, #0]
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <__sfputs_r>:
 800b1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	18d5      	adds	r5, r2, r3
 800b1b8:	42ac      	cmp	r4, r5
 800b1ba:	d101      	bne.n	800b1c0 <__sfputs_r+0x12>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e007      	b.n	800b1d0 <__sfputs_r+0x22>
 800b1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c4:	463a      	mov	r2, r7
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ffda 	bl	800b180 <__sfputc_r>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d1f3      	bne.n	800b1b8 <__sfputs_r+0xa>
 800b1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1d4 <_vfiprintf_r>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	460d      	mov	r5, r1
 800b1da:	b09d      	sub	sp, #116	; 0x74
 800b1dc:	4614      	mov	r4, r2
 800b1de:	4698      	mov	r8, r3
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	b118      	cbz	r0, 800b1ec <_vfiprintf_r+0x18>
 800b1e4:	6983      	ldr	r3, [r0, #24]
 800b1e6:	b90b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x18>
 800b1e8:	f7ff fed0 	bl	800af8c <__sinit>
 800b1ec:	4b89      	ldr	r3, [pc, #548]	; (800b414 <_vfiprintf_r+0x240>)
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	d11b      	bne.n	800b22a <_vfiprintf_r+0x56>
 800b1f2:	6875      	ldr	r5, [r6, #4]
 800b1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f6:	07d9      	lsls	r1, r3, #31
 800b1f8:	d405      	bmi.n	800b206 <_vfiprintf_r+0x32>
 800b1fa:	89ab      	ldrh	r3, [r5, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d402      	bmi.n	800b206 <_vfiprintf_r+0x32>
 800b200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b202:	f7ff ff61 	bl	800b0c8 <__retarget_lock_acquire_recursive>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	071b      	lsls	r3, r3, #28
 800b20a:	d501      	bpl.n	800b210 <_vfiprintf_r+0x3c>
 800b20c:	692b      	ldr	r3, [r5, #16]
 800b20e:	b9eb      	cbnz	r3, 800b24c <_vfiprintf_r+0x78>
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f000 fb5a 	bl	800b8cc <__swsetup_r>
 800b218:	b1c0      	cbz	r0, 800b24c <_vfiprintf_r+0x78>
 800b21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b21c:	07dc      	lsls	r4, r3, #31
 800b21e:	d50e      	bpl.n	800b23e <_vfiprintf_r+0x6a>
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	b01d      	add	sp, #116	; 0x74
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	4b7b      	ldr	r3, [pc, #492]	; (800b418 <_vfiprintf_r+0x244>)
 800b22c:	429d      	cmp	r5, r3
 800b22e:	d101      	bne.n	800b234 <_vfiprintf_r+0x60>
 800b230:	68b5      	ldr	r5, [r6, #8]
 800b232:	e7df      	b.n	800b1f4 <_vfiprintf_r+0x20>
 800b234:	4b79      	ldr	r3, [pc, #484]	; (800b41c <_vfiprintf_r+0x248>)
 800b236:	429d      	cmp	r5, r3
 800b238:	bf08      	it	eq
 800b23a:	68f5      	ldreq	r5, [r6, #12]
 800b23c:	e7da      	b.n	800b1f4 <_vfiprintf_r+0x20>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	0598      	lsls	r0, r3, #22
 800b242:	d4ed      	bmi.n	800b220 <_vfiprintf_r+0x4c>
 800b244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b246:	f7ff ff40 	bl	800b0ca <__retarget_lock_release_recursive>
 800b24a:	e7e9      	b.n	800b220 <_vfiprintf_r+0x4c>
 800b24c:	2300      	movs	r3, #0
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	2320      	movs	r3, #32
 800b252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b256:	f8cd 800c 	str.w	r8, [sp, #12]
 800b25a:	2330      	movs	r3, #48	; 0x30
 800b25c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b420 <_vfiprintf_r+0x24c>
 800b260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b264:	f04f 0901 	mov.w	r9, #1
 800b268:	4623      	mov	r3, r4
 800b26a:	469a      	mov	sl, r3
 800b26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b270:	b10a      	cbz	r2, 800b276 <_vfiprintf_r+0xa2>
 800b272:	2a25      	cmp	r2, #37	; 0x25
 800b274:	d1f9      	bne.n	800b26a <_vfiprintf_r+0x96>
 800b276:	ebba 0b04 	subs.w	fp, sl, r4
 800b27a:	d00b      	beq.n	800b294 <_vfiprintf_r+0xc0>
 800b27c:	465b      	mov	r3, fp
 800b27e:	4622      	mov	r2, r4
 800b280:	4629      	mov	r1, r5
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff93 	bl	800b1ae <__sfputs_r>
 800b288:	3001      	adds	r0, #1
 800b28a:	f000 80aa 	beq.w	800b3e2 <_vfiprintf_r+0x20e>
 800b28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b290:	445a      	add	r2, fp
 800b292:	9209      	str	r2, [sp, #36]	; 0x24
 800b294:	f89a 3000 	ldrb.w	r3, [sl]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80a2 	beq.w	800b3e2 <_vfiprintf_r+0x20e>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a8:	f10a 0a01 	add.w	sl, sl, #1
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	9307      	str	r3, [sp, #28]
 800b2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b2b6:	4654      	mov	r4, sl
 800b2b8:	2205      	movs	r2, #5
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	4858      	ldr	r0, [pc, #352]	; (800b420 <_vfiprintf_r+0x24c>)
 800b2c0:	f7f5 f80e 	bl	80002e0 <memchr>
 800b2c4:	9a04      	ldr	r2, [sp, #16]
 800b2c6:	b9d8      	cbnz	r0, 800b300 <_vfiprintf_r+0x12c>
 800b2c8:	06d1      	lsls	r1, r2, #27
 800b2ca:	bf44      	itt	mi
 800b2cc:	2320      	movmi	r3, #32
 800b2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d2:	0713      	lsls	r3, r2, #28
 800b2d4:	bf44      	itt	mi
 800b2d6:	232b      	movmi	r3, #43	; 0x2b
 800b2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e2:	d015      	beq.n	800b310 <_vfiprintf_r+0x13c>
 800b2e4:	9a07      	ldr	r2, [sp, #28]
 800b2e6:	4654      	mov	r4, sl
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f04f 0c0a 	mov.w	ip, #10
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f4:	3b30      	subs	r3, #48	; 0x30
 800b2f6:	2b09      	cmp	r3, #9
 800b2f8:	d94e      	bls.n	800b398 <_vfiprintf_r+0x1c4>
 800b2fa:	b1b0      	cbz	r0, 800b32a <_vfiprintf_r+0x156>
 800b2fc:	9207      	str	r2, [sp, #28]
 800b2fe:	e014      	b.n	800b32a <_vfiprintf_r+0x156>
 800b300:	eba0 0308 	sub.w	r3, r0, r8
 800b304:	fa09 f303 	lsl.w	r3, r9, r3
 800b308:	4313      	orrs	r3, r2
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	46a2      	mov	sl, r4
 800b30e:	e7d2      	b.n	800b2b6 <_vfiprintf_r+0xe2>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	1d19      	adds	r1, r3, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	9103      	str	r1, [sp, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfbb      	ittet	lt
 800b31c:	425b      	neglt	r3, r3
 800b31e:	f042 0202 	orrlt.w	r2, r2, #2
 800b322:	9307      	strge	r3, [sp, #28]
 800b324:	9307      	strlt	r3, [sp, #28]
 800b326:	bfb8      	it	lt
 800b328:	9204      	strlt	r2, [sp, #16]
 800b32a:	7823      	ldrb	r3, [r4, #0]
 800b32c:	2b2e      	cmp	r3, #46	; 0x2e
 800b32e:	d10c      	bne.n	800b34a <_vfiprintf_r+0x176>
 800b330:	7863      	ldrb	r3, [r4, #1]
 800b332:	2b2a      	cmp	r3, #42	; 0x2a
 800b334:	d135      	bne.n	800b3a2 <_vfiprintf_r+0x1ce>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	1d1a      	adds	r2, r3, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	9203      	str	r2, [sp, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfb8      	it	lt
 800b342:	f04f 33ff 	movlt.w	r3, #4294967295
 800b346:	3402      	adds	r4, #2
 800b348:	9305      	str	r3, [sp, #20]
 800b34a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b430 <_vfiprintf_r+0x25c>
 800b34e:	7821      	ldrb	r1, [r4, #0]
 800b350:	2203      	movs	r2, #3
 800b352:	4650      	mov	r0, sl
 800b354:	f7f4 ffc4 	bl	80002e0 <memchr>
 800b358:	b140      	cbz	r0, 800b36c <_vfiprintf_r+0x198>
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	eba0 000a 	sub.w	r0, r0, sl
 800b360:	fa03 f000 	lsl.w	r0, r3, r0
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	4303      	orrs	r3, r0
 800b368:	3401      	adds	r4, #1
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b370:	482c      	ldr	r0, [pc, #176]	; (800b424 <_vfiprintf_r+0x250>)
 800b372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b376:	2206      	movs	r2, #6
 800b378:	f7f4 ffb2 	bl	80002e0 <memchr>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d03f      	beq.n	800b400 <_vfiprintf_r+0x22c>
 800b380:	4b29      	ldr	r3, [pc, #164]	; (800b428 <_vfiprintf_r+0x254>)
 800b382:	bb1b      	cbnz	r3, 800b3cc <_vfiprintf_r+0x1f8>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	3307      	adds	r3, #7
 800b388:	f023 0307 	bic.w	r3, r3, #7
 800b38c:	3308      	adds	r3, #8
 800b38e:	9303      	str	r3, [sp, #12]
 800b390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b392:	443b      	add	r3, r7
 800b394:	9309      	str	r3, [sp, #36]	; 0x24
 800b396:	e767      	b.n	800b268 <_vfiprintf_r+0x94>
 800b398:	fb0c 3202 	mla	r2, ip, r2, r3
 800b39c:	460c      	mov	r4, r1
 800b39e:	2001      	movs	r0, #1
 800b3a0:	e7a5      	b.n	800b2ee <_vfiprintf_r+0x11a>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	3401      	adds	r4, #1
 800b3a6:	9305      	str	r3, [sp, #20]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	f04f 0c0a 	mov.w	ip, #10
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b4:	3a30      	subs	r2, #48	; 0x30
 800b3b6:	2a09      	cmp	r2, #9
 800b3b8:	d903      	bls.n	800b3c2 <_vfiprintf_r+0x1ee>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0c5      	beq.n	800b34a <_vfiprintf_r+0x176>
 800b3be:	9105      	str	r1, [sp, #20]
 800b3c0:	e7c3      	b.n	800b34a <_vfiprintf_r+0x176>
 800b3c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e7f0      	b.n	800b3ae <_vfiprintf_r+0x1da>
 800b3cc:	ab03      	add	r3, sp, #12
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	4b16      	ldr	r3, [pc, #88]	; (800b42c <_vfiprintf_r+0x258>)
 800b3d4:	a904      	add	r1, sp, #16
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f3af 8000 	nop.w
 800b3dc:	4607      	mov	r7, r0
 800b3de:	1c78      	adds	r0, r7, #1
 800b3e0:	d1d6      	bne.n	800b390 <_vfiprintf_r+0x1bc>
 800b3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e4:	07d9      	lsls	r1, r3, #31
 800b3e6:	d405      	bmi.n	800b3f4 <_vfiprintf_r+0x220>
 800b3e8:	89ab      	ldrh	r3, [r5, #12]
 800b3ea:	059a      	lsls	r2, r3, #22
 800b3ec:	d402      	bmi.n	800b3f4 <_vfiprintf_r+0x220>
 800b3ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f0:	f7ff fe6b 	bl	800b0ca <__retarget_lock_release_recursive>
 800b3f4:	89ab      	ldrh	r3, [r5, #12]
 800b3f6:	065b      	lsls	r3, r3, #25
 800b3f8:	f53f af12 	bmi.w	800b220 <_vfiprintf_r+0x4c>
 800b3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3fe:	e711      	b.n	800b224 <_vfiprintf_r+0x50>
 800b400:	ab03      	add	r3, sp, #12
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	462a      	mov	r2, r5
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <_vfiprintf_r+0x258>)
 800b408:	a904      	add	r1, sp, #16
 800b40a:	4630      	mov	r0, r6
 800b40c:	f000 f880 	bl	800b510 <_printf_i>
 800b410:	e7e4      	b.n	800b3dc <_vfiprintf_r+0x208>
 800b412:	bf00      	nop
 800b414:	0800bde8 	.word	0x0800bde8
 800b418:	0800be08 	.word	0x0800be08
 800b41c:	0800bdc8 	.word	0x0800bdc8
 800b420:	0800be28 	.word	0x0800be28
 800b424:	0800be32 	.word	0x0800be32
 800b428:	00000000 	.word	0x00000000
 800b42c:	0800b1af 	.word	0x0800b1af
 800b430:	0800be2e 	.word	0x0800be2e

0800b434 <_printf_common>:
 800b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	4616      	mov	r6, r2
 800b43a:	4699      	mov	r9, r3
 800b43c:	688a      	ldr	r2, [r1, #8]
 800b43e:	690b      	ldr	r3, [r1, #16]
 800b440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b444:	4293      	cmp	r3, r2
 800b446:	bfb8      	it	lt
 800b448:	4613      	movlt	r3, r2
 800b44a:	6033      	str	r3, [r6, #0]
 800b44c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b450:	4607      	mov	r7, r0
 800b452:	460c      	mov	r4, r1
 800b454:	b10a      	cbz	r2, 800b45a <_printf_common+0x26>
 800b456:	3301      	adds	r3, #1
 800b458:	6033      	str	r3, [r6, #0]
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	0699      	lsls	r1, r3, #26
 800b45e:	bf42      	ittt	mi
 800b460:	6833      	ldrmi	r3, [r6, #0]
 800b462:	3302      	addmi	r3, #2
 800b464:	6033      	strmi	r3, [r6, #0]
 800b466:	6825      	ldr	r5, [r4, #0]
 800b468:	f015 0506 	ands.w	r5, r5, #6
 800b46c:	d106      	bne.n	800b47c <_printf_common+0x48>
 800b46e:	f104 0a19 	add.w	sl, r4, #25
 800b472:	68e3      	ldr	r3, [r4, #12]
 800b474:	6832      	ldr	r2, [r6, #0]
 800b476:	1a9b      	subs	r3, r3, r2
 800b478:	42ab      	cmp	r3, r5
 800b47a:	dc26      	bgt.n	800b4ca <_printf_common+0x96>
 800b47c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b480:	1e13      	subs	r3, r2, #0
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	bf18      	it	ne
 800b486:	2301      	movne	r3, #1
 800b488:	0692      	lsls	r2, r2, #26
 800b48a:	d42b      	bmi.n	800b4e4 <_printf_common+0xb0>
 800b48c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b490:	4649      	mov	r1, r9
 800b492:	4638      	mov	r0, r7
 800b494:	47c0      	blx	r8
 800b496:	3001      	adds	r0, #1
 800b498:	d01e      	beq.n	800b4d8 <_printf_common+0xa4>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	68e5      	ldr	r5, [r4, #12]
 800b49e:	6832      	ldr	r2, [r6, #0]
 800b4a0:	f003 0306 	and.w	r3, r3, #6
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	bf08      	it	eq
 800b4a8:	1aad      	subeq	r5, r5, r2
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	6922      	ldr	r2, [r4, #16]
 800b4ae:	bf0c      	ite	eq
 800b4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4b4:	2500      	movne	r5, #0
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	bfc4      	itt	gt
 800b4ba:	1a9b      	subgt	r3, r3, r2
 800b4bc:	18ed      	addgt	r5, r5, r3
 800b4be:	2600      	movs	r6, #0
 800b4c0:	341a      	adds	r4, #26
 800b4c2:	42b5      	cmp	r5, r6
 800b4c4:	d11a      	bne.n	800b4fc <_printf_common+0xc8>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	e008      	b.n	800b4dc <_printf_common+0xa8>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	4652      	mov	r2, sl
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	47c0      	blx	r8
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d103      	bne.n	800b4e0 <_printf_common+0xac>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e0:	3501      	adds	r5, #1
 800b4e2:	e7c6      	b.n	800b472 <_printf_common+0x3e>
 800b4e4:	18e1      	adds	r1, r4, r3
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	2030      	movs	r0, #48	; 0x30
 800b4ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ee:	4422      	add	r2, r4
 800b4f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	e7c7      	b.n	800b48c <_printf_common+0x58>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	4622      	mov	r2, r4
 800b500:	4649      	mov	r1, r9
 800b502:	4638      	mov	r0, r7
 800b504:	47c0      	blx	r8
 800b506:	3001      	adds	r0, #1
 800b508:	d0e6      	beq.n	800b4d8 <_printf_common+0xa4>
 800b50a:	3601      	adds	r6, #1
 800b50c:	e7d9      	b.n	800b4c2 <_printf_common+0x8e>
	...

0800b510 <_printf_i>:
 800b510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b514:	460c      	mov	r4, r1
 800b516:	4691      	mov	r9, r2
 800b518:	7e27      	ldrb	r7, [r4, #24]
 800b51a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b51c:	2f78      	cmp	r7, #120	; 0x78
 800b51e:	4680      	mov	r8, r0
 800b520:	469a      	mov	sl, r3
 800b522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b526:	d807      	bhi.n	800b538 <_printf_i+0x28>
 800b528:	2f62      	cmp	r7, #98	; 0x62
 800b52a:	d80a      	bhi.n	800b542 <_printf_i+0x32>
 800b52c:	2f00      	cmp	r7, #0
 800b52e:	f000 80d8 	beq.w	800b6e2 <_printf_i+0x1d2>
 800b532:	2f58      	cmp	r7, #88	; 0x58
 800b534:	f000 80a3 	beq.w	800b67e <_printf_i+0x16e>
 800b538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b53c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b540:	e03a      	b.n	800b5b8 <_printf_i+0xa8>
 800b542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b546:	2b15      	cmp	r3, #21
 800b548:	d8f6      	bhi.n	800b538 <_printf_i+0x28>
 800b54a:	a001      	add	r0, pc, #4	; (adr r0, 800b550 <_printf_i+0x40>)
 800b54c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b550:	0800b5a9 	.word	0x0800b5a9
 800b554:	0800b5bd 	.word	0x0800b5bd
 800b558:	0800b539 	.word	0x0800b539
 800b55c:	0800b539 	.word	0x0800b539
 800b560:	0800b539 	.word	0x0800b539
 800b564:	0800b539 	.word	0x0800b539
 800b568:	0800b5bd 	.word	0x0800b5bd
 800b56c:	0800b539 	.word	0x0800b539
 800b570:	0800b539 	.word	0x0800b539
 800b574:	0800b539 	.word	0x0800b539
 800b578:	0800b539 	.word	0x0800b539
 800b57c:	0800b6c9 	.word	0x0800b6c9
 800b580:	0800b5ed 	.word	0x0800b5ed
 800b584:	0800b6ab 	.word	0x0800b6ab
 800b588:	0800b539 	.word	0x0800b539
 800b58c:	0800b539 	.word	0x0800b539
 800b590:	0800b6eb 	.word	0x0800b6eb
 800b594:	0800b539 	.word	0x0800b539
 800b598:	0800b5ed 	.word	0x0800b5ed
 800b59c:	0800b539 	.word	0x0800b539
 800b5a0:	0800b539 	.word	0x0800b539
 800b5a4:	0800b6b3 	.word	0x0800b6b3
 800b5a8:	680b      	ldr	r3, [r1, #0]
 800b5aa:	1d1a      	adds	r2, r3, #4
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	600a      	str	r2, [r1, #0]
 800b5b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e0a3      	b.n	800b704 <_printf_i+0x1f4>
 800b5bc:	6825      	ldr	r5, [r4, #0]
 800b5be:	6808      	ldr	r0, [r1, #0]
 800b5c0:	062e      	lsls	r6, r5, #24
 800b5c2:	f100 0304 	add.w	r3, r0, #4
 800b5c6:	d50a      	bpl.n	800b5de <_printf_i+0xce>
 800b5c8:	6805      	ldr	r5, [r0, #0]
 800b5ca:	600b      	str	r3, [r1, #0]
 800b5cc:	2d00      	cmp	r5, #0
 800b5ce:	da03      	bge.n	800b5d8 <_printf_i+0xc8>
 800b5d0:	232d      	movs	r3, #45	; 0x2d
 800b5d2:	426d      	negs	r5, r5
 800b5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d8:	485e      	ldr	r0, [pc, #376]	; (800b754 <_printf_i+0x244>)
 800b5da:	230a      	movs	r3, #10
 800b5dc:	e019      	b.n	800b612 <_printf_i+0x102>
 800b5de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5e2:	6805      	ldr	r5, [r0, #0]
 800b5e4:	600b      	str	r3, [r1, #0]
 800b5e6:	bf18      	it	ne
 800b5e8:	b22d      	sxthne	r5, r5
 800b5ea:	e7ef      	b.n	800b5cc <_printf_i+0xbc>
 800b5ec:	680b      	ldr	r3, [r1, #0]
 800b5ee:	6825      	ldr	r5, [r4, #0]
 800b5f0:	1d18      	adds	r0, r3, #4
 800b5f2:	6008      	str	r0, [r1, #0]
 800b5f4:	0628      	lsls	r0, r5, #24
 800b5f6:	d501      	bpl.n	800b5fc <_printf_i+0xec>
 800b5f8:	681d      	ldr	r5, [r3, #0]
 800b5fa:	e002      	b.n	800b602 <_printf_i+0xf2>
 800b5fc:	0669      	lsls	r1, r5, #25
 800b5fe:	d5fb      	bpl.n	800b5f8 <_printf_i+0xe8>
 800b600:	881d      	ldrh	r5, [r3, #0]
 800b602:	4854      	ldr	r0, [pc, #336]	; (800b754 <_printf_i+0x244>)
 800b604:	2f6f      	cmp	r7, #111	; 0x6f
 800b606:	bf0c      	ite	eq
 800b608:	2308      	moveq	r3, #8
 800b60a:	230a      	movne	r3, #10
 800b60c:	2100      	movs	r1, #0
 800b60e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b612:	6866      	ldr	r6, [r4, #4]
 800b614:	60a6      	str	r6, [r4, #8]
 800b616:	2e00      	cmp	r6, #0
 800b618:	bfa2      	ittt	ge
 800b61a:	6821      	ldrge	r1, [r4, #0]
 800b61c:	f021 0104 	bicge.w	r1, r1, #4
 800b620:	6021      	strge	r1, [r4, #0]
 800b622:	b90d      	cbnz	r5, 800b628 <_printf_i+0x118>
 800b624:	2e00      	cmp	r6, #0
 800b626:	d04d      	beq.n	800b6c4 <_printf_i+0x1b4>
 800b628:	4616      	mov	r6, r2
 800b62a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b62e:	fb03 5711 	mls	r7, r3, r1, r5
 800b632:	5dc7      	ldrb	r7, [r0, r7]
 800b634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b638:	462f      	mov	r7, r5
 800b63a:	42bb      	cmp	r3, r7
 800b63c:	460d      	mov	r5, r1
 800b63e:	d9f4      	bls.n	800b62a <_printf_i+0x11a>
 800b640:	2b08      	cmp	r3, #8
 800b642:	d10b      	bne.n	800b65c <_printf_i+0x14c>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	07df      	lsls	r7, r3, #31
 800b648:	d508      	bpl.n	800b65c <_printf_i+0x14c>
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	6861      	ldr	r1, [r4, #4]
 800b64e:	4299      	cmp	r1, r3
 800b650:	bfde      	ittt	le
 800b652:	2330      	movle	r3, #48	; 0x30
 800b654:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b65c:	1b92      	subs	r2, r2, r6
 800b65e:	6122      	str	r2, [r4, #16]
 800b660:	f8cd a000 	str.w	sl, [sp]
 800b664:	464b      	mov	r3, r9
 800b666:	aa03      	add	r2, sp, #12
 800b668:	4621      	mov	r1, r4
 800b66a:	4640      	mov	r0, r8
 800b66c:	f7ff fee2 	bl	800b434 <_printf_common>
 800b670:	3001      	adds	r0, #1
 800b672:	d14c      	bne.n	800b70e <_printf_i+0x1fe>
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	b004      	add	sp, #16
 800b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67e:	4835      	ldr	r0, [pc, #212]	; (800b754 <_printf_i+0x244>)
 800b680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	680e      	ldr	r6, [r1, #0]
 800b688:	061f      	lsls	r7, r3, #24
 800b68a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b68e:	600e      	str	r6, [r1, #0]
 800b690:	d514      	bpl.n	800b6bc <_printf_i+0x1ac>
 800b692:	07d9      	lsls	r1, r3, #31
 800b694:	bf44      	itt	mi
 800b696:	f043 0320 	orrmi.w	r3, r3, #32
 800b69a:	6023      	strmi	r3, [r4, #0]
 800b69c:	b91d      	cbnz	r5, 800b6a6 <_printf_i+0x196>
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	f023 0320 	bic.w	r3, r3, #32
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	2310      	movs	r3, #16
 800b6a8:	e7b0      	b.n	800b60c <_printf_i+0xfc>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	f043 0320 	orr.w	r3, r3, #32
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	2378      	movs	r3, #120	; 0x78
 800b6b4:	4828      	ldr	r0, [pc, #160]	; (800b758 <_printf_i+0x248>)
 800b6b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6ba:	e7e3      	b.n	800b684 <_printf_i+0x174>
 800b6bc:	065e      	lsls	r6, r3, #25
 800b6be:	bf48      	it	mi
 800b6c0:	b2ad      	uxthmi	r5, r5
 800b6c2:	e7e6      	b.n	800b692 <_printf_i+0x182>
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	e7bb      	b.n	800b640 <_printf_i+0x130>
 800b6c8:	680b      	ldr	r3, [r1, #0]
 800b6ca:	6826      	ldr	r6, [r4, #0]
 800b6cc:	6960      	ldr	r0, [r4, #20]
 800b6ce:	1d1d      	adds	r5, r3, #4
 800b6d0:	600d      	str	r5, [r1, #0]
 800b6d2:	0635      	lsls	r5, r6, #24
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	d501      	bpl.n	800b6dc <_printf_i+0x1cc>
 800b6d8:	6018      	str	r0, [r3, #0]
 800b6da:	e002      	b.n	800b6e2 <_printf_i+0x1d2>
 800b6dc:	0671      	lsls	r1, r6, #25
 800b6de:	d5fb      	bpl.n	800b6d8 <_printf_i+0x1c8>
 800b6e0:	8018      	strh	r0, [r3, #0]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	4616      	mov	r6, r2
 800b6e8:	e7ba      	b.n	800b660 <_printf_i+0x150>
 800b6ea:	680b      	ldr	r3, [r1, #0]
 800b6ec:	1d1a      	adds	r2, r3, #4
 800b6ee:	600a      	str	r2, [r1, #0]
 800b6f0:	681e      	ldr	r6, [r3, #0]
 800b6f2:	6862      	ldr	r2, [r4, #4]
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f7f4 fdf2 	bl	80002e0 <memchr>
 800b6fc:	b108      	cbz	r0, 800b702 <_printf_i+0x1f2>
 800b6fe:	1b80      	subs	r0, r0, r6
 800b700:	6060      	str	r0, [r4, #4]
 800b702:	6863      	ldr	r3, [r4, #4]
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	2300      	movs	r3, #0
 800b708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b70c:	e7a8      	b.n	800b660 <_printf_i+0x150>
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	4632      	mov	r2, r6
 800b712:	4649      	mov	r1, r9
 800b714:	4640      	mov	r0, r8
 800b716:	47d0      	blx	sl
 800b718:	3001      	adds	r0, #1
 800b71a:	d0ab      	beq.n	800b674 <_printf_i+0x164>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	079b      	lsls	r3, r3, #30
 800b720:	d413      	bmi.n	800b74a <_printf_i+0x23a>
 800b722:	68e0      	ldr	r0, [r4, #12]
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	4298      	cmp	r0, r3
 800b728:	bfb8      	it	lt
 800b72a:	4618      	movlt	r0, r3
 800b72c:	e7a4      	b.n	800b678 <_printf_i+0x168>
 800b72e:	2301      	movs	r3, #1
 800b730:	4632      	mov	r2, r6
 800b732:	4649      	mov	r1, r9
 800b734:	4640      	mov	r0, r8
 800b736:	47d0      	blx	sl
 800b738:	3001      	adds	r0, #1
 800b73a:	d09b      	beq.n	800b674 <_printf_i+0x164>
 800b73c:	3501      	adds	r5, #1
 800b73e:	68e3      	ldr	r3, [r4, #12]
 800b740:	9903      	ldr	r1, [sp, #12]
 800b742:	1a5b      	subs	r3, r3, r1
 800b744:	42ab      	cmp	r3, r5
 800b746:	dcf2      	bgt.n	800b72e <_printf_i+0x21e>
 800b748:	e7eb      	b.n	800b722 <_printf_i+0x212>
 800b74a:	2500      	movs	r5, #0
 800b74c:	f104 0619 	add.w	r6, r4, #25
 800b750:	e7f5      	b.n	800b73e <_printf_i+0x22e>
 800b752:	bf00      	nop
 800b754:	0800be39 	.word	0x0800be39
 800b758:	0800be4a 	.word	0x0800be4a

0800b75c <_sbrk_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d06      	ldr	r5, [pc, #24]	; (800b778 <_sbrk_r+0x1c>)
 800b760:	2300      	movs	r3, #0
 800b762:	4604      	mov	r4, r0
 800b764:	4608      	mov	r0, r1
 800b766:	602b      	str	r3, [r5, #0]
 800b768:	f7f6 fe0e 	bl	8002388 <_sbrk>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_sbrk_r+0x1a>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_sbrk_r+0x1a>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	20000950 	.word	0x20000950

0800b77c <__sread>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	460c      	mov	r4, r1
 800b780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b784:	f000 fab4 	bl	800bcf0 <_read_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	bfab      	itete	ge
 800b78c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b78e:	89a3      	ldrhlt	r3, [r4, #12]
 800b790:	181b      	addge	r3, r3, r0
 800b792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b796:	bfac      	ite	ge
 800b798:	6563      	strge	r3, [r4, #84]	; 0x54
 800b79a:	81a3      	strhlt	r3, [r4, #12]
 800b79c:	bd10      	pop	{r4, pc}

0800b79e <__swrite>:
 800b79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a2:	461f      	mov	r7, r3
 800b7a4:	898b      	ldrh	r3, [r1, #12]
 800b7a6:	05db      	lsls	r3, r3, #23
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	d505      	bpl.n	800b7bc <__swrite+0x1e>
 800b7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f000 f9c8 	bl	800bb4c <_lseek_r>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	463b      	mov	r3, r7
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d2:	f000 b869 	b.w	800b8a8 <_write_r>

0800b7d6 <__sseek>:
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7de:	f000 f9b5 	bl	800bb4c <_lseek_r>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	bf15      	itete	ne
 800b7e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7f2:	81a3      	strheq	r3, [r4, #12]
 800b7f4:	bf18      	it	ne
 800b7f6:	81a3      	strhne	r3, [r4, #12]
 800b7f8:	bd10      	pop	{r4, pc}

0800b7fa <__sclose>:
 800b7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fe:	f000 b8d3 	b.w	800b9a8 <_close_r>
	...

0800b804 <__swbuf_r>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	460e      	mov	r6, r1
 800b808:	4614      	mov	r4, r2
 800b80a:	4605      	mov	r5, r0
 800b80c:	b118      	cbz	r0, 800b816 <__swbuf_r+0x12>
 800b80e:	6983      	ldr	r3, [r0, #24]
 800b810:	b90b      	cbnz	r3, 800b816 <__swbuf_r+0x12>
 800b812:	f7ff fbbb 	bl	800af8c <__sinit>
 800b816:	4b21      	ldr	r3, [pc, #132]	; (800b89c <__swbuf_r+0x98>)
 800b818:	429c      	cmp	r4, r3
 800b81a:	d12b      	bne.n	800b874 <__swbuf_r+0x70>
 800b81c:	686c      	ldr	r4, [r5, #4]
 800b81e:	69a3      	ldr	r3, [r4, #24]
 800b820:	60a3      	str	r3, [r4, #8]
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	071a      	lsls	r2, r3, #28
 800b826:	d52f      	bpl.n	800b888 <__swbuf_r+0x84>
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	b36b      	cbz	r3, 800b888 <__swbuf_r+0x84>
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	6820      	ldr	r0, [r4, #0]
 800b830:	1ac0      	subs	r0, r0, r3
 800b832:	6963      	ldr	r3, [r4, #20]
 800b834:	b2f6      	uxtb	r6, r6
 800b836:	4283      	cmp	r3, r0
 800b838:	4637      	mov	r7, r6
 800b83a:	dc04      	bgt.n	800b846 <__swbuf_r+0x42>
 800b83c:	4621      	mov	r1, r4
 800b83e:	4628      	mov	r0, r5
 800b840:	f000 f948 	bl	800bad4 <_fflush_r>
 800b844:	bb30      	cbnz	r0, 800b894 <__swbuf_r+0x90>
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	3b01      	subs	r3, #1
 800b84a:	60a3      	str	r3, [r4, #8]
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	6022      	str	r2, [r4, #0]
 800b852:	701e      	strb	r6, [r3, #0]
 800b854:	6963      	ldr	r3, [r4, #20]
 800b856:	3001      	adds	r0, #1
 800b858:	4283      	cmp	r3, r0
 800b85a:	d004      	beq.n	800b866 <__swbuf_r+0x62>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	07db      	lsls	r3, r3, #31
 800b860:	d506      	bpl.n	800b870 <__swbuf_r+0x6c>
 800b862:	2e0a      	cmp	r6, #10
 800b864:	d104      	bne.n	800b870 <__swbuf_r+0x6c>
 800b866:	4621      	mov	r1, r4
 800b868:	4628      	mov	r0, r5
 800b86a:	f000 f933 	bl	800bad4 <_fflush_r>
 800b86e:	b988      	cbnz	r0, 800b894 <__swbuf_r+0x90>
 800b870:	4638      	mov	r0, r7
 800b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b874:	4b0a      	ldr	r3, [pc, #40]	; (800b8a0 <__swbuf_r+0x9c>)
 800b876:	429c      	cmp	r4, r3
 800b878:	d101      	bne.n	800b87e <__swbuf_r+0x7a>
 800b87a:	68ac      	ldr	r4, [r5, #8]
 800b87c:	e7cf      	b.n	800b81e <__swbuf_r+0x1a>
 800b87e:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <__swbuf_r+0xa0>)
 800b880:	429c      	cmp	r4, r3
 800b882:	bf08      	it	eq
 800b884:	68ec      	ldreq	r4, [r5, #12]
 800b886:	e7ca      	b.n	800b81e <__swbuf_r+0x1a>
 800b888:	4621      	mov	r1, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f81e 	bl	800b8cc <__swsetup_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	d0cb      	beq.n	800b82c <__swbuf_r+0x28>
 800b894:	f04f 37ff 	mov.w	r7, #4294967295
 800b898:	e7ea      	b.n	800b870 <__swbuf_r+0x6c>
 800b89a:	bf00      	nop
 800b89c:	0800bde8 	.word	0x0800bde8
 800b8a0:	0800be08 	.word	0x0800be08
 800b8a4:	0800bdc8 	.word	0x0800bdc8

0800b8a8 <_write_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	; (800b8c8 <_write_r+0x20>)
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	602a      	str	r2, [r5, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f7f6 fd15 	bl	80022e6 <_write>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_write_r+0x1e>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_write_r+0x1e>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	20000950 	.word	0x20000950

0800b8cc <__swsetup_r>:
 800b8cc:	4b32      	ldr	r3, [pc, #200]	; (800b998 <__swsetup_r+0xcc>)
 800b8ce:	b570      	push	{r4, r5, r6, lr}
 800b8d0:	681d      	ldr	r5, [r3, #0]
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	b125      	cbz	r5, 800b8e2 <__swsetup_r+0x16>
 800b8d8:	69ab      	ldr	r3, [r5, #24]
 800b8da:	b913      	cbnz	r3, 800b8e2 <__swsetup_r+0x16>
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f7ff fb55 	bl	800af8c <__sinit>
 800b8e2:	4b2e      	ldr	r3, [pc, #184]	; (800b99c <__swsetup_r+0xd0>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	d10f      	bne.n	800b908 <__swsetup_r+0x3c>
 800b8e8:	686c      	ldr	r4, [r5, #4]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8f0:	0719      	lsls	r1, r3, #28
 800b8f2:	d42c      	bmi.n	800b94e <__swsetup_r+0x82>
 800b8f4:	06dd      	lsls	r5, r3, #27
 800b8f6:	d411      	bmi.n	800b91c <__swsetup_r+0x50>
 800b8f8:	2309      	movs	r3, #9
 800b8fa:	6033      	str	r3, [r6, #0]
 800b8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	f04f 30ff 	mov.w	r0, #4294967295
 800b906:	e03e      	b.n	800b986 <__swsetup_r+0xba>
 800b908:	4b25      	ldr	r3, [pc, #148]	; (800b9a0 <__swsetup_r+0xd4>)
 800b90a:	429c      	cmp	r4, r3
 800b90c:	d101      	bne.n	800b912 <__swsetup_r+0x46>
 800b90e:	68ac      	ldr	r4, [r5, #8]
 800b910:	e7eb      	b.n	800b8ea <__swsetup_r+0x1e>
 800b912:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <__swsetup_r+0xd8>)
 800b914:	429c      	cmp	r4, r3
 800b916:	bf08      	it	eq
 800b918:	68ec      	ldreq	r4, [r5, #12]
 800b91a:	e7e6      	b.n	800b8ea <__swsetup_r+0x1e>
 800b91c:	0758      	lsls	r0, r3, #29
 800b91e:	d512      	bpl.n	800b946 <__swsetup_r+0x7a>
 800b920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b922:	b141      	cbz	r1, 800b936 <__swsetup_r+0x6a>
 800b924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b928:	4299      	cmp	r1, r3
 800b92a:	d002      	beq.n	800b932 <__swsetup_r+0x66>
 800b92c:	4630      	mov	r0, r6
 800b92e:	f000 f98f 	bl	800bc50 <_free_r>
 800b932:	2300      	movs	r3, #0
 800b934:	6363      	str	r3, [r4, #52]	; 0x34
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	2300      	movs	r3, #0
 800b940:	6063      	str	r3, [r4, #4]
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f043 0308 	orr.w	r3, r3, #8
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	b94b      	cbnz	r3, 800b966 <__swsetup_r+0x9a>
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95c:	d003      	beq.n	800b966 <__swsetup_r+0x9a>
 800b95e:	4621      	mov	r1, r4
 800b960:	4630      	mov	r0, r6
 800b962:	f000 f929 	bl	800bbb8 <__smakebuf_r>
 800b966:	89a0      	ldrh	r0, [r4, #12]
 800b968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b96c:	f010 0301 	ands.w	r3, r0, #1
 800b970:	d00a      	beq.n	800b988 <__swsetup_r+0xbc>
 800b972:	2300      	movs	r3, #0
 800b974:	60a3      	str	r3, [r4, #8]
 800b976:	6963      	ldr	r3, [r4, #20]
 800b978:	425b      	negs	r3, r3
 800b97a:	61a3      	str	r3, [r4, #24]
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	b943      	cbnz	r3, 800b992 <__swsetup_r+0xc6>
 800b980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b984:	d1ba      	bne.n	800b8fc <__swsetup_r+0x30>
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	0781      	lsls	r1, r0, #30
 800b98a:	bf58      	it	pl
 800b98c:	6963      	ldrpl	r3, [r4, #20]
 800b98e:	60a3      	str	r3, [r4, #8]
 800b990:	e7f4      	b.n	800b97c <__swsetup_r+0xb0>
 800b992:	2000      	movs	r0, #0
 800b994:	e7f7      	b.n	800b986 <__swsetup_r+0xba>
 800b996:	bf00      	nop
 800b998:	20000010 	.word	0x20000010
 800b99c:	0800bde8 	.word	0x0800bde8
 800b9a0:	0800be08 	.word	0x0800be08
 800b9a4:	0800bdc8 	.word	0x0800bdc8

0800b9a8 <_close_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d06      	ldr	r5, [pc, #24]	; (800b9c4 <_close_r+0x1c>)
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	602b      	str	r3, [r5, #0]
 800b9b4:	f7f6 fcb3 	bl	800231e <_close>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d102      	bne.n	800b9c2 <_close_r+0x1a>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	b103      	cbz	r3, 800b9c2 <_close_r+0x1a>
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	20000950 	.word	0x20000950

0800b9c8 <__sflush_r>:
 800b9c8:	898a      	ldrh	r2, [r1, #12]
 800b9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	0710      	lsls	r0, r2, #28
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	d458      	bmi.n	800ba88 <__sflush_r+0xc0>
 800b9d6:	684b      	ldr	r3, [r1, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	dc05      	bgt.n	800b9e8 <__sflush_r+0x20>
 800b9dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	dc02      	bgt.n	800b9e8 <__sflush_r+0x20>
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ea:	2e00      	cmp	r6, #0
 800b9ec:	d0f9      	beq.n	800b9e2 <__sflush_r+0x1a>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9f4:	682f      	ldr	r7, [r5, #0]
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	d032      	beq.n	800ba60 <__sflush_r+0x98>
 800b9fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	075a      	lsls	r2, r3, #29
 800ba00:	d505      	bpl.n	800ba0e <__sflush_r+0x46>
 800ba02:	6863      	ldr	r3, [r4, #4]
 800ba04:	1ac0      	subs	r0, r0, r3
 800ba06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba08:	b10b      	cbz	r3, 800ba0e <__sflush_r+0x46>
 800ba0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba0c:	1ac0      	subs	r0, r0, r3
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4602      	mov	r2, r0
 800ba12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba14:	6a21      	ldr	r1, [r4, #32]
 800ba16:	4628      	mov	r0, r5
 800ba18:	47b0      	blx	r6
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	d106      	bne.n	800ba2e <__sflush_r+0x66>
 800ba20:	6829      	ldr	r1, [r5, #0]
 800ba22:	291d      	cmp	r1, #29
 800ba24:	d82c      	bhi.n	800ba80 <__sflush_r+0xb8>
 800ba26:	4a2a      	ldr	r2, [pc, #168]	; (800bad0 <__sflush_r+0x108>)
 800ba28:	40ca      	lsrs	r2, r1
 800ba2a:	07d6      	lsls	r6, r2, #31
 800ba2c:	d528      	bpl.n	800ba80 <__sflush_r+0xb8>
 800ba2e:	2200      	movs	r2, #0
 800ba30:	6062      	str	r2, [r4, #4]
 800ba32:	04d9      	lsls	r1, r3, #19
 800ba34:	6922      	ldr	r2, [r4, #16]
 800ba36:	6022      	str	r2, [r4, #0]
 800ba38:	d504      	bpl.n	800ba44 <__sflush_r+0x7c>
 800ba3a:	1c42      	adds	r2, r0, #1
 800ba3c:	d101      	bne.n	800ba42 <__sflush_r+0x7a>
 800ba3e:	682b      	ldr	r3, [r5, #0]
 800ba40:	b903      	cbnz	r3, 800ba44 <__sflush_r+0x7c>
 800ba42:	6560      	str	r0, [r4, #84]	; 0x54
 800ba44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba46:	602f      	str	r7, [r5, #0]
 800ba48:	2900      	cmp	r1, #0
 800ba4a:	d0ca      	beq.n	800b9e2 <__sflush_r+0x1a>
 800ba4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba50:	4299      	cmp	r1, r3
 800ba52:	d002      	beq.n	800ba5a <__sflush_r+0x92>
 800ba54:	4628      	mov	r0, r5
 800ba56:	f000 f8fb 	bl	800bc50 <_free_r>
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba5e:	e7c1      	b.n	800b9e4 <__sflush_r+0x1c>
 800ba60:	6a21      	ldr	r1, [r4, #32]
 800ba62:	2301      	movs	r3, #1
 800ba64:	4628      	mov	r0, r5
 800ba66:	47b0      	blx	r6
 800ba68:	1c41      	adds	r1, r0, #1
 800ba6a:	d1c7      	bne.n	800b9fc <__sflush_r+0x34>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0c4      	beq.n	800b9fc <__sflush_r+0x34>
 800ba72:	2b1d      	cmp	r3, #29
 800ba74:	d001      	beq.n	800ba7a <__sflush_r+0xb2>
 800ba76:	2b16      	cmp	r3, #22
 800ba78:	d101      	bne.n	800ba7e <__sflush_r+0xb6>
 800ba7a:	602f      	str	r7, [r5, #0]
 800ba7c:	e7b1      	b.n	800b9e2 <__sflush_r+0x1a>
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	e7ad      	b.n	800b9e4 <__sflush_r+0x1c>
 800ba88:	690f      	ldr	r7, [r1, #16]
 800ba8a:	2f00      	cmp	r7, #0
 800ba8c:	d0a9      	beq.n	800b9e2 <__sflush_r+0x1a>
 800ba8e:	0793      	lsls	r3, r2, #30
 800ba90:	680e      	ldr	r6, [r1, #0]
 800ba92:	bf08      	it	eq
 800ba94:	694b      	ldreq	r3, [r1, #20]
 800ba96:	600f      	str	r7, [r1, #0]
 800ba98:	bf18      	it	ne
 800ba9a:	2300      	movne	r3, #0
 800ba9c:	eba6 0807 	sub.w	r8, r6, r7
 800baa0:	608b      	str	r3, [r1, #8]
 800baa2:	f1b8 0f00 	cmp.w	r8, #0
 800baa6:	dd9c      	ble.n	800b9e2 <__sflush_r+0x1a>
 800baa8:	6a21      	ldr	r1, [r4, #32]
 800baaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baac:	4643      	mov	r3, r8
 800baae:	463a      	mov	r2, r7
 800bab0:	4628      	mov	r0, r5
 800bab2:	47b0      	blx	r6
 800bab4:	2800      	cmp	r0, #0
 800bab6:	dc06      	bgt.n	800bac6 <__sflush_r+0xfe>
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	e78e      	b.n	800b9e4 <__sflush_r+0x1c>
 800bac6:	4407      	add	r7, r0
 800bac8:	eba8 0800 	sub.w	r8, r8, r0
 800bacc:	e7e9      	b.n	800baa2 <__sflush_r+0xda>
 800bace:	bf00      	nop
 800bad0:	20400001 	.word	0x20400001

0800bad4 <_fflush_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	690b      	ldr	r3, [r1, #16]
 800bad8:	4605      	mov	r5, r0
 800bada:	460c      	mov	r4, r1
 800badc:	b913      	cbnz	r3, 800bae4 <_fflush_r+0x10>
 800bade:	2500      	movs	r5, #0
 800bae0:	4628      	mov	r0, r5
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	b118      	cbz	r0, 800baee <_fflush_r+0x1a>
 800bae6:	6983      	ldr	r3, [r0, #24]
 800bae8:	b90b      	cbnz	r3, 800baee <_fflush_r+0x1a>
 800baea:	f7ff fa4f 	bl	800af8c <__sinit>
 800baee:	4b14      	ldr	r3, [pc, #80]	; (800bb40 <_fflush_r+0x6c>)
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d11b      	bne.n	800bb2c <_fflush_r+0x58>
 800baf4:	686c      	ldr	r4, [r5, #4]
 800baf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0ef      	beq.n	800bade <_fflush_r+0xa>
 800bafe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb00:	07d0      	lsls	r0, r2, #31
 800bb02:	d404      	bmi.n	800bb0e <_fflush_r+0x3a>
 800bb04:	0599      	lsls	r1, r3, #22
 800bb06:	d402      	bmi.n	800bb0e <_fflush_r+0x3a>
 800bb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb0a:	f7ff fadd 	bl	800b0c8 <__retarget_lock_acquire_recursive>
 800bb0e:	4628      	mov	r0, r5
 800bb10:	4621      	mov	r1, r4
 800bb12:	f7ff ff59 	bl	800b9c8 <__sflush_r>
 800bb16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb18:	07da      	lsls	r2, r3, #31
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	d4e0      	bmi.n	800bae0 <_fflush_r+0xc>
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	059b      	lsls	r3, r3, #22
 800bb22:	d4dd      	bmi.n	800bae0 <_fflush_r+0xc>
 800bb24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb26:	f7ff fad0 	bl	800b0ca <__retarget_lock_release_recursive>
 800bb2a:	e7d9      	b.n	800bae0 <_fflush_r+0xc>
 800bb2c:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <_fflush_r+0x70>)
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d101      	bne.n	800bb36 <_fflush_r+0x62>
 800bb32:	68ac      	ldr	r4, [r5, #8]
 800bb34:	e7df      	b.n	800baf6 <_fflush_r+0x22>
 800bb36:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <_fflush_r+0x74>)
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	bf08      	it	eq
 800bb3c:	68ec      	ldreq	r4, [r5, #12]
 800bb3e:	e7da      	b.n	800baf6 <_fflush_r+0x22>
 800bb40:	0800bde8 	.word	0x0800bde8
 800bb44:	0800be08 	.word	0x0800be08
 800bb48:	0800bdc8 	.word	0x0800bdc8

0800bb4c <_lseek_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d07      	ldr	r5, [pc, #28]	; (800bb6c <_lseek_r+0x20>)
 800bb50:	4604      	mov	r4, r0
 800bb52:	4608      	mov	r0, r1
 800bb54:	4611      	mov	r1, r2
 800bb56:	2200      	movs	r2, #0
 800bb58:	602a      	str	r2, [r5, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f7f6 fc06 	bl	800236c <_lseek>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_lseek_r+0x1e>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_lseek_r+0x1e>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	20000950 	.word	0x20000950

0800bb70 <__swhatbuf_r>:
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	460e      	mov	r6, r1
 800bb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	b096      	sub	sp, #88	; 0x58
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	461d      	mov	r5, r3
 800bb80:	da07      	bge.n	800bb92 <__swhatbuf_r+0x22>
 800bb82:	2300      	movs	r3, #0
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	89b3      	ldrh	r3, [r6, #12]
 800bb88:	061a      	lsls	r2, r3, #24
 800bb8a:	d410      	bmi.n	800bbae <__swhatbuf_r+0x3e>
 800bb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb90:	e00e      	b.n	800bbb0 <__swhatbuf_r+0x40>
 800bb92:	466a      	mov	r2, sp
 800bb94:	f000 f8be 	bl	800bd14 <_fstat_r>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	dbf2      	blt.n	800bb82 <__swhatbuf_r+0x12>
 800bb9c:	9a01      	ldr	r2, [sp, #4]
 800bb9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bba6:	425a      	negs	r2, r3
 800bba8:	415a      	adcs	r2, r3
 800bbaa:	602a      	str	r2, [r5, #0]
 800bbac:	e7ee      	b.n	800bb8c <__swhatbuf_r+0x1c>
 800bbae:	2340      	movs	r3, #64	; 0x40
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	b016      	add	sp, #88	; 0x58
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}

0800bbb8 <__smakebuf_r>:
 800bbb8:	898b      	ldrh	r3, [r1, #12]
 800bbba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbbc:	079d      	lsls	r5, r3, #30
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	d507      	bpl.n	800bbd4 <__smakebuf_r+0x1c>
 800bbc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	6123      	str	r3, [r4, #16]
 800bbcc:	2301      	movs	r3, #1
 800bbce:	6163      	str	r3, [r4, #20]
 800bbd0:	b002      	add	sp, #8
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}
 800bbd4:	ab01      	add	r3, sp, #4
 800bbd6:	466a      	mov	r2, sp
 800bbd8:	f7ff ffca 	bl	800bb70 <__swhatbuf_r>
 800bbdc:	9900      	ldr	r1, [sp, #0]
 800bbde:	4605      	mov	r5, r0
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7ff fa73 	bl	800b0cc <_malloc_r>
 800bbe6:	b948      	cbnz	r0, 800bbfc <__smakebuf_r+0x44>
 800bbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbec:	059a      	lsls	r2, r3, #22
 800bbee:	d4ef      	bmi.n	800bbd0 <__smakebuf_r+0x18>
 800bbf0:	f023 0303 	bic.w	r3, r3, #3
 800bbf4:	f043 0302 	orr.w	r3, r3, #2
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	e7e3      	b.n	800bbc4 <__smakebuf_r+0xc>
 800bbfc:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <__smakebuf_r+0x7c>)
 800bbfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	6020      	str	r0, [r4, #0]
 800bc04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	9b00      	ldr	r3, [sp, #0]
 800bc0c:	6163      	str	r3, [r4, #20]
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	6120      	str	r0, [r4, #16]
 800bc12:	b15b      	cbz	r3, 800bc2c <__smakebuf_r+0x74>
 800bc14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f000 f88d 	bl	800bd38 <_isatty_r>
 800bc1e:	b128      	cbz	r0, 800bc2c <__smakebuf_r+0x74>
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f023 0303 	bic.w	r3, r3, #3
 800bc26:	f043 0301 	orr.w	r3, r3, #1
 800bc2a:	81a3      	strh	r3, [r4, #12]
 800bc2c:	89a0      	ldrh	r0, [r4, #12]
 800bc2e:	4305      	orrs	r5, r0
 800bc30:	81a5      	strh	r5, [r4, #12]
 800bc32:	e7cd      	b.n	800bbd0 <__smakebuf_r+0x18>
 800bc34:	0800af25 	.word	0x0800af25

0800bc38 <__malloc_lock>:
 800bc38:	4801      	ldr	r0, [pc, #4]	; (800bc40 <__malloc_lock+0x8>)
 800bc3a:	f7ff ba45 	b.w	800b0c8 <__retarget_lock_acquire_recursive>
 800bc3e:	bf00      	nop
 800bc40:	20000948 	.word	0x20000948

0800bc44 <__malloc_unlock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__malloc_unlock+0x8>)
 800bc46:	f7ff ba40 	b.w	800b0ca <__retarget_lock_release_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	20000948 	.word	0x20000948

0800bc50 <_free_r>:
 800bc50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc52:	2900      	cmp	r1, #0
 800bc54:	d048      	beq.n	800bce8 <_free_r+0x98>
 800bc56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5a:	9001      	str	r0, [sp, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc62:	bfb8      	it	lt
 800bc64:	18e4      	addlt	r4, r4, r3
 800bc66:	f7ff ffe7 	bl	800bc38 <__malloc_lock>
 800bc6a:	4a20      	ldr	r2, [pc, #128]	; (800bcec <_free_r+0x9c>)
 800bc6c:	9801      	ldr	r0, [sp, #4]
 800bc6e:	6813      	ldr	r3, [r2, #0]
 800bc70:	4615      	mov	r5, r2
 800bc72:	b933      	cbnz	r3, 800bc82 <_free_r+0x32>
 800bc74:	6063      	str	r3, [r4, #4]
 800bc76:	6014      	str	r4, [r2, #0]
 800bc78:	b003      	add	sp, #12
 800bc7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc7e:	f7ff bfe1 	b.w	800bc44 <__malloc_unlock>
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	d90b      	bls.n	800bc9e <_free_r+0x4e>
 800bc86:	6821      	ldr	r1, [r4, #0]
 800bc88:	1862      	adds	r2, r4, r1
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	bf04      	itt	eq
 800bc8e:	681a      	ldreq	r2, [r3, #0]
 800bc90:	685b      	ldreq	r3, [r3, #4]
 800bc92:	6063      	str	r3, [r4, #4]
 800bc94:	bf04      	itt	eq
 800bc96:	1852      	addeq	r2, r2, r1
 800bc98:	6022      	streq	r2, [r4, #0]
 800bc9a:	602c      	str	r4, [r5, #0]
 800bc9c:	e7ec      	b.n	800bc78 <_free_r+0x28>
 800bc9e:	461a      	mov	r2, r3
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	b10b      	cbz	r3, 800bca8 <_free_r+0x58>
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	d9fa      	bls.n	800bc9e <_free_r+0x4e>
 800bca8:	6811      	ldr	r1, [r2, #0]
 800bcaa:	1855      	adds	r5, r2, r1
 800bcac:	42a5      	cmp	r5, r4
 800bcae:	d10b      	bne.n	800bcc8 <_free_r+0x78>
 800bcb0:	6824      	ldr	r4, [r4, #0]
 800bcb2:	4421      	add	r1, r4
 800bcb4:	1854      	adds	r4, r2, r1
 800bcb6:	42a3      	cmp	r3, r4
 800bcb8:	6011      	str	r1, [r2, #0]
 800bcba:	d1dd      	bne.n	800bc78 <_free_r+0x28>
 800bcbc:	681c      	ldr	r4, [r3, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	6053      	str	r3, [r2, #4]
 800bcc2:	4421      	add	r1, r4
 800bcc4:	6011      	str	r1, [r2, #0]
 800bcc6:	e7d7      	b.n	800bc78 <_free_r+0x28>
 800bcc8:	d902      	bls.n	800bcd0 <_free_r+0x80>
 800bcca:	230c      	movs	r3, #12
 800bccc:	6003      	str	r3, [r0, #0]
 800bcce:	e7d3      	b.n	800bc78 <_free_r+0x28>
 800bcd0:	6825      	ldr	r5, [r4, #0]
 800bcd2:	1961      	adds	r1, r4, r5
 800bcd4:	428b      	cmp	r3, r1
 800bcd6:	bf04      	itt	eq
 800bcd8:	6819      	ldreq	r1, [r3, #0]
 800bcda:	685b      	ldreq	r3, [r3, #4]
 800bcdc:	6063      	str	r3, [r4, #4]
 800bcde:	bf04      	itt	eq
 800bce0:	1949      	addeq	r1, r1, r5
 800bce2:	6021      	streq	r1, [r4, #0]
 800bce4:	6054      	str	r4, [r2, #4]
 800bce6:	e7c7      	b.n	800bc78 <_free_r+0x28>
 800bce8:	b003      	add	sp, #12
 800bcea:	bd30      	pop	{r4, r5, pc}
 800bcec:	20000098 	.word	0x20000098

0800bcf0 <_read_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d07      	ldr	r5, [pc, #28]	; (800bd10 <_read_r+0x20>)
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	4608      	mov	r0, r1
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	602a      	str	r2, [r5, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f7f6 fad4 	bl	80022ac <_read>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_read_r+0x1e>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_read_r+0x1e>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20000950 	.word	0x20000950

0800bd14 <_fstat_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d07      	ldr	r5, [pc, #28]	; (800bd34 <_fstat_r+0x20>)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	4611      	mov	r1, r2
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	f7f6 fb08 	bl	8002336 <_fstat>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	d102      	bne.n	800bd30 <_fstat_r+0x1c>
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	b103      	cbz	r3, 800bd30 <_fstat_r+0x1c>
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	bd38      	pop	{r3, r4, r5, pc}
 800bd32:	bf00      	nop
 800bd34:	20000950 	.word	0x20000950

0800bd38 <_isatty_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d06      	ldr	r5, [pc, #24]	; (800bd54 <_isatty_r+0x1c>)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4604      	mov	r4, r0
 800bd40:	4608      	mov	r0, r1
 800bd42:	602b      	str	r3, [r5, #0]
 800bd44:	f7f6 fb07 	bl	8002356 <_isatty>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_isatty_r+0x1a>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_isatty_r+0x1a>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20000950 	.word	0x20000950

0800bd58 <_init>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	bf00      	nop
 800bd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd5e:	bc08      	pop	{r3}
 800bd60:	469e      	mov	lr, r3
 800bd62:	4770      	bx	lr

0800bd64 <_fini>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr
