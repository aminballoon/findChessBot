
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c298  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c614  0800c614  0001c614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c61c  0800c61c  0001c61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c620  0800c620  0001c620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800c624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000844  20000074  0800c698  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008b8  0800c698  000208b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021918  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003454  00000000  00000000  000419ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001388  00000000  00000000  00044e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001290  00000000  00000000  00046198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003c9f  00000000  00000000  00047428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018146  00000000  00000000  0004b0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166d9b  00000000  00000000  0006320d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c9fa8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b00  00000000  00000000  001c9ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c520 	.word	0x0800c520

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800c520 	.word	0x0800c520

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <DWT_Delay_us+0x40>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000686:	f005 ff25 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <DWT_Delay_us+0x44>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0c9b      	lsrs	r3, r3, #18
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800069c:	bf00      	nop
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <DWT_Delay_us+0x40>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f8      	bcc.n	800069e <DWT_Delay_us+0x26>
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e0001000 	.word	0xe0001000
 80006bc:	431bde83 	.word	0x431bde83

080006c0 <RS485_Encoder>:
				TIM15->CCR2 = 0;
			}
		}
}
uint16_t RS485_Encoder(uint8_t _address)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	uint8_t _buff[2];
	DWT_Delay_us(20);
 80006ca:	2014      	movs	r0, #20
 80006cc:	f7ff ffd4 	bl	8000678 <DWT_Delay_us>
	HAL_UART_Transmit_DMA(&huart4, &_address, 1);
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <RS485_Encoder+0x54>)
 80006d8:	f008 fe30 	bl	800933c <HAL_UART_Transmit_DMA>
	DWT_Delay_us(30);
 80006dc:	201e      	movs	r0, #30
 80006de:	f7ff ffcb 	bl	8000678 <DWT_Delay_us>
	HAL_UART_Receive_DMA(&huart4, _buff, 2);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2202      	movs	r2, #2
 80006e8:	4619      	mov	r1, r3
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <RS485_Encoder+0x54>)
 80006ec:	f008 fea6 	bl	800943c <HAL_UART_Receive_DMA>
	DWT_Delay_us(40);
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f7ff ffc1 	bl	8000678 <DWT_Delay_us>
	return _buff[0] + (((_buff[1] & 0xFC) >> 2) << 8);
 80006f6:	7b3b      	ldrb	r3, [r7, #12]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	7b7b      	ldrb	r3, [r7, #13]
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	b29b      	uxth	r3, r3
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b29b      	uxth	r3, r3
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000680 	.word	0x20000680

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 fd70 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f854 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 fe52 	bl	80013cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000728:	f000 fd00 	bl	800112c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800072c:	f000 fcb2 	bl	8001094 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000730:	f000 f9cc 	bl	8000acc <MX_TIM2_Init>
  MX_UART4_Init();
 8000734:	f000 fc5e 	bl	8000ff4 <MX_UART4_Init>
  MX_TIM4_Init();
 8000738:	f000 fab8 	bl	8000cac <MX_TIM4_Init>
  MX_SPI3_Init();
 800073c:	f000 f8c2 	bl	80008c4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000740:	f000 f916 	bl	8000970 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000744:	f000 fa3a 	bl	8000bbc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000748:	f000 fb28 	bl	8000d9c <MX_TIM5_Init>
  MX_TIM15_Init();
 800074c:	f000 fbae 	bl	8000eac <MX_TIM15_Init>
  MX_TIM12_Init();
 8000750:	f000 fb72 	bl	8000e38 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <main+0xa0>)
 800075a:	f004 ff0d 	bl	8005578 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2102      	movs	r1, #2
 8000762:	4816      	ldr	r0, [pc, #88]	; (80007bc <main+0xa4>)
 8000764:	f004 ff08 	bl	8005578 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <main+0xa0>)
 8000770:	f004 ff02 	bl	8005578 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <main+0xa8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <main+0xa8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f042 0220 	orr.w	r2, r2, #32
 8000782:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <main+0xa8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <main+0xa8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000792:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000794:	2204      	movs	r2, #4
 8000796:	490b      	ldr	r1, [pc, #44]	; (80007c4 <main+0xac>)
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <main+0xa8>)
 800079a:	f008 fd89 	bl	80092b0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      printf("%u", RS485_Encoder(0x2C));
 800079e:	202c      	movs	r0, #44	; 0x2c
 80007a0:	f7ff ff8e 	bl	80006c0 <RS485_Encoder>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0xb0>)
 80007aa:	f00a ff63 	bl	800b674 <iprintf>
      HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f001 fdb8 	bl	8002324 <HAL_Delay>
      printf("%u", RS485_Encoder(0x2C));
 80007b4:	e7f3      	b.n	800079e <main+0x86>
 80007b6:	bf00      	nop
 80007b8:	58020400 	.word	0x58020400
 80007bc:	58021000 	.word	0x58021000
 80007c0:	200002c8 	.word	0x200002c8
 80007c4:	20000898 	.word	0x20000898
 80007c8:	0800c538 	.word	0x0800c538

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	; 0x70
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	224c      	movs	r2, #76	; 0x4c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f00a ff42 	bl	800b664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00a ff3c 	bl	800b664 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ec:	2002      	movs	r0, #2
 80007ee:	f004 fef7 	bl	80055e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <SystemClock_Config+0xf0>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <SystemClock_Config+0xf0>)
 80007fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <SystemClock_Config+0xf0>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <SystemClock_Config+0xf4>)
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <SystemClock_Config+0xf4>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <SystemClock_Config+0xf4>)
 800081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000824:	bf00      	nop
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xf0>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000832:	d1f8      	bne.n	8000826 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000838:	2301      	movs	r3, #1
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800084c:	233c      	movs	r3, #60	; 0x3c
 800084e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000854:	2306      	movs	r3, #6
 8000856:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085c:	230c      	movs	r3, #12
 800085e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000860:	2300      	movs	r3, #0
 8000862:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fef1 	bl	8005654 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000878:	f000 ff1f 	bl	80016ba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	233f      	movs	r3, #63	; 0x3f
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000888:	2308      	movs	r3, #8
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fae6 	bl	8005e74 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008ae:	f000 ff04 	bl	80016ba <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3770      	adds	r7, #112	; 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	58024800 	.word	0x58024800
 80008c0:	58000400 	.word	0x58000400

080008c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_SPI3_Init+0xa8>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008de:	2203      	movs	r2, #3
 80008e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_SPI3_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_SPI3_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_SPI3_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI3_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SPI3_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI3_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_SPI3_Init+0xa4>)
 8000954:	f007 f97c 	bl	8007c50 <HAL_SPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800095e:	f000 feac 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000530 	.word	0x20000530
 800096c:	40003c00 	.word	0x40003c00

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	; 0x68
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	222c      	movs	r2, #44	; 0x2c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00a fe5a 	bl	800b664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009b2:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <MX_TIM1_Init+0x158>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80009b6:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009b8:	22ef      	movs	r2, #239	; 0xef
 80009ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009c4:	f44f 721c 	mov.w	r2, #624	; 0x270
 80009c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d0:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009dc:	4839      	ldr	r0, [pc, #228]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009de:	f007 fa54 	bl	8007e8a <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 fe67 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009f6:	4619      	mov	r1, r3
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009fa:	f007 fd2d 	bl	8008458 <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a04:	f000 fe59 	bl	80016ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a08:	482e      	ldr	r0, [pc, #184]	; (8000ac4 <MX_TIM1_Init+0x154>)
 8000a0a:	f007 fa95 	bl	8007f38 <HAL_TIM_PWM_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a14:	f000 fe51 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <MX_TIM1_Init+0x154>)
 8000a2c:	f008 fa36 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a36:	f000 fe40 	bl	80016ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3a:	2360      	movs	r3, #96	; 0x60
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000a3e:	f240 1339 	movw	r3, #313	; 0x139
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <MX_TIM1_Init+0x154>)
 8000a62:	f007 fbe9 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a6c:	f000 fe25 	bl	80016ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM1_Init+0x154>)
 8000aa6:	f008 fa81 	bl	8008fac <HAL_TIMEx_ConfigBreakDeadTime>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000ab0:	f000 fe03 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM1_Init+0x154>)
 8000ab6:	f000 ff3d 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8000aba:	bf00      	nop
 8000abc:	3768      	adds	r7, #104	; 0x68
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000634 	.word	0x20000634
 8000ac8:	40010000 	.word	0x40010000

08000acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
 8000afa:	615a      	str	r2, [r3, #20]
 8000afc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b08:	22ef      	movs	r2, #239	; 0xef
 8000b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b14:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000b18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b26:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b28:	f007 f9af 	bl	8007e8a <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 fdc2 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b40:	4619      	mov	r1, r3
 8000b42:	481d      	ldr	r0, [pc, #116]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b44:	f007 fc88 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b4e:	f000 fdb4 	bl	80016ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b54:	f007 f9f0 	bl	8007f38 <HAL_TIM_PWM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b5e:	f000 fdac 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b72:	f008 f993 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b7c:	f000 fd9d 	bl	80016ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b80:	2360      	movs	r3, #96	; 0x60
 8000b82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000b84:	f240 1339 	movw	r3, #313	; 0x139
 8000b88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	2208      	movs	r2, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000b9a:	f007 fb4d 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ba4:	f000 fd89 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM2_Init+0xec>)
 8000baa:	f000 fec3 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000788 	.word	0x20000788

08000bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <MX_TIM3_Init+0xec>)
 8000bf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000bf6:	22ef      	movs	r2, #239	; 0xef
 8000bf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c02:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c16:	f007 f938 	bl	8007e8a <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c20:	f000 fd4b 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481c      	ldr	r0, [pc, #112]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c32:	f007 fc11 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c3c:	f000 fd3d 	bl	80016ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c42:	f007 f979 	bl	8007f38 <HAL_TIM_PWM_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c4c:	f000 fd35 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c60:	f008 f91c 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c6a:	f000 fd26 	bl	80016ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6e:	2360      	movs	r3, #96	; 0x60
 8000c70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c72:	f240 1339 	movw	r3, #313	; 0x139
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c88:	f007 fad6 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c92:	f000 fd12 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM3_Init+0xe8>)
 8000c98:	f000 fe4c 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200004e4 	.word	0x200004e4
 8000ca8:	40000400 	.word	0x40000400

08000cac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000ce0:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <MX_TIM4_Init+0xec>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000ce6:	22ef      	movs	r2, #239	; 0xef
 8000ce8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000cf2:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000cf6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d04:	4823      	ldr	r0, [pc, #140]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d06:	f007 f8c0 	bl	8007e8a <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d10:	f000 fcd3 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d22:	f007 fb99 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d2c:	f000 fcc5 	bl	80016ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d32:	f007 f901 	bl	8007f38 <HAL_TIM_PWM_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d3c:	f000 fcbd 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d50:	f008 f8a4 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d5a:	f000 fcae 	bl	80016ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5e:	2360      	movs	r3, #96	; 0x60
 8000d60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d62:	f240 1339 	movw	r3, #313	; 0x139
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2208      	movs	r2, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d78:	f007 fa5e 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d82:	f000 fc9a 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM4_Init+0xe8>)
 8000d88:	f000 fdd4 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3738      	adds	r7, #56	; 0x38
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000204 	.word	0x20000204
 8000d98:	40000800 	.word	0x40000800

08000d9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <MX_TIM5_Init+0x98>)
 8000dbe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000dc2:	22ef      	movs	r2, #239	; 0xef
 8000dc4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000dce:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000dd2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000de2:	f007 f852 	bl	8007e8a <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dec:	f000 fc65 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000dfe:	f007 fb2b 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 fc57 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM5_Init+0x94>)
 8000e1a:	f008 f83f 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 fc49 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000498 	.word	0x20000498
 8000e34:	40000c00 	.word	0x40000c00

08000e38 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <MX_TIM12_Init+0x70>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e62:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e72:	f007 f80a 	bl	8007e8a <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000e7c:	f000 fc1d 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM12_Init+0x6c>)
 8000e8c:	f007 fae4 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000e96:	f000 fc10 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200007d4 	.word	0x200007d4
 8000ea8:	40001800 	.word	0x40001800

08000eac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	; 0x68
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	222c      	movs	r2, #44	; 0x2c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00a fbbc 	bl	800b664 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <MX_TIM15_Init+0x140>)
 8000eee:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <MX_TIM15_Init+0x144>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	; (8000fec <MX_TIM15_Init+0x140>)
 8000ef4:	22ef      	movs	r2, #239	; 0xef
 8000ef6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_TIM15_Init+0x140>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f00:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000f04:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f18:	4834      	ldr	r0, [pc, #208]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f1a:	f006 ffb6 	bl	8007e8a <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000f24:	f000 fbc9 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f32:	4619      	mov	r1, r3
 8000f34:	482d      	ldr	r0, [pc, #180]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f36:	f007 fa8f 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000f40:	f000 fbbb 	bl	80016ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f44:	4829      	ldr	r0, [pc, #164]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f46:	f006 fff7 	bl	8007f38 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000f50:	f000 fbb3 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f60:	4619      	mov	r1, r3
 8000f62:	4822      	ldr	r0, [pc, #136]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f64:	f007 ff9a 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000f6e:	f000 fba4 	bl	80016ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f72:	2360      	movs	r3, #96	; 0x60
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000f76:	f240 1339 	movw	r3, #313	; 0x139
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f94:	2204      	movs	r2, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_TIM15_Init+0x140>)
 8000f9a:	f007 f94d 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000fa4:	f000 fb89 	bl	80016ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM15_Init+0x140>)
 8000fd0:	f007 ffec 	bl	8008fac <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000fda:	f000 fb6e 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM15_Init+0x140>)
 8000fe0:	f000 fca8 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3768      	adds	r7, #104	; 0x68
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200003d4 	.word	0x200003d4
 8000ff0:	40014000 	.word	0x40014000

08000ff4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_UART4_Init+0x98>)
 8000ffa:	4a25      	ldr	r2, [pc, #148]	; (8001090 <MX_UART4_Init+0x9c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_UART4_Init+0x98>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_UART4_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_UART4_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_UART4_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_UART4_Init+0x98>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_UART4_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_UART4_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_UART4_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_UART4_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_UART4_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800103c:	2300      	movs	r3, #0
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <MX_UART4_Init+0x98>)
 8001044:	f00a f958 	bl	800b2f8 <HAL_RS485Ex_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800104e:	f000 fb34 	bl	80016ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_UART4_Init+0x98>)
 8001056:	f00a fa10 	bl	800b47a <HAL_UARTEx_SetTxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fb2b 	bl	80016ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_UART4_Init+0x98>)
 8001068:	f00a fa45 	bl	800b4f6 <HAL_UARTEx_SetRxFifoThreshold>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8001072:	f000 fb22 	bl	80016ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_UART4_Init+0x98>)
 8001078:	f00a f9c6 	bl	800b408 <HAL_UARTEx_DisableFifoMode>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 fb1a 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000680 	.word	0x20000680
 8001090:	40004c00 	.word	0x40004c00

08001094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_USART3_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <MX_USART3_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010de:	f008 f801 	bl	80090e4 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 fae7 	bl	80016ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010f0:	f00a f9c3 	bl	800b47a <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 fade 	bl	80016ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <MX_USART3_UART_Init+0x90>)
 8001102:	f00a f9f8 	bl	800b4f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 fad5 	bl	80016ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_USART3_UART_Init+0x90>)
 8001112:	f00a f979 	bl	800b408 <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 facd 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200002c8 	.word	0x200002c8
 8001128:	40004800 	.word	0x40004800

0800112c <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	4b9b      	ldr	r3, [pc, #620]	; (80013a0 <MX_DMA_Init+0x274>)
 8001134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001138:	4a99      	ldr	r2, [pc, #612]	; (80013a0 <MX_DMA_Init+0x274>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001142:	4b97      	ldr	r3, [pc, #604]	; (80013a0 <MX_DMA_Init+0x274>)
 8001144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001150:	4b93      	ldr	r3, [pc, #588]	; (80013a0 <MX_DMA_Init+0x274>)
 8001152:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001156:	4a92      	ldr	r2, [pc, #584]	; (80013a0 <MX_DMA_Init+0x274>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001160:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <MX_DMA_Init+0x274>)
 8001162:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 800116e:	4b8d      	ldr	r3, [pc, #564]	; (80013a4 <MX_DMA_Init+0x278>)
 8001170:	4a8d      	ldr	r2, [pc, #564]	; (80013a8 <MX_DMA_Init+0x27c>)
 8001172:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001174:	4b8b      	ldr	r3, [pc, #556]	; (80013a4 <MX_DMA_Init+0x278>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800117a:	4b8a      	ldr	r3, [pc, #552]	; (80013a4 <MX_DMA_Init+0x278>)
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001180:	4b88      	ldr	r3, [pc, #544]	; (80013a4 <MX_DMA_Init+0x278>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b86      	ldr	r3, [pc, #536]	; (80013a4 <MX_DMA_Init+0x278>)
 800118a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001190:	4b84      	ldr	r3, [pc, #528]	; (80013a4 <MX_DMA_Init+0x278>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001196:	4b83      	ldr	r3, [pc, #524]	; (80013a4 <MX_DMA_Init+0x278>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 800119c:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <MX_DMA_Init+0x278>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 80011a2:	4b80      	ldr	r3, [pc, #512]	; (80013a4 <MX_DMA_Init+0x278>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011a8:	4b7e      	ldr	r3, [pc, #504]	; (80013a4 <MX_DMA_Init+0x278>)
 80011aa:	2204      	movs	r2, #4
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011ae:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <MX_DMA_Init+0x278>)
 80011b0:	2203      	movs	r2, #3
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 80011b4:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <MX_DMA_Init+0x278>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011ba:	4b7a      	ldr	r3, [pc, #488]	; (80013a4 <MX_DMA_Init+0x278>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 80011c0:	4878      	ldr	r0, [pc, #480]	; (80013a4 <MX_DMA_Init+0x278>)
 80011c2:	f001 f9ef 	bl	80025a4 <HAL_DMA_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 80011cc:	f000 fa75 	bl	80016ba <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 80011d0:	4b76      	ldr	r3, [pc, #472]	; (80013ac <MX_DMA_Init+0x280>)
 80011d2:	4a77      	ldr	r2, [pc, #476]	; (80013b0 <MX_DMA_Init+0x284>)
 80011d4:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 80011d6:	4b75      	ldr	r3, [pc, #468]	; (80013ac <MX_DMA_Init+0x280>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011dc:	4b73      	ldr	r3, [pc, #460]	; (80013ac <MX_DMA_Init+0x280>)
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 80011e2:	4b72      	ldr	r3, [pc, #456]	; (80013ac <MX_DMA_Init+0x280>)
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 80011ea:	4b70      	ldr	r3, [pc, #448]	; (80013ac <MX_DMA_Init+0x280>)
 80011ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <MX_DMA_Init+0x280>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f8:	4b6c      	ldr	r3, [pc, #432]	; (80013ac <MX_DMA_Init+0x280>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <MX_DMA_Init+0x280>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 8001204:	4b69      	ldr	r3, [pc, #420]	; (80013ac <MX_DMA_Init+0x280>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800120a:	4b68      	ldr	r3, [pc, #416]	; (80013ac <MX_DMA_Init+0x280>)
 800120c:	2204      	movs	r2, #4
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001210:	4b66      	ldr	r3, [pc, #408]	; (80013ac <MX_DMA_Init+0x280>)
 8001212:	2203      	movs	r2, #3
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001216:	4b65      	ldr	r3, [pc, #404]	; (80013ac <MX_DMA_Init+0x280>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800121c:	4b63      	ldr	r3, [pc, #396]	; (80013ac <MX_DMA_Init+0x280>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8001222:	4862      	ldr	r0, [pc, #392]	; (80013ac <MX_DMA_Init+0x280>)
 8001224:	f001 f9be 	bl	80025a4 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 800122e:	f000 fa44 	bl	80016ba <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <MX_DMA_Init+0x288>)
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <MX_DMA_Init+0x28c>)
 8001236:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001238:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <MX_DMA_Init+0x288>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <MX_DMA_Init+0x288>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <MX_DMA_Init+0x288>)
 8001246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <MX_DMA_Init+0x288>)
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001254:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <MX_DMA_Init+0x288>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125a:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <MX_DMA_Init+0x288>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8001260:	4b54      	ldr	r3, [pc, #336]	; (80013b4 <MX_DMA_Init+0x288>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <MX_DMA_Init+0x288>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800126c:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <MX_DMA_Init+0x288>)
 800126e:	2204      	movs	r2, #4
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001272:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <MX_DMA_Init+0x288>)
 8001274:	2203      	movs	r2, #3
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001278:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <MX_DMA_Init+0x288>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800127e:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <MX_DMA_Init+0x288>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8001284:	484b      	ldr	r0, [pc, #300]	; (80013b4 <MX_DMA_Init+0x288>)
 8001286:	f001 f98d 	bl	80025a4 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 8001290:	f000 fa13 	bl	80016ba <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 8001294:	4b49      	ldr	r3, [pc, #292]	; (80013bc <MX_DMA_Init+0x290>)
 8001296:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <MX_DMA_Init+0x294>)
 8001298:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <MX_DMA_Init+0x290>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <MX_DMA_Init+0x290>)
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <MX_DMA_Init+0x290>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <MX_DMA_Init+0x290>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <MX_DMA_Init+0x290>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <MX_DMA_Init+0x290>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <MX_DMA_Init+0x290>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <MX_DMA_Init+0x290>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <MX_DMA_Init+0x290>)
 80012d0:	2204      	movs	r2, #4
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <MX_DMA_Init+0x290>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <MX_DMA_Init+0x290>)
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <MX_DMA_Init+0x290>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 80012e6:	4835      	ldr	r0, [pc, #212]	; (80013bc <MX_DMA_Init+0x290>)
 80012e8:	f001 f95c 	bl	80025a4 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 80012f2:	f000 f9e2 	bl	80016ba <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_DMA_Init+0x298>)
 80012f8:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <MX_DMA_Init+0x29c>)
 80012fa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <MX_DMA_Init+0x298>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_DMA_Init+0x298>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_DMA_Init+0x298>)
 800130a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_DMA_Init+0x298>)
 8001312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001316:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_DMA_Init+0x298>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_DMA_Init+0x298>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_DMA_Init+0x298>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_DMA_Init+0x298>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_DMA_Init+0x298>)
 8001332:	2204      	movs	r2, #4
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_DMA_Init+0x298>)
 8001338:	2203      	movs	r2, #3
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_DMA_Init+0x298>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_DMA_Init+0x298>)
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 8001348:	481e      	ldr	r0, [pc, #120]	; (80013c4 <MX_DMA_Init+0x298>)
 800134a:	f001 f92b 	bl	80025a4 <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001354:	f000 f9b1 	bl	80016ba <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	200c      	movs	r0, #12
 800135e:	f001 f8ec 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001362:	200c      	movs	r0, #12
 8001364:	f001 f903 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	200d      	movs	r0, #13
 800136e:	f001 f8e4 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001372:	200d      	movs	r0, #13
 8001374:	f001 f8fb 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2038      	movs	r0, #56	; 0x38
 800137e:	f001 f8dc 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001382:	2038      	movs	r0, #56	; 0x38
 8001384:	f001 f8f3 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2039      	movs	r0, #57	; 0x39
 800138e:	f001 f8d4 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001392:	2039      	movs	r0, #57	; 0x39
 8001394:	f001 f8eb 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	58024400 	.word	0x58024400
 80013a4:	20000358 	.word	0x20000358
 80013a8:	40020058 	.word	0x40020058
 80013ac:	20000710 	.word	0x20000710
 80013b0:	40020440 	.word	0x40020440
 80013b4:	200005b8 	.word	0x200005b8
 80013b8:	40020458 	.word	0x40020458
 80013bc:	2000009c 	.word	0x2000009c
 80013c0:	40020470 	.word	0x40020470
 80013c4:	20000114 	.word	0x20000114
 80013c8:	40020488 	.word	0x40020488

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <MX_GPIO_Init+0x204>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a79      	ldr	r2, [pc, #484]	; (80015d0 <MX_GPIO_Init+0x204>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b77      	ldr	r3, [pc, #476]	; (80015d0 <MX_GPIO_Init+0x204>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a72      	ldr	r2, [pc, #456]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <MX_GPIO_Init+0x204>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	4a63      	ldr	r2, [pc, #396]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144c:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <MX_GPIO_Init+0x204>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <MX_GPIO_Init+0x204>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	4a5b      	ldr	r2, [pc, #364]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <MX_GPIO_Init+0x204>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <MX_GPIO_Init+0x204>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <MX_GPIO_Init+0x204>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001496:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <MX_GPIO_Init+0x204>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <MX_GPIO_Init+0x204>)
 800149e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x204>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80014b4:	2200      	movs	r2, #0
 80014b6:	f644 2121 	movw	r1, #18977	; 0x4a21
 80014ba:	4846      	ldr	r0, [pc, #280]	; (80015d4 <MX_GPIO_Init+0x208>)
 80014bc:	f004 f85c 	bl	8005578 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f24c 0102 	movw	r1, #49154	; 0xc002
 80014c6:	4844      	ldr	r0, [pc, #272]	; (80015d8 <MX_GPIO_Init+0x20c>)
 80014c8:	f004 f856 	bl	8005578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d2:	4842      	ldr	r0, [pc, #264]	; (80015dc <MX_GPIO_Init+0x210>)
 80014d4:	f004 f850 	bl	8005578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014de:	4840      	ldr	r0, [pc, #256]	; (80015e0 <MX_GPIO_Init+0x214>)
 80014e0:	f004 f84a 	bl	8005578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80014e4:	f644 2321 	movw	r3, #18977	; 0x4a21
 80014e8:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4835      	ldr	r0, [pc, #212]	; (80015d4 <MX_GPIO_Init+0x208>)
 80014fe:	f003 fe8b 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 8001502:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <MX_GPIO_Init+0x218>)
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4830      	ldr	r0, [pc, #192]	; (80015d8 <MX_GPIO_Init+0x20c>)
 8001518:	f003 fe7e 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800151c:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4828      	ldr	r0, [pc, #160]	; (80015d8 <MX_GPIO_Init+0x20c>)
 8001536:	f003 fe6f 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800153a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4822      	ldr	r0, [pc, #136]	; (80015dc <MX_GPIO_Init+0x210>)
 8001554:	f003 fe60 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_GPIO_Init+0x214>)
 8001572:	f003 fe51 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_GPIO_Init+0x218>)
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <MX_GPIO_Init+0x21c>)
 800158c:	f003 fe44 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_GPIO_Init+0x218>)
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_GPIO_Init+0x208>)
 80015a4:	f003 fe38 	bl	8005218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2103      	movs	r1, #3
 80015ac:	2017      	movs	r0, #23
 80015ae:	f000 ffc4 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015b2:	2017      	movs	r0, #23
 80015b4:	f000 ffdb 	bl	800256e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2103      	movs	r1, #3
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f000 ffbc 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f000 ffd3 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58020400 	.word	0x58020400
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58020c00 	.word	0x58020c00
 80015e0:	58020800 	.word	0x58020800
 80015e4:	11110000 	.word	0x11110000
 80015e8:	58021800 	.word	0x58021800

080015ec <__io_putchar>:
//	double err, errValue, diffValue;
//}

/** Usable for printf function **/
int __io_putchar(int ch)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &*c, 1, 10);
 80015fa:	f107 010c 	add.w	r1, r7, #12
 80015fe:	230a      	movs	r3, #10
 8001600:	2201      	movs	r2, #1
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <__io_putchar+0x28>)
 8001604:	f007 fdbe 	bl	8009184 <HAL_UART_Transmit>
 return ch;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002c8 	.word	0x200002c8

08001618 <_write>:

int _write(int file,char *ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e009      	b.n	800163e <_write+0x26>
 {
 __io_putchar(*ptr++);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	60ba      	str	r2, [r7, #8]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffda 	bl	80015ec <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	dbf1      	blt.n	800162a <_write+0x12>
 }
return len;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_UART_RxCpltCallback+0x24>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d104      	bne.n	800166a <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001660:	2204      	movs	r2, #4
 8001662:	4905      	ldr	r1, [pc, #20]	; (8001678 <HAL_UART_RxCpltCallback+0x28>)
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <HAL_UART_RxCpltCallback+0x24>)
 8001666:	f007 fe23 	bl	80092b0 <HAL_UART_Receive_IT>
	}
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002c8 	.word	0x200002c8
 8001678:	20000898 	.word	0x20000898

0800167c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]


}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  }
  if (htim == &htim12)
  {

  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016be:	b672      	cpsid	i
}
 80016c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <Error_Handler+0x8>

080016c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_MspInit+0x30>)
 80016cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x30>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x30>)
 80016dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	58024400 	.word	0x58024400

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0b8      	sub	sp, #224	; 0xe0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	22bc      	movs	r2, #188	; 0xbc
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f009 ffa3 	bl	800b664 <memset>
  if(hspi->Instance==SPI3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <HAL_SPI_MspInit+0xc0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d142      	bne.n	80017ae <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800172e:	2300      	movs	r3, #0
 8001730:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4618      	mov	r0, r3
 8001738:	f004 ff28 	bl	800658c <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001742:	f7ff ffba 	bl	80016ba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 8001758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800175c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001782:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800179c:	2306      	movs	r3, #6
 800179e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_SPI_MspInit+0xc8>)
 80017aa:	f003 fd35 	bl	8005218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	37e0      	adds	r7, #224	; 0xe0
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40003c00 	.word	0x40003c00
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020800 	.word	0x58020800

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_TIM_Base_MspInit+0x154>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10f      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d6:	4b51      	ldr	r3, [pc, #324]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80017d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017e6:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80017e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017f4:	e08c      	b.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fe:	d10f      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001806:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	6a3b      	ldr	r3, [r7, #32]
}
 800181e:	e077      	b.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a3e      	ldr	r2, [pc, #248]	; (8001920 <HAL_TIM_Base_MspInit+0x15c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10f      	bne.n	800184a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	4b3c      	ldr	r3, [pc, #240]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 800182c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 800183c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
}
 8001848:	e062      	b.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a35      	ldr	r2, [pc, #212]	; (8001924 <HAL_TIM_Base_MspInit+0x160>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d10f      	bne.n	8001874 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185a:	4a30      	ldr	r2, [pc, #192]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
}
 8001872:	e04d      	b.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_TIM_Base_MspInit+0x164>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d117      	bne.n	80018ae <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001884:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f000 fe4a 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f000 fe61 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 80018ac:	e030      	b.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_TIM_Base_MspInit+0x168>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d117      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80018ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80018c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80018ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	202b      	movs	r0, #43	; 0x2b
 80018dc:	f000 fe2d 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80018e0:	202b      	movs	r0, #43	; 0x2b
 80018e2:	f000 fe44 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 80018e6:	e013      	b.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM15)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_TIM_Base_MspInit+0x16c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80018f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_TIM_Base_MspInit+0x158>)
 8001904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40010000 	.word	0x40010000
 800191c:	58024400 	.word	0x58024400
 8001920:	40000400 	.word	0x40000400
 8001924:	40000800 	.word	0x40000800
 8001928:	40000c00 	.word	0x40000c00
 800192c:	40001800 	.word	0x40001800
 8001930:	40014000 	.word	0x40014000

08001934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a5e      	ldr	r2, [pc, #376]	; (8001acc <HAL_TIM_MspPostInit+0x198>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d120      	bne.n	8001998 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001956:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	4a5c      	ldr	r2, [pc, #368]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001986:	2301      	movs	r3, #1
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4850      	ldr	r0, [pc, #320]	; (8001ad4 <HAL_TIM_MspPostInit+0x1a0>)
 8001992:	f003 fc41 	bl	8005218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001996:	e094      	b.n	8001ac2 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d120      	bne.n	80019e4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80019c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	483e      	ldr	r0, [pc, #248]	; (8001ad8 <HAL_TIM_MspPostInit+0x1a4>)
 80019de:	f003 fc1b 	bl	8005218 <HAL_GPIO_Init>
}
 80019e2:	e06e      	b.n	8001ac2 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <HAL_TIM_MspPostInit+0x1a8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d11f      	bne.n	8001a2e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	4a36      	ldr	r2, [pc, #216]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	482e      	ldr	r0, [pc, #184]	; (8001ae0 <HAL_TIM_MspPostInit+0x1ac>)
 8001a28:	f003 fbf6 	bl	8005218 <HAL_GPIO_Init>
}
 8001a2c:	e049      	b.n	8001ac2 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <HAL_TIM_MspPostInit+0x1b0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d120      	bne.n	8001a7a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	4819      	ldr	r0, [pc, #100]	; (8001ad8 <HAL_TIM_MspPostInit+0x1a4>)
 8001a74:	f003 fbd0 	bl	8005218 <HAL_GPIO_Init>
}
 8001a78:	e023      	b.n	8001ac2 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <HAL_TIM_MspPostInit+0x1b4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d11e      	bne.n	8001ac2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_TIM_MspPostInit+0x19c>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_TIM_MspPostInit+0x1a0>)
 8001abe:	f003 fbab 	bl	8005218 <HAL_GPIO_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	; 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	58024400 	.word	0x58024400
 8001ad4:	58021000 	.word	0x58021000
 8001ad8:	58020400 	.word	0x58020400
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	58020000 	.word	0x58020000
 8001ae4:	40000800 	.word	0x40000800
 8001ae8:	40014000 	.word	0x40014000

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0bc      	sub	sp, #240	; 0xf0
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	22bc      	movs	r2, #188	; 0xbc
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f009 fda9 	bl	800b664 <memset>
  if(huart->Instance==UART4)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a67      	ldr	r2, [pc, #412]	; (8001cb4 <HAL_UART_MspInit+0x1c8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f040 80db 	bne.w	8001cd4 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 fd2d 	bl	800658c <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b38:	f7ff fdbf 	bl	80016ba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b42:	4a5d      	ldr	r2, [pc, #372]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	4a55      	ldr	r2, [pc, #340]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b78:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_UART_MspInit+0x1cc>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bba:	4619      	mov	r1, r3
 8001bbc:	483f      	ldr	r0, [pc, #252]	; (8001cbc <HAL_UART_MspInit+0x1d0>)
 8001bbe:	f003 fb2b 	bl	8005218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bda:	2308      	movs	r3, #8
 8001bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001be4:	4619      	mov	r1, r3
 8001be6:	4836      	ldr	r0, [pc, #216]	; (8001cc0 <HAL_UART_MspInit+0x1d4>)
 8001be8:	f003 fb16 	bl	8005218 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001bee:	4a36      	ldr	r2, [pc, #216]	; (8001cc8 <HAL_UART_MspInit+0x1dc>)
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001bf4:	223f      	movs	r2, #63	; 0x3f
 8001bf6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c2a:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c2c:	f000 fcba 	bl	80025a4 <HAL_DMA_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001c36:	f7ff fd40 	bl	80016ba <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c3e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c40:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_UART_MspInit+0x1d8>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c48:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_UART_MspInit+0x1e4>)
 8001c4a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c64:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001c84:	4811      	ldr	r0, [pc, #68]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c86:	f000 fc8d 	bl	80025a4 <HAL_DMA_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001c90:	f7ff fd13 	bl	80016ba <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c98:	679a      	str	r2, [r3, #120]	; 0x78
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <HAL_UART_MspInit+0x1e0>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2034      	movs	r0, #52	; 0x34
 8001ca6:	f000 fc48 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001caa:	2034      	movs	r0, #52	; 0x34
 8001cac:	f000 fc5f 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cb0:	e0bd      	b.n	8001e2e <HAL_UART_MspInit+0x342>
 8001cb2:	bf00      	nop
 8001cb4:	40004c00 	.word	0x40004c00
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	58020000 	.word	0x58020000
 8001cc0:	58020c00 	.word	0x58020c00
 8001cc4:	2000018c 	.word	0x2000018c
 8001cc8:	40020410 	.word	0x40020410
 8001ccc:	20000820 	.word	0x20000820
 8001cd0:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_UART_MspInit+0x34c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	f040 80a7 	bne.w	8001e2e <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fc4c 	bl	800658c <HAL_RCCEx_PeriphCLKConfig>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001cfa:	f7ff fcde 	bl	80016ba <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <HAL_UART_MspInit+0x350>)
 8001d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d04:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <HAL_UART_MspInit+0x350>)
 8001d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_UART_MspInit+0x350>)
 8001d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_UART_MspInit+0x350>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <HAL_UART_MspInit+0x350>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_UART_MspInit+0x350>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d54:	2307      	movs	r3, #7
 8001d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4837      	ldr	r0, [pc, #220]	; (8001e40 <HAL_UART_MspInit+0x354>)
 8001d62:	f003 fa59 	bl	8005218 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d68:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_UART_MspInit+0x35c>)
 8001d6a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d6e:	222d      	movs	r2, #45	; 0x2d
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001d9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d9e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001da6:	4827      	ldr	r0, [pc, #156]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001da8:	f000 fbfc 	bl	80025a4 <HAL_DMA_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001db2:	f7ff fc82 	bl	80016ba <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001dba:	67da      	str	r2, [r3, #124]	; 0x7c
 8001dbc:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_UART_MspInit+0x358>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_UART_MspInit+0x364>)
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001dca:	222e      	movs	r2, #46	; 0x2e
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001e04:	f000 fbce 	bl	80025a4 <HAL_DMA_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0x326>
      Error_Handler();
 8001e0e:	f7ff fc54 	bl	80016ba <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001e16:	679a      	str	r2, [r3, #120]	; 0x78
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_UART_MspInit+0x360>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2027      	movs	r0, #39	; 0x27
 8001e24:	f000 fb89 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e28:	2027      	movs	r0, #39	; 0x27
 8001e2a:	f000 fba0 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	37f0      	adds	r7, #240	; 0xf0
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40004800 	.word	0x40004800
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58020c00 	.word	0x58020c00
 8001e44:	20000250 	.word	0x20000250
 8001e48:	40020028 	.word	0x40020028
 8001e4c:	20000420 	.word	0x20000420
 8001e50:	40020040 	.word	0x40020040

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 fa20 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA1_Stream1_IRQHandler+0x10>)
 8001eae:	f001 fea1 	bl	8003bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000250 	.word	0x20000250

08001ebc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Stream2_IRQHandler+0x10>)
 8001ec2:	f001 fe97 	bl	8003bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000420 	.word	0x20000420

08001ed0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ed4:	2040      	movs	r0, #64	; 0x40
 8001ed6:	f003 fb68 	bl	80055aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001eda:	2080      	movs	r0, #128	; 0x80
 8001edc:	f003 fb65 	bl	80055aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USART3_IRQHandler+0x10>)
 8001eea:	f007 faed 	bl	80094c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200002c8 	.word	0x200002c8

08001ef8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001efc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f00:	f003 fb53 	bl	80055aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f08:	f003 fb4f 	bl	80055aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f10:	f003 fb4b 	bl	80055aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f18:	f003 fb47 	bl	80055aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001f26:	f006 f868 	bl	8007ffa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200007d4 	.word	0x200007d4

08001f34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM5_IRQHandler+0x10>)
 8001f3a:	f006 f85e 	bl	8007ffa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000498 	.word	0x20000498

08001f48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <UART4_IRQHandler+0x10>)
 8001f4e:	f007 fabb 	bl	80094c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000680 	.word	0x20000680

08001f5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <DMA2_Stream0_IRQHandler+0x10>)
 8001f62:	f001 fe47 	bl	8003bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000018c 	.word	0x2000018c

08001f70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <DMA2_Stream1_IRQHandler+0x10>)
 8001f76:	f001 fe3d 	bl	8003bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000820 	.word	0x20000820

08001f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00a      	b.n	8001fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf0      	blt.n	8001f96 <_read+0x12>
	}

return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f009 fada 	bl	800b610 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20020000 	.word	0x20020000
 8002088:	00000400 	.word	0x00000400
 800208c:	20000090 	.word	0x20000090
 8002090:	200008b8 	.word	0x200008b8

08002094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <SystemInit+0xec>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	4a38      	ldr	r2, [pc, #224]	; (8002180 <SystemInit+0xec>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <SystemInit+0xf0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d807      	bhi.n	80020c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <SystemInit+0xf0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 030f 	bic.w	r3, r3, #15
 80020bc:	4a31      	ldr	r2, [pc, #196]	; (8002184 <SystemInit+0xf0>)
 80020be:	f043 0307 	orr.w	r3, r3, #7
 80020c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020c4:	4b30      	ldr	r3, [pc, #192]	; (8002188 <SystemInit+0xf4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <SystemInit+0xf4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <SystemInit+0xf4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <SystemInit+0xf4>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	492b      	ldr	r1, [pc, #172]	; (8002188 <SystemInit+0xf4>)
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <SystemInit+0xf8>)
 80020de:	4013      	ands	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <SystemInit+0xf0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <SystemInit+0xf0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 030f 	bic.w	r3, r3, #15
 80020f6:	4a23      	ldr	r2, [pc, #140]	; (8002184 <SystemInit+0xf0>)
 80020f8:	f043 0307 	orr.w	r3, r3, #7
 80020fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <SystemInit+0xf4>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <SystemInit+0xf4>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <SystemInit+0xf4>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <SystemInit+0xf4>)
 8002112:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <SystemInit+0xfc>)
 8002114:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <SystemInit+0xf4>)
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <SystemInit+0x100>)
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <SystemInit+0xf4>)
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <SystemInit+0x104>)
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <SystemInit+0xf4>)
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <SystemInit+0xf4>)
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <SystemInit+0x104>)
 800212c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <SystemInit+0xf4>)
 8002130:	2200      	movs	r2, #0
 8002132:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <SystemInit+0xf4>)
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <SystemInit+0x104>)
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <SystemInit+0xf4>)
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <SystemInit+0xf4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a10      	ldr	r2, [pc, #64]	; (8002188 <SystemInit+0xf4>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <SystemInit+0xf4>)
 800214e:	2200      	movs	r2, #0
 8002150:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <SystemInit+0x108>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <SystemInit+0x10c>)
 8002158:	4013      	ands	r3, r2
 800215a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800215e:	d202      	bcs.n	8002166 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <SystemInit+0x110>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <SystemInit+0x114>)
 8002168:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800216c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SystemInit+0xec>)
 8002170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002174:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00
 8002184:	52002000 	.word	0x52002000
 8002188:	58024400 	.word	0x58024400
 800218c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002190:	02020200 	.word	0x02020200
 8002194:	01ff0000 	.word	0x01ff0000
 8002198:	01010280 	.word	0x01010280
 800219c:	5c001000 	.word	0x5c001000
 80021a0:	ffff0000 	.word	0xffff0000
 80021a4:	51008108 	.word	0x51008108
 80021a8:	52004000 	.word	0x52004000

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021b0:	f7ff ff70 	bl	8002094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021b6:	490d      	ldr	r1, [pc, #52]	; (80021ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021bc:	e002      	b.n	80021c4 <LoopCopyDataInit>

080021be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c2:	3304      	adds	r3, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c8:	d3f9      	bcc.n	80021be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021cc:	4c0a      	ldr	r4, [pc, #40]	; (80021f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d0:	e001      	b.n	80021d6 <LoopFillZerobss>

080021d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d4:	3204      	adds	r2, #4

080021d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d8:	d3fb      	bcc.n	80021d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021da:	f009 fa1f 	bl	800b61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7fe fa9b 	bl	8000718 <main>
  bx  lr
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021f0:	0800c624 	.word	0x0800c624
  ldr r2, =_sbss
 80021f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021f8:	200008b8 	.word	0x200008b8

080021fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC3_IRQHandler>
	...

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002206:	2003      	movs	r0, #3
 8002208:	f000 f98c 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800220c:	f003 ffe8 	bl	80061e0 <HAL_RCC_GetSysClockFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_Init+0x68>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	4913      	ldr	r1, [pc, #76]	; (800226c <HAL_Init+0x6c>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_Init+0x68>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_Init+0x6c>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_Init+0x70>)
 8002242:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_Init+0x74>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800224a:	2000      	movs	r0, #0
 800224c:	f000 f814 	bl	8002278 <HAL_InitTick>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e002      	b.n	8002260 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800225a:	f7ff fa33 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	58024400 	.word	0x58024400
 800226c:	0800c53c 	.word	0x0800c53c
 8002270:	20000004 	.word	0x20000004
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_InitTick+0x60>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e021      	b.n	80022d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_InitTick+0x64>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_InitTick+0x60>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f971 	bl	800258a <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f93b 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x68>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000008 	.word	0x20000008

080022e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	2000000c 	.word	0x2000000c
 8002308:	200008a4 	.word	0x200008a4

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200008a4 	.word	0x200008a4

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffee 	bl	800230c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffde 	bl	800230c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000000c 	.word	0x2000000c

0800236c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetREVID+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0c1b      	lsrs	r3, r3, #16
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	5c001000 	.word	0x5c001000

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x40>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00
 80023c8:	05fa0000 	.word	0x05fa0000

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	; (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff40 	bl	80023cc <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff90 	bl	8002478 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5f 	bl	8002424 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff33 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa4 	bl	80024e0 <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff feae 	bl	800230c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e316      	b.n	8002bea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a66      	ldr	r2, [pc, #408]	; (800275c <HAL_DMA_Init+0x1b8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d04a      	beq.n	800265c <HAL_DMA_Init+0xb8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_DMA_Init+0x1bc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d045      	beq.n	800265c <HAL_DMA_Init+0xb8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_DMA_Init+0x1c0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d040      	beq.n	800265c <HAL_DMA_Init+0xb8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a62      	ldr	r2, [pc, #392]	; (8002768 <HAL_DMA_Init+0x1c4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d03b      	beq.n	800265c <HAL_DMA_Init+0xb8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_DMA_Init+0x1c8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d036      	beq.n	800265c <HAL_DMA_Init+0xb8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5f      	ldr	r2, [pc, #380]	; (8002770 <HAL_DMA_Init+0x1cc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d031      	beq.n	800265c <HAL_DMA_Init+0xb8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5d      	ldr	r2, [pc, #372]	; (8002774 <HAL_DMA_Init+0x1d0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02c      	beq.n	800265c <HAL_DMA_Init+0xb8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5c      	ldr	r2, [pc, #368]	; (8002778 <HAL_DMA_Init+0x1d4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d027      	beq.n	800265c <HAL_DMA_Init+0xb8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5a      	ldr	r2, [pc, #360]	; (800277c <HAL_DMA_Init+0x1d8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d022      	beq.n	800265c <HAL_DMA_Init+0xb8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a59      	ldr	r2, [pc, #356]	; (8002780 <HAL_DMA_Init+0x1dc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d01d      	beq.n	800265c <HAL_DMA_Init+0xb8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a57      	ldr	r2, [pc, #348]	; (8002784 <HAL_DMA_Init+0x1e0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d018      	beq.n	800265c <HAL_DMA_Init+0xb8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_DMA_Init+0x1e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_DMA_Init+0xb8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a54      	ldr	r2, [pc, #336]	; (800278c <HAL_DMA_Init+0x1e8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00e      	beq.n	800265c <HAL_DMA_Init+0xb8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a53      	ldr	r2, [pc, #332]	; (8002790 <HAL_DMA_Init+0x1ec>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d009      	beq.n	800265c <HAL_DMA_Init+0xb8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_DMA_Init+0x1f0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_DMA_Init+0xb8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_DMA_Init+0x1f4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Init+0xbc>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_DMA_Init+0xbe>
 8002660:	2300      	movs	r3, #0
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 813b 	beq.w	80028de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a37      	ldr	r2, [pc, #220]	; (800275c <HAL_DMA_Init+0x1b8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04a      	beq.n	8002718 <HAL_DMA_Init+0x174>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a36      	ldr	r2, [pc, #216]	; (8002760 <HAL_DMA_Init+0x1bc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d045      	beq.n	8002718 <HAL_DMA_Init+0x174>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a34      	ldr	r2, [pc, #208]	; (8002764 <HAL_DMA_Init+0x1c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d040      	beq.n	8002718 <HAL_DMA_Init+0x174>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a33      	ldr	r2, [pc, #204]	; (8002768 <HAL_DMA_Init+0x1c4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d03b      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_DMA_Init+0x1c8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d036      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_DMA_Init+0x1cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2e      	ldr	r2, [pc, #184]	; (8002774 <HAL_DMA_Init+0x1d0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02c      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <HAL_DMA_Init+0x1d4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d027      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <HAL_DMA_Init+0x1d8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d022      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_DMA_Init+0x1dc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d01d      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <HAL_DMA_Init+0x1e0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d018      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_DMA_Init+0x1e4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_DMA_Init+0x1e8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00e      	beq.n	8002718 <HAL_DMA_Init+0x174>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a24      	ldr	r2, [pc, #144]	; (8002790 <HAL_DMA_Init+0x1ec>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_DMA_Init+0x174>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_DMA_Init+0x1f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_DMA_Init+0x174>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_DMA_Init+0x1f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <HAL_DMA_Init+0x186>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e007      	b.n	800273a <HAL_DMA_Init+0x196>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800273a:	e02f      	b.n	800279c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273c:	f7ff fde6 	bl	800230c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b05      	cmp	r3, #5
 8002748:	d928      	bls.n	800279c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e246      	b.n	8002bea <HAL_DMA_Init+0x646>
 800275c:	40020010 	.word	0x40020010
 8002760:	40020028 	.word	0x40020028
 8002764:	40020040 	.word	0x40020040
 8002768:	40020058 	.word	0x40020058
 800276c:	40020070 	.word	0x40020070
 8002770:	40020088 	.word	0x40020088
 8002774:	400200a0 	.word	0x400200a0
 8002778:	400200b8 	.word	0x400200b8
 800277c:	40020410 	.word	0x40020410
 8002780:	40020428 	.word	0x40020428
 8002784:	40020440 	.word	0x40020440
 8002788:	40020458 	.word	0x40020458
 800278c:	40020470 	.word	0x40020470
 8002790:	40020488 	.word	0x40020488
 8002794:	400204a0 	.word	0x400204a0
 8002798:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1c8      	bne.n	800273c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_DMA_Init+0x420>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80027c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	4313      	orrs	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002800:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <HAL_DMA_Init+0x424>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b71      	ldr	r3, [pc, #452]	; (80029cc <HAL_DMA_Init+0x428>)
 8002806:	4013      	ands	r3, r2
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d328      	bcc.n	8002860 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b28      	cmp	r3, #40	; 0x28
 8002814:	d903      	bls.n	800281e <HAL_DMA_Init+0x27a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b2e      	cmp	r3, #46	; 0x2e
 800281c:	d917      	bls.n	800284e <HAL_DMA_Init+0x2aa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b3e      	cmp	r3, #62	; 0x3e
 8002824:	d903      	bls.n	800282e <HAL_DMA_Init+0x28a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b42      	cmp	r3, #66	; 0x42
 800282c:	d90f      	bls.n	800284e <HAL_DMA_Init+0x2aa>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b46      	cmp	r3, #70	; 0x46
 8002834:	d903      	bls.n	800283e <HAL_DMA_Init+0x29a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b48      	cmp	r3, #72	; 0x48
 800283c:	d907      	bls.n	800284e <HAL_DMA_Init+0x2aa>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b4e      	cmp	r3, #78	; 0x4e
 8002844:	d905      	bls.n	8002852 <HAL_DMA_Init+0x2ae>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b52      	cmp	r3, #82	; 0x52
 800284c:	d801      	bhi.n	8002852 <HAL_DMA_Init+0x2ae>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_DMA_Init+0x2b0>
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0307 	bic.w	r3, r3, #7
 8002876:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2b04      	cmp	r3, #4
 8002888:	d117      	bne.n	80028ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f002 fb31 	bl	8004f04 <DMA_CheckFifoParam>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e197      	b.n	8002bea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f002 fa6c 	bl	8004da0 <DMA_CalcBaseAndBitshift>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e0cd      	b.n	8002a7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_DMA_Init+0x42c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Init+0x38a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a39      	ldr	r2, [pc, #228]	; (80029d4 <HAL_DMA_Init+0x430>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Init+0x38a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a38      	ldr	r2, [pc, #224]	; (80029d8 <HAL_DMA_Init+0x434>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Init+0x38a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a36      	ldr	r2, [pc, #216]	; (80029dc <HAL_DMA_Init+0x438>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Init+0x38a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <HAL_DMA_Init+0x43c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Init+0x38a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <HAL_DMA_Init+0x440>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Init+0x38a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <HAL_DMA_Init+0x444>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Init+0x38a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a30      	ldr	r2, [pc, #192]	; (80029ec <HAL_DMA_Init+0x448>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_DMA_Init+0x38e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_DMA_Init+0x390>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8097 	beq.w	8002a68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <HAL_DMA_Init+0x42c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d021      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_DMA_Init+0x430>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01c      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <HAL_DMA_Init+0x434>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d017      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <HAL_DMA_Init+0x438>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d012      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <HAL_DMA_Init+0x43c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00d      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_DMA_Init+0x440>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d008      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_DMA_Init+0x444>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <HAL_DMA_Init+0x3e4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_DMA_Init+0x448>)
 8002986:	4293      	cmp	r3, r2
 8002988:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_DMA_Init+0x44c>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d020      	beq.n	80029f4 <HAL_DMA_Init+0x450>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b80      	cmp	r3, #128	; 0x80
 80029b8:	d102      	bne.n	80029c0 <HAL_DMA_Init+0x41c>
 80029ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029be:	e01a      	b.n	80029f6 <HAL_DMA_Init+0x452>
 80029c0:	2300      	movs	r3, #0
 80029c2:	e018      	b.n	80029f6 <HAL_DMA_Init+0x452>
 80029c4:	fe10803f 	.word	0xfe10803f
 80029c8:	5c001000 	.word	0x5c001000
 80029cc:	ffff0000 	.word	0xffff0000
 80029d0:	58025408 	.word	0x58025408
 80029d4:	5802541c 	.word	0x5802541c
 80029d8:	58025430 	.word	0x58025430
 80029dc:	58025444 	.word	0x58025444
 80029e0:	58025458 	.word	0x58025458
 80029e4:	5802546c 	.word	0x5802546c
 80029e8:	58025480 	.word	0x58025480
 80029ec:	58025494 	.word	0x58025494
 80029f0:	fffe000f 	.word	0xfffe000f
 80029f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b6e      	ldr	r3, [pc, #440]	; (8002bf4 <HAL_DMA_Init+0x650>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	4a6e      	ldr	r2, [pc, #440]	; (8002bf8 <HAL_DMA_Init+0x654>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	009a      	lsls	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f002 f9a7 	bl	8004da0 <DMA_CalcBaseAndBitshift>
 8002a52:	4603      	mov	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2201      	movs	r2, #1
 8002a60:	409a      	lsls	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e008      	b.n	8002a7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0b7      	b.n	8002bea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5f      	ldr	r2, [pc, #380]	; (8002bfc <HAL_DMA_Init+0x658>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d072      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <HAL_DMA_Init+0x65c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d06d      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5c      	ldr	r2, [pc, #368]	; (8002c04 <HAL_DMA_Init+0x660>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d068      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <HAL_DMA_Init+0x664>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d063      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a59      	ldr	r2, [pc, #356]	; (8002c0c <HAL_DMA_Init+0x668>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d05e      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_DMA_Init+0x66c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d059      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_DMA_Init+0x670>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d054      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_DMA_Init+0x674>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d04f      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_DMA_Init+0x678>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d04a      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_DMA_Init+0x67c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d045      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_DMA_Init+0x680>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d040      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4e      	ldr	r2, [pc, #312]	; (8002c28 <HAL_DMA_Init+0x684>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d03b      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_DMA_Init+0x688>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d036      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_DMA_Init+0x68c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d031      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <HAL_DMA_Init+0x690>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d02c      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a48      	ldr	r2, [pc, #288]	; (8002c38 <HAL_DMA_Init+0x694>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d027      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a47      	ldr	r2, [pc, #284]	; (8002c3c <HAL_DMA_Init+0x698>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_DMA_Init+0x69c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01d      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a44      	ldr	r2, [pc, #272]	; (8002c44 <HAL_DMA_Init+0x6a0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_DMA_Init+0x6a4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a41      	ldr	r2, [pc, #260]	; (8002c4c <HAL_DMA_Init+0x6a8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <HAL_DMA_Init+0x6ac>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3e      	ldr	r2, [pc, #248]	; (8002c54 <HAL_DMA_Init+0x6b0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_DMA_Init+0x5c6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <HAL_DMA_Init+0x6b4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_DMA_Init+0x5ca>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_Init+0x5cc>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d032      	beq.n	8002bda <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f002 fa41 	bl	8004ffc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d102      	bne.n	8002b88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_DMA_Init+0x624>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d80c      	bhi.n	8002bc8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f002 fabe 	bl	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e008      	b.n	8002bda <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	a7fdabf8 	.word	0xa7fdabf8
 8002bf8:	cccccccd 	.word	0xcccccccd
 8002bfc:	40020010 	.word	0x40020010
 8002c00:	40020028 	.word	0x40020028
 8002c04:	40020040 	.word	0x40020040
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	40020070 	.word	0x40020070
 8002c10:	40020088 	.word	0x40020088
 8002c14:	400200a0 	.word	0x400200a0
 8002c18:	400200b8 	.word	0x400200b8
 8002c1c:	40020410 	.word	0x40020410
 8002c20:	40020428 	.word	0x40020428
 8002c24:	40020440 	.word	0x40020440
 8002c28:	40020458 	.word	0x40020458
 8002c2c:	40020470 	.word	0x40020470
 8002c30:	40020488 	.word	0x40020488
 8002c34:	400204a0 	.word	0x400204a0
 8002c38:	400204b8 	.word	0x400204b8
 8002c3c:	58025408 	.word	0x58025408
 8002c40:	5802541c 	.word	0x5802541c
 8002c44:	58025430 	.word	0x58025430
 8002c48:	58025444 	.word	0x58025444
 8002c4c:	58025458 	.word	0x58025458
 8002c50:	5802546c 	.word	0x5802546c
 8002c54:	58025480 	.word	0x58025480
 8002c58:	58025494 	.word	0x58025494

08002c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e226      	b.n	80030c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Start_IT+0x2a>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e21f      	b.n	80030c6 <HAL_DMA_Start_IT+0x46a>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	f040 820a 	bne.w	80030b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_DMA_Start_IT+0x1f4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a66      	ldr	r2, [pc, #408]	; (8002e54 <HAL_DMA_Start_IT+0x1f8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_DMA_Start_IT+0x1fc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a63      	ldr	r2, [pc, #396]	; (8002e5c <HAL_DMA_Start_IT+0x200>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <HAL_DMA_Start_IT+0x204>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a60      	ldr	r2, [pc, #384]	; (8002e64 <HAL_DMA_Start_IT+0x208>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5f      	ldr	r2, [pc, #380]	; (8002e68 <HAL_DMA_Start_IT+0x20c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <HAL_DMA_Start_IT+0x210>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_DMA_Start_IT+0x214>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <HAL_DMA_Start_IT+0x218>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a59      	ldr	r2, [pc, #356]	; (8002e78 <HAL_DMA_Start_IT+0x21c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_DMA_Start_IT+0x220>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_DMA_Start_IT+0x224>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a54      	ldr	r2, [pc, #336]	; (8002e84 <HAL_DMA_Start_IT+0x228>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a53      	ldr	r2, [pc, #332]	; (8002e88 <HAL_DMA_Start_IT+0x22c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_Start_IT+0xee>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_DMA_Start_IT+0x230>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <HAL_DMA_Start_IT+0x100>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e007      	b.n	8002d6c <HAL_DMA_Start_IT+0x110>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f001 fe68 	bl	8004a48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_DMA_Start_IT+0x1f4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a33      	ldr	r2, [pc, #204]	; (8002e54 <HAL_DMA_Start_IT+0x1f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a31      	ldr	r2, [pc, #196]	; (8002e58 <HAL_DMA_Start_IT+0x1fc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_DMA_Start_IT+0x200>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_DMA_Start_IT+0x204>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <HAL_DMA_Start_IT+0x208>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2b      	ldr	r2, [pc, #172]	; (8002e68 <HAL_DMA_Start_IT+0x20c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_DMA_Start_IT+0x210>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <HAL_DMA_Start_IT+0x214>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_DMA_Start_IT+0x218>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <HAL_DMA_Start_IT+0x21c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_DMA_Start_IT+0x220>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_DMA_Start_IT+0x224>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <HAL_DMA_Start_IT+0x228>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <HAL_DMA_Start_IT+0x22c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_Start_IT+0x1bc>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_DMA_Start_IT+0x230>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_DMA_Start_IT+0x1c0>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_DMA_Start_IT+0x1c2>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d036      	beq.n	8002e90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 021e 	bic.w	r2, r3, #30
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0216 	orr.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d03e      	beq.n	8002ebc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	e035      	b.n	8002ebc <HAL_DMA_Start_IT+0x260>
 8002e50:	40020010 	.word	0x40020010
 8002e54:	40020028 	.word	0x40020028
 8002e58:	40020040 	.word	0x40020040
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	40020070 	.word	0x40020070
 8002e64:	40020088 	.word	0x40020088
 8002e68:	400200a0 	.word	0x400200a0
 8002e6c:	400200b8 	.word	0x400200b8
 8002e70:	40020410 	.word	0x40020410
 8002e74:	40020428 	.word	0x40020428
 8002e78:	40020440 	.word	0x40020440
 8002e7c:	40020458 	.word	0x40020458
 8002e80:	40020470 	.word	0x40020470
 8002e84:	40020488 	.word	0x40020488
 8002e88:	400204a0 	.word	0x400204a0
 8002e8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 020e 	bic.w	r2, r3, #14
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 020a 	orr.w	r2, r2, #10
 8002ea2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0204 	orr.w	r2, r2, #4
 8002eba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a83      	ldr	r2, [pc, #524]	; (80030d0 <HAL_DMA_Start_IT+0x474>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d072      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a82      	ldr	r2, [pc, #520]	; (80030d4 <HAL_DMA_Start_IT+0x478>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d06d      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a80      	ldr	r2, [pc, #512]	; (80030d8 <HAL_DMA_Start_IT+0x47c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d068      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_DMA_Start_IT+0x480>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d063      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <HAL_DMA_Start_IT+0x484>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d05e      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <HAL_DMA_Start_IT+0x488>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d059      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a7a      	ldr	r2, [pc, #488]	; (80030e8 <HAL_DMA_Start_IT+0x48c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d054      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a79      	ldr	r2, [pc, #484]	; (80030ec <HAL_DMA_Start_IT+0x490>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04f      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_DMA_Start_IT+0x494>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d04a      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a76      	ldr	r2, [pc, #472]	; (80030f4 <HAL_DMA_Start_IT+0x498>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d045      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a74      	ldr	r2, [pc, #464]	; (80030f8 <HAL_DMA_Start_IT+0x49c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d040      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a73      	ldr	r2, [pc, #460]	; (80030fc <HAL_DMA_Start_IT+0x4a0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d03b      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a71      	ldr	r2, [pc, #452]	; (8003100 <HAL_DMA_Start_IT+0x4a4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d036      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a70      	ldr	r2, [pc, #448]	; (8003104 <HAL_DMA_Start_IT+0x4a8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d031      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_DMA_Start_IT+0x4ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02c      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6d      	ldr	r2, [pc, #436]	; (800310c <HAL_DMA_Start_IT+0x4b0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d027      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6b      	ldr	r2, [pc, #428]	; (8003110 <HAL_DMA_Start_IT+0x4b4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d022      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_DMA_Start_IT+0x4b8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d01d      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a68      	ldr	r2, [pc, #416]	; (8003118 <HAL_DMA_Start_IT+0x4bc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a67      	ldr	r2, [pc, #412]	; (800311c <HAL_DMA_Start_IT+0x4c0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_DMA_Start_IT+0x4c4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a64      	ldr	r2, [pc, #400]	; (8003124 <HAL_DMA_Start_IT+0x4c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a62      	ldr	r2, [pc, #392]	; (8003128 <HAL_DMA_Start_IT+0x4cc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_DMA_Start_IT+0x350>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a61      	ldr	r2, [pc, #388]	; (800312c <HAL_DMA_Start_IT+0x4d0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Start_IT+0x354>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_DMA_Start_IT+0x356>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01a      	beq.n	8002fec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a37      	ldr	r2, [pc, #220]	; (80030d0 <HAL_DMA_Start_IT+0x474>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04a      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a36      	ldr	r2, [pc, #216]	; (80030d4 <HAL_DMA_Start_IT+0x478>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d045      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <HAL_DMA_Start_IT+0x47c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d040      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a33      	ldr	r2, [pc, #204]	; (80030dc <HAL_DMA_Start_IT+0x480>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d03b      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a31      	ldr	r2, [pc, #196]	; (80030e0 <HAL_DMA_Start_IT+0x484>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d036      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <HAL_DMA_Start_IT+0x488>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d031      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2e      	ldr	r2, [pc, #184]	; (80030e8 <HAL_DMA_Start_IT+0x48c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02c      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <HAL_DMA_Start_IT+0x490>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d027      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <HAL_DMA_Start_IT+0x494>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2a      	ldr	r2, [pc, #168]	; (80030f4 <HAL_DMA_Start_IT+0x498>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_DMA_Start_IT+0x49c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a27      	ldr	r2, [pc, #156]	; (80030fc <HAL_DMA_Start_IT+0x4a0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a25      	ldr	r2, [pc, #148]	; (8003100 <HAL_DMA_Start_IT+0x4a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_DMA_Start_IT+0x4a8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a22      	ldr	r2, [pc, #136]	; (8003108 <HAL_DMA_Start_IT+0x4ac>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_DMA_Start_IT+0x430>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a21      	ldr	r2, [pc, #132]	; (800310c <HAL_DMA_Start_IT+0x4b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <HAL_DMA_Start_IT+0x442>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e012      	b.n	80030c4 <HAL_DMA_Start_IT+0x468>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e009      	b.n	80030c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40020010 	.word	0x40020010
 80030d4:	40020028 	.word	0x40020028
 80030d8:	40020040 	.word	0x40020040
 80030dc:	40020058 	.word	0x40020058
 80030e0:	40020070 	.word	0x40020070
 80030e4:	40020088 	.word	0x40020088
 80030e8:	400200a0 	.word	0x400200a0
 80030ec:	400200b8 	.word	0x400200b8
 80030f0:	40020410 	.word	0x40020410
 80030f4:	40020428 	.word	0x40020428
 80030f8:	40020440 	.word	0x40020440
 80030fc:	40020458 	.word	0x40020458
 8003100:	40020470 	.word	0x40020470
 8003104:	40020488 	.word	0x40020488
 8003108:	400204a0 	.word	0x400204a0
 800310c:	400204b8 	.word	0x400204b8
 8003110:	58025408 	.word	0x58025408
 8003114:	5802541c 	.word	0x5802541c
 8003118:	58025430 	.word	0x58025430
 800311c:	58025444 	.word	0x58025444
 8003120:	58025458 	.word	0x58025458
 8003124:	5802546c 	.word	0x5802546c
 8003128:	58025480 	.word	0x58025480
 800312c:	58025494 	.word	0x58025494

08003130 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff f8e8 	bl	800230c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e2dc      	b.n	8003702 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d008      	beq.n	8003166 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e2cd      	b.n	8003702 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a76      	ldr	r2, [pc, #472]	; (8003344 <HAL_DMA_Abort+0x214>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d04a      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a74      	ldr	r2, [pc, #464]	; (8003348 <HAL_DMA_Abort+0x218>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d045      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a73      	ldr	r2, [pc, #460]	; (800334c <HAL_DMA_Abort+0x21c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d040      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a71      	ldr	r2, [pc, #452]	; (8003350 <HAL_DMA_Abort+0x220>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d03b      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_DMA_Abort+0x224>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d036      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_DMA_Abort+0x228>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d031      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6d      	ldr	r2, [pc, #436]	; (800335c <HAL_DMA_Abort+0x22c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d02c      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6b      	ldr	r2, [pc, #428]	; (8003360 <HAL_DMA_Abort+0x230>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d027      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_DMA_Abort+0x234>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_DMA_Abort+0x238>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01d      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a67      	ldr	r2, [pc, #412]	; (800336c <HAL_DMA_Abort+0x23c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d018      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_DMA_Abort+0x240>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a64      	ldr	r2, [pc, #400]	; (8003374 <HAL_DMA_Abort+0x244>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a62      	ldr	r2, [pc, #392]	; (8003378 <HAL_DMA_Abort+0x248>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a61      	ldr	r2, [pc, #388]	; (800337c <HAL_DMA_Abort+0x24c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_DMA_Abort+0xd6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a5f      	ldr	r2, [pc, #380]	; (8003380 <HAL_DMA_Abort+0x250>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_DMA_Abort+0xda>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_DMA_Abort+0xdc>
 800320a:	2300      	movs	r3, #0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 021e 	bic.w	r2, r2, #30
 800321e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e00a      	b.n	800324e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 020e 	bic.w	r2, r2, #14
 8003246:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a3c      	ldr	r2, [pc, #240]	; (8003344 <HAL_DMA_Abort+0x214>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d072      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <HAL_DMA_Abort+0x218>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d06d      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a39      	ldr	r2, [pc, #228]	; (800334c <HAL_DMA_Abort+0x21c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d068      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a37      	ldr	r2, [pc, #220]	; (8003350 <HAL_DMA_Abort+0x220>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d063      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a36      	ldr	r2, [pc, #216]	; (8003354 <HAL_DMA_Abort+0x224>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d05e      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_DMA_Abort+0x228>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d059      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_DMA_Abort+0x22c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d054      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_DMA_Abort+0x230>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d04f      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <HAL_DMA_Abort+0x234>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d04a      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_DMA_Abort+0x238>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d045      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <HAL_DMA_Abort+0x23c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d040      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <HAL_DMA_Abort+0x240>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d03b      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_DMA_Abort+0x244>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d036      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_DMA_Abort+0x248>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d031      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_DMA_Abort+0x24c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d02c      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <HAL_DMA_Abort+0x250>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d027      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_DMA_Abort+0x254>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_DMA_Abort+0x258>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01d      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_DMA_Abort+0x25c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_DMA_Abort+0x260>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_DMA_Abort+0x264>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_DMA_Abort+0x268>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_DMA_Abort+0x26c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_DMA_Abort+0x20e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <HAL_DMA_Abort+0x270>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d132      	bne.n	80033a4 <HAL_DMA_Abort+0x274>
 800333e:	2301      	movs	r3, #1
 8003340:	e031      	b.n	80033a6 <HAL_DMA_Abort+0x276>
 8003342:	bf00      	nop
 8003344:	40020010 	.word	0x40020010
 8003348:	40020028 	.word	0x40020028
 800334c:	40020040 	.word	0x40020040
 8003350:	40020058 	.word	0x40020058
 8003354:	40020070 	.word	0x40020070
 8003358:	40020088 	.word	0x40020088
 800335c:	400200a0 	.word	0x400200a0
 8003360:	400200b8 	.word	0x400200b8
 8003364:	40020410 	.word	0x40020410
 8003368:	40020428 	.word	0x40020428
 800336c:	40020440 	.word	0x40020440
 8003370:	40020458 	.word	0x40020458
 8003374:	40020470 	.word	0x40020470
 8003378:	40020488 	.word	0x40020488
 800337c:	400204a0 	.word	0x400204a0
 8003380:	400204b8 	.word	0x400204b8
 8003384:	58025408 	.word	0x58025408
 8003388:	5802541c 	.word	0x5802541c
 800338c:	58025430 	.word	0x58025430
 8003390:	58025444 	.word	0x58025444
 8003394:	58025458 	.word	0x58025458
 8003398:	5802546c 	.word	0x5802546c
 800339c:	58025480 	.word	0x58025480
 80033a0:	58025494 	.word	0x58025494
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <HAL_DMA_Abort+0x444>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d04a      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6b      	ldr	r2, [pc, #428]	; (8003578 <HAL_DMA_Abort+0x448>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d045      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_DMA_Abort+0x44c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d040      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_DMA_Abort+0x450>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d03b      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a67      	ldr	r2, [pc, #412]	; (8003584 <HAL_DMA_Abort+0x454>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d036      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_DMA_Abort+0x458>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a64      	ldr	r2, [pc, #400]	; (800358c <HAL_DMA_Abort+0x45c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d02c      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a62      	ldr	r2, [pc, #392]	; (8003590 <HAL_DMA_Abort+0x460>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d027      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a61      	ldr	r2, [pc, #388]	; (8003594 <HAL_DMA_Abort+0x464>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5f      	ldr	r2, [pc, #380]	; (8003598 <HAL_DMA_Abort+0x468>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5e      	ldr	r2, [pc, #376]	; (800359c <HAL_DMA_Abort+0x46c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d018      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5c      	ldr	r2, [pc, #368]	; (80035a0 <HAL_DMA_Abort+0x470>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <HAL_DMA_Abort+0x474>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a59      	ldr	r2, [pc, #356]	; (80035a8 <HAL_DMA_Abort+0x478>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_DMA_Abort+0x47c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_DMA_Abort+0x32a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a56      	ldr	r2, [pc, #344]	; (80035b0 <HAL_DMA_Abort+0x480>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <HAL_DMA_Abort+0x33c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e007      	b.n	800347c <HAL_DMA_Abort+0x34c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800347c:	e013      	b.n	80034a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800347e:	f7fe ff45 	bl	800230c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b05      	cmp	r3, #5
 800348a:	d90c      	bls.n	80034a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e12d      	b.n	8003702 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <HAL_DMA_Abort+0x444>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <HAL_DMA_Abort+0x448>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2c      	ldr	r2, [pc, #176]	; (800357c <HAL_DMA_Abort+0x44c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <HAL_DMA_Abort+0x450>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a29      	ldr	r2, [pc, #164]	; (8003584 <HAL_DMA_Abort+0x454>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	; (8003588 <HAL_DMA_Abort+0x458>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_DMA_Abort+0x45c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a24      	ldr	r2, [pc, #144]	; (8003590 <HAL_DMA_Abort+0x460>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_DMA_Abort+0x464>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <HAL_DMA_Abort+0x468>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a20      	ldr	r2, [pc, #128]	; (800359c <HAL_DMA_Abort+0x46c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_DMA_Abort+0x470>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_DMA_Abort+0x474>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_DMA_Abort+0x478>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_DMA_Abort+0x47c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_Abort+0x422>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <HAL_DMA_Abort+0x480>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Abort+0x426>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_DMA_Abort+0x428>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02b      	beq.n	80035b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	223f      	movs	r2, #63	; 0x3f
 800356c:	409a      	lsls	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	e02a      	b.n	80035ca <HAL_DMA_Abort+0x49a>
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2201      	movs	r2, #1
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4f      	ldr	r2, [pc, #316]	; (800370c <HAL_DMA_Abort+0x5dc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d072      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a4d      	ldr	r2, [pc, #308]	; (8003710 <HAL_DMA_Abort+0x5e0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d06d      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4c      	ldr	r2, [pc, #304]	; (8003714 <HAL_DMA_Abort+0x5e4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d068      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_DMA_Abort+0x5e8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d063      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a49      	ldr	r2, [pc, #292]	; (800371c <HAL_DMA_Abort+0x5ec>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d05e      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a47      	ldr	r2, [pc, #284]	; (8003720 <HAL_DMA_Abort+0x5f0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d059      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a46      	ldr	r2, [pc, #280]	; (8003724 <HAL_DMA_Abort+0x5f4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d054      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a44      	ldr	r2, [pc, #272]	; (8003728 <HAL_DMA_Abort+0x5f8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d04f      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a43      	ldr	r2, [pc, #268]	; (800372c <HAL_DMA_Abort+0x5fc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d04a      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a41      	ldr	r2, [pc, #260]	; (8003730 <HAL_DMA_Abort+0x600>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d045      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a40      	ldr	r2, [pc, #256]	; (8003734 <HAL_DMA_Abort+0x604>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d040      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <HAL_DMA_Abort+0x608>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d03b      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a3d      	ldr	r2, [pc, #244]	; (800373c <HAL_DMA_Abort+0x60c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d036      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <HAL_DMA_Abort+0x610>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <HAL_DMA_Abort+0x614>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d02c      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a38      	ldr	r2, [pc, #224]	; (8003748 <HAL_DMA_Abort+0x618>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d027      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a37      	ldr	r2, [pc, #220]	; (800374c <HAL_DMA_Abort+0x61c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a35      	ldr	r2, [pc, #212]	; (8003750 <HAL_DMA_Abort+0x620>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a34      	ldr	r2, [pc, #208]	; (8003754 <HAL_DMA_Abort+0x624>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a32      	ldr	r2, [pc, #200]	; (8003758 <HAL_DMA_Abort+0x628>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a31      	ldr	r2, [pc, #196]	; (800375c <HAL_DMA_Abort+0x62c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <HAL_DMA_Abort+0x630>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2e      	ldr	r2, [pc, #184]	; (8003764 <HAL_DMA_Abort+0x634>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_Abort+0x58a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <HAL_DMA_Abort+0x638>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_DMA_Abort+0x58e>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_DMA_Abort+0x590>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40020010 	.word	0x40020010
 8003710:	40020028 	.word	0x40020028
 8003714:	40020040 	.word	0x40020040
 8003718:	40020058 	.word	0x40020058
 800371c:	40020070 	.word	0x40020070
 8003720:	40020088 	.word	0x40020088
 8003724:	400200a0 	.word	0x400200a0
 8003728:	400200b8 	.word	0x400200b8
 800372c:	40020410 	.word	0x40020410
 8003730:	40020428 	.word	0x40020428
 8003734:	40020440 	.word	0x40020440
 8003738:	40020458 	.word	0x40020458
 800373c:	40020470 	.word	0x40020470
 8003740:	40020488 	.word	0x40020488
 8003744:	400204a0 	.word	0x400204a0
 8003748:	400204b8 	.word	0x400204b8
 800374c:	58025408 	.word	0x58025408
 8003750:	5802541c 	.word	0x5802541c
 8003754:	58025430 	.word	0x58025430
 8003758:	58025444 	.word	0x58025444
 800375c:	58025458 	.word	0x58025458
 8003760:	5802546c 	.word	0x5802546c
 8003764:	58025480 	.word	0x58025480
 8003768:	58025494 	.word	0x58025494

0800376c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e205      	b.n	8003b8a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d004      	beq.n	8003794 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e1fa      	b.n	8003b8a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a8c      	ldr	r2, [pc, #560]	; (80039cc <HAL_DMA_Abort_IT+0x260>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d04a      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a8b      	ldr	r2, [pc, #556]	; (80039d0 <HAL_DMA_Abort_IT+0x264>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d045      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a89      	ldr	r2, [pc, #548]	; (80039d4 <HAL_DMA_Abort_IT+0x268>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d040      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a88      	ldr	r2, [pc, #544]	; (80039d8 <HAL_DMA_Abort_IT+0x26c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d03b      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a86      	ldr	r2, [pc, #536]	; (80039dc <HAL_DMA_Abort_IT+0x270>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d036      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a85      	ldr	r2, [pc, #532]	; (80039e0 <HAL_DMA_Abort_IT+0x274>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d031      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a83      	ldr	r2, [pc, #524]	; (80039e4 <HAL_DMA_Abort_IT+0x278>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02c      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a82      	ldr	r2, [pc, #520]	; (80039e8 <HAL_DMA_Abort_IT+0x27c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d027      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_DMA_Abort_IT+0x280>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7f      	ldr	r2, [pc, #508]	; (80039f0 <HAL_DMA_Abort_IT+0x284>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d01d      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7d      	ldr	r2, [pc, #500]	; (80039f4 <HAL_DMA_Abort_IT+0x288>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_DMA_Abort_IT+0x28c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7a      	ldr	r2, [pc, #488]	; (80039fc <HAL_DMA_Abort_IT+0x290>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a79      	ldr	r2, [pc, #484]	; (8003a00 <HAL_DMA_Abort_IT+0x294>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a77      	ldr	r2, [pc, #476]	; (8003a04 <HAL_DMA_Abort_IT+0x298>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_DMA_Abort_IT+0xc8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a76      	ldr	r2, [pc, #472]	; (8003a08 <HAL_DMA_Abort_IT+0x29c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_DMA_Abort_IT+0xcc>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_DMA_Abort_IT+0xce>
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d065      	beq.n	800390a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a60      	ldr	r2, [pc, #384]	; (80039cc <HAL_DMA_Abort_IT+0x260>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d04a      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <HAL_DMA_Abort_IT+0x264>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d045      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <HAL_DMA_Abort_IT+0x268>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d040      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a5b      	ldr	r2, [pc, #364]	; (80039d8 <HAL_DMA_Abort_IT+0x26c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d03b      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a5a      	ldr	r2, [pc, #360]	; (80039dc <HAL_DMA_Abort_IT+0x270>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d036      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a58      	ldr	r2, [pc, #352]	; (80039e0 <HAL_DMA_Abort_IT+0x274>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d031      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a57      	ldr	r2, [pc, #348]	; (80039e4 <HAL_DMA_Abort_IT+0x278>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d02c      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a55      	ldr	r2, [pc, #340]	; (80039e8 <HAL_DMA_Abort_IT+0x27c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d027      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a54      	ldr	r2, [pc, #336]	; (80039ec <HAL_DMA_Abort_IT+0x280>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_DMA_Abort_IT+0x284>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01d      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a51      	ldr	r2, [pc, #324]	; (80039f4 <HAL_DMA_Abort_IT+0x288>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4f      	ldr	r2, [pc, #316]	; (80039f8 <HAL_DMA_Abort_IT+0x28c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4e      	ldr	r2, [pc, #312]	; (80039fc <HAL_DMA_Abort_IT+0x290>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	; (8003a00 <HAL_DMA_Abort_IT+0x294>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_DMA_Abort_IT+0x298>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x17a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a49      	ldr	r2, [pc, #292]	; (8003a08 <HAL_DMA_Abort_IT+0x29c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d108      	bne.n	80038f8 <HAL_DMA_Abort_IT+0x18c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e147      	b.n	8003b88 <HAL_DMA_Abort_IT+0x41c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e13e      	b.n	8003b88 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 020e 	bic.w	r2, r2, #14
 8003918:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_DMA_Abort_IT+0x260>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04a      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <HAL_DMA_Abort_IT+0x264>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d045      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_DMA_Abort_IT+0x268>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d040      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_DMA_Abort_IT+0x26c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d03b      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_DMA_Abort_IT+0x270>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d036      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <HAL_DMA_Abort_IT+0x274>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d031      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_DMA_Abort_IT+0x278>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d02c      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <HAL_DMA_Abort_IT+0x27c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d027      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_DMA_Abort_IT+0x280>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_DMA_Abort_IT+0x284>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_DMA_Abort_IT+0x288>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <HAL_DMA_Abort_IT+0x28c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_DMA_Abort_IT+0x290>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_DMA_Abort_IT+0x294>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <HAL_DMA_Abort_IT+0x298>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <HAL_DMA_Abort_IT+0x29c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d128      	bne.n	8003a0c <HAL_DMA_Abort_IT+0x2a0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e027      	b.n	8003a1c <HAL_DMA_Abort_IT+0x2b0>
 80039cc:	40020010 	.word	0x40020010
 80039d0:	40020028 	.word	0x40020028
 80039d4:	40020040 	.word	0x40020040
 80039d8:	40020058 	.word	0x40020058
 80039dc:	40020070 	.word	0x40020070
 80039e0:	40020088 	.word	0x40020088
 80039e4:	400200a0 	.word	0x400200a0
 80039e8:	400200b8 	.word	0x400200b8
 80039ec:	40020410 	.word	0x40020410
 80039f0:	40020428 	.word	0x40020428
 80039f4:	40020440 	.word	0x40020440
 80039f8:	40020458 	.word	0x40020458
 80039fc:	40020470 	.word	0x40020470
 8003a00:	40020488 	.word	0x40020488
 8003a04:	400204a0 	.word	0x400204a0
 8003a08:	400204b8 	.word	0x400204b8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5c      	ldr	r2, [pc, #368]	; (8003b94 <HAL_DMA_Abort_IT+0x428>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d072      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5b      	ldr	r2, [pc, #364]	; (8003b98 <HAL_DMA_Abort_IT+0x42c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d06d      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a59      	ldr	r2, [pc, #356]	; (8003b9c <HAL_DMA_Abort_IT+0x430>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d068      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_DMA_Abort_IT+0x434>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d063      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a56      	ldr	r2, [pc, #344]	; (8003ba4 <HAL_DMA_Abort_IT+0x438>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d05e      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a55      	ldr	r2, [pc, #340]	; (8003ba8 <HAL_DMA_Abort_IT+0x43c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d059      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a53      	ldr	r2, [pc, #332]	; (8003bac <HAL_DMA_Abort_IT+0x440>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d054      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_DMA_Abort_IT+0x444>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d04f      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a50      	ldr	r2, [pc, #320]	; (8003bb4 <HAL_DMA_Abort_IT+0x448>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d04a      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a4f      	ldr	r2, [pc, #316]	; (8003bb8 <HAL_DMA_Abort_IT+0x44c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d045      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_DMA_Abort_IT+0x450>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d040      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a4c      	ldr	r2, [pc, #304]	; (8003bc0 <HAL_DMA_Abort_IT+0x454>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d03b      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <HAL_DMA_Abort_IT+0x458>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d036      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_DMA_Abort_IT+0x45c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d031      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <HAL_DMA_Abort_IT+0x460>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02c      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <HAL_DMA_Abort_IT+0x464>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d027      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a44      	ldr	r2, [pc, #272]	; (8003bd4 <HAL_DMA_Abort_IT+0x468>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d022      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a43      	ldr	r2, [pc, #268]	; (8003bd8 <HAL_DMA_Abort_IT+0x46c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d01d      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <HAL_DMA_Abort_IT+0x470>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d018      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <HAL_DMA_Abort_IT+0x474>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3e      	ldr	r2, [pc, #248]	; (8003be4 <HAL_DMA_Abort_IT+0x478>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <HAL_DMA_Abort_IT+0x47c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <HAL_DMA_Abort_IT+0x480>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x3a0>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <HAL_DMA_Abort_IT+0x484>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_DMA_Abort_IT+0x3a4>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_DMA_Abort_IT+0x3a6>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	40020058 	.word	0x40020058
 8003ba4:	40020070 	.word	0x40020070
 8003ba8:	40020088 	.word	0x40020088
 8003bac:	400200a0 	.word	0x400200a0
 8003bb0:	400200b8 	.word	0x400200b8
 8003bb4:	40020410 	.word	0x40020410
 8003bb8:	40020428 	.word	0x40020428
 8003bbc:	40020440 	.word	0x40020440
 8003bc0:	40020458 	.word	0x40020458
 8003bc4:	40020470 	.word	0x40020470
 8003bc8:	40020488 	.word	0x40020488
 8003bcc:	400204a0 	.word	0x400204a0
 8003bd0:	400204b8 	.word	0x400204b8
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494

08003bf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_DMA_IRQHandler+0x1ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a67      	ldr	r2, [pc, #412]	; (8003da4 <HAL_DMA_IRQHandler+0x1b0>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0a9b      	lsrs	r3, r3, #10
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5f      	ldr	r2, [pc, #380]	; (8003da8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d04a      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5d      	ldr	r2, [pc, #372]	; (8003dac <HAL_DMA_IRQHandler+0x1b8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d045      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	; (8003db0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d040      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a5a      	ldr	r2, [pc, #360]	; (8003db4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a59      	ldr	r2, [pc, #356]	; (8003db8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d036      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a57      	ldr	r2, [pc, #348]	; (8003dbc <HAL_DMA_IRQHandler+0x1c8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d031      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a56      	ldr	r2, [pc, #344]	; (8003dc0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d02c      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d027      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a53      	ldr	r2, [pc, #332]	; (8003dc8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_DMA_IRQHandler+0x1d8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01d      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a4e      	ldr	r2, [pc, #312]	; (8003dd4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4d      	ldr	r2, [pc, #308]	; (8003dd8 <HAL_DMA_IRQHandler+0x1e4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <HAL_DMA_IRQHandler+0x1e8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a4a      	ldr	r2, [pc, #296]	; (8003de0 <HAL_DMA_IRQHandler+0x1ec>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xd2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a48      	ldr	r2, [pc, #288]	; (8003de4 <HAL_DMA_IRQHandler+0x1f0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_DMA_IRQHandler+0xd6>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0xd8>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 842b 	beq.w	8004528 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2208      	movs	r2, #8
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80a2 	beq.w	8003e2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2e      	ldr	r2, [pc, #184]	; (8003da8 <HAL_DMA_IRQHandler+0x1b4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d04a      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <HAL_DMA_IRQHandler+0x1b8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d045      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d040      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d03b      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d036      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_DMA_IRQHandler+0x1c8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d031      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02c      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <HAL_DMA_IRQHandler+0x1d0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d027      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <HAL_DMA_IRQHandler+0x1d4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <HAL_DMA_IRQHandler+0x1d8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01d      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_DMA_IRQHandler+0x1e4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <HAL_DMA_IRQHandler+0x1e8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_DMA_IRQHandler+0x1ec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x194>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_DMA_IRQHandler+0x1f0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d12f      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x1f4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e02e      	b.n	8003dfc <HAL_DMA_IRQHandler+0x208>
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000
 8003da4:	1b4e81b5 	.word	0x1b4e81b5
 8003da8:	40020010 	.word	0x40020010
 8003dac:	40020028 	.word	0x40020028
 8003db0:	40020040 	.word	0x40020040
 8003db4:	40020058 	.word	0x40020058
 8003db8:	40020070 	.word	0x40020070
 8003dbc:	40020088 	.word	0x40020088
 8003dc0:	400200a0 	.word	0x400200a0
 8003dc4:	400200b8 	.word	0x400200b8
 8003dc8:	40020410 	.word	0x40020410
 8003dcc:	40020428 	.word	0x40020428
 8003dd0:	40020440 	.word	0x40020440
 8003dd4:	40020458 	.word	0x40020458
 8003dd8:	40020470 	.word	0x40020470
 8003ddc:	40020488 	.word	0x40020488
 8003de0:	400204a0 	.word	0x400204a0
 8003de4:	400204b8 	.word	0x400204b8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	2208      	movs	r2, #8
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d06e      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a69      	ldr	r2, [pc, #420]	; (8003fec <HAL_DMA_IRQHandler+0x3f8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d04a      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a67      	ldr	r2, [pc, #412]	; (8003ff0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d045      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a66      	ldr	r2, [pc, #408]	; (8003ff4 <HAL_DMA_IRQHandler+0x400>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d040      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a64      	ldr	r2, [pc, #400]	; (8003ff8 <HAL_DMA_IRQHandler+0x404>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d03b      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a63      	ldr	r2, [pc, #396]	; (8003ffc <HAL_DMA_IRQHandler+0x408>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d036      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a61      	ldr	r2, [pc, #388]	; (8004000 <HAL_DMA_IRQHandler+0x40c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d031      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a60      	ldr	r2, [pc, #384]	; (8004004 <HAL_DMA_IRQHandler+0x410>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d02c      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5e      	ldr	r2, [pc, #376]	; (8004008 <HAL_DMA_IRQHandler+0x414>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d027      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5d      	ldr	r2, [pc, #372]	; (800400c <HAL_DMA_IRQHandler+0x418>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5b      	ldr	r2, [pc, #364]	; (8004010 <HAL_DMA_IRQHandler+0x41c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a5a      	ldr	r2, [pc, #360]	; (8004014 <HAL_DMA_IRQHandler+0x420>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_DMA_IRQHandler+0x424>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_DMA_IRQHandler+0x428>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_DMA_IRQHandler+0x42c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_DMA_IRQHandler+0x430>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2ee>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_DMA_IRQHandler+0x434>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x304>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e003      	b.n	8003f00 <HAL_DMA_IRQHandler+0x30c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0202 	orr.w	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2204      	movs	r2, #4
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 808f 	beq.w	8004054 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_DMA_IRQHandler+0x3f8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d04a      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <HAL_DMA_IRQHandler+0x3fc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d045      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_DMA_IRQHandler+0x400>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d040      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <HAL_DMA_IRQHandler+0x404>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d03b      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_DMA_IRQHandler+0x408>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d036      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <HAL_DMA_IRQHandler+0x40c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d031      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_DMA_IRQHandler+0x410>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d02c      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a21      	ldr	r2, [pc, #132]	; (8004008 <HAL_DMA_IRQHandler+0x414>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d027      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a20      	ldr	r2, [pc, #128]	; (800400c <HAL_DMA_IRQHandler+0x418>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d022      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_DMA_IRQHandler+0x41c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01d      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <HAL_DMA_IRQHandler+0x420>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d018      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_DMA_IRQHandler+0x424>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_DMA_IRQHandler+0x428>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_DMA_IRQHandler+0x42c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_DMA_IRQHandler+0x430>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x3e2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <HAL_DMA_IRQHandler+0x434>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d12a      	bne.n	800402c <HAL_DMA_IRQHandler+0x438>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e023      	b.n	8004034 <HAL_DMA_IRQHandler+0x440>
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2204      	movs	r2, #4
 8004042:	409a      	lsls	r2, r3
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0204 	orr.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2210      	movs	r2, #16
 800405e:	409a      	lsls	r2, r3
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a6 	beq.w	80041b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a85      	ldr	r2, [pc, #532]	; (8004284 <HAL_DMA_IRQHandler+0x690>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d04a      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a83      	ldr	r2, [pc, #524]	; (8004288 <HAL_DMA_IRQHandler+0x694>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d045      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a82      	ldr	r2, [pc, #520]	; (800428c <HAL_DMA_IRQHandler+0x698>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d040      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a80      	ldr	r2, [pc, #512]	; (8004290 <HAL_DMA_IRQHandler+0x69c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d03b      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7f      	ldr	r2, [pc, #508]	; (8004294 <HAL_DMA_IRQHandler+0x6a0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d036      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a7d      	ldr	r2, [pc, #500]	; (8004298 <HAL_DMA_IRQHandler+0x6a4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7c      	ldr	r2, [pc, #496]	; (800429c <HAL_DMA_IRQHandler+0x6a8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d02c      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7a      	ldr	r2, [pc, #488]	; (80042a0 <HAL_DMA_IRQHandler+0x6ac>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d027      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a79      	ldr	r2, [pc, #484]	; (80042a4 <HAL_DMA_IRQHandler+0x6b0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_DMA_IRQHandler+0x6b4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01d      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a76      	ldr	r2, [pc, #472]	; (80042ac <HAL_DMA_IRQHandler+0x6b8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a74      	ldr	r2, [pc, #464]	; (80042b0 <HAL_DMA_IRQHandler+0x6bc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <HAL_DMA_IRQHandler+0x6c0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a71      	ldr	r2, [pc, #452]	; (80042b8 <HAL_DMA_IRQHandler+0x6c4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a70      	ldr	r2, [pc, #448]	; (80042bc <HAL_DMA_IRQHandler+0x6c8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_IRQHandler+0x516>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10a      	bne.n	8004120 <HAL_DMA_IRQHandler+0x52c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e009      	b.n	8004134 <HAL_DMA_IRQHandler+0x540>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03e      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2210      	movs	r2, #16
 8004142:	409a      	lsls	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d108      	bne.n	8004176 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d024      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e01f      	b.n	80041b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01b      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
 8004186:	e016      	b.n	80041b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2220      	movs	r2, #32
 80041c0:	409a      	lsls	r2, r3
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8110 	beq.w	80043ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <HAL_DMA_IRQHandler+0x690>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d04a      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2b      	ldr	r2, [pc, #172]	; (8004288 <HAL_DMA_IRQHandler+0x694>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d045      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a29      	ldr	r2, [pc, #164]	; (800428c <HAL_DMA_IRQHandler+0x698>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d040      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a28      	ldr	r2, [pc, #160]	; (8004290 <HAL_DMA_IRQHandler+0x69c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d03b      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a26      	ldr	r2, [pc, #152]	; (8004294 <HAL_DMA_IRQHandler+0x6a0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d036      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_DMA_IRQHandler+0x6a4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d031      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a23      	ldr	r2, [pc, #140]	; (800429c <HAL_DMA_IRQHandler+0x6a8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02c      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_DMA_IRQHandler+0x6ac>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d027      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <HAL_DMA_IRQHandler+0x6b0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d022      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <HAL_DMA_IRQHandler+0x6b4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01d      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <HAL_DMA_IRQHandler+0x6b8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <HAL_DMA_IRQHandler+0x6bc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_DMA_IRQHandler+0x6c0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_DMA_IRQHandler+0x6c4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a17      	ldr	r2, [pc, #92]	; (80042bc <HAL_DMA_IRQHandler+0x6c8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_DMA_IRQHandler+0x678>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d12b      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x6d0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf14      	ite	ne
 800427a:	2301      	movne	r3, #1
 800427c:	2300      	moveq	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	e02a      	b.n	80042d8 <HAL_DMA_IRQHandler+0x6e4>
 8004282:	bf00      	nop
 8004284:	40020010 	.word	0x40020010
 8004288:	40020028 	.word	0x40020028
 800428c:	40020040 	.word	0x40020040
 8004290:	40020058 	.word	0x40020058
 8004294:	40020070 	.word	0x40020070
 8004298:	40020088 	.word	0x40020088
 800429c:	400200a0 	.word	0x400200a0
 80042a0:	400200b8 	.word	0x400200b8
 80042a4:	40020410 	.word	0x40020410
 80042a8:	40020428 	.word	0x40020428
 80042ac:	40020440 	.word	0x40020440
 80042b0:	40020458 	.word	0x40020458
 80042b4:	40020470 	.word	0x40020470
 80042b8:	40020488 	.word	0x40020488
 80042bc:	400204a0 	.word	0x400204a0
 80042c0:	400204b8 	.word	0x400204b8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf14      	ite	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	2300      	moveq	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8087 	beq.w	80043ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2220      	movs	r2, #32
 80042e8:	409a      	lsls	r2, r3
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d139      	bne.n	800436e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0216 	bic.w	r2, r2, #22
 8004308:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004318:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <HAL_DMA_IRQHandler+0x736>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0208 	bic.w	r2, r2, #8
 8004338:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	223f      	movs	r2, #63	; 0x3f
 8004344:	409a      	lsls	r2, r3
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 834a 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
          }
          return;
 800436c:	e344      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d018      	beq.n	80043ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	2b00      	cmp	r3, #0
 8004390:	d02c      	beq.n	80043ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
 800439a:	e027      	b.n	80043ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d023      	beq.n	80043ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e01e      	b.n	80043ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0210 	bic.w	r2, r2, #16
 80043ca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8306 	beq.w	8004a02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8088 	beq.w	8004514 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_DMA_IRQHandler+0xa08>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d04a      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a79      	ldr	r2, [pc, #484]	; (8004600 <HAL_DMA_IRQHandler+0xa0c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d045      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a77      	ldr	r2, [pc, #476]	; (8004604 <HAL_DMA_IRQHandler+0xa10>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d040      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a76      	ldr	r2, [pc, #472]	; (8004608 <HAL_DMA_IRQHandler+0xa14>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d03b      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a74      	ldr	r2, [pc, #464]	; (800460c <HAL_DMA_IRQHandler+0xa18>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d036      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	; (8004610 <HAL_DMA_IRQHandler+0xa1c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d031      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a71      	ldr	r2, [pc, #452]	; (8004614 <HAL_DMA_IRQHandler+0xa20>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02c      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a70      	ldr	r2, [pc, #448]	; (8004618 <HAL_DMA_IRQHandler+0xa24>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d027      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6e      	ldr	r2, [pc, #440]	; (800461c <HAL_DMA_IRQHandler+0xa28>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d022      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6d      	ldr	r2, [pc, #436]	; (8004620 <HAL_DMA_IRQHandler+0xa2c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d01d      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a6b      	ldr	r2, [pc, #428]	; (8004624 <HAL_DMA_IRQHandler+0xa30>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6a      	ldr	r2, [pc, #424]	; (8004628 <HAL_DMA_IRQHandler+0xa34>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a68      	ldr	r2, [pc, #416]	; (800462c <HAL_DMA_IRQHandler+0xa38>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a67      	ldr	r2, [pc, #412]	; (8004630 <HAL_DMA_IRQHandler+0xa3c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a65      	ldr	r2, [pc, #404]	; (8004634 <HAL_DMA_IRQHandler+0xa40>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_DMA_IRQHandler+0x8b8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a64      	ldr	r2, [pc, #400]	; (8004638 <HAL_DMA_IRQHandler+0xa44>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <HAL_DMA_IRQHandler+0x8ca>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e007      	b.n	80044ce <HAL_DMA_IRQHandler+0x8da>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d307      	bcc.n	80044ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f2      	bne.n	80044ce <HAL_DMA_IRQHandler+0x8da>
 80044e8:	e000      	b.n	80044ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044ea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2203      	movs	r2, #3
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800450a:	e003      	b.n	8004514 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8272 	beq.w	8004a02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4798      	blx	r3
 8004526:	e26c      	b.n	8004a02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a43      	ldr	r2, [pc, #268]	; (800463c <HAL_DMA_IRQHandler+0xa48>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d022      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a42      	ldr	r2, [pc, #264]	; (8004640 <HAL_DMA_IRQHandler+0xa4c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d01d      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a40      	ldr	r2, [pc, #256]	; (8004644 <HAL_DMA_IRQHandler+0xa50>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <HAL_DMA_IRQHandler+0xa54>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3d      	ldr	r2, [pc, #244]	; (800464c <HAL_DMA_IRQHandler+0xa58>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3c      	ldr	r2, [pc, #240]	; (8004650 <HAL_DMA_IRQHandler+0xa5c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <HAL_DMA_IRQHandler+0xa60>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_DMA_IRQHandler+0x984>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a39      	ldr	r2, [pc, #228]	; (8004658 <HAL_DMA_IRQHandler+0xa64>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_DMA_IRQHandler+0x988>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_DMA_IRQHandler+0x98a>
 800457c:	2300      	movs	r3, #0
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 823f 	beq.w	8004a02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2204      	movs	r2, #4
 8004596:	409a      	lsls	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80cd 	beq.w	800473c <HAL_DMA_IRQHandler+0xb48>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80c7 	beq.w	800473c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	2204      	movs	r2, #4
 80045b8:	409a      	lsls	r2, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d049      	beq.n	800465c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8210 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e4:	e20a      	b.n	80049fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8206 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f8:	e200      	b.n	80049fc <HAL_DMA_IRQHandler+0xe08>
 80045fa:	bf00      	nop
 80045fc:	40020010 	.word	0x40020010
 8004600:	40020028 	.word	0x40020028
 8004604:	40020040 	.word	0x40020040
 8004608:	40020058 	.word	0x40020058
 800460c:	40020070 	.word	0x40020070
 8004610:	40020088 	.word	0x40020088
 8004614:	400200a0 	.word	0x400200a0
 8004618:	400200b8 	.word	0x400200b8
 800461c:	40020410 	.word	0x40020410
 8004620:	40020428 	.word	0x40020428
 8004624:	40020440 	.word	0x40020440
 8004628:	40020458 	.word	0x40020458
 800462c:	40020470 	.word	0x40020470
 8004630:	40020488 	.word	0x40020488
 8004634:	400204a0 	.word	0x400204a0
 8004638:	400204b8 	.word	0x400204b8
 800463c:	58025408 	.word	0x58025408
 8004640:	5802541c 	.word	0x5802541c
 8004644:	58025430 	.word	0x58025430
 8004648:	58025444 	.word	0x58025444
 800464c:	58025458 	.word	0x58025458
 8004650:	5802546c 	.word	0x5802546c
 8004654:	58025480 	.word	0x58025480
 8004658:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d160      	bne.n	8004728 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a8c      	ldr	r2, [pc, #560]	; (800489c <HAL_DMA_IRQHandler+0xca8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a8a      	ldr	r2, [pc, #552]	; (80048a0 <HAL_DMA_IRQHandler+0xcac>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a89      	ldr	r2, [pc, #548]	; (80048a4 <HAL_DMA_IRQHandler+0xcb0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a87      	ldr	r2, [pc, #540]	; (80048a8 <HAL_DMA_IRQHandler+0xcb4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a86      	ldr	r2, [pc, #536]	; (80048ac <HAL_DMA_IRQHandler+0xcb8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a84      	ldr	r2, [pc, #528]	; (80048b0 <HAL_DMA_IRQHandler+0xcbc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a83      	ldr	r2, [pc, #524]	; (80048b4 <HAL_DMA_IRQHandler+0xcc0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a81      	ldr	r2, [pc, #516]	; (80048b8 <HAL_DMA_IRQHandler+0xcc4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a80      	ldr	r2, [pc, #512]	; (80048bc <HAL_DMA_IRQHandler+0xcc8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a7e      	ldr	r2, [pc, #504]	; (80048c0 <HAL_DMA_IRQHandler+0xccc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7d      	ldr	r2, [pc, #500]	; (80048c4 <HAL_DMA_IRQHandler+0xcd0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a7b      	ldr	r2, [pc, #492]	; (80048c8 <HAL_DMA_IRQHandler+0xcd4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a7a      	ldr	r2, [pc, #488]	; (80048cc <HAL_DMA_IRQHandler+0xcd8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a78      	ldr	r2, [pc, #480]	; (80048d0 <HAL_DMA_IRQHandler+0xcdc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a77      	ldr	r2, [pc, #476]	; (80048d4 <HAL_DMA_IRQHandler+0xce0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_IRQHandler+0xb12>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a75      	ldr	r2, [pc, #468]	; (80048d8 <HAL_DMA_IRQHandler+0xce4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <HAL_DMA_IRQHandler+0xb24>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0208 	bic.w	r2, r2, #8
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e007      	b.n	8004728 <HAL_DMA_IRQHandler+0xb34>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8165 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800473a:	e15f      	b.n	80049fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2202      	movs	r2, #2
 8004746:	409a      	lsls	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80c5 	beq.w	80048dc <HAL_DMA_IRQHandler+0xce8>
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80bf 	beq.w	80048dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2202      	movs	r2, #2
 8004768:	409a      	lsls	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d018      	beq.n	80047aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 813a 	beq.w	8004a00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004794:	e134      	b.n	8004a00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8130 	beq.w	8004a00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a8:	e12a      	b.n	8004a00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d168      	bne.n	8004886 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a38      	ldr	r2, [pc, #224]	; (800489c <HAL_DMA_IRQHandler+0xca8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04a      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a37      	ldr	r2, [pc, #220]	; (80048a0 <HAL_DMA_IRQHandler+0xcac>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d045      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a35      	ldr	r2, [pc, #212]	; (80048a4 <HAL_DMA_IRQHandler+0xcb0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d040      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a34      	ldr	r2, [pc, #208]	; (80048a8 <HAL_DMA_IRQHandler+0xcb4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d03b      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a32      	ldr	r2, [pc, #200]	; (80048ac <HAL_DMA_IRQHandler+0xcb8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d036      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a31      	ldr	r2, [pc, #196]	; (80048b0 <HAL_DMA_IRQHandler+0xcbc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d031      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <HAL_DMA_IRQHandler+0xcc0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02c      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2e      	ldr	r2, [pc, #184]	; (80048b8 <HAL_DMA_IRQHandler+0xcc4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d027      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2c      	ldr	r2, [pc, #176]	; (80048bc <HAL_DMA_IRQHandler+0xcc8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <HAL_DMA_IRQHandler+0xccc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01d      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <HAL_DMA_IRQHandler+0xcd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a28      	ldr	r2, [pc, #160]	; (80048c8 <HAL_DMA_IRQHandler+0xcd4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <HAL_DMA_IRQHandler+0xcd8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <HAL_DMA_IRQHandler+0xcdc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <HAL_DMA_IRQHandler+0xce0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_DMA_IRQHandler+0xc60>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <HAL_DMA_IRQHandler+0xce4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d108      	bne.n	8004866 <HAL_DMA_IRQHandler+0xc72>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0214 	bic.w	r2, r2, #20
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e007      	b.n	8004876 <HAL_DMA_IRQHandler+0xc82>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 020a 	bic.w	r2, r2, #10
 8004874:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80b8 	beq.w	8004a00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	e0b2      	b.n	8004a00 <HAL_DMA_IRQHandler+0xe0c>
 800489a:	bf00      	nop
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2208      	movs	r2, #8
 80048e6:	409a      	lsls	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8088 	beq.w	8004a02 <HAL_DMA_IRQHandler+0xe0e>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8082 	beq.w	8004a02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <HAL_DMA_IRQHandler+0xe14>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d04a      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <HAL_DMA_IRQHandler+0xe18>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d045      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a3e      	ldr	r2, [pc, #248]	; (8004a10 <HAL_DMA_IRQHandler+0xe1c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d040      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <HAL_DMA_IRQHandler+0xe20>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d03b      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3b      	ldr	r2, [pc, #236]	; (8004a18 <HAL_DMA_IRQHandler+0xe24>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d036      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <HAL_DMA_IRQHandler+0xe28>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d031      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <HAL_DMA_IRQHandler+0xe2c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d02c      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a36      	ldr	r2, [pc, #216]	; (8004a24 <HAL_DMA_IRQHandler+0xe30>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d027      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <HAL_DMA_IRQHandler+0xe34>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a33      	ldr	r2, [pc, #204]	; (8004a2c <HAL_DMA_IRQHandler+0xe38>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01d      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a32      	ldr	r2, [pc, #200]	; (8004a30 <HAL_DMA_IRQHandler+0xe3c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <HAL_DMA_IRQHandler+0xe40>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <HAL_DMA_IRQHandler+0xe44>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <HAL_DMA_IRQHandler+0xe48>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <HAL_DMA_IRQHandler+0xe4c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_DMA_IRQHandler+0xdaa>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <HAL_DMA_IRQHandler+0xe50>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d108      	bne.n	80049b0 <HAL_DMA_IRQHandler+0xdbc>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 021c 	bic.w	r2, r2, #28
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e007      	b.n	80049c0 <HAL_DMA_IRQHandler+0xdcc>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 020e 	bic.w	r2, r2, #14
 80049be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2201      	movs	r2, #1
 80049ca:	409a      	lsls	r2, r3
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
 80049f6:	e004      	b.n	8004a02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049f8:	bf00      	nop
 80049fa:	e002      	b.n	8004a02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	bf00      	nop
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a02:	3728      	adds	r7, #40	; 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40020010 	.word	0x40020010
 8004a0c:	40020028 	.word	0x40020028
 8004a10:	40020040 	.word	0x40020040
 8004a14:	40020058 	.word	0x40020058
 8004a18:	40020070 	.word	0x40020070
 8004a1c:	40020088 	.word	0x40020088
 8004a20:	400200a0 	.word	0x400200a0
 8004a24:	400200b8 	.word	0x400200b8
 8004a28:	40020410 	.word	0x40020410
 8004a2c:	40020428 	.word	0x40020428
 8004a30:	40020440 	.word	0x40020440
 8004a34:	40020458 	.word	0x40020458
 8004a38:	40020470 	.word	0x40020470
 8004a3c:	40020488 	.word	0x40020488
 8004a40:	400204a0 	.word	0x400204a0
 8004a44:	400204b8 	.word	0x400204b8

08004a48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a84      	ldr	r2, [pc, #528]	; (8004c78 <DMA_SetConfig+0x230>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d072      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a82      	ldr	r2, [pc, #520]	; (8004c7c <DMA_SetConfig+0x234>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d06d      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a81      	ldr	r2, [pc, #516]	; (8004c80 <DMA_SetConfig+0x238>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d068      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7f      	ldr	r2, [pc, #508]	; (8004c84 <DMA_SetConfig+0x23c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d063      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7e      	ldr	r2, [pc, #504]	; (8004c88 <DMA_SetConfig+0x240>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d05e      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7c      	ldr	r2, [pc, #496]	; (8004c8c <DMA_SetConfig+0x244>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d059      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7b      	ldr	r2, [pc, #492]	; (8004c90 <DMA_SetConfig+0x248>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d054      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a79      	ldr	r2, [pc, #484]	; (8004c94 <DMA_SetConfig+0x24c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d04f      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a78      	ldr	r2, [pc, #480]	; (8004c98 <DMA_SetConfig+0x250>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a76      	ldr	r2, [pc, #472]	; (8004c9c <DMA_SetConfig+0x254>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a75      	ldr	r2, [pc, #468]	; (8004ca0 <DMA_SetConfig+0x258>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a73      	ldr	r2, [pc, #460]	; (8004ca4 <DMA_SetConfig+0x25c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a72      	ldr	r2, [pc, #456]	; (8004ca8 <DMA_SetConfig+0x260>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a70      	ldr	r2, [pc, #448]	; (8004cac <DMA_SetConfig+0x264>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6f      	ldr	r2, [pc, #444]	; (8004cb0 <DMA_SetConfig+0x268>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6d      	ldr	r2, [pc, #436]	; (8004cb4 <DMA_SetConfig+0x26c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6c      	ldr	r2, [pc, #432]	; (8004cb8 <DMA_SetConfig+0x270>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6a      	ldr	r2, [pc, #424]	; (8004cbc <DMA_SetConfig+0x274>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a69      	ldr	r2, [pc, #420]	; (8004cc0 <DMA_SetConfig+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a67      	ldr	r2, [pc, #412]	; (8004cc4 <DMA_SetConfig+0x27c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a66      	ldr	r2, [pc, #408]	; (8004cc8 <DMA_SetConfig+0x280>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a64      	ldr	r2, [pc, #400]	; (8004ccc <DMA_SetConfig+0x284>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a63      	ldr	r2, [pc, #396]	; (8004cd0 <DMA_SetConfig+0x288>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <DMA_SetConfig+0x10a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a61      	ldr	r2, [pc, #388]	; (8004cd4 <DMA_SetConfig+0x28c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d101      	bne.n	8004b56 <DMA_SetConfig+0x10e>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <DMA_SetConfig+0x110>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a3e      	ldr	r2, [pc, #248]	; (8004c78 <DMA_SetConfig+0x230>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d04a      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <DMA_SetConfig+0x234>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d045      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <DMA_SetConfig+0x238>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d040      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a3a      	ldr	r2, [pc, #232]	; (8004c84 <DMA_SetConfig+0x23c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d03b      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <DMA_SetConfig+0x240>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d036      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a37      	ldr	r2, [pc, #220]	; (8004c8c <DMA_SetConfig+0x244>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d031      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <DMA_SetConfig+0x248>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02c      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <DMA_SetConfig+0x24c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d027      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a32      	ldr	r2, [pc, #200]	; (8004c98 <DMA_SetConfig+0x250>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a31      	ldr	r2, [pc, #196]	; (8004c9c <DMA_SetConfig+0x254>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01d      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <DMA_SetConfig+0x258>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2e      	ldr	r2, [pc, #184]	; (8004ca4 <DMA_SetConfig+0x25c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <DMA_SetConfig+0x260>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2b      	ldr	r2, [pc, #172]	; (8004cac <DMA_SetConfig+0x264>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <DMA_SetConfig+0x268>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <DMA_SetConfig+0x1d0>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <DMA_SetConfig+0x26c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <DMA_SetConfig+0x1d4>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <DMA_SetConfig+0x1d6>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d05a      	beq.n	8004cd8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	223f      	movs	r2, #63	; 0x3f
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c40:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d108      	bne.n	8004c64 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c62:	e087      	b.n	8004d74 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
}
 8004c74:	e07e      	b.n	8004d74 <DMA_SetConfig+0x32c>
 8004c76:	bf00      	nop
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	40020058 	.word	0x40020058
 8004c88:	40020070 	.word	0x40020070
 8004c8c:	40020088 	.word	0x40020088
 8004c90:	400200a0 	.word	0x400200a0
 8004c94:	400200b8 	.word	0x400200b8
 8004c98:	40020410 	.word	0x40020410
 8004c9c:	40020428 	.word	0x40020428
 8004ca0:	40020440 	.word	0x40020440
 8004ca4:	40020458 	.word	0x40020458
 8004ca8:	40020470 	.word	0x40020470
 8004cac:	40020488 	.word	0x40020488
 8004cb0:	400204a0 	.word	0x400204a0
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <DMA_SetConfig+0x338>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d022      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a27      	ldr	r2, [pc, #156]	; (8004d84 <DMA_SetConfig+0x33c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d01d      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <DMA_SetConfig+0x340>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a24      	ldr	r2, [pc, #144]	; (8004d8c <DMA_SetConfig+0x344>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <DMA_SetConfig+0x348>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <DMA_SetConfig+0x34c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <DMA_SetConfig+0x350>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <DMA_SetConfig+0x2e0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <DMA_SetConfig+0x354>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <DMA_SetConfig+0x2e4>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <DMA_SetConfig+0x2e6>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d108      	bne.n	8004d64 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	60da      	str	r2, [r3, #12]
}
 8004d62:	e007      	b.n	8004d74 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494

08004da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a42      	ldr	r2, [pc, #264]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x118>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d04a      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a41      	ldr	r2, [pc, #260]	; (8004ebc <DMA_CalcBaseAndBitshift+0x11c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d045      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3f      	ldr	r2, [pc, #252]	; (8004ec0 <DMA_CalcBaseAndBitshift+0x120>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d040      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3e      	ldr	r2, [pc, #248]	; (8004ec4 <DMA_CalcBaseAndBitshift+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d03b      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <DMA_CalcBaseAndBitshift+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d036      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <DMA_CalcBaseAndBitshift+0x12c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d031      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a39      	ldr	r2, [pc, #228]	; (8004ed0 <DMA_CalcBaseAndBitshift+0x130>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d02c      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a38      	ldr	r2, [pc, #224]	; (8004ed4 <DMA_CalcBaseAndBitshift+0x134>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d027      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a36      	ldr	r2, [pc, #216]	; (8004ed8 <DMA_CalcBaseAndBitshift+0x138>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d022      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a35      	ldr	r2, [pc, #212]	; (8004edc <DMA_CalcBaseAndBitshift+0x13c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d01d      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a33      	ldr	r2, [pc, #204]	; (8004ee0 <DMA_CalcBaseAndBitshift+0x140>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d018      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a32      	ldr	r2, [pc, #200]	; (8004ee4 <DMA_CalcBaseAndBitshift+0x144>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d013      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a30      	ldr	r2, [pc, #192]	; (8004ee8 <DMA_CalcBaseAndBitshift+0x148>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00e      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <DMA_CalcBaseAndBitshift+0x14c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d009      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <DMA_CalcBaseAndBitshift+0x150>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2c      	ldr	r2, [pc, #176]	; (8004ef4 <DMA_CalcBaseAndBitshift+0x154>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <DMA_CalcBaseAndBitshift+0xac>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <DMA_CalcBaseAndBitshift+0xae>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d024      	beq.n	8004e9c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	3b10      	subs	r3, #16
 8004e5a:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <DMA_CalcBaseAndBitshift+0x158>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	4a24      	ldr	r2, [pc, #144]	; (8004efc <DMA_CalcBaseAndBitshift+0x15c>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d908      	bls.n	8004e8c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <DMA_CalcBaseAndBitshift+0x160>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	1d1a      	adds	r2, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	659a      	str	r2, [r3, #88]	; 0x58
 8004e8a:	e00d      	b.n	8004ea8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <DMA_CalcBaseAndBitshift+0x160>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9a:	e005      	b.n	8004ea8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40020010 	.word	0x40020010
 8004ebc:	40020028 	.word	0x40020028
 8004ec0:	40020040 	.word	0x40020040
 8004ec4:	40020058 	.word	0x40020058
 8004ec8:	40020070 	.word	0x40020070
 8004ecc:	40020088 	.word	0x40020088
 8004ed0:	400200a0 	.word	0x400200a0
 8004ed4:	400200b8 	.word	0x400200b8
 8004ed8:	40020410 	.word	0x40020410
 8004edc:	40020428 	.word	0x40020428
 8004ee0:	40020440 	.word	0x40020440
 8004ee4:	40020458 	.word	0x40020458
 8004ee8:	40020470 	.word	0x40020470
 8004eec:	40020488 	.word	0x40020488
 8004ef0:	400204a0 	.word	0x400204a0
 8004ef4:	400204b8 	.word	0x400204b8
 8004ef8:	aaaaaaab 	.word	0xaaaaaaab
 8004efc:	0800c54c 	.word	0x0800c54c
 8004f00:	fffffc00 	.word	0xfffffc00

08004f04 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d120      	bne.n	8004f5a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d858      	bhi.n	8004fd2 <DMA_CheckFifoParam+0xce>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <DMA_CheckFifoParam+0x24>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f4b 	.word	0x08004f4b
 8004f30:	08004f39 	.word	0x08004f39
 8004f34:	08004fd3 	.word	0x08004fd3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d048      	beq.n	8004fd6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f48:	e045      	b.n	8004fd6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f52:	d142      	bne.n	8004fda <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f58:	e03f      	b.n	8004fda <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	d123      	bne.n	8004fac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d838      	bhi.n	8004fde <DMA_CheckFifoParam+0xda>
 8004f6c:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <DMA_CheckFifoParam+0x70>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f8b 	.word	0x08004f8b
 8004f7c:	08004f85 	.word	0x08004f85
 8004f80:	08004f9d 	.word	0x08004f9d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
        break;
 8004f88:	e030      	b.n	8004fec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d025      	beq.n	8004fe2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f9a:	e022      	b.n	8004fe2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fa4:	d11f      	bne.n	8004fe6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004faa:	e01c      	b.n	8004fe6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d902      	bls.n	8004fba <DMA_CheckFifoParam+0xb6>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d003      	beq.n	8004fc0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fb8:	e018      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fbe:	e015      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00e      	beq.n	8004fea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
    break;
 8004fd0:	e00b      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e00a      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e008      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        break;
 8004fda:	bf00      	nop
 8004fdc:	e006      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        break;
 8004fde:	bf00      	nop
 8004fe0:	e004      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <DMA_CheckFifoParam+0xe8>
    break;
 8004fea:	bf00      	nop
    }
  }

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop

08004ffc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a36      	ldr	r2, [pc, #216]	; (80050f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a35      	ldr	r2, [pc, #212]	; (80050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a33      	ldr	r2, [pc, #204]	; (80050fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a32      	ldr	r2, [pc, #200]	; (8005100 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a30      	ldr	r2, [pc, #192]	; (8005104 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2d      	ldr	r2, [pc, #180]	; (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01a      	beq.n	800509a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	3b08      	subs	r3, #8
 800506c:	4a28      	ldr	r2, [pc, #160]	; (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4b26      	ldr	r3, [pc, #152]	; (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a24      	ldr	r2, [pc, #144]	; (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005088:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005098:	e024      	b.n	80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3b10      	subs	r3, #16
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d806      	bhi.n	80050c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d902      	bls.n	80050c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3308      	adds	r3, #8
 80050c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	58025408 	.word	0x58025408
 80050f4:	5802541c 	.word	0x5802541c
 80050f8:	58025430 	.word	0x58025430
 80050fc:	58025444 	.word	0x58025444
 8005100:	58025458 	.word	0x58025458
 8005104:	5802546c 	.word	0x5802546c
 8005108:	58025480 	.word	0x58025480
 800510c:	58025494 	.word	0x58025494
 8005110:	cccccccd 	.word	0xcccccccd
 8005114:	16009600 	.word	0x16009600
 8005118:	58025880 	.word	0x58025880
 800511c:	aaaaaaab 	.word	0xaaaaaaab
 8005120:	400204b8 	.word	0x400204b8
 8005124:	4002040f 	.word	0x4002040f
 8005128:	10008200 	.word	0x10008200
 800512c:	40020880 	.word	0x40020880

08005130 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d04a      	beq.n	80051dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d847      	bhi.n	80051dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a24      	ldr	r2, [pc, #144]	; (80051ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d01d      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a15      	ldr	r2, [pc, #84]	; (800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051b8:	671a      	str	r2, [r3, #112]	; 0x70
 80051ba:	e009      	b.n	80051d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4b14      	ldr	r3, [pc, #80]	; (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a11      	ldr	r2, [pc, #68]	; (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	58025408 	.word	0x58025408
 80051ec:	5802541c 	.word	0x5802541c
 80051f0:	58025430 	.word	0x58025430
 80051f4:	58025444 	.word	0x58025444
 80051f8:	58025458 	.word	0x58025458
 80051fc:	5802546c 	.word	0x5802546c
 8005200:	58025480 	.word	0x58025480
 8005204:	58025494 	.word	0x58025494
 8005208:	1600963f 	.word	0x1600963f
 800520c:	58025940 	.word	0x58025940
 8005210:	1000823f 	.word	0x1000823f
 8005214:	40020940 	.word	0x40020940

08005218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005226:	4b89      	ldr	r3, [pc, #548]	; (800544c <HAL_GPIO_Init+0x234>)
 8005228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800522a:	e194      	b.n	8005556 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	2101      	movs	r1, #1
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8186 	beq.w	8005550 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d00b      	beq.n	8005264 <HAL_GPIO_Init+0x4c>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d007      	beq.n	8005264 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005258:	2b11      	cmp	r3, #17
 800525a:	d003      	beq.n	8005264 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b12      	cmp	r3, #18
 8005262:	d130      	bne.n	80052c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	2203      	movs	r2, #3
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800529a:	2201      	movs	r2, #1
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f003 0201 	and.w	r2, r3, #1
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	2203      	movs	r2, #3
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0xee>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b12      	cmp	r3, #18
 8005304:	d123      	bne.n	800534e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	08da      	lsrs	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3208      	adds	r2, #8
 800530e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	220f      	movs	r2, #15
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	08da      	lsrs	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3208      	adds	r2, #8
 8005348:	69b9      	ldr	r1, [r7, #24]
 800534a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	2203      	movs	r2, #3
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0203 	and.w	r2, r3, #3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80e0 	beq.w	8005550 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005390:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <HAL_GPIO_Init+0x238>)
 8005392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005396:	4a2e      	ldr	r2, [pc, #184]	; (8005450 <HAL_GPIO_Init+0x238>)
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80053a0:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <HAL_GPIO_Init+0x238>)
 80053a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ae:	4a29      	ldr	r2, [pc, #164]	; (8005454 <HAL_GPIO_Init+0x23c>)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	3302      	adds	r3, #2
 80053b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	220f      	movs	r2, #15
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a20      	ldr	r2, [pc, #128]	; (8005458 <HAL_GPIO_Init+0x240>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d052      	beq.n	8005480 <HAL_GPIO_Init+0x268>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <HAL_GPIO_Init+0x244>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d031      	beq.n	8005446 <HAL_GPIO_Init+0x22e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <HAL_GPIO_Init+0x248>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d02b      	beq.n	8005442 <HAL_GPIO_Init+0x22a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_GPIO_Init+0x24c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d025      	beq.n	800543e <HAL_GPIO_Init+0x226>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_GPIO_Init+0x250>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01f      	beq.n	800543a <HAL_GPIO_Init+0x222>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1b      	ldr	r2, [pc, #108]	; (800546c <HAL_GPIO_Init+0x254>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d019      	beq.n	8005436 <HAL_GPIO_Init+0x21e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <HAL_GPIO_Init+0x258>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_GPIO_Init+0x21a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <HAL_GPIO_Init+0x25c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00d      	beq.n	800542e <HAL_GPIO_Init+0x216>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_GPIO_Init+0x260>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <HAL_GPIO_Init+0x212>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_GPIO_Init+0x264>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_GPIO_Init+0x20e>
 8005422:	2309      	movs	r3, #9
 8005424:	e02d      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 8005426:	230a      	movs	r3, #10
 8005428:	e02b      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 800542a:	2308      	movs	r3, #8
 800542c:	e029      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 800542e:	2307      	movs	r3, #7
 8005430:	e027      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 8005432:	2306      	movs	r3, #6
 8005434:	e025      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 8005436:	2305      	movs	r3, #5
 8005438:	e023      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 800543a:	2304      	movs	r3, #4
 800543c:	e021      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 800543e:	2303      	movs	r3, #3
 8005440:	e01f      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 8005442:	2302      	movs	r3, #2
 8005444:	e01d      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 8005446:	2301      	movs	r3, #1
 8005448:	e01b      	b.n	8005482 <HAL_GPIO_Init+0x26a>
 800544a:	bf00      	nop
 800544c:	58000080 	.word	0x58000080
 8005450:	58024400 	.word	0x58024400
 8005454:	58000400 	.word	0x58000400
 8005458:	58020000 	.word	0x58020000
 800545c:	58020400 	.word	0x58020400
 8005460:	58020800 	.word	0x58020800
 8005464:	58020c00 	.word	0x58020c00
 8005468:	58021000 	.word	0x58021000
 800546c:	58021400 	.word	0x58021400
 8005470:	58021800 	.word	0x58021800
 8005474:	58021c00 	.word	0x58021c00
 8005478:	58022000 	.word	0x58022000
 800547c:	58022400 	.word	0x58022400
 8005480:	2300      	movs	r3, #0
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	f002 0203 	and.w	r2, r2, #3
 8005488:	0092      	lsls	r2, r2, #2
 800548a:	4093      	lsls	r3, r2
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005492:	4938      	ldr	r1, [pc, #224]	; (8005574 <HAL_GPIO_Init+0x35c>)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	3302      	adds	r3, #2
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	43db      	mvns	r3, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4013      	ands	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800551a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	f47f ae63 	bne.w	800522c <HAL_GPIO_Init+0x14>
  }
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	3724      	adds	r7, #36	; 0x24
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	58000400 	.word	0x58000400

08005578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
 8005584:	4613      	mov	r3, r2
 8005586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005588:	787b      	ldrb	r3, [r7, #1]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800558e:	887a      	ldrh	r2, [r7, #2]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005594:	e003      	b.n	800559e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	041a      	lsls	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	619a      	str	r2, [r3, #24]
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	4603      	mov	r3, r0
 80055b2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80055b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fc f85d 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_PWREx_ConfigSupply+0x70>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d00a      	beq.n	800560a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <HAL_PWREx_ConfigSupply+0x70>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d001      	beq.n	8005606 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e01f      	b.n	8005646 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e01d      	b.n	8005646 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_PWREx_ConfigSupply+0x70>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f023 0207 	bic.w	r2, r3, #7
 8005612:	490f      	ldr	r1, [pc, #60]	; (8005650 <HAL_PWREx_ConfigSupply+0x70>)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4313      	orrs	r3, r2
 8005618:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800561a:	f7fc fe77 	bl	800230c <HAL_GetTick>
 800561e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005620:	e009      	b.n	8005636 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005622:	f7fc fe73 	bl	800230c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005630:	d901      	bls.n	8005636 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e007      	b.n	8005646 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_PWREx_ConfigSupply+0x70>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005642:	d1ee      	bne.n	8005622 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	58024800 	.word	0x58024800

08005654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e3ff      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8087 	beq.w	8005782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005674:	4b99      	ldr	r3, [pc, #612]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800567e:	4b97      	ldr	r3, [pc, #604]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b10      	cmp	r3, #16
 8005688:	d007      	beq.n	800569a <HAL_RCC_OscConfig+0x46>
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b18      	cmp	r3, #24
 800568e:	d110      	bne.n	80056b2 <HAL_RCC_OscConfig+0x5e>
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d10b      	bne.n	80056b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569a:	4b90      	ldr	r3, [pc, #576]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d06c      	beq.n	8005780 <HAL_RCC_OscConfig+0x12c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d168      	bne.n	8005780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e3d9      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x76>
 80056bc:	4b87      	ldr	r3, [pc, #540]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a86      	ldr	r2, [pc, #536]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	e02e      	b.n	8005728 <HAL_RCC_OscConfig+0xd4>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x98>
 80056d2:	4b82      	ldr	r3, [pc, #520]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a81      	ldr	r2, [pc, #516]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b7f      	ldr	r3, [pc, #508]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a7e      	ldr	r2, [pc, #504]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e01d      	b.n	8005728 <HAL_RCC_OscConfig+0xd4>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCC_OscConfig+0xbc>
 80056f6:	4b79      	ldr	r3, [pc, #484]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a78      	ldr	r2, [pc, #480]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80056fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a75      	ldr	r2, [pc, #468]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e00b      	b.n	8005728 <HAL_RCC_OscConfig+0xd4>
 8005710:	4b72      	ldr	r3, [pc, #456]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a71      	ldr	r2, [pc, #452]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a6e      	ldr	r2, [pc, #440]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d013      	beq.n	8005758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fdec 	bl	800230c <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005738:	f7fc fde8 	bl	800230c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e38d      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800574a:	4b64      	ldr	r3, [pc, #400]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0xe4>
 8005756:	e014      	b.n	8005782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fc fdd8 	bl	800230c <HAL_GetTick>
 800575c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005760:	f7fc fdd4 	bl	800230c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e379      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005772:	4b5a      	ldr	r3, [pc, #360]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x10c>
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80ae 	beq.w	80058ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005790:	4b52      	ldr	r3, [pc, #328]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800579a:	4b50      	ldr	r3, [pc, #320]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_RCC_OscConfig+0x162>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b18      	cmp	r3, #24
 80057aa:	d13a      	bne.n	8005822 <HAL_RCC_OscConfig+0x1ce>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d135      	bne.n	8005822 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b6:	4b49      	ldr	r3, [pc, #292]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_RCC_OscConfig+0x17a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e34b      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ce:	f7fc fdcd 	bl	800236c <HAL_GetREVID>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80057d8:	4293      	cmp	r3, r2
 80057da:	d817      	bhi.n	800580c <HAL_RCC_OscConfig+0x1b8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d108      	bne.n	80057f6 <HAL_RCC_OscConfig+0x1a2>
 80057e4:	4b3d      	ldr	r3, [pc, #244]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057ec:	4a3b      	ldr	r2, [pc, #236]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f4:	e07a      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f6:	4b39      	ldr	r3, [pc, #228]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	031b      	lsls	r3, r3, #12
 8005804:	4935      	ldr	r1, [pc, #212]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005806:	4313      	orrs	r3, r2
 8005808:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580a:	e06f      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580c:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	4930      	ldr	r1, [pc, #192]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005820:	e064      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d045      	beq.n	80058b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 0219 	bic.w	r2, r3, #25
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4929      	ldr	r1, [pc, #164]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fc fd66 	bl	800230c <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005844:	f7fc fd62 	bl	800230c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e307      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	f7fc fd83 	bl	800236c <HAL_GetREVID>
 8005866:	4603      	mov	r3, r0
 8005868:	f241 0203 	movw	r2, #4099	; 0x1003
 800586c:	4293      	cmp	r3, r2
 800586e:	d817      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x24c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d108      	bne.n	800588a <HAL_RCC_OscConfig+0x236>
 8005878:	4b18      	ldr	r3, [pc, #96]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005880:	4a16      	ldr	r2, [pc, #88]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 8005882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005886:	6053      	str	r3, [r2, #4]
 8005888:	e030      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
 800588a:	4b14      	ldr	r3, [pc, #80]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	031b      	lsls	r3, r3, #12
 8005898:	4910      	ldr	r1, [pc, #64]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
 800589e:	e025      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	061b      	lsls	r3, r3, #24
 80058ae:	490b      	ldr	r1, [pc, #44]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	e01a      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a08      	ldr	r2, [pc, #32]	; (80058dc <HAL_RCC_OscConfig+0x288>)
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fc fd23 	bl	800230c <HAL_GetTick>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ca:	f7fc fd1f 	bl	800230c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d903      	bls.n	80058e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e2c4      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
 80058dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058e0:	4ba4      	ldr	r3, [pc, #656]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1ee      	bne.n	80058ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80a9 	beq.w	8005a4c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058fa:	4b9e      	ldr	r3, [pc, #632]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005902:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005904:	4b9b      	ldr	r3, [pc, #620]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d007      	beq.n	8005920 <HAL_RCC_OscConfig+0x2cc>
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b18      	cmp	r3, #24
 8005914:	d13a      	bne.n	800598c <HAL_RCC_OscConfig+0x338>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d135      	bne.n	800598c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_OscConfig+0x2e4>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d001      	beq.n	8005938 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e296      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005938:	f7fc fd18 	bl	800236c <HAL_GetREVID>
 800593c:	4603      	mov	r3, r0
 800593e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005942:	4293      	cmp	r3, r2
 8005944:	d817      	bhi.n	8005976 <HAL_RCC_OscConfig+0x322>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	2b20      	cmp	r3, #32
 800594c:	d108      	bne.n	8005960 <HAL_RCC_OscConfig+0x30c>
 800594e:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005956:	4a87      	ldr	r2, [pc, #540]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800595e:	e075      	b.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005960:	4b84      	ldr	r3, [pc, #528]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	069b      	lsls	r3, r3, #26
 800596e:	4981      	ldr	r1, [pc, #516]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005974:	e06a      	b.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005976:	4b7f      	ldr	r3, [pc, #508]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	061b      	lsls	r3, r3, #24
 8005984:	497b      	ldr	r1, [pc, #492]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005986:	4313      	orrs	r3, r2
 8005988:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800598a:	e05f      	b.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d042      	beq.n	8005a1a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005994:	4b77      	ldr	r3, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a76      	ldr	r2, [pc, #472]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fc fcb4 	bl	800230c <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059a8:	f7fc fcb0 	bl	800230c <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e255      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059ba:	4b6e      	ldr	r3, [pc, #440]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059c6:	f7fc fcd1 	bl	800236c <HAL_GetREVID>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d817      	bhi.n	8005a04 <HAL_RCC_OscConfig+0x3b0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d108      	bne.n	80059ee <HAL_RCC_OscConfig+0x39a>
 80059dc:	4b65      	ldr	r3, [pc, #404]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80059e4:	4a63      	ldr	r2, [pc, #396]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80059e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ea:	6053      	str	r3, [r2, #4]
 80059ec:	e02e      	b.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
 80059ee:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	069b      	lsls	r3, r3, #26
 80059fc:	495d      	ldr	r1, [pc, #372]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
 8005a02:	e023      	b.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
 8005a04:	4b5b      	ldr	r3, [pc, #364]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	061b      	lsls	r3, r3, #24
 8005a12:	4958      	ldr	r1, [pc, #352]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60cb      	str	r3, [r1, #12]
 8005a18:	e018      	b.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a1a:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a55      	ldr	r2, [pc, #340]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fc fc71 	bl	800230c <HAL_GetTick>
 8005a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a2e:	f7fc fc6d 	bl	800230c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e212      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a40:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d036      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d019      	beq.n	8005a94 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a60:	4b44      	ldr	r3, [pc, #272]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	4a43      	ldr	r2, [pc, #268]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc fc4e 	bl	800230c <HAL_GetTick>
 8005a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fc fc4a 	bl	800230c <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e1ef      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a86:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x420>
 8005a92:	e018      	b.n	8005ac6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a94:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a98:	4a36      	ldr	r2, [pc, #216]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fc fc34 	bl	800230c <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fc fc30 	bl	800230c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e1d5      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d036      	beq.n	8005b40 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d019      	beq.n	8005b0e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ada:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a25      	ldr	r2, [pc, #148]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ae6:	f7fc fc11 	bl	800230c <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005aee:	f7fc fc0d 	bl	800230c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e1b2      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b00:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x49a>
 8005b0c:	e018      	b.n	8005b40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b0e:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b1a:	f7fc fbf7 	bl	800230c <HAL_GetTick>
 8005b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b22:	f7fc fbf3 	bl	800230c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e198      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <HAL_RCC_OscConfig+0x520>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8085 	beq.w	8005c58 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <HAL_RCC_OscConfig+0x524>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <HAL_RCC_OscConfig+0x524>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b5a:	f7fc fbd7 	bl	800230c <HAL_GetTick>
 8005b5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b60:	e00c      	b.n	8005b7c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fc fbd3 	bl	800230c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b64      	cmp	r3, #100	; 0x64
 8005b6e:	d905      	bls.n	8005b7c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e178      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
 8005b74:	58024400 	.word	0x58024400
 8005b78:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b7c:	4b96      	ldr	r3, [pc, #600]	; (8005dd8 <HAL_RCC_OscConfig+0x784>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ec      	beq.n	8005b62 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d106      	bne.n	8005b9e <HAL_RCC_OscConfig+0x54a>
 8005b90:	4b92      	ldr	r3, [pc, #584]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b94:	4a91      	ldr	r2, [pc, #580]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9c:	e02d      	b.n	8005bfa <HAL_RCC_OscConfig+0x5a6>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x56c>
 8005ba6:	4b8d      	ldr	r3, [pc, #564]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	4a8c      	ldr	r2, [pc, #560]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb2:	4b8a      	ldr	r3, [pc, #552]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a89      	ldr	r2, [pc, #548]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bb8:	f023 0304 	bic.w	r3, r3, #4
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	e01c      	b.n	8005bfa <HAL_RCC_OscConfig+0x5a6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b05      	cmp	r3, #5
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCC_OscConfig+0x58e>
 8005bc8:	4b84      	ldr	r3, [pc, #528]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a83      	ldr	r2, [pc, #524]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd4:	4b81      	ldr	r3, [pc, #516]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a80      	ldr	r2, [pc, #512]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	e00b      	b.n	8005bfa <HAL_RCC_OscConfig+0x5a6>
 8005be2:	4b7e      	ldr	r3, [pc, #504]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	4a7d      	ldr	r2, [pc, #500]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6713      	str	r3, [r2, #112]	; 0x70
 8005bee:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	4a7a      	ldr	r2, [pc, #488]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d015      	beq.n	8005c2e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fc fb83 	bl	800230c <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fc fb7f 	bl	800230c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e122      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c20:	4b6e      	ldr	r3, [pc, #440]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ee      	beq.n	8005c0a <HAL_RCC_OscConfig+0x5b6>
 8005c2c:	e014      	b.n	8005c58 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2e:	f7fc fb6d 	bl	800230c <HAL_GetTick>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fc fb69 	bl	800230c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e10c      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c4c:	4b63      	ldr	r3, [pc, #396]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ee      	bne.n	8005c36 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8101 	beq.w	8005e64 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c62:	4b5e      	ldr	r3, [pc, #376]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6a:	2b18      	cmp	r3, #24
 8005c6c:	f000 80bc 	beq.w	8005de8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f040 8095 	bne.w	8005da4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7a:	4b58      	ldr	r3, [pc, #352]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a57      	ldr	r2, [pc, #348]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fc fb41 	bl	800230c <HAL_GetTick>
 8005c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fc fb3d 	bl	800230c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0e2      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ca0:	4b4e      	ldr	r3, [pc, #312]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cac:	4b4b      	ldr	r3, [pc, #300]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb0:	4b4b      	ldr	r3, [pc, #300]	; (8005de0 <HAL_RCC_OscConfig+0x78c>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cbc:	0112      	lsls	r2, r2, #4
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	4946      	ldr	r1, [pc, #280]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	628b      	str	r3, [r1, #40]	; 0x28
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	025b      	lsls	r3, r3, #9
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cf6:	4939      	ldr	r1, [pc, #228]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005cfc:	4b37      	ldr	r3, [pc, #220]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4a36      	ldr	r2, [pc, #216]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d08:	4b34      	ldr	r3, [pc, #208]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0c:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <HAL_RCC_OscConfig+0x790>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d14:	00d2      	lsls	r2, r2, #3
 8005d16:	4931      	ldr	r1, [pc, #196]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f023 020c 	bic.w	r2, r3, #12
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	492c      	ldr	r1, [pc, #176]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d2e:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f023 0202 	bic.w	r2, r3, #2
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	4928      	ldr	r1, [pc, #160]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d40:	4b26      	ldr	r3, [pc, #152]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d4c:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	4a22      	ldr	r2, [pc, #136]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d58:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d70:	4b1a      	ldr	r3, [pc, #104]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fc fac6 	bl	800230c <HAL_GetTick>
 8005d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fc fac2 	bl	800230c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e067      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0x730>
 8005da2:	e05f      	b.n	8005e64 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da4:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc faac 	bl	800230c <HAL_GetTick>
 8005db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fc faa8 	bl	800230c <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e04d      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dca:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <HAL_RCC_OscConfig+0x788>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x764>
 8005dd6:	e045      	b.n	8005e64 <HAL_RCC_OscConfig+0x810>
 8005dd8:	58024800 	.word	0x58024800
 8005ddc:	58024400 	.word	0x58024400
 8005de0:	fffffc0c 	.word	0xfffffc0c
 8005de4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005de8:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <HAL_RCC_OscConfig+0x81c>)
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005dee:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <HAL_RCC_OscConfig+0x81c>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d031      	beq.n	8005e60 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f003 0203 	and.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d12a      	bne.n	8005e60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d122      	bne.n	8005e60 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d11a      	bne.n	8005e60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0a5b      	lsrs	r3, r3, #9
 8005e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d111      	bne.n	8005e60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d108      	bne.n	8005e60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0e1b      	lsrs	r3, r3, #24
 8005e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d001      	beq.n	8005e64 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3730      	adds	r7, #48	; 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	58024400 	.word	0x58024400

08005e74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e19c      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e88:	4b8a      	ldr	r3, [pc, #552]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d910      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	4b87      	ldr	r3, [pc, #540]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 020f 	bic.w	r2, r3, #15
 8005e9e:	4985      	ldr	r1, [pc, #532]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea6:	4b83      	ldr	r3, [pc, #524]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e184      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d010      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	4b7b      	ldr	r3, [pc, #492]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d908      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ed4:	4b78      	ldr	r3, [pc, #480]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	4975      	ldr	r1, [pc, #468]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d010      	beq.n	8005f14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	4b70      	ldr	r3, [pc, #448]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d908      	bls.n	8005f14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f02:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	496a      	ldr	r1, [pc, #424]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d010      	beq.n	8005f42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	4b64      	ldr	r3, [pc, #400]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d908      	bls.n	8005f42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f30:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	495e      	ldr	r1, [pc, #376]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69da      	ldr	r2, [r3, #28]
 8005f52:	4b59      	ldr	r3, [pc, #356]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d908      	bls.n	8005f70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f5e:	4b56      	ldr	r3, [pc, #344]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	4953      	ldr	r1, [pc, #332]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d010      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	4b4d      	ldr	r3, [pc, #308]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d908      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f8c:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f023 020f 	bic.w	r2, r3, #15
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4947      	ldr	r1, [pc, #284]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d055      	beq.n	8006056 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005faa:	4b43      	ldr	r3, [pc, #268]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	4940      	ldr	r1, [pc, #256]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fc4:	4b3c      	ldr	r3, [pc, #240]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d121      	bne.n	8006014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0f6      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d107      	bne.n	8005fec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fdc:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d115      	bne.n	8006014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0ea      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d107      	bne.n	8006004 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ff4:	4b30      	ldr	r3, [pc, #192]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0de      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006004:	4b2c      	ldr	r3, [pc, #176]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0d6      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f023 0207 	bic.w	r2, r3, #7
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4925      	ldr	r1, [pc, #148]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006022:	4313      	orrs	r3, r2
 8006024:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006026:	f7fc f971 	bl	800230c <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602c:	e00a      	b.n	8006044 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800602e:	f7fc f96d 	bl	800230c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0be      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006044:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	429a      	cmp	r2, r3
 8006054:	d1eb      	bne.n	800602e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	429a      	cmp	r2, r3
 8006070:	d208      	bcs.n	8006084 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006072:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f023 020f 	bic.w	r2, r3, #15
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	490e      	ldr	r1, [pc, #56]	; (80060b8 <HAL_RCC_ClockConfig+0x244>)
 8006080:	4313      	orrs	r3, r2
 8006082:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d214      	bcs.n	80060bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f023 020f 	bic.w	r2, r3, #15
 800609a:	4906      	ldr	r1, [pc, #24]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <HAL_RCC_ClockConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e086      	b.n	80061c2 <HAL_RCC_ClockConfig+0x34e>
 80060b4:	52002000 	.word	0x52002000
 80060b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d010      	beq.n	80060ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	4b3f      	ldr	r3, [pc, #252]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d208      	bcs.n	80060ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060d8:	4b3c      	ldr	r3, [pc, #240]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	4939      	ldr	r1, [pc, #228]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d010      	beq.n	8006118 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	4b34      	ldr	r3, [pc, #208]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006102:	429a      	cmp	r2, r3
 8006104:	d208      	bcs.n	8006118 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006106:	4b31      	ldr	r3, [pc, #196]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	492e      	ldr	r1, [pc, #184]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006114:	4313      	orrs	r3, r2
 8006116:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699a      	ldr	r2, [r3, #24]
 8006128:	4b28      	ldr	r3, [pc, #160]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006130:	429a      	cmp	r2, r3
 8006132:	d208      	bcs.n	8006146 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006134:	4b25      	ldr	r3, [pc, #148]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	4922      	ldr	r1, [pc, #136]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006142:	4313      	orrs	r3, r2
 8006144:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d010      	beq.n	8006174 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800615e:	429a      	cmp	r2, r3
 8006160:	d208      	bcs.n	8006174 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006162:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	4917      	ldr	r1, [pc, #92]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006170:	4313      	orrs	r3, r2
 8006172:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006174:	f000 f834 	bl	80061e0 <HAL_RCC_GetSysClockFreq>
 8006178:	4602      	mov	r2, r0
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	4912      	ldr	r1, [pc, #72]	; (80061d0 <HAL_RCC_ClockConfig+0x35c>)
 8006186:	5ccb      	ldrb	r3, [r1, r3]
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
 8006190:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006192:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <HAL_RCC_ClockConfig+0x358>)
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	4a0d      	ldr	r2, [pc, #52]	; (80061d0 <HAL_RCC_ClockConfig+0x35c>)
 800619c:	5cd3      	ldrb	r3, [r2, r3]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <HAL_RCC_ClockConfig+0x360>)
 80061aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_RCC_ClockConfig+0x364>)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <HAL_RCC_ClockConfig+0x368>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fc f85e 	bl	8002278 <HAL_InitTick>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	58024400 	.word	0x58024400
 80061d0:	0800c53c 	.word	0x0800c53c
 80061d4:	20000004 	.word	0x20000004
 80061d8:	20000000 	.word	0x20000000
 80061dc:	20000008 	.word	0x20000008

080061e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061e6:	4bb3      	ldr	r3, [pc, #716]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ee:	2b18      	cmp	r3, #24
 80061f0:	f200 8155 	bhi.w	800649e <HAL_RCC_GetSysClockFreq+0x2be>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006261 	.word	0x08006261
 8006200:	0800649f 	.word	0x0800649f
 8006204:	0800649f 	.word	0x0800649f
 8006208:	0800649f 	.word	0x0800649f
 800620c:	0800649f 	.word	0x0800649f
 8006210:	0800649f 	.word	0x0800649f
 8006214:	0800649f 	.word	0x0800649f
 8006218:	0800649f 	.word	0x0800649f
 800621c:	08006287 	.word	0x08006287
 8006220:	0800649f 	.word	0x0800649f
 8006224:	0800649f 	.word	0x0800649f
 8006228:	0800649f 	.word	0x0800649f
 800622c:	0800649f 	.word	0x0800649f
 8006230:	0800649f 	.word	0x0800649f
 8006234:	0800649f 	.word	0x0800649f
 8006238:	0800649f 	.word	0x0800649f
 800623c:	0800628d 	.word	0x0800628d
 8006240:	0800649f 	.word	0x0800649f
 8006244:	0800649f 	.word	0x0800649f
 8006248:	0800649f 	.word	0x0800649f
 800624c:	0800649f 	.word	0x0800649f
 8006250:	0800649f 	.word	0x0800649f
 8006254:	0800649f 	.word	0x0800649f
 8006258:	0800649f 	.word	0x0800649f
 800625c:	08006293 	.word	0x08006293
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006260:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800626c:	4b91      	ldr	r3, [pc, #580]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	08db      	lsrs	r3, r3, #3
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	4a90      	ldr	r2, [pc, #576]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
 800627c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800627e:	e111      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006280:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006282:	61bb      	str	r3, [r7, #24]
    break;
 8006284:	e10e      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006286:	4b8d      	ldr	r3, [pc, #564]	; (80064bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006288:	61bb      	str	r3, [r7, #24]
    break;
 800628a:	e10b      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800628c:	4b8c      	ldr	r3, [pc, #560]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800628e:	61bb      	str	r3, [r7, #24]
    break;
 8006290:	e108      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006292:	4b88      	ldr	r3, [pc, #544]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800629c:	4b85      	ldr	r3, [pc, #532]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062a8:	4b82      	ldr	r3, [pc, #520]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80062b2:	4b80      	ldr	r3, [pc, #512]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80e1 	beq.w	8006498 <HAL_RCC_GetSysClockFreq+0x2b8>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	f000 8083 	beq.w	80063e4 <HAL_RCC_GetSysClockFreq+0x204>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	f200 80a1 	bhi.w	8006428 <HAL_RCC_GetSysClockFreq+0x248>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0x114>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d056      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80062f2:	e099      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f4:	4b6f      	ldr	r3, [pc, #444]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02d      	beq.n	800635c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006300:	4b6c      	ldr	r3, [pc, #432]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	4a6b      	ldr	r2, [pc, #428]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	ee07 3a90 	vmov	s15, r3
 8006318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632a:	4b62      	ldr	r3, [pc, #392]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	ed97 6a02 	vldr	s12, [r7, #8]
 800633e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800634e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800635a:	e087      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006366:	eddf 6a58 	vldr	s13, [pc, #352]	; 80064c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800636a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636e:	4b51      	ldr	r3, [pc, #324]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006382:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800639e:	e065      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b2:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e2:	e043      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80063f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f6:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006406:	ed97 6a02 	vldr	s12, [r7, #8]
 800640a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800640e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800641a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006426:	e021      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a02 	vldr	s12, [r7, #8]
 800644e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800646a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	0a5b      	lsrs	r3, r3, #9
 8006472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006476:	3301      	adds	r3, #1
 8006478:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006484:	edd7 6a07 	vldr	s13, [r7, #28]
 8006488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006490:	ee17 3a90 	vmov	r3, s15
 8006494:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006496:	e005      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	61bb      	str	r3, [r7, #24]
    break;
 800649c:	e002      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064a0:	61bb      	str	r3, [r7, #24]
    break;
 80064a2:	bf00      	nop
  }

  return sysclockfreq;
 80064a4:	69bb      	ldr	r3, [r7, #24]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	; 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	58024400 	.word	0x58024400
 80064b8:	03d09000 	.word	0x03d09000
 80064bc:	003d0900 	.word	0x003d0900
 80064c0:	02dc6c00 	.word	0x02dc6c00
 80064c4:	46000000 	.word	0x46000000
 80064c8:	4c742400 	.word	0x4c742400
 80064cc:	4a742400 	.word	0x4a742400
 80064d0:	4c371b00 	.word	0x4c371b00

080064d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064da:	f7ff fe81 	bl	80061e0 <HAL_RCC_GetSysClockFreq>
 80064de:	4602      	mov	r2, r0
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <HAL_RCC_GetHCLKFreq+0x50>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	490f      	ldr	r1, [pc, #60]	; (8006528 <HAL_RCC_GetHCLKFreq+0x54>)
 80064ec:	5ccb      	ldrb	r3, [r1, r3]
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	fa22 f303 	lsr.w	r3, r2, r3
 80064f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064f8:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <HAL_RCC_GetHCLKFreq+0x50>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	4a09      	ldr	r2, [pc, #36]	; (8006528 <HAL_RCC_GetHCLKFreq+0x54>)
 8006502:	5cd3      	ldrb	r3, [r2, r3]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	4a07      	ldr	r2, [pc, #28]	; (800652c <HAL_RCC_GetHCLKFreq+0x58>)
 8006510:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006512:	4a07      	ldr	r2, [pc, #28]	; (8006530 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <HAL_RCC_GetHCLKFreq+0x58>)
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	58024400 	.word	0x58024400
 8006528:	0800c53c 	.word	0x0800c53c
 800652c:	20000004 	.word	0x20000004
 8006530:	20000000 	.word	0x20000000

08006534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006538:	f7ff ffcc 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 800653c:	4602      	mov	r2, r0
 800653e:	4b06      	ldr	r3, [pc, #24]	; (8006558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	091b      	lsrs	r3, r3, #4
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	4904      	ldr	r1, [pc, #16]	; (800655c <HAL_RCC_GetPCLK1Freq+0x28>)
 800654a:	5ccb      	ldrb	r3, [r1, r3]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd80      	pop	{r7, pc}
 8006558:	58024400 	.word	0x58024400
 800655c:	0800c53c 	.word	0x0800c53c

08006560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006564:	f7ff ffb6 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4904      	ldr	r1, [pc, #16]	; (8006588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	58024400 	.word	0x58024400
 8006588:	0800c53c 	.word	0x0800c53c

0800658c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006598:	2300      	movs	r3, #0
 800659a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d03f      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b0:	d02a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80065b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b6:	d824      	bhi.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065bc:	d018      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c2:	d81e      	bhi.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065cc:	d007      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80065ce:	e018      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d0:	4bab      	ldr	r3, [pc, #684]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4aaa      	ldr	r2, [pc, #680]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065dc:	e015      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	2102      	movs	r1, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 f9cf 	bl	8007988 <RCCEx_PLL2_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065ee:	e00c      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3324      	adds	r3, #36	; 0x24
 80065f4:	2102      	movs	r1, #2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 fa78 	bl	8007aec <RCCEx_PLL3_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006600:	e003      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
      break;
 8006606:	e000      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006610:	4b9b      	ldr	r3, [pc, #620]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661c:	4998      	ldr	r1, [pc, #608]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661e:	4313      	orrs	r3, r2
 8006620:	650b      	str	r3, [r1, #80]	; 0x50
 8006622:	e001      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03d      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006638:	2b04      	cmp	r3, #4
 800663a:	d826      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006659 	.word	0x08006659
 8006648:	08006667 	.word	0x08006667
 800664c:	08006679 	.word	0x08006679
 8006650:	08006691 	.word	0x08006691
 8006654:	08006691 	.word	0x08006691
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006658:	4b89      	ldr	r3, [pc, #548]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	4a88      	ldr	r2, [pc, #544]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006664:	e015      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f001 f98b 	bl	8007988 <RCCEx_PLL2_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006676:	e00c      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3324      	adds	r3, #36	; 0x24
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fa34 	bl	8007aec <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
      break;
 800668e:	e000      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006698:	4b79      	ldr	r3, [pc, #484]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	f023 0207 	bic.w	r2, r3, #7
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	4976      	ldr	r1, [pc, #472]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	650b      	str	r3, [r1, #80]	; 0x50
 80066aa:	e001      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d042      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	d02b      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d825      	bhi.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80066cc:	2bc0      	cmp	r3, #192	; 0xc0
 80066ce:	d028      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80066d0:	2bc0      	cmp	r3, #192	; 0xc0
 80066d2:	d821      	bhi.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d016      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d81d      	bhi.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d007      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80066e4:	e018      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e6:	4b66      	ldr	r3, [pc, #408]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	4a65      	ldr	r2, [pc, #404]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066f2:	e017      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	2100      	movs	r1, #0
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 f944 	bl	8007988 <RCCEx_PLL2_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006704:	e00e      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3324      	adds	r3, #36	; 0x24
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f001 f9ed 	bl	8007aec <RCCEx_PLL3_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006716:	e005      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]
      break;
 800671c:	e002      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800671e:	bf00      	nop
 8006720:	e000      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d109      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800672a:	4b55      	ldr	r3, [pc, #340]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800672c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006736:	4952      	ldr	r1, [pc, #328]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006738:	4313      	orrs	r3, r2
 800673a:	650b      	str	r3, [r1, #80]	; 0x50
 800673c:	e001      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674a:	2b00      	cmp	r3, #0
 800674c:	d049      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006758:	d030      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800675a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800675e:	d82a      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006760:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006764:	d02c      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006766:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800676a:	d824      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800676c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006770:	d018      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006776:	d81e      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800677c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006780:	d007      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006782:	e018      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006784:	4b3e      	ldr	r3, [pc, #248]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	4a3d      	ldr	r2, [pc, #244]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800678a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006790:	e017      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3304      	adds	r3, #4
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f001 f8f5 	bl	8007988 <RCCEx_PLL2_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067a2:	e00e      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3324      	adds	r3, #36	; 0x24
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f99e 	bl	8007aec <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067b4:	e005      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ba:	e002      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80067c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067c8:	4b2d      	ldr	r3, [pc, #180]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067d6:	492a      	ldr	r1, [pc, #168]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	658b      	str	r3, [r1, #88]	; 0x58
 80067dc:	e001      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d04c      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067f8:	d030      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80067fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067fe:	d82a      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006800:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006804:	d02c      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006806:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800680a:	d824      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800680c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006810:	d018      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006816:	d81e      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800681c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006820:	d007      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006822:	e018      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b16      	ldr	r3, [pc, #88]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006830:	e017      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3304      	adds	r3, #4
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f8a5 	bl	8007988 <RCCEx_PLL2_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006842:	e00e      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3324      	adds	r3, #36	; 0x24
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f94e 	bl	8007aec <RCCEx_PLL3_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006854:	e005      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]
      break;
 800685a:	e002      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800685c:	bf00      	nop
 800685e:	e000      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800686a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006876:	4902      	ldr	r1, [pc, #8]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006878:	4313      	orrs	r3, r2
 800687a:	658b      	str	r3, [r1, #88]	; 0x58
 800687c:	e004      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d032      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006898:	2b30      	cmp	r3, #48	; 0x30
 800689a:	d01c      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800689c:	2b30      	cmp	r3, #48	; 0x30
 800689e:	d817      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d00c      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d813      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d016      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	d10f      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b0:	4baf      	ldr	r3, [pc, #700]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4aae      	ldr	r2, [pc, #696]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80068bc:	e00e      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2102      	movs	r1, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 f85f 	bl	8007988 <RCCEx_PLL2_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80068ce:	e005      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
      break;
 80068d4:	e002      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80068da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068e2:	4ba3      	ldr	r3, [pc, #652]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	49a0      	ldr	r1, [pc, #640]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068f4:	e001      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d047      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800690e:	d030      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006914:	d82a      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800691a:	d02c      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800691c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006920:	d824      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006926:	d018      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692c:	d81e      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	d007      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006938:	e018      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b8d      	ldr	r3, [pc, #564]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4a8c      	ldr	r2, [pc, #560]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006946:	e017      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f001 f81a 	bl	8007988 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006958:	e00e      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3324      	adds	r3, #36	; 0x24
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f001 f8c3 	bl	8007aec <RCCEx_PLL3_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800696a:	e005      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	e002      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800697e:	4b7c      	ldr	r3, [pc, #496]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698a:	4979      	ldr	r1, [pc, #484]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800698c:	4313      	orrs	r3, r2
 800698e:	650b      	str	r3, [r1, #80]	; 0x50
 8006990:	e001      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d049      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069aa:	d02e      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80069ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b0:	d828      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80069b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069b6:	d02a      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80069b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069bc:	d822      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80069be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069c2:	d026      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80069c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069c8:	d81c      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80069ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ce:	d010      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80069d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d4:	d816      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01d      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069de:	d111      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 ffce 	bl	8007988 <RCCEx_PLL2_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069f0:	e012      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3324      	adds	r3, #36	; 0x24
 80069f6:	2101      	movs	r1, #1
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f877 	bl	8007aec <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a02:	e009      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
      break;
 8006a08:	e006      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a0a:	bf00      	nop
 8006a0c:	e004      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a0e:	bf00      	nop
 8006a10:	e002      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a12:	bf00      	nop
 8006a14:	e000      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a1e:	4b54      	ldr	r3, [pc, #336]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2a:	4951      	ldr	r1, [pc, #324]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	650b      	str	r3, [r1, #80]	; 0x50
 8006a30:	e001      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d04b      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a4c:	d02e      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a52:	d828      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a58:	d02a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d822      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a64:	d026      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6a:	d81c      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a70:	d010      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a76:	d816      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01d      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a80:	d111      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	2101      	movs	r1, #1
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 ff7d 	bl	8007988 <RCCEx_PLL2_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a92:	e012      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3324      	adds	r3, #36	; 0x24
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f826 	bl	8007aec <RCCEx_PLL3_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006aa4:	e009      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aaa:	e006      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006aac:	bf00      	nop
 8006aae:	e004      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006ab0:	bf00      	nop
 8006ab2:	e002      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ace:	4928      	ldr	r1, [pc, #160]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ad4:	e001      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02f      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aee:	d00e      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006af4:	d814      	bhi.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d015      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afe:	d10f      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b00:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b0c:	e00c      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ff37 	bl	8007988 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b1e:	e003      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	75fb      	strb	r3, [r7, #23]
      break;
 8006b24:	e000      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b2e:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3a:	490d      	ldr	r1, [pc, #52]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	650b      	str	r3, [r1, #80]	; 0x50
 8006b40:	e001      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
 8006b44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d033      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d81c      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b9b 	.word	0x08006b9b
 8006b64:	08006b75 	.word	0x08006b75
 8006b68:	08006b83 	.word	0x08006b83
 8006b6c:	08006b9b 	.word	0x08006b9b
 8006b70:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b74:	4bb8      	ldr	r3, [pc, #736]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4ab7      	ldr	r2, [pc, #732]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b80:	e00c      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2102      	movs	r1, #2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fefd 	bl	8007988 <RCCEx_PLL2_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b92:	e003      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	e000      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ba2:	4bad      	ldr	r3, [pc, #692]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba6:	f023 0203 	bic.w	r2, r3, #3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	49aa      	ldr	r1, [pc, #680]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bb4:	e001      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8086 	beq.w	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc8:	4ba4      	ldr	r3, [pc, #656]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4aa3      	ldr	r2, [pc, #652]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bd4:	f7fb fb9a 	bl	800230c <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bda:	e009      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bdc:	f7fb fb96 	bl	800230c <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b64      	cmp	r3, #100	; 0x64
 8006be8:	d902      	bls.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	75fb      	strb	r3, [r7, #23]
        break;
 8006bee:	e005      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bf0:	4b9a      	ldr	r3, [pc, #616]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0ef      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d166      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c02:	4b95      	ldr	r3, [pc, #596]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c0c:	4053      	eors	r3, r2
 8006c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d013      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c16:	4b90      	ldr	r3, [pc, #576]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c20:	4b8d      	ldr	r3, [pc, #564]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c24:	4a8c      	ldr	r2, [pc, #560]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c2c:	4b8a      	ldr	r3, [pc, #552]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	4a89      	ldr	r2, [pc, #548]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c38:	4a87      	ldr	r2, [pc, #540]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c48:	d115      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4a:	f7fb fb5f 	bl	800230c <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c50:	e00b      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c52:	f7fb fb5b 	bl	800230c <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d902      	bls.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	75fb      	strb	r3, [r7, #23]
            break;
 8006c68:	e005      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c6a:	4b7b      	ldr	r3, [pc, #492]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0ed      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d126      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8a:	d10d      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006c8c:	4b72      	ldr	r3, [pc, #456]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c9a:	0919      	lsrs	r1, r3, #4
 8006c9c:	4b70      	ldr	r3, [pc, #448]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006c9e:	400b      	ands	r3, r1
 8006ca0:	496d      	ldr	r1, [pc, #436]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]
 8006ca6:	e005      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006ca8:	4b6b      	ldr	r3, [pc, #428]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	4a6a      	ldr	r2, [pc, #424]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cb2:	6113      	str	r3, [r2, #16]
 8006cb4:	4b68      	ldr	r3, [pc, #416]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc2:	4965      	ldr	r1, [pc, #404]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	670b      	str	r3, [r1, #112]	; 0x70
 8006cc8:	e004      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	75bb      	strb	r3, [r7, #22]
 8006cce:	e001      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d07e      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce4:	2b28      	cmp	r3, #40	; 0x28
 8006ce6:	d867      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006dbf 	.word	0x08006dbf
 8006cf4:	08006db9 	.word	0x08006db9
 8006cf8:	08006db9 	.word	0x08006db9
 8006cfc:	08006db9 	.word	0x08006db9
 8006d00:	08006db9 	.word	0x08006db9
 8006d04:	08006db9 	.word	0x08006db9
 8006d08:	08006db9 	.word	0x08006db9
 8006d0c:	08006db9 	.word	0x08006db9
 8006d10:	08006d95 	.word	0x08006d95
 8006d14:	08006db9 	.word	0x08006db9
 8006d18:	08006db9 	.word	0x08006db9
 8006d1c:	08006db9 	.word	0x08006db9
 8006d20:	08006db9 	.word	0x08006db9
 8006d24:	08006db9 	.word	0x08006db9
 8006d28:	08006db9 	.word	0x08006db9
 8006d2c:	08006db9 	.word	0x08006db9
 8006d30:	08006da7 	.word	0x08006da7
 8006d34:	08006db9 	.word	0x08006db9
 8006d38:	08006db9 	.word	0x08006db9
 8006d3c:	08006db9 	.word	0x08006db9
 8006d40:	08006db9 	.word	0x08006db9
 8006d44:	08006db9 	.word	0x08006db9
 8006d48:	08006db9 	.word	0x08006db9
 8006d4c:	08006db9 	.word	0x08006db9
 8006d50:	08006dbf 	.word	0x08006dbf
 8006d54:	08006db9 	.word	0x08006db9
 8006d58:	08006db9 	.word	0x08006db9
 8006d5c:	08006db9 	.word	0x08006db9
 8006d60:	08006db9 	.word	0x08006db9
 8006d64:	08006db9 	.word	0x08006db9
 8006d68:	08006db9 	.word	0x08006db9
 8006d6c:	08006db9 	.word	0x08006db9
 8006d70:	08006dbf 	.word	0x08006dbf
 8006d74:	08006db9 	.word	0x08006db9
 8006d78:	08006db9 	.word	0x08006db9
 8006d7c:	08006db9 	.word	0x08006db9
 8006d80:	08006db9 	.word	0x08006db9
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006db9 	.word	0x08006db9
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	08006dbf 	.word	0x08006dbf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	2101      	movs	r1, #1
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fdf4 	bl	8007988 <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006da4:	e00c      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3324      	adds	r3, #36	; 0x24
 8006daa:	2101      	movs	r1, #1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fe9d 	bl	8007aec <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd2:	4921      	ldr	r1, [pc, #132]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8006dd8:	e001      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03e      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d820      	bhi.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e3b 	.word	0x08006e3b
 8006dfc:	08006e11 	.word	0x08006e11
 8006e00:	08006e23 	.word	0x08006e23
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e3b 	.word	0x08006e3b
 8006e0c:	08006e3b 	.word	0x08006e3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	2101      	movs	r1, #1
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fdb6 	bl	8007988 <RCCEx_PLL2_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e20:	e00c      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	2101      	movs	r1, #1
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fe5f 	bl	8007aec <RCCEx_PLL3_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e32:	e003      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
      break;
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d110      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	f023 0207 	bic.w	r2, r3, #7
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4e:	4902      	ldr	r1, [pc, #8]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	654b      	str	r3, [r1, #84]	; 0x54
 8006e54:	e008      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	58024800 	.word	0x58024800
 8006e60:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d039      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d820      	bhi.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ec7 	.word	0x08006ec7
 8006e88:	08006e9d 	.word	0x08006e9d
 8006e8c:	08006eaf 	.word	0x08006eaf
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006ec7 	.word	0x08006ec7
 8006e98:	08006ec7 	.word	0x08006ec7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fd70 	bl	8007988 <RCCEx_PLL2_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006eac:	e00c      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3324      	adds	r3, #36	; 0x24
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fe19 	bl	8007aec <RCCEx_PLL3_Config>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ebe:	e003      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ece:	4bb7      	ldr	r3, [pc, #732]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed2:	f023 0207 	bic.w	r2, r3, #7
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006edc:	49b3      	ldr	r1, [pc, #716]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee2:	e001      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d04b      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006efe:	d02e      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f04:	d828      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d02a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f10:	d822      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f16:	d026      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006f18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f1c:	d81c      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f22:	d010      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f28:	d816      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01d      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f32:	d111      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fd24 	bl	8007988 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f44:	e012      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3324      	adds	r3, #36	; 0x24
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fdcd 	bl	8007aec <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f56:	e009      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	e006      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e004      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f62:	bf00      	nop
 8006f64:	e002      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f72:	4b8e      	ldr	r3, [pc, #568]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f80:	498a      	ldr	r1, [pc, #552]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	654b      	str	r3, [r1, #84]	; 0x54
 8006f86:	e001      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d04b      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fa2:	d02e      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006fa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fa8:	d828      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fae:	d02a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	d822      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fba:	d026      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fc0:	d81c      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc6:	d010      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fcc:	d816      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01d      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd6:	d111      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fcd2 	bl	8007988 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fe8:	e012      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	2102      	movs	r1, #2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fd7b 	bl	8007aec <RCCEx_PLL3_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ffa:	e009      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8007000:	e006      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007002:	bf00      	nop
 8007004:	e004      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007006:	bf00      	nop
 8007008:	e002      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800700a:	bf00      	nop
 800700c:	e000      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800700e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007024:	4961      	ldr	r1, [pc, #388]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007026:	4313      	orrs	r3, r2
 8007028:	658b      	str	r3, [r1, #88]	; 0x58
 800702a:	e001      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007038:	2b00      	cmp	r3, #0
 800703a:	d04b      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007042:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007046:	d02e      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007048:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800704c:	d828      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800704e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007052:	d02a      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007058:	d822      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800705a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800705e:	d026      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007060:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007064:	d81c      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800706a:	d010      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800706c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007070:	d816      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01d      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707a:	d111      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fc80 	bl	8007988 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800708c:	e012      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3324      	adds	r3, #36	; 0x24
 8007092:	2102      	movs	r1, #2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fd29 	bl	8007aec <RCCEx_PLL3_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800709e:	e009      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
      break;
 80070a4:	e006      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070a6:	bf00      	nop
 80070a8:	e004      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070ba:	4b3c      	ldr	r3, [pc, #240]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c8:	4938      	ldr	r1, [pc, #224]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	658b      	str	r3, [r1, #88]	; 0x58
 80070ce:	e001      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ea:	d10a      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3324      	adds	r3, #36	; 0x24
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fcfa 	bl	8007aec <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007102:	4b2a      	ldr	r3, [pc, #168]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007110:	4926      	ldr	r1, [pc, #152]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007112:	4313      	orrs	r3, r2
 8007114:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712c:	d10a      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3324      	adds	r3, #36	; 0x24
 8007132:	2102      	movs	r1, #2
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fcd9 	bl	8007aec <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007152:	4916      	ldr	r1, [pc, #88]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007154:	4313      	orrs	r3, r2
 8007156:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d036      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800716a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800716e:	d01f      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007174:	d817      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717e:	d009      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007180:	e011      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fbfd 	bl	8007988 <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007192:	e00e      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	2102      	movs	r1, #2
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fca6 	bl	8007aec <RCCEx_PLL3_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071a4:	e005      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
      break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80071ac:	58024400 	.word	0x58024400
      break;
 80071b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071b8:	4b93      	ldr	r3, [pc, #588]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071c6:	4990      	ldr	r1, [pc, #576]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	658b      	str	r3, [r1, #88]	; 0x58
 80071cc:	e001      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d033      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071e8:	d01c      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80071ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071ee:	d816      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80071f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f4:	d003      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80071f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071fa:	d007      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80071fc:	e00f      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fe:	4b82      	ldr	r3, [pc, #520]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	4a81      	ldr	r2, [pc, #516]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007208:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800720a:	e00c      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	2101      	movs	r1, #1
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fc6a 	bl	8007aec <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800721c:	e003      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	75fb      	strb	r3, [r7, #23]
      break;
 8007222:	e000      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800722c:	4b76      	ldr	r3, [pc, #472]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	4973      	ldr	r1, [pc, #460]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800723c:	4313      	orrs	r3, r2
 800723e:	654b      	str	r3, [r1, #84]	; 0x54
 8007240:	e001      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d029      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800725a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725e:	d007      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007260:	e00f      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007262:	4b69      	ldr	r3, [pc, #420]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	4a68      	ldr	r2, [pc, #416]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800726e:	e00b      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3304      	adds	r3, #4
 8007274:	2102      	movs	r1, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fb86 	bl	8007988 <RCCEx_PLL2_Config>
 800727c:	4603      	mov	r3, r0
 800727e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007280:	e002      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
      break;
 8007286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800728e:	4b5e      	ldr	r3, [pc, #376]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729a:	495b      	ldr	r1, [pc, #364]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800729c:	4313      	orrs	r3, r2
 800729e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072a0:	e001      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	2102      	movs	r1, #2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fc17 	bl	8007aec <RCCEx_PLL3_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d030      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072dc:	d017      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d811      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80072e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e8:	d013      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80072ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ee:	d80b      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d010      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80072f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f8:	d106      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072fa:	4b43      	ldr	r3, [pc, #268]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	4a42      	ldr	r2, [pc, #264]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007306:	e007      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
      break;
 800730c:	e004      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800730e:	bf00      	nop
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800731e:	4b3a      	ldr	r3, [pc, #232]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800732a:	4937      	ldr	r1, [pc, #220]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800732c:	4313      	orrs	r3, r2
 800732e:	654b      	str	r3, [r1, #84]	; 0x54
 8007330:	e001      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007342:	4b31      	ldr	r3, [pc, #196]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	492e      	ldr	r1, [pc, #184]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007350:	4313      	orrs	r3, r2
 8007352:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007360:	4b29      	ldr	r3, [pc, #164]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800736e:	4926      	ldr	r1, [pc, #152]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007370:	4313      	orrs	r3, r2
 8007372:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007380:	4b21      	ldr	r3, [pc, #132]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800738c:	491e      	ldr	r1, [pc, #120]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800738e:	4313      	orrs	r3, r2
 8007390:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	4a19      	ldr	r2, [pc, #100]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073a8:	6113      	str	r3, [r2, #16]
 80073aa:	4b17      	ldr	r3, [pc, #92]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073ac:	691a      	ldr	r2, [r3, #16]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073b4:	4914      	ldr	r1, [pc, #80]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da08      	bge.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073c2:	4b11      	ldr	r3, [pc, #68]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	490e      	ldr	r1, [pc, #56]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ee:	4906      	ldr	r1, [pc, #24]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80073f4:	7dbb      	ldrb	r3, [r7, #22]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	58024400 	.word	0x58024400

0800740c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007410:	f7ff f860 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	091b      	lsrs	r3, r3, #4
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	; (8007434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58024400 	.word	0x58024400
 8007434:	0800c53c 	.word	0x0800c53c

08007438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007438:	b480      	push	{r7}
 800743a:	b089      	sub	sp, #36	; 0x24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007440:	4ba1      	ldr	r3, [pc, #644]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800744a:	4b9f      	ldr	r3, [pc, #636]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	0b1b      	lsrs	r3, r3, #12
 8007450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007456:	4b9c      	ldr	r3, [pc, #624]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007462:	4b99      	ldr	r3, [pc, #612]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	fb02 f303 	mul.w	r3, r2, r3
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8111 	beq.w	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b02      	cmp	r3, #2
 800748a:	f000 8083 	beq.w	8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b02      	cmp	r3, #2
 8007492:	f200 80a1 	bhi.w	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d056      	beq.n	8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074a2:	e099      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a4:	4b88      	ldr	r3, [pc, #544]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02d      	beq.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074b0:	4b85      	ldr	r3, [pc, #532]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	08db      	lsrs	r3, r3, #3
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	4a84      	ldr	r2, [pc, #528]	; (80076cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b7b      	ldr	r3, [pc, #492]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800750a:	e087      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b6a      	ldr	r3, [pc, #424]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754e:	e065      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b59      	ldr	r3, [pc, #356]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007592:	e043      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b48      	ldr	r3, [pc, #288]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075d6:	e021      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b37      	ldr	r3, [pc, #220]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800761a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800761c:	4b2a      	ldr	r3, [pc, #168]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	0a5b      	lsrs	r3, r3, #9
 8007622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007636:	edd7 6a07 	vldr	s13, [r7, #28]
 800763a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007642:	ee17 2a90 	vmov	r2, s15
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800764a:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007664:	edd7 6a07 	vldr	s13, [r7, #28]
 8007668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007670:	ee17 2a90 	vmov	r2, s15
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007678:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	0e1b      	lsrs	r3, r3, #24
 800767e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800768e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007692:	edd7 6a07 	vldr	s13, [r7, #28]
 8007696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800769a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800769e:	ee17 2a90 	vmov	r2, s15
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076a6:	e008      	b.n	80076ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	bf00      	nop
 80076bc:	3724      	adds	r7, #36	; 0x24
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	46000000 	.word	0x46000000
 80076d4:	4c742400 	.word	0x4c742400
 80076d8:	4a742400 	.word	0x4a742400
 80076dc:	4c371b00 	.word	0x4c371b00

080076e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b089      	sub	sp, #36	; 0x24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e8:	4ba1      	ldr	r3, [pc, #644]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076f2:	4b9f      	ldr	r3, [pc, #636]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	0d1b      	lsrs	r3, r3, #20
 80076f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076fe:	4b9c      	ldr	r3, [pc, #624]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800770a:	4b99      	ldr	r3, [pc, #612]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8111 	beq.w	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b02      	cmp	r3, #2
 8007732:	f000 8083 	beq.w	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b02      	cmp	r3, #2
 800773a:	f200 80a1 	bhi.w	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d056      	beq.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800774a:	e099      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b88      	ldr	r3, [pc, #544]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02d      	beq.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007758:	4b85      	ldr	r3, [pc, #532]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a84      	ldr	r2, [pc, #528]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b7b      	ldr	r3, [pc, #492]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077b2:	e087      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b6a      	ldr	r3, [pc, #424]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f6:	e065      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b59      	ldr	r3, [pc, #356]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a03 	vldr	s12, [r7, #12]
 800781e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800783a:	e043      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b48      	ldr	r3, [pc, #288]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800787e:	e021      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b37      	ldr	r3, [pc, #220]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80078c4:	4b2a      	ldr	r3, [pc, #168]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	0a5b      	lsrs	r3, r3, #9
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078de:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ea:	ee17 2a90 	vmov	r2, s15
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80078f2:	4b1f      	ldr	r3, [pc, #124]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007918:	ee17 2a90 	vmov	r2, s15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007920:	4b13      	ldr	r3, [pc, #76]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	0e1b      	lsrs	r3, r3, #24
 8007926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800793a:	edd7 6a07 	vldr	s13, [r7, #28]
 800793e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007946:	ee17 2a90 	vmov	r2, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800794e:	e008      	b.n	8007962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	609a      	str	r2, [r3, #8]
}
 8007962:	bf00      	nop
 8007964:	3724      	adds	r7, #36	; 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	58024400 	.word	0x58024400
 8007974:	03d09000 	.word	0x03d09000
 8007978:	46000000 	.word	0x46000000
 800797c:	4c742400 	.word	0x4c742400
 8007980:	4a742400 	.word	0x4a742400
 8007984:	4c371b00 	.word	0x4c371b00

08007988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007996:	4b53      	ldr	r3, [pc, #332]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d101      	bne.n	80079a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e099      	b.n	8007ada <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079a6:	4b4f      	ldr	r3, [pc, #316]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a4e      	ldr	r2, [pc, #312]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b2:	f7fa fcab 	bl	800230c <HAL_GetTick>
 80079b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079b8:	e008      	b.n	80079cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079ba:	f7fa fca7 	bl	800230c <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e086      	b.n	8007ada <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079cc:	4b45      	ldr	r3, [pc, #276]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f0      	bne.n	80079ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079d8:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	031b      	lsls	r3, r3, #12
 80079e6:	493f      	ldr	r1, [pc, #252]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	628b      	str	r3, [r1, #40]	; 0x28
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	025b      	lsls	r3, r3, #9
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	061b      	lsls	r3, r3, #24
 8007a18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a1c:	4931      	ldr	r1, [pc, #196]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a22:	4b30      	ldr	r3, [pc, #192]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	492d      	ldr	r1, [pc, #180]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a34:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	f023 0220 	bic.w	r2, r3, #32
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	4928      	ldr	r1, [pc, #160]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	f023 0310 	bic.w	r3, r3, #16
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a52:	4b24      	ldr	r3, [pc, #144]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <RCCEx_PLL2_Config+0x160>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	69d2      	ldr	r2, [r2, #28]
 8007a5e:	00d2      	lsls	r2, r2, #3
 8007a60:	4920      	ldr	r1, [pc, #128]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a66:	4b1f      	ldr	r3, [pc, #124]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a6c:	f043 0310 	orr.w	r3, r3, #16
 8007a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	4a19      	ldr	r2, [pc, #100]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a84:	e00f      	b.n	8007aa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a8c:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a98:	e005      	b.n	8007aa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	4a11      	ldr	r2, [pc, #68]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a0e      	ldr	r2, [pc, #56]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fa fc2b 	bl	800230c <HAL_GetTick>
 8007ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ab8:	e008      	b.n	8007acc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007aba:	f7fa fc27 	bl	800230c <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e006      	b.n	8007ada <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f0      	beq.n	8007aba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	ffff0007 	.word	0xffff0007

08007aec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007afa:	4b53      	ldr	r3, [pc, #332]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d101      	bne.n	8007b0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e099      	b.n	8007c3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b0a:	4b4f      	ldr	r3, [pc, #316]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4e      	ldr	r2, [pc, #312]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b16:	f7fa fbf9 	bl	800230c <HAL_GetTick>
 8007b1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b1c:	e008      	b.n	8007b30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b1e:	f7fa fbf5 	bl	800230c <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e086      	b.n	8007c3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b30:	4b45      	ldr	r3, [pc, #276]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f0      	bne.n	8007b1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b3c:	4b42      	ldr	r3, [pc, #264]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	051b      	lsls	r3, r3, #20
 8007b4a:	493f      	ldr	r1, [pc, #252]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	025b      	lsls	r3, r3, #9
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	041b      	lsls	r3, r3, #16
 8007b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b80:	4931      	ldr	r1, [pc, #196]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b86:	4b30      	ldr	r3, [pc, #192]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	492d      	ldr	r1, [pc, #180]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b98:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	4928      	ldr	r1, [pc, #160]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007baa:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bb6:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bba:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <RCCEx_PLL3_Config+0x160>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	69d2      	ldr	r2, [r2, #28]
 8007bc2:	00d2      	lsls	r2, r2, #3
 8007bc4:	4920      	ldr	r1, [pc, #128]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bca:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a19      	ldr	r2, [pc, #100]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007be8:	e00f      	b.n	8007c0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d106      	bne.n	8007bfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bf0:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bfc:	e005      	b.n	8007c0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bfe:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c16:	f7fa fb79 	bl	800230c <HAL_GetTick>
 8007c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c1c:	e008      	b.n	8007c30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c1e:	f7fa fb75 	bl	800230c <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f0      	beq.n	8007c1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	ffff0007 	.word	0xffff0007

08007c50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e0eb      	b.n	8007e3e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a75      	ldr	r2, [pc, #468]	; (8007e48 <HAL_SPI_Init+0x1f8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00f      	beq.n	8007c96 <HAL_SPI_Init+0x46>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a74      	ldr	r2, [pc, #464]	; (8007e4c <HAL_SPI_Init+0x1fc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00a      	beq.n	8007c96 <HAL_SPI_Init+0x46>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a72      	ldr	r2, [pc, #456]	; (8007e50 <HAL_SPI_Init+0x200>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d005      	beq.n	8007c96 <HAL_SPI_Init+0x46>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b0f      	cmp	r3, #15
 8007c90:	d901      	bls.n	8007c96 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e0d3      	b.n	8007e3e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f8dc 	bl	8007e54 <SPI_GetPacketSize>
 8007c9c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a69      	ldr	r2, [pc, #420]	; (8007e48 <HAL_SPI_Init+0x1f8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_SPI_Init+0x72>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a67      	ldr	r2, [pc, #412]	; (8007e4c <HAL_SPI_Init+0x1fc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d007      	beq.n	8007cc2 <HAL_SPI_Init+0x72>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a66      	ldr	r2, [pc, #408]	; (8007e50 <HAL_SPI_Init+0x200>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d002      	beq.n	8007cc2 <HAL_SPI_Init+0x72>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d811      	bhi.n	8007ce6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cc6:	4a60      	ldr	r2, [pc, #384]	; (8007e48 <HAL_SPI_Init+0x1f8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d009      	beq.n	8007ce0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5e      	ldr	r2, [pc, #376]	; (8007e4c <HAL_SPI_Init+0x1fc>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <HAL_SPI_Init+0x90>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a5d      	ldr	r2, [pc, #372]	; (8007e50 <HAL_SPI_Init+0x200>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d104      	bne.n	8007cea <HAL_SPI_Init+0x9a>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d901      	bls.n	8007cea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e0a9      	b.n	8007e3e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7f9 fcfa 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0201 	bic.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d24:	d119      	bne.n	8007d5a <HAL_SPI_Init+0x10a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d2e:	d103      	bne.n	8007d38 <HAL_SPI_Init+0xe8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10c      	bne.n	8007d5a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d48:	d107      	bne.n	8007d5a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	431a      	orrs	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	431a      	orrs	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6c:	ea42 0103 	orr.w	r1, r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dba:	ea42 0103 	orr.w	r1, r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d113      	bne.n	8007dfa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007df8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40013000 	.word	0x40013000
 8007e4c:	40003800 	.word	0x40003800
 8007e50:	40003c00 	.word	0x40003c00

08007e54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	3307      	adds	r3, #7
 8007e72:	08db      	lsrs	r3, r3, #3
 8007e74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e049      	b.n	8007f30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7f9 fc87 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f000 fbe1 	bl	8008690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e049      	b.n	8007fde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f841 	bl	8007fe6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4619      	mov	r1, r3
 8007f76:	4610      	mov	r0, r2
 8007f78:	f000 fb8a 	bl	8008690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b02      	cmp	r3, #2
 800800e:	d122      	bne.n	8008056 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b02      	cmp	r3, #2
 800801c:	d11b      	bne.n	8008056 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f06f 0202 	mvn.w	r2, #2
 8008026:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb09 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 8008042:	e005      	b.n	8008050 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fafb 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fb0c 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b04      	cmp	r3, #4
 8008062:	d122      	bne.n	80080aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b04      	cmp	r3, #4
 8008070:	d11b      	bne.n	80080aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f06f 0204 	mvn.w	r2, #4
 800807a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fadf 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 8008096:	e005      	b.n	80080a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fad1 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fae2 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d122      	bne.n	80080fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d11b      	bne.n	80080fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f06f 0208 	mvn.w	r2, #8
 80080ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2204      	movs	r2, #4
 80080d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0303 	and.w	r3, r3, #3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fab5 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 80080ea:	e005      	b.n	80080f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 faa7 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fab8 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b10      	cmp	r3, #16
 800810a:	d122      	bne.n	8008152 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f003 0310 	and.w	r3, r3, #16
 8008116:	2b10      	cmp	r3, #16
 8008118:	d11b      	bne.n	8008152 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f06f 0210 	mvn.w	r2, #16
 8008122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2208      	movs	r2, #8
 8008128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa8b 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 800813e:	e005      	b.n	800814c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fa7d 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa8e 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10e      	bne.n	800817e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b01      	cmp	r3, #1
 800816c:	d107      	bne.n	800817e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f06f 0201 	mvn.w	r2, #1
 8008176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7f9 fa94 	bl	80016a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008188:	2b80      	cmp	r3, #128	; 0x80
 800818a:	d10e      	bne.n	80081aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b80      	cmp	r3, #128	; 0x80
 8008198:	d107      	bne.n	80081aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 ff89 	bl	80090bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b8:	d10e      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d107      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 ff7c 	bl	80090d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d10e      	bne.n	8008204 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d107      	bne.n	8008204 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa3c 	bl	800867c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b20      	cmp	r3, #32
 8008210:	d10e      	bne.n	8008230 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b20      	cmp	r3, #32
 800821e:	d107      	bne.n	8008230 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0220 	mvn.w	r2, #32
 8008228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 ff3c 	bl	80090a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800824e:	2302      	movs	r3, #2
 8008250:	e0fd      	b.n	800844e <HAL_TIM_PWM_ConfigChannel+0x216>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b14      	cmp	r3, #20
 800825e:	f200 80f0 	bhi.w	8008442 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082bd 	.word	0x080082bd
 800826c:	08008443 	.word	0x08008443
 8008270:	08008443 	.word	0x08008443
 8008274:	08008443 	.word	0x08008443
 8008278:	080082fd 	.word	0x080082fd
 800827c:	08008443 	.word	0x08008443
 8008280:	08008443 	.word	0x08008443
 8008284:	08008443 	.word	0x08008443
 8008288:	0800833f 	.word	0x0800833f
 800828c:	08008443 	.word	0x08008443
 8008290:	08008443 	.word	0x08008443
 8008294:	08008443 	.word	0x08008443
 8008298:	0800837f 	.word	0x0800837f
 800829c:	08008443 	.word	0x08008443
 80082a0:	08008443 	.word	0x08008443
 80082a4:	08008443 	.word	0x08008443
 80082a8:	080083c1 	.word	0x080083c1
 80082ac:	08008443 	.word	0x08008443
 80082b0:	08008443 	.word	0x08008443
 80082b4:	08008443 	.word	0x08008443
 80082b8:	08008401 	.word	0x08008401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fa7e 	bl	80087c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0208 	orr.w	r2, r2, #8
 80082d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0204 	bic.w	r2, r2, #4
 80082e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6999      	ldr	r1, [r3, #24]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	619a      	str	r2, [r3, #24]
      break;
 80082fa:	e0a3      	b.n	8008444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68b9      	ldr	r1, [r7, #8]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 faee 	bl	80088e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699a      	ldr	r2, [r3, #24]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6999      	ldr	r1, [r3, #24]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	021a      	lsls	r2, r3, #8
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	619a      	str	r2, [r3, #24]
      break;
 800833c:	e082      	b.n	8008444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fb57 	bl	80089f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0208 	orr.w	r2, r2, #8
 8008358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0204 	bic.w	r2, r2, #4
 8008368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69d9      	ldr	r1, [r3, #28]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	61da      	str	r2, [r3, #28]
      break;
 800837c:	e062      	b.n	8008444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fbbd 	bl	8008b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69da      	ldr	r2, [r3, #28]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69da      	ldr	r2, [r3, #28]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69d9      	ldr	r1, [r3, #28]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	021a      	lsls	r2, r3, #8
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	61da      	str	r2, [r3, #28]
      break;
 80083be:	e041      	b.n	8008444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fc04 	bl	8008bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0208 	orr.w	r2, r2, #8
 80083da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0204 	bic.w	r2, r2, #4
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083fe:	e021      	b.n	8008444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fc46 	bl	8008c98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800841a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	021a      	lsls	r2, r3, #8
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008440:	e000      	b.n	8008444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop

08008458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x18>
 800846c:	2302      	movs	r3, #2
 800846e:	e0db      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1d0>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4b69      	ldr	r3, [pc, #420]	; (8008630 <HAL_TIM_ConfigClockSource+0x1d8>)
 800848c:	4013      	ands	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a63      	ldr	r2, [pc, #396]	; (8008634 <HAL_TIM_ConfigClockSource+0x1dc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	f000 80a9 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 80084ac:	4a61      	ldr	r2, [pc, #388]	; (8008634 <HAL_TIM_ConfigClockSource+0x1dc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	f200 80ae 	bhi.w	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 80084b4:	4a60      	ldr	r2, [pc, #384]	; (8008638 <HAL_TIM_ConfigClockSource+0x1e0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	f000 80a1 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 80084bc:	4a5e      	ldr	r2, [pc, #376]	; (8008638 <HAL_TIM_ConfigClockSource+0x1e0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	f200 80a6 	bhi.w	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 80084c4:	4a5d      	ldr	r2, [pc, #372]	; (800863c <HAL_TIM_ConfigClockSource+0x1e4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	f000 8099 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 80084cc:	4a5b      	ldr	r2, [pc, #364]	; (800863c <HAL_TIM_ConfigClockSource+0x1e4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f200 809e 	bhi.w	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 80084d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80084d8:	f000 8091 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 80084dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80084e0:	f200 8096 	bhi.w	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 80084e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084e8:	f000 8089 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 80084ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f0:	f200 808e 	bhi.w	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 80084f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084f8:	d03e      	beq.n	8008578 <HAL_TIM_ConfigClockSource+0x120>
 80084fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fe:	f200 8087 	bhi.w	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	f000 8085 	beq.w	8008614 <HAL_TIM_ConfigClockSource+0x1bc>
 800850a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850e:	d87f      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008510:	2b70      	cmp	r3, #112	; 0x70
 8008512:	d01a      	beq.n	800854a <HAL_TIM_ConfigClockSource+0xf2>
 8008514:	2b70      	cmp	r3, #112	; 0x70
 8008516:	d87b      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008518:	2b60      	cmp	r3, #96	; 0x60
 800851a:	d050      	beq.n	80085be <HAL_TIM_ConfigClockSource+0x166>
 800851c:	2b60      	cmp	r3, #96	; 0x60
 800851e:	d877      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008520:	2b50      	cmp	r3, #80	; 0x50
 8008522:	d03c      	beq.n	800859e <HAL_TIM_ConfigClockSource+0x146>
 8008524:	2b50      	cmp	r3, #80	; 0x50
 8008526:	d873      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	d058      	beq.n	80085de <HAL_TIM_ConfigClockSource+0x186>
 800852c:	2b40      	cmp	r3, #64	; 0x40
 800852e:	d86f      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008530:	2b30      	cmp	r3, #48	; 0x30
 8008532:	d064      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 8008534:	2b30      	cmp	r3, #48	; 0x30
 8008536:	d86b      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008538:	2b20      	cmp	r3, #32
 800853a:	d060      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 800853c:	2b20      	cmp	r3, #32
 800853e:	d867      	bhi.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05c      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
 8008544:	2b10      	cmp	r3, #16
 8008546:	d05a      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008548:	e062      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6899      	ldr	r1, [r3, #8]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f000 fc7f 	bl	8008e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800856c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	609a      	str	r2, [r3, #8]
      break;
 8008576:	e04e      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	6899      	ldr	r1, [r3, #8]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f000 fc68 	bl	8008e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800859a:	609a      	str	r2, [r3, #8]
      break;
 800859c:	e03b      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6859      	ldr	r1, [r3, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	461a      	mov	r2, r3
 80085ac:	f000 fbd8 	bl	8008d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2150      	movs	r1, #80	; 0x50
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fc32 	bl	8008e20 <TIM_ITRx_SetConfig>
      break;
 80085bc:	e02b      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6859      	ldr	r1, [r3, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f000 fbf7 	bl	8008dbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2160      	movs	r1, #96	; 0x60
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fc22 	bl	8008e20 <TIM_ITRx_SetConfig>
      break;
 80085dc:	e01b      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6859      	ldr	r1, [r3, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f000 fbb8 	bl	8008d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2140      	movs	r1, #64	; 0x40
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fc12 	bl	8008e20 <TIM_ITRx_SetConfig>
      break;
 80085fc:	e00b      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f000 fc09 	bl	8008e20 <TIM_ITRx_SetConfig>
        break;
 800860e:	e002      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008610:	bf00      	nop
 8008612:	e000      	b.n	8008616 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008614:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	ffceff88 	.word	0xffceff88
 8008634:	00100040 	.word	0x00100040
 8008638:	00100030 	.word	0x00100030
 800863c:	00100020 	.word	0x00100020

08008640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ae:	d00f      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3d      	ldr	r2, [pc, #244]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00b      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d007      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a3b      	ldr	r2, [pc, #236]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a3a      	ldr	r2, [pc, #232]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d108      	bne.n	80086e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2f      	ldr	r2, [pc, #188]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01f      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f0:	d01b      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d017      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d013      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <TIM_Base_SetConfig+0x128>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a27      	ldr	r2, [pc, #156]	; (80087bc <TIM_Base_SetConfig+0x12c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_Base_SetConfig+0x9a>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <TIM_Base_SetConfig+0x130>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d108      	bne.n	800873c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a10      	ldr	r2, [pc, #64]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00f      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a11      	ldr	r2, [pc, #68]	; (80087b8 <TIM_Base_SetConfig+0x128>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a10      	ldr	r2, [pc, #64]	; (80087bc <TIM_Base_SetConfig+0x12c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0f      	ldr	r2, [pc, #60]	; (80087c0 <TIM_Base_SetConfig+0x130>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d103      	bne.n	8008790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	615a      	str	r2, [r3, #20]
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800

080087c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	f023 0201 	bic.w	r2, r3, #1
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <TIM_OC1_SetConfig+0x108>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 0302 	bic.w	r3, r3, #2
 800880c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a2d      	ldr	r2, [pc, #180]	; (80088d0 <TIM_OC1_SetConfig+0x10c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00f      	beq.n	8008840 <TIM_OC1_SetConfig+0x7c>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2c      	ldr	r2, [pc, #176]	; (80088d4 <TIM_OC1_SetConfig+0x110>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00b      	beq.n	8008840 <TIM_OC1_SetConfig+0x7c>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a2b      	ldr	r2, [pc, #172]	; (80088d8 <TIM_OC1_SetConfig+0x114>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d007      	beq.n	8008840 <TIM_OC1_SetConfig+0x7c>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a2a      	ldr	r2, [pc, #168]	; (80088dc <TIM_OC1_SetConfig+0x118>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_OC1_SetConfig+0x7c>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a29      	ldr	r2, [pc, #164]	; (80088e0 <TIM_OC1_SetConfig+0x11c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10c      	bne.n	800885a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f023 0308 	bic.w	r3, r3, #8
 8008846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f023 0304 	bic.w	r3, r3, #4
 8008858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <TIM_OC1_SetConfig+0x10c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00f      	beq.n	8008882 <TIM_OC1_SetConfig+0xbe>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1b      	ldr	r2, [pc, #108]	; (80088d4 <TIM_OC1_SetConfig+0x110>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00b      	beq.n	8008882 <TIM_OC1_SetConfig+0xbe>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1a      	ldr	r2, [pc, #104]	; (80088d8 <TIM_OC1_SetConfig+0x114>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d007      	beq.n	8008882 <TIM_OC1_SetConfig+0xbe>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <TIM_OC1_SetConfig+0x118>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d003      	beq.n	8008882 <TIM_OC1_SetConfig+0xbe>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <TIM_OC1_SetConfig+0x11c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d111      	bne.n	80088a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	621a      	str	r2, [r3, #32]
}
 80088c0:	bf00      	nop
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	fffeff8f 	.word	0xfffeff8f
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f023 0210 	bic.w	r2, r3, #16
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4b34      	ldr	r3, [pc, #208]	; (80089e0 <TIM_OC2_SetConfig+0xfc>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800891a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0320 	bic.w	r3, r3, #32
 800892e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a29      	ldr	r2, [pc, #164]	; (80089e4 <TIM_OC2_SetConfig+0x100>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_OC2_SetConfig+0x68>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a28      	ldr	r2, [pc, #160]	; (80089e8 <TIM_OC2_SetConfig+0x104>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d10d      	bne.n	8008968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008966:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <TIM_OC2_SetConfig+0x100>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00f      	beq.n	8008990 <TIM_OC2_SetConfig+0xac>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <TIM_OC2_SetConfig+0x104>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00b      	beq.n	8008990 <TIM_OC2_SetConfig+0xac>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <TIM_OC2_SetConfig+0x108>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d007      	beq.n	8008990 <TIM_OC2_SetConfig+0xac>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a1b      	ldr	r2, [pc, #108]	; (80089f0 <TIM_OC2_SetConfig+0x10c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_OC2_SetConfig+0xac>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a1a      	ldr	r2, [pc, #104]	; (80089f4 <TIM_OC2_SetConfig+0x110>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d113      	bne.n	80089b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800899e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	feff8fff 	.word	0xfeff8fff
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	021b      	lsls	r3, r3, #8
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a27      	ldr	r2, [pc, #156]	; (8008af0 <TIM_OC3_SetConfig+0xf8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_OC3_SetConfig+0x66>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <TIM_OC3_SetConfig+0xfc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d10d      	bne.n	8008a7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a1c      	ldr	r2, [pc, #112]	; (8008af0 <TIM_OC3_SetConfig+0xf8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00f      	beq.n	8008aa2 <TIM_OC3_SetConfig+0xaa>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a1b      	ldr	r2, [pc, #108]	; (8008af4 <TIM_OC3_SetConfig+0xfc>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00b      	beq.n	8008aa2 <TIM_OC3_SetConfig+0xaa>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a1a      	ldr	r2, [pc, #104]	; (8008af8 <TIM_OC3_SetConfig+0x100>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d007      	beq.n	8008aa2 <TIM_OC3_SetConfig+0xaa>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a19      	ldr	r2, [pc, #100]	; (8008afc <TIM_OC3_SetConfig+0x104>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC3_SetConfig+0xaa>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <TIM_OC3_SetConfig+0x108>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d113      	bne.n	8008aca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	621a      	str	r2, [r3, #32]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40010400 	.word	0x40010400
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40014400 	.word	0x40014400
 8008b00:	40014800 	.word	0x40014800

08008b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	031b      	lsls	r3, r3, #12
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a18      	ldr	r2, [pc, #96]	; (8008bc0 <TIM_OC4_SetConfig+0xbc>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00f      	beq.n	8008b84 <TIM_OC4_SetConfig+0x80>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a17      	ldr	r2, [pc, #92]	; (8008bc4 <TIM_OC4_SetConfig+0xc0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00b      	beq.n	8008b84 <TIM_OC4_SetConfig+0x80>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a16      	ldr	r2, [pc, #88]	; (8008bc8 <TIM_OC4_SetConfig+0xc4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d007      	beq.n	8008b84 <TIM_OC4_SetConfig+0x80>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a15      	ldr	r2, [pc, #84]	; (8008bcc <TIM_OC4_SetConfig+0xc8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_OC4_SetConfig+0x80>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a14      	ldr	r2, [pc, #80]	; (8008bd0 <TIM_OC4_SetConfig+0xcc>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d109      	bne.n	8008b98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	019b      	lsls	r3, r3, #6
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	621a      	str	r2, [r3, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	40010000 	.word	0x40010000
 8008bc4:	40010400 	.word	0x40010400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40014400 	.word	0x40014400
 8008bd0:	40014800 	.word	0x40014800

08008bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	041b      	lsls	r3, r3, #16
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <TIM_OC5_SetConfig+0xb0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00f      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <TIM_OC5_SetConfig+0xb4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00b      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <TIM_OC5_SetConfig+0xb8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d007      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <TIM_OC5_SetConfig+0xbc>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d003      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a13      	ldr	r2, [pc, #76]	; (8008c94 <TIM_OC5_SetConfig+0xc0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d109      	bne.n	8008c5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	621a      	str	r2, [r3, #32]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	40010000 	.word	0x40010000
 8008c88:	40010400 	.word	0x40010400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	40014400 	.word	0x40014400
 8008c94:	40014800 	.word	0x40014800

08008c98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	051b      	lsls	r3, r3, #20
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <TIM_OC6_SetConfig+0xb4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00f      	beq.n	8008d10 <TIM_OC6_SetConfig+0x78>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <TIM_OC6_SetConfig+0xb8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00b      	beq.n	8008d10 <TIM_OC6_SetConfig+0x78>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <TIM_OC6_SetConfig+0xbc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d007      	beq.n	8008d10 <TIM_OC6_SetConfig+0x78>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <TIM_OC6_SetConfig+0xc0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d003      	beq.n	8008d10 <TIM_OC6_SetConfig+0x78>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a14      	ldr	r2, [pc, #80]	; (8008d5c <TIM_OC6_SetConfig+0xc4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d109      	bne.n	8008d24 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	621a      	str	r2, [r3, #32]
}
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40010400 	.word	0x40010400
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40014400 	.word	0x40014400
 8008d5c:	40014800 	.word	0x40014800

08008d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	f023 0201 	bic.w	r2, r3, #1
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 030a 	bic.w	r3, r3, #10
 8008d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0210 	bic.w	r2, r3, #16
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	031b      	lsls	r3, r3, #12
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	621a      	str	r2, [r3, #32]
}
 8008e12:	bf00      	nop
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <TIM_ITRx_SetConfig+0x38>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	f043 0307 	orr.w	r3, r3, #7
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	609a      	str	r2, [r3, #8]
}
 8008e4a:	bf00      	nop
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	ffcfff8f 	.word	0xffcfff8f

08008e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	021a      	lsls	r2, r3, #8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	609a      	str	r2, [r3, #8]
}
 8008e90:	bf00      	nop
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e068      	b.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2e      	ldr	r2, [pc, #184]	; (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2d      	ldr	r2, [pc, #180]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d108      	bne.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d01d      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f26:	d018      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1b      	ldr	r2, [pc, #108]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d013      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00e      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a18      	ldr	r2, [pc, #96]	; (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d009      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d004      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a14      	ldr	r2, [pc, #80]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d10c      	bne.n	8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40000400 	.word	0x40000400
 8008fa0:	40000800 	.word	0x40000800
 8008fa4:	40000c00 	.word	0x40000c00
 8008fa8:	40001800 	.word	0x40001800

08008fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e065      	b.n	8009094 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4313      	orrs	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	041b      	lsls	r3, r3, #16
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d004      	beq.n	8009056 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a14      	ldr	r2, [pc, #80]	; (80090a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d115      	bne.n	8009082 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	051b      	lsls	r3, r3, #20
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	40010000 	.word	0x40010000
 80090a4:	40010400 	.word	0x40010400

080090a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e042      	b.n	800917c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7f8 fcef 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2224      	movs	r2, #36	; 0x24
 8009112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0201 	bic.w	r2, r2, #1
 8009124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fcb2 	bl	8009a90 <UART_SetConfig>
 800912c:	4603      	mov	r3, r0
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e022      	b.n	800917c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 fa06 	bl	800a550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fa8d 	bl	800a694 <UART_CheckIdleState>
 800917a:	4603      	mov	r3, r0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08a      	sub	sp, #40	; 0x28
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	4613      	mov	r3, r2
 8009192:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919a:	2b20      	cmp	r3, #32
 800919c:	f040 8083 	bne.w	80092a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_UART_Transmit+0x28>
 80091a6:	88fb      	ldrh	r3, [r7, #6]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e07b      	b.n	80092a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d101      	bne.n	80091be <HAL_UART_Transmit+0x3a>
 80091ba:	2302      	movs	r3, #2
 80091bc:	e074      	b.n	80092a8 <HAL_UART_Transmit+0x124>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2221      	movs	r2, #33	; 0x21
 80091d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091d6:	f7f9 f899 	bl	800230c <HAL_GetTick>
 80091da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	88fa      	ldrh	r2, [r7, #6]
 80091e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	88fa      	ldrh	r2, [r7, #6]
 80091e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f4:	d108      	bne.n	8009208 <HAL_UART_Transmit+0x84>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	e003      	b.n	8009210 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009218:	e02c      	b.n	8009274 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	2180      	movs	r1, #128	; 0x80
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f001 fa80 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e039      	b.n	80092a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10b      	bne.n	8009252 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	3302      	adds	r3, #2
 800924e:	61bb      	str	r3, [r7, #24]
 8009250:	e007      	b.n	8009262 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	3301      	adds	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1cc      	bne.n	800921a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2200      	movs	r2, #0
 8009288:	2140      	movs	r1, #64	; 0x40
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f001 fa4d 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e006      	b.n	80092a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e000      	b.n	80092a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80092a6:	2302      	movs	r3, #2
  }
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d131      	bne.n	800932c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_UART_Receive_IT+0x24>
 80092ce:	88fb      	ldrh	r3, [r7, #6]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e02a      	b.n	800932e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_UART_Receive_IT+0x36>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e023      	b.n	800932e <HAL_UART_Receive_IT+0x7e>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a0f      	ldr	r2, [pc, #60]	; (8009338 <HAL_UART_Receive_IT+0x88>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d00e      	beq.n	800931c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800931a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	461a      	mov	r2, r3
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f001 fa82 	bl	800a82c <UART_Start_Receive_IT>
 8009328:	4603      	mov	r3, r0
 800932a:	e000      	b.n	800932e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	58000c00 	.word	0x58000c00

0800933c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4613      	mov	r3, r2
 8009348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009350:	2b20      	cmp	r3, #32
 8009352:	d168      	bne.n	8009426 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <HAL_UART_Transmit_DMA+0x24>
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e061      	b.n	8009428 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <HAL_UART_Transmit_DMA+0x36>
 800936e:	2302      	movs	r3, #2
 8009370:	e05a      	b.n	8009428 <HAL_UART_Transmit_DMA+0xec>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	88fa      	ldrh	r2, [r7, #6]
 8009384:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	88fa      	ldrh	r2, [r7, #6]
 800938c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2221      	movs	r2, #33	; 0x21
 800939c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d02c      	beq.n	8009402 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ac:	4a20      	ldr	r2, [pc, #128]	; (8009430 <HAL_UART_Transmit_DMA+0xf4>)
 80093ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093b4:	4a1f      	ldr	r2, [pc, #124]	; (8009434 <HAL_UART_Transmit_DMA+0xf8>)
 80093b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093bc:	4a1e      	ldr	r2, [pc, #120]	; (8009438 <HAL_UART_Transmit_DMA+0xfc>)
 80093be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c4:	2200      	movs	r2, #0
 80093c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d0:	4619      	mov	r1, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3328      	adds	r3, #40	; 0x28
 80093d8:	461a      	mov	r2, r3
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	f7f9 fc3e 	bl	8002c5c <HAL_DMA_Start_IT>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2210      	movs	r2, #16
 80093ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e012      	b.n	8009428 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2240      	movs	r2, #64	; 0x40
 8009408:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009420:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	e000      	b.n	8009428 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009426:	2302      	movs	r3, #2
  }
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	0800ab25 	.word	0x0800ab25
 8009434:	0800ab75 	.word	0x0800ab75
 8009438:	0800ac5f 	.word	0x0800ac5f

0800943c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009450:	2b20      	cmp	r3, #32
 8009452:	d131      	bne.n	80094b8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <HAL_UART_Receive_DMA+0x24>
 800945a:	88fb      	ldrh	r3, [r7, #6]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e02a      	b.n	80094ba <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_UART_Receive_DMA+0x36>
 800946e:	2302      	movs	r3, #2
 8009470:	e023      	b.n	80094ba <HAL_UART_Receive_DMA+0x7e>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a0f      	ldr	r2, [pc, #60]	; (80094c4 <HAL_UART_Receive_DMA+0x88>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00e      	beq.n	80094a8 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80094a6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	461a      	mov	r2, r3
 80094ac:	68b9      	ldr	r1, [r7, #8]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f001 fa7a 	bl	800a9a8 <UART_Start_Receive_DMA>
 80094b4:	4603      	mov	r3, r0
 80094b6:	e000      	b.n	80094ba <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	58000c00 	.word	0x58000c00

080094c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80094ee:	4013      	ands	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d118      	bne.n	800952a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d013      	beq.n	800952a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8282 	beq.w	8009a24 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
      }
      return;
 8009528:	e27c      	b.n	8009a24 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80ef 	beq.w	8009710 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	4b73      	ldr	r3, [pc, #460]	; (8009704 <HAL_UART_IRQHandler+0x23c>)
 8009536:	4013      	ands	r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d105      	bne.n	8009548 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	4b72      	ldr	r3, [pc, #456]	; (8009708 <HAL_UART_IRQHandler+0x240>)
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 80e4 	beq.w	8009710 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d010      	beq.n	8009574 <HAL_UART_IRQHandler+0xac>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2201      	movs	r2, #1
 8009562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800956a:	f043 0201 	orr.w	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <HAL_UART_IRQHandler+0xd8>
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2202      	movs	r2, #2
 800958e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009596:	f043 0204 	orr.w	r2, r3, #4
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d010      	beq.n	80095cc <HAL_UART_IRQHandler+0x104>
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2204      	movs	r2, #4
 80095ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c2:	f043 0202 	orr.w	r2, r3, #2
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f003 0308 	and.w	r3, r3, #8
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d015      	beq.n	8009602 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4b48      	ldr	r3, [pc, #288]	; (8009704 <HAL_UART_IRQHandler+0x23c>)
 80095e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2208      	movs	r2, #8
 80095f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f8:	f043 0208 	orr.w	r2, r3, #8
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009608:	2b00      	cmp	r3, #0
 800960a:	d011      	beq.n	8009630 <HAL_UART_IRQHandler+0x168>
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00c      	beq.n	8009630 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800961e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009626:	f043 0220 	orr.w	r2, r3, #32
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 81f6 	beq.w	8009a28 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d011      	beq.n	800966a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d007      	beq.n	800966a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967c:	2b40      	cmp	r3, #64	; 0x40
 800967e:	d004      	beq.n	800968a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009686:	2b00      	cmp	r3, #0
 8009688:	d031      	beq.n	80096ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fa18 	bl	800aac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969a:	2b40      	cmp	r3, #64	; 0x40
 800969c:	d123      	bne.n	80096e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d013      	beq.n	80096de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ba:	4a14      	ldr	r2, [pc, #80]	; (800970c <HAL_UART_IRQHandler+0x244>)
 80096bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fa f852 	bl	800376c <HAL_DMA_Abort_IT>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d017      	beq.n	80096fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096dc:	e00f      	b.n	80096fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9c0 	bl	8009a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e4:	e00b      	b.n	80096fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f9bc 	bl	8009a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ec:	e007      	b.n	80096fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f9b8 	bl	8009a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80096fc:	e194      	b.n	8009a28 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fe:	bf00      	nop
    return;
 8009700:	e192      	b.n	8009a28 <HAL_UART_IRQHandler+0x560>
 8009702:	bf00      	nop
 8009704:	10000001 	.word	0x10000001
 8009708:	04000120 	.word	0x04000120
 800970c:	0800acdf 	.word	0x0800acdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009714:	2b01      	cmp	r3, #1
 8009716:	f040 810f 	bne.w	8009938 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 8109 	beq.w	8009938 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f003 0310 	and.w	r3, r3, #16
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8103 	beq.w	8009938 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2210      	movs	r2, #16
 8009738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009744:	2b40      	cmp	r3, #64	; 0x40
 8009746:	f040 80bb 	bne.w	80098c0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a96      	ldr	r2, [pc, #600]	; (80099ac <HAL_UART_IRQHandler+0x4e4>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d059      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a94      	ldr	r2, [pc, #592]	; (80099b0 <HAL_UART_IRQHandler+0x4e8>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d053      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a92      	ldr	r2, [pc, #584]	; (80099b4 <HAL_UART_IRQHandler+0x4ec>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d04d      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a90      	ldr	r2, [pc, #576]	; (80099b8 <HAL_UART_IRQHandler+0x4f0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d047      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a8e      	ldr	r2, [pc, #568]	; (80099bc <HAL_UART_IRQHandler+0x4f4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d041      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a8c      	ldr	r2, [pc, #560]	; (80099c0 <HAL_UART_IRQHandler+0x4f8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d03b      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a8a      	ldr	r2, [pc, #552]	; (80099c4 <HAL_UART_IRQHandler+0x4fc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d035      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a88      	ldr	r2, [pc, #544]	; (80099c8 <HAL_UART_IRQHandler+0x500>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d02f      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a86      	ldr	r2, [pc, #536]	; (80099cc <HAL_UART_IRQHandler+0x504>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d029      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a84      	ldr	r2, [pc, #528]	; (80099d0 <HAL_UART_IRQHandler+0x508>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d023      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a82      	ldr	r2, [pc, #520]	; (80099d4 <HAL_UART_IRQHandler+0x50c>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d01d      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a80      	ldr	r2, [pc, #512]	; (80099d8 <HAL_UART_IRQHandler+0x510>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d017      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a7e      	ldr	r2, [pc, #504]	; (80099dc <HAL_UART_IRQHandler+0x514>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d011      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a7c      	ldr	r2, [pc, #496]	; (80099e0 <HAL_UART_IRQHandler+0x518>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00b      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a7a      	ldr	r2, [pc, #488]	; (80099e4 <HAL_UART_IRQHandler+0x51c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d005      	beq.n	800980a <HAL_UART_IRQHandler+0x342>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a78      	ldr	r2, [pc, #480]	; (80099e8 <HAL_UART_IRQHandler+0x520>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d105      	bne.n	8009816 <HAL_UART_IRQHandler+0x34e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	b29b      	uxth	r3, r3
 8009814:	e004      	b.n	8009820 <HAL_UART_IRQHandler+0x358>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b29b      	uxth	r3, r3
 8009820:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009822:	893b      	ldrh	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 8101 	beq.w	8009a2c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009830:	893a      	ldrh	r2, [r7, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	f080 80fa 	bcs.w	8009a2c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	893a      	ldrh	r2, [r7, #8]
 800983c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800984a:	d02b      	beq.n	80098a4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800985a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0201 	bic.w	r2, r2, #1
 800986a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800987a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0210 	bic.w	r2, r2, #16
 8009898:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f9 fc46 	bl	8003130 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f8dd 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098be:	e0b5      	b.n	8009a2c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80a8 	beq.w	8009a30 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80098e0:	897b      	ldrh	r3, [r7, #10]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80a4 	beq.w	8009a30 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6899      	ldr	r1, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b3a      	ldr	r3, [pc, #232]	; (80099ec <HAL_UART_IRQHandler+0x524>)
 8009904:	400b      	ands	r3, r1
 8009906:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0210 	bic.w	r2, r2, #16
 800992a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800992c:	897b      	ldrh	r3, [r7, #10]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f8a1 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009936:	e07b      	b.n	8009a30 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00d      	beq.n	800995e <HAL_UART_IRQHandler+0x496>
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 fd38 	bl	800b3cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800995c:	e06b      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009964:	2b00      	cmp	r3, #0
 8009966:	d012      	beq.n	800998e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d008      	beq.n	800998e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009980:	2b00      	cmp	r3, #0
 8009982:	d057      	beq.n	8009a34 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	4798      	blx	r3
    }
    return;
 800998c:	e052      	b.n	8009a34 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d02b      	beq.n	80099f0 <HAL_UART_IRQHandler+0x528>
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d026      	beq.n	80099f0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f9b1 	bl	800ad0a <UART_EndTransmit_IT>
    return;
 80099a8:	e045      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
 80099aa:	bf00      	nop
 80099ac:	40020010 	.word	0x40020010
 80099b0:	40020028 	.word	0x40020028
 80099b4:	40020040 	.word	0x40020040
 80099b8:	40020058 	.word	0x40020058
 80099bc:	40020070 	.word	0x40020070
 80099c0:	40020088 	.word	0x40020088
 80099c4:	400200a0 	.word	0x400200a0
 80099c8:	400200b8 	.word	0x400200b8
 80099cc:	40020410 	.word	0x40020410
 80099d0:	40020428 	.word	0x40020428
 80099d4:	40020440 	.word	0x40020440
 80099d8:	40020458 	.word	0x40020458
 80099dc:	40020470 	.word	0x40020470
 80099e0:	40020488 	.word	0x40020488
 80099e4:	400204a0 	.word	0x400204a0
 80099e8:	400204b8 	.word	0x400204b8
 80099ec:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d008      	beq.n	8009a0c <HAL_UART_IRQHandler+0x544>
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 fcf5 	bl	800b3f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a0a:	e014      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00f      	beq.n	8009a36 <HAL_UART_IRQHandler+0x56e>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	da0c      	bge.n	8009a36 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 fcdf 	bl	800b3e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a22:	e008      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
      return;
 8009a24:	bf00      	nop
 8009a26:	e006      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
    return;
 8009a28:	bf00      	nop
 8009a2a:	e004      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
      return;
 8009a2c:	bf00      	nop
 8009a2e:	e002      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
      return;
 8009a30:	bf00      	nop
 8009a32:	e000      	b.n	8009a36 <HAL_UART_IRQHandler+0x56e>
    return;
 8009a34:	bf00      	nop
  }
}
 8009a36:	3720      	adds	r7, #32
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a90:	b5b0      	push	{r4, r5, r7, lr}
 8009a92:	b08e      	sub	sp, #56	; 0x38
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	431a      	orrs	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	4bbf      	ldr	r3, [pc, #764]	; (8009dbc <UART_SetConfig+0x32c>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6812      	ldr	r2, [r2, #0]
 8009ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4ab5      	ldr	r2, [pc, #724]	; (8009dc0 <UART_SetConfig+0x330>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d004      	beq.n	8009afa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009af6:	4313      	orrs	r3, r2
 8009af8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	4bb0      	ldr	r3, [pc, #704]	; (8009dc4 <UART_SetConfig+0x334>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	6812      	ldr	r2, [r2, #0]
 8009b08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	f023 010f 	bic.w	r1, r3, #15
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4aa7      	ldr	r2, [pc, #668]	; (8009dc8 <UART_SetConfig+0x338>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d176      	bne.n	8009c1c <UART_SetConfig+0x18c>
 8009b2e:	4ba7      	ldr	r3, [pc, #668]	; (8009dcc <UART_SetConfig+0x33c>)
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b36:	2b28      	cmp	r3, #40	; 0x28
 8009b38:	d86c      	bhi.n	8009c14 <UART_SetConfig+0x184>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <UART_SetConfig+0xb0>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009be5 	.word	0x08009be5
 8009b44:	08009c15 	.word	0x08009c15
 8009b48:	08009c15 	.word	0x08009c15
 8009b4c:	08009c15 	.word	0x08009c15
 8009b50:	08009c15 	.word	0x08009c15
 8009b54:	08009c15 	.word	0x08009c15
 8009b58:	08009c15 	.word	0x08009c15
 8009b5c:	08009c15 	.word	0x08009c15
 8009b60:	08009bed 	.word	0x08009bed
 8009b64:	08009c15 	.word	0x08009c15
 8009b68:	08009c15 	.word	0x08009c15
 8009b6c:	08009c15 	.word	0x08009c15
 8009b70:	08009c15 	.word	0x08009c15
 8009b74:	08009c15 	.word	0x08009c15
 8009b78:	08009c15 	.word	0x08009c15
 8009b7c:	08009c15 	.word	0x08009c15
 8009b80:	08009bf5 	.word	0x08009bf5
 8009b84:	08009c15 	.word	0x08009c15
 8009b88:	08009c15 	.word	0x08009c15
 8009b8c:	08009c15 	.word	0x08009c15
 8009b90:	08009c15 	.word	0x08009c15
 8009b94:	08009c15 	.word	0x08009c15
 8009b98:	08009c15 	.word	0x08009c15
 8009b9c:	08009c15 	.word	0x08009c15
 8009ba0:	08009bfd 	.word	0x08009bfd
 8009ba4:	08009c15 	.word	0x08009c15
 8009ba8:	08009c15 	.word	0x08009c15
 8009bac:	08009c15 	.word	0x08009c15
 8009bb0:	08009c15 	.word	0x08009c15
 8009bb4:	08009c15 	.word	0x08009c15
 8009bb8:	08009c15 	.word	0x08009c15
 8009bbc:	08009c15 	.word	0x08009c15
 8009bc0:	08009c05 	.word	0x08009c05
 8009bc4:	08009c15 	.word	0x08009c15
 8009bc8:	08009c15 	.word	0x08009c15
 8009bcc:	08009c15 	.word	0x08009c15
 8009bd0:	08009c15 	.word	0x08009c15
 8009bd4:	08009c15 	.word	0x08009c15
 8009bd8:	08009c15 	.word	0x08009c15
 8009bdc:	08009c15 	.word	0x08009c15
 8009be0:	08009c0d 	.word	0x08009c0d
 8009be4:	2301      	movs	r3, #1
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e222      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009bec:	2304      	movs	r3, #4
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e21e      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e21a      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e216      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c04:	2320      	movs	r3, #32
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e212      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c0c:	2340      	movs	r3, #64	; 0x40
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e20e      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e20a      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a6b      	ldr	r2, [pc, #428]	; (8009dd0 <UART_SetConfig+0x340>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d130      	bne.n	8009c88 <UART_SetConfig+0x1f8>
 8009c26:	4b69      	ldr	r3, [pc, #420]	; (8009dcc <UART_SetConfig+0x33c>)
 8009c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2a:	f003 0307 	and.w	r3, r3, #7
 8009c2e:	2b05      	cmp	r3, #5
 8009c30:	d826      	bhi.n	8009c80 <UART_SetConfig+0x1f0>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <UART_SetConfig+0x1a8>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c51 	.word	0x08009c51
 8009c3c:	08009c59 	.word	0x08009c59
 8009c40:	08009c61 	.word	0x08009c61
 8009c44:	08009c69 	.word	0x08009c69
 8009c48:	08009c71 	.word	0x08009c71
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	2300      	movs	r3, #0
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e1ec      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c58:	2304      	movs	r3, #4
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	e1e8      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c60:	2308      	movs	r3, #8
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e1e4      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c68:	2310      	movs	r3, #16
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e1e0      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c70:	2320      	movs	r3, #32
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e1dc      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c78:	2340      	movs	r3, #64	; 0x40
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e1d8      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c80:	2380      	movs	r3, #128	; 0x80
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e1d4      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a51      	ldr	r2, [pc, #324]	; (8009dd4 <UART_SetConfig+0x344>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d130      	bne.n	8009cf4 <UART_SetConfig+0x264>
 8009c92:	4b4e      	ldr	r3, [pc, #312]	; (8009dcc <UART_SetConfig+0x33c>)
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b05      	cmp	r3, #5
 8009c9c:	d826      	bhi.n	8009cec <UART_SetConfig+0x25c>
 8009c9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <UART_SetConfig+0x214>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009cbd 	.word	0x08009cbd
 8009ca8:	08009cc5 	.word	0x08009cc5
 8009cac:	08009ccd 	.word	0x08009ccd
 8009cb0:	08009cd5 	.word	0x08009cd5
 8009cb4:	08009cdd 	.word	0x08009cdd
 8009cb8:	08009ce5 	.word	0x08009ce5
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc2:	e1b6      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cca:	e1b2      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e1ae      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009cd4:	2310      	movs	r3, #16
 8009cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cda:	e1aa      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009cdc:	2320      	movs	r3, #32
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	e1a6      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cea:	e1a2      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf2:	e19e      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a37      	ldr	r2, [pc, #220]	; (8009dd8 <UART_SetConfig+0x348>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d130      	bne.n	8009d60 <UART_SetConfig+0x2d0>
 8009cfe:	4b33      	ldr	r3, [pc, #204]	; (8009dcc <UART_SetConfig+0x33c>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d826      	bhi.n	8009d58 <UART_SetConfig+0x2c8>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x280>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d29 	.word	0x08009d29
 8009d14:	08009d31 	.word	0x08009d31
 8009d18:	08009d39 	.word	0x08009d39
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d49 	.word	0x08009d49
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e180      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e17c      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e178      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e174      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e170      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	e16c      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d58:	2380      	movs	r3, #128	; 0x80
 8009d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5e:	e168      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a1d      	ldr	r2, [pc, #116]	; (8009ddc <UART_SetConfig+0x34c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d142      	bne.n	8009df0 <UART_SetConfig+0x360>
 8009d6a:	4b18      	ldr	r3, [pc, #96]	; (8009dcc <UART_SetConfig+0x33c>)
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d838      	bhi.n	8009de8 <UART_SetConfig+0x358>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x2ec>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d95 	.word	0x08009d95
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009da5 	.word	0x08009da5
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	08009db5 	.word	0x08009db5
 8009d90:	08009de1 	.word	0x08009de1
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e14a      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da2:	e146      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009daa:	e142      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db2:	e13e      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009db4:	2320      	movs	r3, #32
 8009db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dba:	e13a      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009dbc:	cfff69f3 	.word	0xcfff69f3
 8009dc0:	58000c00 	.word	0x58000c00
 8009dc4:	11fff4ff 	.word	0x11fff4ff
 8009dc8:	40011000 	.word	0x40011000
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	40004400 	.word	0x40004400
 8009dd4:	40004800 	.word	0x40004800
 8009dd8:	40004c00 	.word	0x40004c00
 8009ddc:	40005000 	.word	0x40005000
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e124      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009de8:	2380      	movs	r3, #128	; 0x80
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e120      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4acc      	ldr	r2, [pc, #816]	; (800a128 <UART_SetConfig+0x698>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d176      	bne.n	8009ee8 <UART_SetConfig+0x458>
 8009dfa:	4bcc      	ldr	r3, [pc, #816]	; (800a12c <UART_SetConfig+0x69c>)
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e02:	2b28      	cmp	r3, #40	; 0x28
 8009e04:	d86c      	bhi.n	8009ee0 <UART_SetConfig+0x450>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <UART_SetConfig+0x37c>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009eb1 	.word	0x08009eb1
 8009e10:	08009ee1 	.word	0x08009ee1
 8009e14:	08009ee1 	.word	0x08009ee1
 8009e18:	08009ee1 	.word	0x08009ee1
 8009e1c:	08009ee1 	.word	0x08009ee1
 8009e20:	08009ee1 	.word	0x08009ee1
 8009e24:	08009ee1 	.word	0x08009ee1
 8009e28:	08009ee1 	.word	0x08009ee1
 8009e2c:	08009eb9 	.word	0x08009eb9
 8009e30:	08009ee1 	.word	0x08009ee1
 8009e34:	08009ee1 	.word	0x08009ee1
 8009e38:	08009ee1 	.word	0x08009ee1
 8009e3c:	08009ee1 	.word	0x08009ee1
 8009e40:	08009ee1 	.word	0x08009ee1
 8009e44:	08009ee1 	.word	0x08009ee1
 8009e48:	08009ee1 	.word	0x08009ee1
 8009e4c:	08009ec1 	.word	0x08009ec1
 8009e50:	08009ee1 	.word	0x08009ee1
 8009e54:	08009ee1 	.word	0x08009ee1
 8009e58:	08009ee1 	.word	0x08009ee1
 8009e5c:	08009ee1 	.word	0x08009ee1
 8009e60:	08009ee1 	.word	0x08009ee1
 8009e64:	08009ee1 	.word	0x08009ee1
 8009e68:	08009ee1 	.word	0x08009ee1
 8009e6c:	08009ec9 	.word	0x08009ec9
 8009e70:	08009ee1 	.word	0x08009ee1
 8009e74:	08009ee1 	.word	0x08009ee1
 8009e78:	08009ee1 	.word	0x08009ee1
 8009e7c:	08009ee1 	.word	0x08009ee1
 8009e80:	08009ee1 	.word	0x08009ee1
 8009e84:	08009ee1 	.word	0x08009ee1
 8009e88:	08009ee1 	.word	0x08009ee1
 8009e8c:	08009ed1 	.word	0x08009ed1
 8009e90:	08009ee1 	.word	0x08009ee1
 8009e94:	08009ee1 	.word	0x08009ee1
 8009e98:	08009ee1 	.word	0x08009ee1
 8009e9c:	08009ee1 	.word	0x08009ee1
 8009ea0:	08009ee1 	.word	0x08009ee1
 8009ea4:	08009ee1 	.word	0x08009ee1
 8009ea8:	08009ee1 	.word	0x08009ee1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e0bc      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e0b8      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e0b4      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e0b0      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e0ac      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e0a8      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e0a4      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a90      	ldr	r2, [pc, #576]	; (800a130 <UART_SetConfig+0x6a0>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d130      	bne.n	8009f54 <UART_SetConfig+0x4c4>
 8009ef2:	4b8e      	ldr	r3, [pc, #568]	; (800a12c <UART_SetConfig+0x69c>)
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d826      	bhi.n	8009f4c <UART_SetConfig+0x4bc>
 8009efe:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <UART_SetConfig+0x474>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f1d 	.word	0x08009f1d
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009f35 	.word	0x08009f35
 8009f14:	08009f3d 	.word	0x08009f3d
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e086      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f24:	2304      	movs	r3, #4
 8009f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2a:	e082      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e07e      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f34:	2310      	movs	r3, #16
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e07a      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e076      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f44:	2340      	movs	r3, #64	; 0x40
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e072      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f4c:	2380      	movs	r3, #128	; 0x80
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e06e      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a76      	ldr	r2, [pc, #472]	; (800a134 <UART_SetConfig+0x6a4>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d130      	bne.n	8009fc0 <UART_SetConfig+0x530>
 8009f5e:	4b73      	ldr	r3, [pc, #460]	; (800a12c <UART_SetConfig+0x69c>)
 8009f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d826      	bhi.n	8009fb8 <UART_SetConfig+0x528>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x4e0>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f91 	.word	0x08009f91
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009fa1 	.word	0x08009fa1
 8009f80:	08009fa9 	.word	0x08009fa9
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e050      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e04c      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e048      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e044      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009fa8:	2320      	movs	r3, #32
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e040      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e03c      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e038      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a5c      	ldr	r2, [pc, #368]	; (800a138 <UART_SetConfig+0x6a8>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d130      	bne.n	800a02c <UART_SetConfig+0x59c>
 8009fca:	4b58      	ldr	r3, [pc, #352]	; (800a12c <UART_SetConfig+0x69c>)
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d826      	bhi.n	800a024 <UART_SetConfig+0x594>
 8009fd6:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <UART_SetConfig+0x54c>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a015 	.word	0x0800a015
 8009ff0:	0800a01d 	.word	0x0800a01d
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffa:	e01a      	b.n	800a032 <UART_SetConfig+0x5a2>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e016      	b.n	800a032 <UART_SetConfig+0x5a2>
 800a004:	2308      	movs	r3, #8
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e012      	b.n	800a032 <UART_SetConfig+0x5a2>
 800a00c:	2310      	movs	r3, #16
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	e00e      	b.n	800a032 <UART_SetConfig+0x5a2>
 800a014:	2320      	movs	r3, #32
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e00a      	b.n	800a032 <UART_SetConfig+0x5a2>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e006      	b.n	800a032 <UART_SetConfig+0x5a2>
 800a024:	2380      	movs	r3, #128	; 0x80
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e002      	b.n	800a032 <UART_SetConfig+0x5a2>
 800a02c:	2380      	movs	r3, #128	; 0x80
 800a02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a40      	ldr	r2, [pc, #256]	; (800a138 <UART_SetConfig+0x6a8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	f040 80ef 	bne.w	800a21c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a03e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a042:	2b20      	cmp	r3, #32
 800a044:	dc46      	bgt.n	800a0d4 <UART_SetConfig+0x644>
 800a046:	2b02      	cmp	r3, #2
 800a048:	f2c0 8081 	blt.w	800a14e <UART_SetConfig+0x6be>
 800a04c:	3b02      	subs	r3, #2
 800a04e:	2b1e      	cmp	r3, #30
 800a050:	d87d      	bhi.n	800a14e <UART_SetConfig+0x6be>
 800a052:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <UART_SetConfig+0x5c8>)
 800a054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a058:	0800a0db 	.word	0x0800a0db
 800a05c:	0800a14f 	.word	0x0800a14f
 800a060:	0800a0e3 	.word	0x0800a0e3
 800a064:	0800a14f 	.word	0x0800a14f
 800a068:	0800a14f 	.word	0x0800a14f
 800a06c:	0800a14f 	.word	0x0800a14f
 800a070:	0800a0f3 	.word	0x0800a0f3
 800a074:	0800a14f 	.word	0x0800a14f
 800a078:	0800a14f 	.word	0x0800a14f
 800a07c:	0800a14f 	.word	0x0800a14f
 800a080:	0800a14f 	.word	0x0800a14f
 800a084:	0800a14f 	.word	0x0800a14f
 800a088:	0800a14f 	.word	0x0800a14f
 800a08c:	0800a14f 	.word	0x0800a14f
 800a090:	0800a103 	.word	0x0800a103
 800a094:	0800a14f 	.word	0x0800a14f
 800a098:	0800a14f 	.word	0x0800a14f
 800a09c:	0800a14f 	.word	0x0800a14f
 800a0a0:	0800a14f 	.word	0x0800a14f
 800a0a4:	0800a14f 	.word	0x0800a14f
 800a0a8:	0800a14f 	.word	0x0800a14f
 800a0ac:	0800a14f 	.word	0x0800a14f
 800a0b0:	0800a14f 	.word	0x0800a14f
 800a0b4:	0800a14f 	.word	0x0800a14f
 800a0b8:	0800a14f 	.word	0x0800a14f
 800a0bc:	0800a14f 	.word	0x0800a14f
 800a0c0:	0800a14f 	.word	0x0800a14f
 800a0c4:	0800a14f 	.word	0x0800a14f
 800a0c8:	0800a14f 	.word	0x0800a14f
 800a0cc:	0800a14f 	.word	0x0800a14f
 800a0d0:	0800a141 	.word	0x0800a141
 800a0d4:	2b40      	cmp	r3, #64	; 0x40
 800a0d6:	d036      	beq.n	800a146 <UART_SetConfig+0x6b6>
 800a0d8:	e039      	b.n	800a14e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0da:	f7fd f997 	bl	800740c <HAL_RCCEx_GetD3PCLK1Freq>
 800a0de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0e0:	e03b      	b.n	800a15a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e2:	f107 0314 	add.w	r3, r7, #20
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fd f9a6 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0f0:	e033      	b.n	800a15a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0f2:	f107 0308 	add.w	r3, r7, #8
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fd faf2 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a100:	e02b      	b.n	800a15a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <UART_SetConfig+0x69c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d009      	beq.n	800a122 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <UART_SetConfig+0x69c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	08db      	lsrs	r3, r3, #3
 800a114:	f003 0303 	and.w	r3, r3, #3
 800a118:	4a08      	ldr	r2, [pc, #32]	; (800a13c <UART_SetConfig+0x6ac>)
 800a11a:	fa22 f303 	lsr.w	r3, r2, r3
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a120:	e01b      	b.n	800a15a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a122:	4b06      	ldr	r3, [pc, #24]	; (800a13c <UART_SetConfig+0x6ac>)
 800a124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a126:	e018      	b.n	800a15a <UART_SetConfig+0x6ca>
 800a128:	40011400 	.word	0x40011400
 800a12c:	58024400 	.word	0x58024400
 800a130:	40007800 	.word	0x40007800
 800a134:	40007c00 	.word	0x40007c00
 800a138:	58000c00 	.word	0x58000c00
 800a13c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a140:	4bc4      	ldr	r3, [pc, #784]	; (800a454 <UART_SetConfig+0x9c4>)
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a144:	e009      	b.n	800a15a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a14c:	e005      	b.n	800a15a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 81da 	beq.w	800a516 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	4abc      	ldr	r2, [pc, #752]	; (800a458 <UART_SetConfig+0x9c8>)
 800a168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a16c:	461a      	mov	r2, r3
 800a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a170:	fbb3 f3f2 	udiv	r3, r3, r2
 800a174:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4413      	add	r3, r2
 800a180:	6a3a      	ldr	r2, [r7, #32]
 800a182:	429a      	cmp	r2, r3
 800a184:	d305      	bcc.n	800a192 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a18c:	6a3a      	ldr	r2, [r7, #32]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d903      	bls.n	800a19a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a198:	e1bd      	b.n	800a516 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	4618      	mov	r0, r3
 800a19e:	f04f 0100 	mov.w	r1, #0
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	4aac      	ldr	r2, [pc, #688]	; (800a458 <UART_SetConfig+0x9c8>)
 800a1a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	f04f 0300 	mov.w	r3, #0
 800a1b2:	f7f6 f8e5 	bl	8000380 <__aeabi_uldivmod>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	4619      	mov	r1, r3
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	f04f 0300 	mov.w	r3, #0
 800a1c6:	020b      	lsls	r3, r1, #8
 800a1c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1cc:	0202      	lsls	r2, r0, #8
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	6849      	ldr	r1, [r1, #4]
 800a1d2:	0849      	lsrs	r1, r1, #1
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	f04f 0100 	mov.w	r1, #0
 800a1da:	1814      	adds	r4, r2, r0
 800a1dc:	eb43 0501 	adc.w	r5, r3, r1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f04f 0300 	mov.w	r3, #0
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	f7f6 f8c7 	bl	8000380 <__aeabi_uldivmod>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a200:	d308      	bcc.n	800a214 <UART_SetConfig+0x784>
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a208:	d204      	bcs.n	800a214 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a210:	60da      	str	r2, [r3, #12]
 800a212:	e180      	b.n	800a516 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a21a:	e17c      	b.n	800a516 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a224:	f040 80bf 	bne.w	800a3a6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a228:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a22c:	2b20      	cmp	r3, #32
 800a22e:	dc49      	bgt.n	800a2c4 <UART_SetConfig+0x834>
 800a230:	2b00      	cmp	r3, #0
 800a232:	db7c      	blt.n	800a32e <UART_SetConfig+0x89e>
 800a234:	2b20      	cmp	r3, #32
 800a236:	d87a      	bhi.n	800a32e <UART_SetConfig+0x89e>
 800a238:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <UART_SetConfig+0x7b0>)
 800a23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23e:	bf00      	nop
 800a240:	0800a2cb 	.word	0x0800a2cb
 800a244:	0800a2d3 	.word	0x0800a2d3
 800a248:	0800a32f 	.word	0x0800a32f
 800a24c:	0800a32f 	.word	0x0800a32f
 800a250:	0800a2db 	.word	0x0800a2db
 800a254:	0800a32f 	.word	0x0800a32f
 800a258:	0800a32f 	.word	0x0800a32f
 800a25c:	0800a32f 	.word	0x0800a32f
 800a260:	0800a2eb 	.word	0x0800a2eb
 800a264:	0800a32f 	.word	0x0800a32f
 800a268:	0800a32f 	.word	0x0800a32f
 800a26c:	0800a32f 	.word	0x0800a32f
 800a270:	0800a32f 	.word	0x0800a32f
 800a274:	0800a32f 	.word	0x0800a32f
 800a278:	0800a32f 	.word	0x0800a32f
 800a27c:	0800a32f 	.word	0x0800a32f
 800a280:	0800a2fb 	.word	0x0800a2fb
 800a284:	0800a32f 	.word	0x0800a32f
 800a288:	0800a32f 	.word	0x0800a32f
 800a28c:	0800a32f 	.word	0x0800a32f
 800a290:	0800a32f 	.word	0x0800a32f
 800a294:	0800a32f 	.word	0x0800a32f
 800a298:	0800a32f 	.word	0x0800a32f
 800a29c:	0800a32f 	.word	0x0800a32f
 800a2a0:	0800a32f 	.word	0x0800a32f
 800a2a4:	0800a32f 	.word	0x0800a32f
 800a2a8:	0800a32f 	.word	0x0800a32f
 800a2ac:	0800a32f 	.word	0x0800a32f
 800a2b0:	0800a32f 	.word	0x0800a32f
 800a2b4:	0800a32f 	.word	0x0800a32f
 800a2b8:	0800a32f 	.word	0x0800a32f
 800a2bc:	0800a32f 	.word	0x0800a32f
 800a2c0:	0800a321 	.word	0x0800a321
 800a2c4:	2b40      	cmp	r3, #64	; 0x40
 800a2c6:	d02e      	beq.n	800a326 <UART_SetConfig+0x896>
 800a2c8:	e031      	b.n	800a32e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ca:	f7fc f933 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 800a2ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2d0:	e033      	b.n	800a33a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d2:	f7fc f945 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
 800a2d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2d8:	e02f      	b.n	800a33a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2da:	f107 0314 	add.w	r3, r7, #20
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fd f8aa 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e8:	e027      	b.n	800a33a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fd f9f6 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2f8:	e01f      	b.n	800a33a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2fa:	4b58      	ldr	r3, [pc, #352]	; (800a45c <UART_SetConfig+0x9cc>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	d009      	beq.n	800a31a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a306:	4b55      	ldr	r3, [pc, #340]	; (800a45c <UART_SetConfig+0x9cc>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	08db      	lsrs	r3, r3, #3
 800a30c:	f003 0303 	and.w	r3, r3, #3
 800a310:	4a53      	ldr	r2, [pc, #332]	; (800a460 <UART_SetConfig+0x9d0>)
 800a312:	fa22 f303 	lsr.w	r3, r2, r3
 800a316:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a318:	e00f      	b.n	800a33a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a31a:	4b51      	ldr	r3, [pc, #324]	; (800a460 <UART_SetConfig+0x9d0>)
 800a31c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a31e:	e00c      	b.n	800a33a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a320:	4b4c      	ldr	r3, [pc, #304]	; (800a454 <UART_SetConfig+0x9c4>)
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a324:	e009      	b.n	800a33a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a32a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a32c:	e005      	b.n	800a33a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f000 80ea 	beq.w	800a516 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	4a44      	ldr	r2, [pc, #272]	; (800a458 <UART_SetConfig+0x9c8>)
 800a348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a34c:	461a      	mov	r2, r3
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	fbb3 f3f2 	udiv	r3, r3, r2
 800a354:	005a      	lsls	r2, r3, #1
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	441a      	add	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	fbb2 f3f3 	udiv	r3, r2, r3
 800a366:	b29b      	uxth	r3, r3
 800a368:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	2b0f      	cmp	r3, #15
 800a36e:	d916      	bls.n	800a39e <UART_SetConfig+0x90e>
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a376:	d212      	bcs.n	800a39e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	f023 030f 	bic.w	r3, r3, #15
 800a380:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	085b      	lsrs	r3, r3, #1
 800a386:	b29b      	uxth	r3, r3
 800a388:	f003 0307 	and.w	r3, r3, #7
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a390:	4313      	orrs	r3, r2
 800a392:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	e0bb      	b.n	800a516 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a3a4:	e0b7      	b.n	800a516 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	dc4a      	bgt.n	800a444 <UART_SetConfig+0x9b4>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f2c0 8086 	blt.w	800a4c0 <UART_SetConfig+0xa30>
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	f200 8083 	bhi.w	800a4c0 <UART_SetConfig+0xa30>
 800a3ba:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <UART_SetConfig+0x930>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a44b 	.word	0x0800a44b
 800a3c4:	0800a465 	.word	0x0800a465
 800a3c8:	0800a4c1 	.word	0x0800a4c1
 800a3cc:	0800a4c1 	.word	0x0800a4c1
 800a3d0:	0800a46d 	.word	0x0800a46d
 800a3d4:	0800a4c1 	.word	0x0800a4c1
 800a3d8:	0800a4c1 	.word	0x0800a4c1
 800a3dc:	0800a4c1 	.word	0x0800a4c1
 800a3e0:	0800a47d 	.word	0x0800a47d
 800a3e4:	0800a4c1 	.word	0x0800a4c1
 800a3e8:	0800a4c1 	.word	0x0800a4c1
 800a3ec:	0800a4c1 	.word	0x0800a4c1
 800a3f0:	0800a4c1 	.word	0x0800a4c1
 800a3f4:	0800a4c1 	.word	0x0800a4c1
 800a3f8:	0800a4c1 	.word	0x0800a4c1
 800a3fc:	0800a4c1 	.word	0x0800a4c1
 800a400:	0800a48d 	.word	0x0800a48d
 800a404:	0800a4c1 	.word	0x0800a4c1
 800a408:	0800a4c1 	.word	0x0800a4c1
 800a40c:	0800a4c1 	.word	0x0800a4c1
 800a410:	0800a4c1 	.word	0x0800a4c1
 800a414:	0800a4c1 	.word	0x0800a4c1
 800a418:	0800a4c1 	.word	0x0800a4c1
 800a41c:	0800a4c1 	.word	0x0800a4c1
 800a420:	0800a4c1 	.word	0x0800a4c1
 800a424:	0800a4c1 	.word	0x0800a4c1
 800a428:	0800a4c1 	.word	0x0800a4c1
 800a42c:	0800a4c1 	.word	0x0800a4c1
 800a430:	0800a4c1 	.word	0x0800a4c1
 800a434:	0800a4c1 	.word	0x0800a4c1
 800a438:	0800a4c1 	.word	0x0800a4c1
 800a43c:	0800a4c1 	.word	0x0800a4c1
 800a440:	0800a4b3 	.word	0x0800a4b3
 800a444:	2b40      	cmp	r3, #64	; 0x40
 800a446:	d037      	beq.n	800a4b8 <UART_SetConfig+0xa28>
 800a448:	e03a      	b.n	800a4c0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a44a:	f7fc f873 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 800a44e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a450:	e03c      	b.n	800a4cc <UART_SetConfig+0xa3c>
 800a452:	bf00      	nop
 800a454:	003d0900 	.word	0x003d0900
 800a458:	0800c554 	.word	0x0800c554
 800a45c:	58024400 	.word	0x58024400
 800a460:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a464:	f7fc f87c 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
 800a468:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a46a:	e02f      	b.n	800a4cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a46c:	f107 0314 	add.w	r3, r7, #20
 800a470:	4618      	mov	r0, r3
 800a472:	f7fc ffe1 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a47a:	e027      	b.n	800a4cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4618      	mov	r0, r3
 800a482:	f7fd f92d 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a48a:	e01f      	b.n	800a4cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a48c:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <UART_SetConfig+0xab0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0320 	and.w	r3, r3, #32
 800a494:	2b00      	cmp	r3, #0
 800a496:	d009      	beq.n	800a4ac <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a498:	4b29      	ldr	r3, [pc, #164]	; (800a540 <UART_SetConfig+0xab0>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	08db      	lsrs	r3, r3, #3
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	4a28      	ldr	r2, [pc, #160]	; (800a544 <UART_SetConfig+0xab4>)
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4aa:	e00f      	b.n	800a4cc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a4ac:	4b25      	ldr	r3, [pc, #148]	; (800a544 <UART_SetConfig+0xab4>)
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4b0:	e00c      	b.n	800a4cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4b2:	4b25      	ldr	r3, [pc, #148]	; (800a548 <UART_SetConfig+0xab8>)
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4b6:	e009      	b.n	800a4cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4be:	e005      	b.n	800a4cc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4ca:	bf00      	nop
    }

    if (pclk != 0U)
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d021      	beq.n	800a516 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	4a1d      	ldr	r2, [pc, #116]	; (800a54c <UART_SetConfig+0xabc>)
 800a4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	441a      	add	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b0f      	cmp	r3, #15
 800a4fc:	d908      	bls.n	800a510 <UART_SetConfig+0xa80>
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a504:	d204      	bcs.n	800a510 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50c:	60da      	str	r2, [r3, #12]
 800a50e:	e002      	b.n	800a516 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a532:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a536:	4618      	mov	r0, r3
 800a538:	3738      	adds	r7, #56	; 0x38
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bdb0      	pop	{r4, r5, r7, pc}
 800a53e:	bf00      	nop
 800a540:	58024400 	.word	0x58024400
 800a544:	03d09000 	.word	0x03d09000
 800a548:	003d0900 	.word	0x003d0900
 800a54c:	0800c554 	.word	0x0800c554

0800a550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	f003 0308 	and.w	r3, r3, #8
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01a      	beq.n	800a666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a64e:	d10a      	bne.n	800a666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	605a      	str	r2, [r3, #4]
  }
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af02      	add	r7, sp, #8
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6a4:	f7f7 fe32 	bl	800230c <HAL_GetTick>
 800a6a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d10e      	bne.n	800a6d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f82f 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e025      	b.n	800a722 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b04      	cmp	r3, #4
 800a6e2:	d10e      	bne.n	800a702 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f819 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e00f      	b.n	800a722 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2220      	movs	r2, #32
 800a706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a73a:	e062      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d05e      	beq.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a744:	f7f7 fde2 	bl	800230c <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	429a      	cmp	r2, r3
 800a752:	d302      	bcc.n	800a75a <UART_WaitOnFlagUntilTimeout+0x30>
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d11d      	bne.n	800a796 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a768:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0201 	bic.w	r2, r2, #1
 800a778:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e045      	b.n	800a822 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d02e      	beq.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7b2:	d126      	bne.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 0201 	bic.w	r2, r2, #1
 800a7dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e00f      	b.n	800a822 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69da      	ldr	r2, [r3, #28]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4013      	ands	r3, r2
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	429a      	cmp	r2, r3
 800a810:	bf0c      	ite	eq
 800a812:	2301      	moveq	r3, #1
 800a814:	2300      	movne	r3, #0
 800a816:	b2db      	uxtb	r3, r3
 800a818:	461a      	mov	r2, r3
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d08d      	beq.n	800a73c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	88fa      	ldrh	r2, [r7, #6]
 800a844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	88fa      	ldrh	r2, [r7, #6]
 800a84c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85e:	d10e      	bne.n	800a87e <UART_Start_Receive_IT+0x52>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d105      	bne.n	800a874 <UART_Start_Receive_IT+0x48>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a86e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a872:	e02d      	b.n	800a8d0 <UART_Start_Receive_IT+0xa4>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	22ff      	movs	r2, #255	; 0xff
 800a878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a87c:	e028      	b.n	800a8d0 <UART_Start_Receive_IT+0xa4>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10d      	bne.n	800a8a2 <UART_Start_Receive_IT+0x76>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d104      	bne.n	800a898 <UART_Start_Receive_IT+0x6c>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	22ff      	movs	r2, #255	; 0xff
 800a892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a896:	e01b      	b.n	800a8d0 <UART_Start_Receive_IT+0xa4>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	227f      	movs	r2, #127	; 0x7f
 800a89c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8a0:	e016      	b.n	800a8d0 <UART_Start_Receive_IT+0xa4>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8aa:	d10d      	bne.n	800a8c8 <UART_Start_Receive_IT+0x9c>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d104      	bne.n	800a8be <UART_Start_Receive_IT+0x92>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	227f      	movs	r2, #127	; 0x7f
 800a8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8bc:	e008      	b.n	800a8d0 <UART_Start_Receive_IT+0xa4>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	223f      	movs	r2, #63	; 0x3f
 800a8c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8c6:	e003      	b.n	800a8d0 <UART_Start_Receive_IT+0xa4>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2222      	movs	r2, #34	; 0x22
 800a8dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689a      	ldr	r2, [r3, #8]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f042 0201 	orr.w	r2, r2, #1
 800a8ee:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f8:	d12a      	bne.n	800a950 <UART_Start_Receive_IT+0x124>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a900:	88fa      	ldrh	r2, [r7, #6]
 800a902:	429a      	cmp	r2, r3
 800a904:	d324      	bcc.n	800a950 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90e:	d107      	bne.n	800a920 <UART_Start_Receive_IT+0xf4>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4a1f      	ldr	r2, [pc, #124]	; (800a998 <UART_Start_Receive_IT+0x16c>)
 800a91c:	671a      	str	r2, [r3, #112]	; 0x70
 800a91e:	e002      	b.n	800a926 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4a1e      	ldr	r2, [pc, #120]	; (800a99c <UART_Start_Receive_IT+0x170>)
 800a924:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a93c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a94c:	609a      	str	r2, [r3, #8]
 800a94e:	e01b      	b.n	800a988 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a958:	d107      	bne.n	800a96a <UART_Start_Receive_IT+0x13e>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4a0e      	ldr	r2, [pc, #56]	; (800a9a0 <UART_Start_Receive_IT+0x174>)
 800a966:	671a      	str	r2, [r3, #112]	; 0x70
 800a968:	e002      	b.n	800a970 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4a0d      	ldr	r2, [pc, #52]	; (800a9a4 <UART_Start_Receive_IT+0x178>)
 800a96e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a986:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	0800b0f5 	.word	0x0800b0f5
 800a99c:	0800aef1 	.word	0x0800aef1
 800a9a0:	0800ae17 	.word	0x0800ae17
 800a9a4:	0800ad3f 	.word	0x0800ad3f

0800a9a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	88fa      	ldrh	r2, [r7, #6]
 800a9c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2222      	movs	r2, #34	; 0x22
 800a9d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d02c      	beq.n	800aa36 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9e0:	4a25      	ldr	r2, [pc, #148]	; (800aa78 <UART_Start_Receive_DMA+0xd0>)
 800a9e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9e8:	4a24      	ldr	r2, [pc, #144]	; (800aa7c <UART_Start_Receive_DMA+0xd4>)
 800a9ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f0:	4a23      	ldr	r2, [pc, #140]	; (800aa80 <UART_Start_Receive_DMA+0xd8>)
 800a9f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3324      	adds	r3, #36	; 0x24
 800aa06:	4619      	mov	r1, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	88fb      	ldrh	r3, [r7, #6]
 800aa10:	f7f8 f924 	bl	8002c5c <HAL_DMA_Start_IT>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00d      	beq.n	800aa36 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2210      	movs	r2, #16
 800aa1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e01c      	b.n	800aa70 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa4c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f042 0201 	orr.w	r2, r2, #1
 800aa5c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa6c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	0800ab91 	.word	0x0800ab91
 800aa7c:	0800ac27 	.word	0x0800ac27
 800aa80:	0800ac5f 	.word	0x0800ac5f

0800aa84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aa9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689a      	ldr	r2, [r3, #8]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800aaaa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2220      	movs	r2, #32
 800aab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aad6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6899      	ldr	r1, [r3, #8]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b0f      	ldr	r3, [pc, #60]	; (800ab20 <UART_EndRxTransfer+0x60>)
 800aae4:	400b      	ands	r3, r1
 800aae6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d107      	bne.n	800ab00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0210 	bic.w	r2, r2, #16
 800aafe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	effffffe 	.word	0xeffffffe

0800ab24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab3a:	d014      	beq.n	800ab66 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab52:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab62:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab64:	e002      	b.n	800ab6c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7f6 fd88 	bl	800167c <HAL_UART_TxCpltCallback>
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab80:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7fe ff5a 	bl	8009a3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba6:	d02b      	beq.n	800ac00 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abbe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0201 	bic.w	r2, r2, #1
 800abce:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689a      	ldr	r2, [r3, #8]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abde:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2220      	movs	r2, #32
 800abe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abec:	2b01      	cmp	r3, #1
 800abee:	d107      	bne.n	800ac00 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f022 0210 	bic.w	r2, r2, #16
 800abfe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d107      	bne.n	800ac18 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac0e:	4619      	mov	r1, r3
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7fe ff31 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac16:	e002      	b.n	800ac1e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7f6 fd19 	bl	8001650 <HAL_UART_RxCpltCallback>
}
 800ac1e:	bf00      	nop
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d109      	bne.n	800ac50 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	4619      	mov	r1, r3
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7fe ff15 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac4e:	e002      	b.n	800ac56 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7fe fefd 	bl	8009a50 <HAL_UART_RxHalfCpltCallback>
}
 800ac56:	bf00      	nop
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac86:	2b80      	cmp	r3, #128	; 0x80
 800ac88:	d109      	bne.n	800ac9e <UART_DMAError+0x40>
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b21      	cmp	r3, #33	; 0x21
 800ac8e:	d106      	bne.n	800ac9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ac98:	6978      	ldr	r0, [r7, #20]
 800ac9a:	f7ff fef3 	bl	800aa84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	d109      	bne.n	800acc0 <UART_DMAError+0x62>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b22      	cmp	r3, #34	; 0x22
 800acb0:	d106      	bne.n	800acc0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f7ff ff00 	bl	800aac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acc6:	f043 0210 	orr.w	r2, r3, #16
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acd0:	6978      	ldr	r0, [r7, #20]
 800acd2:	f7fe fec7 	bl	8009a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd6:	bf00      	nop
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7fe feb1 	bl	8009a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2220      	movs	r2, #32
 800ad26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f6 fca3 	bl	800167c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad4c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad54:	2b22      	cmp	r3, #34	; 0x22
 800ad56:	d152      	bne.n	800adfe <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad60:	89bb      	ldrh	r3, [r7, #12]
 800ad62:	b2d9      	uxtb	r1, r3
 800ad64:	89fb      	ldrh	r3, [r7, #14]
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad6c:	400a      	ands	r2, r1
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	3b01      	subs	r3, #1
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d139      	bne.n	800ae0e <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ada8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f022 0201 	bic.w	r2, r2, #1
 800adb8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2220      	movs	r2, #32
 800adbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d10f      	bne.n	800adf0 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0210 	bic.w	r2, r2, #16
 800adde:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7fe fe45 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
 800adee:	e002      	b.n	800adf6 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7f6 fc2d 	bl	8001650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adfc:	e007      	b.n	800ae0e <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	699a      	ldr	r2, [r3, #24]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f042 0208 	orr.w	r2, r2, #8
 800ae0c:	619a      	str	r2, [r3, #24]
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae24:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2c:	2b22      	cmp	r3, #34	; 0x22
 800ae2e:	d152      	bne.n	800aed6 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ae3e:	89ba      	ldrh	r2, [r7, #12]
 800ae40:	89fb      	ldrh	r3, [r7, #14]
 800ae42:	4013      	ands	r3, r2
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	1c9a      	adds	r2, r3, #2
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d139      	bne.n	800aee6 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0201 	bic.w	r2, r2, #1
 800ae90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2220      	movs	r2, #32
 800ae96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d10f      	bne.n	800aec8 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0210 	bic.w	r2, r2, #16
 800aeb6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe fdd9 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
 800aec6:	e002      	b.n	800aece <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7f6 fbc1 	bl	8001650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aed4:	e007      	b.n	800aee6 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	699a      	ldr	r2, [r3, #24]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f042 0208 	orr.w	r2, r2, #8
 800aee4:	619a      	str	r2, [r3, #24]
}
 800aee6:	bf00      	nop
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b088      	sub	sp, #32
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aefe:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1e:	2b22      	cmp	r3, #34	; 0x22
 800af20:	f040 80d8 	bne.w	800b0d4 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af2a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af2c:	e0a8      	b.n	800b080 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af36:	89bb      	ldrh	r3, [r7, #12]
 800af38:	b2d9      	uxtb	r1, r3
 800af3a:	8b7b      	ldrh	r3, [r7, #26]
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af42:	400a      	ands	r2, r1
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af58:	b29b      	uxth	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	2b00      	cmp	r3, #0
 800af74:	d04d      	beq.n	800b012 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d010      	beq.n	800afa2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00b      	beq.n	800afa2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2201      	movs	r2, #1
 800af90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af98:	f043 0201 	orr.w	r2, r3, #1
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d010      	beq.n	800afce <UART_RxISR_8BIT_FIFOEN+0xde>
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00b      	beq.n	800afce <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2202      	movs	r2, #2
 800afbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afc4:	f043 0204 	orr.w	r2, r3, #4
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d010      	beq.n	800affa <UART_RxISR_8BIT_FIFOEN+0x10a>
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00b      	beq.n	800affa <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2204      	movs	r2, #4
 800afe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aff0:	f043 0202 	orr.w	r2, r3, #2
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d006      	beq.n	800b012 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7fe fd2d 	bl	8009a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b018:	b29b      	uxth	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d130      	bne.n	800b080 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b02c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6899      	ldr	r1, [r3, #8]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b2c      	ldr	r3, [pc, #176]	; (800b0ec <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800b03a:	400b      	ands	r3, r1
 800b03c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b050:	2b01      	cmp	r3, #1
 800b052:	d10f      	bne.n	800b074 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0210 	bic.w	r2, r2, #16
 800b062:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7fe fd03 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
 800b072:	e002      	b.n	800b07a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7f6 faeb 	bl	8001650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b080:	89fb      	ldrh	r3, [r7, #14]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	f003 0320 	and.w	r3, r3, #32
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f47f af4e 	bne.w	800af2e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b098:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b09a:	897b      	ldrh	r3, [r7, #10]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d021      	beq.n	800b0e4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0a6:	897a      	ldrh	r2, [r7, #10]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d21b      	bcs.n	800b0e4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	689a      	ldr	r2, [r3, #8]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b0ba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a0c      	ldr	r2, [pc, #48]	; (800b0f0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800b0c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f042 0220 	orr.w	r2, r2, #32
 800b0d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0d2:	e007      	b.n	800b0e4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699a      	ldr	r2, [r3, #24]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0208 	orr.w	r2, r2, #8
 800b0e2:	619a      	str	r2, [r3, #24]
}
 800b0e4:	bf00      	nop
 800b0e6:	3720      	adds	r7, #32
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	effffffe 	.word	0xeffffffe
 800b0f0:	0800ad3f 	.word	0x0800ad3f

0800b0f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08a      	sub	sp, #40	; 0x28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b102:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b122:	2b22      	cmp	r3, #34	; 0x22
 800b124:	f040 80d8 	bne.w	800b2d8 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b12e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b130:	e0a8      	b.n	800b284 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b140:	8aba      	ldrh	r2, [r7, #20]
 800b142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b144:	4013      	ands	r3, r2
 800b146:	b29a      	uxth	r2, r3
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b150:	1c9a      	adds	r2, r3, #2
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	3b01      	subs	r3, #1
 800b160:	b29a      	uxth	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d04d      	beq.n	800b216 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d010      	beq.n	800b1a6 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2201      	movs	r2, #1
 800b194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b19c:	f043 0201 	orr.w	r2, r3, #1
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d010      	beq.n	800b1d2 <UART_RxISR_16BIT_FIFOEN+0xde>
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00b      	beq.n	800b1d2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1c8:	f043 0204 	orr.w	r2, r3, #4
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d010      	beq.n	800b1fe <UART_RxISR_16BIT_FIFOEN+0x10a>
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1f4:	f043 0202 	orr.w	r2, r3, #2
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b204:	2b00      	cmp	r3, #0
 800b206:	d006      	beq.n	800b216 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7fe fc2b 	bl	8009a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d130      	bne.n	800b284 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b230:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	6899      	ldr	r1, [r3, #8]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800b23e:	400b      	ands	r3, r1
 800b240:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2220      	movs	r2, #32
 800b246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b254:	2b01      	cmp	r3, #1
 800b256:	d10f      	bne.n	800b278 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 0210 	bic.w	r2, r2, #16
 800b266:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7fe fc01 	bl	8009a78 <HAL_UARTEx_RxEventCallback>
 800b276:	e002      	b.n	800b27e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7f6 f9e9 	bl	8001650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b284:	8afb      	ldrh	r3, [r7, #22]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d005      	beq.n	800b296 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	f003 0320 	and.w	r3, r3, #32
 800b290:	2b00      	cmp	r3, #0
 800b292:	f47f af4e 	bne.w	800b132 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b29c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b29e:	89fb      	ldrh	r3, [r7, #14]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d021      	beq.n	800b2e8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2aa:	89fa      	ldrh	r2, [r7, #14]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d21b      	bcs.n	800b2e8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b2be:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a0c      	ldr	r2, [pc, #48]	; (800b2f4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800b2c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f042 0220 	orr.w	r2, r2, #32
 800b2d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2d6:	e007      	b.n	800b2e8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	699a      	ldr	r2, [r3, #24]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f042 0208 	orr.w	r2, r2, #8
 800b2e6:	619a      	str	r2, [r3, #24]
}
 800b2e8:	bf00      	nop
 800b2ea:	3728      	adds	r7, #40	; 0x28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	effffffe 	.word	0xeffffffe
 800b2f4:	0800ae17 	.word	0x0800ae17

0800b2f8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
 800b304:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e056      	b.n	800b3be <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7f6 fbe2 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2224      	movs	r2, #36	; 0x24
 800b32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f022 0201 	bic.w	r2, r2, #1
 800b33e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7fe fba5 	bl	8009a90 <UART_SetConfig>
 800b346:	4603      	mov	r3, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e036      	b.n	800b3be <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7ff f8f9 	bl	800a550 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b36c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	430a      	orrs	r2, r1
 800b380:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	055b      	lsls	r3, r3, #21
 800b386:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	4b0b      	ldr	r3, [pc, #44]	; (800b3c8 <HAL_RS485Ex_Init+0xd0>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	6979      	ldr	r1, [r7, #20]
 800b3a2:	430b      	orrs	r3, r1
 800b3a4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f042 0201 	orr.w	r2, r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff f96c 	bl	800a694 <UART_CheckIdleState>
 800b3bc:	4603      	mov	r3, r0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	fc00ffff 	.word	0xfc00ffff

0800b3cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b416:	2b01      	cmp	r3, #1
 800b418:	d101      	bne.n	800b41e <HAL_UARTEx_DisableFifoMode+0x16>
 800b41a:	2302      	movs	r3, #2
 800b41c:	e027      	b.n	800b46e <HAL_UARTEx_DisableFifoMode+0x66>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2224      	movs	r2, #36	; 0x24
 800b42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f022 0201 	bic.w	r2, r2, #1
 800b444:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b44c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b48e:	2302      	movs	r3, #2
 800b490:	e02d      	b.n	800b4ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2224      	movs	r2, #36	; 0x24
 800b49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f022 0201 	bic.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f850 	bl	800b574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b50a:	2302      	movs	r3, #2
 800b50c:	e02d      	b.n	800b56a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2224      	movs	r2, #36	; 0x24
 800b51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0201 	bic.w	r2, r2, #1
 800b534:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f812 	bl	800b574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2220      	movs	r2, #32
 800b55c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b580:	2b00      	cmp	r3, #0
 800b582:	d108      	bne.n	800b596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b594:	e031      	b.n	800b5fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b596:	2310      	movs	r3, #16
 800b598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b59a:	2310      	movs	r3, #16
 800b59c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	0e5b      	lsrs	r3, r3, #25
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0307 	and.w	r3, r3, #7
 800b5ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	0f5b      	lsrs	r3, r3, #29
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f003 0307 	and.w	r3, r3, #7
 800b5bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	7b3a      	ldrb	r2, [r7, #12]
 800b5c2:	4911      	ldr	r1, [pc, #68]	; (800b608 <UARTEx_SetNbDataToProcess+0x94>)
 800b5c4:	5c8a      	ldrb	r2, [r1, r2]
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5ca:	7b3a      	ldrb	r2, [r7, #12]
 800b5cc:	490f      	ldr	r1, [pc, #60]	; (800b60c <UARTEx_SetNbDataToProcess+0x98>)
 800b5ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	7b7a      	ldrb	r2, [r7, #13]
 800b5e0:	4909      	ldr	r1, [pc, #36]	; (800b608 <UARTEx_SetNbDataToProcess+0x94>)
 800b5e2:	5c8a      	ldrb	r2, [r1, r2]
 800b5e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5e8:	7b7a      	ldrb	r2, [r7, #13]
 800b5ea:	4908      	ldr	r1, [pc, #32]	; (800b60c <UARTEx_SetNbDataToProcess+0x98>)
 800b5ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b5fa:	bf00      	nop
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	0800c56c 	.word	0x0800c56c
 800b60c:	0800c574 	.word	0x0800c574

0800b610 <__errno>:
 800b610:	4b01      	ldr	r3, [pc, #4]	; (800b618 <__errno+0x8>)
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	20000010 	.word	0x20000010

0800b61c <__libc_init_array>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	4d0d      	ldr	r5, [pc, #52]	; (800b654 <__libc_init_array+0x38>)
 800b620:	4c0d      	ldr	r4, [pc, #52]	; (800b658 <__libc_init_array+0x3c>)
 800b622:	1b64      	subs	r4, r4, r5
 800b624:	10a4      	asrs	r4, r4, #2
 800b626:	2600      	movs	r6, #0
 800b628:	42a6      	cmp	r6, r4
 800b62a:	d109      	bne.n	800b640 <__libc_init_array+0x24>
 800b62c:	4d0b      	ldr	r5, [pc, #44]	; (800b65c <__libc_init_array+0x40>)
 800b62e:	4c0c      	ldr	r4, [pc, #48]	; (800b660 <__libc_init_array+0x44>)
 800b630:	f000 ff76 	bl	800c520 <_init>
 800b634:	1b64      	subs	r4, r4, r5
 800b636:	10a4      	asrs	r4, r4, #2
 800b638:	2600      	movs	r6, #0
 800b63a:	42a6      	cmp	r6, r4
 800b63c:	d105      	bne.n	800b64a <__libc_init_array+0x2e>
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	f855 3b04 	ldr.w	r3, [r5], #4
 800b644:	4798      	blx	r3
 800b646:	3601      	adds	r6, #1
 800b648:	e7ee      	b.n	800b628 <__libc_init_array+0xc>
 800b64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64e:	4798      	blx	r3
 800b650:	3601      	adds	r6, #1
 800b652:	e7f2      	b.n	800b63a <__libc_init_array+0x1e>
 800b654:	0800c61c 	.word	0x0800c61c
 800b658:	0800c61c 	.word	0x0800c61c
 800b65c:	0800c61c 	.word	0x0800c61c
 800b660:	0800c620 	.word	0x0800c620

0800b664 <memset>:
 800b664:	4402      	add	r2, r0
 800b666:	4603      	mov	r3, r0
 800b668:	4293      	cmp	r3, r2
 800b66a:	d100      	bne.n	800b66e <memset+0xa>
 800b66c:	4770      	bx	lr
 800b66e:	f803 1b01 	strb.w	r1, [r3], #1
 800b672:	e7f9      	b.n	800b668 <memset+0x4>

0800b674 <iprintf>:
 800b674:	b40f      	push	{r0, r1, r2, r3}
 800b676:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <iprintf+0x2c>)
 800b678:	b513      	push	{r0, r1, r4, lr}
 800b67a:	681c      	ldr	r4, [r3, #0]
 800b67c:	b124      	cbz	r4, 800b688 <iprintf+0x14>
 800b67e:	69a3      	ldr	r3, [r4, #24]
 800b680:	b913      	cbnz	r3, 800b688 <iprintf+0x14>
 800b682:	4620      	mov	r0, r4
 800b684:	f000 f866 	bl	800b754 <__sinit>
 800b688:	ab05      	add	r3, sp, #20
 800b68a:	9a04      	ldr	r2, [sp, #16]
 800b68c:	68a1      	ldr	r1, [r4, #8]
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	4620      	mov	r0, r4
 800b692:	f000 f983 	bl	800b99c <_vfiprintf_r>
 800b696:	b002      	add	sp, #8
 800b698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b69c:	b004      	add	sp, #16
 800b69e:	4770      	bx	lr
 800b6a0:	20000010 	.word	0x20000010

0800b6a4 <std>:
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	b510      	push	{r4, lr}
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b6ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6b2:	6083      	str	r3, [r0, #8]
 800b6b4:	8181      	strh	r1, [r0, #12]
 800b6b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b6b8:	81c2      	strh	r2, [r0, #14]
 800b6ba:	6183      	str	r3, [r0, #24]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	2208      	movs	r2, #8
 800b6c0:	305c      	adds	r0, #92	; 0x5c
 800b6c2:	f7ff ffcf 	bl	800b664 <memset>
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <std+0x38>)
 800b6c8:	6263      	str	r3, [r4, #36]	; 0x24
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <std+0x3c>)
 800b6cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <std+0x40>)
 800b6d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6d2:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <std+0x44>)
 800b6d4:	6224      	str	r4, [r4, #32]
 800b6d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	bf00      	nop
 800b6dc:	0800bf45 	.word	0x0800bf45
 800b6e0:	0800bf67 	.word	0x0800bf67
 800b6e4:	0800bf9f 	.word	0x0800bf9f
 800b6e8:	0800bfc3 	.word	0x0800bfc3

0800b6ec <_cleanup_r>:
 800b6ec:	4901      	ldr	r1, [pc, #4]	; (800b6f4 <_cleanup_r+0x8>)
 800b6ee:	f000 b8af 	b.w	800b850 <_fwalk_reent>
 800b6f2:	bf00      	nop
 800b6f4:	0800c29d 	.word	0x0800c29d

0800b6f8 <__sfmoreglue>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	1e4a      	subs	r2, r1, #1
 800b6fc:	2568      	movs	r5, #104	; 0x68
 800b6fe:	4355      	muls	r5, r2
 800b700:	460e      	mov	r6, r1
 800b702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b706:	f000 f8c5 	bl	800b894 <_malloc_r>
 800b70a:	4604      	mov	r4, r0
 800b70c:	b140      	cbz	r0, 800b720 <__sfmoreglue+0x28>
 800b70e:	2100      	movs	r1, #0
 800b710:	e9c0 1600 	strd	r1, r6, [r0]
 800b714:	300c      	adds	r0, #12
 800b716:	60a0      	str	r0, [r4, #8]
 800b718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b71c:	f7ff ffa2 	bl	800b664 <memset>
 800b720:	4620      	mov	r0, r4
 800b722:	bd70      	pop	{r4, r5, r6, pc}

0800b724 <__sfp_lock_acquire>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__sfp_lock_acquire+0x8>)
 800b726:	f000 b8b3 	b.w	800b890 <__retarget_lock_acquire_recursive>
 800b72a:	bf00      	nop
 800b72c:	200008b0 	.word	0x200008b0

0800b730 <__sfp_lock_release>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__sfp_lock_release+0x8>)
 800b732:	f000 b8ae 	b.w	800b892 <__retarget_lock_release_recursive>
 800b736:	bf00      	nop
 800b738:	200008b0 	.word	0x200008b0

0800b73c <__sinit_lock_acquire>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__sinit_lock_acquire+0x8>)
 800b73e:	f000 b8a7 	b.w	800b890 <__retarget_lock_acquire_recursive>
 800b742:	bf00      	nop
 800b744:	200008ab 	.word	0x200008ab

0800b748 <__sinit_lock_release>:
 800b748:	4801      	ldr	r0, [pc, #4]	; (800b750 <__sinit_lock_release+0x8>)
 800b74a:	f000 b8a2 	b.w	800b892 <__retarget_lock_release_recursive>
 800b74e:	bf00      	nop
 800b750:	200008ab 	.word	0x200008ab

0800b754 <__sinit>:
 800b754:	b510      	push	{r4, lr}
 800b756:	4604      	mov	r4, r0
 800b758:	f7ff fff0 	bl	800b73c <__sinit_lock_acquire>
 800b75c:	69a3      	ldr	r3, [r4, #24]
 800b75e:	b11b      	cbz	r3, 800b768 <__sinit+0x14>
 800b760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b764:	f7ff bff0 	b.w	800b748 <__sinit_lock_release>
 800b768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b76c:	6523      	str	r3, [r4, #80]	; 0x50
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <__sinit+0x68>)
 800b770:	4a13      	ldr	r2, [pc, #76]	; (800b7c0 <__sinit+0x6c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	62a2      	str	r2, [r4, #40]	; 0x28
 800b776:	42a3      	cmp	r3, r4
 800b778:	bf04      	itt	eq
 800b77a:	2301      	moveq	r3, #1
 800b77c:	61a3      	streq	r3, [r4, #24]
 800b77e:	4620      	mov	r0, r4
 800b780:	f000 f820 	bl	800b7c4 <__sfp>
 800b784:	6060      	str	r0, [r4, #4]
 800b786:	4620      	mov	r0, r4
 800b788:	f000 f81c 	bl	800b7c4 <__sfp>
 800b78c:	60a0      	str	r0, [r4, #8]
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f818 	bl	800b7c4 <__sfp>
 800b794:	2200      	movs	r2, #0
 800b796:	60e0      	str	r0, [r4, #12]
 800b798:	2104      	movs	r1, #4
 800b79a:	6860      	ldr	r0, [r4, #4]
 800b79c:	f7ff ff82 	bl	800b6a4 <std>
 800b7a0:	68a0      	ldr	r0, [r4, #8]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	2109      	movs	r1, #9
 800b7a6:	f7ff ff7d 	bl	800b6a4 <std>
 800b7aa:	68e0      	ldr	r0, [r4, #12]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	2112      	movs	r1, #18
 800b7b0:	f7ff ff78 	bl	800b6a4 <std>
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	61a3      	str	r3, [r4, #24]
 800b7b8:	e7d2      	b.n	800b760 <__sinit+0xc>
 800b7ba:	bf00      	nop
 800b7bc:	0800c57c 	.word	0x0800c57c
 800b7c0:	0800b6ed 	.word	0x0800b6ed

0800b7c4 <__sfp>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	f7ff ffac 	bl	800b724 <__sfp_lock_acquire>
 800b7cc:	4b1e      	ldr	r3, [pc, #120]	; (800b848 <__sfp+0x84>)
 800b7ce:	681e      	ldr	r6, [r3, #0]
 800b7d0:	69b3      	ldr	r3, [r6, #24]
 800b7d2:	b913      	cbnz	r3, 800b7da <__sfp+0x16>
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7ff ffbd 	bl	800b754 <__sinit>
 800b7da:	3648      	adds	r6, #72	; 0x48
 800b7dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	d503      	bpl.n	800b7ec <__sfp+0x28>
 800b7e4:	6833      	ldr	r3, [r6, #0]
 800b7e6:	b30b      	cbz	r3, 800b82c <__sfp+0x68>
 800b7e8:	6836      	ldr	r6, [r6, #0]
 800b7ea:	e7f7      	b.n	800b7dc <__sfp+0x18>
 800b7ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7f0:	b9d5      	cbnz	r5, 800b828 <__sfp+0x64>
 800b7f2:	4b16      	ldr	r3, [pc, #88]	; (800b84c <__sfp+0x88>)
 800b7f4:	60e3      	str	r3, [r4, #12]
 800b7f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7fa:	6665      	str	r5, [r4, #100]	; 0x64
 800b7fc:	f000 f847 	bl	800b88e <__retarget_lock_init_recursive>
 800b800:	f7ff ff96 	bl	800b730 <__sfp_lock_release>
 800b804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b80c:	6025      	str	r5, [r4, #0]
 800b80e:	61a5      	str	r5, [r4, #24]
 800b810:	2208      	movs	r2, #8
 800b812:	4629      	mov	r1, r5
 800b814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b818:	f7ff ff24 	bl	800b664 <memset>
 800b81c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b824:	4620      	mov	r0, r4
 800b826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b828:	3468      	adds	r4, #104	; 0x68
 800b82a:	e7d9      	b.n	800b7e0 <__sfp+0x1c>
 800b82c:	2104      	movs	r1, #4
 800b82e:	4638      	mov	r0, r7
 800b830:	f7ff ff62 	bl	800b6f8 <__sfmoreglue>
 800b834:	4604      	mov	r4, r0
 800b836:	6030      	str	r0, [r6, #0]
 800b838:	2800      	cmp	r0, #0
 800b83a:	d1d5      	bne.n	800b7e8 <__sfp+0x24>
 800b83c:	f7ff ff78 	bl	800b730 <__sfp_lock_release>
 800b840:	230c      	movs	r3, #12
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	e7ee      	b.n	800b824 <__sfp+0x60>
 800b846:	bf00      	nop
 800b848:	0800c57c 	.word	0x0800c57c
 800b84c:	ffff0001 	.word	0xffff0001

0800b850 <_fwalk_reent>:
 800b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	4606      	mov	r6, r0
 800b856:	4688      	mov	r8, r1
 800b858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b85c:	2700      	movs	r7, #0
 800b85e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b862:	f1b9 0901 	subs.w	r9, r9, #1
 800b866:	d505      	bpl.n	800b874 <_fwalk_reent+0x24>
 800b868:	6824      	ldr	r4, [r4, #0]
 800b86a:	2c00      	cmp	r4, #0
 800b86c:	d1f7      	bne.n	800b85e <_fwalk_reent+0xe>
 800b86e:	4638      	mov	r0, r7
 800b870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b874:	89ab      	ldrh	r3, [r5, #12]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d907      	bls.n	800b88a <_fwalk_reent+0x3a>
 800b87a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b87e:	3301      	adds	r3, #1
 800b880:	d003      	beq.n	800b88a <_fwalk_reent+0x3a>
 800b882:	4629      	mov	r1, r5
 800b884:	4630      	mov	r0, r6
 800b886:	47c0      	blx	r8
 800b888:	4307      	orrs	r7, r0
 800b88a:	3568      	adds	r5, #104	; 0x68
 800b88c:	e7e9      	b.n	800b862 <_fwalk_reent+0x12>

0800b88e <__retarget_lock_init_recursive>:
 800b88e:	4770      	bx	lr

0800b890 <__retarget_lock_acquire_recursive>:
 800b890:	4770      	bx	lr

0800b892 <__retarget_lock_release_recursive>:
 800b892:	4770      	bx	lr

0800b894 <_malloc_r>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	1ccd      	adds	r5, r1, #3
 800b898:	f025 0503 	bic.w	r5, r5, #3
 800b89c:	3508      	adds	r5, #8
 800b89e:	2d0c      	cmp	r5, #12
 800b8a0:	bf38      	it	cc
 800b8a2:	250c      	movcc	r5, #12
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	db01      	blt.n	800b8ae <_malloc_r+0x1a>
 800b8aa:	42a9      	cmp	r1, r5
 800b8ac:	d903      	bls.n	800b8b6 <_malloc_r+0x22>
 800b8ae:	230c      	movs	r3, #12
 800b8b0:	6033      	str	r3, [r6, #0]
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b6:	f000 fda3 	bl	800c400 <__malloc_lock>
 800b8ba:	4921      	ldr	r1, [pc, #132]	; (800b940 <_malloc_r+0xac>)
 800b8bc:	680a      	ldr	r2, [r1, #0]
 800b8be:	4614      	mov	r4, r2
 800b8c0:	b99c      	cbnz	r4, 800b8ea <_malloc_r+0x56>
 800b8c2:	4f20      	ldr	r7, [pc, #128]	; (800b944 <_malloc_r+0xb0>)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	b923      	cbnz	r3, 800b8d2 <_malloc_r+0x3e>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f000 fb2a 	bl	800bf24 <_sbrk_r>
 800b8d0:	6038      	str	r0, [r7, #0]
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f000 fb25 	bl	800bf24 <_sbrk_r>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d123      	bne.n	800b926 <_malloc_r+0x92>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	6033      	str	r3, [r6, #0]
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f000 fd92 	bl	800c40c <__malloc_unlock>
 800b8e8:	e7e3      	b.n	800b8b2 <_malloc_r+0x1e>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	1b5b      	subs	r3, r3, r5
 800b8ee:	d417      	bmi.n	800b920 <_malloc_r+0x8c>
 800b8f0:	2b0b      	cmp	r3, #11
 800b8f2:	d903      	bls.n	800b8fc <_malloc_r+0x68>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	441c      	add	r4, r3
 800b8f8:	6025      	str	r5, [r4, #0]
 800b8fa:	e004      	b.n	800b906 <_malloc_r+0x72>
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	42a2      	cmp	r2, r4
 800b900:	bf0c      	ite	eq
 800b902:	600b      	streq	r3, [r1, #0]
 800b904:	6053      	strne	r3, [r2, #4]
 800b906:	4630      	mov	r0, r6
 800b908:	f000 fd80 	bl	800c40c <__malloc_unlock>
 800b90c:	f104 000b 	add.w	r0, r4, #11
 800b910:	1d23      	adds	r3, r4, #4
 800b912:	f020 0007 	bic.w	r0, r0, #7
 800b916:	1ac2      	subs	r2, r0, r3
 800b918:	d0cc      	beq.n	800b8b4 <_malloc_r+0x20>
 800b91a:	1a1b      	subs	r3, r3, r0
 800b91c:	50a3      	str	r3, [r4, r2]
 800b91e:	e7c9      	b.n	800b8b4 <_malloc_r+0x20>
 800b920:	4622      	mov	r2, r4
 800b922:	6864      	ldr	r4, [r4, #4]
 800b924:	e7cc      	b.n	800b8c0 <_malloc_r+0x2c>
 800b926:	1cc4      	adds	r4, r0, #3
 800b928:	f024 0403 	bic.w	r4, r4, #3
 800b92c:	42a0      	cmp	r0, r4
 800b92e:	d0e3      	beq.n	800b8f8 <_malloc_r+0x64>
 800b930:	1a21      	subs	r1, r4, r0
 800b932:	4630      	mov	r0, r6
 800b934:	f000 faf6 	bl	800bf24 <_sbrk_r>
 800b938:	3001      	adds	r0, #1
 800b93a:	d1dd      	bne.n	800b8f8 <_malloc_r+0x64>
 800b93c:	e7cf      	b.n	800b8de <_malloc_r+0x4a>
 800b93e:	bf00      	nop
 800b940:	20000094 	.word	0x20000094
 800b944:	20000098 	.word	0x20000098

0800b948 <__sfputc_r>:
 800b948:	6893      	ldr	r3, [r2, #8]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	b410      	push	{r4}
 800b950:	6093      	str	r3, [r2, #8]
 800b952:	da08      	bge.n	800b966 <__sfputc_r+0x1e>
 800b954:	6994      	ldr	r4, [r2, #24]
 800b956:	42a3      	cmp	r3, r4
 800b958:	db01      	blt.n	800b95e <__sfputc_r+0x16>
 800b95a:	290a      	cmp	r1, #10
 800b95c:	d103      	bne.n	800b966 <__sfputc_r+0x1e>
 800b95e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b962:	f000 bb33 	b.w	800bfcc <__swbuf_r>
 800b966:	6813      	ldr	r3, [r2, #0]
 800b968:	1c58      	adds	r0, r3, #1
 800b96a:	6010      	str	r0, [r2, #0]
 800b96c:	7019      	strb	r1, [r3, #0]
 800b96e:	4608      	mov	r0, r1
 800b970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <__sfputs_r>:
 800b976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	4614      	mov	r4, r2
 800b97e:	18d5      	adds	r5, r2, r3
 800b980:	42ac      	cmp	r4, r5
 800b982:	d101      	bne.n	800b988 <__sfputs_r+0x12>
 800b984:	2000      	movs	r0, #0
 800b986:	e007      	b.n	800b998 <__sfputs_r+0x22>
 800b988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98c:	463a      	mov	r2, r7
 800b98e:	4630      	mov	r0, r6
 800b990:	f7ff ffda 	bl	800b948 <__sfputc_r>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d1f3      	bne.n	800b980 <__sfputs_r+0xa>
 800b998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b99c <_vfiprintf_r>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	b09d      	sub	sp, #116	; 0x74
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	4698      	mov	r8, r3
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	b118      	cbz	r0, 800b9b4 <_vfiprintf_r+0x18>
 800b9ac:	6983      	ldr	r3, [r0, #24]
 800b9ae:	b90b      	cbnz	r3, 800b9b4 <_vfiprintf_r+0x18>
 800b9b0:	f7ff fed0 	bl	800b754 <__sinit>
 800b9b4:	4b89      	ldr	r3, [pc, #548]	; (800bbdc <_vfiprintf_r+0x240>)
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	d11b      	bne.n	800b9f2 <_vfiprintf_r+0x56>
 800b9ba:	6875      	ldr	r5, [r6, #4]
 800b9bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9be:	07d9      	lsls	r1, r3, #31
 800b9c0:	d405      	bmi.n	800b9ce <_vfiprintf_r+0x32>
 800b9c2:	89ab      	ldrh	r3, [r5, #12]
 800b9c4:	059a      	lsls	r2, r3, #22
 800b9c6:	d402      	bmi.n	800b9ce <_vfiprintf_r+0x32>
 800b9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ca:	f7ff ff61 	bl	800b890 <__retarget_lock_acquire_recursive>
 800b9ce:	89ab      	ldrh	r3, [r5, #12]
 800b9d0:	071b      	lsls	r3, r3, #28
 800b9d2:	d501      	bpl.n	800b9d8 <_vfiprintf_r+0x3c>
 800b9d4:	692b      	ldr	r3, [r5, #16]
 800b9d6:	b9eb      	cbnz	r3, 800ba14 <_vfiprintf_r+0x78>
 800b9d8:	4629      	mov	r1, r5
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f000 fb5a 	bl	800c094 <__swsetup_r>
 800b9e0:	b1c0      	cbz	r0, 800ba14 <_vfiprintf_r+0x78>
 800b9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9e4:	07dc      	lsls	r4, r3, #31
 800b9e6:	d50e      	bpl.n	800ba06 <_vfiprintf_r+0x6a>
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	b01d      	add	sp, #116	; 0x74
 800b9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f2:	4b7b      	ldr	r3, [pc, #492]	; (800bbe0 <_vfiprintf_r+0x244>)
 800b9f4:	429d      	cmp	r5, r3
 800b9f6:	d101      	bne.n	800b9fc <_vfiprintf_r+0x60>
 800b9f8:	68b5      	ldr	r5, [r6, #8]
 800b9fa:	e7df      	b.n	800b9bc <_vfiprintf_r+0x20>
 800b9fc:	4b79      	ldr	r3, [pc, #484]	; (800bbe4 <_vfiprintf_r+0x248>)
 800b9fe:	429d      	cmp	r5, r3
 800ba00:	bf08      	it	eq
 800ba02:	68f5      	ldreq	r5, [r6, #12]
 800ba04:	e7da      	b.n	800b9bc <_vfiprintf_r+0x20>
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	0598      	lsls	r0, r3, #22
 800ba0a:	d4ed      	bmi.n	800b9e8 <_vfiprintf_r+0x4c>
 800ba0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba0e:	f7ff ff40 	bl	800b892 <__retarget_lock_release_recursive>
 800ba12:	e7e9      	b.n	800b9e8 <_vfiprintf_r+0x4c>
 800ba14:	2300      	movs	r3, #0
 800ba16:	9309      	str	r3, [sp, #36]	; 0x24
 800ba18:	2320      	movs	r3, #32
 800ba1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba22:	2330      	movs	r3, #48	; 0x30
 800ba24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbe8 <_vfiprintf_r+0x24c>
 800ba28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba2c:	f04f 0901 	mov.w	r9, #1
 800ba30:	4623      	mov	r3, r4
 800ba32:	469a      	mov	sl, r3
 800ba34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba38:	b10a      	cbz	r2, 800ba3e <_vfiprintf_r+0xa2>
 800ba3a:	2a25      	cmp	r2, #37	; 0x25
 800ba3c:	d1f9      	bne.n	800ba32 <_vfiprintf_r+0x96>
 800ba3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba42:	d00b      	beq.n	800ba5c <_vfiprintf_r+0xc0>
 800ba44:	465b      	mov	r3, fp
 800ba46:	4622      	mov	r2, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ff93 	bl	800b976 <__sfputs_r>
 800ba50:	3001      	adds	r0, #1
 800ba52:	f000 80aa 	beq.w	800bbaa <_vfiprintf_r+0x20e>
 800ba56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba58:	445a      	add	r2, fp
 800ba5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 80a2 	beq.w	800bbaa <_vfiprintf_r+0x20e>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba70:	f10a 0a01 	add.w	sl, sl, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba7e:	4654      	mov	r4, sl
 800ba80:	2205      	movs	r2, #5
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4858      	ldr	r0, [pc, #352]	; (800bbe8 <_vfiprintf_r+0x24c>)
 800ba88:	f7f4 fc2a 	bl	80002e0 <memchr>
 800ba8c:	9a04      	ldr	r2, [sp, #16]
 800ba8e:	b9d8      	cbnz	r0, 800bac8 <_vfiprintf_r+0x12c>
 800ba90:	06d1      	lsls	r1, r2, #27
 800ba92:	bf44      	itt	mi
 800ba94:	2320      	movmi	r3, #32
 800ba96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba9a:	0713      	lsls	r3, r2, #28
 800ba9c:	bf44      	itt	mi
 800ba9e:	232b      	movmi	r3, #43	; 0x2b
 800baa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa4:	f89a 3000 	ldrb.w	r3, [sl]
 800baa8:	2b2a      	cmp	r3, #42	; 0x2a
 800baaa:	d015      	beq.n	800bad8 <_vfiprintf_r+0x13c>
 800baac:	9a07      	ldr	r2, [sp, #28]
 800baae:	4654      	mov	r4, sl
 800bab0:	2000      	movs	r0, #0
 800bab2:	f04f 0c0a 	mov.w	ip, #10
 800bab6:	4621      	mov	r1, r4
 800bab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babc:	3b30      	subs	r3, #48	; 0x30
 800babe:	2b09      	cmp	r3, #9
 800bac0:	d94e      	bls.n	800bb60 <_vfiprintf_r+0x1c4>
 800bac2:	b1b0      	cbz	r0, 800baf2 <_vfiprintf_r+0x156>
 800bac4:	9207      	str	r2, [sp, #28]
 800bac6:	e014      	b.n	800baf2 <_vfiprintf_r+0x156>
 800bac8:	eba0 0308 	sub.w	r3, r0, r8
 800bacc:	fa09 f303 	lsl.w	r3, r9, r3
 800bad0:	4313      	orrs	r3, r2
 800bad2:	9304      	str	r3, [sp, #16]
 800bad4:	46a2      	mov	sl, r4
 800bad6:	e7d2      	b.n	800ba7e <_vfiprintf_r+0xe2>
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	1d19      	adds	r1, r3, #4
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	9103      	str	r1, [sp, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bfbb      	ittet	lt
 800bae4:	425b      	neglt	r3, r3
 800bae6:	f042 0202 	orrlt.w	r2, r2, #2
 800baea:	9307      	strge	r3, [sp, #28]
 800baec:	9307      	strlt	r3, [sp, #28]
 800baee:	bfb8      	it	lt
 800baf0:	9204      	strlt	r2, [sp, #16]
 800baf2:	7823      	ldrb	r3, [r4, #0]
 800baf4:	2b2e      	cmp	r3, #46	; 0x2e
 800baf6:	d10c      	bne.n	800bb12 <_vfiprintf_r+0x176>
 800baf8:	7863      	ldrb	r3, [r4, #1]
 800bafa:	2b2a      	cmp	r3, #42	; 0x2a
 800bafc:	d135      	bne.n	800bb6a <_vfiprintf_r+0x1ce>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	1d1a      	adds	r2, r3, #4
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	9203      	str	r2, [sp, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	bfb8      	it	lt
 800bb0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb0e:	3402      	adds	r4, #2
 800bb10:	9305      	str	r3, [sp, #20]
 800bb12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbf8 <_vfiprintf_r+0x25c>
 800bb16:	7821      	ldrb	r1, [r4, #0]
 800bb18:	2203      	movs	r2, #3
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	f7f4 fbe0 	bl	80002e0 <memchr>
 800bb20:	b140      	cbz	r0, 800bb34 <_vfiprintf_r+0x198>
 800bb22:	2340      	movs	r3, #64	; 0x40
 800bb24:	eba0 000a 	sub.w	r0, r0, sl
 800bb28:	fa03 f000 	lsl.w	r0, r3, r0
 800bb2c:	9b04      	ldr	r3, [sp, #16]
 800bb2e:	4303      	orrs	r3, r0
 800bb30:	3401      	adds	r4, #1
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb38:	482c      	ldr	r0, [pc, #176]	; (800bbec <_vfiprintf_r+0x250>)
 800bb3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb3e:	2206      	movs	r2, #6
 800bb40:	f7f4 fbce 	bl	80002e0 <memchr>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d03f      	beq.n	800bbc8 <_vfiprintf_r+0x22c>
 800bb48:	4b29      	ldr	r3, [pc, #164]	; (800bbf0 <_vfiprintf_r+0x254>)
 800bb4a:	bb1b      	cbnz	r3, 800bb94 <_vfiprintf_r+0x1f8>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	3307      	adds	r3, #7
 800bb50:	f023 0307 	bic.w	r3, r3, #7
 800bb54:	3308      	adds	r3, #8
 800bb56:	9303      	str	r3, [sp, #12]
 800bb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5a:	443b      	add	r3, r7
 800bb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5e:	e767      	b.n	800ba30 <_vfiprintf_r+0x94>
 800bb60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb64:	460c      	mov	r4, r1
 800bb66:	2001      	movs	r0, #1
 800bb68:	e7a5      	b.n	800bab6 <_vfiprintf_r+0x11a>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	3401      	adds	r4, #1
 800bb6e:	9305      	str	r3, [sp, #20]
 800bb70:	4619      	mov	r1, r3
 800bb72:	f04f 0c0a 	mov.w	ip, #10
 800bb76:	4620      	mov	r0, r4
 800bb78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb7c:	3a30      	subs	r2, #48	; 0x30
 800bb7e:	2a09      	cmp	r2, #9
 800bb80:	d903      	bls.n	800bb8a <_vfiprintf_r+0x1ee>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0c5      	beq.n	800bb12 <_vfiprintf_r+0x176>
 800bb86:	9105      	str	r1, [sp, #20]
 800bb88:	e7c3      	b.n	800bb12 <_vfiprintf_r+0x176>
 800bb8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb8e:	4604      	mov	r4, r0
 800bb90:	2301      	movs	r3, #1
 800bb92:	e7f0      	b.n	800bb76 <_vfiprintf_r+0x1da>
 800bb94:	ab03      	add	r3, sp, #12
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	462a      	mov	r2, r5
 800bb9a:	4b16      	ldr	r3, [pc, #88]	; (800bbf4 <_vfiprintf_r+0x258>)
 800bb9c:	a904      	add	r1, sp, #16
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f3af 8000 	nop.w
 800bba4:	4607      	mov	r7, r0
 800bba6:	1c78      	adds	r0, r7, #1
 800bba8:	d1d6      	bne.n	800bb58 <_vfiprintf_r+0x1bc>
 800bbaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbac:	07d9      	lsls	r1, r3, #31
 800bbae:	d405      	bmi.n	800bbbc <_vfiprintf_r+0x220>
 800bbb0:	89ab      	ldrh	r3, [r5, #12]
 800bbb2:	059a      	lsls	r2, r3, #22
 800bbb4:	d402      	bmi.n	800bbbc <_vfiprintf_r+0x220>
 800bbb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb8:	f7ff fe6b 	bl	800b892 <__retarget_lock_release_recursive>
 800bbbc:	89ab      	ldrh	r3, [r5, #12]
 800bbbe:	065b      	lsls	r3, r3, #25
 800bbc0:	f53f af12 	bmi.w	800b9e8 <_vfiprintf_r+0x4c>
 800bbc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbc6:	e711      	b.n	800b9ec <_vfiprintf_r+0x50>
 800bbc8:	ab03      	add	r3, sp, #12
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	462a      	mov	r2, r5
 800bbce:	4b09      	ldr	r3, [pc, #36]	; (800bbf4 <_vfiprintf_r+0x258>)
 800bbd0:	a904      	add	r1, sp, #16
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f000 f880 	bl	800bcd8 <_printf_i>
 800bbd8:	e7e4      	b.n	800bba4 <_vfiprintf_r+0x208>
 800bbda:	bf00      	nop
 800bbdc:	0800c5a0 	.word	0x0800c5a0
 800bbe0:	0800c5c0 	.word	0x0800c5c0
 800bbe4:	0800c580 	.word	0x0800c580
 800bbe8:	0800c5e0 	.word	0x0800c5e0
 800bbec:	0800c5ea 	.word	0x0800c5ea
 800bbf0:	00000000 	.word	0x00000000
 800bbf4:	0800b977 	.word	0x0800b977
 800bbf8:	0800c5e6 	.word	0x0800c5e6

0800bbfc <_printf_common>:
 800bbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc00:	4616      	mov	r6, r2
 800bc02:	4699      	mov	r9, r3
 800bc04:	688a      	ldr	r2, [r1, #8]
 800bc06:	690b      	ldr	r3, [r1, #16]
 800bc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	bfb8      	it	lt
 800bc10:	4613      	movlt	r3, r2
 800bc12:	6033      	str	r3, [r6, #0]
 800bc14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc18:	4607      	mov	r7, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	b10a      	cbz	r2, 800bc22 <_printf_common+0x26>
 800bc1e:	3301      	adds	r3, #1
 800bc20:	6033      	str	r3, [r6, #0]
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	0699      	lsls	r1, r3, #26
 800bc26:	bf42      	ittt	mi
 800bc28:	6833      	ldrmi	r3, [r6, #0]
 800bc2a:	3302      	addmi	r3, #2
 800bc2c:	6033      	strmi	r3, [r6, #0]
 800bc2e:	6825      	ldr	r5, [r4, #0]
 800bc30:	f015 0506 	ands.w	r5, r5, #6
 800bc34:	d106      	bne.n	800bc44 <_printf_common+0x48>
 800bc36:	f104 0a19 	add.w	sl, r4, #25
 800bc3a:	68e3      	ldr	r3, [r4, #12]
 800bc3c:	6832      	ldr	r2, [r6, #0]
 800bc3e:	1a9b      	subs	r3, r3, r2
 800bc40:	42ab      	cmp	r3, r5
 800bc42:	dc26      	bgt.n	800bc92 <_printf_common+0x96>
 800bc44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc48:	1e13      	subs	r3, r2, #0
 800bc4a:	6822      	ldr	r2, [r4, #0]
 800bc4c:	bf18      	it	ne
 800bc4e:	2301      	movne	r3, #1
 800bc50:	0692      	lsls	r2, r2, #26
 800bc52:	d42b      	bmi.n	800bcac <_printf_common+0xb0>
 800bc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc58:	4649      	mov	r1, r9
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	47c0      	blx	r8
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d01e      	beq.n	800bca0 <_printf_common+0xa4>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	68e5      	ldr	r5, [r4, #12]
 800bc66:	6832      	ldr	r2, [r6, #0]
 800bc68:	f003 0306 	and.w	r3, r3, #6
 800bc6c:	2b04      	cmp	r3, #4
 800bc6e:	bf08      	it	eq
 800bc70:	1aad      	subeq	r5, r5, r2
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	6922      	ldr	r2, [r4, #16]
 800bc76:	bf0c      	ite	eq
 800bc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc7c:	2500      	movne	r5, #0
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	bfc4      	itt	gt
 800bc82:	1a9b      	subgt	r3, r3, r2
 800bc84:	18ed      	addgt	r5, r5, r3
 800bc86:	2600      	movs	r6, #0
 800bc88:	341a      	adds	r4, #26
 800bc8a:	42b5      	cmp	r5, r6
 800bc8c:	d11a      	bne.n	800bcc4 <_printf_common+0xc8>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e008      	b.n	800bca4 <_printf_common+0xa8>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4652      	mov	r2, sl
 800bc96:	4649      	mov	r1, r9
 800bc98:	4638      	mov	r0, r7
 800bc9a:	47c0      	blx	r8
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	d103      	bne.n	800bca8 <_printf_common+0xac>
 800bca0:	f04f 30ff 	mov.w	r0, #4294967295
 800bca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca8:	3501      	adds	r5, #1
 800bcaa:	e7c6      	b.n	800bc3a <_printf_common+0x3e>
 800bcac:	18e1      	adds	r1, r4, r3
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	2030      	movs	r0, #48	; 0x30
 800bcb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcb6:	4422      	add	r2, r4
 800bcb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcc0:	3302      	adds	r3, #2
 800bcc2:	e7c7      	b.n	800bc54 <_printf_common+0x58>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	4649      	mov	r1, r9
 800bcca:	4638      	mov	r0, r7
 800bccc:	47c0      	blx	r8
 800bcce:	3001      	adds	r0, #1
 800bcd0:	d0e6      	beq.n	800bca0 <_printf_common+0xa4>
 800bcd2:	3601      	adds	r6, #1
 800bcd4:	e7d9      	b.n	800bc8a <_printf_common+0x8e>
	...

0800bcd8 <_printf_i>:
 800bcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	460c      	mov	r4, r1
 800bcde:	4691      	mov	r9, r2
 800bce0:	7e27      	ldrb	r7, [r4, #24]
 800bce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bce4:	2f78      	cmp	r7, #120	; 0x78
 800bce6:	4680      	mov	r8, r0
 800bce8:	469a      	mov	sl, r3
 800bcea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcee:	d807      	bhi.n	800bd00 <_printf_i+0x28>
 800bcf0:	2f62      	cmp	r7, #98	; 0x62
 800bcf2:	d80a      	bhi.n	800bd0a <_printf_i+0x32>
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	f000 80d8 	beq.w	800beaa <_printf_i+0x1d2>
 800bcfa:	2f58      	cmp	r7, #88	; 0x58
 800bcfc:	f000 80a3 	beq.w	800be46 <_printf_i+0x16e>
 800bd00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd08:	e03a      	b.n	800bd80 <_printf_i+0xa8>
 800bd0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd0e:	2b15      	cmp	r3, #21
 800bd10:	d8f6      	bhi.n	800bd00 <_printf_i+0x28>
 800bd12:	a001      	add	r0, pc, #4	; (adr r0, 800bd18 <_printf_i+0x40>)
 800bd14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd18:	0800bd71 	.word	0x0800bd71
 800bd1c:	0800bd85 	.word	0x0800bd85
 800bd20:	0800bd01 	.word	0x0800bd01
 800bd24:	0800bd01 	.word	0x0800bd01
 800bd28:	0800bd01 	.word	0x0800bd01
 800bd2c:	0800bd01 	.word	0x0800bd01
 800bd30:	0800bd85 	.word	0x0800bd85
 800bd34:	0800bd01 	.word	0x0800bd01
 800bd38:	0800bd01 	.word	0x0800bd01
 800bd3c:	0800bd01 	.word	0x0800bd01
 800bd40:	0800bd01 	.word	0x0800bd01
 800bd44:	0800be91 	.word	0x0800be91
 800bd48:	0800bdb5 	.word	0x0800bdb5
 800bd4c:	0800be73 	.word	0x0800be73
 800bd50:	0800bd01 	.word	0x0800bd01
 800bd54:	0800bd01 	.word	0x0800bd01
 800bd58:	0800beb3 	.word	0x0800beb3
 800bd5c:	0800bd01 	.word	0x0800bd01
 800bd60:	0800bdb5 	.word	0x0800bdb5
 800bd64:	0800bd01 	.word	0x0800bd01
 800bd68:	0800bd01 	.word	0x0800bd01
 800bd6c:	0800be7b 	.word	0x0800be7b
 800bd70:	680b      	ldr	r3, [r1, #0]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	600a      	str	r2, [r1, #0]
 800bd78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd80:	2301      	movs	r3, #1
 800bd82:	e0a3      	b.n	800becc <_printf_i+0x1f4>
 800bd84:	6825      	ldr	r5, [r4, #0]
 800bd86:	6808      	ldr	r0, [r1, #0]
 800bd88:	062e      	lsls	r6, r5, #24
 800bd8a:	f100 0304 	add.w	r3, r0, #4
 800bd8e:	d50a      	bpl.n	800bda6 <_printf_i+0xce>
 800bd90:	6805      	ldr	r5, [r0, #0]
 800bd92:	600b      	str	r3, [r1, #0]
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	da03      	bge.n	800bda0 <_printf_i+0xc8>
 800bd98:	232d      	movs	r3, #45	; 0x2d
 800bd9a:	426d      	negs	r5, r5
 800bd9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda0:	485e      	ldr	r0, [pc, #376]	; (800bf1c <_printf_i+0x244>)
 800bda2:	230a      	movs	r3, #10
 800bda4:	e019      	b.n	800bdda <_printf_i+0x102>
 800bda6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bdaa:	6805      	ldr	r5, [r0, #0]
 800bdac:	600b      	str	r3, [r1, #0]
 800bdae:	bf18      	it	ne
 800bdb0:	b22d      	sxthne	r5, r5
 800bdb2:	e7ef      	b.n	800bd94 <_printf_i+0xbc>
 800bdb4:	680b      	ldr	r3, [r1, #0]
 800bdb6:	6825      	ldr	r5, [r4, #0]
 800bdb8:	1d18      	adds	r0, r3, #4
 800bdba:	6008      	str	r0, [r1, #0]
 800bdbc:	0628      	lsls	r0, r5, #24
 800bdbe:	d501      	bpl.n	800bdc4 <_printf_i+0xec>
 800bdc0:	681d      	ldr	r5, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <_printf_i+0xf2>
 800bdc4:	0669      	lsls	r1, r5, #25
 800bdc6:	d5fb      	bpl.n	800bdc0 <_printf_i+0xe8>
 800bdc8:	881d      	ldrh	r5, [r3, #0]
 800bdca:	4854      	ldr	r0, [pc, #336]	; (800bf1c <_printf_i+0x244>)
 800bdcc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdce:	bf0c      	ite	eq
 800bdd0:	2308      	moveq	r3, #8
 800bdd2:	230a      	movne	r3, #10
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdda:	6866      	ldr	r6, [r4, #4]
 800bddc:	60a6      	str	r6, [r4, #8]
 800bdde:	2e00      	cmp	r6, #0
 800bde0:	bfa2      	ittt	ge
 800bde2:	6821      	ldrge	r1, [r4, #0]
 800bde4:	f021 0104 	bicge.w	r1, r1, #4
 800bde8:	6021      	strge	r1, [r4, #0]
 800bdea:	b90d      	cbnz	r5, 800bdf0 <_printf_i+0x118>
 800bdec:	2e00      	cmp	r6, #0
 800bdee:	d04d      	beq.n	800be8c <_printf_i+0x1b4>
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdf6:	fb03 5711 	mls	r7, r3, r1, r5
 800bdfa:	5dc7      	ldrb	r7, [r0, r7]
 800bdfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be00:	462f      	mov	r7, r5
 800be02:	42bb      	cmp	r3, r7
 800be04:	460d      	mov	r5, r1
 800be06:	d9f4      	bls.n	800bdf2 <_printf_i+0x11a>
 800be08:	2b08      	cmp	r3, #8
 800be0a:	d10b      	bne.n	800be24 <_printf_i+0x14c>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	07df      	lsls	r7, r3, #31
 800be10:	d508      	bpl.n	800be24 <_printf_i+0x14c>
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	6861      	ldr	r1, [r4, #4]
 800be16:	4299      	cmp	r1, r3
 800be18:	bfde      	ittt	le
 800be1a:	2330      	movle	r3, #48	; 0x30
 800be1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be24:	1b92      	subs	r2, r2, r6
 800be26:	6122      	str	r2, [r4, #16]
 800be28:	f8cd a000 	str.w	sl, [sp]
 800be2c:	464b      	mov	r3, r9
 800be2e:	aa03      	add	r2, sp, #12
 800be30:	4621      	mov	r1, r4
 800be32:	4640      	mov	r0, r8
 800be34:	f7ff fee2 	bl	800bbfc <_printf_common>
 800be38:	3001      	adds	r0, #1
 800be3a:	d14c      	bne.n	800bed6 <_printf_i+0x1fe>
 800be3c:	f04f 30ff 	mov.w	r0, #4294967295
 800be40:	b004      	add	sp, #16
 800be42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be46:	4835      	ldr	r0, [pc, #212]	; (800bf1c <_printf_i+0x244>)
 800be48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	680e      	ldr	r6, [r1, #0]
 800be50:	061f      	lsls	r7, r3, #24
 800be52:	f856 5b04 	ldr.w	r5, [r6], #4
 800be56:	600e      	str	r6, [r1, #0]
 800be58:	d514      	bpl.n	800be84 <_printf_i+0x1ac>
 800be5a:	07d9      	lsls	r1, r3, #31
 800be5c:	bf44      	itt	mi
 800be5e:	f043 0320 	orrmi.w	r3, r3, #32
 800be62:	6023      	strmi	r3, [r4, #0]
 800be64:	b91d      	cbnz	r5, 800be6e <_printf_i+0x196>
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	f023 0320 	bic.w	r3, r3, #32
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	2310      	movs	r3, #16
 800be70:	e7b0      	b.n	800bdd4 <_printf_i+0xfc>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	f043 0320 	orr.w	r3, r3, #32
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	2378      	movs	r3, #120	; 0x78
 800be7c:	4828      	ldr	r0, [pc, #160]	; (800bf20 <_printf_i+0x248>)
 800be7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be82:	e7e3      	b.n	800be4c <_printf_i+0x174>
 800be84:	065e      	lsls	r6, r3, #25
 800be86:	bf48      	it	mi
 800be88:	b2ad      	uxthmi	r5, r5
 800be8a:	e7e6      	b.n	800be5a <_printf_i+0x182>
 800be8c:	4616      	mov	r6, r2
 800be8e:	e7bb      	b.n	800be08 <_printf_i+0x130>
 800be90:	680b      	ldr	r3, [r1, #0]
 800be92:	6826      	ldr	r6, [r4, #0]
 800be94:	6960      	ldr	r0, [r4, #20]
 800be96:	1d1d      	adds	r5, r3, #4
 800be98:	600d      	str	r5, [r1, #0]
 800be9a:	0635      	lsls	r5, r6, #24
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	d501      	bpl.n	800bea4 <_printf_i+0x1cc>
 800bea0:	6018      	str	r0, [r3, #0]
 800bea2:	e002      	b.n	800beaa <_printf_i+0x1d2>
 800bea4:	0671      	lsls	r1, r6, #25
 800bea6:	d5fb      	bpl.n	800bea0 <_printf_i+0x1c8>
 800bea8:	8018      	strh	r0, [r3, #0]
 800beaa:	2300      	movs	r3, #0
 800beac:	6123      	str	r3, [r4, #16]
 800beae:	4616      	mov	r6, r2
 800beb0:	e7ba      	b.n	800be28 <_printf_i+0x150>
 800beb2:	680b      	ldr	r3, [r1, #0]
 800beb4:	1d1a      	adds	r2, r3, #4
 800beb6:	600a      	str	r2, [r1, #0]
 800beb8:	681e      	ldr	r6, [r3, #0]
 800beba:	6862      	ldr	r2, [r4, #4]
 800bebc:	2100      	movs	r1, #0
 800bebe:	4630      	mov	r0, r6
 800bec0:	f7f4 fa0e 	bl	80002e0 <memchr>
 800bec4:	b108      	cbz	r0, 800beca <_printf_i+0x1f2>
 800bec6:	1b80      	subs	r0, r0, r6
 800bec8:	6060      	str	r0, [r4, #4]
 800beca:	6863      	ldr	r3, [r4, #4]
 800becc:	6123      	str	r3, [r4, #16]
 800bece:	2300      	movs	r3, #0
 800bed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed4:	e7a8      	b.n	800be28 <_printf_i+0x150>
 800bed6:	6923      	ldr	r3, [r4, #16]
 800bed8:	4632      	mov	r2, r6
 800beda:	4649      	mov	r1, r9
 800bedc:	4640      	mov	r0, r8
 800bede:	47d0      	blx	sl
 800bee0:	3001      	adds	r0, #1
 800bee2:	d0ab      	beq.n	800be3c <_printf_i+0x164>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	079b      	lsls	r3, r3, #30
 800bee8:	d413      	bmi.n	800bf12 <_printf_i+0x23a>
 800beea:	68e0      	ldr	r0, [r4, #12]
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	4298      	cmp	r0, r3
 800bef0:	bfb8      	it	lt
 800bef2:	4618      	movlt	r0, r3
 800bef4:	e7a4      	b.n	800be40 <_printf_i+0x168>
 800bef6:	2301      	movs	r3, #1
 800bef8:	4632      	mov	r2, r6
 800befa:	4649      	mov	r1, r9
 800befc:	4640      	mov	r0, r8
 800befe:	47d0      	blx	sl
 800bf00:	3001      	adds	r0, #1
 800bf02:	d09b      	beq.n	800be3c <_printf_i+0x164>
 800bf04:	3501      	adds	r5, #1
 800bf06:	68e3      	ldr	r3, [r4, #12]
 800bf08:	9903      	ldr	r1, [sp, #12]
 800bf0a:	1a5b      	subs	r3, r3, r1
 800bf0c:	42ab      	cmp	r3, r5
 800bf0e:	dcf2      	bgt.n	800bef6 <_printf_i+0x21e>
 800bf10:	e7eb      	b.n	800beea <_printf_i+0x212>
 800bf12:	2500      	movs	r5, #0
 800bf14:	f104 0619 	add.w	r6, r4, #25
 800bf18:	e7f5      	b.n	800bf06 <_printf_i+0x22e>
 800bf1a:	bf00      	nop
 800bf1c:	0800c5f1 	.word	0x0800c5f1
 800bf20:	0800c602 	.word	0x0800c602

0800bf24 <_sbrk_r>:
 800bf24:	b538      	push	{r3, r4, r5, lr}
 800bf26:	4d06      	ldr	r5, [pc, #24]	; (800bf40 <_sbrk_r+0x1c>)
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	602b      	str	r3, [r5, #0]
 800bf30:	f7f6 f87a 	bl	8002028 <_sbrk>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_sbrk_r+0x1a>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_sbrk_r+0x1a>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	200008b4 	.word	0x200008b4

0800bf44 <__sread>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	460c      	mov	r4, r1
 800bf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4c:	f000 fab4 	bl	800c4b8 <_read_r>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	bfab      	itete	ge
 800bf54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf56:	89a3      	ldrhlt	r3, [r4, #12]
 800bf58:	181b      	addge	r3, r3, r0
 800bf5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf5e:	bfac      	ite	ge
 800bf60:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf62:	81a3      	strhlt	r3, [r4, #12]
 800bf64:	bd10      	pop	{r4, pc}

0800bf66 <__swrite>:
 800bf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	461f      	mov	r7, r3
 800bf6c:	898b      	ldrh	r3, [r1, #12]
 800bf6e:	05db      	lsls	r3, r3, #23
 800bf70:	4605      	mov	r5, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	4616      	mov	r6, r2
 800bf76:	d505      	bpl.n	800bf84 <__swrite+0x1e>
 800bf78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f000 f9c8 	bl	800c314 <_lseek_r>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf8e:	81a3      	strh	r3, [r4, #12]
 800bf90:	4632      	mov	r2, r6
 800bf92:	463b      	mov	r3, r7
 800bf94:	4628      	mov	r0, r5
 800bf96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9a:	f000 b869 	b.w	800c070 <_write_r>

0800bf9e <__sseek>:
 800bf9e:	b510      	push	{r4, lr}
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa6:	f000 f9b5 	bl	800c314 <_lseek_r>
 800bfaa:	1c43      	adds	r3, r0, #1
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	bf15      	itete	ne
 800bfb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfba:	81a3      	strheq	r3, [r4, #12]
 800bfbc:	bf18      	it	ne
 800bfbe:	81a3      	strhne	r3, [r4, #12]
 800bfc0:	bd10      	pop	{r4, pc}

0800bfc2 <__sclose>:
 800bfc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc6:	f000 b8d3 	b.w	800c170 <_close_r>
	...

0800bfcc <__swbuf_r>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	460e      	mov	r6, r1
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	b118      	cbz	r0, 800bfde <__swbuf_r+0x12>
 800bfd6:	6983      	ldr	r3, [r0, #24]
 800bfd8:	b90b      	cbnz	r3, 800bfde <__swbuf_r+0x12>
 800bfda:	f7ff fbbb 	bl	800b754 <__sinit>
 800bfde:	4b21      	ldr	r3, [pc, #132]	; (800c064 <__swbuf_r+0x98>)
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	d12b      	bne.n	800c03c <__swbuf_r+0x70>
 800bfe4:	686c      	ldr	r4, [r5, #4]
 800bfe6:	69a3      	ldr	r3, [r4, #24]
 800bfe8:	60a3      	str	r3, [r4, #8]
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	071a      	lsls	r2, r3, #28
 800bfee:	d52f      	bpl.n	800c050 <__swbuf_r+0x84>
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	b36b      	cbz	r3, 800c050 <__swbuf_r+0x84>
 800bff4:	6923      	ldr	r3, [r4, #16]
 800bff6:	6820      	ldr	r0, [r4, #0]
 800bff8:	1ac0      	subs	r0, r0, r3
 800bffa:	6963      	ldr	r3, [r4, #20]
 800bffc:	b2f6      	uxtb	r6, r6
 800bffe:	4283      	cmp	r3, r0
 800c000:	4637      	mov	r7, r6
 800c002:	dc04      	bgt.n	800c00e <__swbuf_r+0x42>
 800c004:	4621      	mov	r1, r4
 800c006:	4628      	mov	r0, r5
 800c008:	f000 f948 	bl	800c29c <_fflush_r>
 800c00c:	bb30      	cbnz	r0, 800c05c <__swbuf_r+0x90>
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	3b01      	subs	r3, #1
 800c012:	60a3      	str	r3, [r4, #8]
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	6022      	str	r2, [r4, #0]
 800c01a:	701e      	strb	r6, [r3, #0]
 800c01c:	6963      	ldr	r3, [r4, #20]
 800c01e:	3001      	adds	r0, #1
 800c020:	4283      	cmp	r3, r0
 800c022:	d004      	beq.n	800c02e <__swbuf_r+0x62>
 800c024:	89a3      	ldrh	r3, [r4, #12]
 800c026:	07db      	lsls	r3, r3, #31
 800c028:	d506      	bpl.n	800c038 <__swbuf_r+0x6c>
 800c02a:	2e0a      	cmp	r6, #10
 800c02c:	d104      	bne.n	800c038 <__swbuf_r+0x6c>
 800c02e:	4621      	mov	r1, r4
 800c030:	4628      	mov	r0, r5
 800c032:	f000 f933 	bl	800c29c <_fflush_r>
 800c036:	b988      	cbnz	r0, 800c05c <__swbuf_r+0x90>
 800c038:	4638      	mov	r0, r7
 800c03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c03c:	4b0a      	ldr	r3, [pc, #40]	; (800c068 <__swbuf_r+0x9c>)
 800c03e:	429c      	cmp	r4, r3
 800c040:	d101      	bne.n	800c046 <__swbuf_r+0x7a>
 800c042:	68ac      	ldr	r4, [r5, #8]
 800c044:	e7cf      	b.n	800bfe6 <__swbuf_r+0x1a>
 800c046:	4b09      	ldr	r3, [pc, #36]	; (800c06c <__swbuf_r+0xa0>)
 800c048:	429c      	cmp	r4, r3
 800c04a:	bf08      	it	eq
 800c04c:	68ec      	ldreq	r4, [r5, #12]
 800c04e:	e7ca      	b.n	800bfe6 <__swbuf_r+0x1a>
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	f000 f81e 	bl	800c094 <__swsetup_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d0cb      	beq.n	800bff4 <__swbuf_r+0x28>
 800c05c:	f04f 37ff 	mov.w	r7, #4294967295
 800c060:	e7ea      	b.n	800c038 <__swbuf_r+0x6c>
 800c062:	bf00      	nop
 800c064:	0800c5a0 	.word	0x0800c5a0
 800c068:	0800c5c0 	.word	0x0800c5c0
 800c06c:	0800c580 	.word	0x0800c580

0800c070 <_write_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4d07      	ldr	r5, [pc, #28]	; (800c090 <_write_r+0x20>)
 800c074:	4604      	mov	r4, r0
 800c076:	4608      	mov	r0, r1
 800c078:	4611      	mov	r1, r2
 800c07a:	2200      	movs	r2, #0
 800c07c:	602a      	str	r2, [r5, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	f7f5 faca 	bl	8001618 <_write>
 800c084:	1c43      	adds	r3, r0, #1
 800c086:	d102      	bne.n	800c08e <_write_r+0x1e>
 800c088:	682b      	ldr	r3, [r5, #0]
 800c08a:	b103      	cbz	r3, 800c08e <_write_r+0x1e>
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	bd38      	pop	{r3, r4, r5, pc}
 800c090:	200008b4 	.word	0x200008b4

0800c094 <__swsetup_r>:
 800c094:	4b32      	ldr	r3, [pc, #200]	; (800c160 <__swsetup_r+0xcc>)
 800c096:	b570      	push	{r4, r5, r6, lr}
 800c098:	681d      	ldr	r5, [r3, #0]
 800c09a:	4606      	mov	r6, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	b125      	cbz	r5, 800c0aa <__swsetup_r+0x16>
 800c0a0:	69ab      	ldr	r3, [r5, #24]
 800c0a2:	b913      	cbnz	r3, 800c0aa <__swsetup_r+0x16>
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	f7ff fb55 	bl	800b754 <__sinit>
 800c0aa:	4b2e      	ldr	r3, [pc, #184]	; (800c164 <__swsetup_r+0xd0>)
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	d10f      	bne.n	800c0d0 <__swsetup_r+0x3c>
 800c0b0:	686c      	ldr	r4, [r5, #4]
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0b8:	0719      	lsls	r1, r3, #28
 800c0ba:	d42c      	bmi.n	800c116 <__swsetup_r+0x82>
 800c0bc:	06dd      	lsls	r5, r3, #27
 800c0be:	d411      	bmi.n	800c0e4 <__swsetup_r+0x50>
 800c0c0:	2309      	movs	r3, #9
 800c0c2:	6033      	str	r3, [r6, #0]
 800c0c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ce:	e03e      	b.n	800c14e <__swsetup_r+0xba>
 800c0d0:	4b25      	ldr	r3, [pc, #148]	; (800c168 <__swsetup_r+0xd4>)
 800c0d2:	429c      	cmp	r4, r3
 800c0d4:	d101      	bne.n	800c0da <__swsetup_r+0x46>
 800c0d6:	68ac      	ldr	r4, [r5, #8]
 800c0d8:	e7eb      	b.n	800c0b2 <__swsetup_r+0x1e>
 800c0da:	4b24      	ldr	r3, [pc, #144]	; (800c16c <__swsetup_r+0xd8>)
 800c0dc:	429c      	cmp	r4, r3
 800c0de:	bf08      	it	eq
 800c0e0:	68ec      	ldreq	r4, [r5, #12]
 800c0e2:	e7e6      	b.n	800c0b2 <__swsetup_r+0x1e>
 800c0e4:	0758      	lsls	r0, r3, #29
 800c0e6:	d512      	bpl.n	800c10e <__swsetup_r+0x7a>
 800c0e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ea:	b141      	cbz	r1, 800c0fe <__swsetup_r+0x6a>
 800c0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f0:	4299      	cmp	r1, r3
 800c0f2:	d002      	beq.n	800c0fa <__swsetup_r+0x66>
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f000 f98f 	bl	800c418 <_free_r>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	2300      	movs	r3, #0
 800c108:	6063      	str	r3, [r4, #4]
 800c10a:	6923      	ldr	r3, [r4, #16]
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	f043 0308 	orr.w	r3, r3, #8
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	6923      	ldr	r3, [r4, #16]
 800c118:	b94b      	cbnz	r3, 800c12e <__swsetup_r+0x9a>
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c124:	d003      	beq.n	800c12e <__swsetup_r+0x9a>
 800c126:	4621      	mov	r1, r4
 800c128:	4630      	mov	r0, r6
 800c12a:	f000 f929 	bl	800c380 <__smakebuf_r>
 800c12e:	89a0      	ldrh	r0, [r4, #12]
 800c130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c134:	f010 0301 	ands.w	r3, r0, #1
 800c138:	d00a      	beq.n	800c150 <__swsetup_r+0xbc>
 800c13a:	2300      	movs	r3, #0
 800c13c:	60a3      	str	r3, [r4, #8]
 800c13e:	6963      	ldr	r3, [r4, #20]
 800c140:	425b      	negs	r3, r3
 800c142:	61a3      	str	r3, [r4, #24]
 800c144:	6923      	ldr	r3, [r4, #16]
 800c146:	b943      	cbnz	r3, 800c15a <__swsetup_r+0xc6>
 800c148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c14c:	d1ba      	bne.n	800c0c4 <__swsetup_r+0x30>
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	0781      	lsls	r1, r0, #30
 800c152:	bf58      	it	pl
 800c154:	6963      	ldrpl	r3, [r4, #20]
 800c156:	60a3      	str	r3, [r4, #8]
 800c158:	e7f4      	b.n	800c144 <__swsetup_r+0xb0>
 800c15a:	2000      	movs	r0, #0
 800c15c:	e7f7      	b.n	800c14e <__swsetup_r+0xba>
 800c15e:	bf00      	nop
 800c160:	20000010 	.word	0x20000010
 800c164:	0800c5a0 	.word	0x0800c5a0
 800c168:	0800c5c0 	.word	0x0800c5c0
 800c16c:	0800c580 	.word	0x0800c580

0800c170 <_close_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d06      	ldr	r5, [pc, #24]	; (800c18c <_close_r+0x1c>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	602b      	str	r3, [r5, #0]
 800c17c:	f7f5 ff1f 	bl	8001fbe <_close>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_close_r+0x1a>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_close_r+0x1a>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	200008b4 	.word	0x200008b4

0800c190 <__sflush_r>:
 800c190:	898a      	ldrh	r2, [r1, #12]
 800c192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c196:	4605      	mov	r5, r0
 800c198:	0710      	lsls	r0, r2, #28
 800c19a:	460c      	mov	r4, r1
 800c19c:	d458      	bmi.n	800c250 <__sflush_r+0xc0>
 800c19e:	684b      	ldr	r3, [r1, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	dc05      	bgt.n	800c1b0 <__sflush_r+0x20>
 800c1a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dc02      	bgt.n	800c1b0 <__sflush_r+0x20>
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d0f9      	beq.n	800c1aa <__sflush_r+0x1a>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1bc:	682f      	ldr	r7, [r5, #0]
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	d032      	beq.n	800c228 <__sflush_r+0x98>
 800c1c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	075a      	lsls	r2, r3, #29
 800c1c8:	d505      	bpl.n	800c1d6 <__sflush_r+0x46>
 800c1ca:	6863      	ldr	r3, [r4, #4]
 800c1cc:	1ac0      	subs	r0, r0, r3
 800c1ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1d0:	b10b      	cbz	r3, 800c1d6 <__sflush_r+0x46>
 800c1d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1d4:	1ac0      	subs	r0, r0, r3
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	4602      	mov	r2, r0
 800c1da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1dc:	6a21      	ldr	r1, [r4, #32]
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b0      	blx	r6
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	d106      	bne.n	800c1f6 <__sflush_r+0x66>
 800c1e8:	6829      	ldr	r1, [r5, #0]
 800c1ea:	291d      	cmp	r1, #29
 800c1ec:	d82c      	bhi.n	800c248 <__sflush_r+0xb8>
 800c1ee:	4a2a      	ldr	r2, [pc, #168]	; (800c298 <__sflush_r+0x108>)
 800c1f0:	40ca      	lsrs	r2, r1
 800c1f2:	07d6      	lsls	r6, r2, #31
 800c1f4:	d528      	bpl.n	800c248 <__sflush_r+0xb8>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	6062      	str	r2, [r4, #4]
 800c1fa:	04d9      	lsls	r1, r3, #19
 800c1fc:	6922      	ldr	r2, [r4, #16]
 800c1fe:	6022      	str	r2, [r4, #0]
 800c200:	d504      	bpl.n	800c20c <__sflush_r+0x7c>
 800c202:	1c42      	adds	r2, r0, #1
 800c204:	d101      	bne.n	800c20a <__sflush_r+0x7a>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b903      	cbnz	r3, 800c20c <__sflush_r+0x7c>
 800c20a:	6560      	str	r0, [r4, #84]	; 0x54
 800c20c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c20e:	602f      	str	r7, [r5, #0]
 800c210:	2900      	cmp	r1, #0
 800c212:	d0ca      	beq.n	800c1aa <__sflush_r+0x1a>
 800c214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c218:	4299      	cmp	r1, r3
 800c21a:	d002      	beq.n	800c222 <__sflush_r+0x92>
 800c21c:	4628      	mov	r0, r5
 800c21e:	f000 f8fb 	bl	800c418 <_free_r>
 800c222:	2000      	movs	r0, #0
 800c224:	6360      	str	r0, [r4, #52]	; 0x34
 800c226:	e7c1      	b.n	800c1ac <__sflush_r+0x1c>
 800c228:	6a21      	ldr	r1, [r4, #32]
 800c22a:	2301      	movs	r3, #1
 800c22c:	4628      	mov	r0, r5
 800c22e:	47b0      	blx	r6
 800c230:	1c41      	adds	r1, r0, #1
 800c232:	d1c7      	bne.n	800c1c4 <__sflush_r+0x34>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0c4      	beq.n	800c1c4 <__sflush_r+0x34>
 800c23a:	2b1d      	cmp	r3, #29
 800c23c:	d001      	beq.n	800c242 <__sflush_r+0xb2>
 800c23e:	2b16      	cmp	r3, #22
 800c240:	d101      	bne.n	800c246 <__sflush_r+0xb6>
 800c242:	602f      	str	r7, [r5, #0]
 800c244:	e7b1      	b.n	800c1aa <__sflush_r+0x1a>
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	e7ad      	b.n	800c1ac <__sflush_r+0x1c>
 800c250:	690f      	ldr	r7, [r1, #16]
 800c252:	2f00      	cmp	r7, #0
 800c254:	d0a9      	beq.n	800c1aa <__sflush_r+0x1a>
 800c256:	0793      	lsls	r3, r2, #30
 800c258:	680e      	ldr	r6, [r1, #0]
 800c25a:	bf08      	it	eq
 800c25c:	694b      	ldreq	r3, [r1, #20]
 800c25e:	600f      	str	r7, [r1, #0]
 800c260:	bf18      	it	ne
 800c262:	2300      	movne	r3, #0
 800c264:	eba6 0807 	sub.w	r8, r6, r7
 800c268:	608b      	str	r3, [r1, #8]
 800c26a:	f1b8 0f00 	cmp.w	r8, #0
 800c26e:	dd9c      	ble.n	800c1aa <__sflush_r+0x1a>
 800c270:	6a21      	ldr	r1, [r4, #32]
 800c272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c274:	4643      	mov	r3, r8
 800c276:	463a      	mov	r2, r7
 800c278:	4628      	mov	r0, r5
 800c27a:	47b0      	blx	r6
 800c27c:	2800      	cmp	r0, #0
 800c27e:	dc06      	bgt.n	800c28e <__sflush_r+0xfe>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c286:	81a3      	strh	r3, [r4, #12]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e78e      	b.n	800c1ac <__sflush_r+0x1c>
 800c28e:	4407      	add	r7, r0
 800c290:	eba8 0800 	sub.w	r8, r8, r0
 800c294:	e7e9      	b.n	800c26a <__sflush_r+0xda>
 800c296:	bf00      	nop
 800c298:	20400001 	.word	0x20400001

0800c29c <_fflush_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	690b      	ldr	r3, [r1, #16]
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	b913      	cbnz	r3, 800c2ac <_fflush_r+0x10>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	b118      	cbz	r0, 800c2b6 <_fflush_r+0x1a>
 800c2ae:	6983      	ldr	r3, [r0, #24]
 800c2b0:	b90b      	cbnz	r3, 800c2b6 <_fflush_r+0x1a>
 800c2b2:	f7ff fa4f 	bl	800b754 <__sinit>
 800c2b6:	4b14      	ldr	r3, [pc, #80]	; (800c308 <_fflush_r+0x6c>)
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	d11b      	bne.n	800c2f4 <_fflush_r+0x58>
 800c2bc:	686c      	ldr	r4, [r5, #4]
 800c2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0ef      	beq.n	800c2a6 <_fflush_r+0xa>
 800c2c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2c8:	07d0      	lsls	r0, r2, #31
 800c2ca:	d404      	bmi.n	800c2d6 <_fflush_r+0x3a>
 800c2cc:	0599      	lsls	r1, r3, #22
 800c2ce:	d402      	bmi.n	800c2d6 <_fflush_r+0x3a>
 800c2d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2d2:	f7ff fadd 	bl	800b890 <__retarget_lock_acquire_recursive>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f7ff ff59 	bl	800c190 <__sflush_r>
 800c2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e0:	07da      	lsls	r2, r3, #31
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	d4e0      	bmi.n	800c2a8 <_fflush_r+0xc>
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	059b      	lsls	r3, r3, #22
 800c2ea:	d4dd      	bmi.n	800c2a8 <_fflush_r+0xc>
 800c2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ee:	f7ff fad0 	bl	800b892 <__retarget_lock_release_recursive>
 800c2f2:	e7d9      	b.n	800c2a8 <_fflush_r+0xc>
 800c2f4:	4b05      	ldr	r3, [pc, #20]	; (800c30c <_fflush_r+0x70>)
 800c2f6:	429c      	cmp	r4, r3
 800c2f8:	d101      	bne.n	800c2fe <_fflush_r+0x62>
 800c2fa:	68ac      	ldr	r4, [r5, #8]
 800c2fc:	e7df      	b.n	800c2be <_fflush_r+0x22>
 800c2fe:	4b04      	ldr	r3, [pc, #16]	; (800c310 <_fflush_r+0x74>)
 800c300:	429c      	cmp	r4, r3
 800c302:	bf08      	it	eq
 800c304:	68ec      	ldreq	r4, [r5, #12]
 800c306:	e7da      	b.n	800c2be <_fflush_r+0x22>
 800c308:	0800c5a0 	.word	0x0800c5a0
 800c30c:	0800c5c0 	.word	0x0800c5c0
 800c310:	0800c580 	.word	0x0800c580

0800c314 <_lseek_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	; (800c334 <_lseek_r+0x20>)
 800c318:	4604      	mov	r4, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	602a      	str	r2, [r5, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f7f5 fe72 	bl	800200c <_lseek>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_lseek_r+0x1e>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_lseek_r+0x1e>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	200008b4 	.word	0x200008b4

0800c338 <__swhatbuf_r>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	460e      	mov	r6, r1
 800c33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c340:	2900      	cmp	r1, #0
 800c342:	b096      	sub	sp, #88	; 0x58
 800c344:	4614      	mov	r4, r2
 800c346:	461d      	mov	r5, r3
 800c348:	da07      	bge.n	800c35a <__swhatbuf_r+0x22>
 800c34a:	2300      	movs	r3, #0
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	89b3      	ldrh	r3, [r6, #12]
 800c350:	061a      	lsls	r2, r3, #24
 800c352:	d410      	bmi.n	800c376 <__swhatbuf_r+0x3e>
 800c354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c358:	e00e      	b.n	800c378 <__swhatbuf_r+0x40>
 800c35a:	466a      	mov	r2, sp
 800c35c:	f000 f8be 	bl	800c4dc <_fstat_r>
 800c360:	2800      	cmp	r0, #0
 800c362:	dbf2      	blt.n	800c34a <__swhatbuf_r+0x12>
 800c364:	9a01      	ldr	r2, [sp, #4]
 800c366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c36a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c36e:	425a      	negs	r2, r3
 800c370:	415a      	adcs	r2, r3
 800c372:	602a      	str	r2, [r5, #0]
 800c374:	e7ee      	b.n	800c354 <__swhatbuf_r+0x1c>
 800c376:	2340      	movs	r3, #64	; 0x40
 800c378:	2000      	movs	r0, #0
 800c37a:	6023      	str	r3, [r4, #0]
 800c37c:	b016      	add	sp, #88	; 0x58
 800c37e:	bd70      	pop	{r4, r5, r6, pc}

0800c380 <__smakebuf_r>:
 800c380:	898b      	ldrh	r3, [r1, #12]
 800c382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c384:	079d      	lsls	r5, r3, #30
 800c386:	4606      	mov	r6, r0
 800c388:	460c      	mov	r4, r1
 800c38a:	d507      	bpl.n	800c39c <__smakebuf_r+0x1c>
 800c38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	6123      	str	r3, [r4, #16]
 800c394:	2301      	movs	r3, #1
 800c396:	6163      	str	r3, [r4, #20]
 800c398:	b002      	add	sp, #8
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	ab01      	add	r3, sp, #4
 800c39e:	466a      	mov	r2, sp
 800c3a0:	f7ff ffca 	bl	800c338 <__swhatbuf_r>
 800c3a4:	9900      	ldr	r1, [sp, #0]
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f7ff fa73 	bl	800b894 <_malloc_r>
 800c3ae:	b948      	cbnz	r0, 800c3c4 <__smakebuf_r+0x44>
 800c3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b4:	059a      	lsls	r2, r3, #22
 800c3b6:	d4ef      	bmi.n	800c398 <__smakebuf_r+0x18>
 800c3b8:	f023 0303 	bic.w	r3, r3, #3
 800c3bc:	f043 0302 	orr.w	r3, r3, #2
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	e7e3      	b.n	800c38c <__smakebuf_r+0xc>
 800c3c4:	4b0d      	ldr	r3, [pc, #52]	; (800c3fc <__smakebuf_r+0x7c>)
 800c3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	6020      	str	r0, [r4, #0]
 800c3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	9b00      	ldr	r3, [sp, #0]
 800c3d4:	6163      	str	r3, [r4, #20]
 800c3d6:	9b01      	ldr	r3, [sp, #4]
 800c3d8:	6120      	str	r0, [r4, #16]
 800c3da:	b15b      	cbz	r3, 800c3f4 <__smakebuf_r+0x74>
 800c3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f000 f88d 	bl	800c500 <_isatty_r>
 800c3e6:	b128      	cbz	r0, 800c3f4 <__smakebuf_r+0x74>
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	f023 0303 	bic.w	r3, r3, #3
 800c3ee:	f043 0301 	orr.w	r3, r3, #1
 800c3f2:	81a3      	strh	r3, [r4, #12]
 800c3f4:	89a0      	ldrh	r0, [r4, #12]
 800c3f6:	4305      	orrs	r5, r0
 800c3f8:	81a5      	strh	r5, [r4, #12]
 800c3fa:	e7cd      	b.n	800c398 <__smakebuf_r+0x18>
 800c3fc:	0800b6ed 	.word	0x0800b6ed

0800c400 <__malloc_lock>:
 800c400:	4801      	ldr	r0, [pc, #4]	; (800c408 <__malloc_lock+0x8>)
 800c402:	f7ff ba45 	b.w	800b890 <__retarget_lock_acquire_recursive>
 800c406:	bf00      	nop
 800c408:	200008ac 	.word	0x200008ac

0800c40c <__malloc_unlock>:
 800c40c:	4801      	ldr	r0, [pc, #4]	; (800c414 <__malloc_unlock+0x8>)
 800c40e:	f7ff ba40 	b.w	800b892 <__retarget_lock_release_recursive>
 800c412:	bf00      	nop
 800c414:	200008ac 	.word	0x200008ac

0800c418 <_free_r>:
 800c418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c41a:	2900      	cmp	r1, #0
 800c41c:	d048      	beq.n	800c4b0 <_free_r+0x98>
 800c41e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c422:	9001      	str	r0, [sp, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	f1a1 0404 	sub.w	r4, r1, #4
 800c42a:	bfb8      	it	lt
 800c42c:	18e4      	addlt	r4, r4, r3
 800c42e:	f7ff ffe7 	bl	800c400 <__malloc_lock>
 800c432:	4a20      	ldr	r2, [pc, #128]	; (800c4b4 <_free_r+0x9c>)
 800c434:	9801      	ldr	r0, [sp, #4]
 800c436:	6813      	ldr	r3, [r2, #0]
 800c438:	4615      	mov	r5, r2
 800c43a:	b933      	cbnz	r3, 800c44a <_free_r+0x32>
 800c43c:	6063      	str	r3, [r4, #4]
 800c43e:	6014      	str	r4, [r2, #0]
 800c440:	b003      	add	sp, #12
 800c442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c446:	f7ff bfe1 	b.w	800c40c <__malloc_unlock>
 800c44a:	42a3      	cmp	r3, r4
 800c44c:	d90b      	bls.n	800c466 <_free_r+0x4e>
 800c44e:	6821      	ldr	r1, [r4, #0]
 800c450:	1862      	adds	r2, r4, r1
 800c452:	4293      	cmp	r3, r2
 800c454:	bf04      	itt	eq
 800c456:	681a      	ldreq	r2, [r3, #0]
 800c458:	685b      	ldreq	r3, [r3, #4]
 800c45a:	6063      	str	r3, [r4, #4]
 800c45c:	bf04      	itt	eq
 800c45e:	1852      	addeq	r2, r2, r1
 800c460:	6022      	streq	r2, [r4, #0]
 800c462:	602c      	str	r4, [r5, #0]
 800c464:	e7ec      	b.n	800c440 <_free_r+0x28>
 800c466:	461a      	mov	r2, r3
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	b10b      	cbz	r3, 800c470 <_free_r+0x58>
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	d9fa      	bls.n	800c466 <_free_r+0x4e>
 800c470:	6811      	ldr	r1, [r2, #0]
 800c472:	1855      	adds	r5, r2, r1
 800c474:	42a5      	cmp	r5, r4
 800c476:	d10b      	bne.n	800c490 <_free_r+0x78>
 800c478:	6824      	ldr	r4, [r4, #0]
 800c47a:	4421      	add	r1, r4
 800c47c:	1854      	adds	r4, r2, r1
 800c47e:	42a3      	cmp	r3, r4
 800c480:	6011      	str	r1, [r2, #0]
 800c482:	d1dd      	bne.n	800c440 <_free_r+0x28>
 800c484:	681c      	ldr	r4, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	6053      	str	r3, [r2, #4]
 800c48a:	4421      	add	r1, r4
 800c48c:	6011      	str	r1, [r2, #0]
 800c48e:	e7d7      	b.n	800c440 <_free_r+0x28>
 800c490:	d902      	bls.n	800c498 <_free_r+0x80>
 800c492:	230c      	movs	r3, #12
 800c494:	6003      	str	r3, [r0, #0]
 800c496:	e7d3      	b.n	800c440 <_free_r+0x28>
 800c498:	6825      	ldr	r5, [r4, #0]
 800c49a:	1961      	adds	r1, r4, r5
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf04      	itt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	bf04      	itt	eq
 800c4a8:	1949      	addeq	r1, r1, r5
 800c4aa:	6021      	streq	r1, [r4, #0]
 800c4ac:	6054      	str	r4, [r2, #4]
 800c4ae:	e7c7      	b.n	800c440 <_free_r+0x28>
 800c4b0:	b003      	add	sp, #12
 800c4b2:	bd30      	pop	{r4, r5, pc}
 800c4b4:	20000094 	.word	0x20000094

0800c4b8 <_read_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	; (800c4d8 <_read_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f5 fd5c 	bl	8001f84 <_read>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_read_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_read_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	200008b4 	.word	0x200008b4

0800c4dc <_fstat_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d07      	ldr	r5, [pc, #28]	; (800c4fc <_fstat_r+0x20>)
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	f7f5 fd74 	bl	8001fd6 <_fstat>
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	d102      	bne.n	800c4f8 <_fstat_r+0x1c>
 800c4f2:	682b      	ldr	r3, [r5, #0]
 800c4f4:	b103      	cbz	r3, 800c4f8 <_fstat_r+0x1c>
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
 800c4fa:	bf00      	nop
 800c4fc:	200008b4 	.word	0x200008b4

0800c500 <_isatty_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d06      	ldr	r5, [pc, #24]	; (800c51c <_isatty_r+0x1c>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f5 fd73 	bl	8001ff6 <_isatty>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_isatty_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_isatty_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	200008b4 	.word	0x200008b4

0800c520 <_init>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr

0800c52c <_fini>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	bf00      	nop
 800c530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c532:	bc08      	pop	{r3}
 800c534:	469e      	mov	lr, r3
 800c536:	4770      	bx	lr
