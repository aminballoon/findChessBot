
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed38  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800efd8  0800efd8  0001efd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f5d4  0800f5d4  0001f5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f5dc  0800f5dc  0001f5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800f5e4  0800f5e4  0001f5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  0800f5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  240001f0  0800f7dc  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a68  0800f7dc  00020a68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000300e0  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044ed  00000000  00000000  000502fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  000547f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001400  00000000  00000000  00055d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc59  00000000  00000000  00057128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001da7e  00000000  00000000  00093d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d21b  00000000  00000000  000b17ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021ea1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006914  00000000  00000000  0021ea70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800efc0 	.word	0x0800efc0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800efc0 	.word	0x0800efc0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f009 fbde 	bl	8009e9c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f009 fc6b 	bl	8009fc8 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	74da      	strb	r2, [r3, #19]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c9b      	ldrb	r3, [r3, #18]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7cdb      	ldrb	r3, [r3, #19]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 50.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80008f4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f832 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	42480000 	.word	0x42480000
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f008 f8ab 	bl	8008a7c <HAL_TIM_PWM_Start>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000930:	b580      	push	{r7, lr}
 8000932:	ed2d 8b02 	vpush	{d8}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a04 	vldr	s15, [r3, #16]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff ff6d 	bl	800082e <_ZSt4fabsf>
 8000954:	eeb0 7a40 	vmov.f32	s14, s0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a05 	vldr	s15, [r3, #20]
 800095e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	bf94      	ite	ls
 8000968:	2301      	movls	r3, #1
 800096a:	2300      	movhi	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e01b      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f7ff ff53 	bl	800082e <_ZSt4fabsf>
 8000988:	eeb0 7a40 	vmov.f32	s14, s0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	bfac      	ite	ge
 800099c:	2301      	movge	r3, #1
 800099e:	2300      	movlt	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 80009bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c4:	f340 80db 	ble.w	8000b7e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	f005 fa77 	bl	8005ec8 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	3301      	adds	r3, #1
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80009f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a04:	eeb0 0a67 	vmov.f32	s0, s15
 8000a08:	f7ff ff21 	bl	800084e <_ZSt5roundf>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1a:	ee17 2a90 	vmov	r2, s15
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d113      	bne.n	8000a50 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa2a 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a48:	ee17 2a90 	vmov	r2, s15
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000a4e:	e1de      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d113      	bne.n	8000a80 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa12 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a78:	ee17 2a90 	vmov	r2, s15
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a7e:	e1c6      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d113      	bne.n	8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f9fa 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	ee17 2a90 	vmov	r2, s15
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000aae:	e1ae      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d113      	bne.n	8000ae0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f9e2 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aca:	eeb0 7b40 	vmov.f64	d7, d0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	ee17 2a90 	vmov	r2, s15
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ade:	e196      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d113      	bne.n	8000b10 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f9ca 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000afa:	eeb0 7b40 	vmov.f64	d7, d0
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b0e:	e17e      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b14      	cmp	r3, #20
 8000b16:	d113      	bne.n	8000b40 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f9b2 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b3e:	e166      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
			this->stepper_htim->Instance->CCR1 = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b7c:	e147      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
	} else if (this->frequency < 0.001f) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b84:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8000b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	f140 80e3 	bpl.w	8000d5a <_ZN7Stepper19StepperSetFrequencyEf+0x42a>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6898      	ldr	r0, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f005 f991 	bl	8005ec8 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	3301      	adds	r3, #1
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bbc:	f7ff fe37 	bl	800082e <_ZSt4fabsf>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bc8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f7ff fe37 	bl	800084e <_ZSt5roundf>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bee:	ee17 2a90 	vmov	r2, s15
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d113      	bne.n	8000c24 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f940 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c22:	e0f4      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d117      	bne.n	8000c5c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f928 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c4c:	ee17 2a90 	vmov	r2, s15
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c52:	e0dc      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
 8000c54:	3a83126f 	.word	0x3a83126f
 8000c58:	4d64e1c0 	.word	0x4d64e1c0
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d113      	bne.n	8000c8c <_ZN7Stepper19StepperSetFrequencyEf+0x35c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f90c 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c76:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c84:	ee17 2a90 	vmov	r2, s15
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c8a:	e0c0      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b0c      	cmp	r3, #12
 8000c92:	d113      	bne.n	8000cbc <_ZN7Stepper19StepperSetFrequencyEf+0x38c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000c9e:	085b      	lsrs	r3, r3, #1
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f8f4 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cb4:	ee17 2a90 	vmov	r2, s15
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cba:	e0a8      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b10      	cmp	r3, #16
 8000cc2:	d113      	bne.n	8000cec <_ZN7Stepper19StepperSetFrequencyEf+0x3bc>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f8dc 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cd6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce4:	ee17 2a90 	vmov	r2, s15
 8000ce8:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000cea:	e090      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b14      	cmp	r3, #20
 8000cf2:	d113      	bne.n	8000d1c <_ZN7Stepper19StepperSetFrequencyEf+0x3ec>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000cfe:	085b      	lsrs	r3, r3, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8c4 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d06:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d14:	ee17 2a90 	vmov	r2, s15
 8000d18:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d1a:	e078      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d58:	e059      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <_ZN7Stepper19StepperSetFrequencyEf+0x43e>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d6c:	e04f      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d105      	bne.n	8000d82 <_ZN7Stepper19StepperSetFrequencyEf+0x452>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d80:	e045      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d105      	bne.n	8000d96 <_ZN7Stepper19StepperSetFrequencyEf+0x466>
			this->stepper_htim->Instance->CCR3 = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d94:	e03b      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b0c      	cmp	r3, #12
 8000d9c:	d105      	bne.n	8000daa <_ZN7Stepper19StepperSetFrequencyEf+0x47a>
			this->stepper_htim->Instance->CCR4 = 0;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000da8:	e031      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d105      	bne.n	8000dbe <_ZN7Stepper19StepperSetFrequencyEf+0x48e>
			this->stepper_htim->Instance->CCR5 = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000dbc:	e027      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b14      	cmp	r3, #20
 8000dc4:	d105      	bne.n	8000dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a2>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dd0:	e01d      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
			this->stepper_htim->Instance->CCR1 = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	ecbd 8b02 	vpop	{d8}
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop

08000e1c <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e28:	ed97 0a00 	vldr	s0, [r7]
 8000e2c:	f7ff fcff 	bl	800082e <_ZSt4fabsf>
 8000e30:	eef0 7a40 	vmov.f32	s15, s0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e56:	eeb0 0b47 	vmov.f64	d0, d7
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffe5 	bl	8000e42 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e78:	eeb0 7b40 	vmov.f64	d7, d0
 8000e7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ea0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
};
typedef struct joint_state joint_config;
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	}
	if (htim == &htim12){	// 2000 Hz

	}
	if (htim == &htim6) { 	// 200 Hz
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a53      	ldr	r2, [pc, #332]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 8095 	bne.w	8000fec <HAL_TIM_PeriodElapsedCallback+0x13c>
		encoderJ1.AMT21_Read();
 8000ec2:	4852      	ldr	r0, [pc, #328]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ec4:	f7ff fbff 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8000ec8:	4850      	ldr	r0, [pc, #320]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000eca:	f7ff fc2b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ed4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x3c>
			posJ1 = encoderJ1.getAngPos180();
 8000ede:	484b      	ldr	r0, [pc, #300]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ee0:	f7ff fc84 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000eea:	801a      	strh	r2, [r3, #0]
////	    float Goal_position_x = C0x + (C2x*t_2) - (C3x*t_3);
////	    float Goal_position_y = C0y + (C2y*t_2) - (C3y*t_3);
//	    Goal_velocity_q1 = (2.0*C2_q1*t) - (3.0 * C3_q1*t_2);
//	    Goal_velocity_q3 = (2.0*C2_q3*t) - (3.0 * C3_q3*t_2);
//
		t = t + sample_time;
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000eee:	ed93 7a00 	vldr	s14, [r3]
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ef4:	edd3 7a00 	vldr	s15, [r3]
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000efe:	edc3 7a00 	vstr	s15, [r3]
		if (t>=8.0)
 8000f02:	4b45      	ldr	r3, [pc, #276]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	bfac      	ite	ge
 8000f16:	2301      	movge	r3, #1
 8000f18:	2300      	movlt	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			t = 0.0;
 8000f20:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
		}

		Goal_velocity_q1 = sin(0.785 * t) * 3000;
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f2a:	edd3 7a00 	vldr	s15, [r3]
 8000f2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f32:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000ff8 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f3a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f3e:	f00a fdef 	bl	800bb20 <sin>
 8000f42:	eeb0 7b40 	vmov.f64	d7, d0
 8000f46:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001000 <HAL_TIM_PeriodElapsedCallback+0x150>
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
		Goal_velocity_q3 = sin(0.785 * t) * 3000;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f62:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000ff8 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f6a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f6e:	f00a fdd7 	bl	800bb20 <sin>
 8000f72:	eeb0 7b40 	vmov.f64	d7, d0
 8000f76:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001000 <HAL_TIM_PeriodElapsedCallback+0x150>
 8000f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]

		const float KP_J1 = 1.4;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f8a:	60fb      	str	r3, [r7, #12]
		const float Kp_J3 = 1;
 8000f8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f90:	60bb      	str	r3, [r7, #8]
//		setpointJ3 = findchessbot_joint_state.q3 * 2607;
//		b1 = findchessbot_joint_state.q1;
//		b2 = findchessbot_joint_state.q2;
//		b3 = findchessbot_joint_state.q3;
//		b4 = findchessbot_joint_state.q4;
		setpointJ1 = Goal_velocity_q1;
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9c:	ee17 2a90 	vmov	r2, s15
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fa2:	601a      	str	r2, [r3, #0]
//		setpointJ3 = Goal_velocity_q3;
		errorJ1 = posJ1 - setpointJ1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
//		errorJ3 = posJ3 - setpointJ3 ;
//
		uJ1 = (KP_J1 * errorJ1);
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001034 <HAL_TIM_PeriodElapsedCallback+0x184>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
//
		#ifdef __cplusplus
//		stepperJ1.StepperSetFrequency(300.0f);
//		if (uJ1 > 0.0)
//		{
		stepperJ1.StepperSetFrequency(uJ1 + 100.0);
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800103c <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	4816      	ldr	r0, [pc, #88]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fe8:	f7ff fca2 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
//		{
//		stepperJ3.StepperSetFrequency(0);
//		}
		#endif
	}
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	51eb851f 	.word	0x51eb851f
 8000ffc:	3fe91eb8 	.word	0x3fe91eb8
 8001000:	00000000 	.word	0x00000000
 8001004:	40a77000 	.word	0x40a77000
 8001008:	24000434 	.word	0x24000434
 800100c:	240009b8 	.word	0x240009b8
 8001010:	24000a1c 	.word	0x24000a1c
 8001014:	24000a1e 	.word	0x24000a1e
 8001018:	24000a2c 	.word	0x24000a2c
 800101c:	2400000c 	.word	0x2400000c
 8001020:	24000a40 	.word	0x24000a40
 8001024:	24000a44 	.word	0x24000a44
 8001028:	3fb33333 	.word	0x3fb33333
 800102c:	24000a20 	.word	0x24000a20
 8001030:	24000a24 	.word	0x24000a24
 8001034:	3fb33333 	.word	0x3fb33333
 8001038:	24000a28 	.word	0x24000a28
 800103c:	42c80000 	.word	0x42c80000
 8001040:	240009cc 	.word	0x240009cc

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f002 f8c6 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f874 	bl	8001138 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 ff70 	bl	8001f34 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001054:	f000 ff2e 	bl	8001eb4 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001058:	f000 fecc 	bl	8001df4 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 800105c:	f000 fa44 	bl	80014e8 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8001060:	f000 fe02 	bl	8001c68 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8001064:	f000 fb62 	bl	800172c <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8001068:	f000 f918 	bl	800129c <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 800106c:	f000 f970 	bl	8001350 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001070:	f000 faca 	bl	8001608 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8001074:	f000 fbec 	bl	8001850 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8001078:	f000 fd34 	bl	8001ae4 <_ZL13MX_TIM15_Initv>
  MX_CRC_Init();
 800107c:	f000 f8e6 	bl	800124c <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8001080:	f000 fe56 	bl	8001d30 <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 8001084:	f000 fc42 	bl	800190c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001088:	f000 fc80 	bl	800198c <_ZL12MX_TIM7_Initv>
  MX_TIM12_Init();
 800108c:	f000 fcbe 	bl	8001a0c <_ZL13MX_TIM12_Initv>
  MX_TIM13_Init();
 8001090:	f000 fd00 	bl	8001a94 <_ZL13MX_TIM13_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2101      	movs	r1, #1
 8001098:	481e      	ldr	r0, [pc, #120]	; (8001114 <main+0xd0>)
 800109a:	f004 ff15 	bl	8005ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2102      	movs	r1, #2
 80010a2:	481d      	ldr	r0, [pc, #116]	; (8001118 <main+0xd4>)
 80010a4:	f004 ff10 	bl	8005ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	4819      	ldr	r0, [pc, #100]	; (8001114 <main+0xd0>)
 80010b0:	f004 ff0a 	bl	8005ec8 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.);
 80010b4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800111c <main+0xd8>
 80010b8:	4819      	ldr	r0, [pc, #100]	; (8001120 <main+0xdc>)
 80010ba:	f7ff fc39 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 80010be:	2110      	movs	r1, #16
 80010c0:	4817      	ldr	r0, [pc, #92]	; (8001120 <main+0xdc>)
 80010c2:	f7ff fecf 	bl	8000e64 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 80010c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010ca:	4815      	ldr	r0, [pc, #84]	; (8001120 <main+0xdc>)
 80010cc:	f7ff fea6 	bl	8000e1c <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <main+0xdc>)
 80010d2:	f7ff fc1c 	bl	800090e <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.);
 80010d6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800111c <main+0xd8>
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <main+0xe0>)
 80010dc:	f7ff fc28 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80010e0:	2110      	movs	r1, #16
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <main+0xe0>)
 80010e4:	f7ff febe 	bl	8000e64 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 80010e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <main+0xe0>)
 80010ee:	f7ff fe95 	bl	8000e1c <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <main+0xe0>)
 80010f4:	f7ff fc0b 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <main+0xe4>)
 80010fa:	f007 fbe5 	bl	80088c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <main+0xe8>)
 8001100:	f007 fbe2 	bl	80088c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <main+0xec>)
 8001106:	f007 fbdf 	bl	80088c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <main+0xf0>)
 800110c:	f007 fbdc 	bl	80088c8 <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001110:	e7fe      	b.n	8001110 <main+0xcc>
 8001112:	bf00      	nop
 8001114:	58020400 	.word	0x58020400
 8001118:	58021000 	.word	0x58021000
 800111c:	00000000 	.word	0x00000000
 8001120:	240009cc 	.word	0x240009cc
 8001124:	240009f4 	.word	0x240009f4
 8001128:	240003e8 	.word	0x240003e8
 800112c:	24000434 	.word	0x24000434
 8001130:	24000480 	.word	0x24000480
 8001134:	240004cc 	.word	0x240004cc

08001138 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09c      	sub	sp, #112	; 0x70
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	224c      	movs	r2, #76	; 0x4c
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00b faf2 	bl	800c730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2220      	movs	r2, #32
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00b faec 	bl	800c730 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001158:	2002      	movs	r0, #2
 800115a:	f004 fee9 	bl	8005f30 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <_Z18SystemClock_Configv+0x10c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a37      	ldr	r2, [pc, #220]	; (8001244 <_Z18SystemClock_Configv+0x10c>)
 8001168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <_Z18SystemClock_Configv+0x10c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <_Z18SystemClock_Configv+0x110>)
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <_Z18SystemClock_Configv+0x110>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <_Z18SystemClock_Configv+0x110>)
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <_Z18SystemClock_Configv+0x10c>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d000      	beq.n	80011aa <_Z18SystemClock_Configv+0x72>
 80011a8:	e7f2      	b.n	8001190 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011aa:	2302      	movs	r3, #2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80011c2:	233c      	movs	r3, #60	; 0x3c
 80011c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80011ca:	2306      	movs	r3, #6
 80011cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d2:	230c      	movs	r3, #12
 80011d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fede 	bl	8005fa4 <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80011f8:	f000 ffde 	bl	80021b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	233f      	movs	r3, #63	; 0x3f
 80011fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2303      	movs	r3, #3
 8001202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001208:	2308      	movs	r3, #8
 800120a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800121a:	2340      	movs	r3, #64	; 0x40
 800121c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f005 faea 	bl	80067fc <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001238:	f000 ffbe 	bl	80021b8 <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	3770      	adds	r7, #112	; 0x70
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024800 	.word	0x58024800
 8001248:	58000400 	.word	0x58000400

0800124c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <_ZL11MX_CRC_Initv+0x4c>)
 8001254:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 8001258:	2200      	movs	r2, #0
 800125a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 800125e:	2200      	movs	r2, #0
 8001260:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 8001270:	2201      	movs	r2, #1
 8001272:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <_ZL11MX_CRC_Initv+0x48>)
 8001276:	f002 f969 	bl	800354c <HAL_CRC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800128a:	f000 ff95 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2400020c 	.word	0x2400020c
 8001298:	58024c00 	.word	0x58024c00

0800129c <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012a2:	4a2a      	ldr	r2, [pc, #168]	; (800134c <_ZL12MX_SPI3_Initv+0xb0>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 800130e:	2200      	movs	r2, #0
 8001310:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 8001314:	2200      	movs	r2, #0
 8001316:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 800131a:	2200      	movs	r2, #0
 800131c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 8001320:	2200      	movs	r2, #0
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 8001326:	2200      	movs	r2, #0
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <_ZL12MX_SPI3_Initv+0xac>)
 800132c:	f007 f954 	bl	80085d8 <HAL_SPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001340:	f000 ff3a 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	24000230 	.word	0x24000230
 800134c:	40003c00 	.word	0x40003c00

08001350 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09a      	sub	sp, #104	; 0x68
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	222c      	movs	r2, #44	; 0x2c
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f00b f9d0 	bl	800c730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 8001392:	4a54      	ldr	r2, [pc, #336]	; (80014e4 <_ZL12MX_TIM1_Initv+0x194>)
 8001394:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8001396:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 8001398:	22c7      	movs	r2, #199	; 0xc7
 800139a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013a4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80013a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b0:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013bc:	4848      	ldr	r0, [pc, #288]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013be:	f007 fa2c 	bl	800881a <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80013d2:	f000 fef1 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e0:	4619      	mov	r1, r3
 80013e2:	483f      	ldr	r0, [pc, #252]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013e4:	f007 fe8c 	bl	8009100 <HAL_TIM_ConfigClockSource>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80013f8:	f000 fede 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fc:	4838      	ldr	r0, [pc, #224]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80013fe:	f007 fadb 	bl	80089b8 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001412:	f000 fed1 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001422:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001426:	4619      	mov	r1, r3
 8001428:	482d      	ldr	r0, [pc, #180]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 800142a:	f008 fbbd 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 800143e:	f000 febb 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001446:	f240 1339 	movw	r3, #313	; 0x139
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001464:	2204      	movs	r2, #4
 8001466:	4619      	mov	r1, r3
 8001468:	481d      	ldr	r0, [pc, #116]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 800146a:	f007 fd35 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 800147e:	f000 fe9b 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	480a      	ldr	r0, [pc, #40]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80014b8:	f008 fc04 	bl	8009cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 80014cc:	f000 fe74 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <_ZL12MX_TIM1_Initv+0x190>)
 80014d2:	f001 f925 	bl	8002720 <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3768      	adds	r7, #104	; 0x68
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	240002b8 	.word	0x240002b8
 80014e4:	40010000 	.word	0x40010000

080014e8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	; 0x38
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151a:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 800151c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 8001524:	22c7      	movs	r2, #199	; 0xc7
 8001526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 8001530:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001542:	4830      	ldr	r0, [pc, #192]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 8001544:	f007 f969 	bl	800881a <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001558:	f000 fe2e 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 800156a:	f007 fdc9 	bl	8009100 <HAL_TIM_ConfigClockSource>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 800157e:	f000 fe1b 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001582:	4820      	ldr	r0, [pc, #128]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 8001584:	f007 fa18 	bl	80089b8 <HAL_TIM_PWM_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001598:	f000 fe0e 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4816      	ldr	r0, [pc, #88]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 80015ac:	f008 fafc 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80015c0:	f000 fdfa 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80015c8:	f240 1339 	movw	r3, #313	; 0x139
 80015cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	2208      	movs	r2, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 80015de:	f007 fc7b 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80015f2:	f000 fde1 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <_ZL12MX_TIM2_Initv+0x11c>)
 80015f8:	f001 f892 	bl	8002720 <HAL_TIM_MspPostInit>

}
 80015fc:	bf00      	nop
 80015fe:	3738      	adds	r7, #56	; 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	24000304 	.word	0x24000304

08001608 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 800163c:	4a3a      	ldr	r2, [pc, #232]	; (8001728 <_ZL12MX_TIM3_Initv+0x120>)
 800163e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 8001642:	22c7      	movs	r2, #199	; 0xc7
 8001644:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 800164e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001652:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 8001662:	f007 f8da 	bl	800881a <HAL_TIM_Base_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001676:	f000 fd9f 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001684:	4619      	mov	r1, r3
 8001686:	4827      	ldr	r0, [pc, #156]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 8001688:	f007 fd3a 	bl	8009100 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 800169c:	f000 fd8c 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 80016a2:	f007 f989 	bl	80089b8 <HAL_TIM_PWM_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80016b6:	f000 fd7f 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 80016ca:	f008 fa6d 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80016de:	f000 fd6b 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	; 0x60
 80016e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80016e6:	f240 1339 	movw	r3, #313	; 0x139
 80016ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 80016fc:	f007 fbec 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001710:	f000 fd52 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <_ZL12MX_TIM3_Initv+0x11c>)
 8001716:	f001 f803 	bl	8002720 <HAL_TIM_MspPostInit>

}
 800171a:	bf00      	nop
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	24000350 	.word	0x24000350
 8001728:	40000400 	.word	0x40000400

0800172c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174c:	463b      	mov	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175e:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 8001760:	4a3a      	ldr	r2, [pc, #232]	; (800184c <_ZL12MX_TIM4_Initv+0x120>)
 8001762:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 8001766:	22c7      	movs	r2, #199	; 0xc7
 8001768:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 8001772:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001776:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001784:	4830      	ldr	r0, [pc, #192]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 8001786:	f007 f848 	bl	800881a <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 800179a:	f000 fd0d 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4827      	ldr	r0, [pc, #156]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 80017ac:	f007 fca8 	bl	8009100 <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80017c0:	f000 fcfa 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017c4:	4820      	ldr	r0, [pc, #128]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 80017c6:	f007 f8f7 	bl	80089b8 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80017da:	f000 fced 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4816      	ldr	r0, [pc, #88]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 80017ee:	f008 f9db 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8001802:	f000 fcd9 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2360      	movs	r3, #96	; 0x60
 8001808:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800180a:	f240 1339 	movw	r3, #313	; 0x139
 800180e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2208      	movs	r2, #8
 800181c:	4619      	mov	r1, r3
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 8001820:	f007 fb5a 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8001834:	f000 fcc0 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <_ZL12MX_TIM4_Initv+0x11c>)
 800183a:	f000 ff71 	bl	8002720 <HAL_TIM_MspPostInit>

}
 800183e:	bf00      	nop
 8001840:	3738      	adds	r7, #56	; 0x38
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2400039c 	.word	0x2400039c
 800184c:	40000800 	.word	0x40000800

08001850 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <_ZL12MX_TIM5_Initv+0xb8>)
 8001872:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 8001876:	22c7      	movs	r2, #199	; 0xc7
 8001878:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 8001882:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001886:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 8001896:	f006 ffc0 	bl	800881a <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 80018aa:	f000 fc85 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4812      	ldr	r0, [pc, #72]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 80018bc:	f007 fc20 	bl	8009100 <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf14      	ite	ne
 80018c6:	2301      	movne	r3, #1
 80018c8:	2300      	moveq	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 80018d0:	f000 fc72 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4808      	ldr	r0, [pc, #32]	; (8001904 <_ZL12MX_TIM5_Initv+0xb4>)
 80018e2:	f008 f961 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80018f6:	f000 fc5f 	bl	80021b8 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	240003e8 	.word	0x240003e8
 8001908:	40000c00 	.word	0x40000c00

0800190c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 800191e:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <_ZL12MX_TIM6_Initv+0x7c>)
 8001920:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 8001924:	22c7      	movs	r2, #199	; 0xc7
 8001926:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 8001930:	f241 726f 	movw	r2, #5999	; 0x176f
 8001934:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800193c:	4811      	ldr	r0, [pc, #68]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 800193e:	f006 ff6c 	bl	800881a <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001952:	f000 fc31 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <_ZL12MX_TIM6_Initv+0x78>)
 8001964:	f008 f920 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001978:	f000 fc1e 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	24000434 	.word	0x24000434
 8001988:	40001000 	.word	0x40001000

0800198c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 800199e:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <_ZL12MX_TIM7_Initv+0x7c>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 80019a4:	22c7      	movs	r2, #199	; 0xc7
 80019a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 80019b0:	f240 42af 	movw	r2, #1199	; 0x4af
 80019b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019bc:	4811      	ldr	r0, [pc, #68]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 80019be:	f006 ff2c 	bl	800881a <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 80019d2:	f000 fbf1 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <_ZL12MX_TIM7_Initv+0x78>)
 80019e4:	f008 f8e0 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80019f8:	f000 fbde 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	24000480 	.word	0x24000480
 8001a08:	40001400 	.word	0x40001400

08001a0c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a20:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <_ZL13MX_TIM12_Initv+0x84>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a26:	22c7      	movs	r2, #199	; 0xc7
 8001a28:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a32:	f240 2257 	movw	r2, #599	; 0x257
 8001a36:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a46:	f006 fee8 	bl	800881a <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 8001a5a:	f000 fbad 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <_ZL13MX_TIM12_Initv+0x80>)
 8001a6a:	f007 fb49 	bl	8009100 <HAL_TIM_ConfigClockSource>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8001a7e:	f000 fb9b 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	240004cc 	.word	0x240004cc
 8001a90:	40001800 	.word	0x40001800

08001a94 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <_ZL13MX_TIM13_Initv+0x4c>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001aa0:	22c7      	movs	r2, #199	; 0xc7
 8001aa2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001aac:	f240 2257 	movw	r2, #599	; 0x257
 8001ab0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001abe:	4807      	ldr	r0, [pc, #28]	; (8001adc <_ZL13MX_TIM13_Initv+0x48>)
 8001ac0:	f006 feab 	bl	800881a <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8001ad4:	f000 fb70 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	24000518 	.word	0x24000518
 8001ae0:	40001c00 	.word	0x40001c00

08001ae4 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09a      	sub	sp, #104	; 0x68
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	222c      	movs	r2, #44	; 0x2c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00a fe06 	bl	800c730 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b24:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b26:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <_ZL13MX_TIM15_Initv+0x180>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b2c:	22ef      	movs	r2, #239	; 0xef
 8001b2e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b38:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b3c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b48      	ldr	r3, [pc, #288]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b44:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4a:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b50:	4843      	ldr	r0, [pc, #268]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b52:	f006 fe62 	bl	800881a <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 8001b66:	f000 fb27 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b74:	4619      	mov	r1, r3
 8001b76:	483a      	ldr	r0, [pc, #232]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b78:	f007 fac2 	bl	8009100 <HAL_TIM_ConfigClockSource>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8001b8c:	f000 fb14 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b90:	4833      	ldr	r0, [pc, #204]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b92:	f006 ff11 	bl	80089b8 <HAL_TIM_PWM_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 8001ba6:	f000 fb07 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4829      	ldr	r0, [pc, #164]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001bba:	f007 fff5 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8001bce:	f000 faf3 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd2:	2360      	movs	r3, #96	; 0x60
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001bd6:	f240 1339 	movw	r3, #313	; 0x139
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4819      	ldr	r0, [pc, #100]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001bfa:	f007 f96d 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 8001c0e:	f000 fad3 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001c3a:	f008 f843 	bl	8009cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8001c4e:	f000 fab3 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <_ZL13MX_TIM15_Initv+0x17c>)
 8001c54:	f000 fd64 	bl	8002720 <HAL_TIM_MspPostInit>

}
 8001c58:	bf00      	nop
 8001c5a:	3768      	adds	r7, #104	; 0x68
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	24000564 	.word	0x24000564
 8001c64:	40014000 	.word	0x40014000

08001c68 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <_ZL13MX_UART4_Initv+0xc0>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c74:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <_ZL13MX_UART4_Initv+0xc4>)
 8001c76:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cae:	481d      	ldr	r0, [pc, #116]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001cb0:	f008 f8a4 	bl	8009dfc <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <_ZL13MX_UART4_Initv+0x60>
  {
    Error_Handler();
 8001cc4:	f000 fa78 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001cc8:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001ccc:	4815      	ldr	r0, [pc, #84]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001cce:	f009 fe5c 	bl	800b98a <HAL_UARTEx_SetTxFifoThreshold>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001ce2:	f000 fa69 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001ce6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001cea:	480e      	ldr	r0, [pc, #56]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001cec:	f009 fe8b 	bl	800ba06 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <_ZL13MX_UART4_Initv+0x9c>
  {
    Error_Handler();
 8001d00:	f000 fa5a 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001d04:	4807      	ldr	r0, [pc, #28]	; (8001d24 <_ZL13MX_UART4_Initv+0xbc>)
 8001d06:	f009 fdcc 	bl	800b8a2 <HAL_UARTEx_EnableFifoMode>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <_ZL13MX_UART4_Initv+0xb6>
  {
    Error_Handler();
 8001d1a:	f000 fa4d 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	240005b0 	.word	0x240005b0
 8001d28:	40004c00 	.word	0x40004c00
 8001d2c:	001e8480 	.word	0x001e8480

08001d30 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d36:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <_ZL13MX_UART7_Initv+0xc0>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d78:	481c      	ldr	r0, [pc, #112]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d7a:	f008 f83f 	bl	8009dfc <HAL_UART_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8001d8e:	f000 fa13 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001d92:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001d96:	4815      	ldr	r0, [pc, #84]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001d98:	f009 fdf7 	bl	800b98a <HAL_UARTEx_SetTxFifoThreshold>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8001dac:	f000 fa04 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001db0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001db6:	f009 fe26 	bl	800ba06 <HAL_UARTEx_SetRxFifoThreshold>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8001dca:	f000 f9f5 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <_ZL13MX_UART7_Initv+0xbc>)
 8001dd0:	f009 fd67 	bl	800b8a2 <HAL_UARTEx_EnableFifoMode>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8001de4:	f000 f9e8 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	24000640 	.word	0x24000640
 8001df0:	40007800 	.word	0x40007800

08001df4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3c:	481b      	ldr	r0, [pc, #108]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e3e:	f007 ffdd 	bl	8009dfc <HAL_UART_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001e52:	f000 f9b1 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e56:	2100      	movs	r1, #0
 8001e58:	4814      	ldr	r0, [pc, #80]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e5a:	f009 fd96 	bl	800b98a <HAL_UARTEx_SetTxFifoThreshold>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001e6e:	f000 f9a3 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e72:	2100      	movs	r1, #0
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e76:	f009 fdc6 	bl	800ba06 <HAL_UARTEx_SetRxFifoThreshold>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001e8a:	f000 f995 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e90:	f009 fd42 	bl	800b918 <HAL_UARTEx_DisableFifoMode>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001ea4:	f000 f988 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	240006d0 	.word	0x240006d0
 8001eb0:	40004800 	.word	0x40004800

08001eb4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <_ZL11MX_DMA_Initv+0x7c>)
 8001ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <_ZL11MX_DMA_Initv+0x7c>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <_ZL11MX_DMA_Initv+0x7c>)
 8001ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	200b      	movs	r0, #11
 8001ede:	f001 faf4 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ee2:	200b      	movs	r0, #11
 8001ee4:	f001 fb0b 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	200c      	movs	r0, #12
 8001eee:	f001 faec 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ef2:	200c      	movs	r0, #12
 8001ef4:	f001 fb03 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	200d      	movs	r0, #13
 8001efe:	f001 fae4 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001f02:	200d      	movs	r0, #13
 8001f04:	f001 fafb 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	200e      	movs	r0, #14
 8001f0e:	f001 fadc 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001f12:	200e      	movs	r0, #14
 8001f14:	f001 faf3 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	200f      	movs	r0, #15
 8001f1e:	f001 fad4 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f001 faeb 	bl	80034fe <HAL_NVIC_EnableIRQ>

}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	58024400 	.word	0x58024400

08001f34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4a:	4b8e      	ldr	r3, [pc, #568]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	4a8c      	ldr	r2, [pc, #560]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f52:	f043 0310 	orr.w	r3, r3, #16
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	4b86      	ldr	r3, [pc, #536]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	4a85      	ldr	r2, [pc, #532]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f78:	4b82      	ldr	r3, [pc, #520]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	4a7d      	ldr	r2, [pc, #500]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f96:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001faa:	4a76      	ldr	r2, [pc, #472]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb4:	4b73      	ldr	r3, [pc, #460]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b70      	ldr	r3, [pc, #448]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc8:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd2:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe6:	4a67      	ldr	r2, [pc, #412]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ffe:	4b61      	ldr	r3, [pc, #388]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8002000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002004:	4a5f      	ldr	r2, [pc, #380]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8002006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800200a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <_ZL12MX_GPIO_Initv+0x250>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800201c:	2200      	movs	r2, #0
 800201e:	f644 2121 	movw	r1, #18977	; 0x4a21
 8002022:	4859      	ldr	r0, [pc, #356]	; (8002188 <_ZL12MX_GPIO_Initv+0x254>)
 8002024:	f003 ff50 	bl	8005ec8 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f24c 0102 	movw	r1, #49154	; 0xc002
 800202e:	4857      	ldr	r0, [pc, #348]	; (800218c <_ZL12MX_GPIO_Initv+0x258>)
 8002030:	f003 ff4a 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203a:	4855      	ldr	r0, [pc, #340]	; (8002190 <_ZL12MX_GPIO_Initv+0x25c>)
 800203c:	f003 ff44 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002046:	4853      	ldr	r0, [pc, #332]	; (8002194 <_ZL12MX_GPIO_Initv+0x260>)
 8002048:	f003 ff3e 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002052:	4851      	ldr	r0, [pc, #324]	; (8002198 <_ZL12MX_GPIO_Initv+0x264>)
 8002054:	f003 ff38 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8002058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	4849      	ldr	r0, [pc, #292]	; (8002194 <_ZL12MX_GPIO_Initv+0x260>)
 8002070:	f003 fd7a 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002074:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002078:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	483e      	ldr	r0, [pc, #248]	; (8002188 <_ZL12MX_GPIO_Initv+0x254>)
 800208e:	f003 fd6b 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8002092:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002098:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800209c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4838      	ldr	r0, [pc, #224]	; (800218c <_ZL12MX_GPIO_Initv+0x258>)
 80020aa:	f003 fd5d 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80020ae:	f24c 0302 	movw	r3, #49154	; 0xc002
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4831      	ldr	r0, [pc, #196]	; (800218c <_ZL12MX_GPIO_Initv+0x258>)
 80020c8:	f003 fd4e 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80020cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	482a      	ldr	r0, [pc, #168]	; (8002190 <_ZL12MX_GPIO_Initv+0x25c>)
 80020e6:	f003 fd3f 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80020ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	4824      	ldr	r0, [pc, #144]	; (8002194 <_ZL12MX_GPIO_Initv+0x260>)
 8002104:	f003 fd30 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	481d      	ldr	r0, [pc, #116]	; (8002198 <_ZL12MX_GPIO_Initv+0x264>)
 8002122:	f003 fd21 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8002126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800212c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4817      	ldr	r0, [pc, #92]	; (800219c <_ZL12MX_GPIO_Initv+0x268>)
 800213e:	f003 fd13 	bl	8005b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8002142:	23c0      	movs	r3, #192	; 0xc0
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800214a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <_ZL12MX_GPIO_Initv+0x254>)
 8002158:	f003 fd06 	bl	8005b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2017      	movs	r0, #23
 8002162:	f001 f9b2 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002166:	2017      	movs	r0, #23
 8002168:	f001 f9c9 	bl	80034fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2028      	movs	r0, #40	; 0x28
 8002172:	f001 f9aa 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f001 f9c1 	bl	80034fe <HAL_NVIC_EnableIRQ>

}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58024400 	.word	0x58024400
 8002188:	58020400 	.word	0x58020400
 800218c:	58021000 	.word	0x58021000
 8002190:	58020c00 	.word	0x58020c00
 8002194:	58020800 	.word	0x58020800
 8002198:	58020000 	.word	0x58020000
 800219c:	58021800 	.word	0x58021800

080021a0 <HAL_GPIO_EXTI_Callback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]

}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2101      	movs	r1, #1
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <Error_Handler+0x2c>)
 80021c2:	f003 fe81 	bl	8005ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2102      	movs	r1, #2
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <Error_Handler+0x30>)
 80021cc:	f003 fe7c 	bl	8005ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <Error_Handler+0x2c>)
 80021d8:	f003 fe76 	bl	8005ec8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x28>
 80021e2:	bf00      	nop
 80021e4:	58020400 	.word	0x58020400
 80021e8:	58021000 	.word	0x58021000

080021ec <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 8096 	bne.w	800232a <_Z41__static_initialization_and_destruction_0ii+0x13e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	4293      	cmp	r3, r2
 8002206:	f040 8090 	bne.w	800232a <_Z41__static_initialization_and_destruction_0ii+0x13e>
AMT21 encoderJ1(&huart4, 0xD4);
 800220a:	22d4      	movs	r2, #212	; 0xd4
 800220c:	4951      	ldr	r1, [pc, #324]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800220e:	4852      	ldr	r0, [pc, #328]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8002210:	f7fe fa3a 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8002214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4b50      	ldr	r3, [pc, #320]	; (800235c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800221c:	2204      	movs	r2, #4
 800221e:	4950      	ldr	r1, [pc, #320]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8002220:	4850      	ldr	r0, [pc, #320]	; (8002364 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002222:	f7fe fb25 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002226:	2320      	movs	r3, #32
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 800222c:	2200      	movs	r2, #0
 800222e:	494f      	ldr	r1, [pc, #316]	; (800236c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8002230:	484f      	ldr	r0, [pc, #316]	; (8002370 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8002232:	f7fe fb1d 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = 3.0*C0_q1 / Time*Time;
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002240:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002244:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002252:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002256:	4b48      	ldr	r3, [pc, #288]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002260:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002264:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002268:	4b44      	ldr	r3, [pc, #272]	; (800237c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 800226a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = 2.0*C0_q1 / Time*Time*Time;
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002278:	ee37 5b07 	vadd.f64	d5, d7, d7
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002286:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002294:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002298:	4b37      	ldr	r3, [pc, #220]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022aa:	4b35      	ldr	r3, [pc, #212]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 80022ac:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = 3.0*C0_q3 / Time*Time;
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022ba:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80022be:	ee27 5b06 	vmul.f64	d5, d7, d6
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022cc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80022e4:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = 2.0*C0_q3 / Time*Time*Time;
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022f2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002300:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800230e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800231c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002320:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002326:	edc3 7a00 	vstr	s15, [r3]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <_Z41__static_initialization_and_destruction_0ii+0x160>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002336:	4293      	cmp	r3, r2
 8002338:	d108      	bne.n	800234c <_Z41__static_initialization_and_destruction_0ii+0x160>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 800233a:	480d      	ldr	r0, [pc, #52]	; (8002370 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800233c:	f7fe fadc 	bl	80008f8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002342:	f7fe fad9 	bl	80008f8 <_ZN7StepperD1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8002348:	f7fe f9b2 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	240005b0 	.word	0x240005b0
 8002358:	240009b8 	.word	0x240009b8
 800235c:	58021000 	.word	0x58021000
 8002360:	240002b8 	.word	0x240002b8
 8002364:	240009cc 	.word	0x240009cc
 8002368:	58020400 	.word	0x58020400
 800236c:	24000350 	.word	0x24000350
 8002370:	240009f4 	.word	0x240009f4
 8002374:	24000004 	.word	0x24000004
 8002378:	24000000 	.word	0x24000000
 800237c:	24000a30 	.word	0x24000a30
 8002380:	24000a34 	.word	0x24000a34
 8002384:	24000008 	.word	0x24000008
 8002388:	24000a38 	.word	0x24000a38
 800238c:	24000a3c 	.word	0x24000a3c

08002390 <_GLOBAL__sub_I_hcrc>:
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
 8002394:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff ff27 	bl	80021ec <_Z41__static_initialization_and_destruction_0ii>
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_GLOBAL__sub_D_hcrc>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7ff ff1f 	bl	80021ec <_Z41__static_initialization_and_destruction_0ii>
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_MspInit+0x30>)
 80023b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_MspInit+0x30>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_MspInit+0x30>)
 80023c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	58024400 	.word	0x58024400

080023e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <HAL_CRC_MspInit+0x3c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10e      	bne.n	8002414 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_CRC_MspInit+0x40>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_CRC_MspInit+0x40>)
 80023fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_CRC_MspInit+0x40>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	58024c00 	.word	0x58024c00
 8002424:	58024400 	.word	0x58024400

08002428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0b8      	sub	sp, #224	; 0xe0
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	22bc      	movs	r2, #188	; 0xbc
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f00a f971 	bl	800c730 <memset>
  if(hspi->Instance==SPI3)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <HAL_SPI_MspInit+0xc0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d142      	bne.n	80024de <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800245e:	2300      	movs	r3, #0
 8002460:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f004 fd54 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002472:	f7ff fea1 	bl	80021b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_SPI_MspInit+0xc4>)
 8002478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_SPI_MspInit+0xc4>)
 800247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002482:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_SPI_MspInit+0xc4>)
 8002488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_SPI_MspInit+0xc4>)
 8002496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249a:	4a14      	ldr	r2, [pc, #80]	; (80024ec <HAL_SPI_MspInit+0xc4>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_SPI_MspInit+0xc4>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024cc:	2306      	movs	r3, #6
 80024ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024d6:	4619      	mov	r1, r3
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <HAL_SPI_MspInit+0xc8>)
 80024da:	f003 fb45 	bl	8005b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	37e0      	adds	r7, #224	; 0xe0
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40003c00 	.word	0x40003c00
 80024ec:	58024400 	.word	0x58024400
 80024f0:	58020800 	.word	0x58020800

080024f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a7d      	ldr	r2, [pc, #500]	; (80026f8 <HAL_TIM_Base_MspInit+0x204>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10f      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800250c:	4a7b      	ldr	r2, [pc, #492]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002516:	4b79      	ldr	r3, [pc, #484]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002524:	e0e3      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252e:	d10f      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002530:	4b72      	ldr	r3, [pc, #456]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002536:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002540:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800254e:	e0ce      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6a      	ldr	r2, [pc, #424]	; (8002700 <HAL_TIM_Base_MspInit+0x20c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10f      	bne.n	800257a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255a:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800255c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002560:	4a66      	ldr	r2, [pc, #408]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800256a:	4b64      	ldr	r3, [pc, #400]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800256c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002578:	e0b9      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM4)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a61      	ldr	r2, [pc, #388]	; (8002704 <HAL_TIM_Base_MspInit+0x210>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10f      	bne.n	80025a4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002584:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800258a:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
}
 80025a2:	e0a4      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM5)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a57      	ldr	r2, [pc, #348]	; (8002708 <HAL_TIM_Base_MspInit+0x214>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d117      	bne.n	80025de <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80025b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025b4:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025be:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80025c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2032      	movs	r0, #50	; 0x32
 80025d2:	f000 ff7a 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025d6:	2032      	movs	r0, #50	; 0x32
 80025d8:	f000 ff91 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 80025dc:	e087      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM6)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a4a      	ldr	r2, [pc, #296]	; (800270c <HAL_TIM_Base_MspInit+0x218>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d117      	bne.n	8002618 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80025ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ee:	4a43      	ldr	r2, [pc, #268]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80025f0:	f043 0310 	orr.w	r3, r3, #16
 80025f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f8:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80025fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2036      	movs	r0, #54	; 0x36
 800260c:	f000 ff5d 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002610:	2036      	movs	r0, #54	; 0x36
 8002612:	f000 ff74 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8002616:	e06a      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM7)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <HAL_TIM_Base_MspInit+0x21c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d117      	bne.n	8002652 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002628:	4a34      	ldr	r2, [pc, #208]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800262a:	f043 0320 	orr.w	r3, r3, #32
 800262e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2037      	movs	r0, #55	; 0x37
 8002646:	f000 ff40 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800264a:	2037      	movs	r0, #55	; 0x37
 800264c:	f000 ff57 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8002650:	e04d      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM12)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <HAL_TIM_Base_MspInit+0x220>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d117      	bne.n	800268c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800265e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002662:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002668:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800266e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	202b      	movs	r0, #43	; 0x2b
 8002680:	f000 ff23 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002684:	202b      	movs	r0, #43	; 0x2b
 8002686:	f000 ff3a 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 800268a:	e030      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM13)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_TIM_Base_MspInit+0x224>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d117      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 8002698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 800269e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80026a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	202c      	movs	r0, #44	; 0x2c
 80026ba:	f000 ff06 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80026be:	202c      	movs	r0, #44	; 0x2c
 80026c0:	f000 ff1d 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 80026c4:	e013      	b.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM15)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_TIM_Base_MspInit+0x228>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10e      	bne.n	80026ee <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80026d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_TIM_Base_MspInit+0x208>)
 80026e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
}
 80026ee:	bf00      	nop
 80026f0:	3730      	adds	r7, #48	; 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40010000 	.word	0x40010000
 80026fc:	58024400 	.word	0x58024400
 8002700:	40000400 	.word	0x40000400
 8002704:	40000800 	.word	0x40000800
 8002708:	40000c00 	.word	0x40000c00
 800270c:	40001000 	.word	0x40001000
 8002710:	40001400 	.word	0x40001400
 8002714:	40001800 	.word	0x40001800
 8002718:	40001c00 	.word	0x40001c00
 800271c:	40014000 	.word	0x40014000

08002720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	; 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_TIM_MspPostInit+0x198>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d120      	bne.n	8002784 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002742:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002748:	4a5c      	ldr	r2, [pc, #368]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002752:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002772:	2301      	movs	r3, #1
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	4619      	mov	r1, r3
 800277c:	4850      	ldr	r0, [pc, #320]	; (80028c0 <HAL_TIM_MspPostInit+0x1a0>)
 800277e:	f003 f9f3 	bl	8005b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002782:	e094      	b.n	80028ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d120      	bne.n	80027d0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002794:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80027ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027be:	2301      	movs	r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	4619      	mov	r1, r3
 80027c8:	483e      	ldr	r0, [pc, #248]	; (80028c4 <HAL_TIM_MspPostInit+0x1a4>)
 80027ca:	f003 f9cd 	bl	8005b68 <HAL_GPIO_Init>
}
 80027ce:	e06e      	b.n	80028ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_TIM_MspPostInit+0x1a8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11f      	bne.n	800281a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e0:	4a36      	ldr	r2, [pc, #216]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 80027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80027f8:	2340      	movs	r3, #64	; 0x40
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002808:	2302      	movs	r3, #2
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	482e      	ldr	r0, [pc, #184]	; (80028cc <HAL_TIM_MspPostInit+0x1ac>)
 8002814:	f003 f9a8 	bl	8005b68 <HAL_GPIO_Init>
}
 8002818:	e049      	b.n	80028ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <HAL_TIM_MspPostInit+0x1b0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d120      	bne.n	8002866 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8002842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002854:	2302      	movs	r3, #2
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	4819      	ldr	r0, [pc, #100]	; (80028c4 <HAL_TIM_MspPostInit+0x1a4>)
 8002860:	f003 f982 	bl	8005b68 <HAL_GPIO_Init>
}
 8002864:	e023      	b.n	80028ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_TIM_MspPostInit+0x1b4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d11e      	bne.n	80028ae <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_TIM_MspPostInit+0x19c>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800289e:	2304      	movs	r3, #4
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_TIM_MspPostInit+0x1a0>)
 80028aa:	f003 f95d 	bl	8005b68 <HAL_GPIO_Init>
}
 80028ae:	bf00      	nop
 80028b0:	3730      	adds	r7, #48	; 0x30
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	58024400 	.word	0x58024400
 80028c0:	58021000 	.word	0x58021000
 80028c4:	58020400 	.word	0x58020400
 80028c8:	40000400 	.word	0x40000400
 80028cc:	58020000 	.word	0x58020000
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40014000 	.word	0x40014000

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0bc      	sub	sp, #240	; 0xf0
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f0:	f107 0320 	add.w	r3, r7, #32
 80028f4:	22bc      	movs	r2, #188	; 0xbc
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f009 ff19 	bl	800c730 <memset>
  if(huart->Instance==UART4)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4aa1      	ldr	r2, [pc, #644]	; (8002b88 <HAL_UART_MspInit+0x2b0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	f040 80b7 	bne.w	8002a78 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800290a:	2302      	movs	r3, #2
 800290c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002914:	f107 0320 	add.w	r3, r7, #32
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fafb 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002924:	f7ff fc48 	bl	80021b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002928:	4b98      	ldr	r3, [pc, #608]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 800292a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800292e:	4a97      	ldr	r2, [pc, #604]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002934:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002938:	4b94      	ldr	r3, [pc, #592]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800293e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002946:	4b91      	ldr	r3, [pc, #580]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294c:	4a8f      	ldr	r2, [pc, #572]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 800294e:	f043 0308 	orr.w	r3, r3, #8
 8002952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002956:	4b8d      	ldr	r3, [pc, #564]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002964:	2303      	movs	r3, #3
 8002966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800297c:	2308      	movs	r3, #8
 800297e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002986:	4619      	mov	r1, r3
 8002988:	4881      	ldr	r0, [pc, #516]	; (8002b90 <HAL_UART_MspInit+0x2b8>)
 800298a:	f003 f8ed 	bl	8005b68 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800298e:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 8002990:	4a81      	ldr	r2, [pc, #516]	; (8002b98 <HAL_UART_MspInit+0x2c0>)
 8002992:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002994:	4b7f      	ldr	r3, [pc, #508]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 8002996:	223f      	movs	r2, #63	; 0x3f
 8002998:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299a:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a0:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ae:	4b79      	ldr	r3, [pc, #484]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b4:	4b77      	ldr	r3, [pc, #476]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029c0:	4b74      	ldr	r3, [pc, #464]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029c8:	2204      	movs	r2, #4
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029cc:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029ce:	2203      	movs	r2, #3
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80029d2:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029d8:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029de:	486d      	ldr	r0, [pc, #436]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029e0:	f000 fe9e 	bl	8003720 <HAL_DMA_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80029ea:	f7ff fbe5 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a68      	ldr	r2, [pc, #416]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80029f4:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_UART_MspInit+0x2bc>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80029fa:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 80029fc:	4a68      	ldr	r2, [pc, #416]	; (8002ba0 <HAL_UART_MspInit+0x2c8>)
 80029fe:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002a00:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0c:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a12:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a18:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a1a:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a20:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a2c:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a32:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a34:	2204      	movs	r2, #4
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a38:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a3e:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a44:	4b55      	ldr	r3, [pc, #340]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002a4a:	4854      	ldr	r0, [pc, #336]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a4c:	f000 fe68 	bl	8003720 <HAL_DMA_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8002a56:	f7ff fbaf 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a5e:	679a      	str	r2, [r3, #120]	; 0x78
 8002a60:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <HAL_UART_MspInit+0x2c4>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2034      	movs	r0, #52	; 0x34
 8002a6c:	f000 fd2d 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a70:	2034      	movs	r0, #52	; 0x34
 8002a72:	f000 fd44 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a76:	e154      	b.n	8002d22 <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a49      	ldr	r2, [pc, #292]	; (8002ba4 <HAL_UART_MspInit+0x2cc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 8098 	bne.w	8002bb4 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a8e:	f107 0320 	add.w	r3, r7, #32
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 fa3e 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8002a9e:	f7ff fb8b 	bl	80021b8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa8:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac0:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	4a31      	ldr	r2, [pc, #196]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_UART_MspInit+0x2b4>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ade:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002af8:	2307      	movs	r3, #7
 8002afa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002afe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b02:	4619      	mov	r1, r3
 8002b04:	4828      	ldr	r0, [pc, #160]	; (8002ba8 <HAL_UART_MspInit+0x2d0>)
 8002b06:	f003 f82f 	bl	8005b68 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b0c:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <HAL_UART_MspInit+0x2d8>)
 8002b0e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b12:	2250      	movs	r2, #80	; 0x50
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b28:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b44:	2204      	movs	r2, #4
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002b5a:	4814      	ldr	r0, [pc, #80]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b5c:	f000 fde0 	bl	8003720 <HAL_DMA_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8002b66:	f7ff fb27 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b6e:	679a      	str	r2, [r3, #120]	; 0x78
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <HAL_UART_MspInit+0x2d4>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2052      	movs	r0, #82	; 0x52
 8002b7c:	f000 fca5 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002b80:	2052      	movs	r0, #82	; 0x52
 8002b82:	f000 fcbc 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8002b86:	e0cc      	b.n	8002d22 <HAL_UART_MspInit+0x44a>
 8002b88:	40004c00 	.word	0x40004c00
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	58020c00 	.word	0x58020c00
 8002b94:	24000760 	.word	0x24000760
 8002b98:	40020058 	.word	0x40020058
 8002b9c:	240007d8 	.word	0x240007d8
 8002ba0:	40020070 	.word	0x40020070
 8002ba4:	40007800 	.word	0x40007800
 8002ba8:	58021000 	.word	0x58021000
 8002bac:	24000850 	.word	0x24000850
 8002bb0:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_UART_MspInit+0x454>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 80b1 	bne.w	8002d22 <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bca:	f107 0320 	add.w	r3, r7, #32
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 f9a0 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_UART_MspInit+0x306>
      Error_Handler();
 8002bda:	f7ff faed 	bl	80021b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_UART_MspInit+0x458>)
 8002be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_UART_MspInit+0x458>)
 8002be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_UART_MspInit+0x458>)
 8002bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_UART_MspInit+0x458>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_UART_MspInit+0x458>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0c:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <HAL_UART_MspInit+0x458>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c34:	2307      	movs	r3, #7
 8002c36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c3e:	4619      	mov	r1, r3
 8002c40:	483c      	ldr	r0, [pc, #240]	; (8002d34 <HAL_UART_MspInit+0x45c>)
 8002c42:	f002 ff91 	bl	8005b68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002c46:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c48:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <HAL_UART_MspInit+0x464>)
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c4e:	222d      	movs	r2, #45	; 0x2d
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c52:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c78:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c88:	482b      	ldr	r0, [pc, #172]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c8a:	f000 fd49 	bl	8003720 <HAL_DMA_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8002c94:	f7ff fa90 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002c9c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <HAL_UART_MspInit+0x460>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_UART_MspInit+0x46c>)
 8002ca8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cac:	222e      	movs	r2, #46	; 0x2e
 8002cae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cb2:	2240      	movs	r2, #64	; 0x40
 8002cb4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cdc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002cf6:	4812      	ldr	r0, [pc, #72]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002cf8:	f000 fd12 	bl	8003720 <HAL_DMA_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8002d02:	f7ff fa59 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002d0a:	679a      	str	r2, [r3, #120]	; 0x78
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_UART_MspInit+0x468>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	2027      	movs	r0, #39	; 0x27
 8002d18:	f000 fbd7 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d1c:	2027      	movs	r0, #39	; 0x27
 8002d1e:	f000 fbee 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	37f0      	adds	r7, #240	; 0xf0
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40004800 	.word	0x40004800
 8002d30:	58024400 	.word	0x58024400
 8002d34:	58020c00 	.word	0x58020c00
 8002d38:	240008c8 	.word	0x240008c8
 8002d3c:	40020028 	.word	0x40020028
 8002d40:	24000940 	.word	0x24000940
 8002d44:	40020040 	.word	0x40020040

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <NMI_Handler+0x4>

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d94:	f000 fa92 	bl	80032bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002d98:	f000 fbcb 	bl	8003532 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <DMA1_Stream0_IRQHandler+0x10>)
 8002da6:	f001 fd79 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	24000850 	.word	0x24000850

08002db4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <DMA1_Stream1_IRQHandler+0x10>)
 8002dba:	f001 fd6f 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	240008c8 	.word	0x240008c8

08002dc8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <DMA1_Stream2_IRQHandler+0x10>)
 8002dce:	f001 fd65 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	24000940 	.word	0x24000940

08002ddc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <DMA1_Stream3_IRQHandler+0x10>)
 8002de2:	f001 fd5b 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	24000760 	.word	0x24000760

08002df0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <DMA1_Stream4_IRQHandler+0x10>)
 8002df6:	f001 fd51 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	240007d8 	.word	0x240007d8

08002e04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002e08:	2040      	movs	r0, #64	; 0x40
 8002e0a:	f003 f876 	bl	8005efa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002e0e:	2080      	movs	r0, #128	; 0x80
 8002e10:	f003 f873 	bl	8005efa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <USART3_IRQHandler+0x10>)
 8002e1e:	f007 f9a7 	bl	800a170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	240006d0 	.word	0x240006d0

08002e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002e30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e34:	f003 f861 	bl	8005efa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002e38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e3c:	f003 f85d 	bl	8005efa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002e40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e44:	f003 f859 	bl	8005efa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002e48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e4c:	f003 f855 	bl	8005efa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002e5a:	f005 ff1d 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	240004cc 	.word	0x240004cc

08002e68 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002e6e:	f005 ff13 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	24000518 	.word	0x24000518

08002e7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM5_IRQHandler+0x10>)
 8002e82:	f005 ff09 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	240003e8 	.word	0x240003e8

08002e90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <UART4_IRQHandler+0x10>)
 8002e96:	f007 f96b 	bl	800a170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	240005b0 	.word	0x240005b0

08002ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <TIM6_DAC_IRQHandler+0x10>)
 8002eaa:	f005 fef5 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	24000434 	.word	0x24000434

08002eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <TIM7_IRQHandler+0x10>)
 8002ebe:	f005 feeb 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	24000480 	.word	0x24000480

08002ecc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <UART7_IRQHandler+0x10>)
 8002ed2:	f007 f94d 	bl	800a170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	24000640 	.word	0x24000640

08002ee0 <_getpid>:
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_kill>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	f009 fbef 	bl	800c6dc <__errno>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2216      	movs	r2, #22
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_exit>:
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ffe7 	bl	8002ef0 <_kill>
 8002f22:	e7fe      	b.n	8002f22 <_exit+0x12>

08002f24 <_read>:
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e00a      	b.n	8002f4c <_read+0x28>
 8002f36:	f3af 8000 	nop.w
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	60ba      	str	r2, [r7, #8]
 8002f42:	b2ca      	uxtb	r2, r1
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dbf0      	blt.n	8002f36 <_read+0x12>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_write>:
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e009      	b.n	8002f84 <_write+0x26>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	60ba      	str	r2, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f3af 8000 	nop.w
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbf1      	blt.n	8002f70 <_write+0x12>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_close>:
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <_fstat>:
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_isatty>:
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <_lseek>:
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <_sbrk>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <_sbrk+0x5c>)
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <_sbrk+0x60>)
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <_sbrk+0x22>
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <_sbrk+0x64>)
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <_sbrk+0x68>)
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <_sbrk+0x64>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d207      	bcs.n	8003040 <_sbrk+0x40>
 8003030:	f009 fb54 	bl	800c6dc <__errno>
 8003034:	4603      	mov	r3, r0
 8003036:	220c      	movs	r2, #12
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	e009      	b.n	8003054 <_sbrk+0x54>
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <_sbrk+0x64>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	4a05      	ldr	r2, [pc, #20]	; (8003064 <_sbrk+0x64>)
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	24001068 	.word	0x24001068
 8003060:	00000400 	.word	0x00000400
 8003064:	24000a48 	.word	0x24000a48
 8003068:	24000a68 	.word	0x24000a68

0800306c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003070:	4b39      	ldr	r3, [pc, #228]	; (8003158 <SystemInit+0xec>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	4a38      	ldr	r2, [pc, #224]	; (8003158 <SystemInit+0xec>)
 8003078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800307c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <SystemInit+0xf0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	2b06      	cmp	r3, #6
 800308a:	d807      	bhi.n	800309c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800308c:	4b33      	ldr	r3, [pc, #204]	; (800315c <SystemInit+0xf0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 030f 	bic.w	r3, r3, #15
 8003094:	4a31      	ldr	r2, [pc, #196]	; (800315c <SystemInit+0xf0>)
 8003096:	f043 0307 	orr.w	r3, r3, #7
 800309a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <SystemInit+0xf4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <SystemInit+0xf4>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <SystemInit+0xf4>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <SystemInit+0xf4>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	492b      	ldr	r1, [pc, #172]	; (8003160 <SystemInit+0xf4>)
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <SystemInit+0xf8>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <SystemInit+0xf0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <SystemInit+0xf0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 030f 	bic.w	r3, r3, #15
 80030ce:	4a23      	ldr	r2, [pc, #140]	; (800315c <SystemInit+0xf0>)
 80030d0:	f043 0307 	orr.w	r3, r3, #7
 80030d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <SystemInit+0xf4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <SystemInit+0xf4>)
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030e2:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <SystemInit+0xf4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <SystemInit+0xf4>)
 80030ea:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <SystemInit+0xfc>)
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <SystemInit+0xf4>)
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <SystemInit+0x100>)
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <SystemInit+0xf4>)
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <SystemInit+0x104>)
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <SystemInit+0xf4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <SystemInit+0xf4>)
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <SystemInit+0x104>)
 8003104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <SystemInit+0xf4>)
 8003108:	2200      	movs	r2, #0
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <SystemInit+0xf4>)
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <SystemInit+0x104>)
 8003110:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <SystemInit+0xf4>)
 8003114:	2200      	movs	r2, #0
 8003116:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <SystemInit+0xf4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a10      	ldr	r2, [pc, #64]	; (8003160 <SystemInit+0xf4>)
 800311e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003122:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <SystemInit+0xf4>)
 8003126:	2200      	movs	r2, #0
 8003128:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <SystemInit+0x108>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <SystemInit+0x10c>)
 8003130:	4013      	ands	r3, r2
 8003132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003136:	d202      	bcs.n	800313e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <SystemInit+0x110>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <SystemInit+0x114>)
 8003140:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003144:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SystemInit+0xec>)
 8003148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800314c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00
 800315c:	52002000 	.word	0x52002000
 8003160:	58024400 	.word	0x58024400
 8003164:	eaf6ed7f 	.word	0xeaf6ed7f
 8003168:	02020200 	.word	0x02020200
 800316c:	01ff0000 	.word	0x01ff0000
 8003170:	01010280 	.word	0x01010280
 8003174:	5c001000 	.word	0x5c001000
 8003178:	ffff0000 	.word	0xffff0000
 800317c:	51008108 	.word	0x51008108
 8003180:	52004000 	.word	0x52004000

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003188:	f7ff ff70 	bl	800306c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800318e:	490d      	ldr	r1, [pc, #52]	; (80031c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031b2:	f009 fa99 	bl	800c6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7fd ff45 	bl	8001044 <main>
  bx  lr
 80031ba:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80031bc:	24001068 	.word	0x24001068
  ldr r0, =_sdata
 80031c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031c4:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 80031c8:	0800f5ec 	.word	0x0800f5ec
  ldr r2, =_sbss
 80031cc:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 80031d0:	24000a68 	.word	0x24000a68

080031d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC3_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031de:	2003      	movs	r0, #3
 80031e0:	f000 f968 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031e4:	f003 fcc0 	bl	8006b68 <HAL_RCC_GetSysClockFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_Init+0x68>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	4913      	ldr	r1, [pc, #76]	; (8003244 <HAL_Init+0x6c>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_Init+0x68>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_Init+0x6c>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <HAL_Init+0x70>)
 800321a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800321c:	4a0b      	ldr	r2, [pc, #44]	; (800324c <HAL_Init+0x74>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003222:	2000      	movs	r0, #0
 8003224:	f000 f814 	bl	8003250 <HAL_InitTick>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e002      	b.n	8003238 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003232:	f7ff f8bd 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	58024400 	.word	0x58024400
 8003244:	0800efd8 	.word	0x0800efd8
 8003248:	24000014 	.word	0x24000014
 800324c:	24000010 	.word	0x24000010

08003250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_InitTick+0x60>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e021      	b.n	80032a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_InitTick+0x64>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_InitTick+0x60>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003272:	fbb3 f3f1 	udiv	r3, r3, r1
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f94d 	bl	800351a <HAL_SYSTICK_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00e      	b.n	80032a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d80a      	bhi.n	80032a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f000 f917 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <HAL_InitTick+0x68>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2400001c 	.word	0x2400001c
 80032b4:	24000010 	.word	0x24000010
 80032b8:	24000018 	.word	0x24000018

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	2400001c 	.word	0x2400001c
 80032e0:	24000a54 	.word	0x24000a54

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	24000a54 	.word	0x24000a54

080032fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_GetREVID+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0c1b      	lsrs	r3, r3, #16
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	5c001000 	.word	0x5c001000

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <__NVIC_SetPriorityGrouping+0x40>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	4313      	orrs	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <__NVIC_SetPriorityGrouping+0x40>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00
 8003358:	05fa0000 	.word	0x05fa0000

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d8:	f7ff ff40 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7ff ff90 	bl	8003408 <NVIC_EncodePriority>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff5f 	bl	80033b4 <__NVIC_SetPriority>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff33 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ffa4 	bl	8003470 <SysTick_Config>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003536:	f000 f802 	bl	800353e <HAL_SYSTICK_Callback>
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e054      	b.n	8003608 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7f5b      	ldrb	r3, [r3, #29]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe ff38 	bl	80023e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_CRC_Init+0xc4>)
 8003588:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0218 	bic.w	r2, r2, #24
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	e00c      	b.n	80035b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	461a      	mov	r2, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f834 	bl	8003614 <HAL_CRCEx_Polynomial_Set>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e028      	b.n	8003608 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	795b      	ldrb	r3, [r3, #5]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	e004      	b.n	80035d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6912      	ldr	r2, [r2, #16]
 80035d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	04c11db7 	.word	0x04c11db7

08003614 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003624:	231f      	movs	r3, #31
 8003626:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003628:	bf00      	nop
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	613a      	str	r2, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <HAL_CRCEx_Polynomial_Set+0x34>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_CRCEx_Polynomial_Set+0x16>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b18      	cmp	r3, #24
 800364c:	d846      	bhi.n	80036dc <HAL_CRCEx_Polynomial_Set+0xc8>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	080036e3 	.word	0x080036e3
 8003658:	080036dd 	.word	0x080036dd
 800365c:	080036dd 	.word	0x080036dd
 8003660:	080036dd 	.word	0x080036dd
 8003664:	080036dd 	.word	0x080036dd
 8003668:	080036dd 	.word	0x080036dd
 800366c:	080036dd 	.word	0x080036dd
 8003670:	080036dd 	.word	0x080036dd
 8003674:	080036d1 	.word	0x080036d1
 8003678:	080036dd 	.word	0x080036dd
 800367c:	080036dd 	.word	0x080036dd
 8003680:	080036dd 	.word	0x080036dd
 8003684:	080036dd 	.word	0x080036dd
 8003688:	080036dd 	.word	0x080036dd
 800368c:	080036dd 	.word	0x080036dd
 8003690:	080036dd 	.word	0x080036dd
 8003694:	080036c5 	.word	0x080036c5
 8003698:	080036dd 	.word	0x080036dd
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036dd 	.word	0x080036dd
 80036a4:	080036dd 	.word	0x080036dd
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036dd 	.word	0x080036dd
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036b9 	.word	0x080036b9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d913      	bls.n	80036e6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036c2:	e010      	b.n	80036e6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b07      	cmp	r3, #7
 80036c8:	d90f      	bls.n	80036ea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036ce:	e00c      	b.n	80036ea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b0f      	cmp	r3, #15
 80036d4:	d90b      	bls.n	80036ee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036da:	e008      	b.n	80036ee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
      break;
 80036e0:	e006      	b.n	80036f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036e2:	bf00      	nop
 80036e4:	e004      	b.n	80036f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 0118 	bic.w	r1, r3, #24
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff fddc 	bl	80032e4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e316      	b.n	8003d66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a66      	ldr	r2, [pc, #408]	; (80038d8 <HAL_DMA_Init+0x1b8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d04a      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_DMA_Init+0x1bc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d045      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <HAL_DMA_Init+0x1c0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d040      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a62      	ldr	r2, [pc, #392]	; (80038e4 <HAL_DMA_Init+0x1c4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d03b      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a60      	ldr	r2, [pc, #384]	; (80038e8 <HAL_DMA_Init+0x1c8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d036      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a5f      	ldr	r2, [pc, #380]	; (80038ec <HAL_DMA_Init+0x1cc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d031      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_DMA_Init+0x1d0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d02c      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5c      	ldr	r2, [pc, #368]	; (80038f4 <HAL_DMA_Init+0x1d4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d027      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5a      	ldr	r2, [pc, #360]	; (80038f8 <HAL_DMA_Init+0x1d8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d022      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a59      	ldr	r2, [pc, #356]	; (80038fc <HAL_DMA_Init+0x1dc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d01d      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a57      	ldr	r2, [pc, #348]	; (8003900 <HAL_DMA_Init+0x1e0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d018      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a56      	ldr	r2, [pc, #344]	; (8003904 <HAL_DMA_Init+0x1e4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_DMA_Init+0x1e8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a53      	ldr	r2, [pc, #332]	; (800390c <HAL_DMA_Init+0x1ec>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a51      	ldr	r2, [pc, #324]	; (8003910 <HAL_DMA_Init+0x1f0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_DMA_Init+0xb8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a50      	ldr	r2, [pc, #320]	; (8003914 <HAL_DMA_Init+0x1f4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_DMA_Init+0xbc>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_DMA_Init+0xbe>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 813b 	beq.w	8003a5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <HAL_DMA_Init+0x1b8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d04a      	beq.n	8003894 <HAL_DMA_Init+0x174>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a36      	ldr	r2, [pc, #216]	; (80038dc <HAL_DMA_Init+0x1bc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d045      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a34      	ldr	r2, [pc, #208]	; (80038e0 <HAL_DMA_Init+0x1c0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d040      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_DMA_Init+0x1c4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d03b      	beq.n	8003894 <HAL_DMA_Init+0x174>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <HAL_DMA_Init+0x1c8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d036      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_DMA_Init+0x1cc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d031      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_DMA_Init+0x1d0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02c      	beq.n	8003894 <HAL_DMA_Init+0x174>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <HAL_DMA_Init+0x1d4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d027      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_DMA_Init+0x1d8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d022      	beq.n	8003894 <HAL_DMA_Init+0x174>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <HAL_DMA_Init+0x1dc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d01d      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <HAL_DMA_Init+0x1e0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d018      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_DMA_Init+0x1e4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <HAL_DMA_Init+0x174>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_DMA_Init+0x1e8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <HAL_DMA_Init+0x1ec>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_DMA_Init+0x174>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_DMA_Init+0x1f0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_DMA_Init+0x174>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a21      	ldr	r2, [pc, #132]	; (8003914 <HAL_DMA_Init+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d108      	bne.n	80038a6 <HAL_DMA_Init+0x186>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e007      	b.n	80038b6 <HAL_DMA_Init+0x196>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038b6:	e02f      	b.n	8003918 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b8:	f7ff fd14 	bl	80032e4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d928      	bls.n	8003918 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2203      	movs	r2, #3
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e246      	b.n	8003d66 <HAL_DMA_Init+0x646>
 80038d8:	40020010 	.word	0x40020010
 80038dc:	40020028 	.word	0x40020028
 80038e0:	40020040 	.word	0x40020040
 80038e4:	40020058 	.word	0x40020058
 80038e8:	40020070 	.word	0x40020070
 80038ec:	40020088 	.word	0x40020088
 80038f0:	400200a0 	.word	0x400200a0
 80038f4:	400200b8 	.word	0x400200b8
 80038f8:	40020410 	.word	0x40020410
 80038fc:	40020428 	.word	0x40020428
 8003900:	40020440 	.word	0x40020440
 8003904:	40020458 	.word	0x40020458
 8003908:	40020470 	.word	0x40020470
 800390c:	40020488 	.word	0x40020488
 8003910:	400204a0 	.word	0x400204a0
 8003914:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1c8      	bne.n	80038b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4b83      	ldr	r3, [pc, #524]	; (8003b40 <HAL_DMA_Init+0x420>)
 8003932:	4013      	ands	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800393e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003956:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2b04      	cmp	r3, #4
 800396a:	d107      	bne.n	800397c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4313      	orrs	r3, r2
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800397c:	4b71      	ldr	r3, [pc, #452]	; (8003b44 <HAL_DMA_Init+0x424>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b71      	ldr	r3, [pc, #452]	; (8003b48 <HAL_DMA_Init+0x428>)
 8003982:	4013      	ands	r3, r2
 8003984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003988:	d328      	bcc.n	80039dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b28      	cmp	r3, #40	; 0x28
 8003990:	d903      	bls.n	800399a <HAL_DMA_Init+0x27a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b2e      	cmp	r3, #46	; 0x2e
 8003998:	d917      	bls.n	80039ca <HAL_DMA_Init+0x2aa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b3e      	cmp	r3, #62	; 0x3e
 80039a0:	d903      	bls.n	80039aa <HAL_DMA_Init+0x28a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b42      	cmp	r3, #66	; 0x42
 80039a8:	d90f      	bls.n	80039ca <HAL_DMA_Init+0x2aa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b46      	cmp	r3, #70	; 0x46
 80039b0:	d903      	bls.n	80039ba <HAL_DMA_Init+0x29a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b48      	cmp	r3, #72	; 0x48
 80039b8:	d907      	bls.n	80039ca <HAL_DMA_Init+0x2aa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b4e      	cmp	r3, #78	; 0x4e
 80039c0:	d905      	bls.n	80039ce <HAL_DMA_Init+0x2ae>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b52      	cmp	r3, #82	; 0x52
 80039c8:	d801      	bhi.n	80039ce <HAL_DMA_Init+0x2ae>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_DMA_Init+0x2b0>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d117      	bne.n	8003a36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f001 ff1b 	bl	8005854 <DMA_CheckFifoParam>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e197      	b.n	8003d66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f001 fe56 	bl	80056f0 <DMA_CalcBaseAndBitshift>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	223f      	movs	r2, #63	; 0x3f
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	e0cd      	b.n	8003bf6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <HAL_DMA_Init+0x42c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a39      	ldr	r2, [pc, #228]	; (8003b50 <HAL_DMA_Init+0x430>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <HAL_DMA_Init+0x434>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a36      	ldr	r2, [pc, #216]	; (8003b58 <HAL_DMA_Init+0x438>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <HAL_DMA_Init+0x43c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <HAL_DMA_Init+0x440>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <HAL_DMA_Init+0x444>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_Init+0x38a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <HAL_DMA_Init+0x448>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Init+0x38e>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_DMA_Init+0x390>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8097 	beq.w	8003be4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_DMA_Init+0x42c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d021      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_DMA_Init+0x430>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01c      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <HAL_DMA_Init+0x434>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d017      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <HAL_DMA_Init+0x438>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d012      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <HAL_DMA_Init+0x43c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00d      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <HAL_DMA_Init+0x440>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d008      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_DMA_Init+0x444>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <HAL_DMA_Init+0x3e4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <HAL_DMA_Init+0x448>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_DMA_Init+0x44c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d020      	beq.n	8003b70 <HAL_DMA_Init+0x450>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d102      	bne.n	8003b3c <HAL_DMA_Init+0x41c>
 8003b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b3a:	e01a      	b.n	8003b72 <HAL_DMA_Init+0x452>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e018      	b.n	8003b72 <HAL_DMA_Init+0x452>
 8003b40:	fe10803f 	.word	0xfe10803f
 8003b44:	5c001000 	.word	0x5c001000
 8003b48:	ffff0000 	.word	0xffff0000
 8003b4c:	58025408 	.word	0x58025408
 8003b50:	5802541c 	.word	0x5802541c
 8003b54:	58025430 	.word	0x58025430
 8003b58:	58025444 	.word	0x58025444
 8003b5c:	58025458 	.word	0x58025458
 8003b60:	5802546c 	.word	0x5802546c
 8003b64:	58025480 	.word	0x58025480
 8003b68:	58025494 	.word	0x58025494
 8003b6c:	fffe000f 	.word	0xfffe000f
 8003b70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ba0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b6e      	ldr	r3, [pc, #440]	; (8003d70 <HAL_DMA_Init+0x650>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	4a6e      	ldr	r2, [pc, #440]	; (8003d74 <HAL_DMA_Init+0x654>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 fd91 	bl	80056f0 <DMA_CalcBaseAndBitshift>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2201      	movs	r2, #1
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	e008      	b.n	8003bf6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0b7      	b.n	8003d66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a5f      	ldr	r2, [pc, #380]	; (8003d78 <HAL_DMA_Init+0x658>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d072      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_DMA_Init+0x65c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d06d      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a5c      	ldr	r2, [pc, #368]	; (8003d80 <HAL_DMA_Init+0x660>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d068      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5a      	ldr	r2, [pc, #360]	; (8003d84 <HAL_DMA_Init+0x664>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d063      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a59      	ldr	r2, [pc, #356]	; (8003d88 <HAL_DMA_Init+0x668>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d05e      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <HAL_DMA_Init+0x66c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d059      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a56      	ldr	r2, [pc, #344]	; (8003d90 <HAL_DMA_Init+0x670>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d054      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a54      	ldr	r2, [pc, #336]	; (8003d94 <HAL_DMA_Init+0x674>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d04f      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a53      	ldr	r2, [pc, #332]	; (8003d98 <HAL_DMA_Init+0x678>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d04a      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a51      	ldr	r2, [pc, #324]	; (8003d9c <HAL_DMA_Init+0x67c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d045      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a50      	ldr	r2, [pc, #320]	; (8003da0 <HAL_DMA_Init+0x680>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d040      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a4e      	ldr	r2, [pc, #312]	; (8003da4 <HAL_DMA_Init+0x684>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_DMA_Init+0x688>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d036      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a4b      	ldr	r2, [pc, #300]	; (8003dac <HAL_DMA_Init+0x68c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <HAL_DMA_Init+0x690>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d02c      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a48      	ldr	r2, [pc, #288]	; (8003db4 <HAL_DMA_Init+0x694>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d027      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a47      	ldr	r2, [pc, #284]	; (8003db8 <HAL_DMA_Init+0x698>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a45      	ldr	r2, [pc, #276]	; (8003dbc <HAL_DMA_Init+0x69c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a44      	ldr	r2, [pc, #272]	; (8003dc0 <HAL_DMA_Init+0x6a0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a42      	ldr	r2, [pc, #264]	; (8003dc4 <HAL_DMA_Init+0x6a4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <HAL_DMA_Init+0x6a8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3f      	ldr	r2, [pc, #252]	; (8003dcc <HAL_DMA_Init+0x6ac>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a3e      	ldr	r2, [pc, #248]	; (8003dd0 <HAL_DMA_Init+0x6b0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_Init+0x5c6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3c      	ldr	r2, [pc, #240]	; (8003dd4 <HAL_DMA_Init+0x6b4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_DMA_Init+0x5ca>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_DMA_Init+0x5cc>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d032      	beq.n	8003d56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f001 fe2b 	bl	800594c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d102      	bne.n	8003d04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d010      	beq.n	8003d44 <HAL_DMA_Init+0x624>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d80c      	bhi.n	8003d44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f001 fea8 	bl	8005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e008      	b.n	8003d56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	a7fdabf8 	.word	0xa7fdabf8
 8003d74:	cccccccd 	.word	0xcccccccd
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494

08003dd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7ff fa80 	bl	80032e4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e2dc      	b.n	80043aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d008      	beq.n	8003e0e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e2cd      	b.n	80043aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_DMA_Abort+0x214>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04a      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a74      	ldr	r2, [pc, #464]	; (8003ff0 <HAL_DMA_Abort+0x218>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d045      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a73      	ldr	r2, [pc, #460]	; (8003ff4 <HAL_DMA_Abort+0x21c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d040      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a71      	ldr	r2, [pc, #452]	; (8003ff8 <HAL_DMA_Abort+0x220>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d03b      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a70      	ldr	r2, [pc, #448]	; (8003ffc <HAL_DMA_Abort+0x224>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d036      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6e      	ldr	r2, [pc, #440]	; (8004000 <HAL_DMA_Abort+0x228>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d031      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6d      	ldr	r2, [pc, #436]	; (8004004 <HAL_DMA_Abort+0x22c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d02c      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a6b      	ldr	r2, [pc, #428]	; (8004008 <HAL_DMA_Abort+0x230>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d027      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6a      	ldr	r2, [pc, #424]	; (800400c <HAL_DMA_Abort+0x234>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a68      	ldr	r2, [pc, #416]	; (8004010 <HAL_DMA_Abort+0x238>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01d      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a67      	ldr	r2, [pc, #412]	; (8004014 <HAL_DMA_Abort+0x23c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a65      	ldr	r2, [pc, #404]	; (8004018 <HAL_DMA_Abort+0x240>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a64      	ldr	r2, [pc, #400]	; (800401c <HAL_DMA_Abort+0x244>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a62      	ldr	r2, [pc, #392]	; (8004020 <HAL_DMA_Abort+0x248>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a61      	ldr	r2, [pc, #388]	; (8004024 <HAL_DMA_Abort+0x24c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_DMA_Abort+0xd6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5f      	ldr	r2, [pc, #380]	; (8004028 <HAL_DMA_Abort+0x250>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_Abort+0xda>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_DMA_Abort+0xdc>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 021e 	bic.w	r2, r2, #30
 8003ec6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e00a      	b.n	8003ef6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 020e 	bic.w	r2, r2, #14
 8003eee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <HAL_DMA_Abort+0x214>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d072      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <HAL_DMA_Abort+0x218>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d06d      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a39      	ldr	r2, [pc, #228]	; (8003ff4 <HAL_DMA_Abort+0x21c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d068      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <HAL_DMA_Abort+0x220>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d063      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <HAL_DMA_Abort+0x224>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d05e      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	; (8004000 <HAL_DMA_Abort+0x228>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d059      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a33      	ldr	r2, [pc, #204]	; (8004004 <HAL_DMA_Abort+0x22c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d054      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a31      	ldr	r2, [pc, #196]	; (8004008 <HAL_DMA_Abort+0x230>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d04f      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a30      	ldr	r2, [pc, #192]	; (800400c <HAL_DMA_Abort+0x234>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d04a      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <HAL_DMA_Abort+0x238>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d045      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <HAL_DMA_Abort+0x23c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d040      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_DMA_Abort+0x240>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2a      	ldr	r2, [pc, #168]	; (800401c <HAL_DMA_Abort+0x244>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d036      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	; (8004020 <HAL_DMA_Abort+0x248>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a27      	ldr	r2, [pc, #156]	; (8004024 <HAL_DMA_Abort+0x24c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a25      	ldr	r2, [pc, #148]	; (8004028 <HAL_DMA_Abort+0x250>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	; (800402c <HAL_DMA_Abort+0x254>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_DMA_Abort+0x258>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a21      	ldr	r2, [pc, #132]	; (8004034 <HAL_DMA_Abort+0x25c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_DMA_Abort+0x260>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_DMA_Abort+0x264>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_DMA_Abort+0x268>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_DMA_Abort+0x26c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_Abort+0x20e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_DMA_Abort+0x270>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d132      	bne.n	800404c <HAL_DMA_Abort+0x274>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e031      	b.n	800404e <HAL_DMA_Abort+0x276>
 8003fea:	bf00      	nop
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6d      	ldr	r2, [pc, #436]	; (800421c <HAL_DMA_Abort+0x444>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d04a      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <HAL_DMA_Abort+0x448>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d045      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6a      	ldr	r2, [pc, #424]	; (8004224 <HAL_DMA_Abort+0x44c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d040      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a68      	ldr	r2, [pc, #416]	; (8004228 <HAL_DMA_Abort+0x450>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d03b      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a67      	ldr	r2, [pc, #412]	; (800422c <HAL_DMA_Abort+0x454>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d036      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a65      	ldr	r2, [pc, #404]	; (8004230 <HAL_DMA_Abort+0x458>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d031      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a64      	ldr	r2, [pc, #400]	; (8004234 <HAL_DMA_Abort+0x45c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d02c      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a62      	ldr	r2, [pc, #392]	; (8004238 <HAL_DMA_Abort+0x460>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d027      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a61      	ldr	r2, [pc, #388]	; (800423c <HAL_DMA_Abort+0x464>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d022      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a5f      	ldr	r2, [pc, #380]	; (8004240 <HAL_DMA_Abort+0x468>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01d      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5e      	ldr	r2, [pc, #376]	; (8004244 <HAL_DMA_Abort+0x46c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d018      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5c      	ldr	r2, [pc, #368]	; (8004248 <HAL_DMA_Abort+0x470>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_DMA_Abort+0x474>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00e      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a59      	ldr	r2, [pc, #356]	; (8004250 <HAL_DMA_Abort+0x478>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a58      	ldr	r2, [pc, #352]	; (8004254 <HAL_DMA_Abort+0x47c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_DMA_Abort+0x32a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a56      	ldr	r2, [pc, #344]	; (8004258 <HAL_DMA_Abort+0x480>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <HAL_DMA_Abort+0x33c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e007      	b.n	8004124 <HAL_DMA_Abort+0x34c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004124:	e013      	b.n	800414e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004126:	f7ff f8dd 	bl	80032e4 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b05      	cmp	r3, #5
 8004132:	d90c      	bls.n	800414e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e12d      	b.n	80043aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <HAL_DMA_Abort+0x444>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d04a      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <HAL_DMA_Abort+0x448>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d045      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <HAL_DMA_Abort+0x44c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d040      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <HAL_DMA_Abort+0x450>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d03b      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a29      	ldr	r2, [pc, #164]	; (800422c <HAL_DMA_Abort+0x454>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d036      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <HAL_DMA_Abort+0x458>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a26      	ldr	r2, [pc, #152]	; (8004234 <HAL_DMA_Abort+0x45c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d02c      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a24      	ldr	r2, [pc, #144]	; (8004238 <HAL_DMA_Abort+0x460>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d027      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a23      	ldr	r2, [pc, #140]	; (800423c <HAL_DMA_Abort+0x464>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a21      	ldr	r2, [pc, #132]	; (8004240 <HAL_DMA_Abort+0x468>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a20      	ldr	r2, [pc, #128]	; (8004244 <HAL_DMA_Abort+0x46c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <HAL_DMA_Abort+0x470>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_DMA_Abort+0x474>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_DMA_Abort+0x478>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <HAL_DMA_Abort+0x47c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_DMA_Abort+0x422>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_DMA_Abort+0x480>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_DMA_Abort+0x426>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_DMA_Abort+0x428>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02b      	beq.n	800425c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	223f      	movs	r2, #63	; 0x3f
 8004214:	409a      	lsls	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	e02a      	b.n	8004272 <HAL_DMA_Abort+0x49a>
 800421c:	40020010 	.word	0x40020010
 8004220:	40020028 	.word	0x40020028
 8004224:	40020040 	.word	0x40020040
 8004228:	40020058 	.word	0x40020058
 800422c:	40020070 	.word	0x40020070
 8004230:	40020088 	.word	0x40020088
 8004234:	400200a0 	.word	0x400200a0
 8004238:	400200b8 	.word	0x400200b8
 800423c:	40020410 	.word	0x40020410
 8004240:	40020428 	.word	0x40020428
 8004244:	40020440 	.word	0x40020440
 8004248:	40020458 	.word	0x40020458
 800424c:	40020470 	.word	0x40020470
 8004250:	40020488 	.word	0x40020488
 8004254:	400204a0 	.word	0x400204a0
 8004258:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2201      	movs	r2, #1
 800426c:	409a      	lsls	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4f      	ldr	r2, [pc, #316]	; (80043b4 <HAL_DMA_Abort+0x5dc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d072      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a4d      	ldr	r2, [pc, #308]	; (80043b8 <HAL_DMA_Abort+0x5e0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d06d      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4c      	ldr	r2, [pc, #304]	; (80043bc <HAL_DMA_Abort+0x5e4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d068      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a4a      	ldr	r2, [pc, #296]	; (80043c0 <HAL_DMA_Abort+0x5e8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d063      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a49      	ldr	r2, [pc, #292]	; (80043c4 <HAL_DMA_Abort+0x5ec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d05e      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a47      	ldr	r2, [pc, #284]	; (80043c8 <HAL_DMA_Abort+0x5f0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d059      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a46      	ldr	r2, [pc, #280]	; (80043cc <HAL_DMA_Abort+0x5f4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d054      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a44      	ldr	r2, [pc, #272]	; (80043d0 <HAL_DMA_Abort+0x5f8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04f      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a43      	ldr	r2, [pc, #268]	; (80043d4 <HAL_DMA_Abort+0x5fc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d04a      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a41      	ldr	r2, [pc, #260]	; (80043d8 <HAL_DMA_Abort+0x600>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d045      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a40      	ldr	r2, [pc, #256]	; (80043dc <HAL_DMA_Abort+0x604>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d040      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3e      	ldr	r2, [pc, #248]	; (80043e0 <HAL_DMA_Abort+0x608>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d03b      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3d      	ldr	r2, [pc, #244]	; (80043e4 <HAL_DMA_Abort+0x60c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d036      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <HAL_DMA_Abort+0x610>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d031      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3a      	ldr	r2, [pc, #232]	; (80043ec <HAL_DMA_Abort+0x614>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02c      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_DMA_Abort+0x618>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d027      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <HAL_DMA_Abort+0x61c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a35      	ldr	r2, [pc, #212]	; (80043f8 <HAL_DMA_Abort+0x620>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a34      	ldr	r2, [pc, #208]	; (80043fc <HAL_DMA_Abort+0x624>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a32      	ldr	r2, [pc, #200]	; (8004400 <HAL_DMA_Abort+0x628>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a31      	ldr	r2, [pc, #196]	; (8004404 <HAL_DMA_Abort+0x62c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_DMA_Abort+0x630>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2e      	ldr	r2, [pc, #184]	; (800440c <HAL_DMA_Abort+0x634>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_Abort+0x58a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_DMA_Abort+0x638>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_DMA_Abort+0x58e>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_DMA_Abort+0x590>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004374:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00c      	beq.n	8004398 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004396:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40020010 	.word	0x40020010
 80043b8:	40020028 	.word	0x40020028
 80043bc:	40020040 	.word	0x40020040
 80043c0:	40020058 	.word	0x40020058
 80043c4:	40020070 	.word	0x40020070
 80043c8:	40020088 	.word	0x40020088
 80043cc:	400200a0 	.word	0x400200a0
 80043d0:	400200b8 	.word	0x400200b8
 80043d4:	40020410 	.word	0x40020410
 80043d8:	40020428 	.word	0x40020428
 80043dc:	40020440 	.word	0x40020440
 80043e0:	40020458 	.word	0x40020458
 80043e4:	40020470 	.word	0x40020470
 80043e8:	40020488 	.word	0x40020488
 80043ec:	400204a0 	.word	0x400204a0
 80043f0:	400204b8 	.word	0x400204b8
 80043f4:	58025408 	.word	0x58025408
 80043f8:	5802541c 	.word	0x5802541c
 80043fc:	58025430 	.word	0x58025430
 8004400:	58025444 	.word	0x58025444
 8004404:	58025458 	.word	0x58025458
 8004408:	5802546c 	.word	0x5802546c
 800440c:	58025480 	.word	0x58025480
 8004410:	58025494 	.word	0x58025494

08004414 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e205      	b.n	8004832 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d004      	beq.n	800443c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e1fa      	b.n	8004832 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a8c      	ldr	r2, [pc, #560]	; (8004674 <HAL_DMA_Abort_IT+0x260>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d04a      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a8b      	ldr	r2, [pc, #556]	; (8004678 <HAL_DMA_Abort_IT+0x264>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d045      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a89      	ldr	r2, [pc, #548]	; (800467c <HAL_DMA_Abort_IT+0x268>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d040      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a88      	ldr	r2, [pc, #544]	; (8004680 <HAL_DMA_Abort_IT+0x26c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d03b      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a86      	ldr	r2, [pc, #536]	; (8004684 <HAL_DMA_Abort_IT+0x270>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d036      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a85      	ldr	r2, [pc, #532]	; (8004688 <HAL_DMA_Abort_IT+0x274>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d031      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a83      	ldr	r2, [pc, #524]	; (800468c <HAL_DMA_Abort_IT+0x278>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02c      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a82      	ldr	r2, [pc, #520]	; (8004690 <HAL_DMA_Abort_IT+0x27c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d027      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a80      	ldr	r2, [pc, #512]	; (8004694 <HAL_DMA_Abort_IT+0x280>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7f      	ldr	r2, [pc, #508]	; (8004698 <HAL_DMA_Abort_IT+0x284>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a7d      	ldr	r2, [pc, #500]	; (800469c <HAL_DMA_Abort_IT+0x288>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7c      	ldr	r2, [pc, #496]	; (80046a0 <HAL_DMA_Abort_IT+0x28c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7a      	ldr	r2, [pc, #488]	; (80046a4 <HAL_DMA_Abort_IT+0x290>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a79      	ldr	r2, [pc, #484]	; (80046a8 <HAL_DMA_Abort_IT+0x294>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a77      	ldr	r2, [pc, #476]	; (80046ac <HAL_DMA_Abort_IT+0x298>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_DMA_Abort_IT+0xc8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_DMA_Abort_IT+0x29c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <HAL_DMA_Abort_IT+0xcc>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_DMA_Abort_IT+0xce>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d065      	beq.n	80045b2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2204      	movs	r2, #4
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a60      	ldr	r2, [pc, #384]	; (8004674 <HAL_DMA_Abort_IT+0x260>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d04a      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a5e      	ldr	r2, [pc, #376]	; (8004678 <HAL_DMA_Abort_IT+0x264>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d045      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a5d      	ldr	r2, [pc, #372]	; (800467c <HAL_DMA_Abort_IT+0x268>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d040      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a5b      	ldr	r2, [pc, #364]	; (8004680 <HAL_DMA_Abort_IT+0x26c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d03b      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a5a      	ldr	r2, [pc, #360]	; (8004684 <HAL_DMA_Abort_IT+0x270>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d036      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a58      	ldr	r2, [pc, #352]	; (8004688 <HAL_DMA_Abort_IT+0x274>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d031      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a57      	ldr	r2, [pc, #348]	; (800468c <HAL_DMA_Abort_IT+0x278>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d02c      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a55      	ldr	r2, [pc, #340]	; (8004690 <HAL_DMA_Abort_IT+0x27c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d027      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a54      	ldr	r2, [pc, #336]	; (8004694 <HAL_DMA_Abort_IT+0x280>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_DMA_Abort_IT+0x284>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01d      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a51      	ldr	r2, [pc, #324]	; (800469c <HAL_DMA_Abort_IT+0x288>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a4f      	ldr	r2, [pc, #316]	; (80046a0 <HAL_DMA_Abort_IT+0x28c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a4e      	ldr	r2, [pc, #312]	; (80046a4 <HAL_DMA_Abort_IT+0x290>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a4c      	ldr	r2, [pc, #304]	; (80046a8 <HAL_DMA_Abort_IT+0x294>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4b      	ldr	r2, [pc, #300]	; (80046ac <HAL_DMA_Abort_IT+0x298>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_DMA_Abort_IT+0x17a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a49      	ldr	r2, [pc, #292]	; (80046b0 <HAL_DMA_Abort_IT+0x29c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <HAL_DMA_Abort_IT+0x18c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e147      	b.n	8004830 <HAL_DMA_Abort_IT+0x41c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e13e      	b.n	8004830 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 020e 	bic.w	r2, r2, #14
 80045c0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <HAL_DMA_Abort_IT+0x260>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a29      	ldr	r2, [pc, #164]	; (8004678 <HAL_DMA_Abort_IT+0x264>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_DMA_Abort_IT+0x268>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <HAL_DMA_Abort_IT+0x26c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a25      	ldr	r2, [pc, #148]	; (8004684 <HAL_DMA_Abort_IT+0x270>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a23      	ldr	r2, [pc, #140]	; (8004688 <HAL_DMA_Abort_IT+0x274>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a22      	ldr	r2, [pc, #136]	; (800468c <HAL_DMA_Abort_IT+0x278>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <HAL_DMA_Abort_IT+0x27c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <HAL_DMA_Abort_IT+0x280>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <HAL_DMA_Abort_IT+0x284>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <HAL_DMA_Abort_IT+0x288>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <HAL_DMA_Abort_IT+0x28c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_DMA_Abort_IT+0x290>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <HAL_DMA_Abort_IT+0x294>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a16      	ldr	r2, [pc, #88]	; (80046ac <HAL_DMA_Abort_IT+0x298>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_DMA_Abort_IT+0x24e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <HAL_DMA_Abort_IT+0x29c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d128      	bne.n	80046b4 <HAL_DMA_Abort_IT+0x2a0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e027      	b.n	80046c4 <HAL_DMA_Abort_IT+0x2b0>
 8004674:	40020010 	.word	0x40020010
 8004678:	40020028 	.word	0x40020028
 800467c:	40020040 	.word	0x40020040
 8004680:	40020058 	.word	0x40020058
 8004684:	40020070 	.word	0x40020070
 8004688:	40020088 	.word	0x40020088
 800468c:	400200a0 	.word	0x400200a0
 8004690:	400200b8 	.word	0x400200b8
 8004694:	40020410 	.word	0x40020410
 8004698:	40020428 	.word	0x40020428
 800469c:	40020440 	.word	0x40020440
 80046a0:	40020458 	.word	0x40020458
 80046a4:	40020470 	.word	0x40020470
 80046a8:	40020488 	.word	0x40020488
 80046ac:	400204a0 	.word	0x400204a0
 80046b0:	400204b8 	.word	0x400204b8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a5c      	ldr	r2, [pc, #368]	; (800483c <HAL_DMA_Abort_IT+0x428>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d072      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a5b      	ldr	r2, [pc, #364]	; (8004840 <HAL_DMA_Abort_IT+0x42c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d06d      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a59      	ldr	r2, [pc, #356]	; (8004844 <HAL_DMA_Abort_IT+0x430>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d068      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_DMA_Abort_IT+0x434>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d063      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a56      	ldr	r2, [pc, #344]	; (800484c <HAL_DMA_Abort_IT+0x438>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d05e      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a55      	ldr	r2, [pc, #340]	; (8004850 <HAL_DMA_Abort_IT+0x43c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d059      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a53      	ldr	r2, [pc, #332]	; (8004854 <HAL_DMA_Abort_IT+0x440>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d054      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a52      	ldr	r2, [pc, #328]	; (8004858 <HAL_DMA_Abort_IT+0x444>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d04f      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a50      	ldr	r2, [pc, #320]	; (800485c <HAL_DMA_Abort_IT+0x448>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d04a      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a4f      	ldr	r2, [pc, #316]	; (8004860 <HAL_DMA_Abort_IT+0x44c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d045      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a4d      	ldr	r2, [pc, #308]	; (8004864 <HAL_DMA_Abort_IT+0x450>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d040      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a4c      	ldr	r2, [pc, #304]	; (8004868 <HAL_DMA_Abort_IT+0x454>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d03b      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a4a      	ldr	r2, [pc, #296]	; (800486c <HAL_DMA_Abort_IT+0x458>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d036      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a49      	ldr	r2, [pc, #292]	; (8004870 <HAL_DMA_Abort_IT+0x45c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d031      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a47      	ldr	r2, [pc, #284]	; (8004874 <HAL_DMA_Abort_IT+0x460>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d02c      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a46      	ldr	r2, [pc, #280]	; (8004878 <HAL_DMA_Abort_IT+0x464>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d027      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a44      	ldr	r2, [pc, #272]	; (800487c <HAL_DMA_Abort_IT+0x468>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d022      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_DMA_Abort_IT+0x46c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d01d      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a41      	ldr	r2, [pc, #260]	; (8004884 <HAL_DMA_Abort_IT+0x470>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d018      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a40      	ldr	r2, [pc, #256]	; (8004888 <HAL_DMA_Abort_IT+0x474>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a3e      	ldr	r2, [pc, #248]	; (800488c <HAL_DMA_Abort_IT+0x478>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00e      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3d      	ldr	r2, [pc, #244]	; (8004890 <HAL_DMA_Abort_IT+0x47c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d009      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <HAL_DMA_Abort_IT+0x480>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x3a0>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3a      	ldr	r2, [pc, #232]	; (8004898 <HAL_DMA_Abort_IT+0x484>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d101      	bne.n	80047b8 <HAL_DMA_Abort_IT+0x3a4>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <HAL_DMA_Abort_IT+0x3a6>
 80047b8:	2300      	movs	r3, #0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d028      	beq.n	8004810 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2201      	movs	r2, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004804:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800480e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40020010 	.word	0x40020010
 8004840:	40020028 	.word	0x40020028
 8004844:	40020040 	.word	0x40020040
 8004848:	40020058 	.word	0x40020058
 800484c:	40020070 	.word	0x40020070
 8004850:	40020088 	.word	0x40020088
 8004854:	400200a0 	.word	0x400200a0
 8004858:	400200b8 	.word	0x400200b8
 800485c:	40020410 	.word	0x40020410
 8004860:	40020428 	.word	0x40020428
 8004864:	40020440 	.word	0x40020440
 8004868:	40020458 	.word	0x40020458
 800486c:	40020470 	.word	0x40020470
 8004870:	40020488 	.word	0x40020488
 8004874:	400204a0 	.word	0x400204a0
 8004878:	400204b8 	.word	0x400204b8
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494

0800489c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048a8:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <HAL_DMA_IRQHandler+0x1ac>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a67      	ldr	r2, [pc, #412]	; (8004a4c <HAL_DMA_IRQHandler+0x1b0>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a5f      	ldr	r2, [pc, #380]	; (8004a50 <HAL_DMA_IRQHandler+0x1b4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5d      	ldr	r2, [pc, #372]	; (8004a54 <HAL_DMA_IRQHandler+0x1b8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5c      	ldr	r2, [pc, #368]	; (8004a58 <HAL_DMA_IRQHandler+0x1bc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5a      	ldr	r2, [pc, #360]	; (8004a5c <HAL_DMA_IRQHandler+0x1c0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a59      	ldr	r2, [pc, #356]	; (8004a60 <HAL_DMA_IRQHandler+0x1c4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <HAL_DMA_IRQHandler+0x1c8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a56      	ldr	r2, [pc, #344]	; (8004a68 <HAL_DMA_IRQHandler+0x1cc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a54      	ldr	r2, [pc, #336]	; (8004a6c <HAL_DMA_IRQHandler+0x1d0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a53      	ldr	r2, [pc, #332]	; (8004a70 <HAL_DMA_IRQHandler+0x1d4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a51      	ldr	r2, [pc, #324]	; (8004a74 <HAL_DMA_IRQHandler+0x1d8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a50      	ldr	r2, [pc, #320]	; (8004a78 <HAL_DMA_IRQHandler+0x1dc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a4e      	ldr	r2, [pc, #312]	; (8004a7c <HAL_DMA_IRQHandler+0x1e0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a4d      	ldr	r2, [pc, #308]	; (8004a80 <HAL_DMA_IRQHandler+0x1e4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a4b      	ldr	r2, [pc, #300]	; (8004a84 <HAL_DMA_IRQHandler+0x1e8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4a      	ldr	r2, [pc, #296]	; (8004a88 <HAL_DMA_IRQHandler+0x1ec>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_DMA_IRQHandler+0xd2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a48      	ldr	r2, [pc, #288]	; (8004a8c <HAL_DMA_IRQHandler+0x1f0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_DMA_IRQHandler+0xd6>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_DMA_IRQHandler+0xd8>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 842b 	beq.w	80051d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2208      	movs	r2, #8
 8004984:	409a      	lsls	r2, r3
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80a2 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2e      	ldr	r2, [pc, #184]	; (8004a50 <HAL_DMA_IRQHandler+0x1b4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d04a      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2d      	ldr	r2, [pc, #180]	; (8004a54 <HAL_DMA_IRQHandler+0x1b8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d045      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <HAL_DMA_IRQHandler+0x1bc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d040      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_DMA_IRQHandler+0x1c0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d03b      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <HAL_DMA_IRQHandler+0x1c4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d036      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_DMA_IRQHandler+0x1c8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d031      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <HAL_DMA_IRQHandler+0x1cc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02c      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_DMA_IRQHandler+0x1d0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d027      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <HAL_DMA_IRQHandler+0x1d4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <HAL_DMA_IRQHandler+0x1d8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d01d      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <HAL_DMA_IRQHandler+0x1dc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <HAL_DMA_IRQHandler+0x1e0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <HAL_DMA_IRQHandler+0x1e4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <HAL_DMA_IRQHandler+0x1e8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_DMA_IRQHandler+0x1ec>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x194>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_DMA_IRQHandler+0x1f0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d12f      	bne.n	8004a90 <HAL_DMA_IRQHandler+0x1f4>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e02e      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x208>
 8004a46:	bf00      	nop
 8004a48:	24000010 	.word	0x24000010
 8004a4c:	1b4e81b5 	.word	0x1b4e81b5
 8004a50:	40020010 	.word	0x40020010
 8004a54:	40020028 	.word	0x40020028
 8004a58:	40020040 	.word	0x40020040
 8004a5c:	40020058 	.word	0x40020058
 8004a60:	40020070 	.word	0x40020070
 8004a64:	40020088 	.word	0x40020088
 8004a68:	400200a0 	.word	0x400200a0
 8004a6c:	400200b8 	.word	0x400200b8
 8004a70:	40020410 	.word	0x40020410
 8004a74:	40020428 	.word	0x40020428
 8004a78:	40020440 	.word	0x40020440
 8004a7c:	40020458 	.word	0x40020458
 8004a80:	40020470 	.word	0x40020470
 8004a84:	40020488 	.word	0x40020488
 8004a88:	400204a0 	.word	0x400204a0
 8004a8c:	400204b8 	.word	0x400204b8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d015      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	f043 0201 	orr.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d06e      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a69      	ldr	r2, [pc, #420]	; (8004c94 <HAL_DMA_IRQHandler+0x3f8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d04a      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_DMA_IRQHandler+0x3fc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d045      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a66      	ldr	r2, [pc, #408]	; (8004c9c <HAL_DMA_IRQHandler+0x400>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d040      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a64      	ldr	r2, [pc, #400]	; (8004ca0 <HAL_DMA_IRQHandler+0x404>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d03b      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a63      	ldr	r2, [pc, #396]	; (8004ca4 <HAL_DMA_IRQHandler+0x408>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d036      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a61      	ldr	r2, [pc, #388]	; (8004ca8 <HAL_DMA_IRQHandler+0x40c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d031      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a60      	ldr	r2, [pc, #384]	; (8004cac <HAL_DMA_IRQHandler+0x410>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d02c      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5e      	ldr	r2, [pc, #376]	; (8004cb0 <HAL_DMA_IRQHandler+0x414>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d027      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5d      	ldr	r2, [pc, #372]	; (8004cb4 <HAL_DMA_IRQHandler+0x418>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d022      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5b      	ldr	r2, [pc, #364]	; (8004cb8 <HAL_DMA_IRQHandler+0x41c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01d      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5a      	ldr	r2, [pc, #360]	; (8004cbc <HAL_DMA_IRQHandler+0x420>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d018      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <HAL_DMA_IRQHandler+0x424>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <HAL_DMA_IRQHandler+0x428>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00e      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a55      	ldr	r2, [pc, #340]	; (8004cc8 <HAL_DMA_IRQHandler+0x42c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d009      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a54      	ldr	r2, [pc, #336]	; (8004ccc <HAL_DMA_IRQHandler+0x430>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2ee>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_DMA_IRQHandler+0x434>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d10a      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x304>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e003      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x30c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	f043 0202 	orr.w	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 808f 	beq.w	8004cfc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <HAL_DMA_IRQHandler+0x3f8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d04a      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <HAL_DMA_IRQHandler+0x3fc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d045      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <HAL_DMA_IRQHandler+0x400>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d040      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <HAL_DMA_IRQHandler+0x404>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d03b      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <HAL_DMA_IRQHandler+0x408>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d036      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_DMA_IRQHandler+0x40c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d031      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a23      	ldr	r2, [pc, #140]	; (8004cac <HAL_DMA_IRQHandler+0x410>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d02c      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <HAL_DMA_IRQHandler+0x414>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d027      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <HAL_DMA_IRQHandler+0x418>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d022      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <HAL_DMA_IRQHandler+0x41c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01d      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <HAL_DMA_IRQHandler+0x420>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <HAL_DMA_IRQHandler+0x424>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	; (8004cc4 <HAL_DMA_IRQHandler+0x428>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <HAL_DMA_IRQHandler+0x42c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <HAL_DMA_IRQHandler+0x430>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x3e2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <HAL_DMA_IRQHandler+0x434>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d12a      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0x438>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e023      	b.n	8004cdc <HAL_DMA_IRQHandler+0x440>
 8004c94:	40020010 	.word	0x40020010
 8004c98:	40020028 	.word	0x40020028
 8004c9c:	40020040 	.word	0x40020040
 8004ca0:	40020058 	.word	0x40020058
 8004ca4:	40020070 	.word	0x40020070
 8004ca8:	40020088 	.word	0x40020088
 8004cac:	400200a0 	.word	0x400200a0
 8004cb0:	400200b8 	.word	0x400200b8
 8004cb4:	40020410 	.word	0x40020410
 8004cb8:	40020428 	.word	0x40020428
 8004cbc:	40020440 	.word	0x40020440
 8004cc0:	40020458 	.word	0x40020458
 8004cc4:	40020470 	.word	0x40020470
 8004cc8:	40020488 	.word	0x40020488
 8004ccc:	400204a0 	.word	0x400204a0
 8004cd0:	400204b8 	.word	0x400204b8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2204      	movs	r2, #4
 8004cea:	409a      	lsls	r2, r3
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0204 	orr.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2210      	movs	r2, #16
 8004d06:	409a      	lsls	r2, r3
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a6 	beq.w	8004e5e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a85      	ldr	r2, [pc, #532]	; (8004f2c <HAL_DMA_IRQHandler+0x690>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d04a      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a83      	ldr	r2, [pc, #524]	; (8004f30 <HAL_DMA_IRQHandler+0x694>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d045      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a82      	ldr	r2, [pc, #520]	; (8004f34 <HAL_DMA_IRQHandler+0x698>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d040      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a80      	ldr	r2, [pc, #512]	; (8004f38 <HAL_DMA_IRQHandler+0x69c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d03b      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7f      	ldr	r2, [pc, #508]	; (8004f3c <HAL_DMA_IRQHandler+0x6a0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d036      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a7d      	ldr	r2, [pc, #500]	; (8004f40 <HAL_DMA_IRQHandler+0x6a4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d031      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a7c      	ldr	r2, [pc, #496]	; (8004f44 <HAL_DMA_IRQHandler+0x6a8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d02c      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a7a      	ldr	r2, [pc, #488]	; (8004f48 <HAL_DMA_IRQHandler+0x6ac>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d027      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a79      	ldr	r2, [pc, #484]	; (8004f4c <HAL_DMA_IRQHandler+0x6b0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a77      	ldr	r2, [pc, #476]	; (8004f50 <HAL_DMA_IRQHandler+0x6b4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a76      	ldr	r2, [pc, #472]	; (8004f54 <HAL_DMA_IRQHandler+0x6b8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a74      	ldr	r2, [pc, #464]	; (8004f58 <HAL_DMA_IRQHandler+0x6bc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a73      	ldr	r2, [pc, #460]	; (8004f5c <HAL_DMA_IRQHandler+0x6c0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a71      	ldr	r2, [pc, #452]	; (8004f60 <HAL_DMA_IRQHandler+0x6c4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a70      	ldr	r2, [pc, #448]	; (8004f64 <HAL_DMA_IRQHandler+0x6c8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x516>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6e      	ldr	r2, [pc, #440]	; (8004f68 <HAL_DMA_IRQHandler+0x6cc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10a      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x52c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e009      	b.n	8004ddc <HAL_DMA_IRQHandler+0x540>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf14      	ite	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	2300      	moveq	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03e      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2210      	movs	r2, #16
 8004dea:	409a      	lsls	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d108      	bne.n	8004e1e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d024      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	e01f      	b.n	8004e5e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
 8004e2e:	e016      	b.n	8004e5e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0208 	bic.w	r2, r2, #8
 8004e4c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2220      	movs	r2, #32
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8110 	beq.w	8005094 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <HAL_DMA_IRQHandler+0x690>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d04a      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <HAL_DMA_IRQHandler+0x694>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d045      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a29      	ldr	r2, [pc, #164]	; (8004f34 <HAL_DMA_IRQHandler+0x698>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d040      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <HAL_DMA_IRQHandler+0x69c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d03b      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <HAL_DMA_IRQHandler+0x6a0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d036      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <HAL_DMA_IRQHandler+0x6a4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d031      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <HAL_DMA_IRQHandler+0x6a8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d02c      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <HAL_DMA_IRQHandler+0x6ac>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d027      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <HAL_DMA_IRQHandler+0x6b0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d022      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <HAL_DMA_IRQHandler+0x6b4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d01d      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_DMA_IRQHandler+0x6b8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d018      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <HAL_DMA_IRQHandler+0x6bc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_DMA_IRQHandler+0x6c0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_DMA_IRQHandler+0x6c4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <HAL_DMA_IRQHandler+0x6c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x678>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <HAL_DMA_IRQHandler+0x6cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d12b      	bne.n	8004f6c <HAL_DMA_IRQHandler+0x6d0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e02a      	b.n	8004f80 <HAL_DMA_IRQHandler+0x6e4>
 8004f2a:	bf00      	nop
 8004f2c:	40020010 	.word	0x40020010
 8004f30:	40020028 	.word	0x40020028
 8004f34:	40020040 	.word	0x40020040
 8004f38:	40020058 	.word	0x40020058
 8004f3c:	40020070 	.word	0x40020070
 8004f40:	40020088 	.word	0x40020088
 8004f44:	400200a0 	.word	0x400200a0
 8004f48:	400200b8 	.word	0x400200b8
 8004f4c:	40020410 	.word	0x40020410
 8004f50:	40020428 	.word	0x40020428
 8004f54:	40020440 	.word	0x40020440
 8004f58:	40020458 	.word	0x40020458
 8004f5c:	40020470 	.word	0x40020470
 8004f60:	40020488 	.word	0x40020488
 8004f64:	400204a0 	.word	0x400204a0
 8004f68:	400204b8 	.word	0x400204b8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8087 	beq.w	8005094 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2220      	movs	r2, #32
 8004f90:	409a      	lsls	r2, r3
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d139      	bne.n	8005016 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0216 	bic.w	r2, r2, #22
 8004fb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <HAL_DMA_IRQHandler+0x736>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0208 	bic.w	r2, r2, #8
 8004fe0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	223f      	movs	r2, #63	; 0x3f
 8004fec:	409a      	lsls	r2, r3
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 834a 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
          }
          return;
 8005014:	e344      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d018      	beq.n	8005056 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02c      	beq.n	8005094 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
 8005042:	e027      	b.n	8005094 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d023      	beq.n	8005094 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
 8005054:	e01e      	b.n	8005094 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10f      	bne.n	8005084 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0210 	bic.w	r2, r2, #16
 8005072:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8306 	beq.w	80056aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8088 	beq.w	80051bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2204      	movs	r2, #4
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a7a      	ldr	r2, [pc, #488]	; (80052a4 <HAL_DMA_IRQHandler+0xa08>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04a      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a79      	ldr	r2, [pc, #484]	; (80052a8 <HAL_DMA_IRQHandler+0xa0c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a77      	ldr	r2, [pc, #476]	; (80052ac <HAL_DMA_IRQHandler+0xa10>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a76      	ldr	r2, [pc, #472]	; (80052b0 <HAL_DMA_IRQHandler+0xa14>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d03b      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a74      	ldr	r2, [pc, #464]	; (80052b4 <HAL_DMA_IRQHandler+0xa18>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d036      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a73      	ldr	r2, [pc, #460]	; (80052b8 <HAL_DMA_IRQHandler+0xa1c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d031      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a71      	ldr	r2, [pc, #452]	; (80052bc <HAL_DMA_IRQHandler+0xa20>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a70      	ldr	r2, [pc, #448]	; (80052c0 <HAL_DMA_IRQHandler+0xa24>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a6e      	ldr	r2, [pc, #440]	; (80052c4 <HAL_DMA_IRQHandler+0xa28>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6d      	ldr	r2, [pc, #436]	; (80052c8 <HAL_DMA_IRQHandler+0xa2c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6b      	ldr	r2, [pc, #428]	; (80052cc <HAL_DMA_IRQHandler+0xa30>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6a      	ldr	r2, [pc, #424]	; (80052d0 <HAL_DMA_IRQHandler+0xa34>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a68      	ldr	r2, [pc, #416]	; (80052d4 <HAL_DMA_IRQHandler+0xa38>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a67      	ldr	r2, [pc, #412]	; (80052d8 <HAL_DMA_IRQHandler+0xa3c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a65      	ldr	r2, [pc, #404]	; (80052dc <HAL_DMA_IRQHandler+0xa40>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_DMA_IRQHandler+0x8b8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a64      	ldr	r2, [pc, #400]	; (80052e0 <HAL_DMA_IRQHandler+0xa44>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_DMA_IRQHandler+0x8ca>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <HAL_DMA_IRQHandler+0x8da>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3301      	adds	r3, #1
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	429a      	cmp	r2, r3
 8005180:	d307      	bcc.n	8005192 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f2      	bne.n	8005176 <HAL_DMA_IRQHandler+0x8da>
 8005190:	e000      	b.n	8005194 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005192:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80051aa:	e003      	b.n	80051b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8272 	beq.w	80056aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
 80051ce:	e26c      	b.n	80056aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a43      	ldr	r2, [pc, #268]	; (80052e4 <HAL_DMA_IRQHandler+0xa48>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <HAL_DMA_IRQHandler+0xa4c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01d      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a40      	ldr	r2, [pc, #256]	; (80052ec <HAL_DMA_IRQHandler+0xa50>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <HAL_DMA_IRQHandler+0xa54>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3d      	ldr	r2, [pc, #244]	; (80052f4 <HAL_DMA_IRQHandler+0xa58>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3c      	ldr	r2, [pc, #240]	; (80052f8 <HAL_DMA_IRQHandler+0xa5c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_DMA_IRQHandler+0xa60>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_DMA_IRQHandler+0x984>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a39      	ldr	r2, [pc, #228]	; (8005300 <HAL_DMA_IRQHandler+0xa64>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_DMA_IRQHandler+0x988>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_DMA_IRQHandler+0x98a>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 823f 	beq.w	80056aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	2204      	movs	r2, #4
 800523e:	409a      	lsls	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80cd 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xb48>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80c7 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2204      	movs	r2, #4
 8005260:	409a      	lsls	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d049      	beq.n	8005304 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 8210 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800528c:	e20a      	b.n	80056a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8206 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052a0:	e200      	b.n	80056a4 <HAL_DMA_IRQHandler+0xe08>
 80052a2:	bf00      	nop
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8
 80052e4:	58025408 	.word	0x58025408
 80052e8:	5802541c 	.word	0x5802541c
 80052ec:	58025430 	.word	0x58025430
 80052f0:	58025444 	.word	0x58025444
 80052f4:	58025458 	.word	0x58025458
 80052f8:	5802546c 	.word	0x5802546c
 80052fc:	58025480 	.word	0x58025480
 8005300:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d160      	bne.n	80053d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a8c      	ldr	r2, [pc, #560]	; (8005544 <HAL_DMA_IRQHandler+0xca8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d04a      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a8a      	ldr	r2, [pc, #552]	; (8005548 <HAL_DMA_IRQHandler+0xcac>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d045      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a89      	ldr	r2, [pc, #548]	; (800554c <HAL_DMA_IRQHandler+0xcb0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d040      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a87      	ldr	r2, [pc, #540]	; (8005550 <HAL_DMA_IRQHandler+0xcb4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d03b      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a86      	ldr	r2, [pc, #536]	; (8005554 <HAL_DMA_IRQHandler+0xcb8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d036      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a84      	ldr	r2, [pc, #528]	; (8005558 <HAL_DMA_IRQHandler+0xcbc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d031      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a83      	ldr	r2, [pc, #524]	; (800555c <HAL_DMA_IRQHandler+0xcc0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d02c      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a81      	ldr	r2, [pc, #516]	; (8005560 <HAL_DMA_IRQHandler+0xcc4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d027      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a80      	ldr	r2, [pc, #512]	; (8005564 <HAL_DMA_IRQHandler+0xcc8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d022      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a7e      	ldr	r2, [pc, #504]	; (8005568 <HAL_DMA_IRQHandler+0xccc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a7d      	ldr	r2, [pc, #500]	; (800556c <HAL_DMA_IRQHandler+0xcd0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a7b      	ldr	r2, [pc, #492]	; (8005570 <HAL_DMA_IRQHandler+0xcd4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7a      	ldr	r2, [pc, #488]	; (8005574 <HAL_DMA_IRQHandler+0xcd8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a78      	ldr	r2, [pc, #480]	; (8005578 <HAL_DMA_IRQHandler+0xcdc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a77      	ldr	r2, [pc, #476]	; (800557c <HAL_DMA_IRQHandler+0xce0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_DMA_IRQHandler+0xb12>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a75      	ldr	r2, [pc, #468]	; (8005580 <HAL_DMA_IRQHandler+0xce4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <HAL_DMA_IRQHandler+0xb24>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0208 	bic.w	r2, r2, #8
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e007      	b.n	80053d0 <HAL_DMA_IRQHandler+0xb34>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8165 	beq.w	80056a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e2:	e15f      	b.n	80056a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2202      	movs	r2, #2
 80053ee:	409a      	lsls	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80c5 	beq.w	8005584 <HAL_DMA_IRQHandler+0xce8>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80bf 	beq.w	8005584 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2202      	movs	r2, #2
 8005410:	409a      	lsls	r2, r3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d018      	beq.n	8005452 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 813a 	beq.w	80056a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543c:	e134      	b.n	80056a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8130 	beq.w	80056a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005450:	e12a      	b.n	80056a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d168      	bne.n	800552e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a38      	ldr	r2, [pc, #224]	; (8005544 <HAL_DMA_IRQHandler+0xca8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d04a      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a37      	ldr	r2, [pc, #220]	; (8005548 <HAL_DMA_IRQHandler+0xcac>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d045      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a35      	ldr	r2, [pc, #212]	; (800554c <HAL_DMA_IRQHandler+0xcb0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d040      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_DMA_IRQHandler+0xcb4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d03b      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a32      	ldr	r2, [pc, #200]	; (8005554 <HAL_DMA_IRQHandler+0xcb8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d036      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_DMA_IRQHandler+0xcbc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d031      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2f      	ldr	r2, [pc, #188]	; (800555c <HAL_DMA_IRQHandler+0xcc0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02c      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <HAL_DMA_IRQHandler+0xcc4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d027      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <HAL_DMA_IRQHandler+0xcc8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <HAL_DMA_IRQHandler+0xccc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01d      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a29      	ldr	r2, [pc, #164]	; (800556c <HAL_DMA_IRQHandler+0xcd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_DMA_IRQHandler+0xcd4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <HAL_DMA_IRQHandler+0xcd8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_DMA_IRQHandler+0xcdc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a23      	ldr	r2, [pc, #140]	; (800557c <HAL_DMA_IRQHandler+0xce0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_DMA_IRQHandler+0xc60>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_DMA_IRQHandler+0xce4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d108      	bne.n	800550e <HAL_DMA_IRQHandler+0xc72>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0214 	bic.w	r2, r2, #20
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e007      	b.n	800551e <HAL_DMA_IRQHandler+0xc82>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 020a 	bic.w	r2, r2, #10
 800551c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80b8 	beq.w	80056a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005540:	e0b2      	b.n	80056a8 <HAL_DMA_IRQHandler+0xe0c>
 8005542:	bf00      	nop
 8005544:	40020010 	.word	0x40020010
 8005548:	40020028 	.word	0x40020028
 800554c:	40020040 	.word	0x40020040
 8005550:	40020058 	.word	0x40020058
 8005554:	40020070 	.word	0x40020070
 8005558:	40020088 	.word	0x40020088
 800555c:	400200a0 	.word	0x400200a0
 8005560:	400200b8 	.word	0x400200b8
 8005564:	40020410 	.word	0x40020410
 8005568:	40020428 	.word	0x40020428
 800556c:	40020440 	.word	0x40020440
 8005570:	40020458 	.word	0x40020458
 8005574:	40020470 	.word	0x40020470
 8005578:	40020488 	.word	0x40020488
 800557c:	400204a0 	.word	0x400204a0
 8005580:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2208      	movs	r2, #8
 800558e:	409a      	lsls	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8088 	beq.w	80056aa <HAL_DMA_IRQHandler+0xe0e>
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8082 	beq.w	80056aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a41      	ldr	r2, [pc, #260]	; (80056b0 <HAL_DMA_IRQHandler+0xe14>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d04a      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3f      	ldr	r2, [pc, #252]	; (80056b4 <HAL_DMA_IRQHandler+0xe18>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d045      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a3e      	ldr	r2, [pc, #248]	; (80056b8 <HAL_DMA_IRQHandler+0xe1c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d040      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a3c      	ldr	r2, [pc, #240]	; (80056bc <HAL_DMA_IRQHandler+0xe20>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d03b      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a3b      	ldr	r2, [pc, #236]	; (80056c0 <HAL_DMA_IRQHandler+0xe24>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d036      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a39      	ldr	r2, [pc, #228]	; (80056c4 <HAL_DMA_IRQHandler+0xe28>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d031      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a38      	ldr	r2, [pc, #224]	; (80056c8 <HAL_DMA_IRQHandler+0xe2c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d02c      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a36      	ldr	r2, [pc, #216]	; (80056cc <HAL_DMA_IRQHandler+0xe30>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d027      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <HAL_DMA_IRQHandler+0xe34>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d022      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a33      	ldr	r2, [pc, #204]	; (80056d4 <HAL_DMA_IRQHandler+0xe38>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01d      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a32      	ldr	r2, [pc, #200]	; (80056d8 <HAL_DMA_IRQHandler+0xe3c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a30      	ldr	r2, [pc, #192]	; (80056dc <HAL_DMA_IRQHandler+0xe40>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <HAL_DMA_IRQHandler+0xe44>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <HAL_DMA_IRQHandler+0xe48>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <HAL_DMA_IRQHandler+0xe4c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_DMA_IRQHandler+0xdaa>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <HAL_DMA_IRQHandler+0xe50>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <HAL_DMA_IRQHandler+0xdbc>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 021c 	bic.w	r2, r2, #28
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e007      	b.n	8005668 <HAL_DMA_IRQHandler+0xdcc>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 020e 	bic.w	r2, r2, #14
 8005666:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	e004      	b.n	80056aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056aa:	3728      	adds	r7, #40	; 0x28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40020010 	.word	0x40020010
 80056b4:	40020028 	.word	0x40020028
 80056b8:	40020040 	.word	0x40020040
 80056bc:	40020058 	.word	0x40020058
 80056c0:	40020070 	.word	0x40020070
 80056c4:	40020088 	.word	0x40020088
 80056c8:	400200a0 	.word	0x400200a0
 80056cc:	400200b8 	.word	0x400200b8
 80056d0:	40020410 	.word	0x40020410
 80056d4:	40020428 	.word	0x40020428
 80056d8:	40020440 	.word	0x40020440
 80056dc:	40020458 	.word	0x40020458
 80056e0:	40020470 	.word	0x40020470
 80056e4:	40020488 	.word	0x40020488
 80056e8:	400204a0 	.word	0x400204a0
 80056ec:	400204b8 	.word	0x400204b8

080056f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a42      	ldr	r2, [pc, #264]	; (8005808 <DMA_CalcBaseAndBitshift+0x118>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a41      	ldr	r2, [pc, #260]	; (800580c <DMA_CalcBaseAndBitshift+0x11c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3f      	ldr	r2, [pc, #252]	; (8005810 <DMA_CalcBaseAndBitshift+0x120>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a3e      	ldr	r2, [pc, #248]	; (8005814 <DMA_CalcBaseAndBitshift+0x124>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a3c      	ldr	r2, [pc, #240]	; (8005818 <DMA_CalcBaseAndBitshift+0x128>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a3b      	ldr	r2, [pc, #236]	; (800581c <DMA_CalcBaseAndBitshift+0x12c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a39      	ldr	r2, [pc, #228]	; (8005820 <DMA_CalcBaseAndBitshift+0x130>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a38      	ldr	r2, [pc, #224]	; (8005824 <DMA_CalcBaseAndBitshift+0x134>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a36      	ldr	r2, [pc, #216]	; (8005828 <DMA_CalcBaseAndBitshift+0x138>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a35      	ldr	r2, [pc, #212]	; (800582c <DMA_CalcBaseAndBitshift+0x13c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a33      	ldr	r2, [pc, #204]	; (8005830 <DMA_CalcBaseAndBitshift+0x140>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a32      	ldr	r2, [pc, #200]	; (8005834 <DMA_CalcBaseAndBitshift+0x144>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a30      	ldr	r2, [pc, #192]	; (8005838 <DMA_CalcBaseAndBitshift+0x148>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2f      	ldr	r2, [pc, #188]	; (800583c <DMA_CalcBaseAndBitshift+0x14c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <DMA_CalcBaseAndBitshift+0x150>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <DMA_CalcBaseAndBitshift+0xa8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <DMA_CalcBaseAndBitshift+0x154>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <DMA_CalcBaseAndBitshift+0xac>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <DMA_CalcBaseAndBitshift+0xae>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d024      	beq.n	80057ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3b10      	subs	r3, #16
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <DMA_CalcBaseAndBitshift+0x158>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	4a24      	ldr	r2, [pc, #144]	; (800584c <DMA_CalcBaseAndBitshift+0x15c>)
 80057bc:	5cd3      	ldrb	r3, [r2, r3]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d908      	bls.n	80057dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <DMA_CalcBaseAndBitshift+0x160>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	659a      	str	r2, [r3, #88]	; 0x58
 80057da:	e00d      	b.n	80057f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b1b      	ldr	r3, [pc, #108]	; (8005850 <DMA_CalcBaseAndBitshift+0x160>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ea:	e005      	b.n	80057f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
 8005848:	aaaaaaab 	.word	0xaaaaaaab
 800584c:	0800efe8 	.word	0x0800efe8
 8005850:	fffffc00 	.word	0xfffffc00

08005854 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d120      	bne.n	80058aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	2b03      	cmp	r3, #3
 800586e:	d858      	bhi.n	8005922 <DMA_CheckFifoParam+0xce>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <DMA_CheckFifoParam+0x24>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005889 	.word	0x08005889
 800587c:	0800589b 	.word	0x0800589b
 8005880:	08005889 	.word	0x08005889
 8005884:	08005923 	.word	0x08005923
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d048      	beq.n	8005926 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005898:	e045      	b.n	8005926 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058a2:	d142      	bne.n	800592a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058a8:	e03f      	b.n	800592a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	d123      	bne.n	80058fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d838      	bhi.n	800592e <DMA_CheckFifoParam+0xda>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <DMA_CheckFifoParam+0x70>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058db 	.word	0x080058db
 80058cc:	080058d5 	.word	0x080058d5
 80058d0:	080058ed 	.word	0x080058ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
        break;
 80058d8:	e030      	b.n	800593c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d025      	beq.n	8005932 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ea:	e022      	b.n	8005932 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058f4:	d11f      	bne.n	8005936 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058fa:	e01c      	b.n	8005936 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	2b02      	cmp	r3, #2
 8005902:	d902      	bls.n	800590a <DMA_CheckFifoParam+0xb6>
 8005904:	2b03      	cmp	r3, #3
 8005906:	d003      	beq.n	8005910 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005908:	e018      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
        break;
 800590e:	e015      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
    break;
 8005920:	e00b      	b.n	800593a <DMA_CheckFifoParam+0xe6>
        break;
 8005922:	bf00      	nop
 8005924:	e00a      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        break;
 8005926:	bf00      	nop
 8005928:	e008      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        break;
 800592a:	bf00      	nop
 800592c:	e006      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        break;
 800592e:	bf00      	nop
 8005930:	e004      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        break;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <DMA_CheckFifoParam+0xe8>
        break;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <DMA_CheckFifoParam+0xe8>
    break;
 800593a:	bf00      	nop
    }
  }

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop

0800594c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a38      	ldr	r2, [pc, #224]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a36      	ldr	r2, [pc, #216]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01d      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a35      	ldr	r2, [pc, #212]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a33      	ldr	r2, [pc, #204]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a32      	ldr	r2, [pc, #200]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2d      	ldr	r2, [pc, #180]	; (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01a      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	3b08      	subs	r3, #8
 80059bc:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a24      	ldr	r2, [pc, #144]	; (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	2201      	movs	r2, #1
 80059e2:	409a      	lsls	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059e8:	e024      	b.n	8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	3b10      	subs	r3, #16
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d806      	bhi.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d902      	bls.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	58025408 	.word	0x58025408
 8005a44:	5802541c 	.word	0x5802541c
 8005a48:	58025430 	.word	0x58025430
 8005a4c:	58025444 	.word	0x58025444
 8005a50:	58025458 	.word	0x58025458
 8005a54:	5802546c 	.word	0x5802546c
 8005a58:	58025480 	.word	0x58025480
 8005a5c:	58025494 	.word	0x58025494
 8005a60:	cccccccd 	.word	0xcccccccd
 8005a64:	16009600 	.word	0x16009600
 8005a68:	58025880 	.word	0x58025880
 8005a6c:	aaaaaaab 	.word	0xaaaaaaab
 8005a70:	400204b8 	.word	0x400204b8
 8005a74:	4002040f 	.word	0x4002040f
 8005a78:	10008200 	.word	0x10008200
 8005a7c:	40020880 	.word	0x40020880

08005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04a      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d847      	bhi.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a25      	ldr	r2, [pc, #148]	; (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a24      	ldr	r2, [pc, #144]	; (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b08:	671a      	str	r2, [r3, #112]	; 0x70
 8005b0a:	e009      	b.n	8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b1e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	2201      	movs	r2, #1
 8005b26:	409a      	lsls	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	58025408 	.word	0x58025408
 8005b3c:	5802541c 	.word	0x5802541c
 8005b40:	58025430 	.word	0x58025430
 8005b44:	58025444 	.word	0x58025444
 8005b48:	58025458 	.word	0x58025458
 8005b4c:	5802546c 	.word	0x5802546c
 8005b50:	58025480 	.word	0x58025480
 8005b54:	58025494 	.word	0x58025494
 8005b58:	1600963f 	.word	0x1600963f
 8005b5c:	58025940 	.word	0x58025940
 8005b60:	1000823f 	.word	0x1000823f
 8005b64:	40020940 	.word	0x40020940

08005b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b76:	4b89      	ldr	r3, [pc, #548]	; (8005d9c <HAL_GPIO_Init+0x234>)
 8005b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b7a:	e194      	b.n	8005ea6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	2101      	movs	r1, #1
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	fa01 f303 	lsl.w	r3, r1, r3
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8186 	beq.w	8005ea0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d005      	beq.n	8005bac <HAL_GPIO_Init+0x44>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d130      	bne.n	8005c0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005be2:	2201      	movs	r2, #1
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	091b      	lsrs	r3, r3, #4
 8005bf8:	f003 0201 	and.w	r2, r3, #1
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d017      	beq.n	8005c4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	2203      	movs	r2, #3
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d123      	bne.n	8005c9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	08da      	lsrs	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3208      	adds	r2, #8
 8005c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	220f      	movs	r2, #15
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	08da      	lsrs	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3208      	adds	r2, #8
 8005c98:	69b9      	ldr	r1, [r7, #24]
 8005c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	2203      	movs	r2, #3
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 0203 	and.w	r2, r3, #3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80e0 	beq.w	8005ea0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce0:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_GPIO_Init+0x238>)
 8005ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ce6:	4a2e      	ldr	r2, [pc, #184]	; (8005da0 <HAL_GPIO_Init+0x238>)
 8005ce8:	f043 0302 	orr.w	r3, r3, #2
 8005cec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <HAL_GPIO_Init+0x238>)
 8005cf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cfe:	4a29      	ldr	r2, [pc, #164]	; (8005da4 <HAL_GPIO_Init+0x23c>)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	3302      	adds	r3, #2
 8005d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	220f      	movs	r2, #15
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <HAL_GPIO_Init+0x240>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d052      	beq.n	8005dd0 <HAL_GPIO_Init+0x268>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <HAL_GPIO_Init+0x244>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d031      	beq.n	8005d96 <HAL_GPIO_Init+0x22e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_GPIO_Init+0x248>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d02b      	beq.n	8005d92 <HAL_GPIO_Init+0x22a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_GPIO_Init+0x24c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d025      	beq.n	8005d8e <HAL_GPIO_Init+0x226>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_GPIO_Init+0x250>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01f      	beq.n	8005d8a <HAL_GPIO_Init+0x222>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_GPIO_Init+0x254>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d019      	beq.n	8005d86 <HAL_GPIO_Init+0x21e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1a      	ldr	r2, [pc, #104]	; (8005dc0 <HAL_GPIO_Init+0x258>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_GPIO_Init+0x21a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a19      	ldr	r2, [pc, #100]	; (8005dc4 <HAL_GPIO_Init+0x25c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00d      	beq.n	8005d7e <HAL_GPIO_Init+0x216>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_GPIO_Init+0x260>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <HAL_GPIO_Init+0x212>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <HAL_GPIO_Init+0x264>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d101      	bne.n	8005d76 <HAL_GPIO_Init+0x20e>
 8005d72:	2309      	movs	r3, #9
 8005d74:	e02d      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d76:	230a      	movs	r3, #10
 8005d78:	e02b      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	e029      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d7e:	2307      	movs	r3, #7
 8005d80:	e027      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d82:	2306      	movs	r3, #6
 8005d84:	e025      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d86:	2305      	movs	r3, #5
 8005d88:	e023      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d8a:	2304      	movs	r3, #4
 8005d8c:	e021      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e01f      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e01d      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e01b      	b.n	8005dd2 <HAL_GPIO_Init+0x26a>
 8005d9a:	bf00      	nop
 8005d9c:	58000080 	.word	0x58000080
 8005da0:	58024400 	.word	0x58024400
 8005da4:	58000400 	.word	0x58000400
 8005da8:	58020000 	.word	0x58020000
 8005dac:	58020400 	.word	0x58020400
 8005db0:	58020800 	.word	0x58020800
 8005db4:	58020c00 	.word	0x58020c00
 8005db8:	58021000 	.word	0x58021000
 8005dbc:	58021400 	.word	0x58021400
 8005dc0:	58021800 	.word	0x58021800
 8005dc4:	58021c00 	.word	0x58021c00
 8005dc8:	58022000 	.word	0x58022000
 8005dcc:	58022400 	.word	0x58022400
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	f002 0203 	and.w	r2, r2, #3
 8005dd8:	0092      	lsls	r2, r2, #2
 8005dda:	4093      	lsls	r3, r2
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005de2:	4938      	ldr	r1, [pc, #224]	; (8005ec4 <HAL_GPIO_Init+0x35c>)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	3302      	adds	r3, #2
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f47f ae63 	bne.w	8005b7c <HAL_GPIO_Init+0x14>
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	3724      	adds	r7, #36	; 0x24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	58000400 	.word	0x58000400

08005ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ee4:	e003      	b.n	8005eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	041a      	lsls	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	619a      	str	r2, [r3, #24]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	4603      	mov	r3, r0
 8005f02:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fc f93d 	bl	80021a0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f38:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d00a      	beq.n	8005f5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f44:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d001      	beq.n	8005f56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e01f      	b.n	8005f96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e01d      	b.n	8005f96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f023 0207 	bic.w	r2, r3, #7
 8005f62:	490f      	ldr	r1, [pc, #60]	; (8005fa0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f6a:	f7fd f9bb 	bl	80032e4 <HAL_GetTick>
 8005f6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f70:	e009      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f72:	f7fd f9b7 	bl	80032e4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f80:	d901      	bls.n	8005f86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e007      	b.n	8005f96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f92:	d1ee      	bne.n	8005f72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	58024800 	.word	0x58024800

08005fa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f000 bc1c 	b.w	80067f0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8087 	beq.w	80060d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc6:	4b9e      	ldr	r3, [pc, #632]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd0:	4b9b      	ldr	r3, [pc, #620]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d007      	beq.n	8005fec <HAL_RCC_OscConfig+0x48>
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b18      	cmp	r3, #24
 8005fe0:	d110      	bne.n	8006004 <HAL_RCC_OscConfig+0x60>
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d10b      	bne.n	8006004 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	4b94      	ldr	r3, [pc, #592]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d06c      	beq.n	80060d2 <HAL_RCC_OscConfig+0x12e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d168      	bne.n	80060d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e3f5      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d106      	bne.n	800601c <HAL_RCC_OscConfig+0x78>
 800600e:	4b8c      	ldr	r3, [pc, #560]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a8b      	ldr	r2, [pc, #556]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e02e      	b.n	800607a <HAL_RCC_OscConfig+0xd6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10c      	bne.n	800603e <HAL_RCC_OscConfig+0x9a>
 8006024:	4b86      	ldr	r3, [pc, #536]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a85      	ldr	r2, [pc, #532]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4b83      	ldr	r3, [pc, #524]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a82      	ldr	r2, [pc, #520]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e01d      	b.n	800607a <HAL_RCC_OscConfig+0xd6>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006046:	d10c      	bne.n	8006062 <HAL_RCC_OscConfig+0xbe>
 8006048:	4b7d      	ldr	r3, [pc, #500]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a7c      	ldr	r2, [pc, #496]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800604e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	4b7a      	ldr	r3, [pc, #488]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a79      	ldr	r2, [pc, #484]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800605a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e00b      	b.n	800607a <HAL_RCC_OscConfig+0xd6>
 8006062:	4b77      	ldr	r3, [pc, #476]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a76      	ldr	r2, [pc, #472]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b74      	ldr	r3, [pc, #464]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a73      	ldr	r2, [pc, #460]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006078:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d013      	beq.n	80060aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fd f92f 	bl	80032e4 <HAL_GetTick>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800608a:	f7fd f92b 	bl	80032e4 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b64      	cmp	r3, #100	; 0x64
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e3a9      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800609c:	4b68      	ldr	r3, [pc, #416]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0xe6>
 80060a8:	e014      	b.n	80060d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fd f91b 	bl	80032e4 <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b2:	f7fd f917 	bl	80032e4 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b64      	cmp	r3, #100	; 0x64
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e395      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060c4:	4b5e      	ldr	r3, [pc, #376]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f0      	bne.n	80060b2 <HAL_RCC_OscConfig+0x10e>
 80060d0:	e000      	b.n	80060d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80ca 	beq.w	8006276 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b57      	ldr	r3, [pc, #348]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ec:	4b54      	ldr	r3, [pc, #336]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <HAL_RCC_OscConfig+0x164>
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b18      	cmp	r3, #24
 80060fc:	d156      	bne.n	80061ac <HAL_RCC_OscConfig+0x208>
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d151      	bne.n	80061ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006108:	4b4d      	ldr	r3, [pc, #308]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_OscConfig+0x17c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e367      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006120:	4b47      	ldr	r3, [pc, #284]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f023 0219 	bic.w	r2, r3, #25
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4944      	ldr	r1, [pc, #272]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006132:	f7fd f8d7 	bl	80032e4 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800613a:	f7fd f8d3 	bl	80032e4 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e351      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800614c:	4b3c      	ldr	r3, [pc, #240]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006158:	f7fd f8d0 	bl	80032fc <HAL_GetREVID>
 800615c:	4603      	mov	r3, r0
 800615e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006162:	4293      	cmp	r3, r2
 8006164:	d817      	bhi.n	8006196 <HAL_RCC_OscConfig+0x1f2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d108      	bne.n	8006180 <HAL_RCC_OscConfig+0x1dc>
 800616e:	4b34      	ldr	r3, [pc, #208]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006176:	4a32      	ldr	r2, [pc, #200]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617e:	e07a      	b.n	8006276 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006180:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	492c      	ldr	r1, [pc, #176]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006190:	4313      	orrs	r3, r2
 8006192:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006194:	e06f      	b.n	8006276 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006196:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	061b      	lsls	r3, r3, #24
 80061a4:	4926      	ldr	r1, [pc, #152]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061aa:	e064      	b.n	8006276 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d047      	beq.n	8006244 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061b4:	4b22      	ldr	r3, [pc, #136]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f023 0219 	bic.w	r2, r3, #25
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	491f      	ldr	r1, [pc, #124]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fd f88d 	bl	80032e4 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fd f889 	bl	80032e4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e307      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ec:	f7fd f886 	bl	80032fc <HAL_GetREVID>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d817      	bhi.n	800622a <HAL_RCC_OscConfig+0x286>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d108      	bne.n	8006214 <HAL_RCC_OscConfig+0x270>
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800620a:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800620c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	e030      	b.n	8006276 <HAL_RCC_OscConfig+0x2d2>
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	4907      	ldr	r1, [pc, #28]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 8006224:	4313      	orrs	r3, r2
 8006226:	604b      	str	r3, [r1, #4]
 8006228:	e025      	b.n	8006276 <HAL_RCC_OscConfig+0x2d2>
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	4901      	ldr	r1, [pc, #4]	; (8006240 <HAL_RCC_OscConfig+0x29c>)
 800623a:	4313      	orrs	r3, r2
 800623c:	604b      	str	r3, [r1, #4]
 800623e:	e01a      	b.n	8006276 <HAL_RCC_OscConfig+0x2d2>
 8006240:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006244:	4b9e      	ldr	r3, [pc, #632]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a9d      	ldr	r2, [pc, #628]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fd f848 	bl	80032e4 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006258:	f7fd f844 	bl	80032e4 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e2c2      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800626a:	4b95      	ldr	r3, [pc, #596]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80a9 	beq.w	80063d6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006284:	4b8e      	ldr	r3, [pc, #568]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800628c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800628e:	4b8c      	ldr	r3, [pc, #560]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b08      	cmp	r3, #8
 8006298:	d007      	beq.n	80062aa <HAL_RCC_OscConfig+0x306>
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b18      	cmp	r3, #24
 800629e:	d13a      	bne.n	8006316 <HAL_RCC_OscConfig+0x372>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d135      	bne.n	8006316 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062aa:	4b85      	ldr	r3, [pc, #532]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_RCC_OscConfig+0x31e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d001      	beq.n	80062c2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e296      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062c2:	f7fd f81b 	bl	80032fc <HAL_GetREVID>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d817      	bhi.n	8006300 <HAL_RCC_OscConfig+0x35c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d108      	bne.n	80062ea <HAL_RCC_OscConfig+0x346>
 80062d8:	4b79      	ldr	r3, [pc, #484]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062e0:	4a77      	ldr	r2, [pc, #476]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80062e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062e8:	e075      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ea:	4b75      	ldr	r3, [pc, #468]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	069b      	lsls	r3, r3, #26
 80062f8:	4971      	ldr	r1, [pc, #452]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062fe:	e06a      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006300:	4b6f      	ldr	r3, [pc, #444]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	496c      	ldr	r1, [pc, #432]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006314:	e05f      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d042      	beq.n	80063a4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800631e:	4b68      	ldr	r3, [pc, #416]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a67      	ldr	r2, [pc, #412]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fc ffdb 	bl	80032e4 <HAL_GetTick>
 800632e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006332:	f7fc ffd7 	bl	80032e4 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e255      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006344:	4b5e      	ldr	r3, [pc, #376]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006350:	f7fc ffd4 	bl	80032fc <HAL_GetREVID>
 8006354:	4603      	mov	r3, r0
 8006356:	f241 0203 	movw	r2, #4099	; 0x1003
 800635a:	4293      	cmp	r3, r2
 800635c:	d817      	bhi.n	800638e <HAL_RCC_OscConfig+0x3ea>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	2b20      	cmp	r3, #32
 8006364:	d108      	bne.n	8006378 <HAL_RCC_OscConfig+0x3d4>
 8006366:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800636e:	4a54      	ldr	r2, [pc, #336]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006374:	6053      	str	r3, [r2, #4]
 8006376:	e02e      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
 8006378:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	069b      	lsls	r3, r3, #26
 8006386:	494e      	ldr	r1, [pc, #312]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	604b      	str	r3, [r1, #4]
 800638c:	e023      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
 800638e:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	4948      	ldr	r1, [pc, #288]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	60cb      	str	r3, [r1, #12]
 80063a2:	e018      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063a4:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a45      	ldr	r2, [pc, #276]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80063aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fc ff98 	bl	80032e4 <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063b8:	f7fc ff94 	bl	80032e4 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e212      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063ca:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d036      	beq.n	8006450 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d019      	beq.n	800641e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ea:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80063ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ee:	4a34      	ldr	r2, [pc, #208]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f6:	f7fc ff75 	bl	80032e4 <HAL_GetTick>
 80063fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063fe:	f7fc ff71 	bl	80032e4 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e1ef      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <HAL_RCC_OscConfig+0x45a>
 800641c:	e018      	b.n	8006450 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641e:	4b28      	ldr	r3, [pc, #160]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642a:	f7fc ff5b 	bl	80032e4 <HAL_GetTick>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006432:	f7fc ff57 	bl	80032e4 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e1d5      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f0      	bne.n	8006432 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d039      	beq.n	80064d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d019      	beq.n	8006498 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006464:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800646a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800646e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006470:	f7fc ff38 	bl	80032e4 <HAL_GetTick>
 8006474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006478:	f7fc ff34 	bl	80032e4 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e1b2      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800648a:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x4d4>
 8006496:	e01b      	b.n	80064d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <HAL_RCC_OscConfig+0x51c>)
 800649e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064a4:	f7fc ff1e 	bl	80032e4 <HAL_GetTick>
 80064a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064ac:	f7fc ff1a 	bl	80032e4 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d904      	bls.n	80064c4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e198      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
 80064be:	bf00      	nop
 80064c0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064c4:	4ba3      	ldr	r3, [pc, #652]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ed      	bne.n	80064ac <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8081 	beq.w	80065e0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064de:	4b9e      	ldr	r3, [pc, #632]	; (8006758 <HAL_RCC_OscConfig+0x7b4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a9d      	ldr	r2, [pc, #628]	; (8006758 <HAL_RCC_OscConfig+0x7b4>)
 80064e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ea:	f7fc fefb 	bl	80032e4 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064f2:	f7fc fef7 	bl	80032e4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b64      	cmp	r3, #100	; 0x64
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e175      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006504:	4b94      	ldr	r3, [pc, #592]	; (8006758 <HAL_RCC_OscConfig+0x7b4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d106      	bne.n	8006526 <HAL_RCC_OscConfig+0x582>
 8006518:	4b8e      	ldr	r3, [pc, #568]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a8d      	ldr	r2, [pc, #564]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
 8006524:	e02d      	b.n	8006582 <HAL_RCC_OscConfig+0x5de>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x5a4>
 800652e:	4b89      	ldr	r3, [pc, #548]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	4a88      	ldr	r2, [pc, #544]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	6713      	str	r3, [r2, #112]	; 0x70
 800653a:	4b86      	ldr	r3, [pc, #536]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	4a85      	ldr	r2, [pc, #532]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	6713      	str	r3, [r2, #112]	; 0x70
 8006546:	e01c      	b.n	8006582 <HAL_RCC_OscConfig+0x5de>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b05      	cmp	r3, #5
 800654e:	d10c      	bne.n	800656a <HAL_RCC_OscConfig+0x5c6>
 8006550:	4b80      	ldr	r3, [pc, #512]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4a7f      	ldr	r2, [pc, #508]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	6713      	str	r3, [r2, #112]	; 0x70
 800655c:	4b7d      	ldr	r3, [pc, #500]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	4a7c      	ldr	r2, [pc, #496]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6713      	str	r3, [r2, #112]	; 0x70
 8006568:	e00b      	b.n	8006582 <HAL_RCC_OscConfig+0x5de>
 800656a:	4b7a      	ldr	r3, [pc, #488]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4a79      	ldr	r2, [pc, #484]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	6713      	str	r3, [r2, #112]	; 0x70
 8006576:	4b77      	ldr	r3, [pc, #476]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	4a76      	ldr	r2, [pc, #472]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d015      	beq.n	80065b6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658a:	f7fc feab 	bl	80032e4 <HAL_GetTick>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006590:	e00a      	b.n	80065a8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006592:	f7fc fea7 	bl	80032e4 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e123      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a8:	4b6a      	ldr	r3, [pc, #424]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ee      	beq.n	8006592 <HAL_RCC_OscConfig+0x5ee>
 80065b4:	e014      	b.n	80065e0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b6:	f7fc fe95 	bl	80032e4 <HAL_GetTick>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065bc:	e00a      	b.n	80065d4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065be:	f7fc fe91 	bl	80032e4 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e10d      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065d4:	4b5f      	ldr	r3, [pc, #380]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ee      	bne.n	80065be <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8102 	beq.w	80067ee <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065ea:	4b5a      	ldr	r3, [pc, #360]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f2:	2b18      	cmp	r3, #24
 80065f4:	f000 80bd 	beq.w	8006772 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	f040 8095 	bne.w	800672c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006602:	4b54      	ldr	r3, [pc, #336]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a53      	ldr	r2, [pc, #332]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fc fe69 	bl	80032e4 <HAL_GetTick>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006616:	f7fc fe65 	bl	80032e4 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e0e3      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006628:	4b4a      	ldr	r3, [pc, #296]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006634:	4b47      	ldr	r3, [pc, #284]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006638:	4b48      	ldr	r3, [pc, #288]	; (800675c <HAL_RCC_OscConfig+0x7b8>)
 800663a:	4013      	ands	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006644:	0112      	lsls	r2, r2, #4
 8006646:	430a      	orrs	r2, r1
 8006648:	4942      	ldr	r1, [pc, #264]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800664a:	4313      	orrs	r3, r2
 800664c:	628b      	str	r3, [r1, #40]	; 0x28
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	3b01      	subs	r3, #1
 8006654:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	3b01      	subs	r3, #1
 800665e:	025b      	lsls	r3, r3, #9
 8006660:	b29b      	uxth	r3, r3
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	3b01      	subs	r3, #1
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	3b01      	subs	r3, #1
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800667e:	4935      	ldr	r1, [pc, #212]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006680:	4313      	orrs	r3, r2
 8006682:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006684:	4b33      	ldr	r3, [pc, #204]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	4a32      	ldr	r2, [pc, #200]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006690:	4b30      	ldr	r3, [pc, #192]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006694:	4b32      	ldr	r3, [pc, #200]	; (8006760 <HAL_RCC_OscConfig+0x7bc>)
 8006696:	4013      	ands	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800669c:	00d2      	lsls	r2, r2, #3
 800669e:	492d      	ldr	r1, [pc, #180]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066a4:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	f023 020c 	bic.w	r2, r3, #12
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	4928      	ldr	r1, [pc, #160]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066b6:	4b27      	ldr	r3, [pc, #156]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	f023 0202 	bic.w	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	4924      	ldr	r1, [pc, #144]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066c8:	4b22      	ldr	r3, [pc, #136]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	4a21      	ldr	r2, [pc, #132]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d4:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066e0:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a1b      	ldr	r2, [pc, #108]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f8:	4b16      	ldr	r3, [pc, #88]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 80066fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fc fdee 	bl	80032e4 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670c:	f7fc fdea 	bl	80032e4 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e068      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x768>
 800672a:	e060      	b.n	80067ee <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <HAL_RCC_OscConfig+0x7b0>)
 8006732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fc fdd4 	bl	80032e4 <HAL_GetTick>
 800673c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800673e:	e011      	b.n	8006764 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006740:	f7fc fdd0 	bl	80032e4 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d90a      	bls.n	8006764 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e04e      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
 8006752:	bf00      	nop
 8006754:	58024400 	.word	0x58024400
 8006758:	58024800 	.word	0x58024800
 800675c:	fffffc0c 	.word	0xfffffc0c
 8006760:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006764:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_OscConfig+0x854>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e7      	bne.n	8006740 <HAL_RCC_OscConfig+0x79c>
 8006770:	e03d      	b.n	80067ee <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006772:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <HAL_RCC_OscConfig+0x854>)
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006778:	4b1f      	ldr	r3, [pc, #124]	; (80067f8 <HAL_RCC_OscConfig+0x854>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b01      	cmp	r3, #1
 8006784:	d031      	beq.n	80067ea <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f003 0203 	and.w	r2, r3, #3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d12a      	bne.n	80067ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d122      	bne.n	80067ea <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d11a      	bne.n	80067ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	0a5b      	lsrs	r3, r3, #9
 80067b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d111      	bne.n	80067ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d108      	bne.n	80067ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	0e1b      	lsrs	r3, r3, #24
 80067dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d001      	beq.n	80067ee <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3730      	adds	r7, #48	; 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	58024400 	.word	0x58024400

080067fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e19c      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006810:	4b8a      	ldr	r3, [pc, #552]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d910      	bls.n	8006840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b87      	ldr	r3, [pc, #540]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 020f 	bic.w	r2, r3, #15
 8006826:	4985      	ldr	r1, [pc, #532]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b83      	ldr	r3, [pc, #524]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e184      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	4b7b      	ldr	r3, [pc, #492]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006858:	429a      	cmp	r2, r3
 800685a:	d908      	bls.n	800686e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800685c:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	4975      	ldr	r1, [pc, #468]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800686a:	4313      	orrs	r3, r2
 800686c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006886:	429a      	cmp	r2, r3
 8006888:	d908      	bls.n	800689c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800688a:	4b6d      	ldr	r3, [pc, #436]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	496a      	ldr	r1, [pc, #424]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006898:	4313      	orrs	r3, r2
 800689a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d010      	beq.n	80068ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	4b64      	ldr	r3, [pc, #400]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d908      	bls.n	80068ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068b8:	4b61      	ldr	r3, [pc, #388]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	495e      	ldr	r1, [pc, #376]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d010      	beq.n	80068f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	4b59      	ldr	r3, [pc, #356]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d908      	bls.n	80068f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068e6:	4b56      	ldr	r3, [pc, #344]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	4953      	ldr	r1, [pc, #332]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d010      	beq.n	8006926 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	4b4d      	ldr	r3, [pc, #308]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	429a      	cmp	r2, r3
 8006912:	d908      	bls.n	8006926 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f023 020f 	bic.w	r2, r3, #15
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	4947      	ldr	r1, [pc, #284]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006922:	4313      	orrs	r3, r2
 8006924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d055      	beq.n	80069de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006932:	4b43      	ldr	r3, [pc, #268]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	4940      	ldr	r1, [pc, #256]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006940:	4313      	orrs	r3, r2
 8006942:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d107      	bne.n	800695c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800694c:	4b3c      	ldr	r3, [pc, #240]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d121      	bne.n	800699c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0f6      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d107      	bne.n	8006974 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006964:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d115      	bne.n	800699c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0ea      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800697c:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0de      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800698c:	4b2c      	ldr	r3, [pc, #176]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0d6      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800699c:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f023 0207 	bic.w	r2, r3, #7
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4925      	ldr	r1, [pc, #148]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ae:	f7fc fc99 	bl	80032e4 <HAL_GetTick>
 80069b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b4:	e00a      	b.n	80069cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b6:	f7fc fc95 	bl	80032e4 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e0be      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069cc:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	429a      	cmp	r2, r3
 80069dc:	d1eb      	bne.n	80069b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d208      	bcs.n	8006a0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fa:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f023 020f 	bic.w	r2, r3, #15
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	490e      	ldr	r1, [pc, #56]	; (8006a40 <HAL_RCC_ClockConfig+0x244>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d214      	bcs.n	8006a44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f023 020f 	bic.w	r2, r3, #15
 8006a22:	4906      	ldr	r1, [pc, #24]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2a:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <HAL_RCC_ClockConfig+0x240>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d005      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e086      	b.n	8006b4a <HAL_RCC_ClockConfig+0x34e>
 8006a3c:	52002000 	.word	0x52002000
 8006a40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	4b3f      	ldr	r3, [pc, #252]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d208      	bcs.n	8006a72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a60:	4b3c      	ldr	r3, [pc, #240]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	4939      	ldr	r1, [pc, #228]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d010      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	4b34      	ldr	r3, [pc, #208]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d208      	bcs.n	8006aa0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a8e:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	492e      	ldr	r1, [pc, #184]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d208      	bcs.n	8006ace <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	4922      	ldr	r1, [pc, #136]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d010      	beq.n	8006afc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d208      	bcs.n	8006afc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	4917      	ldr	r1, [pc, #92]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006afc:	f000 f834 	bl	8006b68 <HAL_RCC_GetSysClockFreq>
 8006b00:	4602      	mov	r2, r0
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	4912      	ldr	r1, [pc, #72]	; (8006b58 <HAL_RCC_ClockConfig+0x35c>)
 8006b0e:	5ccb      	ldrb	r3, [r1, r3]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
 8006b18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_RCC_ClockConfig+0x358>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <HAL_RCC_ClockConfig+0x35c>)
 8006b24:	5cd3      	ldrb	r3, [r2, r3]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <HAL_RCC_ClockConfig+0x360>)
 8006b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b34:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <HAL_RCC_ClockConfig+0x364>)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <HAL_RCC_ClockConfig+0x368>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fc fb86 	bl	8003250 <HAL_InitTick>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	58024400 	.word	0x58024400
 8006b58:	0800efd8 	.word	0x0800efd8
 8006b5c:	24000014 	.word	0x24000014
 8006b60:	24000010 	.word	0x24000010
 8006b64:	24000018 	.word	0x24000018

08006b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b089      	sub	sp, #36	; 0x24
 8006b6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b6e:	4bb3      	ldr	r3, [pc, #716]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b76:	2b18      	cmp	r3, #24
 8006b78:	f200 8155 	bhi.w	8006e26 <HAL_RCC_GetSysClockFreq+0x2be>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006be9 	.word	0x08006be9
 8006b88:	08006e27 	.word	0x08006e27
 8006b8c:	08006e27 	.word	0x08006e27
 8006b90:	08006e27 	.word	0x08006e27
 8006b94:	08006e27 	.word	0x08006e27
 8006b98:	08006e27 	.word	0x08006e27
 8006b9c:	08006e27 	.word	0x08006e27
 8006ba0:	08006e27 	.word	0x08006e27
 8006ba4:	08006c0f 	.word	0x08006c0f
 8006ba8:	08006e27 	.word	0x08006e27
 8006bac:	08006e27 	.word	0x08006e27
 8006bb0:	08006e27 	.word	0x08006e27
 8006bb4:	08006e27 	.word	0x08006e27
 8006bb8:	08006e27 	.word	0x08006e27
 8006bbc:	08006e27 	.word	0x08006e27
 8006bc0:	08006e27 	.word	0x08006e27
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006e27 	.word	0x08006e27
 8006bcc:	08006e27 	.word	0x08006e27
 8006bd0:	08006e27 	.word	0x08006e27
 8006bd4:	08006e27 	.word	0x08006e27
 8006bd8:	08006e27 	.word	0x08006e27
 8006bdc:	08006e27 	.word	0x08006e27
 8006be0:	08006e27 	.word	0x08006e27
 8006be4:	08006c1b 	.word	0x08006c1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be8:	4b94      	ldr	r3, [pc, #592]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bf4:	4b91      	ldr	r3, [pc, #580]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	08db      	lsrs	r3, r3, #3
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	4a90      	ldr	r2, [pc, #576]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c00:	fa22 f303 	lsr.w	r3, r2, r3
 8006c04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c06:	e111      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c08:	4b8d      	ldr	r3, [pc, #564]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c0a:	61bb      	str	r3, [r7, #24]
    break;
 8006c0c:	e10e      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c0e:	4b8d      	ldr	r3, [pc, #564]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c10:	61bb      	str	r3, [r7, #24]
    break;
 8006c12:	e10b      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c14:	4b8c      	ldr	r3, [pc, #560]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c16:	61bb      	str	r3, [r7, #24]
    break;
 8006c18:	e108      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c1a:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c24:	4b85      	ldr	r3, [pc, #532]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	091b      	lsrs	r3, r3, #4
 8006c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c30:	4b82      	ldr	r3, [pc, #520]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c3a:	4b80      	ldr	r3, [pc, #512]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3e:	08db      	lsrs	r3, r3, #3
 8006c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80e1 	beq.w	8006e20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	f000 8083 	beq.w	8006d6c <HAL_RCC_GetSysClockFreq+0x204>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	f200 80a1 	bhi.w	8006db0 <HAL_RCC_GetSysClockFreq+0x248>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_RCC_GetSysClockFreq+0x114>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d056      	beq.n	8006d28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c7a:	e099      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c7c:	4b6f      	ldr	r3, [pc, #444]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d02d      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c88:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	4a6b      	ldr	r2, [pc, #428]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
 8006c98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb2:	4b62      	ldr	r3, [pc, #392]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ce2:	e087      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf6:	4b51      	ldr	r3, [pc, #324]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d26:	e065      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3a:	4b40      	ldr	r3, [pc, #256]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6a:	e043      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dae:	e021      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc2:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dd6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	0a5b      	lsrs	r3, r3, #9
 8006dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfe:	3301      	adds	r3, #1
 8006e00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e18:	ee17 3a90 	vmov	r3, s15
 8006e1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e1e:	e005      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
    break;
 8006e24:	e002      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e26:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e28:	61bb      	str	r3, [r7, #24]
    break;
 8006e2a:	bf00      	nop
  }

  return sysclockfreq;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3724      	adds	r7, #36	; 0x24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	03d09000 	.word	0x03d09000
 8006e44:	003d0900 	.word	0x003d0900
 8006e48:	02dc6c00 	.word	0x02dc6c00
 8006e4c:	46000000 	.word	0x46000000
 8006e50:	4c742400 	.word	0x4c742400
 8006e54:	4a742400 	.word	0x4a742400
 8006e58:	4c371b00 	.word	0x4c371b00

08006e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e62:	f7ff fe81 	bl	8006b68 <HAL_RCC_GetSysClockFreq>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b10      	ldr	r3, [pc, #64]	; (8006eac <HAL_RCC_GetHCLKFreq+0x50>)
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	490f      	ldr	r1, [pc, #60]	; (8006eb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e74:	5ccb      	ldrb	r3, [r1, r3]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <HAL_RCC_GetHCLKFreq+0x50>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e8a:	5cd3      	ldrb	r3, [r2, r3]
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	4a07      	ldr	r2, [pc, #28]	; (8006eb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	0800efd8 	.word	0x0800efd8
 8006eb4:	24000014 	.word	0x24000014
 8006eb8:	24000010 	.word	0x24000010

08006ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ec0:	f7ff ffcc 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	091b      	lsrs	r3, r3, #4
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	4904      	ldr	r1, [pc, #16]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ed2:	5ccb      	ldrb	r3, [r1, r3]
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	0800efd8 	.word	0x0800efd8

08006ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006eec:	f7ff ffb6 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	4904      	ldr	r1, [pc, #16]	; (8006f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006efe:	5ccb      	ldrb	r3, [r1, r3]
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	58024400 	.word	0x58024400
 8006f10:	0800efd8 	.word	0x0800efd8

08006f14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f20:	2300      	movs	r3, #0
 8006f22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d03f      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f38:	d02a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f3e:	d824      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f44:	d018      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f4a:	d81e      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f54:	d007      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f56:	e018      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f58:	4bab      	ldr	r3, [pc, #684]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	4aaa      	ldr	r2, [pc, #680]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f64:	e015      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 f9cf 	bl	8008310 <RCCEx_PLL2_Config>
 8006f72:	4603      	mov	r3, r0
 8006f74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f76:	e00c      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fa78 	bl	8008474 <RCCEx_PLL3_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f88:	e003      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8e:	e000      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f98:	4b9b      	ldr	r3, [pc, #620]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa4:	4998      	ldr	r1, [pc, #608]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8006faa:	e001      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d03d      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d826      	bhi.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006fe1 	.word	0x08006fe1
 8006fd0:	08006fef 	.word	0x08006fef
 8006fd4:	08007001 	.word	0x08007001
 8006fd8:	08007019 	.word	0x08007019
 8006fdc:	08007019 	.word	0x08007019
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe0:	4b89      	ldr	r3, [pc, #548]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a88      	ldr	r2, [pc, #544]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fec:	e015      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f98b 	bl	8008310 <RCCEx_PLL2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ffe:	e00c      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3324      	adds	r3, #36	; 0x24
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f001 fa34 	bl	8008474 <RCCEx_PLL3_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	75fb      	strb	r3, [r7, #23]
      break;
 8007016:	e000      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d109      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007020:	4b79      	ldr	r3, [pc, #484]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	f023 0207 	bic.w	r2, r3, #7
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702c:	4976      	ldr	r1, [pc, #472]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800702e:	4313      	orrs	r3, r2
 8007030:	650b      	str	r3, [r1, #80]	; 0x50
 8007032:	e001      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007040:	2b00      	cmp	r3, #0
 8007042:	d042      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704c:	d02b      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d825      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007054:	2bc0      	cmp	r3, #192	; 0xc0
 8007056:	d028      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007058:	2bc0      	cmp	r3, #192	; 0xc0
 800705a:	d821      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800705c:	2b80      	cmp	r3, #128	; 0x80
 800705e:	d016      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007060:	2b80      	cmp	r3, #128	; 0x80
 8007062:	d81d      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d007      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800706c:	e018      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706e:	4b66      	ldr	r3, [pc, #408]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a65      	ldr	r2, [pc, #404]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800707a:	e017      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f944 	bl	8008310 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800708c:	e00e      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3324      	adds	r3, #36	; 0x24
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f9ed 	bl	8008474 <RCCEx_PLL3_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800709e:	e005      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
      break;
 80070a4:	e002      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80070aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d109      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070b2:	4b55      	ldr	r3, [pc, #340]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070be:	4952      	ldr	r1, [pc, #328]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	650b      	str	r3, [r1, #80]	; 0x50
 80070c4:	e001      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d049      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e0:	d030      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80070e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e6:	d82a      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070ec:	d02c      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80070ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070f2:	d824      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070f8:	d018      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070fe:	d81e      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007108:	d007      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800710a:	e018      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710c:	4b3e      	ldr	r3, [pc, #248]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a3d      	ldr	r2, [pc, #244]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007118:	e017      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3304      	adds	r3, #4
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f8f5 	bl	8008310 <RCCEx_PLL2_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800712a:	e00e      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3324      	adds	r3, #36	; 0x24
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f001 f99e 	bl	8008474 <RCCEx_PLL3_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800713c:	e005      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	75fb      	strb	r3, [r7, #23]
      break;
 8007142:	e002      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007150:	4b2d      	ldr	r3, [pc, #180]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800715e:	492a      	ldr	r1, [pc, #168]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	658b      	str	r3, [r1, #88]	; 0x58
 8007164:	e001      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007172:	2b00      	cmp	r3, #0
 8007174:	d04c      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800717c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007180:	d030      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007186:	d82a      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007188:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800718c:	d02c      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800718e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007192:	d824      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007198:	d018      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800719a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800719e:	d81e      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80071a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071a8:	d007      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80071aa:	e018      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b16      	ldr	r3, [pc, #88]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4a15      	ldr	r2, [pc, #84]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071b8:	e017      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 f8a5 	bl	8008310 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80071ca:	e00e      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3324      	adds	r3, #36	; 0x24
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 f94e 	bl	8008474 <RCCEx_PLL3_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071dc:	e005      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
      break;
 80071e2:	e002      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80071e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10d      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071fe:	4902      	ldr	r1, [pc, #8]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007200:	4313      	orrs	r3, r2
 8007202:	658b      	str	r3, [r1, #88]	; 0x58
 8007204:	e004      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d032      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007220:	2b30      	cmp	r3, #48	; 0x30
 8007222:	d01c      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007224:	2b30      	cmp	r3, #48	; 0x30
 8007226:	d817      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007228:	2b20      	cmp	r3, #32
 800722a:	d00c      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800722c:	2b20      	cmp	r3, #32
 800722e:	d813      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d016      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007234:	2b10      	cmp	r3, #16
 8007236:	d10f      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007238:	4baf      	ldr	r3, [pc, #700]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4aae      	ldr	r2, [pc, #696]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800723e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007244:	e00e      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2102      	movs	r1, #2
 800724c:	4618      	mov	r0, r3
 800724e:	f001 f85f 	bl	8008310 <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007256:	e005      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
      break;
 800725c:	e002      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800725e:	bf00      	nop
 8007260:	e000      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800726a:	4ba3      	ldr	r3, [pc, #652]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007276:	49a0      	ldr	r1, [pc, #640]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007278:	4313      	orrs	r3, r2
 800727a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800727c:	e001      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d047      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007296:	d030      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800729c:	d82a      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800729e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072a2:	d02c      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80072a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072a8:	d824      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ae:	d018      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80072b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b4:	d81e      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072be:	d007      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80072c0:	e018      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c2:	4b8d      	ldr	r3, [pc, #564]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	4a8c      	ldr	r2, [pc, #560]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072ce:	e017      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 f81a 	bl	8008310 <RCCEx_PLL2_Config>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072e0:	e00e      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f8c3 	bl	8008474 <RCCEx_PLL3_Config>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072f2:	e005      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	e002      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007306:	4b7c      	ldr	r3, [pc, #496]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007312:	4979      	ldr	r1, [pc, #484]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007314:	4313      	orrs	r3, r2
 8007316:	650b      	str	r3, [r1, #80]	; 0x50
 8007318:	e001      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d049      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007332:	d02e      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007338:	d828      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800733a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800733e:	d02a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007344:	d822      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007346:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800734a:	d026      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800734c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007350:	d81c      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007356:	d010      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800735c:	d816      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01d      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007366:	d111      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3304      	adds	r3, #4
 800736c:	2101      	movs	r1, #1
 800736e:	4618      	mov	r0, r3
 8007370:	f000 ffce 	bl	8008310 <RCCEx_PLL2_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007378:	e012      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3324      	adds	r3, #36	; 0x24
 800737e:	2101      	movs	r1, #1
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f877 	bl	8008474 <RCCEx_PLL3_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800738a:	e009      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
      break;
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800739e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073a6:	4b54      	ldr	r3, [pc, #336]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b2:	4951      	ldr	r1, [pc, #324]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	650b      	str	r3, [r1, #80]	; 0x50
 80073b8:	e001      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d04b      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d4:	d02e      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80073d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073da:	d828      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e0:	d02a      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d822      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ec:	d026      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80073ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073f2:	d81c      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f8:	d010      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80073fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073fe:	d816      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01d      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007408:	d111      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3304      	adds	r3, #4
 800740e:	2101      	movs	r1, #1
 8007410:	4618      	mov	r0, r3
 8007412:	f000 ff7d 	bl	8008310 <RCCEx_PLL2_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800741a:	e012      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3324      	adds	r3, #36	; 0x24
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f001 f826 	bl	8008474 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800742c:	e009      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	75fb      	strb	r3, [r7, #23]
      break;
 8007432:	e006      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007434:	bf00      	nop
 8007436:	e004      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007448:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007456:	4928      	ldr	r1, [pc, #160]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007458:	4313      	orrs	r3, r2
 800745a:	658b      	str	r3, [r1, #88]	; 0x58
 800745c:	e001      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02f      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007476:	d00e      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747c:	d814      	bhi.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d015      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007486:	d10f      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007488:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800748e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007494:	e00c      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	2101      	movs	r1, #1
 800749c:	4618      	mov	r0, r3
 800749e:	f000 ff37 	bl	8008310 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074a6:	e003      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	75fb      	strb	r3, [r7, #23]
      break;
 80074ac:	e000      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80074ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c2:	490d      	ldr	r1, [pc, #52]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	650b      	str	r3, [r1, #80]	; 0x50
 80074c8:	e001      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d033      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d81c      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	08007523 	.word	0x08007523
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	0800750b 	.word	0x0800750b
 80074f4:	08007523 	.word	0x08007523
 80074f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fc:	4bb8      	ldr	r3, [pc, #736]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4ab7      	ldr	r2, [pc, #732]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007508:	e00c      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	2102      	movs	r1, #2
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fefd 	bl	8008310 <RCCEx_PLL2_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800751a:	e003      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
      break;
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800752a:	4bad      	ldr	r3, [pc, #692]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	f023 0203 	bic.w	r2, r3, #3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	49aa      	ldr	r1, [pc, #680]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007538:	4313      	orrs	r3, r2
 800753a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800753c:	e001      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8086 	beq.w	800765c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007550:	4ba4      	ldr	r3, [pc, #656]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4aa3      	ldr	r2, [pc, #652]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800755c:	f7fb fec2 	bl	80032e4 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007562:	e009      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007564:	f7fb febe 	bl	80032e4 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b64      	cmp	r3, #100	; 0x64
 8007570:	d902      	bls.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	75fb      	strb	r3, [r7, #23]
        break;
 8007576:	e005      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007578:	4b9a      	ldr	r3, [pc, #616]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ef      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d166      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800758a:	4b95      	ldr	r3, [pc, #596]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007594:	4053      	eors	r3, r2
 8007596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759a:	2b00      	cmp	r3, #0
 800759c:	d013      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800759e:	4b90      	ldr	r3, [pc, #576]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075a8:	4b8d      	ldr	r3, [pc, #564]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ac:	4a8c      	ldr	r2, [pc, #560]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075b4:	4b8a      	ldr	r3, [pc, #552]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b8:	4a89      	ldr	r2, [pc, #548]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075c0:	4a87      	ldr	r2, [pc, #540]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d0:	d115      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d2:	f7fb fe87 	bl	80032e4 <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075d8:	e00b      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075da:	f7fb fe83 	bl	80032e4 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d902      	bls.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	75fb      	strb	r3, [r7, #23]
            break;
 80075f0:	e005      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075f2:	4b7b      	ldr	r3, [pc, #492]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0ed      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d126      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007612:	d10d      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007614:	4b72      	ldr	r3, [pc, #456]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007622:	0919      	lsrs	r1, r3, #4
 8007624:	4b70      	ldr	r3, [pc, #448]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007626:	400b      	ands	r3, r1
 8007628:	496d      	ldr	r1, [pc, #436]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800762a:	4313      	orrs	r3, r2
 800762c:	610b      	str	r3, [r1, #16]
 800762e:	e005      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007630:	4b6b      	ldr	r3, [pc, #428]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	4a6a      	ldr	r2, [pc, #424]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007636:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800763a:	6113      	str	r3, [r2, #16]
 800763c:	4b68      	ldr	r3, [pc, #416]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800763e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800764a:	4965      	ldr	r1, [pc, #404]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800764c:	4313      	orrs	r3, r2
 800764e:	670b      	str	r3, [r1, #112]	; 0x70
 8007650:	e004      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	75bb      	strb	r3, [r7, #22]
 8007656:	e001      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d07e      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800766c:	2b28      	cmp	r3, #40	; 0x28
 800766e:	d867      	bhi.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007747 	.word	0x08007747
 800767c:	08007741 	.word	0x08007741
 8007680:	08007741 	.word	0x08007741
 8007684:	08007741 	.word	0x08007741
 8007688:	08007741 	.word	0x08007741
 800768c:	08007741 	.word	0x08007741
 8007690:	08007741 	.word	0x08007741
 8007694:	08007741 	.word	0x08007741
 8007698:	0800771d 	.word	0x0800771d
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007741 	.word	0x08007741
 80076a4:	08007741 	.word	0x08007741
 80076a8:	08007741 	.word	0x08007741
 80076ac:	08007741 	.word	0x08007741
 80076b0:	08007741 	.word	0x08007741
 80076b4:	08007741 	.word	0x08007741
 80076b8:	0800772f 	.word	0x0800772f
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007741 	.word	0x08007741
 80076c4:	08007741 	.word	0x08007741
 80076c8:	08007741 	.word	0x08007741
 80076cc:	08007741 	.word	0x08007741
 80076d0:	08007741 	.word	0x08007741
 80076d4:	08007741 	.word	0x08007741
 80076d8:	08007747 	.word	0x08007747
 80076dc:	08007741 	.word	0x08007741
 80076e0:	08007741 	.word	0x08007741
 80076e4:	08007741 	.word	0x08007741
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007741 	.word	0x08007741
 80076f0:	08007741 	.word	0x08007741
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007747 	.word	0x08007747
 80076fc:	08007741 	.word	0x08007741
 8007700:	08007741 	.word	0x08007741
 8007704:	08007741 	.word	0x08007741
 8007708:	08007741 	.word	0x08007741
 800770c:	08007741 	.word	0x08007741
 8007710:	08007741 	.word	0x08007741
 8007714:	08007741 	.word	0x08007741
 8007718:	08007747 	.word	0x08007747
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	2101      	movs	r1, #1
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fdf4 	bl	8008310 <RCCEx_PLL2_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800772c:	e00c      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3324      	adds	r3, #36	; 0x24
 8007732:	2101      	movs	r1, #1
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fe9d 	bl	8008474 <RCCEx_PLL3_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800773e:	e003      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
      break;
 8007744:	e000      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800774e:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800775a:	4921      	ldr	r1, [pc, #132]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	654b      	str	r3, [r1, #84]	; 0x54
 8007760:	e001      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d03e      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007776:	2b05      	cmp	r3, #5
 8007778:	d820      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077c3 	.word	0x080077c3
 8007784:	08007799 	.word	0x08007799
 8007788:	080077ab 	.word	0x080077ab
 800778c:	080077c3 	.word	0x080077c3
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077c3 	.word	0x080077c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	2101      	movs	r1, #1
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fdb6 	bl	8008310 <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077a8:	e00c      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3324      	adds	r3, #36	; 0x24
 80077ae:	2101      	movs	r1, #1
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fe5f 	bl	8008474 <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077ba:	e003      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
      break;
 80077c0:	e000      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80077c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d110      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f023 0207 	bic.w	r2, r3, #7
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d6:	4902      	ldr	r1, [pc, #8]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	654b      	str	r3, [r1, #84]	; 0x54
 80077dc:	e008      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80077de:	bf00      	nop
 80077e0:	58024400 	.word	0x58024400
 80077e4:	58024800 	.word	0x58024800
 80077e8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d039      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007802:	2b05      	cmp	r3, #5
 8007804:	d820      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800784f 	.word	0x0800784f
 8007810:	08007825 	.word	0x08007825
 8007814:	08007837 	.word	0x08007837
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800784f 	.word	0x0800784f
 8007820:	0800784f 	.word	0x0800784f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fd70 	bl	8008310 <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007834:	e00c      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	2101      	movs	r1, #1
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fe19 	bl	8008474 <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e000      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800784e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007856:	4bb7      	ldr	r3, [pc, #732]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f023 0207 	bic.w	r2, r3, #7
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007864:	49b3      	ldr	r1, [pc, #716]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007866:	4313      	orrs	r3, r2
 8007868:	658b      	str	r3, [r1, #88]	; 0x58
 800786a:	e001      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d04b      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007886:	d02e      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800788c:	d828      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007892:	d02a      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007898:	d822      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800789a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800789e:	d026      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80078a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078a4:	d81c      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078aa:	d010      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078b0:	d816      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01d      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80078b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ba:	d111      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3304      	adds	r3, #4
 80078c0:	2100      	movs	r1, #0
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fd24 	bl	8008310 <RCCEx_PLL2_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078cc:	e012      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3324      	adds	r3, #36	; 0x24
 80078d2:	2102      	movs	r1, #2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fdcd 	bl	8008474 <RCCEx_PLL3_Config>
 80078da:	4603      	mov	r3, r0
 80078dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078de:	e009      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]
      break;
 80078e4:	e006      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078e6:	bf00      	nop
 80078e8:	e004      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078ea:	bf00      	nop
 80078ec:	e002      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fa:	4b8e      	ldr	r3, [pc, #568]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007908:	498a      	ldr	r1, [pc, #552]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800790a:	4313      	orrs	r3, r2
 800790c:	654b      	str	r3, [r1, #84]	; 0x54
 800790e:	e001      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d04b      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007926:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800792a:	d02e      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800792c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007930:	d828      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007936:	d02a      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793c:	d822      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800793e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007942:	d026      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007948:	d81c      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800794a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800794e:	d010      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007954:	d816      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01d      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800795a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795e:	d111      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fcd2 	bl	8008310 <RCCEx_PLL2_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007970:	e012      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2102      	movs	r1, #2
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fd7b 	bl	8008474 <RCCEx_PLL3_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007982:	e009      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
      break;
 8007988:	e006      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800798a:	bf00      	nop
 800798c:	e004      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800798e:	bf00      	nop
 8007990:	e002      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007992:	bf00      	nop
 8007994:	e000      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800799e:	4b65      	ldr	r3, [pc, #404]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ac:	4961      	ldr	r1, [pc, #388]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	658b      	str	r3, [r1, #88]	; 0x58
 80079b2:	e001      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d04b      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079ce:	d02e      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80079d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079d4:	d828      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079da:	d02a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e0:	d822      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079e6:	d026      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80079e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079ec:	d81c      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079f2:	d010      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80079f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079f8:	d816      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01d      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80079fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a02:	d111      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fc80 	bl	8008310 <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a14:	e012      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	2102      	movs	r1, #2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fd29 	bl	8008474 <RCCEx_PLL3_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a26:	e009      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a2e:	bf00      	nop
 8007a30:	e004      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a32:	bf00      	nop
 8007a34:	e002      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a36:	bf00      	nop
 8007a38:	e000      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a42:	4b3c      	ldr	r3, [pc, #240]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a50:	4938      	ldr	r1, [pc, #224]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	658b      	str	r3, [r1, #88]	; 0x58
 8007a56:	e001      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01a      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a72:	d10a      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	2102      	movs	r1, #2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fcfa 	bl	8008474 <RCCEx_PLL3_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a8a:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a98:	4926      	ldr	r1, [pc, #152]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01a      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab4:	d10a      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	2102      	movs	r1, #2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fcd9 	bl	8008474 <RCCEx_PLL3_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007acc:	4b19      	ldr	r3, [pc, #100]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ada:	4916      	ldr	r1, [pc, #88]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d036      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af6:	d01f      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007afc:	d817      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b06:	d009      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007b08:	e011      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fbfd 	bl	8008310 <RCCEx_PLL2_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b1a:	e00e      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3324      	adds	r3, #36	; 0x24
 8007b20:	2102      	movs	r1, #2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fca6 	bl	8008474 <RCCEx_PLL3_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b2c:	e005      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]
      break;
 8007b32:	e002      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007b34:	58024400 	.word	0x58024400
      break;
 8007b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b40:	4b93      	ldr	r3, [pc, #588]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b4e:	4990      	ldr	r1, [pc, #576]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	658b      	str	r3, [r1, #88]	; 0x58
 8007b54:	e001      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d033      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b70:	d01c      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007b72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b76:	d816      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b7c:	d003      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b82:	d007      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007b84:	e00f      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b86:	4b82      	ldr	r3, [pc, #520]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	4a81      	ldr	r2, [pc, #516]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b92:	e00c      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3324      	adds	r3, #36	; 0x24
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fc6a 	bl	8008474 <RCCEx_PLL3_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ba4:	e003      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8007baa:	e000      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bb4:	4b76      	ldr	r3, [pc, #472]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc2:	4973      	ldr	r1, [pc, #460]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	654b      	str	r3, [r1, #84]	; 0x54
 8007bc8:	e001      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d029      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be6:	d007      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007be8:	e00f      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bea:	4b69      	ldr	r3, [pc, #420]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a68      	ldr	r2, [pc, #416]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bf6:	e00b      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fb86 	bl	8008310 <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c08:	e002      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c16:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c22:	495b      	ldr	r1, [pc, #364]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c28:	e001      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3324      	adds	r3, #36	; 0x24
 8007c3e:	2102      	movs	r1, #2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fc17 	bl	8008474 <RCCEx_PLL3_Config>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d030      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c64:	d017      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6a:	d811      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c70:	d013      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c76:	d80b      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d010      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c80:	d106      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c82:	4b43      	ldr	r3, [pc, #268]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	4a42      	ldr	r2, [pc, #264]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c8e:	e007      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	e004      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c96:	bf00      	nop
 8007c98:	e002      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c9a:	bf00      	nop
 8007c9c:	e000      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ca6:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	4937      	ldr	r1, [pc, #220]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	654b      	str	r3, [r1, #84]	; 0x54
 8007cb8:	e001      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cca:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	492e      	ldr	r1, [pc, #184]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d009      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ce8:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cf6:	4926      	ldr	r1, [pc, #152]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d08:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d14:	491e      	ldr	r1, [pc, #120]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00d      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	4a19      	ldr	r2, [pc, #100]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d30:	6113      	str	r3, [r2, #16]
 8007d32:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d3c:	4914      	ldr	r1, [pc, #80]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	da08      	bge.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d4a:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d56:	490e      	ldr	r1, [pc, #56]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	4906      	ldr	r1, [pc, #24]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d7c:	7dbb      	ldrb	r3, [r7, #22]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e000      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	58024400 	.word	0x58024400

08007d94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d98:	f7ff f860 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	4904      	ldr	r1, [pc, #16]	; (8007dbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007daa:	5ccb      	ldrb	r3, [r1, r3]
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	58024400 	.word	0x58024400
 8007dbc:	0800efd8 	.word	0x0800efd8

08007dc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b089      	sub	sp, #36	; 0x24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dc8:	4ba1      	ldr	r3, [pc, #644]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007dd2:	4b9f      	ldr	r3, [pc, #636]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	0b1b      	lsrs	r3, r3, #12
 8007dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ddc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dde:	4b9c      	ldr	r3, [pc, #624]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	091b      	lsrs	r3, r3, #4
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007dea:	4b99      	ldr	r3, [pc, #612]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	08db      	lsrs	r3, r3, #3
 8007df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8111 	beq.w	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	f000 8083 	beq.w	8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	f200 80a1 	bhi.w	8007f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d056      	beq.n	8007ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e2a:	e099      	b.n	8007f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e2c:	4b88      	ldr	r3, [pc, #544]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d02d      	beq.n	8007e94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e38:	4b85      	ldr	r3, [pc, #532]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	08db      	lsrs	r3, r3, #3
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	4a84      	ldr	r2, [pc, #528]	; (8008054 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e44:	fa22 f303 	lsr.w	r3, r2, r3
 8007e48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	ee07 3a90 	vmov	s15, r3
 8007e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e62:	4b7b      	ldr	r3, [pc, #492]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e92:	e087      	b.n	8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800805c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea6:	4b6a      	ldr	r3, [pc, #424]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ed6:	e065      	b.n	8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eea:	4b59      	ldr	r3, [pc, #356]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f1a:	e043      	b.n	8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2e:	4b48      	ldr	r3, [pc, #288]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f5e:	e021      	b.n	8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f72:	4b37      	ldr	r3, [pc, #220]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007fa4:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	0a5b      	lsrs	r3, r3, #9
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fca:	ee17 2a90 	vmov	r2, s15
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007fd2:	4b1f      	ldr	r3, [pc, #124]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff8:	ee17 2a90 	vmov	r2, s15
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008000:	4b13      	ldr	r3, [pc, #76]	; (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800801a:	edd7 6a07 	vldr	s13, [r7, #28]
 800801e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008026:	ee17 2a90 	vmov	r2, s15
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800802e:	e008      	b.n	8008042 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	609a      	str	r2, [r3, #8]
}
 8008042:	bf00      	nop
 8008044:	3724      	adds	r7, #36	; 0x24
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	58024400 	.word	0x58024400
 8008054:	03d09000 	.word	0x03d09000
 8008058:	46000000 	.word	0x46000000
 800805c:	4c742400 	.word	0x4c742400
 8008060:	4a742400 	.word	0x4a742400
 8008064:	4c371b00 	.word	0x4c371b00

08008068 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008068:	b480      	push	{r7}
 800806a:	b089      	sub	sp, #36	; 0x24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008070:	4ba1      	ldr	r3, [pc, #644]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	f003 0303 	and.w	r3, r3, #3
 8008078:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800807a:	4b9f      	ldr	r3, [pc, #636]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	0d1b      	lsrs	r3, r3, #20
 8008080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008084:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008086:	4b9c      	ldr	r3, [pc, #624]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008092:	4b99      	ldr	r3, [pc, #612]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008096:	08db      	lsrs	r3, r3, #3
 8008098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8111 	beq.w	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f000 8083 	beq.w	80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	f200 80a1 	bhi.w	8008208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d056      	beq.n	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080d2:	e099      	b.n	8008208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d4:	4b88      	ldr	r3, [pc, #544]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0320 	and.w	r3, r3, #32
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d02d      	beq.n	800813c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080e0:	4b85      	ldr	r3, [pc, #532]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	08db      	lsrs	r3, r3, #3
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	4a84      	ldr	r2, [pc, #528]	; (80082fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
 80080f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810a:	4b7b      	ldr	r3, [pc, #492]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811a:	ed97 6a03 	vldr	s12, [r7, #12]
 800811e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008136:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800813a:	e087      	b.n	800824c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008304 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800814a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814e:	4b6a      	ldr	r3, [pc, #424]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008162:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800817e:	e065      	b.n	800824c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800818e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008192:	4b59      	ldr	r3, [pc, #356]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081c2:	e043      	b.n	800824c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800830c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d6:	4b48      	ldr	r3, [pc, #288]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008206:	e021      	b.n	800824c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821a:	4b37      	ldr	r3, [pc, #220]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822a:	ed97 6a03 	vldr	s12, [r7, #12]
 800822e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800824a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800824c:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	0a5b      	lsrs	r3, r3, #9
 8008252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008266:	edd7 6a07 	vldr	s13, [r7, #28]
 800826a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800826e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008272:	ee17 2a90 	vmov	r2, s15
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800827a:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	0c1b      	lsrs	r3, r3, #16
 8008280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008284:	ee07 3a90 	vmov	s15, r3
 8008288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008294:	edd7 6a07 	vldr	s13, [r7, #28]
 8008298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800829c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a0:	ee17 2a90 	vmov	r2, s15
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80082a8:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ac:	0e1b      	lsrs	r3, r3, #24
 80082ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80082c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ce:	ee17 2a90 	vmov	r2, s15
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082d6:	e008      	b.n	80082ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	609a      	str	r2, [r3, #8]
}
 80082ea:	bf00      	nop
 80082ec:	3724      	adds	r7, #36	; 0x24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	58024400 	.word	0x58024400
 80082fc:	03d09000 	.word	0x03d09000
 8008300:	46000000 	.word	0x46000000
 8008304:	4c742400 	.word	0x4c742400
 8008308:	4a742400 	.word	0x4a742400
 800830c:	4c371b00 	.word	0x4c371b00

08008310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800831e:	4b53      	ldr	r3, [pc, #332]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b03      	cmp	r3, #3
 8008328:	d101      	bne.n	800832e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e099      	b.n	8008462 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800832e:	4b4f      	ldr	r3, [pc, #316]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a4e      	ldr	r2, [pc, #312]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008334:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800833a:	f7fa ffd3 	bl	80032e4 <HAL_GetTick>
 800833e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008340:	e008      	b.n	8008354 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008342:	f7fa ffcf 	bl	80032e4 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d901      	bls.n	8008354 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e086      	b.n	8008462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008354:	4b45      	ldr	r3, [pc, #276]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f0      	bne.n	8008342 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008360:	4b42      	ldr	r3, [pc, #264]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	493f      	ldr	r1, [pc, #252]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008370:	4313      	orrs	r3, r2
 8008372:	628b      	str	r3, [r1, #40]	; 0x28
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	3b01      	subs	r3, #1
 800837a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	3b01      	subs	r3, #1
 8008384:	025b      	lsls	r3, r3, #9
 8008386:	b29b      	uxth	r3, r3
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	3b01      	subs	r3, #1
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	3b01      	subs	r3, #1
 800839e:	061b      	lsls	r3, r3, #24
 80083a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083a4:	4931      	ldr	r1, [pc, #196]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083aa:	4b30      	ldr	r3, [pc, #192]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	492d      	ldr	r1, [pc, #180]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083bc:	4b2b      	ldr	r3, [pc, #172]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	f023 0220 	bic.w	r2, r3, #32
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	4928      	ldr	r1, [pc, #160]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083ce:	4b27      	ldr	r3, [pc, #156]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	4a26      	ldr	r2, [pc, #152]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083d4:	f023 0310 	bic.w	r3, r3, #16
 80083d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083da:	4b24      	ldr	r3, [pc, #144]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083de:	4b24      	ldr	r3, [pc, #144]	; (8008470 <RCCEx_PLL2_Config+0x160>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	69d2      	ldr	r2, [r2, #28]
 80083e6:	00d2      	lsls	r2, r2, #3
 80083e8:	4920      	ldr	r1, [pc, #128]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 80083f4:	f043 0310 	orr.w	r3, r3, #16
 80083f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008400:	4b1a      	ldr	r3, [pc, #104]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	4a19      	ldr	r2, [pc, #100]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800840a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800840c:	e00f      	b.n	800842e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d106      	bne.n	8008422 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008414:	4b15      	ldr	r3, [pc, #84]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	4a14      	ldr	r2, [pc, #80]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 800841a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800841e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008420:	e005      	b.n	800842e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	4a11      	ldr	r2, [pc, #68]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800842c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a0e      	ldr	r2, [pc, #56]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800843a:	f7fa ff53 	bl	80032e4 <HAL_GetTick>
 800843e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008440:	e008      	b.n	8008454 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008442:	f7fa ff4f 	bl	80032e4 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e006      	b.n	8008462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <RCCEx_PLL2_Config+0x15c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0f0      	beq.n	8008442 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
 8008470:	ffff0007 	.word	0xffff0007

08008474 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008482:	4b53      	ldr	r3, [pc, #332]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d101      	bne.n	8008492 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e099      	b.n	80085c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008492:	4b4f      	ldr	r3, [pc, #316]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4e      	ldr	r2, [pc, #312]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800849c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800849e:	f7fa ff21 	bl	80032e4 <HAL_GetTick>
 80084a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084a4:	e008      	b.n	80084b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084a6:	f7fa ff1d 	bl	80032e4 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e086      	b.n	80085c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084b8:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1f0      	bne.n	80084a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084c4:	4b42      	ldr	r3, [pc, #264]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	051b      	lsls	r3, r3, #20
 80084d2:	493f      	ldr	r1, [pc, #252]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	628b      	str	r3, [r1, #40]	; 0x28
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	3b01      	subs	r3, #1
 80084de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	025b      	lsls	r3, r3, #9
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	041b      	lsls	r3, r3, #16
 80084f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	3b01      	subs	r3, #1
 8008502:	061b      	lsls	r3, r3, #24
 8008504:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008508:	4931      	ldr	r1, [pc, #196]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800850a:	4313      	orrs	r3, r2
 800850c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800850e:	4b30      	ldr	r3, [pc, #192]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	492d      	ldr	r1, [pc, #180]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800851c:	4313      	orrs	r3, r2
 800851e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008520:	4b2b      	ldr	r3, [pc, #172]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	4928      	ldr	r1, [pc, #160]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800852e:	4313      	orrs	r3, r2
 8008530:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008532:	4b27      	ldr	r3, [pc, #156]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4a26      	ldr	r2, [pc, #152]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800853e:	4b24      	ldr	r3, [pc, #144]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008542:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <RCCEx_PLL3_Config+0x160>)
 8008544:	4013      	ands	r3, r2
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	69d2      	ldr	r2, [r2, #28]
 800854a:	00d2      	lsls	r2, r2, #3
 800854c:	4920      	ldr	r1, [pc, #128]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800854e:	4313      	orrs	r3, r2
 8008550:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008552:	4b1f      	ldr	r3, [pc, #124]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d106      	bne.n	8008572 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008564:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800856a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800856e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008570:	e00f      	b.n	8008592 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d106      	bne.n	8008586 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008578:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	4a14      	ldr	r2, [pc, #80]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800857e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008584:	e005      	b.n	8008592 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008586:	4b12      	ldr	r3, [pc, #72]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	4a11      	ldr	r2, [pc, #68]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 800858c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008590:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008592:	4b0f      	ldr	r3, [pc, #60]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0e      	ldr	r2, [pc, #56]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 8008598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800859c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800859e:	f7fa fea1 	bl	80032e4 <HAL_GetTick>
 80085a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085a4:	e008      	b.n	80085b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085a6:	f7fa fe9d 	bl	80032e4 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d901      	bls.n	80085b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e006      	b.n	80085c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <RCCEx_PLL3_Config+0x15c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0f0      	beq.n	80085a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	58024400 	.word	0x58024400
 80085d4:	ffff0007 	.word	0xffff0007

080085d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e0f1      	b.n	80087ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a78      	ldr	r2, [pc, #480]	; (80087d8 <HAL_SPI_Init+0x200>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00f      	beq.n	800861a <HAL_SPI_Init+0x42>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a77      	ldr	r2, [pc, #476]	; (80087dc <HAL_SPI_Init+0x204>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00a      	beq.n	800861a <HAL_SPI_Init+0x42>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a75      	ldr	r2, [pc, #468]	; (80087e0 <HAL_SPI_Init+0x208>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d005      	beq.n	800861a <HAL_SPI_Init+0x42>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	2b0f      	cmp	r3, #15
 8008614:	d901      	bls.n	800861a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e0d9      	b.n	80087ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8e2 	bl	80087e4 <SPI_GetPacketSize>
 8008620:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a6c      	ldr	r2, [pc, #432]	; (80087d8 <HAL_SPI_Init+0x200>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00c      	beq.n	8008646 <HAL_SPI_Init+0x6e>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a6a      	ldr	r2, [pc, #424]	; (80087dc <HAL_SPI_Init+0x204>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d007      	beq.n	8008646 <HAL_SPI_Init+0x6e>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a69      	ldr	r2, [pc, #420]	; (80087e0 <HAL_SPI_Init+0x208>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d002      	beq.n	8008646 <HAL_SPI_Init+0x6e>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b08      	cmp	r3, #8
 8008644:	d811      	bhi.n	800866a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800864a:	4a63      	ldr	r2, [pc, #396]	; (80087d8 <HAL_SPI_Init+0x200>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d009      	beq.n	8008664 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a61      	ldr	r2, [pc, #388]	; (80087dc <HAL_SPI_Init+0x204>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d004      	beq.n	8008664 <HAL_SPI_Init+0x8c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a60      	ldr	r2, [pc, #384]	; (80087e0 <HAL_SPI_Init+0x208>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d104      	bne.n	800866e <HAL_SPI_Init+0x96>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b10      	cmp	r3, #16
 8008668:	d901      	bls.n	800866e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e0af      	b.n	80087ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f9 fed0 	bl	8002428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80086aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086b4:	d119      	bne.n	80086ea <HAL_SPI_Init+0x112>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086be:	d103      	bne.n	80086c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10c      	bne.n	80086ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80086d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d8:	d107      	bne.n	80086ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69da      	ldr	r2, [r3, #28]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	431a      	orrs	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fc:	ea42 0103 	orr.w	r1, r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	431a      	orrs	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	431a      	orrs	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	431a      	orrs	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874a:	ea42 0103 	orr.w	r1, r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d113      	bne.n	800878a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008774:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008788:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40013000 	.word	0x40013000
 80087dc:	40003800 	.word	0x40003800
 80087e0:	40003c00 	.word	0x40003c00

080087e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f0:	095b      	lsrs	r3, r3, #5
 80087f2:	3301      	adds	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	3307      	adds	r3, #7
 8008802:	08db      	lsrs	r3, r3, #3
 8008804:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e049      	b.n	80088c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7f9 fe57 	bl	80024f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2202      	movs	r2, #2
 800884a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3304      	adds	r3, #4
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f000 fd71 	bl	8009340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d001      	beq.n	80088e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e054      	b.n	800898a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a26      	ldr	r2, [pc, #152]	; (8008998 <HAL_TIM_Base_Start_IT+0xd0>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d022      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890a:	d01d      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a22      	ldr	r2, [pc, #136]	; (800899c <HAL_TIM_Base_Start_IT+0xd4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d018      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a21      	ldr	r2, [pc, #132]	; (80089a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d013      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00e      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1e      	ldr	r2, [pc, #120]	; (80089a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d009      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1c      	ldr	r2, [pc, #112]	; (80089ac <HAL_TIM_Base_Start_IT+0xe4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d004      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x80>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1b      	ldr	r2, [pc, #108]	; (80089b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d115      	bne.n	8008974 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <HAL_TIM_Base_Start_IT+0xec>)
 8008950:	4013      	ands	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b06      	cmp	r3, #6
 8008958:	d015      	beq.n	8008986 <HAL_TIM_Base_Start_IT+0xbe>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008960:	d011      	beq.n	8008986 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0201 	orr.w	r2, r2, #1
 8008970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008972:	e008      	b.n	8008986 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0201 	orr.w	r2, r2, #1
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e000      	b.n	8008988 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	40010000 	.word	0x40010000
 800899c:	40000400 	.word	0x40000400
 80089a0:	40000800 	.word	0x40000800
 80089a4:	40000c00 	.word	0x40000c00
 80089a8:	40010400 	.word	0x40010400
 80089ac:	40001800 	.word	0x40001800
 80089b0:	40014000 	.word	0x40014000
 80089b4:	00010007 	.word	0x00010007

080089b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e049      	b.n	8008a5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f841 	bl	8008a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f000 fca2 	bl	8009340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <HAL_TIM_PWM_Start+0x24>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	bf14      	ite	ne
 8008a98:	2301      	movne	r3, #1
 8008a9a:	2300      	moveq	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	e03c      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d109      	bne.n	8008aba <HAL_TIM_PWM_Start+0x3e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	bf14      	ite	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	2300      	moveq	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	e02f      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d109      	bne.n	8008ad4 <HAL_TIM_PWM_Start+0x58>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	bf14      	ite	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	e022      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b0c      	cmp	r3, #12
 8008ad8:	d109      	bne.n	8008aee <HAL_TIM_PWM_Start+0x72>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	bf14      	ite	ne
 8008ae6:	2301      	movne	r3, #1
 8008ae8:	2300      	moveq	r3, #0
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	e015      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b10      	cmp	r3, #16
 8008af2:	d109      	bne.n	8008b08 <HAL_TIM_PWM_Start+0x8c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	bf14      	ite	ne
 8008b00:	2301      	movne	r3, #1
 8008b02:	2300      	moveq	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	e008      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e0a1      	b.n	8008c66 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <HAL_TIM_PWM_Start+0xb6>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b30:	e023      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d104      	bne.n	8008b42 <HAL_TIM_PWM_Start+0xc6>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b40:	e01b      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_PWM_Start+0xd6>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b50:	e013      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b0c      	cmp	r3, #12
 8008b56:	d104      	bne.n	8008b62 <HAL_TIM_PWM_Start+0xe6>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b60:	e00b      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b10      	cmp	r3, #16
 8008b66:	d104      	bne.n	8008b72 <HAL_TIM_PWM_Start+0xf6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b70:	e003      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 ffea 	bl	8009b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a38      	ldr	r2, [pc, #224]	; (8008c70 <HAL_TIM_PWM_Start+0x1f4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_TIM_PWM_Start+0x13e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a37      	ldr	r2, [pc, #220]	; (8008c74 <HAL_TIM_PWM_Start+0x1f8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00e      	beq.n	8008bba <HAL_TIM_PWM_Start+0x13e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a35      	ldr	r2, [pc, #212]	; (8008c78 <HAL_TIM_PWM_Start+0x1fc>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d009      	beq.n	8008bba <HAL_TIM_PWM_Start+0x13e>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a34      	ldr	r2, [pc, #208]	; (8008c7c <HAL_TIM_PWM_Start+0x200>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d004      	beq.n	8008bba <HAL_TIM_PWM_Start+0x13e>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a32      	ldr	r2, [pc, #200]	; (8008c80 <HAL_TIM_PWM_Start+0x204>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d101      	bne.n	8008bbe <HAL_TIM_PWM_Start+0x142>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <HAL_TIM_PWM_Start+0x144>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a25      	ldr	r2, [pc, #148]	; (8008c70 <HAL_TIM_PWM_Start+0x1f4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d022      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d01d      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a25      	ldr	r2, [pc, #148]	; (8008c84 <HAL_TIM_PWM_Start+0x208>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d018      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a24      	ldr	r2, [pc, #144]	; (8008c88 <HAL_TIM_PWM_Start+0x20c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d013      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a22      	ldr	r2, [pc, #136]	; (8008c8c <HAL_TIM_PWM_Start+0x210>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00e      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1a      	ldr	r2, [pc, #104]	; (8008c74 <HAL_TIM_PWM_Start+0x1f8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d009      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a1e      	ldr	r2, [pc, #120]	; (8008c90 <HAL_TIM_PWM_Start+0x214>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d004      	beq.n	8008c24 <HAL_TIM_PWM_Start+0x1a8>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <HAL_TIM_PWM_Start+0x1fc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d115      	bne.n	8008c50 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <HAL_TIM_PWM_Start+0x218>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b06      	cmp	r3, #6
 8008c34:	d015      	beq.n	8008c62 <HAL_TIM_PWM_Start+0x1e6>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3c:	d011      	beq.n	8008c62 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0201 	orr.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c4e:	e008      	b.n	8008c62 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e000      	b.n	8008c64 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	40010000 	.word	0x40010000
 8008c74:	40010400 	.word	0x40010400
 8008c78:	40014000 	.word	0x40014000
 8008c7c:	40014400 	.word	0x40014400
 8008c80:	40014800 	.word	0x40014800
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40001800 	.word	0x40001800
 8008c94:	00010007 	.word	0x00010007

08008c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d122      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d11b      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0202 	mvn.w	r2, #2
 8008cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fb12 	bl	8009304 <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e005      	b.n	8008cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb04 	bl	80092f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb15 	bl	8009318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d122      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0204 	mvn.w	r2, #4
 8008d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fae8 	bl	8009304 <HAL_TIM_IC_CaptureCallback>
 8008d34:	e005      	b.n	8008d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fada 	bl	80092f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 faeb 	bl	8009318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d122      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d11b      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0208 	mvn.w	r2, #8
 8008d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2204      	movs	r2, #4
 8008d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fabe 	bl	8009304 <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fab0 	bl	80092f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fac1 	bl	8009318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d122      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d11b      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0210 	mvn.w	r2, #16
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa94 	bl	8009304 <HAL_TIM_IC_CaptureCallback>
 8008ddc:	e005      	b.n	8008dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa86 	bl	80092f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa97 	bl	8009318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10e      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d107      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0201 	mvn.w	r2, #1
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f8 f84a 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d10e      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d107      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 ffc6 	bl	8009dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e56:	d10e      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e62:	2b80      	cmp	r3, #128	; 0x80
 8008e64:	d107      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 ffb9 	bl	8009de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	d10e      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	d107      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa45 	bl	800932c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d10e      	bne.n	8008ece <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d107      	bne.n	8008ece <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f06f 0220 	mvn.w	r2, #32
 8008ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 ff79 	bl	8009dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e0ff      	b.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b14      	cmp	r3, #20
 8008f02:	f200 80f0 	bhi.w	80090e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f06:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f61 	.word	0x08008f61
 8008f10:	080090e7 	.word	0x080090e7
 8008f14:	080090e7 	.word	0x080090e7
 8008f18:	080090e7 	.word	0x080090e7
 8008f1c:	08008fa1 	.word	0x08008fa1
 8008f20:	080090e7 	.word	0x080090e7
 8008f24:	080090e7 	.word	0x080090e7
 8008f28:	080090e7 	.word	0x080090e7
 8008f2c:	08008fe3 	.word	0x08008fe3
 8008f30:	080090e7 	.word	0x080090e7
 8008f34:	080090e7 	.word	0x080090e7
 8008f38:	080090e7 	.word	0x080090e7
 8008f3c:	08009023 	.word	0x08009023
 8008f40:	080090e7 	.word	0x080090e7
 8008f44:	080090e7 	.word	0x080090e7
 8008f48:	080090e7 	.word	0x080090e7
 8008f4c:	08009065 	.word	0x08009065
 8008f50:	080090e7 	.word	0x080090e7
 8008f54:	080090e7 	.word	0x080090e7
 8008f58:	080090e7 	.word	0x080090e7
 8008f5c:	080090a5 	.word	0x080090a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fa84 	bl	8009474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0208 	orr.w	r2, r2, #8
 8008f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0204 	bic.w	r2, r2, #4
 8008f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6999      	ldr	r1, [r3, #24]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	619a      	str	r2, [r3, #24]
      break;
 8008f9e:	e0a5      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 faf4 	bl	8009594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6999      	ldr	r1, [r3, #24]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	021a      	lsls	r2, r3, #8
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	619a      	str	r2, [r3, #24]
      break;
 8008fe0:	e084      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb5d 	bl	80096a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0208 	orr.w	r2, r2, #8
 8008ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0204 	bic.w	r2, r2, #4
 800900c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69d9      	ldr	r1, [r3, #28]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	61da      	str	r2, [r3, #28]
      break;
 8009020:	e064      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fbc5 	bl	80097b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800903c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69da      	ldr	r2, [r3, #28]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69d9      	ldr	r1, [r3, #28]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	021a      	lsls	r2, r3, #8
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	61da      	str	r2, [r3, #28]
      break;
 8009062:	e043      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fc0e 	bl	800988c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0208 	orr.w	r2, r2, #8
 800907e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0204 	bic.w	r2, r2, #4
 800908e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090a2:	e023      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fc52 	bl	8009954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090e4:	e002      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop

08009100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009114:	2b01      	cmp	r3, #1
 8009116:	d101      	bne.n	800911c <HAL_TIM_ConfigClockSource+0x1c>
 8009118:	2302      	movs	r3, #2
 800911a:	e0dc      	b.n	80092d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	4b6a      	ldr	r3, [pc, #424]	; (80092e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009138:	4013      	ands	r3, r2
 800913a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a64      	ldr	r2, [pc, #400]	; (80092e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	f000 80a9 	beq.w	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009158:	4a62      	ldr	r2, [pc, #392]	; (80092e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	f200 80ae 	bhi.w	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009160:	4a61      	ldr	r2, [pc, #388]	; (80092e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	f000 80a1 	beq.w	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009168:	4a5f      	ldr	r2, [pc, #380]	; (80092e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	f200 80a6 	bhi.w	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009170:	4a5e      	ldr	r2, [pc, #376]	; (80092ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8009172:	4293      	cmp	r3, r2
 8009174:	f000 8099 	beq.w	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009178:	4a5c      	ldr	r2, [pc, #368]	; (80092ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800917a:	4293      	cmp	r3, r2
 800917c:	f200 809e 	bhi.w	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009180:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009184:	f000 8091 	beq.w	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800918c:	f200 8096 	bhi.w	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009194:	f000 8089 	beq.w	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800919c:	f200 808e 	bhi.w	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091a4:	d03e      	beq.n	8009224 <HAL_TIM_ConfigClockSource+0x124>
 80091a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091aa:	f200 8087 	bhi.w	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b2:	f000 8086 	beq.w	80092c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80091b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ba:	d87f      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091bc:	2b70      	cmp	r3, #112	; 0x70
 80091be:	d01a      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0xf6>
 80091c0:	2b70      	cmp	r3, #112	; 0x70
 80091c2:	d87b      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091c4:	2b60      	cmp	r3, #96	; 0x60
 80091c6:	d050      	beq.n	800926a <HAL_TIM_ConfigClockSource+0x16a>
 80091c8:	2b60      	cmp	r3, #96	; 0x60
 80091ca:	d877      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091cc:	2b50      	cmp	r3, #80	; 0x50
 80091ce:	d03c      	beq.n	800924a <HAL_TIM_ConfigClockSource+0x14a>
 80091d0:	2b50      	cmp	r3, #80	; 0x50
 80091d2:	d873      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091d4:	2b40      	cmp	r3, #64	; 0x40
 80091d6:	d058      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x18a>
 80091d8:	2b40      	cmp	r3, #64	; 0x40
 80091da:	d86f      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091dc:	2b30      	cmp	r3, #48	; 0x30
 80091de:	d064      	beq.n	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 80091e0:	2b30      	cmp	r3, #48	; 0x30
 80091e2:	d86b      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d060      	beq.n	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d867      	bhi.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d05c      	beq.n	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 80091f0:	2b10      	cmp	r3, #16
 80091f2:	d05a      	beq.n	80092aa <HAL_TIM_ConfigClockSource+0x1aa>
 80091f4:	e062      	b.n	80092bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	6899      	ldr	r1, [r3, #8]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f000 fc89 	bl	8009b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	609a      	str	r2, [r3, #8]
      break;
 8009222:	e04f      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	6899      	ldr	r1, [r3, #8]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f000 fc72 	bl	8009b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009246:	609a      	str	r2, [r3, #8]
      break;
 8009248:	e03c      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	6859      	ldr	r1, [r3, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	461a      	mov	r2, r3
 8009258:	f000 fbe2 	bl	8009a20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2150      	movs	r1, #80	; 0x50
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fc3c 	bl	8009ae0 <TIM_ITRx_SetConfig>
      break;
 8009268:	e02c      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	6859      	ldr	r1, [r3, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	461a      	mov	r2, r3
 8009278:	f000 fc01 	bl	8009a7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2160      	movs	r1, #96	; 0x60
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fc2c 	bl	8009ae0 <TIM_ITRx_SetConfig>
      break;
 8009288:	e01c      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	6859      	ldr	r1, [r3, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	461a      	mov	r2, r3
 8009298:	f000 fbc2 	bl	8009a20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2140      	movs	r1, #64	; 0x40
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fc1c 	bl	8009ae0 <TIM_ITRx_SetConfig>
      break;
 80092a8:	e00c      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4619      	mov	r1, r3
 80092b4:	4610      	mov	r0, r2
 80092b6:	f000 fc13 	bl	8009ae0 <TIM_ITRx_SetConfig>
      break;
 80092ba:	e003      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
      break;
 80092c0:	e000      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80092c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	ffceff88 	.word	0xffceff88
 80092e4:	00100040 	.word	0x00100040
 80092e8:	00100030 	.word	0x00100030
 80092ec:	00100020 	.word	0x00100020

080092f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a40      	ldr	r2, [pc, #256]	; (8009454 <TIM_Base_SetConfig+0x114>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d013      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935e:	d00f      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <TIM_Base_SetConfig+0x118>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00b      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a3c      	ldr	r2, [pc, #240]	; (800945c <TIM_Base_SetConfig+0x11c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d007      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a3b      	ldr	r2, [pc, #236]	; (8009460 <TIM_Base_SetConfig+0x120>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a3a      	ldr	r2, [pc, #232]	; (8009464 <TIM_Base_SetConfig+0x124>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d108      	bne.n	8009392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a2f      	ldr	r2, [pc, #188]	; (8009454 <TIM_Base_SetConfig+0x114>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d01f      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a0:	d01b      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2c      	ldr	r2, [pc, #176]	; (8009458 <TIM_Base_SetConfig+0x118>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d017      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a2b      	ldr	r2, [pc, #172]	; (800945c <TIM_Base_SetConfig+0x11c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <TIM_Base_SetConfig+0x120>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00f      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a29      	ldr	r2, [pc, #164]	; (8009464 <TIM_Base_SetConfig+0x124>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00b      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a28      	ldr	r2, [pc, #160]	; (8009468 <TIM_Base_SetConfig+0x128>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d007      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <TIM_Base_SetConfig+0x12c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a26      	ldr	r2, [pc, #152]	; (8009470 <TIM_Base_SetConfig+0x130>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d108      	bne.n	80093ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a10      	ldr	r2, [pc, #64]	; (8009454 <TIM_Base_SetConfig+0x114>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00f      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a12      	ldr	r2, [pc, #72]	; (8009464 <TIM_Base_SetConfig+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00b      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a11      	ldr	r2, [pc, #68]	; (8009468 <TIM_Base_SetConfig+0x128>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d007      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a10      	ldr	r2, [pc, #64]	; (800946c <TIM_Base_SetConfig+0x12c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d003      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <TIM_Base_SetConfig+0x130>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d103      	bne.n	8009440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	615a      	str	r2, [r3, #20]
}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	40010000 	.word	0x40010000
 8009458:	40000400 	.word	0x40000400
 800945c:	40000800 	.word	0x40000800
 8009460:	40000c00 	.word	0x40000c00
 8009464:	40010400 	.word	0x40010400
 8009468:	40014000 	.word	0x40014000
 800946c:	40014400 	.word	0x40014400
 8009470:	40014800 	.word	0x40014800

08009474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	f023 0201 	bic.w	r2, r3, #1
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4b37      	ldr	r3, [pc, #220]	; (800957c <TIM_OC1_SetConfig+0x108>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0303 	bic.w	r3, r3, #3
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f023 0302 	bic.w	r3, r3, #2
 80094bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a2d      	ldr	r2, [pc, #180]	; (8009580 <TIM_OC1_SetConfig+0x10c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00f      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a2c      	ldr	r2, [pc, #176]	; (8009584 <TIM_OC1_SetConfig+0x110>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00b      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a2b      	ldr	r2, [pc, #172]	; (8009588 <TIM_OC1_SetConfig+0x114>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d007      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a2a      	ldr	r2, [pc, #168]	; (800958c <TIM_OC1_SetConfig+0x118>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d003      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a29      	ldr	r2, [pc, #164]	; (8009590 <TIM_OC1_SetConfig+0x11c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d10c      	bne.n	800950a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f023 0308 	bic.w	r3, r3, #8
 80094f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f023 0304 	bic.w	r3, r3, #4
 8009508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a1c      	ldr	r2, [pc, #112]	; (8009580 <TIM_OC1_SetConfig+0x10c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a1b      	ldr	r2, [pc, #108]	; (8009584 <TIM_OC1_SetConfig+0x110>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <TIM_OC1_SetConfig+0x114>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d007      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <TIM_OC1_SetConfig+0x118>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a18      	ldr	r2, [pc, #96]	; (8009590 <TIM_OC1_SetConfig+0x11c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d111      	bne.n	8009556 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4313      	orrs	r3, r2
 800954a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4313      	orrs	r3, r2
 8009554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	621a      	str	r2, [r3, #32]
}
 8009570:	bf00      	nop
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	fffeff8f 	.word	0xfffeff8f
 8009580:	40010000 	.word	0x40010000
 8009584:	40010400 	.word	0x40010400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f023 0210 	bic.w	r2, r3, #16
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4b34      	ldr	r3, [pc, #208]	; (8009690 <TIM_OC2_SetConfig+0xfc>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f023 0320 	bic.w	r3, r3, #32
 80095de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a29      	ldr	r2, [pc, #164]	; (8009694 <TIM_OC2_SetConfig+0x100>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC2_SetConfig+0x68>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a28      	ldr	r2, [pc, #160]	; (8009698 <TIM_OC2_SetConfig+0x104>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d10d      	bne.n	8009618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a1e      	ldr	r2, [pc, #120]	; (8009694 <TIM_OC2_SetConfig+0x100>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00f      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1d      	ldr	r2, [pc, #116]	; (8009698 <TIM_OC2_SetConfig+0x104>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00b      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a1c      	ldr	r2, [pc, #112]	; (800969c <TIM_OC2_SetConfig+0x108>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d007      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a1b      	ldr	r2, [pc, #108]	; (80096a0 <TIM_OC2_SetConfig+0x10c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a1a      	ldr	r2, [pc, #104]	; (80096a4 <TIM_OC2_SetConfig+0x110>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d113      	bne.n	8009668 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800964e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	feff8fff 	.word	0xfeff8fff
 8009694:	40010000 	.word	0x40010000
 8009698:	40010400 	.word	0x40010400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	40014800 	.word	0x40014800

080096a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4b33      	ldr	r3, [pc, #204]	; (80097a0 <TIM_OC3_SetConfig+0xf8>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a28      	ldr	r2, [pc, #160]	; (80097a4 <TIM_OC3_SetConfig+0xfc>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_OC3_SetConfig+0x66>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a27      	ldr	r2, [pc, #156]	; (80097a8 <TIM_OC3_SetConfig+0x100>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d10d      	bne.n	800972a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	021b      	lsls	r3, r3, #8
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4313      	orrs	r3, r2
 8009720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <TIM_OC3_SetConfig+0xfc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00f      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <TIM_OC3_SetConfig+0x100>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00b      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a1b      	ldr	r2, [pc, #108]	; (80097ac <TIM_OC3_SetConfig+0x104>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d007      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <TIM_OC3_SetConfig+0x108>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d003      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a19      	ldr	r2, [pc, #100]	; (80097b4 <TIM_OC3_SetConfig+0x10c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d113      	bne.n	800977a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	621a      	str	r2, [r3, #32]
}
 8009794:	bf00      	nop
 8009796:	371c      	adds	r7, #28
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	fffeff8f 	.word	0xfffeff8f
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4b24      	ldr	r3, [pc, #144]	; (8009874 <TIM_OC4_SetConfig+0xbc>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a19      	ldr	r2, [pc, #100]	; (8009878 <TIM_OC4_SetConfig+0xc0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00f      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a18      	ldr	r2, [pc, #96]	; (800987c <TIM_OC4_SetConfig+0xc4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a17      	ldr	r2, [pc, #92]	; (8009880 <TIM_OC4_SetConfig+0xc8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a16      	ldr	r2, [pc, #88]	; (8009884 <TIM_OC4_SetConfig+0xcc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a15      	ldr	r2, [pc, #84]	; (8009888 <TIM_OC4_SetConfig+0xd0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d109      	bne.n	800984c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800983e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	019b      	lsls	r3, r3, #6
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	4313      	orrs	r3, r2
 800984a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	621a      	str	r2, [r3, #32]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	feff8fff 	.word	0xfeff8fff
 8009878:	40010000 	.word	0x40010000
 800987c:	40010400 	.word	0x40010400
 8009880:	40014000 	.word	0x40014000
 8009884:	40014400 	.word	0x40014400
 8009888:	40014800 	.word	0x40014800

0800988c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4b21      	ldr	r3, [pc, #132]	; (800993c <TIM_OC5_SetConfig+0xb0>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a18      	ldr	r2, [pc, #96]	; (8009940 <TIM_OC5_SetConfig+0xb4>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d00f      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a17      	ldr	r2, [pc, #92]	; (8009944 <TIM_OC5_SetConfig+0xb8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00b      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a16      	ldr	r2, [pc, #88]	; (8009948 <TIM_OC5_SetConfig+0xbc>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d007      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a15      	ldr	r2, [pc, #84]	; (800994c <TIM_OC5_SetConfig+0xc0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d003      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a14      	ldr	r2, [pc, #80]	; (8009950 <TIM_OC5_SetConfig+0xc4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d109      	bne.n	8009916 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	621a      	str	r2, [r3, #32]
}
 8009930:	bf00      	nop
 8009932:	371c      	adds	r7, #28
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	fffeff8f 	.word	0xfffeff8f
 8009940:	40010000 	.word	0x40010000
 8009944:	40010400 	.word	0x40010400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800

08009954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <TIM_OC6_SetConfig+0xb4>)
 8009980:	4013      	ands	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	051b      	lsls	r3, r3, #20
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a19      	ldr	r2, [pc, #100]	; (8009a0c <TIM_OC6_SetConfig+0xb8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00f      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a18      	ldr	r2, [pc, #96]	; (8009a10 <TIM_OC6_SetConfig+0xbc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00b      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a17      	ldr	r2, [pc, #92]	; (8009a14 <TIM_OC6_SetConfig+0xc0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d007      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a16      	ldr	r2, [pc, #88]	; (8009a18 <TIM_OC6_SetConfig+0xc4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d003      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a15      	ldr	r2, [pc, #84]	; (8009a1c <TIM_OC6_SetConfig+0xc8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d109      	bne.n	80099e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	029b      	lsls	r3, r3, #10
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	621a      	str	r2, [r3, #32]
}
 80099fa:	bf00      	nop
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	feff8fff 	.word	0xfeff8fff
 8009a0c:	40010000 	.word	0x40010000
 8009a10:	40010400 	.word	0x40010400
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400
 8009a1c:	40014800 	.word	0x40014800

08009a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	f023 0201 	bic.w	r2, r3, #1
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f023 030a 	bic.w	r3, r3, #10
 8009a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	621a      	str	r2, [r3, #32]
}
 8009a72:	bf00      	nop
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b087      	sub	sp, #28
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f023 0210 	bic.w	r2, r3, #16
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	031b      	lsls	r3, r3, #12
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009aba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	621a      	str	r2, [r3, #32]
}
 8009ad2:	bf00      	nop
 8009ad4:	371c      	adds	r7, #28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
	...

08009ae0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <TIM_ITRx_SetConfig+0x38>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f043 0307 	orr.w	r3, r3, #7
 8009b02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	609a      	str	r2, [r3, #8]
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	ffcfff8f 	.word	0xffcfff8f

08009b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	021a      	lsls	r2, r3, #8
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	609a      	str	r2, [r3, #8]
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f003 031f 	and.w	r3, r3, #31
 8009b6e:	2201      	movs	r2, #1
 8009b70:	fa02 f303 	lsl.w	r3, r2, r3
 8009b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1a      	ldr	r2, [r3, #32]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	401a      	ands	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6a1a      	ldr	r2, [r3, #32]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f003 031f 	and.w	r3, r3, #31
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	fa01 f303 	lsl.w	r3, r1, r3
 8009b94:	431a      	orrs	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e06d      	b.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a30      	ldr	r2, [pc, #192]	; (8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d004      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a2f      	ldr	r2, [pc, #188]	; (8009cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d108      	bne.n	8009c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a20      	ldr	r2, [pc, #128]	; (8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d022      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c32:	d01d      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a1d      	ldr	r2, [pc, #116]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d018      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1c      	ldr	r2, [pc, #112]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a1a      	ldr	r2, [pc, #104]	; (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00e      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a15      	ldr	r2, [pc, #84]	; (8009cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d009      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a16      	ldr	r2, [pc, #88]	; (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a15      	ldr	r2, [pc, #84]	; (8009cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d10c      	bne.n	8009c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	40010000 	.word	0x40010000
 8009cac:	40010400 	.word	0x40010400
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	40000c00 	.word	0x40000c00
 8009cbc:	40001800 	.word	0x40001800
 8009cc0:	40014000 	.word	0x40014000

08009cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d101      	bne.n	8009ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e065      	b.n	8009dac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	041b      	lsls	r3, r3, #16
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a16      	ldr	r2, [pc, #88]	; (8009db8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a14      	ldr	r2, [pc, #80]	; (8009dbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d115      	bne.n	8009d9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	051b      	lsls	r3, r3, #20
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e042      	b.n	8009e94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d106      	bne.n	8009e26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7f8 fd59 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2224      	movs	r2, #36	; 0x24
 8009e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0201 	bic.w	r2, r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fd54 	bl	800a8ec <UART_SetConfig>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e022      	b.n	8009e94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 faa8 	bl	800b3ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689a      	ldr	r2, [r3, #8]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f042 0201 	orr.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 fb2f 	bl	800b4f0 <UART_CheckIdleState>
 8009e92:	4603      	mov	r3, r0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	; 0x28
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	f040 8083 	bne.w	8009fbe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <HAL_UART_Transmit+0x28>
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e07b      	b.n	8009fc0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <HAL_UART_Transmit+0x3a>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e074      	b.n	8009fc0 <HAL_UART_Transmit+0x124>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2221      	movs	r2, #33	; 0x21
 8009eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009eee:	f7f9 f9f9 	bl	80032e4 <HAL_GetTick>
 8009ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	88fa      	ldrh	r2, [r7, #6]
 8009f00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0c:	d108      	bne.n	8009f20 <HAL_UART_Transmit+0x84>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d104      	bne.n	8009f20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	61bb      	str	r3, [r7, #24]
 8009f1e:	e003      	b.n	8009f28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009f30:	e02c      	b.n	8009f8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2180      	movs	r1, #128	; 0x80
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f001 fb22 	bl	800b586 <UART_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e039      	b.n	8009fc0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10b      	bne.n	8009f6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	3302      	adds	r3, #2
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	e007      	b.n	8009f7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	781a      	ldrb	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	3301      	adds	r3, #1
 8009f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	3b01      	subs	r3, #1
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1cc      	bne.n	8009f32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2140      	movs	r1, #64	; 0x40
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f001 faef 	bl	800b586 <UART_WaitOnFlagUntilTimeout>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e006      	b.n	8009fc0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e000      	b.n	8009fc0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009fbe:	2302      	movs	r3, #2
  }
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3720      	adds	r7, #32
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08a      	sub	sp, #40	; 0x28
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	f040 80c0 	bne.w	800a164 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <HAL_UART_Receive+0x28>
 8009fea:	88fb      	ldrh	r3, [r7, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e0b8      	b.n	800a166 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d101      	bne.n	800a002 <HAL_UART_Receive+0x3a>
 8009ffe:	2302      	movs	r3, #2
 800a000:	e0b1      	b.n	800a166 <HAL_UART_Receive+0x19e>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2222      	movs	r2, #34	; 0x22
 800a016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a020:	f7f9 f960 	bl	80032e4 <HAL_GetTick>
 800a024:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	88fa      	ldrh	r2, [r7, #6]
 800a02a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	88fa      	ldrh	r2, [r7, #6]
 800a032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03e:	d10e      	bne.n	800a05e <HAL_UART_Receive+0x96>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d105      	bne.n	800a054 <HAL_UART_Receive+0x8c>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a04e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a052:	e02d      	b.n	800a0b0 <HAL_UART_Receive+0xe8>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	22ff      	movs	r2, #255	; 0xff
 800a058:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a05c:	e028      	b.n	800a0b0 <HAL_UART_Receive+0xe8>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10d      	bne.n	800a082 <HAL_UART_Receive+0xba>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d104      	bne.n	800a078 <HAL_UART_Receive+0xb0>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	22ff      	movs	r2, #255	; 0xff
 800a072:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a076:	e01b      	b.n	800a0b0 <HAL_UART_Receive+0xe8>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	227f      	movs	r2, #127	; 0x7f
 800a07c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a080:	e016      	b.n	800a0b0 <HAL_UART_Receive+0xe8>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a08a:	d10d      	bne.n	800a0a8 <HAL_UART_Receive+0xe0>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <HAL_UART_Receive+0xd6>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	227f      	movs	r2, #127	; 0x7f
 800a098:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a09c:	e008      	b.n	800a0b0 <HAL_UART_Receive+0xe8>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	223f      	movs	r2, #63	; 0x3f
 800a0a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0a6:	e003      	b.n	800a0b0 <HAL_UART_Receive+0xe8>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c0:	d108      	bne.n	800a0d4 <HAL_UART_Receive+0x10c>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	61bb      	str	r3, [r7, #24]
 800a0d2:	e003      	b.n	800a0dc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a0e4:	e032      	b.n	800a14c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2120      	movs	r1, #32
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f001 fa48 	bl	800b586 <UART_WaitOnFlagUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e032      	b.n	800a166 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10c      	bne.n	800a120 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	8a7b      	ldrh	r3, [r7, #18]
 800a110:	4013      	ands	r3, r2
 800a112:	b29a      	uxth	r2, r3
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	3302      	adds	r3, #2
 800a11c:	61bb      	str	r3, [r7, #24]
 800a11e:	e00c      	b.n	800a13a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	b2da      	uxtb	r2, r3
 800a128:	8a7b      	ldrh	r3, [r7, #18]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	4013      	ands	r3, r2
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	3301      	adds	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a152:	b29b      	uxth	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1c6      	bne.n	800a0e6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	e000      	b.n	800a166 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a164:	2302      	movs	r3, #2
  }
}
 800a166:	4618      	mov	r0, r3
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b0ba      	sub	sp, #232	; 0xe8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a196:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a19a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a19e:	4013      	ands	r3, r2
 800a1a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a1a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d11b      	bne.n	800a1e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b0:	f003 0320 	and.w	r3, r3, #32
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d015      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 835a 	beq.w	800a88e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
      }
      return;
 800a1e2:	e354      	b.n	800a88e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 811f 	beq.w	800a42c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a1ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a1f2:	4b8b      	ldr	r3, [pc, #556]	; (800a420 <HAL_UART_IRQHandler+0x2b0>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a1fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a1fe:	4b89      	ldr	r3, [pc, #548]	; (800a424 <HAL_UART_IRQHandler+0x2b4>)
 800a200:	4013      	ands	r3, r2
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8112 	beq.w	800a42c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d011      	beq.n	800a238 <HAL_UART_IRQHandler+0xc8>
 800a214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2201      	movs	r2, #1
 800a226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a22e:	f043 0201 	orr.w	r2, r3, #1
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d011      	beq.n	800a268 <HAL_UART_IRQHandler+0xf8>
 800a244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2202      	movs	r2, #2
 800a256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a25e:	f043 0204 	orr.w	r2, r3, #4
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d011      	beq.n	800a298 <HAL_UART_IRQHandler+0x128>
 800a274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2204      	movs	r2, #4
 800a286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a28e:	f043 0202 	orr.w	r2, r3, #2
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29c:	f003 0308 	and.w	r3, r3, #8
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d017      	beq.n	800a2d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a8:	f003 0320 	and.w	r3, r3, #32
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d105      	bne.n	800a2bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2b4:	4b5a      	ldr	r3, [pc, #360]	; (800a420 <HAL_UART_IRQHandler+0x2b0>)
 800a2b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00b      	beq.n	800a2d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ca:	f043 0208 	orr.w	r2, r3, #8
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d012      	beq.n	800a306 <HAL_UART_IRQHandler+0x196>
 800a2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00c      	beq.n	800a306 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2fc:	f043 0220 	orr.w	r2, r3, #32
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 82c0 	beq.w	800a892 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d013      	beq.n	800a346 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a322:	f003 0320 	and.w	r3, r3, #32
 800a326:	2b00      	cmp	r3, #0
 800a328:	d105      	bne.n	800a336 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a32e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d007      	beq.n	800a346 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a34c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35a:	2b40      	cmp	r3, #64	; 0x40
 800a35c:	d005      	beq.n	800a36a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a35e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a362:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a366:	2b00      	cmp	r3, #0
 800a368:	d04f      	beq.n	800a40a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f9d4 	bl	800b718 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37a:	2b40      	cmp	r3, #64	; 0x40
 800a37c:	d141      	bne.n	800a402 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3308      	adds	r3, #8
 800a384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a39c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1d9      	bne.n	800a37e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d013      	beq.n	800a3fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d6:	4a14      	ldr	r2, [pc, #80]	; (800a428 <HAL_UART_IRQHandler+0x2b8>)
 800a3d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fa f818 	bl	8004414 <HAL_DMA_Abort_IT>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d017      	beq.n	800a41a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	e00f      	b.n	800a41a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa60 	bl	800a8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a400:	e00b      	b.n	800a41a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fa5c 	bl	800a8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a408:	e007      	b.n	800a41a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa58 	bl	800a8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a418:	e23b      	b.n	800a892 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a41a:	bf00      	nop
    return;
 800a41c:	e239      	b.n	800a892 <HAL_UART_IRQHandler+0x722>
 800a41e:	bf00      	nop
 800a420:	10000001 	.word	0x10000001
 800a424:	04000120 	.word	0x04000120
 800a428:	0800b7e5 	.word	0x0800b7e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a430:	2b01      	cmp	r3, #1
 800a432:	f040 81ce 	bne.w	800a7d2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 81c7 	beq.w	800a7d2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 81c0 	beq.w	800a7d2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2210      	movs	r2, #16
 800a458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	f040 813b 	bne.w	800a6e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a8b      	ldr	r2, [pc, #556]	; (800a6a0 <HAL_UART_IRQHandler+0x530>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d059      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a89      	ldr	r2, [pc, #548]	; (800a6a4 <HAL_UART_IRQHandler+0x534>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d053      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a87      	ldr	r2, [pc, #540]	; (800a6a8 <HAL_UART_IRQHandler+0x538>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d04d      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a85      	ldr	r2, [pc, #532]	; (800a6ac <HAL_UART_IRQHandler+0x53c>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d047      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a83      	ldr	r2, [pc, #524]	; (800a6b0 <HAL_UART_IRQHandler+0x540>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d041      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a81      	ldr	r2, [pc, #516]	; (800a6b4 <HAL_UART_IRQHandler+0x544>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d03b      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a7f      	ldr	r2, [pc, #508]	; (800a6b8 <HAL_UART_IRQHandler+0x548>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d035      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a7d      	ldr	r2, [pc, #500]	; (800a6bc <HAL_UART_IRQHandler+0x54c>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d02f      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a7b      	ldr	r2, [pc, #492]	; (800a6c0 <HAL_UART_IRQHandler+0x550>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d029      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a79      	ldr	r2, [pc, #484]	; (800a6c4 <HAL_UART_IRQHandler+0x554>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d023      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a77      	ldr	r2, [pc, #476]	; (800a6c8 <HAL_UART_IRQHandler+0x558>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d01d      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a75      	ldr	r2, [pc, #468]	; (800a6cc <HAL_UART_IRQHandler+0x55c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d017      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a73      	ldr	r2, [pc, #460]	; (800a6d0 <HAL_UART_IRQHandler+0x560>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d011      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a71      	ldr	r2, [pc, #452]	; (800a6d4 <HAL_UART_IRQHandler+0x564>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d00b      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a6f      	ldr	r2, [pc, #444]	; (800a6d8 <HAL_UART_IRQHandler+0x568>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d005      	beq.n	800a52a <HAL_UART_IRQHandler+0x3ba>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a6d      	ldr	r2, [pc, #436]	; (800a6dc <HAL_UART_IRQHandler+0x56c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d105      	bne.n	800a536 <HAL_UART_IRQHandler+0x3c6>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	b29b      	uxth	r3, r3
 800a534:	e004      	b.n	800a540 <HAL_UART_IRQHandler+0x3d0>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	b29b      	uxth	r3, r3
 800a540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 81a4 	beq.w	800a896 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a558:	429a      	cmp	r2, r3
 800a55a:	f080 819c 	bcs.w	800a896 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a572:	f000 8086 	beq.w	800a682 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a58a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a58e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a5a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a5ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a5b0:	e841 2300 	strex	r3, r2, [r1]
 800a5b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a5b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1da      	bne.n	800a576 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5ca:	e853 3f00 	ldrex	r3, [r3]
 800a5ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a5d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a5ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e1      	bne.n	800a5c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3308      	adds	r3, #8
 800a602:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a620:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a622:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a626:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a628:	e841 2300 	strex	r3, r2, [r1]
 800a62c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a62e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e3      	bne.n	800a5fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2220      	movs	r2, #32
 800a638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a64a:	e853 3f00 	ldrex	r3, [r3]
 800a64e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a652:	f023 0310 	bic.w	r3, r3, #16
 800a656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a664:	65bb      	str	r3, [r7, #88]	; 0x58
 800a666:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a66a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a66c:	e841 2300 	strex	r3, r2, [r1]
 800a670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e4      	bne.n	800a642 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f9 fbab 	bl	8003dd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a68e:	b29b      	uxth	r3, r3
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	b29b      	uxth	r3, r3
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f91c 	bl	800a8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a69c:	e0fb      	b.n	800a896 <HAL_UART_IRQHandler+0x726>
 800a69e:	bf00      	nop
 800a6a0:	40020010 	.word	0x40020010
 800a6a4:	40020028 	.word	0x40020028
 800a6a8:	40020040 	.word	0x40020040
 800a6ac:	40020058 	.word	0x40020058
 800a6b0:	40020070 	.word	0x40020070
 800a6b4:	40020088 	.word	0x40020088
 800a6b8:	400200a0 	.word	0x400200a0
 800a6bc:	400200b8 	.word	0x400200b8
 800a6c0:	40020410 	.word	0x40020410
 800a6c4:	40020428 	.word	0x40020428
 800a6c8:	40020440 	.word	0x40020440
 800a6cc:	40020458 	.word	0x40020458
 800a6d0:	40020470 	.word	0x40020470
 800a6d4:	40020488 	.word	0x40020488
 800a6d8:	400204a0 	.word	0x400204a0
 800a6dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 80cc 	beq.w	800a89a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a706:	2b00      	cmp	r3, #0
 800a708:	f000 80c7 	beq.w	800a89a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a72e:	647b      	str	r3, [r7, #68]	; 0x44
 800a730:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e4      	bne.n	800a70c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3308      	adds	r3, #8
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	623b      	str	r3, [r7, #32]
   return(result);
 800a752:	6a3a      	ldr	r2, [r7, #32]
 800a754:	4b54      	ldr	r3, [pc, #336]	; (800a8a8 <HAL_UART_IRQHandler+0x738>)
 800a756:	4013      	ands	r3, r2
 800a758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a766:	633a      	str	r2, [r7, #48]	; 0x30
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e3      	bne.n	800a742 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	e853 3f00 	ldrex	r3, [r3]
 800a79a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f023 0310 	bic.w	r3, r3, #16
 800a7a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a7b0:	61fb      	str	r3, [r7, #28]
 800a7b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	69b9      	ldr	r1, [r7, #24]
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e4      	bne.n	800a78e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f882 	bl	800a8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7d0:	e063      	b.n	800a89a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00e      	beq.n	800a7fc <HAL_UART_IRQHandler+0x68c>
 800a7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d008      	beq.n	800a7fc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 f836 	bl	800b866 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7fa:	e051      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a804:	2b00      	cmp	r3, #0
 800a806:	d014      	beq.n	800a832 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a810:	2b00      	cmp	r3, #0
 800a812:	d105      	bne.n	800a820 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d008      	beq.n	800a832 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a824:	2b00      	cmp	r3, #0
 800a826:	d03a      	beq.n	800a89e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	4798      	blx	r3
    }
    return;
 800a830:	e035      	b.n	800a89e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <HAL_UART_IRQHandler+0x6e2>
 800a83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 ffe0 	bl	800b810 <UART_EndTransmit_IT>
    return;
 800a850:	e026      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d009      	beq.n	800a872 <HAL_UART_IRQHandler+0x702>
 800a85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a862:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 f80f 	bl	800b88e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a870:	e016      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d010      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x730>
 800a87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a882:	2b00      	cmp	r3, #0
 800a884:	da0c      	bge.n	800a8a0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fff7 	bl	800b87a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a88c:	e008      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
      return;
 800a88e:	bf00      	nop
 800a890:	e006      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
    return;
 800a892:	bf00      	nop
 800a894:	e004      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
      return;
 800a896:	bf00      	nop
 800a898:	e002      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
      return;
 800a89a:	bf00      	nop
 800a89c:	e000      	b.n	800a8a0 <HAL_UART_IRQHandler+0x730>
    return;
 800a89e:	bf00      	nop
  }
}
 800a8a0:	37e8      	adds	r7, #232	; 0xe8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	effffffe 	.word	0xeffffffe

0800a8ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8ec:	b5b0      	push	{r4, r5, r7, lr}
 800a8ee:	b08e      	sub	sp, #56	; 0x38
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689a      	ldr	r2, [r3, #8]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	431a      	orrs	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	4313      	orrs	r3, r2
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	4bbf      	ldr	r3, [pc, #764]	; (800ac18 <UART_SetConfig+0x32c>)
 800a91a:	4013      	ands	r3, r2
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a922:	430b      	orrs	r3, r1
 800a924:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4ab5      	ldr	r2, [pc, #724]	; (800ac1c <UART_SetConfig+0x330>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d004      	beq.n	800a956 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a952:	4313      	orrs	r3, r2
 800a954:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689a      	ldr	r2, [r3, #8]
 800a95c:	4bb0      	ldr	r3, [pc, #704]	; (800ac20 <UART_SetConfig+0x334>)
 800a95e:	4013      	ands	r3, r2
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a966:	430b      	orrs	r3, r1
 800a968:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	f023 010f 	bic.w	r1, r3, #15
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4aa7      	ldr	r2, [pc, #668]	; (800ac24 <UART_SetConfig+0x338>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d176      	bne.n	800aa78 <UART_SetConfig+0x18c>
 800a98a:	4ba7      	ldr	r3, [pc, #668]	; (800ac28 <UART_SetConfig+0x33c>)
 800a98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a992:	2b28      	cmp	r3, #40	; 0x28
 800a994:	d86c      	bhi.n	800aa70 <UART_SetConfig+0x184>
 800a996:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <UART_SetConfig+0xb0>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800aa41 	.word	0x0800aa41
 800a9a0:	0800aa71 	.word	0x0800aa71
 800a9a4:	0800aa71 	.word	0x0800aa71
 800a9a8:	0800aa71 	.word	0x0800aa71
 800a9ac:	0800aa71 	.word	0x0800aa71
 800a9b0:	0800aa71 	.word	0x0800aa71
 800a9b4:	0800aa71 	.word	0x0800aa71
 800a9b8:	0800aa71 	.word	0x0800aa71
 800a9bc:	0800aa49 	.word	0x0800aa49
 800a9c0:	0800aa71 	.word	0x0800aa71
 800a9c4:	0800aa71 	.word	0x0800aa71
 800a9c8:	0800aa71 	.word	0x0800aa71
 800a9cc:	0800aa71 	.word	0x0800aa71
 800a9d0:	0800aa71 	.word	0x0800aa71
 800a9d4:	0800aa71 	.word	0x0800aa71
 800a9d8:	0800aa71 	.word	0x0800aa71
 800a9dc:	0800aa51 	.word	0x0800aa51
 800a9e0:	0800aa71 	.word	0x0800aa71
 800a9e4:	0800aa71 	.word	0x0800aa71
 800a9e8:	0800aa71 	.word	0x0800aa71
 800a9ec:	0800aa71 	.word	0x0800aa71
 800a9f0:	0800aa71 	.word	0x0800aa71
 800a9f4:	0800aa71 	.word	0x0800aa71
 800a9f8:	0800aa71 	.word	0x0800aa71
 800a9fc:	0800aa59 	.word	0x0800aa59
 800aa00:	0800aa71 	.word	0x0800aa71
 800aa04:	0800aa71 	.word	0x0800aa71
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800aa71 	.word	0x0800aa71
 800aa10:	0800aa71 	.word	0x0800aa71
 800aa14:	0800aa71 	.word	0x0800aa71
 800aa18:	0800aa71 	.word	0x0800aa71
 800aa1c:	0800aa61 	.word	0x0800aa61
 800aa20:	0800aa71 	.word	0x0800aa71
 800aa24:	0800aa71 	.word	0x0800aa71
 800aa28:	0800aa71 	.word	0x0800aa71
 800aa2c:	0800aa71 	.word	0x0800aa71
 800aa30:	0800aa71 	.word	0x0800aa71
 800aa34:	0800aa71 	.word	0x0800aa71
 800aa38:	0800aa71 	.word	0x0800aa71
 800aa3c:	0800aa69 	.word	0x0800aa69
 800aa40:	2301      	movs	r3, #1
 800aa42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa46:	e222      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa48:	2304      	movs	r3, #4
 800aa4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4e:	e21e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa50:	2308      	movs	r3, #8
 800aa52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa56:	e21a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa58:	2310      	movs	r3, #16
 800aa5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5e:	e216      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa60:	2320      	movs	r3, #32
 800aa62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa66:	e212      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa68:	2340      	movs	r3, #64	; 0x40
 800aa6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6e:	e20e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa70:	2380      	movs	r3, #128	; 0x80
 800aa72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa76:	e20a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a6b      	ldr	r2, [pc, #428]	; (800ac2c <UART_SetConfig+0x340>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d130      	bne.n	800aae4 <UART_SetConfig+0x1f8>
 800aa82:	4b69      	ldr	r3, [pc, #420]	; (800ac28 <UART_SetConfig+0x33c>)
 800aa84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	2b05      	cmp	r3, #5
 800aa8c:	d826      	bhi.n	800aadc <UART_SetConfig+0x1f0>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <UART_SetConfig+0x1a8>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aaad 	.word	0x0800aaad
 800aa98:	0800aab5 	.word	0x0800aab5
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800aac5 	.word	0x0800aac5
 800aaa4:	0800aacd 	.word	0x0800aacd
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	2300      	movs	r3, #0
 800aaae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab2:	e1ec      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aab4:	2304      	movs	r3, #4
 800aab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaba:	e1e8      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aac2:	e1e4      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aac4:	2310      	movs	r3, #16
 800aac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaca:	e1e0      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aacc:	2320      	movs	r3, #32
 800aace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aad2:	e1dc      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aad4:	2340      	movs	r3, #64	; 0x40
 800aad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aada:	e1d8      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aadc:	2380      	movs	r3, #128	; 0x80
 800aade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aae2:	e1d4      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a51      	ldr	r2, [pc, #324]	; (800ac30 <UART_SetConfig+0x344>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d130      	bne.n	800ab50 <UART_SetConfig+0x264>
 800aaee:	4b4e      	ldr	r3, [pc, #312]	; (800ac28 <UART_SetConfig+0x33c>)
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d826      	bhi.n	800ab48 <UART_SetConfig+0x25c>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <UART_SetConfig+0x214>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab19 	.word	0x0800ab19
 800ab04:	0800ab21 	.word	0x0800ab21
 800ab08:	0800ab29 	.word	0x0800ab29
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab39 	.word	0x0800ab39
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1e:	e1b6      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab20:	2304      	movs	r3, #4
 800ab22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab26:	e1b2      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab28:	2308      	movs	r3, #8
 800ab2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2e:	e1ae      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab30:	2310      	movs	r3, #16
 800ab32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab36:	e1aa      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3e:	e1a6      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab46:	e1a2      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab48:	2380      	movs	r3, #128	; 0x80
 800ab4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4e:	e19e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a37      	ldr	r2, [pc, #220]	; (800ac34 <UART_SetConfig+0x348>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d130      	bne.n	800abbc <UART_SetConfig+0x2d0>
 800ab5a:	4b33      	ldr	r3, [pc, #204]	; (800ac28 <UART_SetConfig+0x33c>)
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	2b05      	cmp	r3, #5
 800ab64:	d826      	bhi.n	800abb4 <UART_SetConfig+0x2c8>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <UART_SetConfig+0x280>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800ab85 	.word	0x0800ab85
 800ab70:	0800ab8d 	.word	0x0800ab8d
 800ab74:	0800ab95 	.word	0x0800ab95
 800ab78:	0800ab9d 	.word	0x0800ab9d
 800ab7c:	0800aba5 	.word	0x0800aba5
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8a:	e180      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab92:	e17c      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab94:	2308      	movs	r3, #8
 800ab96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9a:	e178      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba2:	e174      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800aba4:	2320      	movs	r3, #32
 800aba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abaa:	e170      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800abac:	2340      	movs	r3, #64	; 0x40
 800abae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb2:	e16c      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800abb4:	2380      	movs	r3, #128	; 0x80
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abba:	e168      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a1d      	ldr	r2, [pc, #116]	; (800ac38 <UART_SetConfig+0x34c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d142      	bne.n	800ac4c <UART_SetConfig+0x360>
 800abc6:	4b18      	ldr	r3, [pc, #96]	; (800ac28 <UART_SetConfig+0x33c>)
 800abc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	2b05      	cmp	r3, #5
 800abd0:	d838      	bhi.n	800ac44 <UART_SetConfig+0x358>
 800abd2:	a201      	add	r2, pc, #4	; (adr r2, 800abd8 <UART_SetConfig+0x2ec>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800abf1 	.word	0x0800abf1
 800abdc:	0800abf9 	.word	0x0800abf9
 800abe0:	0800ac01 	.word	0x0800ac01
 800abe4:	0800ac09 	.word	0x0800ac09
 800abe8:	0800ac11 	.word	0x0800ac11
 800abec:	0800ac3d 	.word	0x0800ac3d
 800abf0:	2300      	movs	r3, #0
 800abf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abf6:	e14a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800abf8:	2304      	movs	r3, #4
 800abfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfe:	e146      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ac00:	2308      	movs	r3, #8
 800ac02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac06:	e142      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ac08:	2310      	movs	r3, #16
 800ac0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0e:	e13e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ac10:	2320      	movs	r3, #32
 800ac12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac16:	e13a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ac18:	cfff69f3 	.word	0xcfff69f3
 800ac1c:	58000c00 	.word	0x58000c00
 800ac20:	11fff4ff 	.word	0x11fff4ff
 800ac24:	40011000 	.word	0x40011000
 800ac28:	58024400 	.word	0x58024400
 800ac2c:	40004400 	.word	0x40004400
 800ac30:	40004800 	.word	0x40004800
 800ac34:	40004c00 	.word	0x40004c00
 800ac38:	40005000 	.word	0x40005000
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac42:	e124      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ac44:	2380      	movs	r3, #128	; 0x80
 800ac46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4a:	e120      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4acc      	ldr	r2, [pc, #816]	; (800af84 <UART_SetConfig+0x698>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d176      	bne.n	800ad44 <UART_SetConfig+0x458>
 800ac56:	4bcc      	ldr	r3, [pc, #816]	; (800af88 <UART_SetConfig+0x69c>)
 800ac58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac5e:	2b28      	cmp	r3, #40	; 0x28
 800ac60:	d86c      	bhi.n	800ad3c <UART_SetConfig+0x450>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <UART_SetConfig+0x37c>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ad0d 	.word	0x0800ad0d
 800ac6c:	0800ad3d 	.word	0x0800ad3d
 800ac70:	0800ad3d 	.word	0x0800ad3d
 800ac74:	0800ad3d 	.word	0x0800ad3d
 800ac78:	0800ad3d 	.word	0x0800ad3d
 800ac7c:	0800ad3d 	.word	0x0800ad3d
 800ac80:	0800ad3d 	.word	0x0800ad3d
 800ac84:	0800ad3d 	.word	0x0800ad3d
 800ac88:	0800ad15 	.word	0x0800ad15
 800ac8c:	0800ad3d 	.word	0x0800ad3d
 800ac90:	0800ad3d 	.word	0x0800ad3d
 800ac94:	0800ad3d 	.word	0x0800ad3d
 800ac98:	0800ad3d 	.word	0x0800ad3d
 800ac9c:	0800ad3d 	.word	0x0800ad3d
 800aca0:	0800ad3d 	.word	0x0800ad3d
 800aca4:	0800ad3d 	.word	0x0800ad3d
 800aca8:	0800ad1d 	.word	0x0800ad1d
 800acac:	0800ad3d 	.word	0x0800ad3d
 800acb0:	0800ad3d 	.word	0x0800ad3d
 800acb4:	0800ad3d 	.word	0x0800ad3d
 800acb8:	0800ad3d 	.word	0x0800ad3d
 800acbc:	0800ad3d 	.word	0x0800ad3d
 800acc0:	0800ad3d 	.word	0x0800ad3d
 800acc4:	0800ad3d 	.word	0x0800ad3d
 800acc8:	0800ad25 	.word	0x0800ad25
 800accc:	0800ad3d 	.word	0x0800ad3d
 800acd0:	0800ad3d 	.word	0x0800ad3d
 800acd4:	0800ad3d 	.word	0x0800ad3d
 800acd8:	0800ad3d 	.word	0x0800ad3d
 800acdc:	0800ad3d 	.word	0x0800ad3d
 800ace0:	0800ad3d 	.word	0x0800ad3d
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ad2d 	.word	0x0800ad2d
 800acec:	0800ad3d 	.word	0x0800ad3d
 800acf0:	0800ad3d 	.word	0x0800ad3d
 800acf4:	0800ad3d 	.word	0x0800ad3d
 800acf8:	0800ad3d 	.word	0x0800ad3d
 800acfc:	0800ad3d 	.word	0x0800ad3d
 800ad00:	0800ad3d 	.word	0x0800ad3d
 800ad04:	0800ad3d 	.word	0x0800ad3d
 800ad08:	0800ad35 	.word	0x0800ad35
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad12:	e0bc      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad14:	2304      	movs	r3, #4
 800ad16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1a:	e0b8      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e0b4      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad24:	2310      	movs	r3, #16
 800ad26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2a:	e0b0      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad2c:	2320      	movs	r3, #32
 800ad2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad32:	e0ac      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad34:	2340      	movs	r3, #64	; 0x40
 800ad36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3a:	e0a8      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad3c:	2380      	movs	r3, #128	; 0x80
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad42:	e0a4      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a90      	ldr	r2, [pc, #576]	; (800af8c <UART_SetConfig+0x6a0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d130      	bne.n	800adb0 <UART_SetConfig+0x4c4>
 800ad4e:	4b8e      	ldr	r3, [pc, #568]	; (800af88 <UART_SetConfig+0x69c>)
 800ad50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad52:	f003 0307 	and.w	r3, r3, #7
 800ad56:	2b05      	cmp	r3, #5
 800ad58:	d826      	bhi.n	800ada8 <UART_SetConfig+0x4bc>
 800ad5a:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <UART_SetConfig+0x474>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad79 	.word	0x0800ad79
 800ad64:	0800ad81 	.word	0x0800ad81
 800ad68:	0800ad89 	.word	0x0800ad89
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800ad99 	.word	0x0800ad99
 800ad74:	0800ada1 	.word	0x0800ada1
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7e:	e086      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad80:	2304      	movs	r3, #4
 800ad82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad86:	e082      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad88:	2308      	movs	r3, #8
 800ad8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8e:	e07e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad90:	2310      	movs	r3, #16
 800ad92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad96:	e07a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9e:	e076      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ada0:	2340      	movs	r3, #64	; 0x40
 800ada2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada6:	e072      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ada8:	2380      	movs	r3, #128	; 0x80
 800adaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adae:	e06e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a76      	ldr	r2, [pc, #472]	; (800af90 <UART_SetConfig+0x6a4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d130      	bne.n	800ae1c <UART_SetConfig+0x530>
 800adba:	4b73      	ldr	r3, [pc, #460]	; (800af88 <UART_SetConfig+0x69c>)
 800adbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	2b05      	cmp	r3, #5
 800adc4:	d826      	bhi.n	800ae14 <UART_SetConfig+0x528>
 800adc6:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <UART_SetConfig+0x4e0>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800ade5 	.word	0x0800ade5
 800add0:	0800aded 	.word	0x0800aded
 800add4:	0800adf5 	.word	0x0800adf5
 800add8:	0800adfd 	.word	0x0800adfd
 800addc:	0800ae05 	.word	0x0800ae05
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adea:	e050      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf2:	e04c      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfa:	e048      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae02:	e044      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae04:	2320      	movs	r3, #32
 800ae06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0a:	e040      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae0c:	2340      	movs	r3, #64	; 0x40
 800ae0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae12:	e03c      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae14:	2380      	movs	r3, #128	; 0x80
 800ae16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1a:	e038      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a5c      	ldr	r2, [pc, #368]	; (800af94 <UART_SetConfig+0x6a8>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d130      	bne.n	800ae88 <UART_SetConfig+0x59c>
 800ae26:	4b58      	ldr	r3, [pc, #352]	; (800af88 <UART_SetConfig+0x69c>)
 800ae28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d826      	bhi.n	800ae80 <UART_SetConfig+0x594>
 800ae32:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <UART_SetConfig+0x54c>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae59 	.word	0x0800ae59
 800ae40:	0800ae61 	.word	0x0800ae61
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae71 	.word	0x0800ae71
 800ae4c:	0800ae79 	.word	0x0800ae79
 800ae50:	2302      	movs	r3, #2
 800ae52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae56:	e01a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae58:	2304      	movs	r3, #4
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5e:	e016      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae60:	2308      	movs	r3, #8
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e012      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e00e      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae70:	2320      	movs	r3, #32
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e00a      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae78:	2340      	movs	r3, #64	; 0x40
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e006      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae80:	2380      	movs	r3, #128	; 0x80
 800ae82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae86:	e002      	b.n	800ae8e <UART_SetConfig+0x5a2>
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a40      	ldr	r2, [pc, #256]	; (800af94 <UART_SetConfig+0x6a8>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	f040 80ef 	bne.w	800b078 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	dc46      	bgt.n	800af30 <UART_SetConfig+0x644>
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	f2c0 8081 	blt.w	800afaa <UART_SetConfig+0x6be>
 800aea8:	3b02      	subs	r3, #2
 800aeaa:	2b1e      	cmp	r3, #30
 800aeac:	d87d      	bhi.n	800afaa <UART_SetConfig+0x6be>
 800aeae:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <UART_SetConfig+0x5c8>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800af37 	.word	0x0800af37
 800aeb8:	0800afab 	.word	0x0800afab
 800aebc:	0800af3f 	.word	0x0800af3f
 800aec0:	0800afab 	.word	0x0800afab
 800aec4:	0800afab 	.word	0x0800afab
 800aec8:	0800afab 	.word	0x0800afab
 800aecc:	0800af4f 	.word	0x0800af4f
 800aed0:	0800afab 	.word	0x0800afab
 800aed4:	0800afab 	.word	0x0800afab
 800aed8:	0800afab 	.word	0x0800afab
 800aedc:	0800afab 	.word	0x0800afab
 800aee0:	0800afab 	.word	0x0800afab
 800aee4:	0800afab 	.word	0x0800afab
 800aee8:	0800afab 	.word	0x0800afab
 800aeec:	0800af5f 	.word	0x0800af5f
 800aef0:	0800afab 	.word	0x0800afab
 800aef4:	0800afab 	.word	0x0800afab
 800aef8:	0800afab 	.word	0x0800afab
 800aefc:	0800afab 	.word	0x0800afab
 800af00:	0800afab 	.word	0x0800afab
 800af04:	0800afab 	.word	0x0800afab
 800af08:	0800afab 	.word	0x0800afab
 800af0c:	0800afab 	.word	0x0800afab
 800af10:	0800afab 	.word	0x0800afab
 800af14:	0800afab 	.word	0x0800afab
 800af18:	0800afab 	.word	0x0800afab
 800af1c:	0800afab 	.word	0x0800afab
 800af20:	0800afab 	.word	0x0800afab
 800af24:	0800afab 	.word	0x0800afab
 800af28:	0800afab 	.word	0x0800afab
 800af2c:	0800af9d 	.word	0x0800af9d
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	d036      	beq.n	800afa2 <UART_SetConfig+0x6b6>
 800af34:	e039      	b.n	800afaa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800af36:	f7fc ff2d 	bl	8007d94 <HAL_RCCEx_GetD3PCLK1Freq>
 800af3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af3c:	e03b      	b.n	800afb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af3e:	f107 0314 	add.w	r3, r7, #20
 800af42:	4618      	mov	r0, r3
 800af44:	f7fc ff3c 	bl	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af4c:	e033      	b.n	800afb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af4e:	f107 0308 	add.w	r3, r7, #8
 800af52:	4618      	mov	r0, r3
 800af54:	f7fd f888 	bl	8008068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af5c:	e02b      	b.n	800afb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af5e:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <UART_SetConfig+0x69c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0320 	and.w	r3, r3, #32
 800af66:	2b00      	cmp	r3, #0
 800af68:	d009      	beq.n	800af7e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af6a:	4b07      	ldr	r3, [pc, #28]	; (800af88 <UART_SetConfig+0x69c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	08db      	lsrs	r3, r3, #3
 800af70:	f003 0303 	and.w	r3, r3, #3
 800af74:	4a08      	ldr	r2, [pc, #32]	; (800af98 <UART_SetConfig+0x6ac>)
 800af76:	fa22 f303 	lsr.w	r3, r2, r3
 800af7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af7c:	e01b      	b.n	800afb6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800af7e:	4b06      	ldr	r3, [pc, #24]	; (800af98 <UART_SetConfig+0x6ac>)
 800af80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af82:	e018      	b.n	800afb6 <UART_SetConfig+0x6ca>
 800af84:	40011400 	.word	0x40011400
 800af88:	58024400 	.word	0x58024400
 800af8c:	40007800 	.word	0x40007800
 800af90:	40007c00 	.word	0x40007c00
 800af94:	58000c00 	.word	0x58000c00
 800af98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af9c:	4bc4      	ldr	r3, [pc, #784]	; (800b2b0 <UART_SetConfig+0x9c4>)
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afa0:	e009      	b.n	800afb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afa8:	e005      	b.n	800afb6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800afb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 81da 	beq.w	800b372 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	4abc      	ldr	r2, [pc, #752]	; (800b2b4 <UART_SetConfig+0x9c8>)
 800afc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afc8:	461a      	mov	r2, r3
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800afd0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	4413      	add	r3, r2
 800afdc:	6a3a      	ldr	r2, [r7, #32]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d305      	bcc.n	800afee <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afe8:	6a3a      	ldr	r2, [r7, #32]
 800afea:	429a      	cmp	r2, r3
 800afec:	d903      	bls.n	800aff6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aff4:	e1bd      	b.n	800b372 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff8:	4618      	mov	r0, r3
 800affa:	f04f 0100 	mov.w	r1, #0
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	4aac      	ldr	r2, [pc, #688]	; (800b2b4 <UART_SetConfig+0x9c8>)
 800b004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b008:	b29a      	uxth	r2, r3
 800b00a:	f04f 0300 	mov.w	r3, #0
 800b00e:	f7f5 f9bf 	bl	8000390 <__aeabi_uldivmod>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4610      	mov	r0, r2
 800b018:	4619      	mov	r1, r3
 800b01a:	f04f 0200 	mov.w	r2, #0
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	020b      	lsls	r3, r1, #8
 800b024:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b028:	0202      	lsls	r2, r0, #8
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	6849      	ldr	r1, [r1, #4]
 800b02e:	0849      	lsrs	r1, r1, #1
 800b030:	4608      	mov	r0, r1
 800b032:	f04f 0100 	mov.w	r1, #0
 800b036:	1814      	adds	r4, r2, r0
 800b038:	eb43 0501 	adc.w	r5, r3, r1
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	461a      	mov	r2, r3
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	4620      	mov	r0, r4
 800b048:	4629      	mov	r1, r5
 800b04a:	f7f5 f9a1 	bl	8000390 <__aeabi_uldivmod>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4613      	mov	r3, r2
 800b054:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b05c:	d308      	bcc.n	800b070 <UART_SetConfig+0x784>
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b064:	d204      	bcs.n	800b070 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b06c:	60da      	str	r2, [r3, #12]
 800b06e:	e180      	b.n	800b372 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b076:	e17c      	b.n	800b372 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b080:	f040 80be 	bne.w	800b200 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b088:	2b20      	cmp	r3, #32
 800b08a:	dc49      	bgt.n	800b120 <UART_SetConfig+0x834>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	db7c      	blt.n	800b18a <UART_SetConfig+0x89e>
 800b090:	2b20      	cmp	r3, #32
 800b092:	d87a      	bhi.n	800b18a <UART_SetConfig+0x89e>
 800b094:	a201      	add	r2, pc, #4	; (adr r2, 800b09c <UART_SetConfig+0x7b0>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b127 	.word	0x0800b127
 800b0a0:	0800b12f 	.word	0x0800b12f
 800b0a4:	0800b18b 	.word	0x0800b18b
 800b0a8:	0800b18b 	.word	0x0800b18b
 800b0ac:	0800b137 	.word	0x0800b137
 800b0b0:	0800b18b 	.word	0x0800b18b
 800b0b4:	0800b18b 	.word	0x0800b18b
 800b0b8:	0800b18b 	.word	0x0800b18b
 800b0bc:	0800b147 	.word	0x0800b147
 800b0c0:	0800b18b 	.word	0x0800b18b
 800b0c4:	0800b18b 	.word	0x0800b18b
 800b0c8:	0800b18b 	.word	0x0800b18b
 800b0cc:	0800b18b 	.word	0x0800b18b
 800b0d0:	0800b18b 	.word	0x0800b18b
 800b0d4:	0800b18b 	.word	0x0800b18b
 800b0d8:	0800b18b 	.word	0x0800b18b
 800b0dc:	0800b157 	.word	0x0800b157
 800b0e0:	0800b18b 	.word	0x0800b18b
 800b0e4:	0800b18b 	.word	0x0800b18b
 800b0e8:	0800b18b 	.word	0x0800b18b
 800b0ec:	0800b18b 	.word	0x0800b18b
 800b0f0:	0800b18b 	.word	0x0800b18b
 800b0f4:	0800b18b 	.word	0x0800b18b
 800b0f8:	0800b18b 	.word	0x0800b18b
 800b0fc:	0800b18b 	.word	0x0800b18b
 800b100:	0800b18b 	.word	0x0800b18b
 800b104:	0800b18b 	.word	0x0800b18b
 800b108:	0800b18b 	.word	0x0800b18b
 800b10c:	0800b18b 	.word	0x0800b18b
 800b110:	0800b18b 	.word	0x0800b18b
 800b114:	0800b18b 	.word	0x0800b18b
 800b118:	0800b18b 	.word	0x0800b18b
 800b11c:	0800b17d 	.word	0x0800b17d
 800b120:	2b40      	cmp	r3, #64	; 0x40
 800b122:	d02e      	beq.n	800b182 <UART_SetConfig+0x896>
 800b124:	e031      	b.n	800b18a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b126:	f7fb fec9 	bl	8006ebc <HAL_RCC_GetPCLK1Freq>
 800b12a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b12c:	e033      	b.n	800b196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b12e:	f7fb fedb 	bl	8006ee8 <HAL_RCC_GetPCLK2Freq>
 800b132:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b134:	e02f      	b.n	800b196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b136:	f107 0314 	add.w	r3, r7, #20
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fc fe40 	bl	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b144:	e027      	b.n	800b196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b146:	f107 0308 	add.w	r3, r7, #8
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fc ff8c 	bl	8008068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b154:	e01f      	b.n	800b196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b156:	4b58      	ldr	r3, [pc, #352]	; (800b2b8 <UART_SetConfig+0x9cc>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d009      	beq.n	800b176 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b162:	4b55      	ldr	r3, [pc, #340]	; (800b2b8 <UART_SetConfig+0x9cc>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	08db      	lsrs	r3, r3, #3
 800b168:	f003 0303 	and.w	r3, r3, #3
 800b16c:	4a53      	ldr	r2, [pc, #332]	; (800b2bc <UART_SetConfig+0x9d0>)
 800b16e:	fa22 f303 	lsr.w	r3, r2, r3
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b174:	e00f      	b.n	800b196 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b176:	4b51      	ldr	r3, [pc, #324]	; (800b2bc <UART_SetConfig+0x9d0>)
 800b178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b17a:	e00c      	b.n	800b196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b17c:	4b4c      	ldr	r3, [pc, #304]	; (800b2b0 <UART_SetConfig+0x9c4>)
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b180:	e009      	b.n	800b196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b188:	e005      	b.n	800b196 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 80ea 	beq.w	800b372 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	4a44      	ldr	r2, [pc, #272]	; (800b2b4 <UART_SetConfig+0x9c8>)
 800b1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b0:	005a      	lsls	r2, r3, #1
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	441a      	add	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	2b0f      	cmp	r3, #15
 800b1c8:	d916      	bls.n	800b1f8 <UART_SetConfig+0x90c>
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1d0:	d212      	bcs.n	800b1f8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f023 030f 	bic.w	r3, r3, #15
 800b1da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	e0bc      	b.n	800b372 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b1fe:	e0b8      	b.n	800b372 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b200:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b204:	2b20      	cmp	r3, #32
 800b206:	dc4b      	bgt.n	800b2a0 <UART_SetConfig+0x9b4>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f2c0 8087 	blt.w	800b31c <UART_SetConfig+0xa30>
 800b20e:	2b20      	cmp	r3, #32
 800b210:	f200 8084 	bhi.w	800b31c <UART_SetConfig+0xa30>
 800b214:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <UART_SetConfig+0x930>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b2a7 	.word	0x0800b2a7
 800b220:	0800b2c1 	.word	0x0800b2c1
 800b224:	0800b31d 	.word	0x0800b31d
 800b228:	0800b31d 	.word	0x0800b31d
 800b22c:	0800b2c9 	.word	0x0800b2c9
 800b230:	0800b31d 	.word	0x0800b31d
 800b234:	0800b31d 	.word	0x0800b31d
 800b238:	0800b31d 	.word	0x0800b31d
 800b23c:	0800b2d9 	.word	0x0800b2d9
 800b240:	0800b31d 	.word	0x0800b31d
 800b244:	0800b31d 	.word	0x0800b31d
 800b248:	0800b31d 	.word	0x0800b31d
 800b24c:	0800b31d 	.word	0x0800b31d
 800b250:	0800b31d 	.word	0x0800b31d
 800b254:	0800b31d 	.word	0x0800b31d
 800b258:	0800b31d 	.word	0x0800b31d
 800b25c:	0800b2e9 	.word	0x0800b2e9
 800b260:	0800b31d 	.word	0x0800b31d
 800b264:	0800b31d 	.word	0x0800b31d
 800b268:	0800b31d 	.word	0x0800b31d
 800b26c:	0800b31d 	.word	0x0800b31d
 800b270:	0800b31d 	.word	0x0800b31d
 800b274:	0800b31d 	.word	0x0800b31d
 800b278:	0800b31d 	.word	0x0800b31d
 800b27c:	0800b31d 	.word	0x0800b31d
 800b280:	0800b31d 	.word	0x0800b31d
 800b284:	0800b31d 	.word	0x0800b31d
 800b288:	0800b31d 	.word	0x0800b31d
 800b28c:	0800b31d 	.word	0x0800b31d
 800b290:	0800b31d 	.word	0x0800b31d
 800b294:	0800b31d 	.word	0x0800b31d
 800b298:	0800b31d 	.word	0x0800b31d
 800b29c:	0800b30f 	.word	0x0800b30f
 800b2a0:	2b40      	cmp	r3, #64	; 0x40
 800b2a2:	d037      	beq.n	800b314 <UART_SetConfig+0xa28>
 800b2a4:	e03a      	b.n	800b31c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a6:	f7fb fe09 	bl	8006ebc <HAL_RCC_GetPCLK1Freq>
 800b2aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2ac:	e03c      	b.n	800b328 <UART_SetConfig+0xa3c>
 800b2ae:	bf00      	nop
 800b2b0:	003d0900 	.word	0x003d0900
 800b2b4:	0800eff0 	.word	0x0800eff0
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2c0:	f7fb fe12 	bl	8006ee8 <HAL_RCC_GetPCLK2Freq>
 800b2c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2c6:	e02f      	b.n	800b328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c8:	f107 0314 	add.w	r3, r7, #20
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fc fd77 	bl	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2d6:	e027      	b.n	800b328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2d8:	f107 0308 	add.w	r3, r7, #8
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fc fec3 	bl	8008068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2e6:	e01f      	b.n	800b328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2e8:	4b2c      	ldr	r3, [pc, #176]	; (800b39c <UART_SetConfig+0xab0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d009      	beq.n	800b308 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2f4:	4b29      	ldr	r3, [pc, #164]	; (800b39c <UART_SetConfig+0xab0>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	08db      	lsrs	r3, r3, #3
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	4a28      	ldr	r2, [pc, #160]	; (800b3a0 <UART_SetConfig+0xab4>)
 800b300:	fa22 f303 	lsr.w	r3, r2, r3
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b306:	e00f      	b.n	800b328 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <UART_SetConfig+0xab4>)
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b30c:	e00c      	b.n	800b328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b30e:	4b25      	ldr	r3, [pc, #148]	; (800b3a4 <UART_SetConfig+0xab8>)
 800b310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b312:	e009      	b.n	800b328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b31a:	e005      	b.n	800b328 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b326:	bf00      	nop
    }

    if (pclk != 0U)
 800b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d021      	beq.n	800b372 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	4a1d      	ldr	r2, [pc, #116]	; (800b3a8 <UART_SetConfig+0xabc>)
 800b334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b338:	461a      	mov	r2, r3
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	085b      	lsrs	r3, r3, #1
 800b346:	441a      	add	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b350:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	2b0f      	cmp	r3, #15
 800b356:	d909      	bls.n	800b36c <UART_SetConfig+0xa80>
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b35e:	d205      	bcs.n	800b36c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	b29a      	uxth	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	60da      	str	r2, [r3, #12]
 800b36a:	e002      	b.n	800b372 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b38e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b392:	4618      	mov	r0, r3
 800b394:	3738      	adds	r7, #56	; 0x38
 800b396:	46bd      	mov	sp, r7
 800b398:	bdb0      	pop	{r4, r5, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	03d09000 	.word	0x03d09000
 800b3a4:	003d0900 	.word	0x003d0900
 800b3a8:	0800eff0 	.word	0x0800eff0

0800b3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	f003 0302 	and.w	r3, r3, #2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00a      	beq.n	800b41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00a      	beq.n	800b45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b462:	f003 0320 	and.w	r3, r3, #32
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01a      	beq.n	800b4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4aa:	d10a      	bne.n	800b4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	605a      	str	r2, [r3, #4]
  }
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b500:	f7f7 fef0 	bl	80032e4 <HAL_GetTick>
 800b504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b08      	cmp	r3, #8
 800b512:	d10e      	bne.n	800b532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f82f 	bl	800b586 <UART_WaitOnFlagUntilTimeout>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e025      	b.n	800b57e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	d10e      	bne.n	800b55e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f819 	bl	800b586 <UART_WaitOnFlagUntilTimeout>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e00f      	b.n	800b57e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b09c      	sub	sp, #112	; 0x70
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	603b      	str	r3, [r7, #0]
 800b592:	4613      	mov	r3, r2
 800b594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b596:	e0a9      	b.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59e:	f000 80a5 	beq.w	800b6ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5a2:	f7f7 fe9f 	bl	80032e4 <HAL_GetTick>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d302      	bcc.n	800b5b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b5b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d140      	bne.n	800b63a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5cc:	667b      	str	r3, [r7, #100]	; 0x64
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5de:	e841 2300 	strex	r3, r2, [r1]
 800b5e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1e6      	bne.n	800b5b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f4:	e853 3f00 	ldrex	r3, [r3]
 800b5f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fc:	f023 0301 	bic.w	r3, r3, #1
 800b600:	663b      	str	r3, [r7, #96]	; 0x60
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3308      	adds	r3, #8
 800b608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b60a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b60c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e5      	bne.n	800b5ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2220      	movs	r2, #32
 800b622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2220      	movs	r2, #32
 800b62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e069      	b.n	800b70e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0304 	and.w	r3, r3, #4
 800b644:	2b00      	cmp	r3, #0
 800b646:	d051      	beq.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b656:	d149      	bne.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b660:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b676:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
 800b682:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b688:	e841 2300 	strex	r3, r2, [r1]
 800b68c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1e6      	bne.n	800b662 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3308      	adds	r3, #8
 800b69a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f023 0301 	bic.w	r3, r3, #1
 800b6aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6b4:	623a      	str	r2, [r7, #32]
 800b6b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	69f9      	ldr	r1, [r7, #28]
 800b6ba:	6a3a      	ldr	r2, [r7, #32]
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2220      	movs	r2, #32
 800b6d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e010      	b.n	800b70e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	69da      	ldr	r2, [r3, #28]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	bf0c      	ite	eq
 800b6fc:	2301      	moveq	r3, #1
 800b6fe:	2300      	movne	r3, #0
 800b700:	b2db      	uxtb	r3, r3
 800b702:	461a      	mov	r2, r3
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	429a      	cmp	r2, r3
 800b708:	f43f af46 	beq.w	800b598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3770      	adds	r7, #112	; 0x70
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b718:	b480      	push	{r7}
 800b71a:	b095      	sub	sp, #84	; 0x54
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b734:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73e:	643b      	str	r3, [r7, #64]	; 0x40
 800b740:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b746:	e841 2300 	strex	r3, r2, [r1]
 800b74a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1e6      	bne.n	800b720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3308      	adds	r3, #8
 800b758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	61fb      	str	r3, [r7, #28]
   return(result);
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	4b1e      	ldr	r3, [pc, #120]	; (800b7e0 <UART_EndRxTransfer+0xc8>)
 800b766:	4013      	ands	r3, r2
 800b768:	64bb      	str	r3, [r7, #72]	; 0x48
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3308      	adds	r3, #8
 800b770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b772:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e5      	bne.n	800b752 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d118      	bne.n	800b7c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f023 0310 	bic.w	r3, r3, #16
 800b7a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ac:	61bb      	str	r3, [r7, #24]
 800b7ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6979      	ldr	r1, [r7, #20]
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e6      	bne.n	800b78e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b7d4:	bf00      	nop
 800b7d6:	3754      	adds	r7, #84	; 0x54
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	effffffe 	.word	0xeffffffe

0800b7e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7ff f85c 	bl	800a8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	60bb      	str	r3, [r7, #8]
   return(result);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b82c:	61fb      	str	r3, [r7, #28]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	461a      	mov	r2, r3
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	61bb      	str	r3, [r7, #24]
 800b838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83a:	6979      	ldr	r1, [r7, #20]
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	e841 2300 	strex	r3, r2, [r1]
 800b842:	613b      	str	r3, [r7, #16]
   return(result);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1e6      	bne.n	800b818 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2220      	movs	r2, #32
 800b84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff f827 	bl	800a8ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b85e:	bf00      	nop
 800b860:	3720      	adds	r7, #32
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b86e:	bf00      	nop
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b083      	sub	sp, #12
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b88e:	b480      	push	{r7}
 800b890:	b083      	sub	sp, #12
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d101      	bne.n	800b8b8 <HAL_UARTEx_EnableFifoMode+0x16>
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e02b      	b.n	800b910 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2224      	movs	r2, #36	; 0x24
 800b8c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 0201 	bic.w	r2, r2, #1
 800b8de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b8ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f8c3 	bl	800ba84 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b926:	2b01      	cmp	r3, #1
 800b928:	d101      	bne.n	800b92e <HAL_UARTEx_DisableFifoMode+0x16>
 800b92a:	2302      	movs	r3, #2
 800b92c:	e027      	b.n	800b97e <HAL_UARTEx_DisableFifoMode+0x66>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2224      	movs	r2, #36	; 0x24
 800b93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f022 0201 	bic.w	r2, r2, #1
 800b954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b95c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2220      	movs	r2, #32
 800b970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d101      	bne.n	800b9a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b99e:	2302      	movs	r3, #2
 800b9a0:	e02d      	b.n	800b9fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2224      	movs	r2, #36	; 0x24
 800b9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0201 	bic.w	r2, r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f850 	bl	800ba84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e02d      	b.n	800ba7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2224      	movs	r2, #36	; 0x24
 800ba2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f022 0201 	bic.w	r2, r2, #1
 800ba44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f812 	bl	800ba84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d108      	bne.n	800baa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800baa4:	e031      	b.n	800bb0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800baa6:	2310      	movs	r3, #16
 800baa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800baaa:	2310      	movs	r3, #16
 800baac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	0e5b      	lsrs	r3, r3, #25
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	f003 0307 	and.w	r3, r3, #7
 800babc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	0f5b      	lsrs	r3, r3, #29
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 0307 	and.w	r3, r3, #7
 800bacc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bace:	7bbb      	ldrb	r3, [r7, #14]
 800bad0:	7b3a      	ldrb	r2, [r7, #12]
 800bad2:	4911      	ldr	r1, [pc, #68]	; (800bb18 <UARTEx_SetNbDataToProcess+0x94>)
 800bad4:	5c8a      	ldrb	r2, [r1, r2]
 800bad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bada:	7b3a      	ldrb	r2, [r7, #12]
 800badc:	490f      	ldr	r1, [pc, #60]	; (800bb1c <UARTEx_SetNbDataToProcess+0x98>)
 800bade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bae0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	7b7a      	ldrb	r2, [r7, #13]
 800baf0:	4909      	ldr	r1, [pc, #36]	; (800bb18 <UARTEx_SetNbDataToProcess+0x94>)
 800baf2:	5c8a      	ldrb	r2, [r1, r2]
 800baf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800baf8:	7b7a      	ldrb	r2, [r7, #13]
 800bafa:	4908      	ldr	r1, [pc, #32]	; (800bb1c <UARTEx_SetNbDataToProcess+0x98>)
 800bafc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bafe:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb0a:	bf00      	nop
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	0800f008 	.word	0x0800f008
 800bb1c:	0800f010 	.word	0x0800f010

0800bb20 <sin>:
 800bb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb22:	eeb0 7b40 	vmov.f64	d7, d0
 800bb26:	ee17 3a90 	vmov	r3, s15
 800bb2a:	4a1f      	ldr	r2, [pc, #124]	; (800bba8 <sin+0x88>)
 800bb2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb30:	4293      	cmp	r3, r2
 800bb32:	dc05      	bgt.n	800bb40 <sin+0x20>
 800bb34:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800bba0 <sin+0x80>
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f000 fc65 	bl	800c408 <__kernel_sin>
 800bb3e:	e004      	b.n	800bb4a <sin+0x2a>
 800bb40:	4a1a      	ldr	r2, [pc, #104]	; (800bbac <sin+0x8c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	dd04      	ble.n	800bb50 <sin+0x30>
 800bb46:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bb4a:	b005      	add	sp, #20
 800bb4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb50:	4668      	mov	r0, sp
 800bb52:	f000 f82d 	bl	800bbb0 <__ieee754_rem_pio2>
 800bb56:	f000 0003 	and.w	r0, r0, #3
 800bb5a:	2801      	cmp	r0, #1
 800bb5c:	d008      	beq.n	800bb70 <sin+0x50>
 800bb5e:	2802      	cmp	r0, #2
 800bb60:	d00d      	beq.n	800bb7e <sin+0x5e>
 800bb62:	b9b0      	cbnz	r0, 800bb92 <sin+0x72>
 800bb64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb68:	ed9d 0b00 	vldr	d0, [sp]
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	e7e4      	b.n	800bb3a <sin+0x1a>
 800bb70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb74:	ed9d 0b00 	vldr	d0, [sp]
 800bb78:	f000 f95a 	bl	800be30 <__kernel_cos>
 800bb7c:	e7e5      	b.n	800bb4a <sin+0x2a>
 800bb7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb82:	ed9d 0b00 	vldr	d0, [sp]
 800bb86:	2001      	movs	r0, #1
 800bb88:	f000 fc3e 	bl	800c408 <__kernel_sin>
 800bb8c:	eeb1 0b40 	vneg.f64	d0, d0
 800bb90:	e7db      	b.n	800bb4a <sin+0x2a>
 800bb92:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb96:	ed9d 0b00 	vldr	d0, [sp]
 800bb9a:	f000 f949 	bl	800be30 <__kernel_cos>
 800bb9e:	e7f5      	b.n	800bb8c <sin+0x6c>
	...
 800bba8:	3fe921fb 	.word	0x3fe921fb
 800bbac:	7fefffff 	.word	0x7fefffff

0800bbb0 <__ieee754_rem_pio2>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	eeb0 7b40 	vmov.f64	d7, d0
 800bbb6:	ee17 5a90 	vmov	r5, s15
 800bbba:	4b97      	ldr	r3, [pc, #604]	; (800be18 <__ieee754_rem_pio2+0x268>)
 800bbbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbc0:	429e      	cmp	r6, r3
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	dc07      	bgt.n	800bbd8 <__ieee754_rem_pio2+0x28>
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2300      	movs	r3, #0
 800bbcc:	ed84 0b00 	vstr	d0, [r4]
 800bbd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e01b      	b.n	800bc10 <__ieee754_rem_pio2+0x60>
 800bbd8:	4b90      	ldr	r3, [pc, #576]	; (800be1c <__ieee754_rem_pio2+0x26c>)
 800bbda:	429e      	cmp	r6, r3
 800bbdc:	dc3b      	bgt.n	800bc56 <__ieee754_rem_pio2+0xa6>
 800bbde:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800bbe2:	2d00      	cmp	r5, #0
 800bbe4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800bdd8 <__ieee754_rem_pio2+0x228>
 800bbe8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800bbec:	dd19      	ble.n	800bc22 <__ieee754_rem_pio2+0x72>
 800bbee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bbf2:	429e      	cmp	r6, r3
 800bbf4:	d00e      	beq.n	800bc14 <__ieee754_rem_pio2+0x64>
 800bbf6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800bde0 <__ieee754_rem_pio2+0x230>
 800bbfa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800bbfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bc02:	ed84 5b00 	vstr	d5, [r4]
 800bc06:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bc0a:	ed84 7b02 	vstr	d7, [r4, #8]
 800bc0e:	2001      	movs	r0, #1
 800bc10:	b008      	add	sp, #32
 800bc12:	bd70      	pop	{r4, r5, r6, pc}
 800bc14:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800bde8 <__ieee754_rem_pio2+0x238>
 800bc18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bc1c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800bdf0 <__ieee754_rem_pio2+0x240>
 800bc20:	e7eb      	b.n	800bbfa <__ieee754_rem_pio2+0x4a>
 800bc22:	429e      	cmp	r6, r3
 800bc24:	ee30 7b06 	vadd.f64	d7, d0, d6
 800bc28:	d00e      	beq.n	800bc48 <__ieee754_rem_pio2+0x98>
 800bc2a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800bde0 <__ieee754_rem_pio2+0x230>
 800bc2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800bc32:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bc36:	ed84 5b00 	vstr	d5, [r4]
 800bc3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc42:	ed84 7b02 	vstr	d7, [r4, #8]
 800bc46:	e7e3      	b.n	800bc10 <__ieee754_rem_pio2+0x60>
 800bc48:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800bde8 <__ieee754_rem_pio2+0x238>
 800bc4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc50:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800bdf0 <__ieee754_rem_pio2+0x240>
 800bc54:	e7eb      	b.n	800bc2e <__ieee754_rem_pio2+0x7e>
 800bc56:	4b72      	ldr	r3, [pc, #456]	; (800be20 <__ieee754_rem_pio2+0x270>)
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	dc6e      	bgt.n	800bd3a <__ieee754_rem_pio2+0x18a>
 800bc5c:	f000 fc2c 	bl	800c4b8 <fabs>
 800bc60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bc64:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800bdf8 <__ieee754_rem_pio2+0x248>
 800bc68:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bc6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bc70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bc74:	ee17 0a90 	vmov	r0, s15
 800bc78:	eeb1 4b45 	vneg.f64	d4, d5
 800bc7c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800bdd8 <__ieee754_rem_pio2+0x228>
 800bc80:	eea5 0b47 	vfms.f64	d0, d5, d7
 800bc84:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800bde0 <__ieee754_rem_pio2+0x230>
 800bc88:	281f      	cmp	r0, #31
 800bc8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bc8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bc92:	dc08      	bgt.n	800bca6 <__ieee754_rem_pio2+0xf6>
 800bc94:	4b63      	ldr	r3, [pc, #396]	; (800be24 <__ieee754_rem_pio2+0x274>)
 800bc96:	1e42      	subs	r2, r0, #1
 800bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9c:	42b3      	cmp	r3, r6
 800bc9e:	d002      	beq.n	800bca6 <__ieee754_rem_pio2+0xf6>
 800bca0:	ed84 6b00 	vstr	d6, [r4]
 800bca4:	e024      	b.n	800bcf0 <__ieee754_rem_pio2+0x140>
 800bca6:	ee16 3a90 	vmov	r3, s13
 800bcaa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bcae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800bcb2:	2b10      	cmp	r3, #16
 800bcb4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800bcb8:	ddf2      	ble.n	800bca0 <__ieee754_rem_pio2+0xf0>
 800bcba:	eeb0 6b40 	vmov.f64	d6, d0
 800bcbe:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800bde8 <__ieee754_rem_pio2+0x238>
 800bcc2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800bcc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bcca:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bcce:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800bdf0 <__ieee754_rem_pio2+0x240>
 800bcd2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800bcd6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800bcda:	ee13 3a90 	vmov	r3, s7
 800bcde:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	2b31      	cmp	r3, #49	; 0x31
 800bce6:	dc17      	bgt.n	800bd18 <__ieee754_rem_pio2+0x168>
 800bce8:	eeb0 0b46 	vmov.f64	d0, d6
 800bcec:	ed84 3b00 	vstr	d3, [r4]
 800bcf0:	ed94 6b00 	vldr	d6, [r4]
 800bcf4:	2d00      	cmp	r5, #0
 800bcf6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bcfa:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bcfe:	ed84 7b02 	vstr	d7, [r4, #8]
 800bd02:	da85      	bge.n	800bc10 <__ieee754_rem_pio2+0x60>
 800bd04:	eeb1 6b46 	vneg.f64	d6, d6
 800bd08:	ed84 6b00 	vstr	d6, [r4]
 800bd0c:	eeb1 7b47 	vneg.f64	d7, d7
 800bd10:	4240      	negs	r0, r0
 800bd12:	ed84 7b02 	vstr	d7, [r4, #8]
 800bd16:	e77b      	b.n	800bc10 <__ieee754_rem_pio2+0x60>
 800bd18:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800be00 <__ieee754_rem_pio2+0x250>
 800bd1c:	eeb0 0b46 	vmov.f64	d0, d6
 800bd20:	eea4 0b03 	vfma.f64	d0, d4, d3
 800bd24:	ee36 7b40 	vsub.f64	d7, d6, d0
 800bd28:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800be08 <__ieee754_rem_pio2+0x258>
 800bd2c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bd30:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800bd34:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bd38:	e7b2      	b.n	800bca0 <__ieee754_rem_pio2+0xf0>
 800bd3a:	4b3b      	ldr	r3, [pc, #236]	; (800be28 <__ieee754_rem_pio2+0x278>)
 800bd3c:	429e      	cmp	r6, r3
 800bd3e:	dd06      	ble.n	800bd4e <__ieee754_rem_pio2+0x19e>
 800bd40:	ee30 7b40 	vsub.f64	d7, d0, d0
 800bd44:	ed80 7b02 	vstr	d7, [r0, #8]
 800bd48:	ed80 7b00 	vstr	d7, [r0]
 800bd4c:	e742      	b.n	800bbd4 <__ieee754_rem_pio2+0x24>
 800bd4e:	1532      	asrs	r2, r6, #20
 800bd50:	ee10 0a10 	vmov	r0, s0
 800bd54:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800bd58:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800bd5c:	ec41 0b17 	vmov	d7, r0, r1
 800bd60:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800bd64:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800be10 <__ieee754_rem_pio2+0x260>
 800bd68:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800bd6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd70:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bd74:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bd78:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800bd7c:	a902      	add	r1, sp, #8
 800bd7e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800bd82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd86:	ed8d 6b04 	vstr	d6, [sp, #16]
 800bd8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bd8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd92:	2603      	movs	r6, #3
 800bd94:	4608      	mov	r0, r1
 800bd96:	ed91 7b04 	vldr	d7, [r1, #16]
 800bd9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda2:	4633      	mov	r3, r6
 800bda4:	f1a1 0108 	sub.w	r1, r1, #8
 800bda8:	f106 36ff 	add.w	r6, r6, #4294967295
 800bdac:	d0f3      	beq.n	800bd96 <__ieee754_rem_pio2+0x1e6>
 800bdae:	491f      	ldr	r1, [pc, #124]	; (800be2c <__ieee754_rem_pio2+0x27c>)
 800bdb0:	9101      	str	r1, [sp, #4]
 800bdb2:	2102      	movs	r1, #2
 800bdb4:	9100      	str	r1, [sp, #0]
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	f000 f8a6 	bl	800bf08 <__kernel_rem_pio2>
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	f6bf af27 	bge.w	800bc10 <__ieee754_rem_pio2+0x60>
 800bdc2:	ed94 7b00 	vldr	d7, [r4]
 800bdc6:	eeb1 7b47 	vneg.f64	d7, d7
 800bdca:	ed84 7b00 	vstr	d7, [r4]
 800bdce:	ed94 7b02 	vldr	d7, [r4, #8]
 800bdd2:	e79b      	b.n	800bd0c <__ieee754_rem_pio2+0x15c>
 800bdd4:	f3af 8000 	nop.w
 800bdd8:	54400000 	.word	0x54400000
 800bddc:	3ff921fb 	.word	0x3ff921fb
 800bde0:	1a626331 	.word	0x1a626331
 800bde4:	3dd0b461 	.word	0x3dd0b461
 800bde8:	1a600000 	.word	0x1a600000
 800bdec:	3dd0b461 	.word	0x3dd0b461
 800bdf0:	2e037073 	.word	0x2e037073
 800bdf4:	3ba3198a 	.word	0x3ba3198a
 800bdf8:	6dc9c883 	.word	0x6dc9c883
 800bdfc:	3fe45f30 	.word	0x3fe45f30
 800be00:	2e000000 	.word	0x2e000000
 800be04:	3ba3198a 	.word	0x3ba3198a
 800be08:	252049c1 	.word	0x252049c1
 800be0c:	397b839a 	.word	0x397b839a
 800be10:	00000000 	.word	0x00000000
 800be14:	41700000 	.word	0x41700000
 800be18:	3fe921fb 	.word	0x3fe921fb
 800be1c:	4002d97b 	.word	0x4002d97b
 800be20:	413921fb 	.word	0x413921fb
 800be24:	0800f018 	.word	0x0800f018
 800be28:	7fefffff 	.word	0x7fefffff
 800be2c:	0800f098 	.word	0x0800f098

0800be30 <__kernel_cos>:
 800be30:	ee10 1a90 	vmov	r1, s1
 800be34:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800be38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800be3c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800be40:	da05      	bge.n	800be4e <__kernel_cos+0x1e>
 800be42:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800be46:	ee17 3a90 	vmov	r3, s15
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d03d      	beq.n	800beca <__kernel_cos+0x9a>
 800be4e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800be52:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800bed0 <__kernel_cos+0xa0>
 800be56:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800bed8 <__kernel_cos+0xa8>
 800be5a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800be5e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800bee0 <__kernel_cos+0xb0>
 800be62:	eea6 7b03 	vfma.f64	d7, d6, d3
 800be66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800bee8 <__kernel_cos+0xb8>
 800be6a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800be6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800bef0 <__kernel_cos+0xc0>
 800be72:	4b23      	ldr	r3, [pc, #140]	; (800bf00 <__kernel_cos+0xd0>)
 800be74:	eea6 7b03 	vfma.f64	d7, d6, d3
 800be78:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800bef8 <__kernel_cos+0xc8>
 800be7c:	4299      	cmp	r1, r3
 800be7e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800be82:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800be86:	ee26 5b03 	vmul.f64	d5, d6, d3
 800be8a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800be8e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800be92:	eea3 6b05 	vfma.f64	d6, d3, d5
 800be96:	dc04      	bgt.n	800bea2 <__kernel_cos+0x72>
 800be98:	ee37 6b46 	vsub.f64	d6, d7, d6
 800be9c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800bea0:	4770      	bx	lr
 800bea2:	4b18      	ldr	r3, [pc, #96]	; (800bf04 <__kernel_cos+0xd4>)
 800bea4:	4299      	cmp	r1, r3
 800bea6:	dc0d      	bgt.n	800bec4 <__kernel_cos+0x94>
 800bea8:	2200      	movs	r2, #0
 800beaa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800beae:	ec43 2b15 	vmov	d5, r2, r3
 800beb2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800beb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800beba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bebe:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bec2:	4770      	bx	lr
 800bec4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800bec8:	e7f3      	b.n	800beb2 <__kernel_cos+0x82>
 800beca:	eeb0 0b44 	vmov.f64	d0, d4
 800bece:	4770      	bx	lr
 800bed0:	be8838d4 	.word	0xbe8838d4
 800bed4:	bda8fae9 	.word	0xbda8fae9
 800bed8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bedc:	3e21ee9e 	.word	0x3e21ee9e
 800bee0:	809c52ad 	.word	0x809c52ad
 800bee4:	be927e4f 	.word	0xbe927e4f
 800bee8:	19cb1590 	.word	0x19cb1590
 800beec:	3efa01a0 	.word	0x3efa01a0
 800bef0:	16c15177 	.word	0x16c15177
 800bef4:	bf56c16c 	.word	0xbf56c16c
 800bef8:	5555554c 	.word	0x5555554c
 800befc:	3fa55555 	.word	0x3fa55555
 800bf00:	3fd33332 	.word	0x3fd33332
 800bf04:	3fe90000 	.word	0x3fe90000

0800bf08 <__kernel_rem_pio2>:
 800bf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0c:	ed2d 8b06 	vpush	{d8-d10}
 800bf10:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800bf14:	469b      	mov	fp, r3
 800bf16:	460f      	mov	r7, r1
 800bf18:	4bcf      	ldr	r3, [pc, #828]	; (800c258 <__kernel_rem_pio2+0x350>)
 800bf1a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800bf1c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800bf20:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800bf24:	9000      	str	r0, [sp, #0]
 800bf26:	f112 0f14 	cmn.w	r2, #20
 800bf2a:	bfa8      	it	ge
 800bf2c:	2318      	movge	r3, #24
 800bf2e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800bf32:	bfb8      	it	lt
 800bf34:	2300      	movlt	r3, #0
 800bf36:	f06f 0417 	mvn.w	r4, #23
 800bf3a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c240 <__kernel_rem_pio2+0x338>
 800bf3e:	bfa4      	itt	ge
 800bf40:	f1a2 0a03 	subge.w	sl, r2, #3
 800bf44:	fb9a f3f3 	sdivge	r3, sl, r3
 800bf48:	fb03 4404 	mla	r4, r3, r4, r4
 800bf4c:	1a5d      	subs	r5, r3, r1
 800bf4e:	4414      	add	r4, r2
 800bf50:	eb09 0601 	add.w	r6, r9, r1
 800bf54:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800bf58:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	42b2      	cmp	r2, r6
 800bf60:	dd12      	ble.n	800bf88 <__kernel_rem_pio2+0x80>
 800bf62:	aa18      	add	r2, sp, #96	; 0x60
 800bf64:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800bf68:	460e      	mov	r6, r1
 800bf6a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800bf6e:	f1cb 0a01 	rsb	sl, fp, #1
 800bf72:	eb0a 0006 	add.w	r0, sl, r6
 800bf76:	4581      	cmp	r9, r0
 800bf78:	db25      	blt.n	800bfc6 <__kernel_rem_pio2+0xbe>
 800bf7a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800c240 <__kernel_rem_pio2+0x338>
 800bf7e:	f8dd e000 	ldr.w	lr, [sp]
 800bf82:	4615      	mov	r5, r2
 800bf84:	2000      	movs	r0, #0
 800bf86:	e015      	b.n	800bfb4 <__kernel_rem_pio2+0xac>
 800bf88:	42d5      	cmn	r5, r2
 800bf8a:	d409      	bmi.n	800bfa0 <__kernel_rem_pio2+0x98>
 800bf8c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800bf90:	ee07 0a90 	vmov	s15, r0
 800bf94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf98:	eca8 7b02 	vstmia	r8!, {d7}
 800bf9c:	3201      	adds	r2, #1
 800bf9e:	e7de      	b.n	800bf5e <__kernel_rem_pio2+0x56>
 800bfa0:	eeb0 7b46 	vmov.f64	d7, d6
 800bfa4:	e7f8      	b.n	800bf98 <__kernel_rem_pio2+0x90>
 800bfa6:	ecbe 5b02 	vldmia	lr!, {d5}
 800bfaa:	ed95 6b00 	vldr	d6, [r5]
 800bfae:	3001      	adds	r0, #1
 800bfb0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bfb4:	4288      	cmp	r0, r1
 800bfb6:	f1a5 0508 	sub.w	r5, r5, #8
 800bfba:	ddf4      	ble.n	800bfa6 <__kernel_rem_pio2+0x9e>
 800bfbc:	eca8 7b02 	vstmia	r8!, {d7}
 800bfc0:	3208      	adds	r2, #8
 800bfc2:	3601      	adds	r6, #1
 800bfc4:	e7d5      	b.n	800bf72 <__kernel_rem_pio2+0x6a>
 800bfc6:	aa04      	add	r2, sp, #16
 800bfc8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800c248 <__kernel_rem_pio2+0x340>
 800bfcc:	ed9f aba0 	vldr	d10, [pc, #640]	; 800c250 <__kernel_rem_pio2+0x348>
 800bfd0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800bfd4:	9201      	str	r2, [sp, #4]
 800bfd6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800bfda:	464e      	mov	r6, r9
 800bfdc:	ab90      	add	r3, sp, #576	; 0x240
 800bfde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfe2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800bfe6:	ab04      	add	r3, sp, #16
 800bfe8:	4618      	mov	r0, r3
 800bfea:	4632      	mov	r2, r6
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	dc4e      	bgt.n	800c08e <__kernel_rem_pio2+0x186>
 800bff0:	4620      	mov	r0, r4
 800bff2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800bff6:	f000 fadf 	bl	800c5b8 <scalbn>
 800bffa:	eeb0 8b40 	vmov.f64	d8, d0
 800bffe:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c002:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c006:	f000 fa63 	bl	800c4d0 <floor>
 800c00a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c00e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c012:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c016:	2c00      	cmp	r4, #0
 800c018:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c01c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c020:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c024:	ee17 8a90 	vmov	r8, s15
 800c028:	dd46      	ble.n	800c0b8 <__kernel_rem_pio2+0x1b0>
 800c02a:	1e70      	subs	r0, r6, #1
 800c02c:	aa04      	add	r2, sp, #16
 800c02e:	f1c4 0c18 	rsb	ip, r4, #24
 800c032:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800c036:	fa45 f20c 	asr.w	r2, r5, ip
 800c03a:	4490      	add	r8, r2
 800c03c:	fa02 f20c 	lsl.w	r2, r2, ip
 800c040:	1aad      	subs	r5, r5, r2
 800c042:	aa04      	add	r2, sp, #16
 800c044:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800c048:	f1c4 0217 	rsb	r2, r4, #23
 800c04c:	4115      	asrs	r5, r2
 800c04e:	2d00      	cmp	r5, #0
 800c050:	dd41      	ble.n	800c0d6 <__kernel_rem_pio2+0x1ce>
 800c052:	f04f 0c00 	mov.w	ip, #0
 800c056:	f108 0801 	add.w	r8, r8, #1
 800c05a:	4660      	mov	r0, ip
 800c05c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c060:	4566      	cmp	r6, ip
 800c062:	dc69      	bgt.n	800c138 <__kernel_rem_pio2+0x230>
 800c064:	2c00      	cmp	r4, #0
 800c066:	dd03      	ble.n	800c070 <__kernel_rem_pio2+0x168>
 800c068:	2c01      	cmp	r4, #1
 800c06a:	d076      	beq.n	800c15a <__kernel_rem_pio2+0x252>
 800c06c:	2c02      	cmp	r4, #2
 800c06e:	d07f      	beq.n	800c170 <__kernel_rem_pio2+0x268>
 800c070:	2d02      	cmp	r5, #2
 800c072:	d130      	bne.n	800c0d6 <__kernel_rem_pio2+0x1ce>
 800c074:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c078:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c07c:	b358      	cbz	r0, 800c0d6 <__kernel_rem_pio2+0x1ce>
 800c07e:	4620      	mov	r0, r4
 800c080:	9102      	str	r1, [sp, #8]
 800c082:	f000 fa99 	bl	800c5b8 <scalbn>
 800c086:	9902      	ldr	r1, [sp, #8]
 800c088:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c08c:	e023      	b.n	800c0d6 <__kernel_rem_pio2+0x1ce>
 800c08e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c092:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c096:	3a01      	subs	r2, #1
 800c098:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c09c:	ad68      	add	r5, sp, #416	; 0x1a0
 800c09e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c0a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c0a6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800c0aa:	eca0 0a01 	vstmia	r0!, {s0}
 800c0ae:	ed95 0b00 	vldr	d0, [r5]
 800c0b2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c0b6:	e799      	b.n	800bfec <__kernel_rem_pio2+0xe4>
 800c0b8:	d105      	bne.n	800c0c6 <__kernel_rem_pio2+0x1be>
 800c0ba:	1e72      	subs	r2, r6, #1
 800c0bc:	a804      	add	r0, sp, #16
 800c0be:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800c0c2:	15ed      	asrs	r5, r5, #23
 800c0c4:	e7c3      	b.n	800c04e <__kernel_rem_pio2+0x146>
 800c0c6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c0ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d2:	da2f      	bge.n	800c134 <__kernel_rem_pio2+0x22c>
 800c0d4:	2500      	movs	r5, #0
 800c0d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0de:	f040 8087 	bne.w	800c1f0 <__kernel_rem_pio2+0x2e8>
 800c0e2:	1e73      	subs	r3, r6, #1
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f04f 0c00 	mov.w	ip, #0
 800c0ea:	4548      	cmp	r0, r9
 800c0ec:	da47      	bge.n	800c17e <__kernel_rem_pio2+0x276>
 800c0ee:	f1bc 0f00 	cmp.w	ip, #0
 800c0f2:	d070      	beq.n	800c1d6 <__kernel_rem_pio2+0x2ce>
 800c0f4:	aa04      	add	r2, sp, #16
 800c0f6:	3c18      	subs	r4, #24
 800c0f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c0fc:	2a00      	cmp	r2, #0
 800c0fe:	d075      	beq.n	800c1ec <__kernel_rem_pio2+0x2e4>
 800c100:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c104:	4620      	mov	r0, r4
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	f000 fa56 	bl	800c5b8 <scalbn>
 800c10c:	9b00      	ldr	r3, [sp, #0]
 800c10e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800c248 <__kernel_rem_pio2+0x340>
 800c112:	461a      	mov	r2, r3
 800c114:	2a00      	cmp	r2, #0
 800c116:	f280 80ac 	bge.w	800c272 <__kernel_rem_pio2+0x36a>
 800c11a:	4619      	mov	r1, r3
 800c11c:	2000      	movs	r0, #0
 800c11e:	2900      	cmp	r1, #0
 800c120:	f2c0 80cd 	blt.w	800c2be <__kernel_rem_pio2+0x3b6>
 800c124:	aa68      	add	r2, sp, #416	; 0x1a0
 800c126:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800c12a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800c240 <__kernel_rem_pio2+0x338>
 800c12e:	4e4b      	ldr	r6, [pc, #300]	; (800c25c <__kernel_rem_pio2+0x354>)
 800c130:	2200      	movs	r2, #0
 800c132:	e0b8      	b.n	800c2a6 <__kernel_rem_pio2+0x39e>
 800c134:	2502      	movs	r5, #2
 800c136:	e78c      	b.n	800c052 <__kernel_rem_pio2+0x14a>
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	b948      	cbnz	r0, 800c150 <__kernel_rem_pio2+0x248>
 800c13c:	b11a      	cbz	r2, 800c146 <__kernel_rem_pio2+0x23e>
 800c13e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	2201      	movs	r2, #1
 800c146:	f10c 0c01 	add.w	ip, ip, #1
 800c14a:	3304      	adds	r3, #4
 800c14c:	4610      	mov	r0, r2
 800c14e:	e787      	b.n	800c060 <__kernel_rem_pio2+0x158>
 800c150:	ebae 0202 	sub.w	r2, lr, r2
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	4602      	mov	r2, r0
 800c158:	e7f5      	b.n	800c146 <__kernel_rem_pio2+0x23e>
 800c15a:	1e72      	subs	r2, r6, #1
 800c15c:	ab04      	add	r3, sp, #16
 800c15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c162:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c166:	f10d 0c10 	add.w	ip, sp, #16
 800c16a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800c16e:	e77f      	b.n	800c070 <__kernel_rem_pio2+0x168>
 800c170:	1e72      	subs	r2, r6, #1
 800c172:	ab04      	add	r3, sp, #16
 800c174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c178:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c17c:	e7f3      	b.n	800c166 <__kernel_rem_pio2+0x25e>
 800c17e:	aa04      	add	r2, sp, #16
 800c180:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c184:	3801      	subs	r0, #1
 800c186:	ea4c 0c02 	orr.w	ip, ip, r2
 800c18a:	e7ae      	b.n	800c0ea <__kernel_rem_pio2+0x1e2>
 800c18c:	3001      	adds	r0, #1
 800c18e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c192:	2a00      	cmp	r2, #0
 800c194:	d0fa      	beq.n	800c18c <__kernel_rem_pio2+0x284>
 800c196:	eb06 020b 	add.w	r2, r6, fp
 800c19a:	ad18      	add	r5, sp, #96	; 0x60
 800c19c:	1c73      	adds	r3, r6, #1
 800c19e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c1a2:	4406      	add	r6, r0
 800c1a4:	429e      	cmp	r6, r3
 800c1a6:	f6ff af19 	blt.w	800bfdc <__kernel_rem_pio2+0xd4>
 800c1aa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800c1ae:	9d00      	ldr	r5, [sp, #0]
 800c1b0:	ee07 0a90 	vmov	s15, r0
 800c1b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	eca2 7b02 	vstmia	r2!, {d7}
 800c1be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c240 <__kernel_rem_pio2+0x338>
 800c1c2:	4694      	mov	ip, r2
 800c1c4:	4288      	cmp	r0, r1
 800c1c6:	dd09      	ble.n	800c1dc <__kernel_rem_pio2+0x2d4>
 800c1c8:	a868      	add	r0, sp, #416	; 0x1a0
 800c1ca:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800c1ce:	ed80 7b00 	vstr	d7, [r0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	e7e6      	b.n	800c1a4 <__kernel_rem_pio2+0x29c>
 800c1d6:	9b01      	ldr	r3, [sp, #4]
 800c1d8:	2001      	movs	r0, #1
 800c1da:	e7d8      	b.n	800c18e <__kernel_rem_pio2+0x286>
 800c1dc:	ecb5 5b02 	vldmia	r5!, {d5}
 800c1e0:	ed3c 6b02 	vldmdb	ip!, {d6}
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c1ea:	e7eb      	b.n	800c1c4 <__kernel_rem_pio2+0x2bc>
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	e781      	b.n	800c0f4 <__kernel_rem_pio2+0x1ec>
 800c1f0:	4260      	negs	r0, r4
 800c1f2:	eeb0 0b48 	vmov.f64	d0, d8
 800c1f6:	f000 f9df 	bl	800c5b8 <scalbn>
 800c1fa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800c250 <__kernel_rem_pio2+0x348>
 800c1fe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c206:	db2b      	blt.n	800c260 <__kernel_rem_pio2+0x358>
 800c208:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c248 <__kernel_rem_pio2+0x340>
 800c20c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c210:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c214:	aa04      	add	r2, sp, #16
 800c216:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c21a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c21e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c222:	a904      	add	r1, sp, #16
 800c224:	ee10 3a10 	vmov	r3, s0
 800c228:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c22c:	ee17 2a10 	vmov	r2, s14
 800c230:	1c73      	adds	r3, r6, #1
 800c232:	3418      	adds	r4, #24
 800c234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c238:	e762      	b.n	800c100 <__kernel_rem_pio2+0x1f8>
 800c23a:	bf00      	nop
 800c23c:	f3af 8000 	nop.w
	...
 800c24c:	3e700000 	.word	0x3e700000
 800c250:	00000000 	.word	0x00000000
 800c254:	41700000 	.word	0x41700000
 800c258:	0800f1e0 	.word	0x0800f1e0
 800c25c:	0800f1a0 	.word	0x0800f1a0
 800c260:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c264:	aa04      	add	r2, sp, #16
 800c266:	ee10 3a10 	vmov	r3, s0
 800c26a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c26e:	4633      	mov	r3, r6
 800c270:	e746      	b.n	800c100 <__kernel_rem_pio2+0x1f8>
 800c272:	a804      	add	r0, sp, #16
 800c274:	a968      	add	r1, sp, #416	; 0x1a0
 800c276:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c27a:	9000      	str	r0, [sp, #0]
 800c27c:	ee07 0a90 	vmov	s15, r0
 800c280:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c284:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c288:	3a01      	subs	r2, #1
 800c28a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c28e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c292:	ed81 7b00 	vstr	d7, [r1]
 800c296:	e73d      	b.n	800c114 <__kernel_rem_pio2+0x20c>
 800c298:	ecb6 5b02 	vldmia	r6!, {d5}
 800c29c:	ecb4 6b02 	vldmia	r4!, {d6}
 800c2a0:	3201      	adds	r2, #1
 800c2a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c2a6:	454a      	cmp	r2, r9
 800c2a8:	dc01      	bgt.n	800c2ae <__kernel_rem_pio2+0x3a6>
 800c2aa:	4290      	cmp	r0, r2
 800c2ac:	daf4      	bge.n	800c298 <__kernel_rem_pio2+0x390>
 800c2ae:	aa40      	add	r2, sp, #256	; 0x100
 800c2b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c2b4:	ed82 7b00 	vstr	d7, [r2]
 800c2b8:	3901      	subs	r1, #1
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	e72f      	b.n	800c11e <__kernel_rem_pio2+0x216>
 800c2be:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c2c0:	2a02      	cmp	r2, #2
 800c2c2:	dc0a      	bgt.n	800c2da <__kernel_rem_pio2+0x3d2>
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	dc5a      	bgt.n	800c37e <__kernel_rem_pio2+0x476>
 800c2c8:	d039      	beq.n	800c33e <__kernel_rem_pio2+0x436>
 800c2ca:	f008 0007 	and.w	r0, r8, #7
 800c2ce:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c2d2:	ecbd 8b06 	vpop	{d8-d10}
 800c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2da:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c2dc:	2a03      	cmp	r2, #3
 800c2de:	d1f4      	bne.n	800c2ca <__kernel_rem_pio2+0x3c2>
 800c2e0:	aa40      	add	r2, sp, #256	; 0x100
 800c2e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f1a1 0108 	sub.w	r1, r1, #8
 800c2f0:	dc52      	bgt.n	800c398 <__kernel_rem_pio2+0x490>
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	2901      	cmp	r1, #1
 800c2f6:	f1a2 0208 	sub.w	r2, r2, #8
 800c2fa:	dc5d      	bgt.n	800c3b8 <__kernel_rem_pio2+0x4b0>
 800c2fc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800c400 <__kernel_rem_pio2+0x4f8>
 800c300:	2b01      	cmp	r3, #1
 800c302:	dc69      	bgt.n	800c3d8 <__kernel_rem_pio2+0x4d0>
 800c304:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800c308:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800c30c:	2d00      	cmp	r5, #0
 800c30e:	d16c      	bne.n	800c3ea <__kernel_rem_pio2+0x4e2>
 800c310:	ed87 5b00 	vstr	d5, [r7]
 800c314:	ed87 6b02 	vstr	d6, [r7, #8]
 800c318:	ed87 7b04 	vstr	d7, [r7, #16]
 800c31c:	e7d5      	b.n	800c2ca <__kernel_rem_pio2+0x3c2>
 800c31e:	aa40      	add	r2, sp, #256	; 0x100
 800c320:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c324:	ed92 6b00 	vldr	d6, [r2]
 800c328:	3b01      	subs	r3, #1
 800c32a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c32e:	2b00      	cmp	r3, #0
 800c330:	daf5      	bge.n	800c31e <__kernel_rem_pio2+0x416>
 800c332:	b10d      	cbz	r5, 800c338 <__kernel_rem_pio2+0x430>
 800c334:	eeb1 7b47 	vneg.f64	d7, d7
 800c338:	ed87 7b00 	vstr	d7, [r7]
 800c33c:	e7c5      	b.n	800c2ca <__kernel_rem_pio2+0x3c2>
 800c33e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c400 <__kernel_rem_pio2+0x4f8>
 800c342:	e7f4      	b.n	800c32e <__kernel_rem_pio2+0x426>
 800c344:	a940      	add	r1, sp, #256	; 0x100
 800c346:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c34a:	ed91 7b00 	vldr	d7, [r1]
 800c34e:	3a01      	subs	r2, #1
 800c350:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c354:	2a00      	cmp	r2, #0
 800c356:	daf5      	bge.n	800c344 <__kernel_rem_pio2+0x43c>
 800c358:	b1ad      	cbz	r5, 800c386 <__kernel_rem_pio2+0x47e>
 800c35a:	eeb1 7b46 	vneg.f64	d7, d6
 800c35e:	ed87 7b00 	vstr	d7, [r7]
 800c362:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800c366:	a942      	add	r1, sp, #264	; 0x108
 800c368:	2201      	movs	r2, #1
 800c36a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c36e:	4293      	cmp	r3, r2
 800c370:	da0c      	bge.n	800c38c <__kernel_rem_pio2+0x484>
 800c372:	b10d      	cbz	r5, 800c378 <__kernel_rem_pio2+0x470>
 800c374:	eeb1 7b47 	vneg.f64	d7, d7
 800c378:	ed87 7b02 	vstr	d7, [r7, #8]
 800c37c:	e7a5      	b.n	800c2ca <__kernel_rem_pio2+0x3c2>
 800c37e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c400 <__kernel_rem_pio2+0x4f8>
 800c382:	461a      	mov	r2, r3
 800c384:	e7e6      	b.n	800c354 <__kernel_rem_pio2+0x44c>
 800c386:	eeb0 7b46 	vmov.f64	d7, d6
 800c38a:	e7e8      	b.n	800c35e <__kernel_rem_pio2+0x456>
 800c38c:	ecb1 6b02 	vldmia	r1!, {d6}
 800c390:	3201      	adds	r2, #1
 800c392:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c396:	e7ea      	b.n	800c36e <__kernel_rem_pio2+0x466>
 800c398:	ed91 7b00 	vldr	d7, [r1]
 800c39c:	ed91 5b02 	vldr	d5, [r1, #8]
 800c3a0:	3801      	subs	r0, #1
 800c3a2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c3a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c3aa:	ed81 6b00 	vstr	d6, [r1]
 800c3ae:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c3b2:	ed81 7b02 	vstr	d7, [r1, #8]
 800c3b6:	e798      	b.n	800c2ea <__kernel_rem_pio2+0x3e2>
 800c3b8:	ed92 7b00 	vldr	d7, [r2]
 800c3bc:	ed92 5b02 	vldr	d5, [r2, #8]
 800c3c0:	3901      	subs	r1, #1
 800c3c2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c3c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c3ca:	ed82 6b00 	vstr	d6, [r2]
 800c3ce:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c3d2:	ed82 7b02 	vstr	d7, [r2, #8]
 800c3d6:	e78d      	b.n	800c2f4 <__kernel_rem_pio2+0x3ec>
 800c3d8:	aa40      	add	r2, sp, #256	; 0x100
 800c3da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c3de:	ed92 6b00 	vldr	d6, [r2]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c3e8:	e78a      	b.n	800c300 <__kernel_rem_pio2+0x3f8>
 800c3ea:	eeb1 5b45 	vneg.f64	d5, d5
 800c3ee:	eeb1 6b46 	vneg.f64	d6, d6
 800c3f2:	ed87 5b00 	vstr	d5, [r7]
 800c3f6:	eeb1 7b47 	vneg.f64	d7, d7
 800c3fa:	ed87 6b02 	vstr	d6, [r7, #8]
 800c3fe:	e78b      	b.n	800c318 <__kernel_rem_pio2+0x410>
	...

0800c408 <__kernel_sin>:
 800c408:	ee10 3a90 	vmov	r3, s1
 800c40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c410:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c414:	da04      	bge.n	800c420 <__kernel_sin+0x18>
 800c416:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c41a:	ee17 3a90 	vmov	r3, s15
 800c41e:	b35b      	cbz	r3, 800c478 <__kernel_sin+0x70>
 800c420:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c424:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c428:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c480 <__kernel_sin+0x78>
 800c42c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c488 <__kernel_sin+0x80>
 800c430:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c434:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c490 <__kernel_sin+0x88>
 800c438:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c43c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c498 <__kernel_sin+0x90>
 800c440:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c444:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c4a0 <__kernel_sin+0x98>
 800c448:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c44c:	b930      	cbnz	r0, 800c45c <__kernel_sin+0x54>
 800c44e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c4a8 <__kernel_sin+0xa0>
 800c452:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c456:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c45a:	4770      	bx	lr
 800c45c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c460:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c464:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c468:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c46c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c4b0 <__kernel_sin+0xa8>
 800c470:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c474:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	f3af 8000 	nop.w
 800c480:	5acfd57c 	.word	0x5acfd57c
 800c484:	3de5d93a 	.word	0x3de5d93a
 800c488:	8a2b9ceb 	.word	0x8a2b9ceb
 800c48c:	be5ae5e6 	.word	0xbe5ae5e6
 800c490:	57b1fe7d 	.word	0x57b1fe7d
 800c494:	3ec71de3 	.word	0x3ec71de3
 800c498:	19c161d5 	.word	0x19c161d5
 800c49c:	bf2a01a0 	.word	0xbf2a01a0
 800c4a0:	1110f8a6 	.word	0x1110f8a6
 800c4a4:	3f811111 	.word	0x3f811111
 800c4a8:	55555549 	.word	0x55555549
 800c4ac:	bfc55555 	.word	0xbfc55555
 800c4b0:	55555549 	.word	0x55555549
 800c4b4:	3fc55555 	.word	0x3fc55555

0800c4b8 <fabs>:
 800c4b8:	ec51 0b10 	vmov	r0, r1, d0
 800c4bc:	ee10 2a10 	vmov	r2, s0
 800c4c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4c4:	ec43 2b10 	vmov	d0, r2, r3
 800c4c8:	4770      	bx	lr
 800c4ca:	0000      	movs	r0, r0
 800c4cc:	0000      	movs	r0, r0
	...

0800c4d0 <floor>:
 800c4d0:	ee10 1a90 	vmov	r1, s1
 800c4d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c4dc:	2b13      	cmp	r3, #19
 800c4de:	b530      	push	{r4, r5, lr}
 800c4e0:	ee10 0a10 	vmov	r0, s0
 800c4e4:	ee10 5a10 	vmov	r5, s0
 800c4e8:	dc31      	bgt.n	800c54e <floor+0x7e>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	da15      	bge.n	800c51a <floor+0x4a>
 800c4ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c5a8 <floor+0xd8>
 800c4f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c4f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fe:	dd07      	ble.n	800c510 <floor+0x40>
 800c500:	2900      	cmp	r1, #0
 800c502:	da4e      	bge.n	800c5a2 <floor+0xd2>
 800c504:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c508:	4318      	orrs	r0, r3
 800c50a:	d001      	beq.n	800c510 <floor+0x40>
 800c50c:	4928      	ldr	r1, [pc, #160]	; (800c5b0 <floor+0xe0>)
 800c50e:	2000      	movs	r0, #0
 800c510:	460b      	mov	r3, r1
 800c512:	4602      	mov	r2, r0
 800c514:	ec43 2b10 	vmov	d0, r2, r3
 800c518:	e020      	b.n	800c55c <floor+0x8c>
 800c51a:	4a26      	ldr	r2, [pc, #152]	; (800c5b4 <floor+0xe4>)
 800c51c:	411a      	asrs	r2, r3
 800c51e:	ea01 0402 	and.w	r4, r1, r2
 800c522:	4304      	orrs	r4, r0
 800c524:	d01a      	beq.n	800c55c <floor+0x8c>
 800c526:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c5a8 <floor+0xd8>
 800c52a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c52e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	ddeb      	ble.n	800c510 <floor+0x40>
 800c538:	2900      	cmp	r1, #0
 800c53a:	bfbe      	ittt	lt
 800c53c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800c540:	fa40 f303 	asrlt.w	r3, r0, r3
 800c544:	18c9      	addlt	r1, r1, r3
 800c546:	ea21 0102 	bic.w	r1, r1, r2
 800c54a:	2000      	movs	r0, #0
 800c54c:	e7e0      	b.n	800c510 <floor+0x40>
 800c54e:	2b33      	cmp	r3, #51	; 0x33
 800c550:	dd05      	ble.n	800c55e <floor+0x8e>
 800c552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c556:	d101      	bne.n	800c55c <floor+0x8c>
 800c558:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c55c:	bd30      	pop	{r4, r5, pc}
 800c55e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800c562:	f04f 32ff 	mov.w	r2, #4294967295
 800c566:	40e2      	lsrs	r2, r4
 800c568:	4202      	tst	r2, r0
 800c56a:	d0f7      	beq.n	800c55c <floor+0x8c>
 800c56c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c5a8 <floor+0xd8>
 800c570:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c574:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57c:	ddc8      	ble.n	800c510 <floor+0x40>
 800c57e:	2900      	cmp	r1, #0
 800c580:	da02      	bge.n	800c588 <floor+0xb8>
 800c582:	2b14      	cmp	r3, #20
 800c584:	d103      	bne.n	800c58e <floor+0xbe>
 800c586:	3101      	adds	r1, #1
 800c588:	ea20 0002 	bic.w	r0, r0, r2
 800c58c:	e7c0      	b.n	800c510 <floor+0x40>
 800c58e:	2401      	movs	r4, #1
 800c590:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c594:	fa04 f303 	lsl.w	r3, r4, r3
 800c598:	4418      	add	r0, r3
 800c59a:	42a8      	cmp	r0, r5
 800c59c:	bf38      	it	cc
 800c59e:	1909      	addcc	r1, r1, r4
 800c5a0:	e7f2      	b.n	800c588 <floor+0xb8>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	4601      	mov	r1, r0
 800c5a6:	e7b3      	b.n	800c510 <floor+0x40>
 800c5a8:	8800759c 	.word	0x8800759c
 800c5ac:	7e37e43c 	.word	0x7e37e43c
 800c5b0:	bff00000 	.word	0xbff00000
 800c5b4:	000fffff 	.word	0x000fffff

0800c5b8 <scalbn>:
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	ed8d 0b00 	vstr	d0, [sp]
 800c5be:	9b01      	ldr	r3, [sp, #4]
 800c5c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c5c4:	b9a2      	cbnz	r2, 800c5f0 <scalbn+0x38>
 800c5c6:	9a00      	ldr	r2, [sp, #0]
 800c5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d03a      	beq.n	800c646 <scalbn+0x8e>
 800c5d0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800c6a8 <scalbn+0xf0>
 800c5d4:	4b40      	ldr	r3, [pc, #256]	; (800c6d8 <scalbn+0x120>)
 800c5d6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c5da:	4298      	cmp	r0, r3
 800c5dc:	ed8d 7b00 	vstr	d7, [sp]
 800c5e0:	da11      	bge.n	800c606 <scalbn+0x4e>
 800c5e2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800c6b0 <scalbn+0xf8>
 800c5e6:	ed9d 6b00 	vldr	d6, [sp]
 800c5ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5ee:	e007      	b.n	800c600 <scalbn+0x48>
 800c5f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c5f4:	428a      	cmp	r2, r1
 800c5f6:	d10a      	bne.n	800c60e <scalbn+0x56>
 800c5f8:	ed9d 7b00 	vldr	d7, [sp]
 800c5fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c600:	ed8d 7b00 	vstr	d7, [sp]
 800c604:	e01f      	b.n	800c646 <scalbn+0x8e>
 800c606:	9b01      	ldr	r3, [sp, #4]
 800c608:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c60c:	3a36      	subs	r2, #54	; 0x36
 800c60e:	4402      	add	r2, r0
 800c610:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c614:	428a      	cmp	r2, r1
 800c616:	dd0a      	ble.n	800c62e <scalbn+0x76>
 800c618:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800c6b8 <scalbn+0x100>
 800c61c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800c6c0 <scalbn+0x108>
 800c620:	eeb0 6b47 	vmov.f64	d6, d7
 800c624:	9b01      	ldr	r3, [sp, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c62c:	e7dd      	b.n	800c5ea <scalbn+0x32>
 800c62e:	2a00      	cmp	r2, #0
 800c630:	dd0d      	ble.n	800c64e <scalbn+0x96>
 800c632:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c63a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c63e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c642:	e9cd 0100 	strd	r0, r1, [sp]
 800c646:	ed9d 0b00 	vldr	d0, [sp]
 800c64a:	b002      	add	sp, #8
 800c64c:	4770      	bx	lr
 800c64e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c652:	da18      	bge.n	800c686 <scalbn+0xce>
 800c654:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c658:	4298      	cmp	r0, r3
 800c65a:	9b01      	ldr	r3, [sp, #4]
 800c65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c660:	dd09      	ble.n	800c676 <scalbn+0xbe>
 800c662:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c6b8 <scalbn+0x100>
 800c666:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800c6c0 <scalbn+0x108>
 800c66a:	eeb0 6b47 	vmov.f64	d6, d7
 800c66e:	2b00      	cmp	r3, #0
 800c670:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800c674:	e7b9      	b.n	800c5ea <scalbn+0x32>
 800c676:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c6b0 <scalbn+0xf8>
 800c67a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800c6c8 <scalbn+0x110>
 800c67e:	eeb0 6b47 	vmov.f64	d6, d7
 800c682:	2b00      	cmp	r3, #0
 800c684:	e7f4      	b.n	800c670 <scalbn+0xb8>
 800c686:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c68a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c68e:	3236      	adds	r2, #54	; 0x36
 800c690:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c694:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c698:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800c6d0 <scalbn+0x118>
 800c69c:	ec41 0b17 	vmov	d7, r0, r1
 800c6a0:	e7a3      	b.n	800c5ea <scalbn+0x32>
 800c6a2:	bf00      	nop
 800c6a4:	f3af 8000 	nop.w
 800c6a8:	00000000 	.word	0x00000000
 800c6ac:	43500000 	.word	0x43500000
 800c6b0:	c2f8f359 	.word	0xc2f8f359
 800c6b4:	01a56e1f 	.word	0x01a56e1f
 800c6b8:	8800759c 	.word	0x8800759c
 800c6bc:	7e37e43c 	.word	0x7e37e43c
 800c6c0:	8800759c 	.word	0x8800759c
 800c6c4:	fe37e43c 	.word	0xfe37e43c
 800c6c8:	c2f8f359 	.word	0xc2f8f359
 800c6cc:	81a56e1f 	.word	0x81a56e1f
 800c6d0:	00000000 	.word	0x00000000
 800c6d4:	3c900000 	.word	0x3c900000
 800c6d8:	ffff3cb0 	.word	0xffff3cb0

0800c6dc <__errno>:
 800c6dc:	4b01      	ldr	r3, [pc, #4]	; (800c6e4 <__errno+0x8>)
 800c6de:	6818      	ldr	r0, [r3, #0]
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	24000020 	.word	0x24000020

0800c6e8 <__libc_init_array>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	4d0d      	ldr	r5, [pc, #52]	; (800c720 <__libc_init_array+0x38>)
 800c6ec:	4c0d      	ldr	r4, [pc, #52]	; (800c724 <__libc_init_array+0x3c>)
 800c6ee:	1b64      	subs	r4, r4, r5
 800c6f0:	10a4      	asrs	r4, r4, #2
 800c6f2:	2600      	movs	r6, #0
 800c6f4:	42a6      	cmp	r6, r4
 800c6f6:	d109      	bne.n	800c70c <__libc_init_array+0x24>
 800c6f8:	4d0b      	ldr	r5, [pc, #44]	; (800c728 <__libc_init_array+0x40>)
 800c6fa:	4c0c      	ldr	r4, [pc, #48]	; (800c72c <__libc_init_array+0x44>)
 800c6fc:	f002 fc60 	bl	800efc0 <_init>
 800c700:	1b64      	subs	r4, r4, r5
 800c702:	10a4      	asrs	r4, r4, #2
 800c704:	2600      	movs	r6, #0
 800c706:	42a6      	cmp	r6, r4
 800c708:	d105      	bne.n	800c716 <__libc_init_array+0x2e>
 800c70a:	bd70      	pop	{r4, r5, r6, pc}
 800c70c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c710:	4798      	blx	r3
 800c712:	3601      	adds	r6, #1
 800c714:	e7ee      	b.n	800c6f4 <__libc_init_array+0xc>
 800c716:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71a:	4798      	blx	r3
 800c71c:	3601      	adds	r6, #1
 800c71e:	e7f2      	b.n	800c706 <__libc_init_array+0x1e>
 800c720:	0800f5dc 	.word	0x0800f5dc
 800c724:	0800f5dc 	.word	0x0800f5dc
 800c728:	0800f5dc 	.word	0x0800f5dc
 800c72c:	0800f5e4 	.word	0x0800f5e4

0800c730 <memset>:
 800c730:	4402      	add	r2, r0
 800c732:	4603      	mov	r3, r0
 800c734:	4293      	cmp	r3, r2
 800c736:	d100      	bne.n	800c73a <memset+0xa>
 800c738:	4770      	bx	lr
 800c73a:	f803 1b01 	strb.w	r1, [r3], #1
 800c73e:	e7f9      	b.n	800c734 <memset+0x4>

0800c740 <__cvt>:
 800c740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c742:	ed2d 8b02 	vpush	{d8}
 800c746:	eeb0 8b40 	vmov.f64	d8, d0
 800c74a:	b085      	sub	sp, #20
 800c74c:	4617      	mov	r7, r2
 800c74e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c750:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c752:	ee18 2a90 	vmov	r2, s17
 800c756:	f025 0520 	bic.w	r5, r5, #32
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	bfb6      	itet	lt
 800c75e:	222d      	movlt	r2, #45	; 0x2d
 800c760:	2200      	movge	r2, #0
 800c762:	eeb1 8b40 	vneglt.f64	d8, d0
 800c766:	2d46      	cmp	r5, #70	; 0x46
 800c768:	460c      	mov	r4, r1
 800c76a:	701a      	strb	r2, [r3, #0]
 800c76c:	d004      	beq.n	800c778 <__cvt+0x38>
 800c76e:	2d45      	cmp	r5, #69	; 0x45
 800c770:	d100      	bne.n	800c774 <__cvt+0x34>
 800c772:	3401      	adds	r4, #1
 800c774:	2102      	movs	r1, #2
 800c776:	e000      	b.n	800c77a <__cvt+0x3a>
 800c778:	2103      	movs	r1, #3
 800c77a:	ab03      	add	r3, sp, #12
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	ab02      	add	r3, sp, #8
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	4622      	mov	r2, r4
 800c784:	4633      	mov	r3, r6
 800c786:	eeb0 0b48 	vmov.f64	d0, d8
 800c78a:	f000 fca9 	bl	800d0e0 <_dtoa_r>
 800c78e:	2d47      	cmp	r5, #71	; 0x47
 800c790:	d109      	bne.n	800c7a6 <__cvt+0x66>
 800c792:	07fb      	lsls	r3, r7, #31
 800c794:	d407      	bmi.n	800c7a6 <__cvt+0x66>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c79a:	1a1b      	subs	r3, r3, r0
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	b005      	add	sp, #20
 800c7a0:	ecbd 8b02 	vpop	{d8}
 800c7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a6:	2d46      	cmp	r5, #70	; 0x46
 800c7a8:	eb00 0204 	add.w	r2, r0, r4
 800c7ac:	d10c      	bne.n	800c7c8 <__cvt+0x88>
 800c7ae:	7803      	ldrb	r3, [r0, #0]
 800c7b0:	2b30      	cmp	r3, #48	; 0x30
 800c7b2:	d107      	bne.n	800c7c4 <__cvt+0x84>
 800c7b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7bc:	bf1c      	itt	ne
 800c7be:	f1c4 0401 	rsbne	r4, r4, #1
 800c7c2:	6034      	strne	r4, [r6, #0]
 800c7c4:	6833      	ldr	r3, [r6, #0]
 800c7c6:	441a      	add	r2, r3
 800c7c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d0:	bf08      	it	eq
 800c7d2:	9203      	streq	r2, [sp, #12]
 800c7d4:	2130      	movs	r1, #48	; 0x30
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d2dc      	bcs.n	800c796 <__cvt+0x56>
 800c7dc:	1c5c      	adds	r4, r3, #1
 800c7de:	9403      	str	r4, [sp, #12]
 800c7e0:	7019      	strb	r1, [r3, #0]
 800c7e2:	e7f8      	b.n	800c7d6 <__cvt+0x96>

0800c7e4 <__exponent>:
 800c7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2900      	cmp	r1, #0
 800c7ea:	bfb8      	it	lt
 800c7ec:	4249      	neglt	r1, r1
 800c7ee:	f803 2b02 	strb.w	r2, [r3], #2
 800c7f2:	bfb4      	ite	lt
 800c7f4:	222d      	movlt	r2, #45	; 0x2d
 800c7f6:	222b      	movge	r2, #43	; 0x2b
 800c7f8:	2909      	cmp	r1, #9
 800c7fa:	7042      	strb	r2, [r0, #1]
 800c7fc:	dd2a      	ble.n	800c854 <__exponent+0x70>
 800c7fe:	f10d 0407 	add.w	r4, sp, #7
 800c802:	46a4      	mov	ip, r4
 800c804:	270a      	movs	r7, #10
 800c806:	46a6      	mov	lr, r4
 800c808:	460a      	mov	r2, r1
 800c80a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c80e:	fb07 1516 	mls	r5, r7, r6, r1
 800c812:	3530      	adds	r5, #48	; 0x30
 800c814:	2a63      	cmp	r2, #99	; 0x63
 800c816:	f104 34ff 	add.w	r4, r4, #4294967295
 800c81a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c81e:	4631      	mov	r1, r6
 800c820:	dcf1      	bgt.n	800c806 <__exponent+0x22>
 800c822:	3130      	adds	r1, #48	; 0x30
 800c824:	f1ae 0502 	sub.w	r5, lr, #2
 800c828:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c82c:	1c44      	adds	r4, r0, #1
 800c82e:	4629      	mov	r1, r5
 800c830:	4561      	cmp	r1, ip
 800c832:	d30a      	bcc.n	800c84a <__exponent+0x66>
 800c834:	f10d 0209 	add.w	r2, sp, #9
 800c838:	eba2 020e 	sub.w	r2, r2, lr
 800c83c:	4565      	cmp	r5, ip
 800c83e:	bf88      	it	hi
 800c840:	2200      	movhi	r2, #0
 800c842:	4413      	add	r3, r2
 800c844:	1a18      	subs	r0, r3, r0
 800c846:	b003      	add	sp, #12
 800c848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c84e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c852:	e7ed      	b.n	800c830 <__exponent+0x4c>
 800c854:	2330      	movs	r3, #48	; 0x30
 800c856:	3130      	adds	r1, #48	; 0x30
 800c858:	7083      	strb	r3, [r0, #2]
 800c85a:	70c1      	strb	r1, [r0, #3]
 800c85c:	1d03      	adds	r3, r0, #4
 800c85e:	e7f1      	b.n	800c844 <__exponent+0x60>

0800c860 <_printf_float>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	b08b      	sub	sp, #44	; 0x2c
 800c866:	460c      	mov	r4, r1
 800c868:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c86c:	4616      	mov	r6, r2
 800c86e:	461f      	mov	r7, r3
 800c870:	4605      	mov	r5, r0
 800c872:	f001 f9b7 	bl	800dbe4 <_localeconv_r>
 800c876:	f8d0 b000 	ldr.w	fp, [r0]
 800c87a:	4658      	mov	r0, fp
 800c87c:	f7f3 fd30 	bl	80002e0 <strlen>
 800c880:	2300      	movs	r3, #0
 800c882:	9308      	str	r3, [sp, #32]
 800c884:	f8d8 3000 	ldr.w	r3, [r8]
 800c888:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c88c:	6822      	ldr	r2, [r4, #0]
 800c88e:	3307      	adds	r3, #7
 800c890:	f023 0307 	bic.w	r3, r3, #7
 800c894:	f103 0108 	add.w	r1, r3, #8
 800c898:	f8c8 1000 	str.w	r1, [r8]
 800c89c:	4682      	mov	sl, r0
 800c89e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c8a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cb08 <_printf_float+0x2a8>
 800c8aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c8ae:	eeb0 6bc0 	vabs.f64	d6, d0
 800c8b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800c8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ba:	dd24      	ble.n	800c906 <_printf_float+0xa6>
 800c8bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c4:	d502      	bpl.n	800c8cc <_printf_float+0x6c>
 800c8c6:	232d      	movs	r3, #45	; 0x2d
 800c8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8cc:	4b90      	ldr	r3, [pc, #576]	; (800cb10 <_printf_float+0x2b0>)
 800c8ce:	4891      	ldr	r0, [pc, #580]	; (800cb14 <_printf_float+0x2b4>)
 800c8d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c8d4:	bf94      	ite	ls
 800c8d6:	4698      	movls	r8, r3
 800c8d8:	4680      	movhi	r8, r0
 800c8da:	2303      	movs	r3, #3
 800c8dc:	6123      	str	r3, [r4, #16]
 800c8de:	f022 0204 	bic.w	r2, r2, #4
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6022      	str	r2, [r4, #0]
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	9700      	str	r7, [sp, #0]
 800c8ea:	4633      	mov	r3, r6
 800c8ec:	aa09      	add	r2, sp, #36	; 0x24
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f000 f9d3 	bl	800cc9c <_printf_common>
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	f040 808a 	bne.w	800ca10 <_printf_float+0x1b0>
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	b00b      	add	sp, #44	; 0x2c
 800c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	eeb4 0b40 	vcmp.f64	d0, d0
 800c90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90e:	d709      	bvc.n	800c924 <_printf_float+0xc4>
 800c910:	ee10 3a90 	vmov	r3, s1
 800c914:	2b00      	cmp	r3, #0
 800c916:	bfbc      	itt	lt
 800c918:	232d      	movlt	r3, #45	; 0x2d
 800c91a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c91e:	487e      	ldr	r0, [pc, #504]	; (800cb18 <_printf_float+0x2b8>)
 800c920:	4b7e      	ldr	r3, [pc, #504]	; (800cb1c <_printf_float+0x2bc>)
 800c922:	e7d5      	b.n	800c8d0 <_printf_float+0x70>
 800c924:	6863      	ldr	r3, [r4, #4]
 800c926:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c92a:	9104      	str	r1, [sp, #16]
 800c92c:	1c59      	adds	r1, r3, #1
 800c92e:	d13c      	bne.n	800c9aa <_printf_float+0x14a>
 800c930:	2306      	movs	r3, #6
 800c932:	6063      	str	r3, [r4, #4]
 800c934:	2300      	movs	r3, #0
 800c936:	9303      	str	r3, [sp, #12]
 800c938:	ab08      	add	r3, sp, #32
 800c93a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c93e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c942:	ab07      	add	r3, sp, #28
 800c944:	6861      	ldr	r1, [r4, #4]
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	6022      	str	r2, [r4, #0]
 800c94a:	f10d 031b 	add.w	r3, sp, #27
 800c94e:	4628      	mov	r0, r5
 800c950:	f7ff fef6 	bl	800c740 <__cvt>
 800c954:	9b04      	ldr	r3, [sp, #16]
 800c956:	9907      	ldr	r1, [sp, #28]
 800c958:	2b47      	cmp	r3, #71	; 0x47
 800c95a:	4680      	mov	r8, r0
 800c95c:	d108      	bne.n	800c970 <_printf_float+0x110>
 800c95e:	1cc8      	adds	r0, r1, #3
 800c960:	db02      	blt.n	800c968 <_printf_float+0x108>
 800c962:	6863      	ldr	r3, [r4, #4]
 800c964:	4299      	cmp	r1, r3
 800c966:	dd41      	ble.n	800c9ec <_printf_float+0x18c>
 800c968:	f1a9 0902 	sub.w	r9, r9, #2
 800c96c:	fa5f f989 	uxtb.w	r9, r9
 800c970:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c974:	d820      	bhi.n	800c9b8 <_printf_float+0x158>
 800c976:	3901      	subs	r1, #1
 800c978:	464a      	mov	r2, r9
 800c97a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c97e:	9107      	str	r1, [sp, #28]
 800c980:	f7ff ff30 	bl	800c7e4 <__exponent>
 800c984:	9a08      	ldr	r2, [sp, #32]
 800c986:	9004      	str	r0, [sp, #16]
 800c988:	1813      	adds	r3, r2, r0
 800c98a:	2a01      	cmp	r2, #1
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	dc02      	bgt.n	800c996 <_printf_float+0x136>
 800c990:	6822      	ldr	r2, [r4, #0]
 800c992:	07d2      	lsls	r2, r2, #31
 800c994:	d501      	bpl.n	800c99a <_printf_float+0x13a>
 800c996:	3301      	adds	r3, #1
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0a2      	beq.n	800c8e8 <_printf_float+0x88>
 800c9a2:	232d      	movs	r3, #45	; 0x2d
 800c9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9a8:	e79e      	b.n	800c8e8 <_printf_float+0x88>
 800c9aa:	9904      	ldr	r1, [sp, #16]
 800c9ac:	2947      	cmp	r1, #71	; 0x47
 800c9ae:	d1c1      	bne.n	800c934 <_printf_float+0xd4>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1bf      	bne.n	800c934 <_printf_float+0xd4>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e7bc      	b.n	800c932 <_printf_float+0xd2>
 800c9b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c9bc:	d118      	bne.n	800c9f0 <_printf_float+0x190>
 800c9be:	2900      	cmp	r1, #0
 800c9c0:	6863      	ldr	r3, [r4, #4]
 800c9c2:	dd0b      	ble.n	800c9dc <_printf_float+0x17c>
 800c9c4:	6121      	str	r1, [r4, #16]
 800c9c6:	b913      	cbnz	r3, 800c9ce <_printf_float+0x16e>
 800c9c8:	6822      	ldr	r2, [r4, #0]
 800c9ca:	07d0      	lsls	r0, r2, #31
 800c9cc:	d502      	bpl.n	800c9d4 <_printf_float+0x174>
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	440b      	add	r3, r1
 800c9d2:	6123      	str	r3, [r4, #16]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9d8:	9304      	str	r3, [sp, #16]
 800c9da:	e7de      	b.n	800c99a <_printf_float+0x13a>
 800c9dc:	b913      	cbnz	r3, 800c9e4 <_printf_float+0x184>
 800c9de:	6822      	ldr	r2, [r4, #0]
 800c9e0:	07d2      	lsls	r2, r2, #31
 800c9e2:	d501      	bpl.n	800c9e8 <_printf_float+0x188>
 800c9e4:	3302      	adds	r3, #2
 800c9e6:	e7f4      	b.n	800c9d2 <_printf_float+0x172>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e7f2      	b.n	800c9d2 <_printf_float+0x172>
 800c9ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c9f0:	9b08      	ldr	r3, [sp, #32]
 800c9f2:	4299      	cmp	r1, r3
 800c9f4:	db05      	blt.n	800ca02 <_printf_float+0x1a2>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	6121      	str	r1, [r4, #16]
 800c9fa:	07d8      	lsls	r0, r3, #31
 800c9fc:	d5ea      	bpl.n	800c9d4 <_printf_float+0x174>
 800c9fe:	1c4b      	adds	r3, r1, #1
 800ca00:	e7e7      	b.n	800c9d2 <_printf_float+0x172>
 800ca02:	2900      	cmp	r1, #0
 800ca04:	bfd4      	ite	le
 800ca06:	f1c1 0202 	rsble	r2, r1, #2
 800ca0a:	2201      	movgt	r2, #1
 800ca0c:	4413      	add	r3, r2
 800ca0e:	e7e0      	b.n	800c9d2 <_printf_float+0x172>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	055a      	lsls	r2, r3, #21
 800ca14:	d407      	bmi.n	800ca26 <_printf_float+0x1c6>
 800ca16:	6923      	ldr	r3, [r4, #16]
 800ca18:	4642      	mov	r2, r8
 800ca1a:	4631      	mov	r1, r6
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	47b8      	blx	r7
 800ca20:	3001      	adds	r0, #1
 800ca22:	d12a      	bne.n	800ca7a <_printf_float+0x21a>
 800ca24:	e76a      	b.n	800c8fc <_printf_float+0x9c>
 800ca26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ca2a:	f240 80e2 	bls.w	800cbf2 <_printf_float+0x392>
 800ca2e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ca32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca3a:	d133      	bne.n	800caa4 <_printf_float+0x244>
 800ca3c:	4a38      	ldr	r2, [pc, #224]	; (800cb20 <_printf_float+0x2c0>)
 800ca3e:	2301      	movs	r3, #1
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	47b8      	blx	r7
 800ca46:	3001      	adds	r0, #1
 800ca48:	f43f af58 	beq.w	800c8fc <_printf_float+0x9c>
 800ca4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	db02      	blt.n	800ca5a <_printf_float+0x1fa>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	07d8      	lsls	r0, r3, #31
 800ca58:	d50f      	bpl.n	800ca7a <_printf_float+0x21a>
 800ca5a:	4653      	mov	r3, sl
 800ca5c:	465a      	mov	r2, fp
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b8      	blx	r7
 800ca64:	3001      	adds	r0, #1
 800ca66:	f43f af49 	beq.w	800c8fc <_printf_float+0x9c>
 800ca6a:	f04f 0800 	mov.w	r8, #0
 800ca6e:	f104 091a 	add.w	r9, r4, #26
 800ca72:	9b08      	ldr	r3, [sp, #32]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	4543      	cmp	r3, r8
 800ca78:	dc09      	bgt.n	800ca8e <_printf_float+0x22e>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	079b      	lsls	r3, r3, #30
 800ca7e:	f100 8108 	bmi.w	800cc92 <_printf_float+0x432>
 800ca82:	68e0      	ldr	r0, [r4, #12]
 800ca84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca86:	4298      	cmp	r0, r3
 800ca88:	bfb8      	it	lt
 800ca8a:	4618      	movlt	r0, r3
 800ca8c:	e738      	b.n	800c900 <_printf_float+0xa0>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	464a      	mov	r2, r9
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f af2f 	beq.w	800c8fc <_printf_float+0x9c>
 800ca9e:	f108 0801 	add.w	r8, r8, #1
 800caa2:	e7e6      	b.n	800ca72 <_printf_float+0x212>
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dc3c      	bgt.n	800cb24 <_printf_float+0x2c4>
 800caaa:	4a1d      	ldr	r2, [pc, #116]	; (800cb20 <_printf_float+0x2c0>)
 800caac:	2301      	movs	r3, #1
 800caae:	4631      	mov	r1, r6
 800cab0:	4628      	mov	r0, r5
 800cab2:	47b8      	blx	r7
 800cab4:	3001      	adds	r0, #1
 800cab6:	f43f af21 	beq.w	800c8fc <_printf_float+0x9c>
 800caba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	d102      	bne.n	800cac8 <_printf_float+0x268>
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	07d9      	lsls	r1, r3, #31
 800cac6:	d5d8      	bpl.n	800ca7a <_printf_float+0x21a>
 800cac8:	4653      	mov	r3, sl
 800caca:	465a      	mov	r2, fp
 800cacc:	4631      	mov	r1, r6
 800cace:	4628      	mov	r0, r5
 800cad0:	47b8      	blx	r7
 800cad2:	3001      	adds	r0, #1
 800cad4:	f43f af12 	beq.w	800c8fc <_printf_float+0x9c>
 800cad8:	f04f 0900 	mov.w	r9, #0
 800cadc:	f104 0a1a 	add.w	sl, r4, #26
 800cae0:	9b07      	ldr	r3, [sp, #28]
 800cae2:	425b      	negs	r3, r3
 800cae4:	454b      	cmp	r3, r9
 800cae6:	dc01      	bgt.n	800caec <_printf_float+0x28c>
 800cae8:	9b08      	ldr	r3, [sp, #32]
 800caea:	e795      	b.n	800ca18 <_printf_float+0x1b8>
 800caec:	2301      	movs	r3, #1
 800caee:	4652      	mov	r2, sl
 800caf0:	4631      	mov	r1, r6
 800caf2:	4628      	mov	r0, r5
 800caf4:	47b8      	blx	r7
 800caf6:	3001      	adds	r0, #1
 800caf8:	f43f af00 	beq.w	800c8fc <_printf_float+0x9c>
 800cafc:	f109 0901 	add.w	r9, r9, #1
 800cb00:	e7ee      	b.n	800cae0 <_printf_float+0x280>
 800cb02:	bf00      	nop
 800cb04:	f3af 8000 	nop.w
 800cb08:	ffffffff 	.word	0xffffffff
 800cb0c:	7fefffff 	.word	0x7fefffff
 800cb10:	0800f1f4 	.word	0x0800f1f4
 800cb14:	0800f1f8 	.word	0x0800f1f8
 800cb18:	0800f200 	.word	0x0800f200
 800cb1c:	0800f1fc 	.word	0x0800f1fc
 800cb20:	0800f204 	.word	0x0800f204
 800cb24:	9a08      	ldr	r2, [sp, #32]
 800cb26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	bfa8      	it	ge
 800cb2c:	461a      	movge	r2, r3
 800cb2e:	2a00      	cmp	r2, #0
 800cb30:	4691      	mov	r9, r2
 800cb32:	dc38      	bgt.n	800cba6 <_printf_float+0x346>
 800cb34:	2300      	movs	r3, #0
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb3c:	f104 021a 	add.w	r2, r4, #26
 800cb40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb42:	9905      	ldr	r1, [sp, #20]
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	eba3 0309 	sub.w	r3, r3, r9
 800cb4a:	428b      	cmp	r3, r1
 800cb4c:	dc33      	bgt.n	800cbb6 <_printf_float+0x356>
 800cb4e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	db3c      	blt.n	800cbd0 <_printf_float+0x370>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	07da      	lsls	r2, r3, #31
 800cb5a:	d439      	bmi.n	800cbd0 <_printf_float+0x370>
 800cb5c:	9a08      	ldr	r2, [sp, #32]
 800cb5e:	9b04      	ldr	r3, [sp, #16]
 800cb60:	9907      	ldr	r1, [sp, #28]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	eba2 0901 	sub.w	r9, r2, r1
 800cb68:	4599      	cmp	r9, r3
 800cb6a:	bfa8      	it	ge
 800cb6c:	4699      	movge	r9, r3
 800cb6e:	f1b9 0f00 	cmp.w	r9, #0
 800cb72:	dc35      	bgt.n	800cbe0 <_printf_float+0x380>
 800cb74:	f04f 0800 	mov.w	r8, #0
 800cb78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb7c:	f104 0a1a 	add.w	sl, r4, #26
 800cb80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cb84:	1a9b      	subs	r3, r3, r2
 800cb86:	eba3 0309 	sub.w	r3, r3, r9
 800cb8a:	4543      	cmp	r3, r8
 800cb8c:	f77f af75 	ble.w	800ca7a <_printf_float+0x21a>
 800cb90:	2301      	movs	r3, #1
 800cb92:	4652      	mov	r2, sl
 800cb94:	4631      	mov	r1, r6
 800cb96:	4628      	mov	r0, r5
 800cb98:	47b8      	blx	r7
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	f43f aeae 	beq.w	800c8fc <_printf_float+0x9c>
 800cba0:	f108 0801 	add.w	r8, r8, #1
 800cba4:	e7ec      	b.n	800cb80 <_printf_float+0x320>
 800cba6:	4613      	mov	r3, r2
 800cba8:	4631      	mov	r1, r6
 800cbaa:	4642      	mov	r2, r8
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d1bf      	bne.n	800cb34 <_printf_float+0x2d4>
 800cbb4:	e6a2      	b.n	800c8fc <_printf_float+0x9c>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4628      	mov	r0, r5
 800cbbc:	9204      	str	r2, [sp, #16]
 800cbbe:	47b8      	blx	r7
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	f43f ae9b 	beq.w	800c8fc <_printf_float+0x9c>
 800cbc6:	9b05      	ldr	r3, [sp, #20]
 800cbc8:	9a04      	ldr	r2, [sp, #16]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	9305      	str	r3, [sp, #20]
 800cbce:	e7b7      	b.n	800cb40 <_printf_float+0x2e0>
 800cbd0:	4653      	mov	r3, sl
 800cbd2:	465a      	mov	r2, fp
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	47b8      	blx	r7
 800cbda:	3001      	adds	r0, #1
 800cbdc:	d1be      	bne.n	800cb5c <_printf_float+0x2fc>
 800cbde:	e68d      	b.n	800c8fc <_printf_float+0x9c>
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	4442      	add	r2, r8
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	4628      	mov	r0, r5
 800cbea:	47b8      	blx	r7
 800cbec:	3001      	adds	r0, #1
 800cbee:	d1c1      	bne.n	800cb74 <_printf_float+0x314>
 800cbf0:	e684      	b.n	800c8fc <_printf_float+0x9c>
 800cbf2:	9a08      	ldr	r2, [sp, #32]
 800cbf4:	2a01      	cmp	r2, #1
 800cbf6:	dc01      	bgt.n	800cbfc <_printf_float+0x39c>
 800cbf8:	07db      	lsls	r3, r3, #31
 800cbfa:	d537      	bpl.n	800cc6c <_printf_float+0x40c>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4642      	mov	r2, r8
 800cc00:	4631      	mov	r1, r6
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b8      	blx	r7
 800cc06:	3001      	adds	r0, #1
 800cc08:	f43f ae78 	beq.w	800c8fc <_printf_float+0x9c>
 800cc0c:	4653      	mov	r3, sl
 800cc0e:	465a      	mov	r2, fp
 800cc10:	4631      	mov	r1, r6
 800cc12:	4628      	mov	r0, r5
 800cc14:	47b8      	blx	r7
 800cc16:	3001      	adds	r0, #1
 800cc18:	f43f ae70 	beq.w	800c8fc <_printf_float+0x9c>
 800cc1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc28:	d01b      	beq.n	800cc62 <_printf_float+0x402>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	f108 0201 	add.w	r2, r8, #1
 800cc30:	3b01      	subs	r3, #1
 800cc32:	4631      	mov	r1, r6
 800cc34:	4628      	mov	r0, r5
 800cc36:	47b8      	blx	r7
 800cc38:	3001      	adds	r0, #1
 800cc3a:	d10e      	bne.n	800cc5a <_printf_float+0x3fa>
 800cc3c:	e65e      	b.n	800c8fc <_printf_float+0x9c>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	464a      	mov	r2, r9
 800cc42:	4631      	mov	r1, r6
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b8      	blx	r7
 800cc48:	3001      	adds	r0, #1
 800cc4a:	f43f ae57 	beq.w	800c8fc <_printf_float+0x9c>
 800cc4e:	f108 0801 	add.w	r8, r8, #1
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	4543      	cmp	r3, r8
 800cc58:	dcf1      	bgt.n	800cc3e <_printf_float+0x3de>
 800cc5a:	9b04      	ldr	r3, [sp, #16]
 800cc5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc60:	e6db      	b.n	800ca1a <_printf_float+0x1ba>
 800cc62:	f04f 0800 	mov.w	r8, #0
 800cc66:	f104 091a 	add.w	r9, r4, #26
 800cc6a:	e7f2      	b.n	800cc52 <_printf_float+0x3f2>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4642      	mov	r2, r8
 800cc70:	e7df      	b.n	800cc32 <_printf_float+0x3d2>
 800cc72:	2301      	movs	r3, #1
 800cc74:	464a      	mov	r2, r9
 800cc76:	4631      	mov	r1, r6
 800cc78:	4628      	mov	r0, r5
 800cc7a:	47b8      	blx	r7
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	f43f ae3d 	beq.w	800c8fc <_printf_float+0x9c>
 800cc82:	f108 0801 	add.w	r8, r8, #1
 800cc86:	68e3      	ldr	r3, [r4, #12]
 800cc88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc8a:	1a5b      	subs	r3, r3, r1
 800cc8c:	4543      	cmp	r3, r8
 800cc8e:	dcf0      	bgt.n	800cc72 <_printf_float+0x412>
 800cc90:	e6f7      	b.n	800ca82 <_printf_float+0x222>
 800cc92:	f04f 0800 	mov.w	r8, #0
 800cc96:	f104 0919 	add.w	r9, r4, #25
 800cc9a:	e7f4      	b.n	800cc86 <_printf_float+0x426>

0800cc9c <_printf_common>:
 800cc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca0:	4616      	mov	r6, r2
 800cca2:	4699      	mov	r9, r3
 800cca4:	688a      	ldr	r2, [r1, #8]
 800cca6:	690b      	ldr	r3, [r1, #16]
 800cca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	bfb8      	it	lt
 800ccb0:	4613      	movlt	r3, r2
 800ccb2:	6033      	str	r3, [r6, #0]
 800ccb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460c      	mov	r4, r1
 800ccbc:	b10a      	cbz	r2, 800ccc2 <_printf_common+0x26>
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	6033      	str	r3, [r6, #0]
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	0699      	lsls	r1, r3, #26
 800ccc6:	bf42      	ittt	mi
 800ccc8:	6833      	ldrmi	r3, [r6, #0]
 800ccca:	3302      	addmi	r3, #2
 800cccc:	6033      	strmi	r3, [r6, #0]
 800ccce:	6825      	ldr	r5, [r4, #0]
 800ccd0:	f015 0506 	ands.w	r5, r5, #6
 800ccd4:	d106      	bne.n	800cce4 <_printf_common+0x48>
 800ccd6:	f104 0a19 	add.w	sl, r4, #25
 800ccda:	68e3      	ldr	r3, [r4, #12]
 800ccdc:	6832      	ldr	r2, [r6, #0]
 800ccde:	1a9b      	subs	r3, r3, r2
 800cce0:	42ab      	cmp	r3, r5
 800cce2:	dc26      	bgt.n	800cd32 <_printf_common+0x96>
 800cce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cce8:	1e13      	subs	r3, r2, #0
 800ccea:	6822      	ldr	r2, [r4, #0]
 800ccec:	bf18      	it	ne
 800ccee:	2301      	movne	r3, #1
 800ccf0:	0692      	lsls	r2, r2, #26
 800ccf2:	d42b      	bmi.n	800cd4c <_printf_common+0xb0>
 800ccf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	47c0      	blx	r8
 800ccfe:	3001      	adds	r0, #1
 800cd00:	d01e      	beq.n	800cd40 <_printf_common+0xa4>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	68e5      	ldr	r5, [r4, #12]
 800cd06:	6832      	ldr	r2, [r6, #0]
 800cd08:	f003 0306 	and.w	r3, r3, #6
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	bf08      	it	eq
 800cd10:	1aad      	subeq	r5, r5, r2
 800cd12:	68a3      	ldr	r3, [r4, #8]
 800cd14:	6922      	ldr	r2, [r4, #16]
 800cd16:	bf0c      	ite	eq
 800cd18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd1c:	2500      	movne	r5, #0
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	bfc4      	itt	gt
 800cd22:	1a9b      	subgt	r3, r3, r2
 800cd24:	18ed      	addgt	r5, r5, r3
 800cd26:	2600      	movs	r6, #0
 800cd28:	341a      	adds	r4, #26
 800cd2a:	42b5      	cmp	r5, r6
 800cd2c:	d11a      	bne.n	800cd64 <_printf_common+0xc8>
 800cd2e:	2000      	movs	r0, #0
 800cd30:	e008      	b.n	800cd44 <_printf_common+0xa8>
 800cd32:	2301      	movs	r3, #1
 800cd34:	4652      	mov	r2, sl
 800cd36:	4649      	mov	r1, r9
 800cd38:	4638      	mov	r0, r7
 800cd3a:	47c0      	blx	r8
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d103      	bne.n	800cd48 <_printf_common+0xac>
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd48:	3501      	adds	r5, #1
 800cd4a:	e7c6      	b.n	800ccda <_printf_common+0x3e>
 800cd4c:	18e1      	adds	r1, r4, r3
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	2030      	movs	r0, #48	; 0x30
 800cd52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd56:	4422      	add	r2, r4
 800cd58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd60:	3302      	adds	r3, #2
 800cd62:	e7c7      	b.n	800ccf4 <_printf_common+0x58>
 800cd64:	2301      	movs	r3, #1
 800cd66:	4622      	mov	r2, r4
 800cd68:	4649      	mov	r1, r9
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	47c0      	blx	r8
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d0e6      	beq.n	800cd40 <_printf_common+0xa4>
 800cd72:	3601      	adds	r6, #1
 800cd74:	e7d9      	b.n	800cd2a <_printf_common+0x8e>
	...

0800cd78 <_printf_i>:
 800cd78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	4691      	mov	r9, r2
 800cd80:	7e27      	ldrb	r7, [r4, #24]
 800cd82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd84:	2f78      	cmp	r7, #120	; 0x78
 800cd86:	4680      	mov	r8, r0
 800cd88:	469a      	mov	sl, r3
 800cd8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd8e:	d807      	bhi.n	800cda0 <_printf_i+0x28>
 800cd90:	2f62      	cmp	r7, #98	; 0x62
 800cd92:	d80a      	bhi.n	800cdaa <_printf_i+0x32>
 800cd94:	2f00      	cmp	r7, #0
 800cd96:	f000 80d8 	beq.w	800cf4a <_printf_i+0x1d2>
 800cd9a:	2f58      	cmp	r7, #88	; 0x58
 800cd9c:	f000 80a3 	beq.w	800cee6 <_printf_i+0x16e>
 800cda0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cda4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cda8:	e03a      	b.n	800ce20 <_printf_i+0xa8>
 800cdaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdae:	2b15      	cmp	r3, #21
 800cdb0:	d8f6      	bhi.n	800cda0 <_printf_i+0x28>
 800cdb2:	a001      	add	r0, pc, #4	; (adr r0, 800cdb8 <_printf_i+0x40>)
 800cdb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cdb8:	0800ce11 	.word	0x0800ce11
 800cdbc:	0800ce25 	.word	0x0800ce25
 800cdc0:	0800cda1 	.word	0x0800cda1
 800cdc4:	0800cda1 	.word	0x0800cda1
 800cdc8:	0800cda1 	.word	0x0800cda1
 800cdcc:	0800cda1 	.word	0x0800cda1
 800cdd0:	0800ce25 	.word	0x0800ce25
 800cdd4:	0800cda1 	.word	0x0800cda1
 800cdd8:	0800cda1 	.word	0x0800cda1
 800cddc:	0800cda1 	.word	0x0800cda1
 800cde0:	0800cda1 	.word	0x0800cda1
 800cde4:	0800cf31 	.word	0x0800cf31
 800cde8:	0800ce55 	.word	0x0800ce55
 800cdec:	0800cf13 	.word	0x0800cf13
 800cdf0:	0800cda1 	.word	0x0800cda1
 800cdf4:	0800cda1 	.word	0x0800cda1
 800cdf8:	0800cf53 	.word	0x0800cf53
 800cdfc:	0800cda1 	.word	0x0800cda1
 800ce00:	0800ce55 	.word	0x0800ce55
 800ce04:	0800cda1 	.word	0x0800cda1
 800ce08:	0800cda1 	.word	0x0800cda1
 800ce0c:	0800cf1b 	.word	0x0800cf1b
 800ce10:	680b      	ldr	r3, [r1, #0]
 800ce12:	1d1a      	adds	r2, r3, #4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	600a      	str	r2, [r1, #0]
 800ce18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce20:	2301      	movs	r3, #1
 800ce22:	e0a3      	b.n	800cf6c <_printf_i+0x1f4>
 800ce24:	6825      	ldr	r5, [r4, #0]
 800ce26:	6808      	ldr	r0, [r1, #0]
 800ce28:	062e      	lsls	r6, r5, #24
 800ce2a:	f100 0304 	add.w	r3, r0, #4
 800ce2e:	d50a      	bpl.n	800ce46 <_printf_i+0xce>
 800ce30:	6805      	ldr	r5, [r0, #0]
 800ce32:	600b      	str	r3, [r1, #0]
 800ce34:	2d00      	cmp	r5, #0
 800ce36:	da03      	bge.n	800ce40 <_printf_i+0xc8>
 800ce38:	232d      	movs	r3, #45	; 0x2d
 800ce3a:	426d      	negs	r5, r5
 800ce3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce40:	485e      	ldr	r0, [pc, #376]	; (800cfbc <_printf_i+0x244>)
 800ce42:	230a      	movs	r3, #10
 800ce44:	e019      	b.n	800ce7a <_printf_i+0x102>
 800ce46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ce4a:	6805      	ldr	r5, [r0, #0]
 800ce4c:	600b      	str	r3, [r1, #0]
 800ce4e:	bf18      	it	ne
 800ce50:	b22d      	sxthne	r5, r5
 800ce52:	e7ef      	b.n	800ce34 <_printf_i+0xbc>
 800ce54:	680b      	ldr	r3, [r1, #0]
 800ce56:	6825      	ldr	r5, [r4, #0]
 800ce58:	1d18      	adds	r0, r3, #4
 800ce5a:	6008      	str	r0, [r1, #0]
 800ce5c:	0628      	lsls	r0, r5, #24
 800ce5e:	d501      	bpl.n	800ce64 <_printf_i+0xec>
 800ce60:	681d      	ldr	r5, [r3, #0]
 800ce62:	e002      	b.n	800ce6a <_printf_i+0xf2>
 800ce64:	0669      	lsls	r1, r5, #25
 800ce66:	d5fb      	bpl.n	800ce60 <_printf_i+0xe8>
 800ce68:	881d      	ldrh	r5, [r3, #0]
 800ce6a:	4854      	ldr	r0, [pc, #336]	; (800cfbc <_printf_i+0x244>)
 800ce6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce6e:	bf0c      	ite	eq
 800ce70:	2308      	moveq	r3, #8
 800ce72:	230a      	movne	r3, #10
 800ce74:	2100      	movs	r1, #0
 800ce76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce7a:	6866      	ldr	r6, [r4, #4]
 800ce7c:	60a6      	str	r6, [r4, #8]
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	bfa2      	ittt	ge
 800ce82:	6821      	ldrge	r1, [r4, #0]
 800ce84:	f021 0104 	bicge.w	r1, r1, #4
 800ce88:	6021      	strge	r1, [r4, #0]
 800ce8a:	b90d      	cbnz	r5, 800ce90 <_printf_i+0x118>
 800ce8c:	2e00      	cmp	r6, #0
 800ce8e:	d04d      	beq.n	800cf2c <_printf_i+0x1b4>
 800ce90:	4616      	mov	r6, r2
 800ce92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce96:	fb03 5711 	mls	r7, r3, r1, r5
 800ce9a:	5dc7      	ldrb	r7, [r0, r7]
 800ce9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cea0:	462f      	mov	r7, r5
 800cea2:	42bb      	cmp	r3, r7
 800cea4:	460d      	mov	r5, r1
 800cea6:	d9f4      	bls.n	800ce92 <_printf_i+0x11a>
 800cea8:	2b08      	cmp	r3, #8
 800ceaa:	d10b      	bne.n	800cec4 <_printf_i+0x14c>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	07df      	lsls	r7, r3, #31
 800ceb0:	d508      	bpl.n	800cec4 <_printf_i+0x14c>
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	6861      	ldr	r1, [r4, #4]
 800ceb6:	4299      	cmp	r1, r3
 800ceb8:	bfde      	ittt	le
 800ceba:	2330      	movle	r3, #48	; 0x30
 800cebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cec0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cec4:	1b92      	subs	r2, r2, r6
 800cec6:	6122      	str	r2, [r4, #16]
 800cec8:	f8cd a000 	str.w	sl, [sp]
 800cecc:	464b      	mov	r3, r9
 800cece:	aa03      	add	r2, sp, #12
 800ced0:	4621      	mov	r1, r4
 800ced2:	4640      	mov	r0, r8
 800ced4:	f7ff fee2 	bl	800cc9c <_printf_common>
 800ced8:	3001      	adds	r0, #1
 800ceda:	d14c      	bne.n	800cf76 <_printf_i+0x1fe>
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	b004      	add	sp, #16
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	4835      	ldr	r0, [pc, #212]	; (800cfbc <_printf_i+0x244>)
 800cee8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	680e      	ldr	r6, [r1, #0]
 800cef0:	061f      	lsls	r7, r3, #24
 800cef2:	f856 5b04 	ldr.w	r5, [r6], #4
 800cef6:	600e      	str	r6, [r1, #0]
 800cef8:	d514      	bpl.n	800cf24 <_printf_i+0x1ac>
 800cefa:	07d9      	lsls	r1, r3, #31
 800cefc:	bf44      	itt	mi
 800cefe:	f043 0320 	orrmi.w	r3, r3, #32
 800cf02:	6023      	strmi	r3, [r4, #0]
 800cf04:	b91d      	cbnz	r5, 800cf0e <_printf_i+0x196>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	f023 0320 	bic.w	r3, r3, #32
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	2310      	movs	r3, #16
 800cf10:	e7b0      	b.n	800ce74 <_printf_i+0xfc>
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	f043 0320 	orr.w	r3, r3, #32
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	2378      	movs	r3, #120	; 0x78
 800cf1c:	4828      	ldr	r0, [pc, #160]	; (800cfc0 <_printf_i+0x248>)
 800cf1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf22:	e7e3      	b.n	800ceec <_printf_i+0x174>
 800cf24:	065e      	lsls	r6, r3, #25
 800cf26:	bf48      	it	mi
 800cf28:	b2ad      	uxthmi	r5, r5
 800cf2a:	e7e6      	b.n	800cefa <_printf_i+0x182>
 800cf2c:	4616      	mov	r6, r2
 800cf2e:	e7bb      	b.n	800cea8 <_printf_i+0x130>
 800cf30:	680b      	ldr	r3, [r1, #0]
 800cf32:	6826      	ldr	r6, [r4, #0]
 800cf34:	6960      	ldr	r0, [r4, #20]
 800cf36:	1d1d      	adds	r5, r3, #4
 800cf38:	600d      	str	r5, [r1, #0]
 800cf3a:	0635      	lsls	r5, r6, #24
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	d501      	bpl.n	800cf44 <_printf_i+0x1cc>
 800cf40:	6018      	str	r0, [r3, #0]
 800cf42:	e002      	b.n	800cf4a <_printf_i+0x1d2>
 800cf44:	0671      	lsls	r1, r6, #25
 800cf46:	d5fb      	bpl.n	800cf40 <_printf_i+0x1c8>
 800cf48:	8018      	strh	r0, [r3, #0]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	4616      	mov	r6, r2
 800cf50:	e7ba      	b.n	800cec8 <_printf_i+0x150>
 800cf52:	680b      	ldr	r3, [r1, #0]
 800cf54:	1d1a      	adds	r2, r3, #4
 800cf56:	600a      	str	r2, [r1, #0]
 800cf58:	681e      	ldr	r6, [r3, #0]
 800cf5a:	6862      	ldr	r2, [r4, #4]
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7f3 f9c6 	bl	80002f0 <memchr>
 800cf64:	b108      	cbz	r0, 800cf6a <_printf_i+0x1f2>
 800cf66:	1b80      	subs	r0, r0, r6
 800cf68:	6060      	str	r0, [r4, #4]
 800cf6a:	6863      	ldr	r3, [r4, #4]
 800cf6c:	6123      	str	r3, [r4, #16]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf74:	e7a8      	b.n	800cec8 <_printf_i+0x150>
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	4632      	mov	r2, r6
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	47d0      	blx	sl
 800cf80:	3001      	adds	r0, #1
 800cf82:	d0ab      	beq.n	800cedc <_printf_i+0x164>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	079b      	lsls	r3, r3, #30
 800cf88:	d413      	bmi.n	800cfb2 <_printf_i+0x23a>
 800cf8a:	68e0      	ldr	r0, [r4, #12]
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	4298      	cmp	r0, r3
 800cf90:	bfb8      	it	lt
 800cf92:	4618      	movlt	r0, r3
 800cf94:	e7a4      	b.n	800cee0 <_printf_i+0x168>
 800cf96:	2301      	movs	r3, #1
 800cf98:	4632      	mov	r2, r6
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	47d0      	blx	sl
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d09b      	beq.n	800cedc <_printf_i+0x164>
 800cfa4:	3501      	adds	r5, #1
 800cfa6:	68e3      	ldr	r3, [r4, #12]
 800cfa8:	9903      	ldr	r1, [sp, #12]
 800cfaa:	1a5b      	subs	r3, r3, r1
 800cfac:	42ab      	cmp	r3, r5
 800cfae:	dcf2      	bgt.n	800cf96 <_printf_i+0x21e>
 800cfb0:	e7eb      	b.n	800cf8a <_printf_i+0x212>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	f104 0619 	add.w	r6, r4, #25
 800cfb8:	e7f5      	b.n	800cfa6 <_printf_i+0x22e>
 800cfba:	bf00      	nop
 800cfbc:	0800f206 	.word	0x0800f206
 800cfc0:	0800f217 	.word	0x0800f217

0800cfc4 <quorem>:
 800cfc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	6903      	ldr	r3, [r0, #16]
 800cfca:	690c      	ldr	r4, [r1, #16]
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	4607      	mov	r7, r0
 800cfd0:	f2c0 8081 	blt.w	800d0d6 <quorem+0x112>
 800cfd4:	3c01      	subs	r4, #1
 800cfd6:	f101 0814 	add.w	r8, r1, #20
 800cfda:	f100 0514 	add.w	r5, r0, #20
 800cfde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfec:	3301      	adds	r3, #1
 800cfee:	429a      	cmp	r2, r3
 800cff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cff8:	fbb2 f6f3 	udiv	r6, r2, r3
 800cffc:	d331      	bcc.n	800d062 <quorem+0x9e>
 800cffe:	f04f 0e00 	mov.w	lr, #0
 800d002:	4640      	mov	r0, r8
 800d004:	46ac      	mov	ip, r5
 800d006:	46f2      	mov	sl, lr
 800d008:	f850 2b04 	ldr.w	r2, [r0], #4
 800d00c:	b293      	uxth	r3, r2
 800d00e:	fb06 e303 	mla	r3, r6, r3, lr
 800d012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d016:	b29b      	uxth	r3, r3
 800d018:	ebaa 0303 	sub.w	r3, sl, r3
 800d01c:	0c12      	lsrs	r2, r2, #16
 800d01e:	f8dc a000 	ldr.w	sl, [ip]
 800d022:	fb06 e202 	mla	r2, r6, r2, lr
 800d026:	fa13 f38a 	uxtah	r3, r3, sl
 800d02a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d02e:	fa1f fa82 	uxth.w	sl, r2
 800d032:	f8dc 2000 	ldr.w	r2, [ip]
 800d036:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d03a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d03e:	b29b      	uxth	r3, r3
 800d040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d044:	4581      	cmp	r9, r0
 800d046:	f84c 3b04 	str.w	r3, [ip], #4
 800d04a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d04e:	d2db      	bcs.n	800d008 <quorem+0x44>
 800d050:	f855 300b 	ldr.w	r3, [r5, fp]
 800d054:	b92b      	cbnz	r3, 800d062 <quorem+0x9e>
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	3b04      	subs	r3, #4
 800d05a:	429d      	cmp	r5, r3
 800d05c:	461a      	mov	r2, r3
 800d05e:	d32e      	bcc.n	800d0be <quorem+0xfa>
 800d060:	613c      	str	r4, [r7, #16]
 800d062:	4638      	mov	r0, r7
 800d064:	f001 f856 	bl	800e114 <__mcmp>
 800d068:	2800      	cmp	r0, #0
 800d06a:	db24      	blt.n	800d0b6 <quorem+0xf2>
 800d06c:	3601      	adds	r6, #1
 800d06e:	4628      	mov	r0, r5
 800d070:	f04f 0c00 	mov.w	ip, #0
 800d074:	f858 2b04 	ldr.w	r2, [r8], #4
 800d078:	f8d0 e000 	ldr.w	lr, [r0]
 800d07c:	b293      	uxth	r3, r2
 800d07e:	ebac 0303 	sub.w	r3, ip, r3
 800d082:	0c12      	lsrs	r2, r2, #16
 800d084:	fa13 f38e 	uxtah	r3, r3, lr
 800d088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d08c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d090:	b29b      	uxth	r3, r3
 800d092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d096:	45c1      	cmp	r9, r8
 800d098:	f840 3b04 	str.w	r3, [r0], #4
 800d09c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d0a0:	d2e8      	bcs.n	800d074 <quorem+0xb0>
 800d0a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0aa:	b922      	cbnz	r2, 800d0b6 <quorem+0xf2>
 800d0ac:	3b04      	subs	r3, #4
 800d0ae:	429d      	cmp	r5, r3
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	d30a      	bcc.n	800d0ca <quorem+0x106>
 800d0b4:	613c      	str	r4, [r7, #16]
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	b003      	add	sp, #12
 800d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0be:	6812      	ldr	r2, [r2, #0]
 800d0c0:	3b04      	subs	r3, #4
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	d1cc      	bne.n	800d060 <quorem+0x9c>
 800d0c6:	3c01      	subs	r4, #1
 800d0c8:	e7c7      	b.n	800d05a <quorem+0x96>
 800d0ca:	6812      	ldr	r2, [r2, #0]
 800d0cc:	3b04      	subs	r3, #4
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	d1f0      	bne.n	800d0b4 <quorem+0xf0>
 800d0d2:	3c01      	subs	r4, #1
 800d0d4:	e7eb      	b.n	800d0ae <quorem+0xea>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e7ee      	b.n	800d0b8 <quorem+0xf4>
 800d0da:	0000      	movs	r0, r0
 800d0dc:	0000      	movs	r0, r0
	...

0800d0e0 <_dtoa_r>:
 800d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e4:	ec59 8b10 	vmov	r8, r9, d0
 800d0e8:	b095      	sub	sp, #84	; 0x54
 800d0ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d0ec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d0ee:	9107      	str	r1, [sp, #28]
 800d0f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	9209      	str	r2, [sp, #36]	; 0x24
 800d0f8:	9310      	str	r3, [sp, #64]	; 0x40
 800d0fa:	b975      	cbnz	r5, 800d11a <_dtoa_r+0x3a>
 800d0fc:	2010      	movs	r0, #16
 800d0fe:	f000 fd75 	bl	800dbec <malloc>
 800d102:	4602      	mov	r2, r0
 800d104:	6270      	str	r0, [r6, #36]	; 0x24
 800d106:	b920      	cbnz	r0, 800d112 <_dtoa_r+0x32>
 800d108:	4bab      	ldr	r3, [pc, #684]	; (800d3b8 <_dtoa_r+0x2d8>)
 800d10a:	21ea      	movs	r1, #234	; 0xea
 800d10c:	48ab      	ldr	r0, [pc, #684]	; (800d3bc <_dtoa_r+0x2dc>)
 800d10e:	f001 f9cb 	bl	800e4a8 <__assert_func>
 800d112:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d116:	6005      	str	r5, [r0, #0]
 800d118:	60c5      	str	r5, [r0, #12]
 800d11a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d11c:	6819      	ldr	r1, [r3, #0]
 800d11e:	b151      	cbz	r1, 800d136 <_dtoa_r+0x56>
 800d120:	685a      	ldr	r2, [r3, #4]
 800d122:	604a      	str	r2, [r1, #4]
 800d124:	2301      	movs	r3, #1
 800d126:	4093      	lsls	r3, r2
 800d128:	608b      	str	r3, [r1, #8]
 800d12a:	4630      	mov	r0, r6
 800d12c:	f000 fdb4 	bl	800dc98 <_Bfree>
 800d130:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	f1b9 0300 	subs.w	r3, r9, #0
 800d13a:	bfbb      	ittet	lt
 800d13c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d140:	9303      	strlt	r3, [sp, #12]
 800d142:	2300      	movge	r3, #0
 800d144:	2201      	movlt	r2, #1
 800d146:	bfac      	ite	ge
 800d148:	6023      	strge	r3, [r4, #0]
 800d14a:	6022      	strlt	r2, [r4, #0]
 800d14c:	4b9c      	ldr	r3, [pc, #624]	; (800d3c0 <_dtoa_r+0x2e0>)
 800d14e:	9c03      	ldr	r4, [sp, #12]
 800d150:	43a3      	bics	r3, r4
 800d152:	d11a      	bne.n	800d18a <_dtoa_r+0xaa>
 800d154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d156:	f242 730f 	movw	r3, #9999	; 0x270f
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d160:	ea53 0308 	orrs.w	r3, r3, r8
 800d164:	f000 8512 	beq.w	800db8c <_dtoa_r+0xaac>
 800d168:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d16a:	b953      	cbnz	r3, 800d182 <_dtoa_r+0xa2>
 800d16c:	4b95      	ldr	r3, [pc, #596]	; (800d3c4 <_dtoa_r+0x2e4>)
 800d16e:	e01f      	b.n	800d1b0 <_dtoa_r+0xd0>
 800d170:	4b95      	ldr	r3, [pc, #596]	; (800d3c8 <_dtoa_r+0x2e8>)
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	3308      	adds	r3, #8
 800d176:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	9800      	ldr	r0, [sp, #0]
 800d17c:	b015      	add	sp, #84	; 0x54
 800d17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d182:	4b90      	ldr	r3, [pc, #576]	; (800d3c4 <_dtoa_r+0x2e4>)
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	3303      	adds	r3, #3
 800d188:	e7f5      	b.n	800d176 <_dtoa_r+0x96>
 800d18a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d18e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d196:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d19a:	d10b      	bne.n	800d1b4 <_dtoa_r+0xd4>
 800d19c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d19e:	2301      	movs	r3, #1
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 84ee 	beq.w	800db86 <_dtoa_r+0xaa6>
 800d1aa:	4888      	ldr	r0, [pc, #544]	; (800d3cc <_dtoa_r+0x2ec>)
 800d1ac:	6018      	str	r0, [r3, #0]
 800d1ae:	1e43      	subs	r3, r0, #1
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	e7e2      	b.n	800d17a <_dtoa_r+0x9a>
 800d1b4:	a913      	add	r1, sp, #76	; 0x4c
 800d1b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d1ba:	aa12      	add	r2, sp, #72	; 0x48
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f001 f84d 	bl	800e25c <__d2b>
 800d1c2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d1ca:	2900      	cmp	r1, #0
 800d1cc:	d047      	beq.n	800d25e <_dtoa_r+0x17e>
 800d1ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d1d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d1d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d1d8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d1dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d1e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d1e4:	2400      	movs	r4, #0
 800d1e6:	ec43 2b16 	vmov	d6, r2, r3
 800d1ea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d1ee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d3a0 <_dtoa_r+0x2c0>
 800d1f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d1f6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d3a8 <_dtoa_r+0x2c8>
 800d1fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d1fe:	eeb0 7b46 	vmov.f64	d7, d6
 800d202:	ee06 1a90 	vmov	s13, r1
 800d206:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d20a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d3b0 <_dtoa_r+0x2d0>
 800d20e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d212:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d216:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21e:	ee16 ba90 	vmov	fp, s13
 800d222:	9411      	str	r4, [sp, #68]	; 0x44
 800d224:	d508      	bpl.n	800d238 <_dtoa_r+0x158>
 800d226:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d22a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d232:	bf18      	it	ne
 800d234:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d238:	f1bb 0f16 	cmp.w	fp, #22
 800d23c:	d832      	bhi.n	800d2a4 <_dtoa_r+0x1c4>
 800d23e:	4b64      	ldr	r3, [pc, #400]	; (800d3d0 <_dtoa_r+0x2f0>)
 800d240:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d244:	ed93 7b00 	vldr	d7, [r3]
 800d248:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d24c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d254:	d501      	bpl.n	800d25a <_dtoa_r+0x17a>
 800d256:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d25a:	2300      	movs	r3, #0
 800d25c:	e023      	b.n	800d2a6 <_dtoa_r+0x1c6>
 800d25e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d260:	4401      	add	r1, r0
 800d262:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d266:	2b20      	cmp	r3, #32
 800d268:	bfc3      	ittte	gt
 800d26a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d26e:	fa04 f303 	lslgt.w	r3, r4, r3
 800d272:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d276:	f1c3 0320 	rsble	r3, r3, #32
 800d27a:	bfc6      	itte	gt
 800d27c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d280:	ea43 0308 	orrgt.w	r3, r3, r8
 800d284:	fa08 f303 	lslle.w	r3, r8, r3
 800d288:	ee07 3a90 	vmov	s15, r3
 800d28c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d290:	3901      	subs	r1, #1
 800d292:	ed8d 7b00 	vstr	d7, [sp]
 800d296:	9c01      	ldr	r4, [sp, #4]
 800d298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d29c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d2a0:	2401      	movs	r4, #1
 800d2a2:	e7a0      	b.n	800d1e6 <_dtoa_r+0x106>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2a8:	1a43      	subs	r3, r0, r1
 800d2aa:	1e5a      	subs	r2, r3, #1
 800d2ac:	bf45      	ittet	mi
 800d2ae:	f1c3 0301 	rsbmi	r3, r3, #1
 800d2b2:	9305      	strmi	r3, [sp, #20]
 800d2b4:	2300      	movpl	r3, #0
 800d2b6:	2300      	movmi	r3, #0
 800d2b8:	9206      	str	r2, [sp, #24]
 800d2ba:	bf54      	ite	pl
 800d2bc:	9305      	strpl	r3, [sp, #20]
 800d2be:	9306      	strmi	r3, [sp, #24]
 800d2c0:	f1bb 0f00 	cmp.w	fp, #0
 800d2c4:	db18      	blt.n	800d2f8 <_dtoa_r+0x218>
 800d2c6:	9b06      	ldr	r3, [sp, #24]
 800d2c8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d2cc:	445b      	add	r3, fp
 800d2ce:	9306      	str	r3, [sp, #24]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	9a07      	ldr	r2, [sp, #28]
 800d2d4:	2a09      	cmp	r2, #9
 800d2d6:	d849      	bhi.n	800d36c <_dtoa_r+0x28c>
 800d2d8:	2a05      	cmp	r2, #5
 800d2da:	bfc4      	itt	gt
 800d2dc:	3a04      	subgt	r2, #4
 800d2de:	9207      	strgt	r2, [sp, #28]
 800d2e0:	9a07      	ldr	r2, [sp, #28]
 800d2e2:	f1a2 0202 	sub.w	r2, r2, #2
 800d2e6:	bfcc      	ite	gt
 800d2e8:	2400      	movgt	r4, #0
 800d2ea:	2401      	movle	r4, #1
 800d2ec:	2a03      	cmp	r2, #3
 800d2ee:	d848      	bhi.n	800d382 <_dtoa_r+0x2a2>
 800d2f0:	e8df f002 	tbb	[pc, r2]
 800d2f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	eba3 030b 	sub.w	r3, r3, fp
 800d300:	9305      	str	r3, [sp, #20]
 800d302:	920e      	str	r2, [sp, #56]	; 0x38
 800d304:	f1cb 0300 	rsb	r3, fp, #0
 800d308:	e7e3      	b.n	800d2d2 <_dtoa_r+0x1f2>
 800d30a:	2200      	movs	r2, #0
 800d30c:	9208      	str	r2, [sp, #32]
 800d30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d310:	2a00      	cmp	r2, #0
 800d312:	dc39      	bgt.n	800d388 <_dtoa_r+0x2a8>
 800d314:	f04f 0a01 	mov.w	sl, #1
 800d318:	46d1      	mov	r9, sl
 800d31a:	4652      	mov	r2, sl
 800d31c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d320:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d322:	2100      	movs	r1, #0
 800d324:	6079      	str	r1, [r7, #4]
 800d326:	2004      	movs	r0, #4
 800d328:	f100 0c14 	add.w	ip, r0, #20
 800d32c:	4594      	cmp	ip, r2
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	d92f      	bls.n	800d392 <_dtoa_r+0x2b2>
 800d332:	4630      	mov	r0, r6
 800d334:	930c      	str	r3, [sp, #48]	; 0x30
 800d336:	f000 fc6f 	bl	800dc18 <_Balloc>
 800d33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d33c:	9000      	str	r0, [sp, #0]
 800d33e:	4602      	mov	r2, r0
 800d340:	2800      	cmp	r0, #0
 800d342:	d149      	bne.n	800d3d8 <_dtoa_r+0x2f8>
 800d344:	4b23      	ldr	r3, [pc, #140]	; (800d3d4 <_dtoa_r+0x2f4>)
 800d346:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d34a:	e6df      	b.n	800d10c <_dtoa_r+0x2c>
 800d34c:	2201      	movs	r2, #1
 800d34e:	e7dd      	b.n	800d30c <_dtoa_r+0x22c>
 800d350:	2200      	movs	r2, #0
 800d352:	9208      	str	r2, [sp, #32]
 800d354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d356:	eb0b 0a02 	add.w	sl, fp, r2
 800d35a:	f10a 0901 	add.w	r9, sl, #1
 800d35e:	464a      	mov	r2, r9
 800d360:	2a01      	cmp	r2, #1
 800d362:	bfb8      	it	lt
 800d364:	2201      	movlt	r2, #1
 800d366:	e7db      	b.n	800d320 <_dtoa_r+0x240>
 800d368:	2201      	movs	r2, #1
 800d36a:	e7f2      	b.n	800d352 <_dtoa_r+0x272>
 800d36c:	2401      	movs	r4, #1
 800d36e:	2200      	movs	r2, #0
 800d370:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d374:	f04f 3aff 	mov.w	sl, #4294967295
 800d378:	2100      	movs	r1, #0
 800d37a:	46d1      	mov	r9, sl
 800d37c:	2212      	movs	r2, #18
 800d37e:	9109      	str	r1, [sp, #36]	; 0x24
 800d380:	e7ce      	b.n	800d320 <_dtoa_r+0x240>
 800d382:	2201      	movs	r2, #1
 800d384:	9208      	str	r2, [sp, #32]
 800d386:	e7f5      	b.n	800d374 <_dtoa_r+0x294>
 800d388:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d38c:	46d1      	mov	r9, sl
 800d38e:	4652      	mov	r2, sl
 800d390:	e7c6      	b.n	800d320 <_dtoa_r+0x240>
 800d392:	3101      	adds	r1, #1
 800d394:	6079      	str	r1, [r7, #4]
 800d396:	0040      	lsls	r0, r0, #1
 800d398:	e7c6      	b.n	800d328 <_dtoa_r+0x248>
 800d39a:	bf00      	nop
 800d39c:	f3af 8000 	nop.w
 800d3a0:	636f4361 	.word	0x636f4361
 800d3a4:	3fd287a7 	.word	0x3fd287a7
 800d3a8:	8b60c8b3 	.word	0x8b60c8b3
 800d3ac:	3fc68a28 	.word	0x3fc68a28
 800d3b0:	509f79fb 	.word	0x509f79fb
 800d3b4:	3fd34413 	.word	0x3fd34413
 800d3b8:	0800f235 	.word	0x0800f235
 800d3bc:	0800f24c 	.word	0x0800f24c
 800d3c0:	7ff00000 	.word	0x7ff00000
 800d3c4:	0800f231 	.word	0x0800f231
 800d3c8:	0800f228 	.word	0x0800f228
 800d3cc:	0800f205 	.word	0x0800f205
 800d3d0:	0800f348 	.word	0x0800f348
 800d3d4:	0800f2ab 	.word	0x0800f2ab
 800d3d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d3da:	9900      	ldr	r1, [sp, #0]
 800d3dc:	6011      	str	r1, [r2, #0]
 800d3de:	f1b9 0f0e 	cmp.w	r9, #14
 800d3e2:	d872      	bhi.n	800d4ca <_dtoa_r+0x3ea>
 800d3e4:	2c00      	cmp	r4, #0
 800d3e6:	d070      	beq.n	800d4ca <_dtoa_r+0x3ea>
 800d3e8:	f1bb 0f00 	cmp.w	fp, #0
 800d3ec:	f340 80a6 	ble.w	800d53c <_dtoa_r+0x45c>
 800d3f0:	49ca      	ldr	r1, [pc, #808]	; (800d71c <_dtoa_r+0x63c>)
 800d3f2:	f00b 020f 	and.w	r2, fp, #15
 800d3f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d3fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d3fe:	ed92 7b00 	vldr	d7, [r2]
 800d402:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d406:	f000 808d 	beq.w	800d524 <_dtoa_r+0x444>
 800d40a:	4ac5      	ldr	r2, [pc, #788]	; (800d720 <_dtoa_r+0x640>)
 800d40c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d410:	ed92 6b08 	vldr	d6, [r2, #32]
 800d414:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d418:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d41c:	f001 010f 	and.w	r1, r1, #15
 800d420:	2203      	movs	r2, #3
 800d422:	48bf      	ldr	r0, [pc, #764]	; (800d720 <_dtoa_r+0x640>)
 800d424:	2900      	cmp	r1, #0
 800d426:	d17f      	bne.n	800d528 <_dtoa_r+0x448>
 800d428:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d42c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d430:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d434:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d436:	2900      	cmp	r1, #0
 800d438:	f000 80b2 	beq.w	800d5a0 <_dtoa_r+0x4c0>
 800d43c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d440:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d444:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44c:	f140 80a8 	bpl.w	800d5a0 <_dtoa_r+0x4c0>
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	f000 80a4 	beq.w	800d5a0 <_dtoa_r+0x4c0>
 800d458:	f1ba 0f00 	cmp.w	sl, #0
 800d45c:	dd31      	ble.n	800d4c2 <_dtoa_r+0x3e2>
 800d45e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d462:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d466:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d46a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d46e:	3201      	adds	r2, #1
 800d470:	4650      	mov	r0, sl
 800d472:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d476:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d47a:	ee07 2a90 	vmov	s15, r2
 800d47e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d482:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d486:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d48a:	9c03      	ldr	r4, [sp, #12]
 800d48c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d490:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d494:	2800      	cmp	r0, #0
 800d496:	f040 8086 	bne.w	800d5a6 <_dtoa_r+0x4c6>
 800d49a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d49e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d4a2:	ec42 1b17 	vmov	d7, r1, r2
 800d4a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ae:	f300 8272 	bgt.w	800d996 <_dtoa_r+0x8b6>
 800d4b2:	eeb1 7b47 	vneg.f64	d7, d7
 800d4b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4be:	f100 8267 	bmi.w	800d990 <_dtoa_r+0x8b0>
 800d4c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d4c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d4ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d4cc:	2a00      	cmp	r2, #0
 800d4ce:	f2c0 8129 	blt.w	800d724 <_dtoa_r+0x644>
 800d4d2:	f1bb 0f0e 	cmp.w	fp, #14
 800d4d6:	f300 8125 	bgt.w	800d724 <_dtoa_r+0x644>
 800d4da:	4b90      	ldr	r3, [pc, #576]	; (800d71c <_dtoa_r+0x63c>)
 800d4dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d4e0:	ed93 6b00 	vldr	d6, [r3]
 800d4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f280 80c3 	bge.w	800d672 <_dtoa_r+0x592>
 800d4ec:	f1b9 0f00 	cmp.w	r9, #0
 800d4f0:	f300 80bf 	bgt.w	800d672 <_dtoa_r+0x592>
 800d4f4:	f040 824c 	bne.w	800d990 <_dtoa_r+0x8b0>
 800d4f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d4fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d500:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d504:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50c:	464c      	mov	r4, r9
 800d50e:	464f      	mov	r7, r9
 800d510:	f280 8222 	bge.w	800d958 <_dtoa_r+0x878>
 800d514:	f8dd 8000 	ldr.w	r8, [sp]
 800d518:	2331      	movs	r3, #49	; 0x31
 800d51a:	f808 3b01 	strb.w	r3, [r8], #1
 800d51e:	f10b 0b01 	add.w	fp, fp, #1
 800d522:	e21e      	b.n	800d962 <_dtoa_r+0x882>
 800d524:	2202      	movs	r2, #2
 800d526:	e77c      	b.n	800d422 <_dtoa_r+0x342>
 800d528:	07cc      	lsls	r4, r1, #31
 800d52a:	d504      	bpl.n	800d536 <_dtoa_r+0x456>
 800d52c:	ed90 6b00 	vldr	d6, [r0]
 800d530:	3201      	adds	r2, #1
 800d532:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d536:	1049      	asrs	r1, r1, #1
 800d538:	3008      	adds	r0, #8
 800d53a:	e773      	b.n	800d424 <_dtoa_r+0x344>
 800d53c:	d02e      	beq.n	800d59c <_dtoa_r+0x4bc>
 800d53e:	f1cb 0100 	rsb	r1, fp, #0
 800d542:	4a76      	ldr	r2, [pc, #472]	; (800d71c <_dtoa_r+0x63c>)
 800d544:	f001 000f 	and.w	r0, r1, #15
 800d548:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d54c:	ed92 7b00 	vldr	d7, [r2]
 800d550:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d554:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d558:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d55c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d560:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d564:	486e      	ldr	r0, [pc, #440]	; (800d720 <_dtoa_r+0x640>)
 800d566:	1109      	asrs	r1, r1, #4
 800d568:	2400      	movs	r4, #0
 800d56a:	2202      	movs	r2, #2
 800d56c:	b939      	cbnz	r1, 800d57e <_dtoa_r+0x49e>
 800d56e:	2c00      	cmp	r4, #0
 800d570:	f43f af60 	beq.w	800d434 <_dtoa_r+0x354>
 800d574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d57c:	e75a      	b.n	800d434 <_dtoa_r+0x354>
 800d57e:	07cf      	lsls	r7, r1, #31
 800d580:	d509      	bpl.n	800d596 <_dtoa_r+0x4b6>
 800d582:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d586:	ed90 7b00 	vldr	d7, [r0]
 800d58a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d58e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d592:	3201      	adds	r2, #1
 800d594:	2401      	movs	r4, #1
 800d596:	1049      	asrs	r1, r1, #1
 800d598:	3008      	adds	r0, #8
 800d59a:	e7e7      	b.n	800d56c <_dtoa_r+0x48c>
 800d59c:	2202      	movs	r2, #2
 800d59e:	e749      	b.n	800d434 <_dtoa_r+0x354>
 800d5a0:	465f      	mov	r7, fp
 800d5a2:	4648      	mov	r0, r9
 800d5a4:	e765      	b.n	800d472 <_dtoa_r+0x392>
 800d5a6:	ec42 1b17 	vmov	d7, r1, r2
 800d5aa:	4a5c      	ldr	r2, [pc, #368]	; (800d71c <_dtoa_r+0x63c>)
 800d5ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d5b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d5b4:	9a00      	ldr	r2, [sp, #0]
 800d5b6:	1814      	adds	r4, r2, r0
 800d5b8:	9a08      	ldr	r2, [sp, #32]
 800d5ba:	b352      	cbz	r2, 800d612 <_dtoa_r+0x532>
 800d5bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d5c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d5c4:	f8dd 8000 	ldr.w	r8, [sp]
 800d5c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d5cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d5d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d5d8:	ee14 2a90 	vmov	r2, s9
 800d5dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d5e0:	3230      	adds	r2, #48	; 0x30
 800d5e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d5e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ee:	f808 2b01 	strb.w	r2, [r8], #1
 800d5f2:	d439      	bmi.n	800d668 <_dtoa_r+0x588>
 800d5f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d5f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d600:	d472      	bmi.n	800d6e8 <_dtoa_r+0x608>
 800d602:	45a0      	cmp	r8, r4
 800d604:	f43f af5d 	beq.w	800d4c2 <_dtoa_r+0x3e2>
 800d608:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d60c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d610:	e7e0      	b.n	800d5d4 <_dtoa_r+0x4f4>
 800d612:	f8dd 8000 	ldr.w	r8, [sp]
 800d616:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d61a:	4621      	mov	r1, r4
 800d61c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d620:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d624:	ee14 2a90 	vmov	r2, s9
 800d628:	3230      	adds	r2, #48	; 0x30
 800d62a:	f808 2b01 	strb.w	r2, [r8], #1
 800d62e:	45a0      	cmp	r8, r4
 800d630:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d634:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d638:	d118      	bne.n	800d66c <_dtoa_r+0x58c>
 800d63a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d63e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d642:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64a:	dc4d      	bgt.n	800d6e8 <_dtoa_r+0x608>
 800d64c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d650:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d658:	f57f af33 	bpl.w	800d4c2 <_dtoa_r+0x3e2>
 800d65c:	4688      	mov	r8, r1
 800d65e:	3901      	subs	r1, #1
 800d660:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d664:	2b30      	cmp	r3, #48	; 0x30
 800d666:	d0f9      	beq.n	800d65c <_dtoa_r+0x57c>
 800d668:	46bb      	mov	fp, r7
 800d66a:	e02a      	b.n	800d6c2 <_dtoa_r+0x5e2>
 800d66c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d670:	e7d6      	b.n	800d620 <_dtoa_r+0x540>
 800d672:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d676:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d67a:	f8dd 8000 	ldr.w	r8, [sp]
 800d67e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d682:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d686:	ee15 3a10 	vmov	r3, s10
 800d68a:	3330      	adds	r3, #48	; 0x30
 800d68c:	f808 3b01 	strb.w	r3, [r8], #1
 800d690:	9b00      	ldr	r3, [sp, #0]
 800d692:	eba8 0303 	sub.w	r3, r8, r3
 800d696:	4599      	cmp	r9, r3
 800d698:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d69c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d6a0:	d133      	bne.n	800d70a <_dtoa_r+0x62a>
 800d6a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d6a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ae:	dc1a      	bgt.n	800d6e6 <_dtoa_r+0x606>
 800d6b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b8:	d103      	bne.n	800d6c2 <_dtoa_r+0x5e2>
 800d6ba:	ee15 3a10 	vmov	r3, s10
 800d6be:	07d9      	lsls	r1, r3, #31
 800d6c0:	d411      	bmi.n	800d6e6 <_dtoa_r+0x606>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 fae7 	bl	800dc98 <_Bfree>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6ce:	f888 3000 	strb.w	r3, [r8]
 800d6d2:	f10b 0301 	add.w	r3, fp, #1
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f43f ad4d 	beq.w	800d17a <_dtoa_r+0x9a>
 800d6e0:	f8c3 8000 	str.w	r8, [r3]
 800d6e4:	e549      	b.n	800d17a <_dtoa_r+0x9a>
 800d6e6:	465f      	mov	r7, fp
 800d6e8:	4643      	mov	r3, r8
 800d6ea:	4698      	mov	r8, r3
 800d6ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6f0:	2a39      	cmp	r2, #57	; 0x39
 800d6f2:	d106      	bne.n	800d702 <_dtoa_r+0x622>
 800d6f4:	9a00      	ldr	r2, [sp, #0]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d1f7      	bne.n	800d6ea <_dtoa_r+0x60a>
 800d6fa:	9900      	ldr	r1, [sp, #0]
 800d6fc:	2230      	movs	r2, #48	; 0x30
 800d6fe:	3701      	adds	r7, #1
 800d700:	700a      	strb	r2, [r1, #0]
 800d702:	781a      	ldrb	r2, [r3, #0]
 800d704:	3201      	adds	r2, #1
 800d706:	701a      	strb	r2, [r3, #0]
 800d708:	e7ae      	b.n	800d668 <_dtoa_r+0x588>
 800d70a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d70e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d716:	d1b2      	bne.n	800d67e <_dtoa_r+0x59e>
 800d718:	e7d3      	b.n	800d6c2 <_dtoa_r+0x5e2>
 800d71a:	bf00      	nop
 800d71c:	0800f348 	.word	0x0800f348
 800d720:	0800f320 	.word	0x0800f320
 800d724:	9908      	ldr	r1, [sp, #32]
 800d726:	2900      	cmp	r1, #0
 800d728:	f000 80d1 	beq.w	800d8ce <_dtoa_r+0x7ee>
 800d72c:	9907      	ldr	r1, [sp, #28]
 800d72e:	2901      	cmp	r1, #1
 800d730:	f300 80b4 	bgt.w	800d89c <_dtoa_r+0x7bc>
 800d734:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d736:	2900      	cmp	r1, #0
 800d738:	f000 80ac 	beq.w	800d894 <_dtoa_r+0x7b4>
 800d73c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d740:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d744:	461c      	mov	r4, r3
 800d746:	930a      	str	r3, [sp, #40]	; 0x28
 800d748:	9b05      	ldr	r3, [sp, #20]
 800d74a:	4413      	add	r3, r2
 800d74c:	9305      	str	r3, [sp, #20]
 800d74e:	9b06      	ldr	r3, [sp, #24]
 800d750:	2101      	movs	r1, #1
 800d752:	4413      	add	r3, r2
 800d754:	4630      	mov	r0, r6
 800d756:	9306      	str	r3, [sp, #24]
 800d758:	f000 fb5a 	bl	800de10 <__i2b>
 800d75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75e:	4607      	mov	r7, r0
 800d760:	f1b8 0f00 	cmp.w	r8, #0
 800d764:	dd0d      	ble.n	800d782 <_dtoa_r+0x6a2>
 800d766:	9a06      	ldr	r2, [sp, #24]
 800d768:	2a00      	cmp	r2, #0
 800d76a:	dd0a      	ble.n	800d782 <_dtoa_r+0x6a2>
 800d76c:	4542      	cmp	r2, r8
 800d76e:	9905      	ldr	r1, [sp, #20]
 800d770:	bfa8      	it	ge
 800d772:	4642      	movge	r2, r8
 800d774:	1a89      	subs	r1, r1, r2
 800d776:	9105      	str	r1, [sp, #20]
 800d778:	9906      	ldr	r1, [sp, #24]
 800d77a:	eba8 0802 	sub.w	r8, r8, r2
 800d77e:	1a8a      	subs	r2, r1, r2
 800d780:	9206      	str	r2, [sp, #24]
 800d782:	b303      	cbz	r3, 800d7c6 <_dtoa_r+0x6e6>
 800d784:	9a08      	ldr	r2, [sp, #32]
 800d786:	2a00      	cmp	r2, #0
 800d788:	f000 80a6 	beq.w	800d8d8 <_dtoa_r+0x7f8>
 800d78c:	2c00      	cmp	r4, #0
 800d78e:	dd13      	ble.n	800d7b8 <_dtoa_r+0x6d8>
 800d790:	4639      	mov	r1, r7
 800d792:	4622      	mov	r2, r4
 800d794:	4630      	mov	r0, r6
 800d796:	930c      	str	r3, [sp, #48]	; 0x30
 800d798:	f000 fbf6 	bl	800df88 <__pow5mult>
 800d79c:	462a      	mov	r2, r5
 800d79e:	4601      	mov	r1, r0
 800d7a0:	4607      	mov	r7, r0
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f000 fb4a 	bl	800de3c <__multiply>
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	900a      	str	r0, [sp, #40]	; 0x28
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	f000 fa73 	bl	800dc98 <_Bfree>
 800d7b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7b6:	4615      	mov	r5, r2
 800d7b8:	1b1a      	subs	r2, r3, r4
 800d7ba:	d004      	beq.n	800d7c6 <_dtoa_r+0x6e6>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f000 fbe2 	bl	800df88 <__pow5mult>
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	2101      	movs	r1, #1
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f000 fb21 	bl	800de10 <__i2b>
 800d7ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	f340 8082 	ble.w	800d8dc <_dtoa_r+0x7fc>
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4601      	mov	r1, r0
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f000 fbd3 	bl	800df88 <__pow5mult>
 800d7e2:	9b07      	ldr	r3, [sp, #28]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	dd7b      	ble.n	800d8e2 <_dtoa_r+0x802>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	930a      	str	r3, [sp, #40]	; 0x28
 800d7ee:	6922      	ldr	r2, [r4, #16]
 800d7f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d7f4:	6910      	ldr	r0, [r2, #16]
 800d7f6:	f000 fabb 	bl	800dd70 <__hi0bits>
 800d7fa:	f1c0 0020 	rsb	r0, r0, #32
 800d7fe:	9b06      	ldr	r3, [sp, #24]
 800d800:	4418      	add	r0, r3
 800d802:	f010 001f 	ands.w	r0, r0, #31
 800d806:	f000 808d 	beq.w	800d924 <_dtoa_r+0x844>
 800d80a:	f1c0 0220 	rsb	r2, r0, #32
 800d80e:	2a04      	cmp	r2, #4
 800d810:	f340 8086 	ble.w	800d920 <_dtoa_r+0x840>
 800d814:	f1c0 001c 	rsb	r0, r0, #28
 800d818:	9b05      	ldr	r3, [sp, #20]
 800d81a:	4403      	add	r3, r0
 800d81c:	9305      	str	r3, [sp, #20]
 800d81e:	9b06      	ldr	r3, [sp, #24]
 800d820:	4403      	add	r3, r0
 800d822:	4480      	add	r8, r0
 800d824:	9306      	str	r3, [sp, #24]
 800d826:	9b05      	ldr	r3, [sp, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dd05      	ble.n	800d838 <_dtoa_r+0x758>
 800d82c:	4629      	mov	r1, r5
 800d82e:	461a      	mov	r2, r3
 800d830:	4630      	mov	r0, r6
 800d832:	f000 fc03 	bl	800e03c <__lshift>
 800d836:	4605      	mov	r5, r0
 800d838:	9b06      	ldr	r3, [sp, #24]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	dd05      	ble.n	800d84a <_dtoa_r+0x76a>
 800d83e:	4621      	mov	r1, r4
 800d840:	461a      	mov	r2, r3
 800d842:	4630      	mov	r0, r6
 800d844:	f000 fbfa 	bl	800e03c <__lshift>
 800d848:	4604      	mov	r4, r0
 800d84a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d06b      	beq.n	800d928 <_dtoa_r+0x848>
 800d850:	4621      	mov	r1, r4
 800d852:	4628      	mov	r0, r5
 800d854:	f000 fc5e 	bl	800e114 <__mcmp>
 800d858:	2800      	cmp	r0, #0
 800d85a:	da65      	bge.n	800d928 <_dtoa_r+0x848>
 800d85c:	2300      	movs	r3, #0
 800d85e:	4629      	mov	r1, r5
 800d860:	220a      	movs	r2, #10
 800d862:	4630      	mov	r0, r6
 800d864:	f000 fa3a 	bl	800dcdc <__multadd>
 800d868:	9b08      	ldr	r3, [sp, #32]
 800d86a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d86e:	4605      	mov	r5, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	f000 8192 	beq.w	800db9a <_dtoa_r+0xaba>
 800d876:	4639      	mov	r1, r7
 800d878:	2300      	movs	r3, #0
 800d87a:	220a      	movs	r2, #10
 800d87c:	4630      	mov	r0, r6
 800d87e:	f000 fa2d 	bl	800dcdc <__multadd>
 800d882:	f1ba 0f00 	cmp.w	sl, #0
 800d886:	4607      	mov	r7, r0
 800d888:	f300 808e 	bgt.w	800d9a8 <_dtoa_r+0x8c8>
 800d88c:	9b07      	ldr	r3, [sp, #28]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	dc51      	bgt.n	800d936 <_dtoa_r+0x856>
 800d892:	e089      	b.n	800d9a8 <_dtoa_r+0x8c8>
 800d894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d896:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d89a:	e751      	b.n	800d740 <_dtoa_r+0x660>
 800d89c:	f109 34ff 	add.w	r4, r9, #4294967295
 800d8a0:	42a3      	cmp	r3, r4
 800d8a2:	bfbf      	itttt	lt
 800d8a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d8a6:	1ae3      	sublt	r3, r4, r3
 800d8a8:	18d2      	addlt	r2, r2, r3
 800d8aa:	4613      	movlt	r3, r2
 800d8ac:	bfb7      	itett	lt
 800d8ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d8b0:	1b1c      	subge	r4, r3, r4
 800d8b2:	4623      	movlt	r3, r4
 800d8b4:	2400      	movlt	r4, #0
 800d8b6:	f1b9 0f00 	cmp.w	r9, #0
 800d8ba:	bfb5      	itete	lt
 800d8bc:	9a05      	ldrlt	r2, [sp, #20]
 800d8be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d8c2:	eba2 0809 	sublt.w	r8, r2, r9
 800d8c6:	464a      	movge	r2, r9
 800d8c8:	bfb8      	it	lt
 800d8ca:	2200      	movlt	r2, #0
 800d8cc:	e73b      	b.n	800d746 <_dtoa_r+0x666>
 800d8ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d8d2:	9f08      	ldr	r7, [sp, #32]
 800d8d4:	461c      	mov	r4, r3
 800d8d6:	e743      	b.n	800d760 <_dtoa_r+0x680>
 800d8d8:	461a      	mov	r2, r3
 800d8da:	e76f      	b.n	800d7bc <_dtoa_r+0x6dc>
 800d8dc:	9b07      	ldr	r3, [sp, #28]
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	dc18      	bgt.n	800d914 <_dtoa_r+0x834>
 800d8e2:	9b02      	ldr	r3, [sp, #8]
 800d8e4:	b9b3      	cbnz	r3, 800d914 <_dtoa_r+0x834>
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d8ec:	b9a2      	cbnz	r2, 800d918 <_dtoa_r+0x838>
 800d8ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d8f2:	0d12      	lsrs	r2, r2, #20
 800d8f4:	0512      	lsls	r2, r2, #20
 800d8f6:	b18a      	cbz	r2, 800d91c <_dtoa_r+0x83c>
 800d8f8:	9b05      	ldr	r3, [sp, #20]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	9305      	str	r3, [sp, #20]
 800d8fe:	9b06      	ldr	r3, [sp, #24]
 800d900:	3301      	adds	r3, #1
 800d902:	9306      	str	r3, [sp, #24]
 800d904:	2301      	movs	r3, #1
 800d906:	930a      	str	r3, [sp, #40]	; 0x28
 800d908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f47f af6f 	bne.w	800d7ee <_dtoa_r+0x70e>
 800d910:	2001      	movs	r0, #1
 800d912:	e774      	b.n	800d7fe <_dtoa_r+0x71e>
 800d914:	2300      	movs	r3, #0
 800d916:	e7f6      	b.n	800d906 <_dtoa_r+0x826>
 800d918:	9b02      	ldr	r3, [sp, #8]
 800d91a:	e7f4      	b.n	800d906 <_dtoa_r+0x826>
 800d91c:	920a      	str	r2, [sp, #40]	; 0x28
 800d91e:	e7f3      	b.n	800d908 <_dtoa_r+0x828>
 800d920:	d081      	beq.n	800d826 <_dtoa_r+0x746>
 800d922:	4610      	mov	r0, r2
 800d924:	301c      	adds	r0, #28
 800d926:	e777      	b.n	800d818 <_dtoa_r+0x738>
 800d928:	f1b9 0f00 	cmp.w	r9, #0
 800d92c:	dc37      	bgt.n	800d99e <_dtoa_r+0x8be>
 800d92e:	9b07      	ldr	r3, [sp, #28]
 800d930:	2b02      	cmp	r3, #2
 800d932:	dd34      	ble.n	800d99e <_dtoa_r+0x8be>
 800d934:	46ca      	mov	sl, r9
 800d936:	f1ba 0f00 	cmp.w	sl, #0
 800d93a:	d10d      	bne.n	800d958 <_dtoa_r+0x878>
 800d93c:	4621      	mov	r1, r4
 800d93e:	4653      	mov	r3, sl
 800d940:	2205      	movs	r2, #5
 800d942:	4630      	mov	r0, r6
 800d944:	f000 f9ca 	bl	800dcdc <__multadd>
 800d948:	4601      	mov	r1, r0
 800d94a:	4604      	mov	r4, r0
 800d94c:	4628      	mov	r0, r5
 800d94e:	f000 fbe1 	bl	800e114 <__mcmp>
 800d952:	2800      	cmp	r0, #0
 800d954:	f73f adde 	bgt.w	800d514 <_dtoa_r+0x434>
 800d958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95a:	f8dd 8000 	ldr.w	r8, [sp]
 800d95e:	ea6f 0b03 	mvn.w	fp, r3
 800d962:	f04f 0900 	mov.w	r9, #0
 800d966:	4621      	mov	r1, r4
 800d968:	4630      	mov	r0, r6
 800d96a:	f000 f995 	bl	800dc98 <_Bfree>
 800d96e:	2f00      	cmp	r7, #0
 800d970:	f43f aea7 	beq.w	800d6c2 <_dtoa_r+0x5e2>
 800d974:	f1b9 0f00 	cmp.w	r9, #0
 800d978:	d005      	beq.n	800d986 <_dtoa_r+0x8a6>
 800d97a:	45b9      	cmp	r9, r7
 800d97c:	d003      	beq.n	800d986 <_dtoa_r+0x8a6>
 800d97e:	4649      	mov	r1, r9
 800d980:	4630      	mov	r0, r6
 800d982:	f000 f989 	bl	800dc98 <_Bfree>
 800d986:	4639      	mov	r1, r7
 800d988:	4630      	mov	r0, r6
 800d98a:	f000 f985 	bl	800dc98 <_Bfree>
 800d98e:	e698      	b.n	800d6c2 <_dtoa_r+0x5e2>
 800d990:	2400      	movs	r4, #0
 800d992:	4627      	mov	r7, r4
 800d994:	e7e0      	b.n	800d958 <_dtoa_r+0x878>
 800d996:	46bb      	mov	fp, r7
 800d998:	4604      	mov	r4, r0
 800d99a:	4607      	mov	r7, r0
 800d99c:	e5ba      	b.n	800d514 <_dtoa_r+0x434>
 800d99e:	9b08      	ldr	r3, [sp, #32]
 800d9a0:	46ca      	mov	sl, r9
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 8100 	beq.w	800dba8 <_dtoa_r+0xac8>
 800d9a8:	f1b8 0f00 	cmp.w	r8, #0
 800d9ac:	dd05      	ble.n	800d9ba <_dtoa_r+0x8da>
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	4642      	mov	r2, r8
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f000 fb42 	bl	800e03c <__lshift>
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d05d      	beq.n	800da7c <_dtoa_r+0x99c>
 800d9c0:	6879      	ldr	r1, [r7, #4]
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	f000 f928 	bl	800dc18 <_Balloc>
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	b928      	cbnz	r0, 800d9d8 <_dtoa_r+0x8f8>
 800d9cc:	4b82      	ldr	r3, [pc, #520]	; (800dbd8 <_dtoa_r+0xaf8>)
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d9d4:	f7ff bb9a 	b.w	800d10c <_dtoa_r+0x2c>
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	3202      	adds	r2, #2
 800d9dc:	0092      	lsls	r2, r2, #2
 800d9de:	f107 010c 	add.w	r1, r7, #12
 800d9e2:	300c      	adds	r0, #12
 800d9e4:	f000 f90a 	bl	800dbfc <memcpy>
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	f000 fb25 	bl	800e03c <__lshift>
 800d9f2:	9b00      	ldr	r3, [sp, #0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	9b00      	ldr	r3, [sp, #0]
 800d9fa:	4453      	add	r3, sl
 800d9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9fe:	9b02      	ldr	r3, [sp, #8]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	46b9      	mov	r9, r7
 800da06:	9308      	str	r3, [sp, #32]
 800da08:	4607      	mov	r7, r0
 800da0a:	9b05      	ldr	r3, [sp, #20]
 800da0c:	4621      	mov	r1, r4
 800da0e:	3b01      	subs	r3, #1
 800da10:	4628      	mov	r0, r5
 800da12:	9302      	str	r3, [sp, #8]
 800da14:	f7ff fad6 	bl	800cfc4 <quorem>
 800da18:	4603      	mov	r3, r0
 800da1a:	3330      	adds	r3, #48	; 0x30
 800da1c:	9006      	str	r0, [sp, #24]
 800da1e:	4649      	mov	r1, r9
 800da20:	4628      	mov	r0, r5
 800da22:	930a      	str	r3, [sp, #40]	; 0x28
 800da24:	f000 fb76 	bl	800e114 <__mcmp>
 800da28:	463a      	mov	r2, r7
 800da2a:	4682      	mov	sl, r0
 800da2c:	4621      	mov	r1, r4
 800da2e:	4630      	mov	r0, r6
 800da30:	f000 fb8c 	bl	800e14c <__mdiff>
 800da34:	68c2      	ldr	r2, [r0, #12]
 800da36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da38:	4680      	mov	r8, r0
 800da3a:	bb0a      	cbnz	r2, 800da80 <_dtoa_r+0x9a0>
 800da3c:	4601      	mov	r1, r0
 800da3e:	4628      	mov	r0, r5
 800da40:	f000 fb68 	bl	800e114 <__mcmp>
 800da44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da46:	4602      	mov	r2, r0
 800da48:	4641      	mov	r1, r8
 800da4a:	4630      	mov	r0, r6
 800da4c:	920e      	str	r2, [sp, #56]	; 0x38
 800da4e:	930a      	str	r3, [sp, #40]	; 0x28
 800da50:	f000 f922 	bl	800dc98 <_Bfree>
 800da54:	9b07      	ldr	r3, [sp, #28]
 800da56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800da5c:	ea43 0102 	orr.w	r1, r3, r2
 800da60:	9b08      	ldr	r3, [sp, #32]
 800da62:	430b      	orrs	r3, r1
 800da64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da66:	d10d      	bne.n	800da84 <_dtoa_r+0x9a4>
 800da68:	2b39      	cmp	r3, #57	; 0x39
 800da6a:	d029      	beq.n	800dac0 <_dtoa_r+0x9e0>
 800da6c:	f1ba 0f00 	cmp.w	sl, #0
 800da70:	dd01      	ble.n	800da76 <_dtoa_r+0x996>
 800da72:	9b06      	ldr	r3, [sp, #24]
 800da74:	3331      	adds	r3, #49	; 0x31
 800da76:	9a02      	ldr	r2, [sp, #8]
 800da78:	7013      	strb	r3, [r2, #0]
 800da7a:	e774      	b.n	800d966 <_dtoa_r+0x886>
 800da7c:	4638      	mov	r0, r7
 800da7e:	e7b8      	b.n	800d9f2 <_dtoa_r+0x912>
 800da80:	2201      	movs	r2, #1
 800da82:	e7e1      	b.n	800da48 <_dtoa_r+0x968>
 800da84:	f1ba 0f00 	cmp.w	sl, #0
 800da88:	db06      	blt.n	800da98 <_dtoa_r+0x9b8>
 800da8a:	9907      	ldr	r1, [sp, #28]
 800da8c:	ea41 0a0a 	orr.w	sl, r1, sl
 800da90:	9908      	ldr	r1, [sp, #32]
 800da92:	ea5a 0101 	orrs.w	r1, sl, r1
 800da96:	d120      	bne.n	800dada <_dtoa_r+0x9fa>
 800da98:	2a00      	cmp	r2, #0
 800da9a:	ddec      	ble.n	800da76 <_dtoa_r+0x996>
 800da9c:	4629      	mov	r1, r5
 800da9e:	2201      	movs	r2, #1
 800daa0:	4630      	mov	r0, r6
 800daa2:	9305      	str	r3, [sp, #20]
 800daa4:	f000 faca 	bl	800e03c <__lshift>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4605      	mov	r5, r0
 800daac:	f000 fb32 	bl	800e114 <__mcmp>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	9b05      	ldr	r3, [sp, #20]
 800dab4:	dc02      	bgt.n	800dabc <_dtoa_r+0x9dc>
 800dab6:	d1de      	bne.n	800da76 <_dtoa_r+0x996>
 800dab8:	07da      	lsls	r2, r3, #31
 800daba:	d5dc      	bpl.n	800da76 <_dtoa_r+0x996>
 800dabc:	2b39      	cmp	r3, #57	; 0x39
 800dabe:	d1d8      	bne.n	800da72 <_dtoa_r+0x992>
 800dac0:	9a02      	ldr	r2, [sp, #8]
 800dac2:	2339      	movs	r3, #57	; 0x39
 800dac4:	7013      	strb	r3, [r2, #0]
 800dac6:	4643      	mov	r3, r8
 800dac8:	4698      	mov	r8, r3
 800daca:	3b01      	subs	r3, #1
 800dacc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dad0:	2a39      	cmp	r2, #57	; 0x39
 800dad2:	d051      	beq.n	800db78 <_dtoa_r+0xa98>
 800dad4:	3201      	adds	r2, #1
 800dad6:	701a      	strb	r2, [r3, #0]
 800dad8:	e745      	b.n	800d966 <_dtoa_r+0x886>
 800dada:	2a00      	cmp	r2, #0
 800dadc:	dd03      	ble.n	800dae6 <_dtoa_r+0xa06>
 800dade:	2b39      	cmp	r3, #57	; 0x39
 800dae0:	d0ee      	beq.n	800dac0 <_dtoa_r+0x9e0>
 800dae2:	3301      	adds	r3, #1
 800dae4:	e7c7      	b.n	800da76 <_dtoa_r+0x996>
 800dae6:	9a05      	ldr	r2, [sp, #20]
 800dae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800daea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800daee:	428a      	cmp	r2, r1
 800daf0:	d02b      	beq.n	800db4a <_dtoa_r+0xa6a>
 800daf2:	4629      	mov	r1, r5
 800daf4:	2300      	movs	r3, #0
 800daf6:	220a      	movs	r2, #10
 800daf8:	4630      	mov	r0, r6
 800dafa:	f000 f8ef 	bl	800dcdc <__multadd>
 800dafe:	45b9      	cmp	r9, r7
 800db00:	4605      	mov	r5, r0
 800db02:	f04f 0300 	mov.w	r3, #0
 800db06:	f04f 020a 	mov.w	r2, #10
 800db0a:	4649      	mov	r1, r9
 800db0c:	4630      	mov	r0, r6
 800db0e:	d107      	bne.n	800db20 <_dtoa_r+0xa40>
 800db10:	f000 f8e4 	bl	800dcdc <__multadd>
 800db14:	4681      	mov	r9, r0
 800db16:	4607      	mov	r7, r0
 800db18:	9b05      	ldr	r3, [sp, #20]
 800db1a:	3301      	adds	r3, #1
 800db1c:	9305      	str	r3, [sp, #20]
 800db1e:	e774      	b.n	800da0a <_dtoa_r+0x92a>
 800db20:	f000 f8dc 	bl	800dcdc <__multadd>
 800db24:	4639      	mov	r1, r7
 800db26:	4681      	mov	r9, r0
 800db28:	2300      	movs	r3, #0
 800db2a:	220a      	movs	r2, #10
 800db2c:	4630      	mov	r0, r6
 800db2e:	f000 f8d5 	bl	800dcdc <__multadd>
 800db32:	4607      	mov	r7, r0
 800db34:	e7f0      	b.n	800db18 <_dtoa_r+0xa38>
 800db36:	f1ba 0f00 	cmp.w	sl, #0
 800db3a:	9a00      	ldr	r2, [sp, #0]
 800db3c:	bfcc      	ite	gt
 800db3e:	46d0      	movgt	r8, sl
 800db40:	f04f 0801 	movle.w	r8, #1
 800db44:	4490      	add	r8, r2
 800db46:	f04f 0900 	mov.w	r9, #0
 800db4a:	4629      	mov	r1, r5
 800db4c:	2201      	movs	r2, #1
 800db4e:	4630      	mov	r0, r6
 800db50:	9302      	str	r3, [sp, #8]
 800db52:	f000 fa73 	bl	800e03c <__lshift>
 800db56:	4621      	mov	r1, r4
 800db58:	4605      	mov	r5, r0
 800db5a:	f000 fadb 	bl	800e114 <__mcmp>
 800db5e:	2800      	cmp	r0, #0
 800db60:	dcb1      	bgt.n	800dac6 <_dtoa_r+0x9e6>
 800db62:	d102      	bne.n	800db6a <_dtoa_r+0xa8a>
 800db64:	9b02      	ldr	r3, [sp, #8]
 800db66:	07db      	lsls	r3, r3, #31
 800db68:	d4ad      	bmi.n	800dac6 <_dtoa_r+0x9e6>
 800db6a:	4643      	mov	r3, r8
 800db6c:	4698      	mov	r8, r3
 800db6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db72:	2a30      	cmp	r2, #48	; 0x30
 800db74:	d0fa      	beq.n	800db6c <_dtoa_r+0xa8c>
 800db76:	e6f6      	b.n	800d966 <_dtoa_r+0x886>
 800db78:	9a00      	ldr	r2, [sp, #0]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d1a4      	bne.n	800dac8 <_dtoa_r+0x9e8>
 800db7e:	f10b 0b01 	add.w	fp, fp, #1
 800db82:	2331      	movs	r3, #49	; 0x31
 800db84:	e778      	b.n	800da78 <_dtoa_r+0x998>
 800db86:	4b15      	ldr	r3, [pc, #84]	; (800dbdc <_dtoa_r+0xafc>)
 800db88:	f7ff bb12 	b.w	800d1b0 <_dtoa_r+0xd0>
 800db8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f47f aaee 	bne.w	800d170 <_dtoa_r+0x90>
 800db94:	4b12      	ldr	r3, [pc, #72]	; (800dbe0 <_dtoa_r+0xb00>)
 800db96:	f7ff bb0b 	b.w	800d1b0 <_dtoa_r+0xd0>
 800db9a:	f1ba 0f00 	cmp.w	sl, #0
 800db9e:	dc03      	bgt.n	800dba8 <_dtoa_r+0xac8>
 800dba0:	9b07      	ldr	r3, [sp, #28]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	f73f aec7 	bgt.w	800d936 <_dtoa_r+0x856>
 800dba8:	f8dd 8000 	ldr.w	r8, [sp]
 800dbac:	4621      	mov	r1, r4
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f7ff fa08 	bl	800cfc4 <quorem>
 800dbb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dbb8:	f808 3b01 	strb.w	r3, [r8], #1
 800dbbc:	9a00      	ldr	r2, [sp, #0]
 800dbbe:	eba8 0202 	sub.w	r2, r8, r2
 800dbc2:	4592      	cmp	sl, r2
 800dbc4:	ddb7      	ble.n	800db36 <_dtoa_r+0xa56>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	2300      	movs	r3, #0
 800dbca:	220a      	movs	r2, #10
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 f885 	bl	800dcdc <__multadd>
 800dbd2:	4605      	mov	r5, r0
 800dbd4:	e7ea      	b.n	800dbac <_dtoa_r+0xacc>
 800dbd6:	bf00      	nop
 800dbd8:	0800f2ab 	.word	0x0800f2ab
 800dbdc:	0800f204 	.word	0x0800f204
 800dbe0:	0800f228 	.word	0x0800f228

0800dbe4 <_localeconv_r>:
 800dbe4:	4800      	ldr	r0, [pc, #0]	; (800dbe8 <_localeconv_r+0x4>)
 800dbe6:	4770      	bx	lr
 800dbe8:	24000174 	.word	0x24000174

0800dbec <malloc>:
 800dbec:	4b02      	ldr	r3, [pc, #8]	; (800dbf8 <malloc+0xc>)
 800dbee:	4601      	mov	r1, r0
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	f000 bbef 	b.w	800e3d4 <_malloc_r>
 800dbf6:	bf00      	nop
 800dbf8:	24000020 	.word	0x24000020

0800dbfc <memcpy>:
 800dbfc:	440a      	add	r2, r1
 800dbfe:	4291      	cmp	r1, r2
 800dc00:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc04:	d100      	bne.n	800dc08 <memcpy+0xc>
 800dc06:	4770      	bx	lr
 800dc08:	b510      	push	{r4, lr}
 800dc0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc12:	4291      	cmp	r1, r2
 800dc14:	d1f9      	bne.n	800dc0a <memcpy+0xe>
 800dc16:	bd10      	pop	{r4, pc}

0800dc18 <_Balloc>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	460d      	mov	r5, r1
 800dc20:	b976      	cbnz	r6, 800dc40 <_Balloc+0x28>
 800dc22:	2010      	movs	r0, #16
 800dc24:	f7ff ffe2 	bl	800dbec <malloc>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	6260      	str	r0, [r4, #36]	; 0x24
 800dc2c:	b920      	cbnz	r0, 800dc38 <_Balloc+0x20>
 800dc2e:	4b18      	ldr	r3, [pc, #96]	; (800dc90 <_Balloc+0x78>)
 800dc30:	4818      	ldr	r0, [pc, #96]	; (800dc94 <_Balloc+0x7c>)
 800dc32:	2166      	movs	r1, #102	; 0x66
 800dc34:	f000 fc38 	bl	800e4a8 <__assert_func>
 800dc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc3c:	6006      	str	r6, [r0, #0]
 800dc3e:	60c6      	str	r6, [r0, #12]
 800dc40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dc42:	68f3      	ldr	r3, [r6, #12]
 800dc44:	b183      	cbz	r3, 800dc68 <_Balloc+0x50>
 800dc46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc4e:	b9b8      	cbnz	r0, 800dc80 <_Balloc+0x68>
 800dc50:	2101      	movs	r1, #1
 800dc52:	fa01 f605 	lsl.w	r6, r1, r5
 800dc56:	1d72      	adds	r2, r6, #5
 800dc58:	0092      	lsls	r2, r2, #2
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f000 fb5a 	bl	800e314 <_calloc_r>
 800dc60:	b160      	cbz	r0, 800dc7c <_Balloc+0x64>
 800dc62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc66:	e00e      	b.n	800dc86 <_Balloc+0x6e>
 800dc68:	2221      	movs	r2, #33	; 0x21
 800dc6a:	2104      	movs	r1, #4
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f000 fb51 	bl	800e314 <_calloc_r>
 800dc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc74:	60f0      	str	r0, [r6, #12]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e4      	bne.n	800dc46 <_Balloc+0x2e>
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
 800dc80:	6802      	ldr	r2, [r0, #0]
 800dc82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc86:	2300      	movs	r3, #0
 800dc88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc8c:	e7f7      	b.n	800dc7e <_Balloc+0x66>
 800dc8e:	bf00      	nop
 800dc90:	0800f235 	.word	0x0800f235
 800dc94:	0800f2bc 	.word	0x0800f2bc

0800dc98 <_Bfree>:
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	460c      	mov	r4, r1
 800dca0:	b976      	cbnz	r6, 800dcc0 <_Bfree+0x28>
 800dca2:	2010      	movs	r0, #16
 800dca4:	f7ff ffa2 	bl	800dbec <malloc>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	6268      	str	r0, [r5, #36]	; 0x24
 800dcac:	b920      	cbnz	r0, 800dcb8 <_Bfree+0x20>
 800dcae:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <_Bfree+0x3c>)
 800dcb0:	4809      	ldr	r0, [pc, #36]	; (800dcd8 <_Bfree+0x40>)
 800dcb2:	218a      	movs	r1, #138	; 0x8a
 800dcb4:	f000 fbf8 	bl	800e4a8 <__assert_func>
 800dcb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcbc:	6006      	str	r6, [r0, #0]
 800dcbe:	60c6      	str	r6, [r0, #12]
 800dcc0:	b13c      	cbz	r4, 800dcd2 <_Bfree+0x3a>
 800dcc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dcc4:	6862      	ldr	r2, [r4, #4]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dccc:	6021      	str	r1, [r4, #0]
 800dcce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	0800f235 	.word	0x0800f235
 800dcd8:	0800f2bc 	.word	0x0800f2bc

0800dcdc <__multadd>:
 800dcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce0:	690e      	ldr	r6, [r1, #16]
 800dce2:	4607      	mov	r7, r0
 800dce4:	4698      	mov	r8, r3
 800dce6:	460c      	mov	r4, r1
 800dce8:	f101 0014 	add.w	r0, r1, #20
 800dcec:	2300      	movs	r3, #0
 800dcee:	6805      	ldr	r5, [r0, #0]
 800dcf0:	b2a9      	uxth	r1, r5
 800dcf2:	fb02 8101 	mla	r1, r2, r1, r8
 800dcf6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dcfa:	0c2d      	lsrs	r5, r5, #16
 800dcfc:	fb02 c505 	mla	r5, r2, r5, ip
 800dd00:	b289      	uxth	r1, r1
 800dd02:	3301      	adds	r3, #1
 800dd04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800dd08:	429e      	cmp	r6, r3
 800dd0a:	f840 1b04 	str.w	r1, [r0], #4
 800dd0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800dd12:	dcec      	bgt.n	800dcee <__multadd+0x12>
 800dd14:	f1b8 0f00 	cmp.w	r8, #0
 800dd18:	d022      	beq.n	800dd60 <__multadd+0x84>
 800dd1a:	68a3      	ldr	r3, [r4, #8]
 800dd1c:	42b3      	cmp	r3, r6
 800dd1e:	dc19      	bgt.n	800dd54 <__multadd+0x78>
 800dd20:	6861      	ldr	r1, [r4, #4]
 800dd22:	4638      	mov	r0, r7
 800dd24:	3101      	adds	r1, #1
 800dd26:	f7ff ff77 	bl	800dc18 <_Balloc>
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	b928      	cbnz	r0, 800dd3a <__multadd+0x5e>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	4b0d      	ldr	r3, [pc, #52]	; (800dd68 <__multadd+0x8c>)
 800dd32:	480e      	ldr	r0, [pc, #56]	; (800dd6c <__multadd+0x90>)
 800dd34:	21b5      	movs	r1, #181	; 0xb5
 800dd36:	f000 fbb7 	bl	800e4a8 <__assert_func>
 800dd3a:	6922      	ldr	r2, [r4, #16]
 800dd3c:	3202      	adds	r2, #2
 800dd3e:	f104 010c 	add.w	r1, r4, #12
 800dd42:	0092      	lsls	r2, r2, #2
 800dd44:	300c      	adds	r0, #12
 800dd46:	f7ff ff59 	bl	800dbfc <memcpy>
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4638      	mov	r0, r7
 800dd4e:	f7ff ffa3 	bl	800dc98 <_Bfree>
 800dd52:	462c      	mov	r4, r5
 800dd54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dd58:	3601      	adds	r6, #1
 800dd5a:	f8c3 8014 	str.w	r8, [r3, #20]
 800dd5e:	6126      	str	r6, [r4, #16]
 800dd60:	4620      	mov	r0, r4
 800dd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd66:	bf00      	nop
 800dd68:	0800f2ab 	.word	0x0800f2ab
 800dd6c:	0800f2bc 	.word	0x0800f2bc

0800dd70 <__hi0bits>:
 800dd70:	0c03      	lsrs	r3, r0, #16
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	b9d3      	cbnz	r3, 800ddac <__hi0bits+0x3c>
 800dd76:	0400      	lsls	r0, r0, #16
 800dd78:	2310      	movs	r3, #16
 800dd7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd7e:	bf04      	itt	eq
 800dd80:	0200      	lsleq	r0, r0, #8
 800dd82:	3308      	addeq	r3, #8
 800dd84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd88:	bf04      	itt	eq
 800dd8a:	0100      	lsleq	r0, r0, #4
 800dd8c:	3304      	addeq	r3, #4
 800dd8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd92:	bf04      	itt	eq
 800dd94:	0080      	lsleq	r0, r0, #2
 800dd96:	3302      	addeq	r3, #2
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	db05      	blt.n	800dda8 <__hi0bits+0x38>
 800dd9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dda0:	f103 0301 	add.w	r3, r3, #1
 800dda4:	bf08      	it	eq
 800dda6:	2320      	moveq	r3, #32
 800dda8:	4618      	mov	r0, r3
 800ddaa:	4770      	bx	lr
 800ddac:	2300      	movs	r3, #0
 800ddae:	e7e4      	b.n	800dd7a <__hi0bits+0xa>

0800ddb0 <__lo0bits>:
 800ddb0:	6803      	ldr	r3, [r0, #0]
 800ddb2:	f013 0207 	ands.w	r2, r3, #7
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	d00b      	beq.n	800ddd2 <__lo0bits+0x22>
 800ddba:	07da      	lsls	r2, r3, #31
 800ddbc:	d424      	bmi.n	800de08 <__lo0bits+0x58>
 800ddbe:	0798      	lsls	r0, r3, #30
 800ddc0:	bf49      	itett	mi
 800ddc2:	085b      	lsrmi	r3, r3, #1
 800ddc4:	089b      	lsrpl	r3, r3, #2
 800ddc6:	2001      	movmi	r0, #1
 800ddc8:	600b      	strmi	r3, [r1, #0]
 800ddca:	bf5c      	itt	pl
 800ddcc:	600b      	strpl	r3, [r1, #0]
 800ddce:	2002      	movpl	r0, #2
 800ddd0:	4770      	bx	lr
 800ddd2:	b298      	uxth	r0, r3
 800ddd4:	b9b0      	cbnz	r0, 800de04 <__lo0bits+0x54>
 800ddd6:	0c1b      	lsrs	r3, r3, #16
 800ddd8:	2010      	movs	r0, #16
 800ddda:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ddde:	bf04      	itt	eq
 800dde0:	0a1b      	lsreq	r3, r3, #8
 800dde2:	3008      	addeq	r0, #8
 800dde4:	071a      	lsls	r2, r3, #28
 800dde6:	bf04      	itt	eq
 800dde8:	091b      	lsreq	r3, r3, #4
 800ddea:	3004      	addeq	r0, #4
 800ddec:	079a      	lsls	r2, r3, #30
 800ddee:	bf04      	itt	eq
 800ddf0:	089b      	lsreq	r3, r3, #2
 800ddf2:	3002      	addeq	r0, #2
 800ddf4:	07da      	lsls	r2, r3, #31
 800ddf6:	d403      	bmi.n	800de00 <__lo0bits+0x50>
 800ddf8:	085b      	lsrs	r3, r3, #1
 800ddfa:	f100 0001 	add.w	r0, r0, #1
 800ddfe:	d005      	beq.n	800de0c <__lo0bits+0x5c>
 800de00:	600b      	str	r3, [r1, #0]
 800de02:	4770      	bx	lr
 800de04:	4610      	mov	r0, r2
 800de06:	e7e8      	b.n	800ddda <__lo0bits+0x2a>
 800de08:	2000      	movs	r0, #0
 800de0a:	4770      	bx	lr
 800de0c:	2020      	movs	r0, #32
 800de0e:	4770      	bx	lr

0800de10 <__i2b>:
 800de10:	b510      	push	{r4, lr}
 800de12:	460c      	mov	r4, r1
 800de14:	2101      	movs	r1, #1
 800de16:	f7ff feff 	bl	800dc18 <_Balloc>
 800de1a:	4602      	mov	r2, r0
 800de1c:	b928      	cbnz	r0, 800de2a <__i2b+0x1a>
 800de1e:	4b05      	ldr	r3, [pc, #20]	; (800de34 <__i2b+0x24>)
 800de20:	4805      	ldr	r0, [pc, #20]	; (800de38 <__i2b+0x28>)
 800de22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de26:	f000 fb3f 	bl	800e4a8 <__assert_func>
 800de2a:	2301      	movs	r3, #1
 800de2c:	6144      	str	r4, [r0, #20]
 800de2e:	6103      	str	r3, [r0, #16]
 800de30:	bd10      	pop	{r4, pc}
 800de32:	bf00      	nop
 800de34:	0800f2ab 	.word	0x0800f2ab
 800de38:	0800f2bc 	.word	0x0800f2bc

0800de3c <__multiply>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	4614      	mov	r4, r2
 800de42:	690a      	ldr	r2, [r1, #16]
 800de44:	6923      	ldr	r3, [r4, #16]
 800de46:	429a      	cmp	r2, r3
 800de48:	bfb8      	it	lt
 800de4a:	460b      	movlt	r3, r1
 800de4c:	460d      	mov	r5, r1
 800de4e:	bfbc      	itt	lt
 800de50:	4625      	movlt	r5, r4
 800de52:	461c      	movlt	r4, r3
 800de54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800de58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800de5c:	68ab      	ldr	r3, [r5, #8]
 800de5e:	6869      	ldr	r1, [r5, #4]
 800de60:	eb0a 0709 	add.w	r7, sl, r9
 800de64:	42bb      	cmp	r3, r7
 800de66:	b085      	sub	sp, #20
 800de68:	bfb8      	it	lt
 800de6a:	3101      	addlt	r1, #1
 800de6c:	f7ff fed4 	bl	800dc18 <_Balloc>
 800de70:	b930      	cbnz	r0, 800de80 <__multiply+0x44>
 800de72:	4602      	mov	r2, r0
 800de74:	4b42      	ldr	r3, [pc, #264]	; (800df80 <__multiply+0x144>)
 800de76:	4843      	ldr	r0, [pc, #268]	; (800df84 <__multiply+0x148>)
 800de78:	f240 115d 	movw	r1, #349	; 0x15d
 800de7c:	f000 fb14 	bl	800e4a8 <__assert_func>
 800de80:	f100 0614 	add.w	r6, r0, #20
 800de84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800de88:	4633      	mov	r3, r6
 800de8a:	2200      	movs	r2, #0
 800de8c:	4543      	cmp	r3, r8
 800de8e:	d31e      	bcc.n	800dece <__multiply+0x92>
 800de90:	f105 0c14 	add.w	ip, r5, #20
 800de94:	f104 0314 	add.w	r3, r4, #20
 800de98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800de9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dea0:	9202      	str	r2, [sp, #8]
 800dea2:	ebac 0205 	sub.w	r2, ip, r5
 800dea6:	3a15      	subs	r2, #21
 800dea8:	f022 0203 	bic.w	r2, r2, #3
 800deac:	3204      	adds	r2, #4
 800deae:	f105 0115 	add.w	r1, r5, #21
 800deb2:	458c      	cmp	ip, r1
 800deb4:	bf38      	it	cc
 800deb6:	2204      	movcc	r2, #4
 800deb8:	9201      	str	r2, [sp, #4]
 800deba:	9a02      	ldr	r2, [sp, #8]
 800debc:	9303      	str	r3, [sp, #12]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d808      	bhi.n	800ded4 <__multiply+0x98>
 800dec2:	2f00      	cmp	r7, #0
 800dec4:	dc55      	bgt.n	800df72 <__multiply+0x136>
 800dec6:	6107      	str	r7, [r0, #16]
 800dec8:	b005      	add	sp, #20
 800deca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dece:	f843 2b04 	str.w	r2, [r3], #4
 800ded2:	e7db      	b.n	800de8c <__multiply+0x50>
 800ded4:	f8b3 a000 	ldrh.w	sl, [r3]
 800ded8:	f1ba 0f00 	cmp.w	sl, #0
 800dedc:	d020      	beq.n	800df20 <__multiply+0xe4>
 800dede:	f105 0e14 	add.w	lr, r5, #20
 800dee2:	46b1      	mov	r9, r6
 800dee4:	2200      	movs	r2, #0
 800dee6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800deea:	f8d9 b000 	ldr.w	fp, [r9]
 800deee:	b2a1      	uxth	r1, r4
 800def0:	fa1f fb8b 	uxth.w	fp, fp
 800def4:	fb0a b101 	mla	r1, sl, r1, fp
 800def8:	4411      	add	r1, r2
 800defa:	f8d9 2000 	ldr.w	r2, [r9]
 800defe:	0c24      	lsrs	r4, r4, #16
 800df00:	0c12      	lsrs	r2, r2, #16
 800df02:	fb0a 2404 	mla	r4, sl, r4, r2
 800df06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800df0a:	b289      	uxth	r1, r1
 800df0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800df10:	45f4      	cmp	ip, lr
 800df12:	f849 1b04 	str.w	r1, [r9], #4
 800df16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800df1a:	d8e4      	bhi.n	800dee6 <__multiply+0xaa>
 800df1c:	9901      	ldr	r1, [sp, #4]
 800df1e:	5072      	str	r2, [r6, r1]
 800df20:	9a03      	ldr	r2, [sp, #12]
 800df22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df26:	3304      	adds	r3, #4
 800df28:	f1b9 0f00 	cmp.w	r9, #0
 800df2c:	d01f      	beq.n	800df6e <__multiply+0x132>
 800df2e:	6834      	ldr	r4, [r6, #0]
 800df30:	f105 0114 	add.w	r1, r5, #20
 800df34:	46b6      	mov	lr, r6
 800df36:	f04f 0a00 	mov.w	sl, #0
 800df3a:	880a      	ldrh	r2, [r1, #0]
 800df3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800df40:	fb09 b202 	mla	r2, r9, r2, fp
 800df44:	4492      	add	sl, r2
 800df46:	b2a4      	uxth	r4, r4
 800df48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800df4c:	f84e 4b04 	str.w	r4, [lr], #4
 800df50:	f851 4b04 	ldr.w	r4, [r1], #4
 800df54:	f8be 2000 	ldrh.w	r2, [lr]
 800df58:	0c24      	lsrs	r4, r4, #16
 800df5a:	fb09 2404 	mla	r4, r9, r4, r2
 800df5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800df62:	458c      	cmp	ip, r1
 800df64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800df68:	d8e7      	bhi.n	800df3a <__multiply+0xfe>
 800df6a:	9a01      	ldr	r2, [sp, #4]
 800df6c:	50b4      	str	r4, [r6, r2]
 800df6e:	3604      	adds	r6, #4
 800df70:	e7a3      	b.n	800deba <__multiply+0x7e>
 800df72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1a5      	bne.n	800dec6 <__multiply+0x8a>
 800df7a:	3f01      	subs	r7, #1
 800df7c:	e7a1      	b.n	800dec2 <__multiply+0x86>
 800df7e:	bf00      	nop
 800df80:	0800f2ab 	.word	0x0800f2ab
 800df84:	0800f2bc 	.word	0x0800f2bc

0800df88 <__pow5mult>:
 800df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df8c:	4615      	mov	r5, r2
 800df8e:	f012 0203 	ands.w	r2, r2, #3
 800df92:	4606      	mov	r6, r0
 800df94:	460f      	mov	r7, r1
 800df96:	d007      	beq.n	800dfa8 <__pow5mult+0x20>
 800df98:	4c25      	ldr	r4, [pc, #148]	; (800e030 <__pow5mult+0xa8>)
 800df9a:	3a01      	subs	r2, #1
 800df9c:	2300      	movs	r3, #0
 800df9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfa2:	f7ff fe9b 	bl	800dcdc <__multadd>
 800dfa6:	4607      	mov	r7, r0
 800dfa8:	10ad      	asrs	r5, r5, #2
 800dfaa:	d03d      	beq.n	800e028 <__pow5mult+0xa0>
 800dfac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dfae:	b97c      	cbnz	r4, 800dfd0 <__pow5mult+0x48>
 800dfb0:	2010      	movs	r0, #16
 800dfb2:	f7ff fe1b 	bl	800dbec <malloc>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	6270      	str	r0, [r6, #36]	; 0x24
 800dfba:	b928      	cbnz	r0, 800dfc8 <__pow5mult+0x40>
 800dfbc:	4b1d      	ldr	r3, [pc, #116]	; (800e034 <__pow5mult+0xac>)
 800dfbe:	481e      	ldr	r0, [pc, #120]	; (800e038 <__pow5mult+0xb0>)
 800dfc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dfc4:	f000 fa70 	bl	800e4a8 <__assert_func>
 800dfc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfcc:	6004      	str	r4, [r0, #0]
 800dfce:	60c4      	str	r4, [r0, #12]
 800dfd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dfd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfd8:	b94c      	cbnz	r4, 800dfee <__pow5mult+0x66>
 800dfda:	f240 2171 	movw	r1, #625	; 0x271
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f7ff ff16 	bl	800de10 <__i2b>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfea:	4604      	mov	r4, r0
 800dfec:	6003      	str	r3, [r0, #0]
 800dfee:	f04f 0900 	mov.w	r9, #0
 800dff2:	07eb      	lsls	r3, r5, #31
 800dff4:	d50a      	bpl.n	800e00c <__pow5mult+0x84>
 800dff6:	4639      	mov	r1, r7
 800dff8:	4622      	mov	r2, r4
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff ff1e 	bl	800de3c <__multiply>
 800e000:	4639      	mov	r1, r7
 800e002:	4680      	mov	r8, r0
 800e004:	4630      	mov	r0, r6
 800e006:	f7ff fe47 	bl	800dc98 <_Bfree>
 800e00a:	4647      	mov	r7, r8
 800e00c:	106d      	asrs	r5, r5, #1
 800e00e:	d00b      	beq.n	800e028 <__pow5mult+0xa0>
 800e010:	6820      	ldr	r0, [r4, #0]
 800e012:	b938      	cbnz	r0, 800e024 <__pow5mult+0x9c>
 800e014:	4622      	mov	r2, r4
 800e016:	4621      	mov	r1, r4
 800e018:	4630      	mov	r0, r6
 800e01a:	f7ff ff0f 	bl	800de3c <__multiply>
 800e01e:	6020      	str	r0, [r4, #0]
 800e020:	f8c0 9000 	str.w	r9, [r0]
 800e024:	4604      	mov	r4, r0
 800e026:	e7e4      	b.n	800dff2 <__pow5mult+0x6a>
 800e028:	4638      	mov	r0, r7
 800e02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e02e:	bf00      	nop
 800e030:	0800f410 	.word	0x0800f410
 800e034:	0800f235 	.word	0x0800f235
 800e038:	0800f2bc 	.word	0x0800f2bc

0800e03c <__lshift>:
 800e03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e040:	460c      	mov	r4, r1
 800e042:	6849      	ldr	r1, [r1, #4]
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e04a:	68a3      	ldr	r3, [r4, #8]
 800e04c:	4607      	mov	r7, r0
 800e04e:	4691      	mov	r9, r2
 800e050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e054:	f108 0601 	add.w	r6, r8, #1
 800e058:	42b3      	cmp	r3, r6
 800e05a:	db0b      	blt.n	800e074 <__lshift+0x38>
 800e05c:	4638      	mov	r0, r7
 800e05e:	f7ff fddb 	bl	800dc18 <_Balloc>
 800e062:	4605      	mov	r5, r0
 800e064:	b948      	cbnz	r0, 800e07a <__lshift+0x3e>
 800e066:	4602      	mov	r2, r0
 800e068:	4b28      	ldr	r3, [pc, #160]	; (800e10c <__lshift+0xd0>)
 800e06a:	4829      	ldr	r0, [pc, #164]	; (800e110 <__lshift+0xd4>)
 800e06c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e070:	f000 fa1a 	bl	800e4a8 <__assert_func>
 800e074:	3101      	adds	r1, #1
 800e076:	005b      	lsls	r3, r3, #1
 800e078:	e7ee      	b.n	800e058 <__lshift+0x1c>
 800e07a:	2300      	movs	r3, #0
 800e07c:	f100 0114 	add.w	r1, r0, #20
 800e080:	f100 0210 	add.w	r2, r0, #16
 800e084:	4618      	mov	r0, r3
 800e086:	4553      	cmp	r3, sl
 800e088:	db33      	blt.n	800e0f2 <__lshift+0xb6>
 800e08a:	6920      	ldr	r0, [r4, #16]
 800e08c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e090:	f104 0314 	add.w	r3, r4, #20
 800e094:	f019 091f 	ands.w	r9, r9, #31
 800e098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e09c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0a0:	d02b      	beq.n	800e0fa <__lshift+0xbe>
 800e0a2:	f1c9 0e20 	rsb	lr, r9, #32
 800e0a6:	468a      	mov	sl, r1
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	6818      	ldr	r0, [r3, #0]
 800e0ac:	fa00 f009 	lsl.w	r0, r0, r9
 800e0b0:	4302      	orrs	r2, r0
 800e0b2:	f84a 2b04 	str.w	r2, [sl], #4
 800e0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0ba:	459c      	cmp	ip, r3
 800e0bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0c0:	d8f3      	bhi.n	800e0aa <__lshift+0x6e>
 800e0c2:	ebac 0304 	sub.w	r3, ip, r4
 800e0c6:	3b15      	subs	r3, #21
 800e0c8:	f023 0303 	bic.w	r3, r3, #3
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	f104 0015 	add.w	r0, r4, #21
 800e0d2:	4584      	cmp	ip, r0
 800e0d4:	bf38      	it	cc
 800e0d6:	2304      	movcc	r3, #4
 800e0d8:	50ca      	str	r2, [r1, r3]
 800e0da:	b10a      	cbz	r2, 800e0e0 <__lshift+0xa4>
 800e0dc:	f108 0602 	add.w	r6, r8, #2
 800e0e0:	3e01      	subs	r6, #1
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	612e      	str	r6, [r5, #16]
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	f7ff fdd6 	bl	800dc98 <_Bfree>
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	e7c5      	b.n	800e086 <__lshift+0x4a>
 800e0fa:	3904      	subs	r1, #4
 800e0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e100:	f841 2f04 	str.w	r2, [r1, #4]!
 800e104:	459c      	cmp	ip, r3
 800e106:	d8f9      	bhi.n	800e0fc <__lshift+0xc0>
 800e108:	e7ea      	b.n	800e0e0 <__lshift+0xa4>
 800e10a:	bf00      	nop
 800e10c:	0800f2ab 	.word	0x0800f2ab
 800e110:	0800f2bc 	.word	0x0800f2bc

0800e114 <__mcmp>:
 800e114:	b530      	push	{r4, r5, lr}
 800e116:	6902      	ldr	r2, [r0, #16]
 800e118:	690c      	ldr	r4, [r1, #16]
 800e11a:	1b12      	subs	r2, r2, r4
 800e11c:	d10e      	bne.n	800e13c <__mcmp+0x28>
 800e11e:	f100 0314 	add.w	r3, r0, #20
 800e122:	3114      	adds	r1, #20
 800e124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e12c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e134:	42a5      	cmp	r5, r4
 800e136:	d003      	beq.n	800e140 <__mcmp+0x2c>
 800e138:	d305      	bcc.n	800e146 <__mcmp+0x32>
 800e13a:	2201      	movs	r2, #1
 800e13c:	4610      	mov	r0, r2
 800e13e:	bd30      	pop	{r4, r5, pc}
 800e140:	4283      	cmp	r3, r0
 800e142:	d3f3      	bcc.n	800e12c <__mcmp+0x18>
 800e144:	e7fa      	b.n	800e13c <__mcmp+0x28>
 800e146:	f04f 32ff 	mov.w	r2, #4294967295
 800e14a:	e7f7      	b.n	800e13c <__mcmp+0x28>

0800e14c <__mdiff>:
 800e14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	460c      	mov	r4, r1
 800e152:	4606      	mov	r6, r0
 800e154:	4611      	mov	r1, r2
 800e156:	4620      	mov	r0, r4
 800e158:	4617      	mov	r7, r2
 800e15a:	f7ff ffdb 	bl	800e114 <__mcmp>
 800e15e:	1e05      	subs	r5, r0, #0
 800e160:	d110      	bne.n	800e184 <__mdiff+0x38>
 800e162:	4629      	mov	r1, r5
 800e164:	4630      	mov	r0, r6
 800e166:	f7ff fd57 	bl	800dc18 <_Balloc>
 800e16a:	b930      	cbnz	r0, 800e17a <__mdiff+0x2e>
 800e16c:	4b39      	ldr	r3, [pc, #228]	; (800e254 <__mdiff+0x108>)
 800e16e:	4602      	mov	r2, r0
 800e170:	f240 2132 	movw	r1, #562	; 0x232
 800e174:	4838      	ldr	r0, [pc, #224]	; (800e258 <__mdiff+0x10c>)
 800e176:	f000 f997 	bl	800e4a8 <__assert_func>
 800e17a:	2301      	movs	r3, #1
 800e17c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e184:	bfa4      	itt	ge
 800e186:	463b      	movge	r3, r7
 800e188:	4627      	movge	r7, r4
 800e18a:	4630      	mov	r0, r6
 800e18c:	6879      	ldr	r1, [r7, #4]
 800e18e:	bfa6      	itte	ge
 800e190:	461c      	movge	r4, r3
 800e192:	2500      	movge	r5, #0
 800e194:	2501      	movlt	r5, #1
 800e196:	f7ff fd3f 	bl	800dc18 <_Balloc>
 800e19a:	b920      	cbnz	r0, 800e1a6 <__mdiff+0x5a>
 800e19c:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <__mdiff+0x108>)
 800e19e:	4602      	mov	r2, r0
 800e1a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e1a4:	e7e6      	b.n	800e174 <__mdiff+0x28>
 800e1a6:	693e      	ldr	r6, [r7, #16]
 800e1a8:	60c5      	str	r5, [r0, #12]
 800e1aa:	6925      	ldr	r5, [r4, #16]
 800e1ac:	f107 0114 	add.w	r1, r7, #20
 800e1b0:	f104 0914 	add.w	r9, r4, #20
 800e1b4:	f100 0e14 	add.w	lr, r0, #20
 800e1b8:	f107 0210 	add.w	r2, r7, #16
 800e1bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e1c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e1c4:	46f2      	mov	sl, lr
 800e1c6:	2700      	movs	r7, #0
 800e1c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1d0:	fa1f f883 	uxth.w	r8, r3
 800e1d4:	fa17 f78b 	uxtah	r7, r7, fp
 800e1d8:	0c1b      	lsrs	r3, r3, #16
 800e1da:	eba7 0808 	sub.w	r8, r7, r8
 800e1de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1e6:	fa1f f888 	uxth.w	r8, r8
 800e1ea:	141f      	asrs	r7, r3, #16
 800e1ec:	454d      	cmp	r5, r9
 800e1ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e1f2:	f84a 3b04 	str.w	r3, [sl], #4
 800e1f6:	d8e7      	bhi.n	800e1c8 <__mdiff+0x7c>
 800e1f8:	1b2b      	subs	r3, r5, r4
 800e1fa:	3b15      	subs	r3, #21
 800e1fc:	f023 0303 	bic.w	r3, r3, #3
 800e200:	3304      	adds	r3, #4
 800e202:	3415      	adds	r4, #21
 800e204:	42a5      	cmp	r5, r4
 800e206:	bf38      	it	cc
 800e208:	2304      	movcc	r3, #4
 800e20a:	4419      	add	r1, r3
 800e20c:	4473      	add	r3, lr
 800e20e:	469e      	mov	lr, r3
 800e210:	460d      	mov	r5, r1
 800e212:	4565      	cmp	r5, ip
 800e214:	d30e      	bcc.n	800e234 <__mdiff+0xe8>
 800e216:	f10c 0203 	add.w	r2, ip, #3
 800e21a:	1a52      	subs	r2, r2, r1
 800e21c:	f022 0203 	bic.w	r2, r2, #3
 800e220:	3903      	subs	r1, #3
 800e222:	458c      	cmp	ip, r1
 800e224:	bf38      	it	cc
 800e226:	2200      	movcc	r2, #0
 800e228:	441a      	add	r2, r3
 800e22a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e22e:	b17b      	cbz	r3, 800e250 <__mdiff+0x104>
 800e230:	6106      	str	r6, [r0, #16]
 800e232:	e7a5      	b.n	800e180 <__mdiff+0x34>
 800e234:	f855 8b04 	ldr.w	r8, [r5], #4
 800e238:	fa17 f488 	uxtah	r4, r7, r8
 800e23c:	1422      	asrs	r2, r4, #16
 800e23e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e242:	b2a4      	uxth	r4, r4
 800e244:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e248:	f84e 4b04 	str.w	r4, [lr], #4
 800e24c:	1417      	asrs	r7, r2, #16
 800e24e:	e7e0      	b.n	800e212 <__mdiff+0xc6>
 800e250:	3e01      	subs	r6, #1
 800e252:	e7ea      	b.n	800e22a <__mdiff+0xde>
 800e254:	0800f2ab 	.word	0x0800f2ab
 800e258:	0800f2bc 	.word	0x0800f2bc

0800e25c <__d2b>:
 800e25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e260:	4689      	mov	r9, r1
 800e262:	2101      	movs	r1, #1
 800e264:	ec57 6b10 	vmov	r6, r7, d0
 800e268:	4690      	mov	r8, r2
 800e26a:	f7ff fcd5 	bl	800dc18 <_Balloc>
 800e26e:	4604      	mov	r4, r0
 800e270:	b930      	cbnz	r0, 800e280 <__d2b+0x24>
 800e272:	4602      	mov	r2, r0
 800e274:	4b25      	ldr	r3, [pc, #148]	; (800e30c <__d2b+0xb0>)
 800e276:	4826      	ldr	r0, [pc, #152]	; (800e310 <__d2b+0xb4>)
 800e278:	f240 310a 	movw	r1, #778	; 0x30a
 800e27c:	f000 f914 	bl	800e4a8 <__assert_func>
 800e280:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e284:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e288:	bb35      	cbnz	r5, 800e2d8 <__d2b+0x7c>
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	d028      	beq.n	800e2e2 <__d2b+0x86>
 800e290:	4668      	mov	r0, sp
 800e292:	9600      	str	r6, [sp, #0]
 800e294:	f7ff fd8c 	bl	800ddb0 <__lo0bits>
 800e298:	9900      	ldr	r1, [sp, #0]
 800e29a:	b300      	cbz	r0, 800e2de <__d2b+0x82>
 800e29c:	9a01      	ldr	r2, [sp, #4]
 800e29e:	f1c0 0320 	rsb	r3, r0, #32
 800e2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a6:	430b      	orrs	r3, r1
 800e2a8:	40c2      	lsrs	r2, r0
 800e2aa:	6163      	str	r3, [r4, #20]
 800e2ac:	9201      	str	r2, [sp, #4]
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	61a3      	str	r3, [r4, #24]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	bf14      	ite	ne
 800e2b6:	2202      	movne	r2, #2
 800e2b8:	2201      	moveq	r2, #1
 800e2ba:	6122      	str	r2, [r4, #16]
 800e2bc:	b1d5      	cbz	r5, 800e2f4 <__d2b+0x98>
 800e2be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e2c2:	4405      	add	r5, r0
 800e2c4:	f8c9 5000 	str.w	r5, [r9]
 800e2c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2cc:	f8c8 0000 	str.w	r0, [r8]
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	b003      	add	sp, #12
 800e2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2dc:	e7d5      	b.n	800e28a <__d2b+0x2e>
 800e2de:	6161      	str	r1, [r4, #20]
 800e2e0:	e7e5      	b.n	800e2ae <__d2b+0x52>
 800e2e2:	a801      	add	r0, sp, #4
 800e2e4:	f7ff fd64 	bl	800ddb0 <__lo0bits>
 800e2e8:	9b01      	ldr	r3, [sp, #4]
 800e2ea:	6163      	str	r3, [r4, #20]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	6122      	str	r2, [r4, #16]
 800e2f0:	3020      	adds	r0, #32
 800e2f2:	e7e3      	b.n	800e2bc <__d2b+0x60>
 800e2f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2fc:	f8c9 0000 	str.w	r0, [r9]
 800e300:	6918      	ldr	r0, [r3, #16]
 800e302:	f7ff fd35 	bl	800dd70 <__hi0bits>
 800e306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e30a:	e7df      	b.n	800e2cc <__d2b+0x70>
 800e30c:	0800f2ab 	.word	0x0800f2ab
 800e310:	0800f2bc 	.word	0x0800f2bc

0800e314 <_calloc_r>:
 800e314:	b513      	push	{r0, r1, r4, lr}
 800e316:	434a      	muls	r2, r1
 800e318:	4611      	mov	r1, r2
 800e31a:	9201      	str	r2, [sp, #4]
 800e31c:	f000 f85a 	bl	800e3d4 <_malloc_r>
 800e320:	4604      	mov	r4, r0
 800e322:	b118      	cbz	r0, 800e32c <_calloc_r+0x18>
 800e324:	9a01      	ldr	r2, [sp, #4]
 800e326:	2100      	movs	r1, #0
 800e328:	f7fe fa02 	bl	800c730 <memset>
 800e32c:	4620      	mov	r0, r4
 800e32e:	b002      	add	sp, #8
 800e330:	bd10      	pop	{r4, pc}
	...

0800e334 <_free_r>:
 800e334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e336:	2900      	cmp	r1, #0
 800e338:	d048      	beq.n	800e3cc <_free_r+0x98>
 800e33a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e33e:	9001      	str	r0, [sp, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	f1a1 0404 	sub.w	r4, r1, #4
 800e346:	bfb8      	it	lt
 800e348:	18e4      	addlt	r4, r4, r3
 800e34a:	f000 f8ef 	bl	800e52c <__malloc_lock>
 800e34e:	4a20      	ldr	r2, [pc, #128]	; (800e3d0 <_free_r+0x9c>)
 800e350:	9801      	ldr	r0, [sp, #4]
 800e352:	6813      	ldr	r3, [r2, #0]
 800e354:	4615      	mov	r5, r2
 800e356:	b933      	cbnz	r3, 800e366 <_free_r+0x32>
 800e358:	6063      	str	r3, [r4, #4]
 800e35a:	6014      	str	r4, [r2, #0]
 800e35c:	b003      	add	sp, #12
 800e35e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e362:	f000 b8e9 	b.w	800e538 <__malloc_unlock>
 800e366:	42a3      	cmp	r3, r4
 800e368:	d90b      	bls.n	800e382 <_free_r+0x4e>
 800e36a:	6821      	ldr	r1, [r4, #0]
 800e36c:	1862      	adds	r2, r4, r1
 800e36e:	4293      	cmp	r3, r2
 800e370:	bf04      	itt	eq
 800e372:	681a      	ldreq	r2, [r3, #0]
 800e374:	685b      	ldreq	r3, [r3, #4]
 800e376:	6063      	str	r3, [r4, #4]
 800e378:	bf04      	itt	eq
 800e37a:	1852      	addeq	r2, r2, r1
 800e37c:	6022      	streq	r2, [r4, #0]
 800e37e:	602c      	str	r4, [r5, #0]
 800e380:	e7ec      	b.n	800e35c <_free_r+0x28>
 800e382:	461a      	mov	r2, r3
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	b10b      	cbz	r3, 800e38c <_free_r+0x58>
 800e388:	42a3      	cmp	r3, r4
 800e38a:	d9fa      	bls.n	800e382 <_free_r+0x4e>
 800e38c:	6811      	ldr	r1, [r2, #0]
 800e38e:	1855      	adds	r5, r2, r1
 800e390:	42a5      	cmp	r5, r4
 800e392:	d10b      	bne.n	800e3ac <_free_r+0x78>
 800e394:	6824      	ldr	r4, [r4, #0]
 800e396:	4421      	add	r1, r4
 800e398:	1854      	adds	r4, r2, r1
 800e39a:	42a3      	cmp	r3, r4
 800e39c:	6011      	str	r1, [r2, #0]
 800e39e:	d1dd      	bne.n	800e35c <_free_r+0x28>
 800e3a0:	681c      	ldr	r4, [r3, #0]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	6053      	str	r3, [r2, #4]
 800e3a6:	4421      	add	r1, r4
 800e3a8:	6011      	str	r1, [r2, #0]
 800e3aa:	e7d7      	b.n	800e35c <_free_r+0x28>
 800e3ac:	d902      	bls.n	800e3b4 <_free_r+0x80>
 800e3ae:	230c      	movs	r3, #12
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	e7d3      	b.n	800e35c <_free_r+0x28>
 800e3b4:	6825      	ldr	r5, [r4, #0]
 800e3b6:	1961      	adds	r1, r4, r5
 800e3b8:	428b      	cmp	r3, r1
 800e3ba:	bf04      	itt	eq
 800e3bc:	6819      	ldreq	r1, [r3, #0]
 800e3be:	685b      	ldreq	r3, [r3, #4]
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	bf04      	itt	eq
 800e3c4:	1949      	addeq	r1, r1, r5
 800e3c6:	6021      	streq	r1, [r4, #0]
 800e3c8:	6054      	str	r4, [r2, #4]
 800e3ca:	e7c7      	b.n	800e35c <_free_r+0x28>
 800e3cc:	b003      	add	sp, #12
 800e3ce:	bd30      	pop	{r4, r5, pc}
 800e3d0:	24000a4c 	.word	0x24000a4c

0800e3d4 <_malloc_r>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	1ccd      	adds	r5, r1, #3
 800e3d8:	f025 0503 	bic.w	r5, r5, #3
 800e3dc:	3508      	adds	r5, #8
 800e3de:	2d0c      	cmp	r5, #12
 800e3e0:	bf38      	it	cc
 800e3e2:	250c      	movcc	r5, #12
 800e3e4:	2d00      	cmp	r5, #0
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	db01      	blt.n	800e3ee <_malloc_r+0x1a>
 800e3ea:	42a9      	cmp	r1, r5
 800e3ec:	d903      	bls.n	800e3f6 <_malloc_r+0x22>
 800e3ee:	230c      	movs	r3, #12
 800e3f0:	6033      	str	r3, [r6, #0]
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3f6:	f000 f899 	bl	800e52c <__malloc_lock>
 800e3fa:	4921      	ldr	r1, [pc, #132]	; (800e480 <_malloc_r+0xac>)
 800e3fc:	680a      	ldr	r2, [r1, #0]
 800e3fe:	4614      	mov	r4, r2
 800e400:	b99c      	cbnz	r4, 800e42a <_malloc_r+0x56>
 800e402:	4f20      	ldr	r7, [pc, #128]	; (800e484 <_malloc_r+0xb0>)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	b923      	cbnz	r3, 800e412 <_malloc_r+0x3e>
 800e408:	4621      	mov	r1, r4
 800e40a:	4630      	mov	r0, r6
 800e40c:	f000 f83c 	bl	800e488 <_sbrk_r>
 800e410:	6038      	str	r0, [r7, #0]
 800e412:	4629      	mov	r1, r5
 800e414:	4630      	mov	r0, r6
 800e416:	f000 f837 	bl	800e488 <_sbrk_r>
 800e41a:	1c43      	adds	r3, r0, #1
 800e41c:	d123      	bne.n	800e466 <_malloc_r+0x92>
 800e41e:	230c      	movs	r3, #12
 800e420:	6033      	str	r3, [r6, #0]
 800e422:	4630      	mov	r0, r6
 800e424:	f000 f888 	bl	800e538 <__malloc_unlock>
 800e428:	e7e3      	b.n	800e3f2 <_malloc_r+0x1e>
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	1b5b      	subs	r3, r3, r5
 800e42e:	d417      	bmi.n	800e460 <_malloc_r+0x8c>
 800e430:	2b0b      	cmp	r3, #11
 800e432:	d903      	bls.n	800e43c <_malloc_r+0x68>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	441c      	add	r4, r3
 800e438:	6025      	str	r5, [r4, #0]
 800e43a:	e004      	b.n	800e446 <_malloc_r+0x72>
 800e43c:	6863      	ldr	r3, [r4, #4]
 800e43e:	42a2      	cmp	r2, r4
 800e440:	bf0c      	ite	eq
 800e442:	600b      	streq	r3, [r1, #0]
 800e444:	6053      	strne	r3, [r2, #4]
 800e446:	4630      	mov	r0, r6
 800e448:	f000 f876 	bl	800e538 <__malloc_unlock>
 800e44c:	f104 000b 	add.w	r0, r4, #11
 800e450:	1d23      	adds	r3, r4, #4
 800e452:	f020 0007 	bic.w	r0, r0, #7
 800e456:	1ac2      	subs	r2, r0, r3
 800e458:	d0cc      	beq.n	800e3f4 <_malloc_r+0x20>
 800e45a:	1a1b      	subs	r3, r3, r0
 800e45c:	50a3      	str	r3, [r4, r2]
 800e45e:	e7c9      	b.n	800e3f4 <_malloc_r+0x20>
 800e460:	4622      	mov	r2, r4
 800e462:	6864      	ldr	r4, [r4, #4]
 800e464:	e7cc      	b.n	800e400 <_malloc_r+0x2c>
 800e466:	1cc4      	adds	r4, r0, #3
 800e468:	f024 0403 	bic.w	r4, r4, #3
 800e46c:	42a0      	cmp	r0, r4
 800e46e:	d0e3      	beq.n	800e438 <_malloc_r+0x64>
 800e470:	1a21      	subs	r1, r4, r0
 800e472:	4630      	mov	r0, r6
 800e474:	f000 f808 	bl	800e488 <_sbrk_r>
 800e478:	3001      	adds	r0, #1
 800e47a:	d1dd      	bne.n	800e438 <_malloc_r+0x64>
 800e47c:	e7cf      	b.n	800e41e <_malloc_r+0x4a>
 800e47e:	bf00      	nop
 800e480:	24000a4c 	.word	0x24000a4c
 800e484:	24000a50 	.word	0x24000a50

0800e488 <_sbrk_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	4d06      	ldr	r5, [pc, #24]	; (800e4a4 <_sbrk_r+0x1c>)
 800e48c:	2300      	movs	r3, #0
 800e48e:	4604      	mov	r4, r0
 800e490:	4608      	mov	r0, r1
 800e492:	602b      	str	r3, [r5, #0]
 800e494:	f7f4 fdb4 	bl	8003000 <_sbrk>
 800e498:	1c43      	adds	r3, r0, #1
 800e49a:	d102      	bne.n	800e4a2 <_sbrk_r+0x1a>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	b103      	cbz	r3, 800e4a2 <_sbrk_r+0x1a>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}
 800e4a4:	24000a58 	.word	0x24000a58

0800e4a8 <__assert_func>:
 800e4a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4aa:	4614      	mov	r4, r2
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <__assert_func+0x2c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4605      	mov	r5, r0
 800e4b4:	68d8      	ldr	r0, [r3, #12]
 800e4b6:	b14c      	cbz	r4, 800e4cc <__assert_func+0x24>
 800e4b8:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <__assert_func+0x30>)
 800e4ba:	9100      	str	r1, [sp, #0]
 800e4bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4c0:	4906      	ldr	r1, [pc, #24]	; (800e4dc <__assert_func+0x34>)
 800e4c2:	462b      	mov	r3, r5
 800e4c4:	f000 f80e 	bl	800e4e4 <fiprintf>
 800e4c8:	f000 fa64 	bl	800e994 <abort>
 800e4cc:	4b04      	ldr	r3, [pc, #16]	; (800e4e0 <__assert_func+0x38>)
 800e4ce:	461c      	mov	r4, r3
 800e4d0:	e7f3      	b.n	800e4ba <__assert_func+0x12>
 800e4d2:	bf00      	nop
 800e4d4:	24000020 	.word	0x24000020
 800e4d8:	0800f41c 	.word	0x0800f41c
 800e4dc:	0800f429 	.word	0x0800f429
 800e4e0:	0800f457 	.word	0x0800f457

0800e4e4 <fiprintf>:
 800e4e4:	b40e      	push	{r1, r2, r3}
 800e4e6:	b503      	push	{r0, r1, lr}
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	ab03      	add	r3, sp, #12
 800e4ec:	4805      	ldr	r0, [pc, #20]	; (800e504 <fiprintf+0x20>)
 800e4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4f2:	6800      	ldr	r0, [r0, #0]
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	f000 f84f 	bl	800e598 <_vfiprintf_r>
 800e4fa:	b002      	add	sp, #8
 800e4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e500:	b003      	add	sp, #12
 800e502:	4770      	bx	lr
 800e504:	24000020 	.word	0x24000020

0800e508 <__ascii_mbtowc>:
 800e508:	b082      	sub	sp, #8
 800e50a:	b901      	cbnz	r1, 800e50e <__ascii_mbtowc+0x6>
 800e50c:	a901      	add	r1, sp, #4
 800e50e:	b142      	cbz	r2, 800e522 <__ascii_mbtowc+0x1a>
 800e510:	b14b      	cbz	r3, 800e526 <__ascii_mbtowc+0x1e>
 800e512:	7813      	ldrb	r3, [r2, #0]
 800e514:	600b      	str	r3, [r1, #0]
 800e516:	7812      	ldrb	r2, [r2, #0]
 800e518:	1e10      	subs	r0, r2, #0
 800e51a:	bf18      	it	ne
 800e51c:	2001      	movne	r0, #1
 800e51e:	b002      	add	sp, #8
 800e520:	4770      	bx	lr
 800e522:	4610      	mov	r0, r2
 800e524:	e7fb      	b.n	800e51e <__ascii_mbtowc+0x16>
 800e526:	f06f 0001 	mvn.w	r0, #1
 800e52a:	e7f8      	b.n	800e51e <__ascii_mbtowc+0x16>

0800e52c <__malloc_lock>:
 800e52c:	4801      	ldr	r0, [pc, #4]	; (800e534 <__malloc_lock+0x8>)
 800e52e:	f000 bbf1 	b.w	800ed14 <__retarget_lock_acquire_recursive>
 800e532:	bf00      	nop
 800e534:	24000a60 	.word	0x24000a60

0800e538 <__malloc_unlock>:
 800e538:	4801      	ldr	r0, [pc, #4]	; (800e540 <__malloc_unlock+0x8>)
 800e53a:	f000 bbec 	b.w	800ed16 <__retarget_lock_release_recursive>
 800e53e:	bf00      	nop
 800e540:	24000a60 	.word	0x24000a60

0800e544 <__sfputc_r>:
 800e544:	6893      	ldr	r3, [r2, #8]
 800e546:	3b01      	subs	r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	b410      	push	{r4}
 800e54c:	6093      	str	r3, [r2, #8]
 800e54e:	da08      	bge.n	800e562 <__sfputc_r+0x1e>
 800e550:	6994      	ldr	r4, [r2, #24]
 800e552:	42a3      	cmp	r3, r4
 800e554:	db01      	blt.n	800e55a <__sfputc_r+0x16>
 800e556:	290a      	cmp	r1, #10
 800e558:	d103      	bne.n	800e562 <__sfputc_r+0x1e>
 800e55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e55e:	f000 b94b 	b.w	800e7f8 <__swbuf_r>
 800e562:	6813      	ldr	r3, [r2, #0]
 800e564:	1c58      	adds	r0, r3, #1
 800e566:	6010      	str	r0, [r2, #0]
 800e568:	7019      	strb	r1, [r3, #0]
 800e56a:	4608      	mov	r0, r1
 800e56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <__sfputs_r>:
 800e572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e574:	4606      	mov	r6, r0
 800e576:	460f      	mov	r7, r1
 800e578:	4614      	mov	r4, r2
 800e57a:	18d5      	adds	r5, r2, r3
 800e57c:	42ac      	cmp	r4, r5
 800e57e:	d101      	bne.n	800e584 <__sfputs_r+0x12>
 800e580:	2000      	movs	r0, #0
 800e582:	e007      	b.n	800e594 <__sfputs_r+0x22>
 800e584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e588:	463a      	mov	r2, r7
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7ff ffda 	bl	800e544 <__sfputc_r>
 800e590:	1c43      	adds	r3, r0, #1
 800e592:	d1f3      	bne.n	800e57c <__sfputs_r+0xa>
 800e594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e598 <_vfiprintf_r>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	460d      	mov	r5, r1
 800e59e:	b09d      	sub	sp, #116	; 0x74
 800e5a0:	4614      	mov	r4, r2
 800e5a2:	4698      	mov	r8, r3
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	b118      	cbz	r0, 800e5b0 <_vfiprintf_r+0x18>
 800e5a8:	6983      	ldr	r3, [r0, #24]
 800e5aa:	b90b      	cbnz	r3, 800e5b0 <_vfiprintf_r+0x18>
 800e5ac:	f000 fb14 	bl	800ebd8 <__sinit>
 800e5b0:	4b89      	ldr	r3, [pc, #548]	; (800e7d8 <_vfiprintf_r+0x240>)
 800e5b2:	429d      	cmp	r5, r3
 800e5b4:	d11b      	bne.n	800e5ee <_vfiprintf_r+0x56>
 800e5b6:	6875      	ldr	r5, [r6, #4]
 800e5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5ba:	07d9      	lsls	r1, r3, #31
 800e5bc:	d405      	bmi.n	800e5ca <_vfiprintf_r+0x32>
 800e5be:	89ab      	ldrh	r3, [r5, #12]
 800e5c0:	059a      	lsls	r2, r3, #22
 800e5c2:	d402      	bmi.n	800e5ca <_vfiprintf_r+0x32>
 800e5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5c6:	f000 fba5 	bl	800ed14 <__retarget_lock_acquire_recursive>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	071b      	lsls	r3, r3, #28
 800e5ce:	d501      	bpl.n	800e5d4 <_vfiprintf_r+0x3c>
 800e5d0:	692b      	ldr	r3, [r5, #16]
 800e5d2:	b9eb      	cbnz	r3, 800e610 <_vfiprintf_r+0x78>
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f000 f96e 	bl	800e8b8 <__swsetup_r>
 800e5dc:	b1c0      	cbz	r0, 800e610 <_vfiprintf_r+0x78>
 800e5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5e0:	07dc      	lsls	r4, r3, #31
 800e5e2:	d50e      	bpl.n	800e602 <_vfiprintf_r+0x6a>
 800e5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e8:	b01d      	add	sp, #116	; 0x74
 800e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ee:	4b7b      	ldr	r3, [pc, #492]	; (800e7dc <_vfiprintf_r+0x244>)
 800e5f0:	429d      	cmp	r5, r3
 800e5f2:	d101      	bne.n	800e5f8 <_vfiprintf_r+0x60>
 800e5f4:	68b5      	ldr	r5, [r6, #8]
 800e5f6:	e7df      	b.n	800e5b8 <_vfiprintf_r+0x20>
 800e5f8:	4b79      	ldr	r3, [pc, #484]	; (800e7e0 <_vfiprintf_r+0x248>)
 800e5fa:	429d      	cmp	r5, r3
 800e5fc:	bf08      	it	eq
 800e5fe:	68f5      	ldreq	r5, [r6, #12]
 800e600:	e7da      	b.n	800e5b8 <_vfiprintf_r+0x20>
 800e602:	89ab      	ldrh	r3, [r5, #12]
 800e604:	0598      	lsls	r0, r3, #22
 800e606:	d4ed      	bmi.n	800e5e4 <_vfiprintf_r+0x4c>
 800e608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e60a:	f000 fb84 	bl	800ed16 <__retarget_lock_release_recursive>
 800e60e:	e7e9      	b.n	800e5e4 <_vfiprintf_r+0x4c>
 800e610:	2300      	movs	r3, #0
 800e612:	9309      	str	r3, [sp, #36]	; 0x24
 800e614:	2320      	movs	r3, #32
 800e616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e61e:	2330      	movs	r3, #48	; 0x30
 800e620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7e4 <_vfiprintf_r+0x24c>
 800e624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e628:	f04f 0901 	mov.w	r9, #1
 800e62c:	4623      	mov	r3, r4
 800e62e:	469a      	mov	sl, r3
 800e630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e634:	b10a      	cbz	r2, 800e63a <_vfiprintf_r+0xa2>
 800e636:	2a25      	cmp	r2, #37	; 0x25
 800e638:	d1f9      	bne.n	800e62e <_vfiprintf_r+0x96>
 800e63a:	ebba 0b04 	subs.w	fp, sl, r4
 800e63e:	d00b      	beq.n	800e658 <_vfiprintf_r+0xc0>
 800e640:	465b      	mov	r3, fp
 800e642:	4622      	mov	r2, r4
 800e644:	4629      	mov	r1, r5
 800e646:	4630      	mov	r0, r6
 800e648:	f7ff ff93 	bl	800e572 <__sfputs_r>
 800e64c:	3001      	adds	r0, #1
 800e64e:	f000 80aa 	beq.w	800e7a6 <_vfiprintf_r+0x20e>
 800e652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e654:	445a      	add	r2, fp
 800e656:	9209      	str	r2, [sp, #36]	; 0x24
 800e658:	f89a 3000 	ldrb.w	r3, [sl]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 80a2 	beq.w	800e7a6 <_vfiprintf_r+0x20e>
 800e662:	2300      	movs	r3, #0
 800e664:	f04f 32ff 	mov.w	r2, #4294967295
 800e668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e66c:	f10a 0a01 	add.w	sl, sl, #1
 800e670:	9304      	str	r3, [sp, #16]
 800e672:	9307      	str	r3, [sp, #28]
 800e674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e678:	931a      	str	r3, [sp, #104]	; 0x68
 800e67a:	4654      	mov	r4, sl
 800e67c:	2205      	movs	r2, #5
 800e67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e682:	4858      	ldr	r0, [pc, #352]	; (800e7e4 <_vfiprintf_r+0x24c>)
 800e684:	f7f1 fe34 	bl	80002f0 <memchr>
 800e688:	9a04      	ldr	r2, [sp, #16]
 800e68a:	b9d8      	cbnz	r0, 800e6c4 <_vfiprintf_r+0x12c>
 800e68c:	06d1      	lsls	r1, r2, #27
 800e68e:	bf44      	itt	mi
 800e690:	2320      	movmi	r3, #32
 800e692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e696:	0713      	lsls	r3, r2, #28
 800e698:	bf44      	itt	mi
 800e69a:	232b      	movmi	r3, #43	; 0x2b
 800e69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800e6a6:	d015      	beq.n	800e6d4 <_vfiprintf_r+0x13c>
 800e6a8:	9a07      	ldr	r2, [sp, #28]
 800e6aa:	4654      	mov	r4, sl
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	f04f 0c0a 	mov.w	ip, #10
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6b8:	3b30      	subs	r3, #48	; 0x30
 800e6ba:	2b09      	cmp	r3, #9
 800e6bc:	d94e      	bls.n	800e75c <_vfiprintf_r+0x1c4>
 800e6be:	b1b0      	cbz	r0, 800e6ee <_vfiprintf_r+0x156>
 800e6c0:	9207      	str	r2, [sp, #28]
 800e6c2:	e014      	b.n	800e6ee <_vfiprintf_r+0x156>
 800e6c4:	eba0 0308 	sub.w	r3, r0, r8
 800e6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	9304      	str	r3, [sp, #16]
 800e6d0:	46a2      	mov	sl, r4
 800e6d2:	e7d2      	b.n	800e67a <_vfiprintf_r+0xe2>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	1d19      	adds	r1, r3, #4
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	9103      	str	r1, [sp, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bfbb      	ittet	lt
 800e6e0:	425b      	neglt	r3, r3
 800e6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e6e6:	9307      	strge	r3, [sp, #28]
 800e6e8:	9307      	strlt	r3, [sp, #28]
 800e6ea:	bfb8      	it	lt
 800e6ec:	9204      	strlt	r2, [sp, #16]
 800e6ee:	7823      	ldrb	r3, [r4, #0]
 800e6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e6f2:	d10c      	bne.n	800e70e <_vfiprintf_r+0x176>
 800e6f4:	7863      	ldrb	r3, [r4, #1]
 800e6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e6f8:	d135      	bne.n	800e766 <_vfiprintf_r+0x1ce>
 800e6fa:	9b03      	ldr	r3, [sp, #12]
 800e6fc:	1d1a      	adds	r2, r3, #4
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	9203      	str	r2, [sp, #12]
 800e702:	2b00      	cmp	r3, #0
 800e704:	bfb8      	it	lt
 800e706:	f04f 33ff 	movlt.w	r3, #4294967295
 800e70a:	3402      	adds	r4, #2
 800e70c:	9305      	str	r3, [sp, #20]
 800e70e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7f4 <_vfiprintf_r+0x25c>
 800e712:	7821      	ldrb	r1, [r4, #0]
 800e714:	2203      	movs	r2, #3
 800e716:	4650      	mov	r0, sl
 800e718:	f7f1 fdea 	bl	80002f0 <memchr>
 800e71c:	b140      	cbz	r0, 800e730 <_vfiprintf_r+0x198>
 800e71e:	2340      	movs	r3, #64	; 0x40
 800e720:	eba0 000a 	sub.w	r0, r0, sl
 800e724:	fa03 f000 	lsl.w	r0, r3, r0
 800e728:	9b04      	ldr	r3, [sp, #16]
 800e72a:	4303      	orrs	r3, r0
 800e72c:	3401      	adds	r4, #1
 800e72e:	9304      	str	r3, [sp, #16]
 800e730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e734:	482c      	ldr	r0, [pc, #176]	; (800e7e8 <_vfiprintf_r+0x250>)
 800e736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e73a:	2206      	movs	r2, #6
 800e73c:	f7f1 fdd8 	bl	80002f0 <memchr>
 800e740:	2800      	cmp	r0, #0
 800e742:	d03f      	beq.n	800e7c4 <_vfiprintf_r+0x22c>
 800e744:	4b29      	ldr	r3, [pc, #164]	; (800e7ec <_vfiprintf_r+0x254>)
 800e746:	bb1b      	cbnz	r3, 800e790 <_vfiprintf_r+0x1f8>
 800e748:	9b03      	ldr	r3, [sp, #12]
 800e74a:	3307      	adds	r3, #7
 800e74c:	f023 0307 	bic.w	r3, r3, #7
 800e750:	3308      	adds	r3, #8
 800e752:	9303      	str	r3, [sp, #12]
 800e754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e756:	443b      	add	r3, r7
 800e758:	9309      	str	r3, [sp, #36]	; 0x24
 800e75a:	e767      	b.n	800e62c <_vfiprintf_r+0x94>
 800e75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e760:	460c      	mov	r4, r1
 800e762:	2001      	movs	r0, #1
 800e764:	e7a5      	b.n	800e6b2 <_vfiprintf_r+0x11a>
 800e766:	2300      	movs	r3, #0
 800e768:	3401      	adds	r4, #1
 800e76a:	9305      	str	r3, [sp, #20]
 800e76c:	4619      	mov	r1, r3
 800e76e:	f04f 0c0a 	mov.w	ip, #10
 800e772:	4620      	mov	r0, r4
 800e774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e778:	3a30      	subs	r2, #48	; 0x30
 800e77a:	2a09      	cmp	r2, #9
 800e77c:	d903      	bls.n	800e786 <_vfiprintf_r+0x1ee>
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0c5      	beq.n	800e70e <_vfiprintf_r+0x176>
 800e782:	9105      	str	r1, [sp, #20]
 800e784:	e7c3      	b.n	800e70e <_vfiprintf_r+0x176>
 800e786:	fb0c 2101 	mla	r1, ip, r1, r2
 800e78a:	4604      	mov	r4, r0
 800e78c:	2301      	movs	r3, #1
 800e78e:	e7f0      	b.n	800e772 <_vfiprintf_r+0x1da>
 800e790:	ab03      	add	r3, sp, #12
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	462a      	mov	r2, r5
 800e796:	4b16      	ldr	r3, [pc, #88]	; (800e7f0 <_vfiprintf_r+0x258>)
 800e798:	a904      	add	r1, sp, #16
 800e79a:	4630      	mov	r0, r6
 800e79c:	f7fe f860 	bl	800c860 <_printf_float>
 800e7a0:	4607      	mov	r7, r0
 800e7a2:	1c78      	adds	r0, r7, #1
 800e7a4:	d1d6      	bne.n	800e754 <_vfiprintf_r+0x1bc>
 800e7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7a8:	07d9      	lsls	r1, r3, #31
 800e7aa:	d405      	bmi.n	800e7b8 <_vfiprintf_r+0x220>
 800e7ac:	89ab      	ldrh	r3, [r5, #12]
 800e7ae:	059a      	lsls	r2, r3, #22
 800e7b0:	d402      	bmi.n	800e7b8 <_vfiprintf_r+0x220>
 800e7b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7b4:	f000 faaf 	bl	800ed16 <__retarget_lock_release_recursive>
 800e7b8:	89ab      	ldrh	r3, [r5, #12]
 800e7ba:	065b      	lsls	r3, r3, #25
 800e7bc:	f53f af12 	bmi.w	800e5e4 <_vfiprintf_r+0x4c>
 800e7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7c2:	e711      	b.n	800e5e8 <_vfiprintf_r+0x50>
 800e7c4:	ab03      	add	r3, sp, #12
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	462a      	mov	r2, r5
 800e7ca:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <_vfiprintf_r+0x258>)
 800e7cc:	a904      	add	r1, sp, #16
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	f7fe fad2 	bl	800cd78 <_printf_i>
 800e7d4:	e7e4      	b.n	800e7a0 <_vfiprintf_r+0x208>
 800e7d6:	bf00      	nop
 800e7d8:	0800f594 	.word	0x0800f594
 800e7dc:	0800f5b4 	.word	0x0800f5b4
 800e7e0:	0800f574 	.word	0x0800f574
 800e7e4:	0800f462 	.word	0x0800f462
 800e7e8:	0800f46c 	.word	0x0800f46c
 800e7ec:	0800c861 	.word	0x0800c861
 800e7f0:	0800e573 	.word	0x0800e573
 800e7f4:	0800f468 	.word	0x0800f468

0800e7f8 <__swbuf_r>:
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fa:	460e      	mov	r6, r1
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	4605      	mov	r5, r0
 800e800:	b118      	cbz	r0, 800e80a <__swbuf_r+0x12>
 800e802:	6983      	ldr	r3, [r0, #24]
 800e804:	b90b      	cbnz	r3, 800e80a <__swbuf_r+0x12>
 800e806:	f000 f9e7 	bl	800ebd8 <__sinit>
 800e80a:	4b21      	ldr	r3, [pc, #132]	; (800e890 <__swbuf_r+0x98>)
 800e80c:	429c      	cmp	r4, r3
 800e80e:	d12b      	bne.n	800e868 <__swbuf_r+0x70>
 800e810:	686c      	ldr	r4, [r5, #4]
 800e812:	69a3      	ldr	r3, [r4, #24]
 800e814:	60a3      	str	r3, [r4, #8]
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	071a      	lsls	r2, r3, #28
 800e81a:	d52f      	bpl.n	800e87c <__swbuf_r+0x84>
 800e81c:	6923      	ldr	r3, [r4, #16]
 800e81e:	b36b      	cbz	r3, 800e87c <__swbuf_r+0x84>
 800e820:	6923      	ldr	r3, [r4, #16]
 800e822:	6820      	ldr	r0, [r4, #0]
 800e824:	1ac0      	subs	r0, r0, r3
 800e826:	6963      	ldr	r3, [r4, #20]
 800e828:	b2f6      	uxtb	r6, r6
 800e82a:	4283      	cmp	r3, r0
 800e82c:	4637      	mov	r7, r6
 800e82e:	dc04      	bgt.n	800e83a <__swbuf_r+0x42>
 800e830:	4621      	mov	r1, r4
 800e832:	4628      	mov	r0, r5
 800e834:	f000 f93c 	bl	800eab0 <_fflush_r>
 800e838:	bb30      	cbnz	r0, 800e888 <__swbuf_r+0x90>
 800e83a:	68a3      	ldr	r3, [r4, #8]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	60a3      	str	r3, [r4, #8]
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	6022      	str	r2, [r4, #0]
 800e846:	701e      	strb	r6, [r3, #0]
 800e848:	6963      	ldr	r3, [r4, #20]
 800e84a:	3001      	adds	r0, #1
 800e84c:	4283      	cmp	r3, r0
 800e84e:	d004      	beq.n	800e85a <__swbuf_r+0x62>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	07db      	lsls	r3, r3, #31
 800e854:	d506      	bpl.n	800e864 <__swbuf_r+0x6c>
 800e856:	2e0a      	cmp	r6, #10
 800e858:	d104      	bne.n	800e864 <__swbuf_r+0x6c>
 800e85a:	4621      	mov	r1, r4
 800e85c:	4628      	mov	r0, r5
 800e85e:	f000 f927 	bl	800eab0 <_fflush_r>
 800e862:	b988      	cbnz	r0, 800e888 <__swbuf_r+0x90>
 800e864:	4638      	mov	r0, r7
 800e866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e868:	4b0a      	ldr	r3, [pc, #40]	; (800e894 <__swbuf_r+0x9c>)
 800e86a:	429c      	cmp	r4, r3
 800e86c:	d101      	bne.n	800e872 <__swbuf_r+0x7a>
 800e86e:	68ac      	ldr	r4, [r5, #8]
 800e870:	e7cf      	b.n	800e812 <__swbuf_r+0x1a>
 800e872:	4b09      	ldr	r3, [pc, #36]	; (800e898 <__swbuf_r+0xa0>)
 800e874:	429c      	cmp	r4, r3
 800e876:	bf08      	it	eq
 800e878:	68ec      	ldreq	r4, [r5, #12]
 800e87a:	e7ca      	b.n	800e812 <__swbuf_r+0x1a>
 800e87c:	4621      	mov	r1, r4
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 f81a 	bl	800e8b8 <__swsetup_r>
 800e884:	2800      	cmp	r0, #0
 800e886:	d0cb      	beq.n	800e820 <__swbuf_r+0x28>
 800e888:	f04f 37ff 	mov.w	r7, #4294967295
 800e88c:	e7ea      	b.n	800e864 <__swbuf_r+0x6c>
 800e88e:	bf00      	nop
 800e890:	0800f594 	.word	0x0800f594
 800e894:	0800f5b4 	.word	0x0800f5b4
 800e898:	0800f574 	.word	0x0800f574

0800e89c <__ascii_wctomb>:
 800e89c:	b149      	cbz	r1, 800e8b2 <__ascii_wctomb+0x16>
 800e89e:	2aff      	cmp	r2, #255	; 0xff
 800e8a0:	bf85      	ittet	hi
 800e8a2:	238a      	movhi	r3, #138	; 0x8a
 800e8a4:	6003      	strhi	r3, [r0, #0]
 800e8a6:	700a      	strbls	r2, [r1, #0]
 800e8a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e8ac:	bf98      	it	ls
 800e8ae:	2001      	movls	r0, #1
 800e8b0:	4770      	bx	lr
 800e8b2:	4608      	mov	r0, r1
 800e8b4:	4770      	bx	lr
	...

0800e8b8 <__swsetup_r>:
 800e8b8:	4b32      	ldr	r3, [pc, #200]	; (800e984 <__swsetup_r+0xcc>)
 800e8ba:	b570      	push	{r4, r5, r6, lr}
 800e8bc:	681d      	ldr	r5, [r3, #0]
 800e8be:	4606      	mov	r6, r0
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	b125      	cbz	r5, 800e8ce <__swsetup_r+0x16>
 800e8c4:	69ab      	ldr	r3, [r5, #24]
 800e8c6:	b913      	cbnz	r3, 800e8ce <__swsetup_r+0x16>
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 f985 	bl	800ebd8 <__sinit>
 800e8ce:	4b2e      	ldr	r3, [pc, #184]	; (800e988 <__swsetup_r+0xd0>)
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	d10f      	bne.n	800e8f4 <__swsetup_r+0x3c>
 800e8d4:	686c      	ldr	r4, [r5, #4]
 800e8d6:	89a3      	ldrh	r3, [r4, #12]
 800e8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8dc:	0719      	lsls	r1, r3, #28
 800e8de:	d42c      	bmi.n	800e93a <__swsetup_r+0x82>
 800e8e0:	06dd      	lsls	r5, r3, #27
 800e8e2:	d411      	bmi.n	800e908 <__swsetup_r+0x50>
 800e8e4:	2309      	movs	r3, #9
 800e8e6:	6033      	str	r3, [r6, #0]
 800e8e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8ec:	81a3      	strh	r3, [r4, #12]
 800e8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f2:	e03e      	b.n	800e972 <__swsetup_r+0xba>
 800e8f4:	4b25      	ldr	r3, [pc, #148]	; (800e98c <__swsetup_r+0xd4>)
 800e8f6:	429c      	cmp	r4, r3
 800e8f8:	d101      	bne.n	800e8fe <__swsetup_r+0x46>
 800e8fa:	68ac      	ldr	r4, [r5, #8]
 800e8fc:	e7eb      	b.n	800e8d6 <__swsetup_r+0x1e>
 800e8fe:	4b24      	ldr	r3, [pc, #144]	; (800e990 <__swsetup_r+0xd8>)
 800e900:	429c      	cmp	r4, r3
 800e902:	bf08      	it	eq
 800e904:	68ec      	ldreq	r4, [r5, #12]
 800e906:	e7e6      	b.n	800e8d6 <__swsetup_r+0x1e>
 800e908:	0758      	lsls	r0, r3, #29
 800e90a:	d512      	bpl.n	800e932 <__swsetup_r+0x7a>
 800e90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e90e:	b141      	cbz	r1, 800e922 <__swsetup_r+0x6a>
 800e910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e914:	4299      	cmp	r1, r3
 800e916:	d002      	beq.n	800e91e <__swsetup_r+0x66>
 800e918:	4630      	mov	r0, r6
 800e91a:	f7ff fd0b 	bl	800e334 <_free_r>
 800e91e:	2300      	movs	r3, #0
 800e920:	6363      	str	r3, [r4, #52]	; 0x34
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e928:	81a3      	strh	r3, [r4, #12]
 800e92a:	2300      	movs	r3, #0
 800e92c:	6063      	str	r3, [r4, #4]
 800e92e:	6923      	ldr	r3, [r4, #16]
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f043 0308 	orr.w	r3, r3, #8
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	6923      	ldr	r3, [r4, #16]
 800e93c:	b94b      	cbnz	r3, 800e952 <__swsetup_r+0x9a>
 800e93e:	89a3      	ldrh	r3, [r4, #12]
 800e940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e948:	d003      	beq.n	800e952 <__swsetup_r+0x9a>
 800e94a:	4621      	mov	r1, r4
 800e94c:	4630      	mov	r0, r6
 800e94e:	f000 fa07 	bl	800ed60 <__smakebuf_r>
 800e952:	89a0      	ldrh	r0, [r4, #12]
 800e954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e958:	f010 0301 	ands.w	r3, r0, #1
 800e95c:	d00a      	beq.n	800e974 <__swsetup_r+0xbc>
 800e95e:	2300      	movs	r3, #0
 800e960:	60a3      	str	r3, [r4, #8]
 800e962:	6963      	ldr	r3, [r4, #20]
 800e964:	425b      	negs	r3, r3
 800e966:	61a3      	str	r3, [r4, #24]
 800e968:	6923      	ldr	r3, [r4, #16]
 800e96a:	b943      	cbnz	r3, 800e97e <__swsetup_r+0xc6>
 800e96c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e970:	d1ba      	bne.n	800e8e8 <__swsetup_r+0x30>
 800e972:	bd70      	pop	{r4, r5, r6, pc}
 800e974:	0781      	lsls	r1, r0, #30
 800e976:	bf58      	it	pl
 800e978:	6963      	ldrpl	r3, [r4, #20]
 800e97a:	60a3      	str	r3, [r4, #8]
 800e97c:	e7f4      	b.n	800e968 <__swsetup_r+0xb0>
 800e97e:	2000      	movs	r0, #0
 800e980:	e7f7      	b.n	800e972 <__swsetup_r+0xba>
 800e982:	bf00      	nop
 800e984:	24000020 	.word	0x24000020
 800e988:	0800f594 	.word	0x0800f594
 800e98c:	0800f5b4 	.word	0x0800f5b4
 800e990:	0800f574 	.word	0x0800f574

0800e994 <abort>:
 800e994:	b508      	push	{r3, lr}
 800e996:	2006      	movs	r0, #6
 800e998:	f000 fa4a 	bl	800ee30 <raise>
 800e99c:	2001      	movs	r0, #1
 800e99e:	f7f4 fab7 	bl	8002f10 <_exit>
	...

0800e9a4 <__sflush_r>:
 800e9a4:	898a      	ldrh	r2, [r1, #12]
 800e9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	0710      	lsls	r0, r2, #28
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	d458      	bmi.n	800ea64 <__sflush_r+0xc0>
 800e9b2:	684b      	ldr	r3, [r1, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dc05      	bgt.n	800e9c4 <__sflush_r+0x20>
 800e9b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	dc02      	bgt.n	800e9c4 <__sflush_r+0x20>
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	d0f9      	beq.n	800e9be <__sflush_r+0x1a>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9d0:	682f      	ldr	r7, [r5, #0]
 800e9d2:	602b      	str	r3, [r5, #0]
 800e9d4:	d032      	beq.n	800ea3c <__sflush_r+0x98>
 800e9d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	075a      	lsls	r2, r3, #29
 800e9dc:	d505      	bpl.n	800e9ea <__sflush_r+0x46>
 800e9de:	6863      	ldr	r3, [r4, #4]
 800e9e0:	1ac0      	subs	r0, r0, r3
 800e9e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9e4:	b10b      	cbz	r3, 800e9ea <__sflush_r+0x46>
 800e9e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9e8:	1ac0      	subs	r0, r0, r3
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9f0:	6a21      	ldr	r1, [r4, #32]
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	47b0      	blx	r6
 800e9f6:	1c43      	adds	r3, r0, #1
 800e9f8:	89a3      	ldrh	r3, [r4, #12]
 800e9fa:	d106      	bne.n	800ea0a <__sflush_r+0x66>
 800e9fc:	6829      	ldr	r1, [r5, #0]
 800e9fe:	291d      	cmp	r1, #29
 800ea00:	d82c      	bhi.n	800ea5c <__sflush_r+0xb8>
 800ea02:	4a2a      	ldr	r2, [pc, #168]	; (800eaac <__sflush_r+0x108>)
 800ea04:	40ca      	lsrs	r2, r1
 800ea06:	07d6      	lsls	r6, r2, #31
 800ea08:	d528      	bpl.n	800ea5c <__sflush_r+0xb8>
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	6062      	str	r2, [r4, #4]
 800ea0e:	04d9      	lsls	r1, r3, #19
 800ea10:	6922      	ldr	r2, [r4, #16]
 800ea12:	6022      	str	r2, [r4, #0]
 800ea14:	d504      	bpl.n	800ea20 <__sflush_r+0x7c>
 800ea16:	1c42      	adds	r2, r0, #1
 800ea18:	d101      	bne.n	800ea1e <__sflush_r+0x7a>
 800ea1a:	682b      	ldr	r3, [r5, #0]
 800ea1c:	b903      	cbnz	r3, 800ea20 <__sflush_r+0x7c>
 800ea1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ea20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea22:	602f      	str	r7, [r5, #0]
 800ea24:	2900      	cmp	r1, #0
 800ea26:	d0ca      	beq.n	800e9be <__sflush_r+0x1a>
 800ea28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea2c:	4299      	cmp	r1, r3
 800ea2e:	d002      	beq.n	800ea36 <__sflush_r+0x92>
 800ea30:	4628      	mov	r0, r5
 800ea32:	f7ff fc7f 	bl	800e334 <_free_r>
 800ea36:	2000      	movs	r0, #0
 800ea38:	6360      	str	r0, [r4, #52]	; 0x34
 800ea3a:	e7c1      	b.n	800e9c0 <__sflush_r+0x1c>
 800ea3c:	6a21      	ldr	r1, [r4, #32]
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b0      	blx	r6
 800ea44:	1c41      	adds	r1, r0, #1
 800ea46:	d1c7      	bne.n	800e9d8 <__sflush_r+0x34>
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d0c4      	beq.n	800e9d8 <__sflush_r+0x34>
 800ea4e:	2b1d      	cmp	r3, #29
 800ea50:	d001      	beq.n	800ea56 <__sflush_r+0xb2>
 800ea52:	2b16      	cmp	r3, #22
 800ea54:	d101      	bne.n	800ea5a <__sflush_r+0xb6>
 800ea56:	602f      	str	r7, [r5, #0]
 800ea58:	e7b1      	b.n	800e9be <__sflush_r+0x1a>
 800ea5a:	89a3      	ldrh	r3, [r4, #12]
 800ea5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea60:	81a3      	strh	r3, [r4, #12]
 800ea62:	e7ad      	b.n	800e9c0 <__sflush_r+0x1c>
 800ea64:	690f      	ldr	r7, [r1, #16]
 800ea66:	2f00      	cmp	r7, #0
 800ea68:	d0a9      	beq.n	800e9be <__sflush_r+0x1a>
 800ea6a:	0793      	lsls	r3, r2, #30
 800ea6c:	680e      	ldr	r6, [r1, #0]
 800ea6e:	bf08      	it	eq
 800ea70:	694b      	ldreq	r3, [r1, #20]
 800ea72:	600f      	str	r7, [r1, #0]
 800ea74:	bf18      	it	ne
 800ea76:	2300      	movne	r3, #0
 800ea78:	eba6 0807 	sub.w	r8, r6, r7
 800ea7c:	608b      	str	r3, [r1, #8]
 800ea7e:	f1b8 0f00 	cmp.w	r8, #0
 800ea82:	dd9c      	ble.n	800e9be <__sflush_r+0x1a>
 800ea84:	6a21      	ldr	r1, [r4, #32]
 800ea86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea88:	4643      	mov	r3, r8
 800ea8a:	463a      	mov	r2, r7
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	47b0      	blx	r6
 800ea90:	2800      	cmp	r0, #0
 800ea92:	dc06      	bgt.n	800eaa2 <__sflush_r+0xfe>
 800ea94:	89a3      	ldrh	r3, [r4, #12]
 800ea96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea9a:	81a3      	strh	r3, [r4, #12]
 800ea9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa0:	e78e      	b.n	800e9c0 <__sflush_r+0x1c>
 800eaa2:	4407      	add	r7, r0
 800eaa4:	eba8 0800 	sub.w	r8, r8, r0
 800eaa8:	e7e9      	b.n	800ea7e <__sflush_r+0xda>
 800eaaa:	bf00      	nop
 800eaac:	20400001 	.word	0x20400001

0800eab0 <_fflush_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	690b      	ldr	r3, [r1, #16]
 800eab4:	4605      	mov	r5, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	b913      	cbnz	r3, 800eac0 <_fflush_r+0x10>
 800eaba:	2500      	movs	r5, #0
 800eabc:	4628      	mov	r0, r5
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	b118      	cbz	r0, 800eaca <_fflush_r+0x1a>
 800eac2:	6983      	ldr	r3, [r0, #24]
 800eac4:	b90b      	cbnz	r3, 800eaca <_fflush_r+0x1a>
 800eac6:	f000 f887 	bl	800ebd8 <__sinit>
 800eaca:	4b14      	ldr	r3, [pc, #80]	; (800eb1c <_fflush_r+0x6c>)
 800eacc:	429c      	cmp	r4, r3
 800eace:	d11b      	bne.n	800eb08 <_fflush_r+0x58>
 800ead0:	686c      	ldr	r4, [r5, #4]
 800ead2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d0ef      	beq.n	800eaba <_fflush_r+0xa>
 800eada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eadc:	07d0      	lsls	r0, r2, #31
 800eade:	d404      	bmi.n	800eaea <_fflush_r+0x3a>
 800eae0:	0599      	lsls	r1, r3, #22
 800eae2:	d402      	bmi.n	800eaea <_fflush_r+0x3a>
 800eae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eae6:	f000 f915 	bl	800ed14 <__retarget_lock_acquire_recursive>
 800eaea:	4628      	mov	r0, r5
 800eaec:	4621      	mov	r1, r4
 800eaee:	f7ff ff59 	bl	800e9a4 <__sflush_r>
 800eaf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaf4:	07da      	lsls	r2, r3, #31
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	d4e0      	bmi.n	800eabc <_fflush_r+0xc>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	059b      	lsls	r3, r3, #22
 800eafe:	d4dd      	bmi.n	800eabc <_fflush_r+0xc>
 800eb00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb02:	f000 f908 	bl	800ed16 <__retarget_lock_release_recursive>
 800eb06:	e7d9      	b.n	800eabc <_fflush_r+0xc>
 800eb08:	4b05      	ldr	r3, [pc, #20]	; (800eb20 <_fflush_r+0x70>)
 800eb0a:	429c      	cmp	r4, r3
 800eb0c:	d101      	bne.n	800eb12 <_fflush_r+0x62>
 800eb0e:	68ac      	ldr	r4, [r5, #8]
 800eb10:	e7df      	b.n	800ead2 <_fflush_r+0x22>
 800eb12:	4b04      	ldr	r3, [pc, #16]	; (800eb24 <_fflush_r+0x74>)
 800eb14:	429c      	cmp	r4, r3
 800eb16:	bf08      	it	eq
 800eb18:	68ec      	ldreq	r4, [r5, #12]
 800eb1a:	e7da      	b.n	800ead2 <_fflush_r+0x22>
 800eb1c:	0800f594 	.word	0x0800f594
 800eb20:	0800f5b4 	.word	0x0800f5b4
 800eb24:	0800f574 	.word	0x0800f574

0800eb28 <std>:
 800eb28:	2300      	movs	r3, #0
 800eb2a:	b510      	push	{r4, lr}
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	e9c0 3300 	strd	r3, r3, [r0]
 800eb32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb36:	6083      	str	r3, [r0, #8]
 800eb38:	8181      	strh	r1, [r0, #12]
 800eb3a:	6643      	str	r3, [r0, #100]	; 0x64
 800eb3c:	81c2      	strh	r2, [r0, #14]
 800eb3e:	6183      	str	r3, [r0, #24]
 800eb40:	4619      	mov	r1, r3
 800eb42:	2208      	movs	r2, #8
 800eb44:	305c      	adds	r0, #92	; 0x5c
 800eb46:	f7fd fdf3 	bl	800c730 <memset>
 800eb4a:	4b05      	ldr	r3, [pc, #20]	; (800eb60 <std+0x38>)
 800eb4c:	6263      	str	r3, [r4, #36]	; 0x24
 800eb4e:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <std+0x3c>)
 800eb50:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb52:	4b05      	ldr	r3, [pc, #20]	; (800eb68 <std+0x40>)
 800eb54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <std+0x44>)
 800eb58:	6224      	str	r4, [r4, #32]
 800eb5a:	6323      	str	r3, [r4, #48]	; 0x30
 800eb5c:	bd10      	pop	{r4, pc}
 800eb5e:	bf00      	nop
 800eb60:	0800ee69 	.word	0x0800ee69
 800eb64:	0800ee8b 	.word	0x0800ee8b
 800eb68:	0800eec3 	.word	0x0800eec3
 800eb6c:	0800eee7 	.word	0x0800eee7

0800eb70 <_cleanup_r>:
 800eb70:	4901      	ldr	r1, [pc, #4]	; (800eb78 <_cleanup_r+0x8>)
 800eb72:	f000 b8af 	b.w	800ecd4 <_fwalk_reent>
 800eb76:	bf00      	nop
 800eb78:	0800eab1 	.word	0x0800eab1

0800eb7c <__sfmoreglue>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	1e4a      	subs	r2, r1, #1
 800eb80:	2568      	movs	r5, #104	; 0x68
 800eb82:	4355      	muls	r5, r2
 800eb84:	460e      	mov	r6, r1
 800eb86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb8a:	f7ff fc23 	bl	800e3d4 <_malloc_r>
 800eb8e:	4604      	mov	r4, r0
 800eb90:	b140      	cbz	r0, 800eba4 <__sfmoreglue+0x28>
 800eb92:	2100      	movs	r1, #0
 800eb94:	e9c0 1600 	strd	r1, r6, [r0]
 800eb98:	300c      	adds	r0, #12
 800eb9a:	60a0      	str	r0, [r4, #8]
 800eb9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eba0:	f7fd fdc6 	bl	800c730 <memset>
 800eba4:	4620      	mov	r0, r4
 800eba6:	bd70      	pop	{r4, r5, r6, pc}

0800eba8 <__sfp_lock_acquire>:
 800eba8:	4801      	ldr	r0, [pc, #4]	; (800ebb0 <__sfp_lock_acquire+0x8>)
 800ebaa:	f000 b8b3 	b.w	800ed14 <__retarget_lock_acquire_recursive>
 800ebae:	bf00      	nop
 800ebb0:	24000a64 	.word	0x24000a64

0800ebb4 <__sfp_lock_release>:
 800ebb4:	4801      	ldr	r0, [pc, #4]	; (800ebbc <__sfp_lock_release+0x8>)
 800ebb6:	f000 b8ae 	b.w	800ed16 <__retarget_lock_release_recursive>
 800ebba:	bf00      	nop
 800ebbc:	24000a64 	.word	0x24000a64

0800ebc0 <__sinit_lock_acquire>:
 800ebc0:	4801      	ldr	r0, [pc, #4]	; (800ebc8 <__sinit_lock_acquire+0x8>)
 800ebc2:	f000 b8a7 	b.w	800ed14 <__retarget_lock_acquire_recursive>
 800ebc6:	bf00      	nop
 800ebc8:	24000a5f 	.word	0x24000a5f

0800ebcc <__sinit_lock_release>:
 800ebcc:	4801      	ldr	r0, [pc, #4]	; (800ebd4 <__sinit_lock_release+0x8>)
 800ebce:	f000 b8a2 	b.w	800ed16 <__retarget_lock_release_recursive>
 800ebd2:	bf00      	nop
 800ebd4:	24000a5f 	.word	0x24000a5f

0800ebd8 <__sinit>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	4604      	mov	r4, r0
 800ebdc:	f7ff fff0 	bl	800ebc0 <__sinit_lock_acquire>
 800ebe0:	69a3      	ldr	r3, [r4, #24]
 800ebe2:	b11b      	cbz	r3, 800ebec <__sinit+0x14>
 800ebe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe8:	f7ff bff0 	b.w	800ebcc <__sinit_lock_release>
 800ebec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebf0:	6523      	str	r3, [r4, #80]	; 0x50
 800ebf2:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <__sinit+0x68>)
 800ebf4:	4a13      	ldr	r2, [pc, #76]	; (800ec44 <__sinit+0x6c>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebfa:	42a3      	cmp	r3, r4
 800ebfc:	bf04      	itt	eq
 800ebfe:	2301      	moveq	r3, #1
 800ec00:	61a3      	streq	r3, [r4, #24]
 800ec02:	4620      	mov	r0, r4
 800ec04:	f000 f820 	bl	800ec48 <__sfp>
 800ec08:	6060      	str	r0, [r4, #4]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 f81c 	bl	800ec48 <__sfp>
 800ec10:	60a0      	str	r0, [r4, #8]
 800ec12:	4620      	mov	r0, r4
 800ec14:	f000 f818 	bl	800ec48 <__sfp>
 800ec18:	2200      	movs	r2, #0
 800ec1a:	60e0      	str	r0, [r4, #12]
 800ec1c:	2104      	movs	r1, #4
 800ec1e:	6860      	ldr	r0, [r4, #4]
 800ec20:	f7ff ff82 	bl	800eb28 <std>
 800ec24:	68a0      	ldr	r0, [r4, #8]
 800ec26:	2201      	movs	r2, #1
 800ec28:	2109      	movs	r1, #9
 800ec2a:	f7ff ff7d 	bl	800eb28 <std>
 800ec2e:	68e0      	ldr	r0, [r4, #12]
 800ec30:	2202      	movs	r2, #2
 800ec32:	2112      	movs	r1, #18
 800ec34:	f7ff ff78 	bl	800eb28 <std>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	61a3      	str	r3, [r4, #24]
 800ec3c:	e7d2      	b.n	800ebe4 <__sinit+0xc>
 800ec3e:	bf00      	nop
 800ec40:	0800f1f0 	.word	0x0800f1f0
 800ec44:	0800eb71 	.word	0x0800eb71

0800ec48 <__sfp>:
 800ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	f7ff ffac 	bl	800eba8 <__sfp_lock_acquire>
 800ec50:	4b1e      	ldr	r3, [pc, #120]	; (800eccc <__sfp+0x84>)
 800ec52:	681e      	ldr	r6, [r3, #0]
 800ec54:	69b3      	ldr	r3, [r6, #24]
 800ec56:	b913      	cbnz	r3, 800ec5e <__sfp+0x16>
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7ff ffbd 	bl	800ebd8 <__sinit>
 800ec5e:	3648      	adds	r6, #72	; 0x48
 800ec60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec64:	3b01      	subs	r3, #1
 800ec66:	d503      	bpl.n	800ec70 <__sfp+0x28>
 800ec68:	6833      	ldr	r3, [r6, #0]
 800ec6a:	b30b      	cbz	r3, 800ecb0 <__sfp+0x68>
 800ec6c:	6836      	ldr	r6, [r6, #0]
 800ec6e:	e7f7      	b.n	800ec60 <__sfp+0x18>
 800ec70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec74:	b9d5      	cbnz	r5, 800ecac <__sfp+0x64>
 800ec76:	4b16      	ldr	r3, [pc, #88]	; (800ecd0 <__sfp+0x88>)
 800ec78:	60e3      	str	r3, [r4, #12]
 800ec7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ec80:	f000 f847 	bl	800ed12 <__retarget_lock_init_recursive>
 800ec84:	f7ff ff96 	bl	800ebb4 <__sfp_lock_release>
 800ec88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec90:	6025      	str	r5, [r4, #0]
 800ec92:	61a5      	str	r5, [r4, #24]
 800ec94:	2208      	movs	r2, #8
 800ec96:	4629      	mov	r1, r5
 800ec98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec9c:	f7fd fd48 	bl	800c730 <memset>
 800eca0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eca4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eca8:	4620      	mov	r0, r4
 800ecaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecac:	3468      	adds	r4, #104	; 0x68
 800ecae:	e7d9      	b.n	800ec64 <__sfp+0x1c>
 800ecb0:	2104      	movs	r1, #4
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	f7ff ff62 	bl	800eb7c <__sfmoreglue>
 800ecb8:	4604      	mov	r4, r0
 800ecba:	6030      	str	r0, [r6, #0]
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d1d5      	bne.n	800ec6c <__sfp+0x24>
 800ecc0:	f7ff ff78 	bl	800ebb4 <__sfp_lock_release>
 800ecc4:	230c      	movs	r3, #12
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	e7ee      	b.n	800eca8 <__sfp+0x60>
 800ecca:	bf00      	nop
 800eccc:	0800f1f0 	.word	0x0800f1f0
 800ecd0:	ffff0001 	.word	0xffff0001

0800ecd4 <_fwalk_reent>:
 800ecd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd8:	4606      	mov	r6, r0
 800ecda:	4688      	mov	r8, r1
 800ecdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ece0:	2700      	movs	r7, #0
 800ece2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ece6:	f1b9 0901 	subs.w	r9, r9, #1
 800ecea:	d505      	bpl.n	800ecf8 <_fwalk_reent+0x24>
 800ecec:	6824      	ldr	r4, [r4, #0]
 800ecee:	2c00      	cmp	r4, #0
 800ecf0:	d1f7      	bne.n	800ece2 <_fwalk_reent+0xe>
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecf8:	89ab      	ldrh	r3, [r5, #12]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d907      	bls.n	800ed0e <_fwalk_reent+0x3a>
 800ecfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed02:	3301      	adds	r3, #1
 800ed04:	d003      	beq.n	800ed0e <_fwalk_reent+0x3a>
 800ed06:	4629      	mov	r1, r5
 800ed08:	4630      	mov	r0, r6
 800ed0a:	47c0      	blx	r8
 800ed0c:	4307      	orrs	r7, r0
 800ed0e:	3568      	adds	r5, #104	; 0x68
 800ed10:	e7e9      	b.n	800ece6 <_fwalk_reent+0x12>

0800ed12 <__retarget_lock_init_recursive>:
 800ed12:	4770      	bx	lr

0800ed14 <__retarget_lock_acquire_recursive>:
 800ed14:	4770      	bx	lr

0800ed16 <__retarget_lock_release_recursive>:
 800ed16:	4770      	bx	lr

0800ed18 <__swhatbuf_r>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	460e      	mov	r6, r1
 800ed1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed20:	2900      	cmp	r1, #0
 800ed22:	b096      	sub	sp, #88	; 0x58
 800ed24:	4614      	mov	r4, r2
 800ed26:	461d      	mov	r5, r3
 800ed28:	da07      	bge.n	800ed3a <__swhatbuf_r+0x22>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	602b      	str	r3, [r5, #0]
 800ed2e:	89b3      	ldrh	r3, [r6, #12]
 800ed30:	061a      	lsls	r2, r3, #24
 800ed32:	d410      	bmi.n	800ed56 <__swhatbuf_r+0x3e>
 800ed34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed38:	e00e      	b.n	800ed58 <__swhatbuf_r+0x40>
 800ed3a:	466a      	mov	r2, sp
 800ed3c:	f000 f8fa 	bl	800ef34 <_fstat_r>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	dbf2      	blt.n	800ed2a <__swhatbuf_r+0x12>
 800ed44:	9a01      	ldr	r2, [sp, #4]
 800ed46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed4e:	425a      	negs	r2, r3
 800ed50:	415a      	adcs	r2, r3
 800ed52:	602a      	str	r2, [r5, #0]
 800ed54:	e7ee      	b.n	800ed34 <__swhatbuf_r+0x1c>
 800ed56:	2340      	movs	r3, #64	; 0x40
 800ed58:	2000      	movs	r0, #0
 800ed5a:	6023      	str	r3, [r4, #0]
 800ed5c:	b016      	add	sp, #88	; 0x58
 800ed5e:	bd70      	pop	{r4, r5, r6, pc}

0800ed60 <__smakebuf_r>:
 800ed60:	898b      	ldrh	r3, [r1, #12]
 800ed62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed64:	079d      	lsls	r5, r3, #30
 800ed66:	4606      	mov	r6, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	d507      	bpl.n	800ed7c <__smakebuf_r+0x1c>
 800ed6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	2301      	movs	r3, #1
 800ed76:	6163      	str	r3, [r4, #20]
 800ed78:	b002      	add	sp, #8
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	ab01      	add	r3, sp, #4
 800ed7e:	466a      	mov	r2, sp
 800ed80:	f7ff ffca 	bl	800ed18 <__swhatbuf_r>
 800ed84:	9900      	ldr	r1, [sp, #0]
 800ed86:	4605      	mov	r5, r0
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7ff fb23 	bl	800e3d4 <_malloc_r>
 800ed8e:	b948      	cbnz	r0, 800eda4 <__smakebuf_r+0x44>
 800ed90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed94:	059a      	lsls	r2, r3, #22
 800ed96:	d4ef      	bmi.n	800ed78 <__smakebuf_r+0x18>
 800ed98:	f023 0303 	bic.w	r3, r3, #3
 800ed9c:	f043 0302 	orr.w	r3, r3, #2
 800eda0:	81a3      	strh	r3, [r4, #12]
 800eda2:	e7e3      	b.n	800ed6c <__smakebuf_r+0xc>
 800eda4:	4b0d      	ldr	r3, [pc, #52]	; (800eddc <__smakebuf_r+0x7c>)
 800eda6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	6020      	str	r0, [r4, #0]
 800edac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb0:	81a3      	strh	r3, [r4, #12]
 800edb2:	9b00      	ldr	r3, [sp, #0]
 800edb4:	6163      	str	r3, [r4, #20]
 800edb6:	9b01      	ldr	r3, [sp, #4]
 800edb8:	6120      	str	r0, [r4, #16]
 800edba:	b15b      	cbz	r3, 800edd4 <__smakebuf_r+0x74>
 800edbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edc0:	4630      	mov	r0, r6
 800edc2:	f000 f8c9 	bl	800ef58 <_isatty_r>
 800edc6:	b128      	cbz	r0, 800edd4 <__smakebuf_r+0x74>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	f023 0303 	bic.w	r3, r3, #3
 800edce:	f043 0301 	orr.w	r3, r3, #1
 800edd2:	81a3      	strh	r3, [r4, #12]
 800edd4:	89a0      	ldrh	r0, [r4, #12]
 800edd6:	4305      	orrs	r5, r0
 800edd8:	81a5      	strh	r5, [r4, #12]
 800edda:	e7cd      	b.n	800ed78 <__smakebuf_r+0x18>
 800eddc:	0800eb71 	.word	0x0800eb71

0800ede0 <_raise_r>:
 800ede0:	291f      	cmp	r1, #31
 800ede2:	b538      	push	{r3, r4, r5, lr}
 800ede4:	4604      	mov	r4, r0
 800ede6:	460d      	mov	r5, r1
 800ede8:	d904      	bls.n	800edf4 <_raise_r+0x14>
 800edea:	2316      	movs	r3, #22
 800edec:	6003      	str	r3, [r0, #0]
 800edee:	f04f 30ff 	mov.w	r0, #4294967295
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
 800edf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edf6:	b112      	cbz	r2, 800edfe <_raise_r+0x1e>
 800edf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edfc:	b94b      	cbnz	r3, 800ee12 <_raise_r+0x32>
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 f830 	bl	800ee64 <_getpid_r>
 800ee04:	462a      	mov	r2, r5
 800ee06:	4601      	mov	r1, r0
 800ee08:	4620      	mov	r0, r4
 800ee0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee0e:	f000 b817 	b.w	800ee40 <_kill_r>
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d00a      	beq.n	800ee2c <_raise_r+0x4c>
 800ee16:	1c59      	adds	r1, r3, #1
 800ee18:	d103      	bne.n	800ee22 <_raise_r+0x42>
 800ee1a:	2316      	movs	r3, #22
 800ee1c:	6003      	str	r3, [r0, #0]
 800ee1e:	2001      	movs	r0, #1
 800ee20:	e7e7      	b.n	800edf2 <_raise_r+0x12>
 800ee22:	2400      	movs	r4, #0
 800ee24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee28:	4628      	mov	r0, r5
 800ee2a:	4798      	blx	r3
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	e7e0      	b.n	800edf2 <_raise_r+0x12>

0800ee30 <raise>:
 800ee30:	4b02      	ldr	r3, [pc, #8]	; (800ee3c <raise+0xc>)
 800ee32:	4601      	mov	r1, r0
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	f7ff bfd3 	b.w	800ede0 <_raise_r>
 800ee3a:	bf00      	nop
 800ee3c:	24000020 	.word	0x24000020

0800ee40 <_kill_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	; (800ee60 <_kill_r+0x20>)
 800ee44:	2300      	movs	r3, #0
 800ee46:	4604      	mov	r4, r0
 800ee48:	4608      	mov	r0, r1
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	f7f4 f84f 	bl	8002ef0 <_kill>
 800ee52:	1c43      	adds	r3, r0, #1
 800ee54:	d102      	bne.n	800ee5c <_kill_r+0x1c>
 800ee56:	682b      	ldr	r3, [r5, #0]
 800ee58:	b103      	cbz	r3, 800ee5c <_kill_r+0x1c>
 800ee5a:	6023      	str	r3, [r4, #0]
 800ee5c:	bd38      	pop	{r3, r4, r5, pc}
 800ee5e:	bf00      	nop
 800ee60:	24000a58 	.word	0x24000a58

0800ee64 <_getpid_r>:
 800ee64:	f7f4 b83c 	b.w	8002ee0 <_getpid>

0800ee68 <__sread>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee70:	f000 f894 	bl	800ef9c <_read_r>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	bfab      	itete	ge
 800ee78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee7c:	181b      	addge	r3, r3, r0
 800ee7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee82:	bfac      	ite	ge
 800ee84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee86:	81a3      	strhlt	r3, [r4, #12]
 800ee88:	bd10      	pop	{r4, pc}

0800ee8a <__swrite>:
 800ee8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8e:	461f      	mov	r7, r3
 800ee90:	898b      	ldrh	r3, [r1, #12]
 800ee92:	05db      	lsls	r3, r3, #23
 800ee94:	4605      	mov	r5, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	4616      	mov	r6, r2
 800ee9a:	d505      	bpl.n	800eea8 <__swrite+0x1e>
 800ee9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea0:	2302      	movs	r3, #2
 800eea2:	2200      	movs	r2, #0
 800eea4:	f000 f868 	bl	800ef78 <_lseek_r>
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eeb2:	81a3      	strh	r3, [r4, #12]
 800eeb4:	4632      	mov	r2, r6
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	4628      	mov	r0, r5
 800eeba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eebe:	f000 b817 	b.w	800eef0 <_write_r>

0800eec2 <__sseek>:
 800eec2:	b510      	push	{r4, lr}
 800eec4:	460c      	mov	r4, r1
 800eec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeca:	f000 f855 	bl	800ef78 <_lseek_r>
 800eece:	1c43      	adds	r3, r0, #1
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	bf15      	itete	ne
 800eed4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eede:	81a3      	strheq	r3, [r4, #12]
 800eee0:	bf18      	it	ne
 800eee2:	81a3      	strhne	r3, [r4, #12]
 800eee4:	bd10      	pop	{r4, pc}

0800eee6 <__sclose>:
 800eee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeea:	f000 b813 	b.w	800ef14 <_close_r>
	...

0800eef0 <_write_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4d07      	ldr	r5, [pc, #28]	; (800ef10 <_write_r+0x20>)
 800eef4:	4604      	mov	r4, r0
 800eef6:	4608      	mov	r0, r1
 800eef8:	4611      	mov	r1, r2
 800eefa:	2200      	movs	r2, #0
 800eefc:	602a      	str	r2, [r5, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	f7f4 f82d 	bl	8002f5e <_write>
 800ef04:	1c43      	adds	r3, r0, #1
 800ef06:	d102      	bne.n	800ef0e <_write_r+0x1e>
 800ef08:	682b      	ldr	r3, [r5, #0]
 800ef0a:	b103      	cbz	r3, 800ef0e <_write_r+0x1e>
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}
 800ef10:	24000a58 	.word	0x24000a58

0800ef14 <_close_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4d06      	ldr	r5, [pc, #24]	; (800ef30 <_close_r+0x1c>)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	602b      	str	r3, [r5, #0]
 800ef20:	f7f4 f839 	bl	8002f96 <_close>
 800ef24:	1c43      	adds	r3, r0, #1
 800ef26:	d102      	bne.n	800ef2e <_close_r+0x1a>
 800ef28:	682b      	ldr	r3, [r5, #0]
 800ef2a:	b103      	cbz	r3, 800ef2e <_close_r+0x1a>
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	24000a58 	.word	0x24000a58

0800ef34 <_fstat_r>:
 800ef34:	b538      	push	{r3, r4, r5, lr}
 800ef36:	4d07      	ldr	r5, [pc, #28]	; (800ef54 <_fstat_r+0x20>)
 800ef38:	2300      	movs	r3, #0
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	4608      	mov	r0, r1
 800ef3e:	4611      	mov	r1, r2
 800ef40:	602b      	str	r3, [r5, #0]
 800ef42:	f7f4 f834 	bl	8002fae <_fstat>
 800ef46:	1c43      	adds	r3, r0, #1
 800ef48:	d102      	bne.n	800ef50 <_fstat_r+0x1c>
 800ef4a:	682b      	ldr	r3, [r5, #0]
 800ef4c:	b103      	cbz	r3, 800ef50 <_fstat_r+0x1c>
 800ef4e:	6023      	str	r3, [r4, #0]
 800ef50:	bd38      	pop	{r3, r4, r5, pc}
 800ef52:	bf00      	nop
 800ef54:	24000a58 	.word	0x24000a58

0800ef58 <_isatty_r>:
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4d06      	ldr	r5, [pc, #24]	; (800ef74 <_isatty_r+0x1c>)
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4608      	mov	r0, r1
 800ef62:	602b      	str	r3, [r5, #0]
 800ef64:	f7f4 f833 	bl	8002fce <_isatty>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_isatty_r+0x1a>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_isatty_r+0x1a>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	24000a58 	.word	0x24000a58

0800ef78 <_lseek_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_lseek_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f4 f82c 	bl	8002fe4 <_lseek>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_lseek_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_lseek_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	24000a58 	.word	0x24000a58

0800ef9c <_read_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4d07      	ldr	r5, [pc, #28]	; (800efbc <_read_r+0x20>)
 800efa0:	4604      	mov	r4, r0
 800efa2:	4608      	mov	r0, r1
 800efa4:	4611      	mov	r1, r2
 800efa6:	2200      	movs	r2, #0
 800efa8:	602a      	str	r2, [r5, #0]
 800efaa:	461a      	mov	r2, r3
 800efac:	f7f3 ffba 	bl	8002f24 <_read>
 800efb0:	1c43      	adds	r3, r0, #1
 800efb2:	d102      	bne.n	800efba <_read_r+0x1e>
 800efb4:	682b      	ldr	r3, [r5, #0]
 800efb6:	b103      	cbz	r3, 800efba <_read_r+0x1e>
 800efb8:	6023      	str	r3, [r4, #0]
 800efba:	bd38      	pop	{r3, r4, r5, pc}
 800efbc:	24000a58 	.word	0x24000a58

0800efc0 <_init>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	bf00      	nop
 800efc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc6:	bc08      	pop	{r3}
 800efc8:	469e      	mov	lr, r3
 800efca:	4770      	bx	lr

0800efcc <_fini>:
 800efcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efce:	bf00      	nop
 800efd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efd2:	bc08      	pop	{r3}
 800efd4:	469e      	mov	lr, r3
 800efd6:	4770      	bx	lr
